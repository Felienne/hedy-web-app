@top Program { eol* (Command eol+)* Command? }

Command {
    Assign | AssignList | Ask | Clear |Print | Turtle | Sleep | Add | Remove | If | Else | Repeat | For | Define | Call | Return | While | ErrorInvalid
}

@local tokens {    
    singleQuoteStringEnd { "'" | "\n" }
    @else singleQuoteStringContent
  }
  
  @skip {} {
    singleQuotedString { "'" (singleQuoteStringContent)* singleQuoteStringEnd }
}

@local tokens {    
    doubleQuoteStringEnd { '"' | "\n" }
    @else doubleQuoteStringContent
  }
  
  @skip {} {
    doubleQuotedString { '"' (doubleQuoteStringContent)* doubleQuoteStringEnd }
}

String { doubleQuotedString | singleQuotedString }


Print { print+ ( ListAccess | Expression | Call )+ }
Ask { Text (is+ | Op<"=">) ask+ ( ListAccess | Expression )+ }

AssignList { Text (is+ | Op<"=">) (Text+ | Number ) ~ambig  (Comma (Text+ | Number ))+ }
Assign { Text (is+ | Op<"=">) (Expression ~ambig  | ListAccess)+ }
Sleep { sleep+ (Expression | ListAccess | Call)? }
ListAccess { Text at+ (random+ | Text) }
Add { add+ (Expression | Call ) to_list+ Text }
Remove { remove+ (Expression | Call) from+ Text }
Clear { clear+ }

Turtle[@isGroup=turtle] {
    Forward { forward+ (Expression | ListAccess | Call) } |
    Turn { turn+ (Expression | ListAccess | Call) } |
    Color { color+ (Expression | ListAccess | Call)  }
}

If { ifs+ Condition ((and+ | or+) Condition)* }
Else { elses+ } 

Condition {
    PressedCheck { Text ~cond is+ pressed+ } |
    EqualityCheck { (Expression | Call) (is+ | Op<"="> Op<"=">? ) (Expression | Call) } |
    NotEqualCheck { (Expression | Call) (Op<"!=">) (Expression | Call) } |
    ComparisonCheck { (Expression | Call) (Op<">"> | Op<"<">) Op<"=">? (Expression | Call) } |
    InListCheck { (Expression ~cond | Call) ins+  Text } |
    NotInListCheck { (Expression ~cond | Call) not_in+  Text }
}

Repeat { repeat+ (Number | Text) times+ }

For { fors+ Text ins+ (Text | range+ (Text | Number) to+ (Text | Number)) }
While { while+ Condition ((and+ | or+) Condition)* }


Define { define+ Text (with+  Arguments)? }
Call { call+ Text (with+ Arguments) }
Return { returns+ ( ListAccess | Expression | Call)+ }

Arguments { argument (Comma argument)* }
argument { Expression | ListAccess }

ErrorInvalid[@dynamicPrecedence=-10] { Text+ }

Op<expr> { expr }

binaryExpression {
    Expression !times Op<"*" | "/"> Expression |
    Expression !plus Op<"+" | "-"> Expression
}

// I should add Call here, but it works for now
Expression {
    Number |
    Text |
    String |
    binaryExpression
}

@precedence {
    times @left,
    plus @right
}

@external specialize { Text } specializeKeyword from "./tokens" {
    ask[@name="ask"],
    at[@name="at"],
    random[@name="random"],
    ifs[@name="if"],
    pressed[@name="pressed"],
    elses[@name="else"],
    and[@name="and"],
    or[@name="or"],
    is[@name="is"],
    while[@name="while"]
}

@external extend { Text } extendKeyword from "./tokens" {
    print[@name="print"],
    forward[@name="forward"],
    turn[@name="turn"],
    color[@name="color"],
    sleep[@name="sleep"],
    add[@name="add"],
    from[@name="from"],
    remove[@name="remove"],
    to_list[@name="to_list"],
    clear[@name="clear"],    
    ins[@name="in"],
    not_in[@name="not_in"],
    repeat[@name="repeat"],
    times[@name="times"],
    fors[@name="for"],
    to[@name="to"],
    range[@name="range"],
    call[@name="call"],
    define[@name="define"],
    returns[@name="resturns"],
    with[@name="with"]
}

@tokens {
    @precedence {
        Number,
        Text
    }
    Comment { "#" ![\n]* }
    eol { "\n" }
    Comma { $[,،，、] } // every language comma is valid here
    Text { ![^\n,،，、 '"#+\-*/=><!]+ } // a little bit of a hack not to parse commas never, but lezer adds them as error nodes, so it still
    space { " " }
    digit { $[٠١٢٣٤٥٦٧٨٩۰۱۲۳۴۵۶۷۸۹0123456789] } // latin, arab and pa_PK (Panjabi) scripts
    Number { digit+ ("." digit+)? }
}

@skip { Comment | space }