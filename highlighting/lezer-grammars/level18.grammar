@top Program { eol* (Command eol+)* Command? }

Command {
    Assign | AssignList | Input | Clear | Print | Play | Turtle | Sleep | Add | Remove | If | Else | Repeat | For | Define | Call | Return | While | Elif | ErrorInvalid
}

@local tokens {    
    singleQuoteStringEnd { "'" | "\n" }
    @else singleQuoteStringContent
  }
  
  @skip {} {
    singleQuotedString { "'" (singleQuoteStringContent)* singleQuoteStringEnd }
}

@local tokens {    
    doubleQuoteStringEnd { '"' | "\n" }
    @else doubleQuoteStringContent
  }
  
  @skip {} {
    doubleQuotedString { '"' (doubleQuoteStringContent)* doubleQuoteStringEnd }
}

String { doubleQuotedString | singleQuotedString }

Print { print+  Op<"("> Arguments? Op<")"> }

AssignList { Text (is+ | Op<"=">) Op<"["> (String | Number ) ~ambig  (Comma (String | Number ))+ Op<"]">} // Comma doesn't really parse well if it is not separated by spaces
Assign { (Text | ListAccess) (is+ | Op<"=">) (Expression ~ambig )+ }
Input { Text (is+ | Op<"=">) input+ Op<"("> Arguments? Op<")"> }
Sleep { sleep+ (Expression | Call)? }

ListAccess { Text Op<"["> (random+ | Text | Number) Op<"]">}
Play { play+ Text+ }

Turtle[@isGroup=turtle] {
    Forward { forward+ (Expression | Call) } |
    Turn { turn+ (Expression | Call) } |
    Color { color+ (Expression | Call)  }
}   

Add { add+ (Expression | Call ) toList+ Text }
Remove { remove+ (Expression | Call) from+ Text }
Clear { clear+ }
ErrorInvalid[@dynamicPrecedence=-10] { Text+ }

If { ifs+ Condition ((and+| or+) Condition)* Op<":"> }
Else { elses+ Op<":"> }
Elif { elif+ Condition ((and+| or+) Condition)* Op<":"> }
Condition {    
    PressedCheck { Text ~cond is+ pressed+ } |
    EqualityCheck { (Expression | Call) (is+ | Op<"="> Op<"=">? ) (Expression | Call) } |
    NotEqualCheck { (Expression | Call) (Op<"!=">) (Expression | Call) } |
    ComparisonCheck { (Expression | Call) (Op<">"> | Op<"<">) Op<"=">? (Expression | Call) } |
    ListCheck { (Expression ~cond | Call) notIn+  Text }
}


Repeat { repeat+ (Number | Text) times+ }

For { fors+ Text ins+ (Text | range+ Op<"("> (Number | Text) Comma (Number | Text) (Comma (Number | Text))? Op<")">) Op<":"> }
While { whiles+ Condition ((and+| or+) Condition)* Op<":">}
Define { def+ Text Op<"("> Arguments? Op<")"> Op<":">}
Call { Text Op<"("> Arguments? Op<")"> }
Return { returns+ (Call)+ }


Arguments { argument (Comma argument)* }
argument { Expression | Call}

Op<expr> { expr }

binaryExpression {
    Expression !times Op<"*" | "/"> Expression |
    Expression !plus Op<"+" | "-"> Expression
}

// I should add Call here, but it works for now
Expression {
    Number |
    Text |
    String |
    ListAccess |
    binaryExpression
}

@precedence {
    times @left,
    plus @right
}


@external specialize { Text } specializeKeyword from "./tokens" {
    print[@name="print"],
    is[@name="is"],
    input[@name="input"],
    sleep[@name="sleep"],
    random[@name="random"],
    forward[@name="forward"],
    turn[@name="turn"],
    color[@name="color"],
    add[@name="add"],
    remove[@name="remove"],
    from[@name="from"],
    clear[@name="clear"],
    ifs[@name="if"],
    elses[@name="else"],
    and[@name="and"],
    or[@name="or"],
    pressed[@name="pressed"],
    notIn[@name="notIn"],
    ins[@name="in"],
    repeat[@name="repeat"],
    times[@name="times"],
    range[@name="range"],
    whiles[@name="while"],
    def[@name="def"],
    returns[@name="return"],
    fors[@name="for"],
    toList[@name="toList"],
    elif[@name="elif"]
}

@tokens {
    @precedence {
        Number,
        Text
    }
    Comment { "#" ![\n]* }
    eol { "\n" }
    Comma { $[,،，、] } // every language comma is valid here
    Text { !["\n,،，、 '+#/*\-=><!\]\[:()]+ } // a little bit of a hack not to parse commas never, but lezer adds them as error nodes, so it still
    space { " " }
    digit { $[٠١٢٣٤٥٦٧٨٩۰۱۲۳۴۵۶۷۸۹0123456789] } // latin, arab and pa_PK (Panjabi) scripts
    Number { digit+ ("." digit+)? }
}

@skip { Comment | space }
