levels:
    0:
        1:
            header: Welkom bij Hedy!
            text: Hedy is een programmeertaal.
        2:
            header: Programmeren
            text: |-
                Programmeren betekent de computer opdrachten geven, in de taal van de computer.

                Dat noemen we een programmeertaal.
        3:
            header: Programmeertaal
            text: |-
                Misschien ken je al wel een andere programmeertaal?
                Bijvoorbeeld:
                * Scratch
                * Python
                * HTML
        4:
            header: Programmeren
            text: |-
                Als je kan programmeren, dan kan je met code:
                * Interactieve verhalen maken
                * Tekeningen maken en die printen op papier of op een shirt
                * Je eigen apps maken voor op je telefoon
        5:
            header: Programmeren met Hedy
            text: In Hedy gebruiken we speciale codes, zoals `{print}`.
            code: '{print} Welcome to Hedy!'
        6:
            header: Programmeren met Hedy
            text: De code woorden worden in Hedy altijd roze.
            code: '{print} Welcome to Hedy!'
        7:
            header: Programmeren met Hedy
            text: Je kan je code opstarten met de Voer code uit knop onder het programmeerveld.
            code: '{print} Welcome to Hedy!'
        8:
            header: Programmeren met Hedy
            text: De uitvoer verschijnt dan aan de rechterkant.
            code: '{print} Welcome to Hedy!'
        9:
            header: Programmeren met Hedy
            text: De uitvoer kan ook een tekening zijn.
            code: |-
                {forward} 100
                {turn} left
    1:
        1:
            header: Welkom bij level 1!
            text: |-
                We beginnen level 1 met het maken van een interactief verhaal.

                Daarvoor hebben we drie tekstcodes nodig.
        2:
            header: 'Hedy level 1: {print}'
            text: |-
                De eerste code die je kan gebruiken in level 1 is `{print}`.

                `print` zorgt ervoor dat er tekst in het uitvoerveld komt.
            code: '{print} Show text on the screen'
        3:
            header: 'Hedy level 1: {ask}'
            text: |-
                De tweede code die je kan gebruiken in level 1 is `{ask}`.

                Met `{ask}` kan je een vraag stellen die moet worden beantwoord.
            code: |-
                {print} Welcome to your own rock scissors paper!
                {ask} What will you choose?
        4:
            header: 'Hedy level 1: {echo}'
            text: |-
                De laatste tekstcode in level 1 is `{echo}`.

                Met `{echo}` kan je de invoer van een `{ask}` herhalen.
            code: |-
                {print} Hello!
                {ask} What is your name?
                {echo} hello
        5:
            header: Programmeren maar!
            text: |-
                Met `{print}`, `{ask}` en `{echo}` kun je al een klein verhaal programmeren.
                Dit is een goed moment om de Papegaai, Verhaal en Steen, Schaar, Papier avonturen te proberen.
            editor: /hedy/1
        6:
            header: Programmeren maar!
            text: Advonturen staan in de tabbladen.
        7:
            header: Programmeren maar!
            text: Je kan de gele knopjes gebruiken om voorbeeldcodes te kopiëren.
            editor: /hedy#print_command
        8:
            header: Tekenen met de schildpad
            text: Nu we de tekstcodes hebben leren kennen, gaan we tekenen.
        9:
            header: 'Tekenen met de schildpad: {forward}'
            text: Met `{forward}` kun je de schildpad vooruit laten bewegen.
        10:
            header: 'Tekenen met de schildpad: {turn}'
            text: Met `{turn}` draait de schildpad links (`{turn} {left}`) of rechts (`{turn} {right}`).
            code: |-
                {forward} 50
                {turn} left
        11:
            header: 'Drawing with the turtle: {turn}'
            text: '`{turn}` is used to make the turtle turn left or right.'
            code: |-
                {forward} 50
                {turn} left
        12:
            header: Debugging
            text: Debugging a code means getting rid of mistakes in the code. Let's debug this code together. Click the ladybug button to start the debugger.
            code: |-
                I am DJ Hedy
                {print} What song would you like to hear?
                {ask} I like that song too!
                {print} Next up... {echo}
        13:
            header: Let the programming fun begin!
            text: Enjoy the adventures in level 1!
    2:
        1:
            header: Welkom bij level 2
            text: |-
                In dit level leer je variabelen te gebruiken.

                Een variabele is een woord waarin je informatie kunt opslaan.

                Bijvoorbeeld: jouw naam, leeftijd of favoriete sportteam.
        2:
            header: Variabelen
            text: Om een variabele te maken of 'in te stellen' gebruiken we het `{is}` commando.
            code: |-
                name {is} Hedy
                age {is} 15
                {print} name is age years old
        3:
            header: Interactief
            text: |-
                We kunnen ook een variabele instellen door vragen te stellen.

                Het antwoord op de vraag wordt dan opgeslagen in de variabele.

                Zo hebben we het `{echo}`  commando niet meer nodig.
            code: |-
                name {is} {ask} What is your name?
                {print} Hello name
        4:
            header: Meerdere variabelen
            text: Nu we variabelen kunnen gebruiken, kunnen we meteen ook meerdere variabelen gebruiken in tegenstelling tot maar één `{echo}`commando.
            code: |-
                name {is} {ask} What is your name?
                {print} Hello name
                age {is} {ask} How old are you?
                {print} name is age years old.
        5:
            header: '{Sleep}'
            text: Je kunt het `{sleep}` commando gebruiken om de code een tijdje op pauze te zetten.
            code: |-
                {print} My favorite colour is...
                {sleep} 2
                {print} green!
        6:
            header: '{Sleep} 5'
            text: |-
                Je kunt een getal achter het `{sleep}` commando typen als je een langere stilte wilt.

                Als je wil, kun je een zelfs een variabele gebruiken in plaats van een nummer om te bepalen hoe lang het programma moet pauseren.
            code: |-
                pause {is} 10
                {print} My favorite colour is...
                {sleep} pause
                {print} green!
        7:
            header: Debugging
            text: Debugging a code means getting rid of mistakes in the code. Let's debug this code together. Click the ladybug button to start the debugger.
            code: |-
                {print} Welcome to the donut shop!
                filling {is} What kind of filling would you like?
                {print} You have chosen... Filling! Yum!
                topping {ask} What kind of topping would you like?
                topping is delicious!
                {print} I'll go get your donut. {sleep}
                {print} Here you go! A filling donut with toping!
                {ask} Have a nice day!
        8:
            header: Veel programmeerplezier!
            text: Veel plezier met de avonturen in level 3!
    3:
        1:
            header: Welkom bij level 3
            text: In dit level leer je een lijstje te maken, items aan het lijstje toe te voegen of verwijderen en een willekeurig item uit het lijstje kiezen.
        2:
            header: Een lijst maken
            text: |-
                Je maakt een lijst met `{is}`.

                Scheid de items op de lijst met een komma.
            code: |-
                animals {is} dogs, cats, kangaroos
                ```
        3:
            header: '{At} {random}'
            text: |-
                Je kunt na het maken van een lijstje het `{at}` `{random}` commando gebruiken.
                De computer kiest dan een willekeurig item van het lijstje.
                Je krijgt bij deze code dus elke keer dat je het uitvoert een verschillende uitvoer.
            code: |-
                animals {is} dogs, cats, kangaroos
                {print} animals {at} {random}
                ```
        4:
            header: '{at} {random} in een zin'
            text: Je kunt `{at}` `{random}` ook midden in een zin gebruiken.
            code: |-
                animals {is} dogs, cats, kangaroos
                {print} My favorite animal is animals {at} {random}
                ```
        5:
            header: '{Add} {to}'
            text: |-
                Je kunt items aan een lijst toevoegen met het `{add}` `{to}` commando.

                Je kunt  zelf kiezen wat je aan de lijst toevoegt, of je kunt de speler laten kiezen.
                Dat doe je door `{add}` `{to}` te gebruiken in combinatie met een `{ask}` commando.
            code: |-
                animals {is} dog, cat, kangaroo
                like {is} {ask} What is your favorite animal?
                {add} like {to_list} animals
                {print} I choose animals {at} {random}
        6:
            header: '{remove} {from}'
            text: |-
                Het tegenovergestelde van `{add}` `{to}` is  `{remove}` `{from}`.
                Met dit commando haal je dus juist items van het lijstje af.
            code: |-
                animals {is} dog, cat, kangaroo
                dislike {is} {ask} What animal do you not like?
                {remove} dislike {from} animals
                {print} I choose animals {at} {random}
        7:
            header: Debugging
            text: Let's debug this code!
            editor: |-
                    music_genres {is} rock, pop, metal, indie, jazz
                    chosen_genre is music {at} {random}
                    {print} Let's listen to chosen genre
                    nice {ask} Do you like that genre?
                    {remove} chosen_genre {from} chosen_genre
                    second_choice {is} music_genres
                    {print} or do you prefer... second_choice {at} {random}
                    {remove} second_choice {to} music_genres
                    {print} I like music_genre {random} best!
        8:
            header: Aan de slag!
            text: Veel plezier met de avonturen in level 3!
    4:
        1:
            header: Welkom bij level 4
            text: In dit level leer je aanhalingstekens te gebruiken.
            code: '{print} ''print with quotes!'''
        2:
            header: Probleem
            text: 'In de vorige levels heb je dit probleem misschien gezien:'
            code: |-
                name {is} Sophie
                {print} My name is name
        3:
            header: Aanhalingstekens zijn de oplossing
            text: |-
                In dit level leer je het probleem op te lossen met aanhalingstekens.

                Dit zorgt er ook voor dat je code meer begint te lijken op 'echte' Python code.
        4:
            header: Aanhalingstekens en {print}
            text: Elke keer als je het `{print}` commando gebruikt, moet je de tekst die je letterlijk op het uitvoerscherm wil zien tussen aanhalingstekens zetten.
            code: '{print} ''print with quotes!'''
        5:
            header: Aanhalingstekens en {ask}
            text: Dit geldt ook voor `{ask}` .
            code: name {is} {ask} 'name please?'
        6:
            header: Aanhalingstekens en variabelen
            text: |-
                De naam van je variabele wil je niet letterlijk in het uitvoerscherm zien verschijnen.
                Daarom moeten variabelenamen buiten de aanhalingstekens gehouden worden! Kijk maar:
            code: |-
                name {is} Harry
                {print} 'Hello ' name
        7:
            header: Aanhalingstekens en variabelen
            text: |-
                Als een variabele midden in een zin staat, moet de variabele nog steeds buiten de aanhalingstekens gezet worden.
                De rest van de zin moet daarentegen wel binnen aanhalingstekens. Dat ziet er dan zo uit:
            code: |-
                name {is} Harry
                {print} 'Hello ' name ', how are you?'
        8:
            header: Aanhalingstekens en hoge komma's
            text: |-
                Let op! Nu we aanhalingstekens gebruiken, kun je geen hoge komma's gebruiken voor andere doeleinden.

                Een hoge komma voor een meervoudsvorm, zoals auto's, of een hoge komma voor 's middags, maken Hedy in de war.
                Kijk maar eens wat er gebeurt als je deze woorden probeert te typen...
            code: '{print} ''This won''t work!'''
        9:
            header: '{clear}'
            text: |-
                In dit level is het `{clear}` commando ook nieuw.
                Hiermee kun je alle tekst van je uitvoerscherm wissen.

                Let op dat je hierbij ook altijd een `{sleep}` commando gebruikt. Doe je dit niet, dan wist de computer alle tekst al van je scherm voordat je het kan lezen!
            code: |-
                {print} '3'
                {clear}
                {print} '2'
                {clear}
                {print} '1'
                {clear}
                {print} 'SURPRISE!'
        10:
            header: Debugging
            text: Let's debug this code!
            code: |-
                    {clear}
                    {print} What a nice day to go to the beach!
                    {ask} 'Do you want to build a sandcastle or swim in the ocean?'
                    {print} 'You would like to activity '
                    {print} 'I'd like to do that too'
                    {print} 'Look at these beautiful seashells!'
                    colors {is} 'orange, silver, white, brown'
                    {print} 'I love the colors {at} {random} one!'
                    choice {is} {ask} Which one do you like?
        11:
            header: Klaar voor de start? Af!
            text: Veel plezier met de avonturen in level 4!
    5:
        1:
            header: Welkom bij level 5
            text: 'In dit level leer je 3 nieuwe commando''s:  `{if}`, `{else}` en `{in}`.'
        2:
            header: '{if}'
            text: |-
                Door {if} kun je kiezen uit twee opties.
                In dit voorbeeld wordt er bijvoorbeeld 'nice' geprint als de speler 'Hedy' antwoordt.
                Antwoordt de speler iets anders, dan doet de computer niets.
            code: |-
                name {is} {ask} 'what is your name?'
                {if} name {is} Hedy {print} 'nice'
        3:
            header: Vergeet het print commando niet
            text: Als je een `{if}` commando gebruikt, vergeet dan niet om ook een `{print}` commando te gebruiken.
            code: '{if} name {is} Hedy ''nice'''
        4:
            header: '{else}'
            text: |-
                Als je een {if} gebruikt, kun je ook een {else} toevoegen.
                Als het antwoord op de vraag 'Hedy' is, zegt de computer 'leuk'.
                Is het antwoord iets anders, dan print de computer 'minder leuk'.
            code: '{if} name {is} Hedy {print} ''nice'' {else} {print} ''boo!'''
        5:
            header: Lange regels
            text: |-
                Door {if} en {else} te gebruiken in één regel, kunnen je regels erg lang worden.

                Daarom mag je de commando's ook op twee losse regels gerbuiken.
            code: |-
                {if} name {is} Hedy {print} 'nice'
                {else} {print} 'boo!'
        6:
            header: Nog iets nieuws!
            text: |-
                Als je hebt geoefend met  `{if}` en `{else}`, kun je aan de slag met het`{in}` commando.

                Met `{in}`  kun je de computer laten checken of iets in jouw lijstje staat. Kijk maar naar het voorbeeld:

                Let daarbij wel op dat Hedy hoofdlettergevoelig is. Als je "Groen" intikt inplaats van "groen", dan zegt Hedy "meh".
            code: |-
                pretty_colors {is} green, yellow
                favorite_color {is} {ask} 'What is your favorite color?'
                {if} favorite_color {in} pretty_colors {print} 'pretty!'
                {else} {print} 'meh'
        7:
            header: Werken maar!
            text: Veel plezier met de avonturen in level 5!
    6:
        1:
            header: Welkom bij level 6
            text: In dit level kunnen we gaan rekenen in onze codes.
        2:
            header: Optellen
            text: Wil je optellen, dan gebruik je het plusteken.
            code: '{print} ''5 plus 5 is '' 5 + 5'
        3:
            header: Aftrekken
            text: Wil je twee getallen van elkaar aftrekken, gebruik dan het minteken.
            code: '{print} ''5 minus 5 is '' 5 - 5'
        4:
            header: Vermenigvuldigen
            text: Wil je vermenigvuldigen, gebruik dan het sterretje.
            code: '{print} ''5 times 5 is '' 5 * 5'
        5:
            header: Delen
            text: Voor delen gebruik je de slash.
            code: '{print} ''5 divided by 5 is '' 5 / 5'
        6:
            header: Samenvatting
            text: 'Je kan deze tekens dus gebuiken om mee te rekenen: +, -, * en /.'
            code: |-
                {print} '5 plus 5 is ' 5 + 5
                {print} '5 minus 5 is ' 5 - 5
                {print} '5 times 5 is ' 5 * 5
                {print} '5 divided by 5 is ' 5 / 5
        7:
            header: Het = symbool
            text: |-
                Vanaf nu kun je het = symbool gebruiken in plaats van het`{is}` commando.
                Dit geldt voor getallen en woorden, en het geldt ook na  `{if}` of `{else}` commando's.
            code: |-
                name = Hedy
                answer = 20 + 4
        8:
            header: Rekenen met variabelen
            text: 'Je kunt rekenen met getallen, maar je kunt ook variabelen gebruiken in je berekeningen. Kijk maar:'
            code: |-
                number_1 = {ask} 'Fill in the first number:'
                number_2 = {ask} 'Fill in the second number:'
                correct_answer = number_1 * number_2
                {print} number_1 ' times ' number_2 ' is ' correct_answer
        9:
            header: Aan de slag!
            text: Veel plezier met de avonturen in level 6!
    7:
        1:
            header: Welkom bij level 7
            text: In dit level leer je hoe je een regel code zo vaak als je wil kunt herhalen.
        2:
            header: '{repeat} 3 {times}'
            text: |-
                Wil je een regel code herhalen, gebruik dan deze code `{repeat}` 3 `{times}`.

                Wil je de regel vaker herhalen dan 3 keer, verander dan simpleweg het getal.

                Bijvoorbeeld: Wil je in je spannende verhaal een personage 5x om hulp laten schreeuwen. Doe dat dan zo:
            code: |-
                {print} 'The prince kept calling for help'
                {repeat} 5 {times} {print} 'Help!'
                {print} 'Why is nobody helping me?'
        3:
            header: Vergeet print niet!
            text: Als je {repeat} gebruikt, vergeet dan {print} niet!
            code: '{repeat} 5 {times} ''Help!'''
        4:
            header: '{repeat} met {ask}'
            text: Je kunt {repeat} ook gebruiken met `{ask}`, `{if}` of `{else}`.
            code: |-
                {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                {else} {repeat} 3 {times} {print} 'You have learned something new!'
        5:
            header: Klaar voor de start? Af!
            text: Veel plezier met de avonturen in level 7!
    8:
        1:
            header: Welkom bij level 8
            text: In dit level leer je inspringen bij  `{repeat}`, `{if}` en `{else}`, om de commando's te gebruiken over meerdere regels code.
        2:
            header: '{repeat} hiervoor'
            text: |-
                Voor dit level zag `{repeat}` er zo uit:
                Je kon het maar gebruiken over 1 regel.
            code: '{repeat} 5 {times} {print} ''Help!'''
        3:
            header: '{repeat} nu'
            text: |-
                In dit level kun je meerdere regels code herhalen. Om dit te doen moet je de computer duidelijk maken welke regels bij elkaar horen en dus herhaald moeten worden.
                Dit doe je door in te springen.

                Inspringen doe je met 4 spaties (of een tab) aan het begin van elke regel die herhaald moet worden. Zoals in het voorbeeld:
            code: |-
                {repeat} 5 {times}
                    {print} 'Hello everyone'
                    {print} 'This will be printed 5 times'
        4:
            header: '{repeat} nu'
            text: |-
                Als je wil kun je onder het blok van regels die herhaald gaan worden gewoon weer verder typen zonder in te springen.
                De regels die niet inspringen worden dan niet herhaald.
            code: |-
                {repeat} 3 {times}
                    {print} 'Hello!'
                {print} 'We are done repeating!'
        5:
            header: '{if} en {else} hiervoor'
            text: |-
                Hetzelfde geldt voor `{if}` en `{else}`.
                Hiervoor gebruikte je deze commando's zo:
            code: |-
                {if} name {is} Hedy {print} 'nice'
                {else} {print} 'boo!'
        6:
            header: '{if} en {else} nu'
            text: Bij {if} en {else} spring je nu ook in.
            code: |-
                name = {ask} 'What is your name?'
                {if} name {is} Hedy
                    {print} 'Welcome Hedy'
                {else}
                    {print} 'Welcome programmer!'
        7:
            header: Stoppen met inspringen
            text: Net als bij {repeat}, kun je stoppen met inspringen. Hierdoor worden de regels altijd getoond en niet alleen als de stelling waar is.
            code: "name = {ask} 'What is your name?'\n{if} name {is} Hedy\n    {print} 'Welcome Hedy'\n{else}\n    {print} 'Welcome programmer!' \n{print} '3..2..1.. Start programming!'"
        8:
            header: '{if}jes in {if}jes'
            text: |-
                Misschien heb je al bedacht om te proberen om een {if} in een {repeat} te stoppen, of andersom.
                Voor nu kan dit nog niet. In hoger levels mag dit wel, maar we willen je eerst even goed laten oefenen met het inspringen bij deze commando's.
        9:
            header: Op naar de avonturen!
            text: Veel plezier met de avonturen in level 8!
    9:
        1:
            header: Welkom bij level 9
            text: |-
                In dit level leer je meerdere regels code te gebruiken na een `{if}` of na een `{repeat}` commando.

                Je mag zelfs een `{repeat}` commando in een ander `{repeat}`  commando zetten.
        2:
            header: Meerdere regels na `{repeat}`
            text: Je mag meerdere regels gebruiken na `{repeat}`.
            code: |-
                {repeat} 3 {times}
                    food = {ask} 'What do you want?'
                    {if} food {is} pizza
                        {print} 'nice!'
                    {else}
                        {print} 'pizza is better'
        3:
            header: Inspringen is belangrijk!
            text: Inspringen is erg belanrgijk om de computer te vertellen welke regels herhaald moeten worden en welke niet.
            code: |-
                {repeat} 3 {times}
                    {print} 'This line will be repeated...'
                    {print} 'This one too...'
                {print} 'but this one will not!'
        4:
            header: Meerdere regels na `{if}`
            text: Je mag ook meerdere regels gebruiken na een `{if}`.
            code: |-
                continue = {ask} 'Do you want to continue?'
                {if} continue = yes
                    sure = {ask} 'Are you sure?'
                    {if} sure {is} yes
                        {print} 'We will continue'
                    {else}
                        {print} 'You are not sure'
                {else}
                    {print} 'You do not want to continue'
        5:
            header: Inspringen is belangrijk
            text: Ook hier is inspringen superbelangrijk! Het kan een groot verschil maken in je code.
            code: |-
                continue = {ask} 'Do you want to continue?'
                {if} continue = yes
                    sure = {ask} 'Are you sure?'
                    {if} sure {is} yes
                        {print} 'We will continue'
                {else}
                    {print} 'You are not sure'
        6:
            header: Een `{if}` in een `{repeat}`
            text: |-
                Nu je meerdere regels kunt gebruiken na deze commando's, kun je ze ook in elkaar zetten.
                Bekijk dit voorbeeld maar eens:
            code: |-
                {repeat} 3 {times}
                    food = {ask} 'What do you want?'
                    {if} food {is} pizza
                        {print} 'nice!'
                    {else}
                        {print} 'pizza is better'
        7:
            header: Let op het inspringen
            text: Zie je hoe de 4e en 6e regel van deze code beginnen met 8 spaties?
            code: |-
                {repeat} 3 {times}
                    food = {ask} 'What do you want?'
                    {if} food {is} pizza
                        {print} 'nice!'
                    {else}
                        {print} 'pizza is better'
        8:
            header: Let's go!
            text: Veel plezier met de avonturen in level 9!
    10:
        1:
            header: Welkom bij level 10
            text: 'In dit level leer je het nieuwe commando: `{for}`.'
        2:
            header: '{for}'
            text: Met {for} kun je een lijst maken en alle items op die lijst gebruiken. `{for}` creëert net als {repeat} en {if} een blok waarbij je 4 spaties moet inspringen.
            code: |-
                animals = dog, cat, blobfish
                {for} animal {in} animals
                    {print} 'I love ' animal
        3:
            header: '{for}'
            text: 'Hier zie je een ander voorbeeld van `{for}`:'
            code: |-
                days = Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
                names = mom, dad, Emma, Sophie
                {for} day {in} days
                    {print} names {at} {random} ' does the dishes on ' day
        4:
            header: Programmeertijd!
            text: Veel plezier met de avonturen in level 10!
    11:
        1:
            header: Welkom bij level 11
            text: |-
                In dit level leer je een nieuwe vorm van `{for}`. In de eerdere levels gebruikte je `{for}` voor een lijstje, maar we kunnen het ook gebruiken met getallen.
                Hierdoor hebben we het `{repeat}` commando niet meer nodig.
        2:
            header: '{for}'
            text: 'Zo ziet de nieuwe vorm van `{for}` eruit:'
            code: |-
                {for} counter {in} {range} 1 {to} 10
                    {print} counter
                {print} 'Ready or not. Here I come!'
        3:
            header: De variabele i
            text: |-
                In de vorige slide heette de variabele 'teller', omdat hij aan het aftellen was.
                Je kunt een variabele natuurlijk alle namen geven die je wil.
                In Python is de standaard naam die in deze situatie voor variabelen gebruikt wordt 'i'.
            code: |-
                number = 10
                {for} i {in} {range} 1 {to} 10
                    {print} i * number
        4:
            header: Lekker programmeren!
            text: Veel plezier met de avonturen in level 11!
    12:
        1:
            header: Welkom bij level 12
            text: Vanaf dit level kun je decimale getallen gebruiken en er is een aantal aanpassingen gedaan bij de aanhalingstekens.
        2:
            header: Aanhalingstekens
            text: |-
                In dit level is er iets aangepast aan de aanhalingstekens.
                Vanaf nu moet **alle tekst** in aanhalingstekens. Dus ook de waarden die je aan variabelen geeft, items op lijsten en tekst na {if} commando's.
            code: |-
                name = 'Hedy the Robot'
                {print} 'Hello ' name
        3:
            header: Decimale getallen
            text: |-
                Vanaf nu kun je decimale getallen gebruiken. Dit kan bijvoorbeeld leuk zijn in jouw restaurantprogramma!

                Getallen hoeven geen aanhalingstekens.
            code: |-
                {print} 'decimal numbers now need to use a dot'
                {print} 2.5 + 2.5
        4:
            header: Functies!
            text: |-
                In dit level leer je functies te gebruiken. Een fucntie is een blokje code dat je gemakkelijk meerdere keren kunt gebruiken. Functies helpen je de code te organiseren en stuken steeds opnieuw te gebruiken. Gebruik {define} om een functie te maken en een naam te geven. Typ daarna alle regels die je in de functie wil hebben in een ingesprongen blokje onder de regel met {define}. Laat een regel leeg om je code er netjes uit te laten zien. Fantastisch! Je hebt een functie gemaakt!

                Nu kun je dit blokje code meermaals gebruiken. Je roept de functie op met {call}! Je hoeft de code dan niet helemaal opnieuw te typen.
        5:
            header: Twinkle Twinkle little star!
            text: |-
                In dit programma zie je een voorbeeld van een functie.
                Laten we kijken wat er gebeurt als je de rest van het lied aanvult!
            code: |-
                {define} twinkle
                     {print} 'Twinkle'
                     {print} '...'

                 {call} twinkle
                 {print} 'Up above the world so high'
                 {print} 'Like a diamond in the sky'
                 {call} twinkle
        6:
            header: Functies
            text: Zoals je kunt zien in de voobeelden is een functie een blokje code dat je vaker kunt oproepen. Je gebruikt `{define}` om de functie te maken en `{call}` om hem te gebruiken.
        7:
            header: Klaar om het te gaan proberen?
            text: Veel plezier met de avonturen in level 12!
    13:
        1:
            header: Welkom bij level 13
            text: We gaan dit level `{and}` en `{or}` leren! Als je 2 stellingen wil checken, komen deze commando's goed van pas.
        2:
            header: '{and}'
            text: |-
                {and} gebruik je altijd in combinatie met een {if}.
                Met dit commando kun je checken of 2 stellingen allebei waar zijn. Bijvoorbeeld:
            code: |-
                name = {ask} 'what is your name?'
                age = {ask} 'what is your age?'
                {if} name {is} 'Hedy' {and} age {is} 2
                    {print} 'You are the real Hedy!'
        3:
            header: '{or}'
            text: |-
                {or} werkt op dezelfde manier als `{and}`, maar dan hoeft maar één van de twee stellingen waar te zijn.

                Laten we kijken wat er gebeurt als je de `{and}` in het voorbeeld verandert naar `{or}`.
            code: |-
                name = {ask} 'what is your name?'
                {if} name {is} 'Hedy' {or} name {is} 'hedy'
                    {print} 'Welcome!!'
        4:
            header: Functies met argumenten
            text: In het vorige level heb je geleerd om functies te gebruiken. Nu leer je functies te gebruiken met **argumenten**. Een argument is een variabele die je alleen gebruikt in een functie.Daarbuiten wordt de variabele niet gebruikt.
        5:
            header: Voorbeeld
            text: |-
                In dit voorbeeld zie je hoe het argument 'plaats' gebruikt wortd bij een functie.
                Voer de code uit en verander 'ocean' en 'sea' naar iets anders en zie wat er gebeurt...
            code: |-
                {define} song {with} place
                    {print} 'My Bonnie is over the ' place

                {call} song {with} 'ocean'
                {call} song {with} 'sea'
                {call} song {with} 'ocean'
        6:
            header: Voorbeeld met variabele
            text: |-
                Nu je hebt gezien hoe argumenten werken, kun je ze ook combineren met een vraag.

                Wat gebeurt er als je deze aanpassingen maakt?
                ```
                define lied with plaats
                    print 'My Bonnie is ' plaats

                antwoord = ask 'Waar is Bonnie?'
                call song with antwoord
                ```
            code: |-
                {define} song {with} place
                    {print} 'My Bonnie is over the ' place

                {call} song {with} 'ocean'
                {call} song {with} 'sea'
                {call} song {with} 'ocean'
        7:
            header: Nog meer vragen!
            text: |-
                Je kunt zelfs meerdere vragen combineren met de fucnties. Type deze code en kijk maar wat er gebeurt.

                Let op! Zie je hoe de variabele en de argumenetn nu dezelfde naam hebben. Dat mag!
                Raak je hiervan in de war? Gebruik dan verschillende namen, want dat mag ook gewoon.
                ```
                define lied with naam, plaats
                    print 'My ' naam ' is ' plaats

                naam = ask 'Wie?'
                place = ask 'Waar is diegene?'
                call lied with naam, plaats
                ```
            code: |-
                {define} song {with} place
                    {print} 'My Bonnie is over the ' place

                {call} song {with} 'ocean'
                {call} song {with} 'sea'
                {call} song {with} 'ocean'
        8:
            header: Let's go!
            text: Veel plezier met de avonturen in level 13!
    14:
        1:
            header: Welkom bij level 14
            text: In dit level leer je een aantal nieuwe symbolen die je programma's kunnen verbeteren, zoals >.
        2:
            header: Symbolen
            text: |-
                Deze nieuwe symbolen kun je gebruiken:

                  De >  betekent groter dan...

                  De >= betekent groter dan of gelijk aan...

                  De <  betekent kleiner dan...

                  De <= betekent kleiner dan of gelijk aan...

                Hier zie je een voorbeeld van hoe je deze symbolen kunt gebruiken.
            code: |-
                age = {ask} 'How old are you?'
                {if} age < 13
                    {print} 'You are younger than me!'
                {else}
                    {print} 'You are older than me!'
        3:
            header: Symbolen
            text: |-
                Je kunt ook deze twee symbolen gebruiken:

                  == is hetzelfde als.

                  != is niet

                  == gebruik je bij een `{if}`. Kijk maar:
            code: |-
                answer = {ask} 'Do you want to learn more?'
                {if} answer == 'yes'
                    {print} 'Go to the next adventure!'
                {if} answer != 'yes'
                    {print} 'That is a shame!'
        4:
            header: Return value
            text: In de vorige levels heb je over functies met argumenten geleerd. Waar je functies ook goed voor kunt gebruiken is om ze iets uit te laten rekenen. Je kunt de fucntie een som geven en de fucntie berekent dan het antwoord voor je. Het antwoord dat je terugkrijgt noem je de **return value**.
        5:
            header: Return value
            text: Bijvoorbeeld, in deze code wordt de nieuwe prijs van een item berekend door de functie bereken_nieuwe_prijs. De nieuwe prijs is hierbij dus de return value.
            code: |-
                {define} calculate_new_price {with} amount, percentage
                    percentage = percentage / 100
                    discount_amount = amount * percentage
                    return amount - discount_amount

                old_price = {ask} 'How much is on the price tag?'
                discount = {ask} 'What percentage is the discount?'

                new_price = {call} calculate_new_price {with} old_price, discount
                {print} 'The new price is ' new_price ' dollar'
        6:
            header: Aan de slag!
            text: Veel plezier met de avonturen in level 14!
    15:
        1:
            header: Welkom bij level 15
            text: In dit level leer je over de  `{while}` lus.
        2:
            header: '{while}'
            text: |-
                Nu gaan we een nieuwe lus leren: De {zolang} lus! We gaan door zo lang het statement dat we hebben waar is. Vergeet dus niet in de loop de waarde te veranderen.

                Dus bij de voorbeeldcode gaan we door totdat er een goed antwoord is gegeven. Als er nooit een goed antwoord wordt gegeven, dan stopt de lus nooit!
            code: |-
                answer = 0
                {while} answer != 25
                    answer = {ask} 'What is 5 times 5?'
                {print} 'A correct answer has been given'
        3:
            header: Let's try it out!
            text: Veel plezier met de avonturen in level 15!
    16:
        1:
            header: Welkom bij level 16
            text: In dit level leer je over de [vierkante haken] en hoe je ze moet gebruiken.
        2:
            header: Vierkante haken
            text: We gaan lijstjes maken op de Pyhton manier, met vierkante haken om de lijst! We zetten nog steeds aanhalingsteken om elk item, zoals je eerste hebt geleerd. We gebruiken vierkante haken om de plek in de lijst aan te geven. Het {at} {random} ziet er nu ook anders uit.
            code: |-
                friends = ['Ahmed', 'Ben', 'Cayden']
                {print} friends[1] ' is the first friend on the list.'
                {print} friends[2] ' is the second friend on the list.'
                {print} friends[3] ' is the third friend on the list.'
                #now we will match 2 lists using the variable i
                lucky_numbers = [15, 18, 6]
                {for} i {in} {range} 1 {to} 3
                    {print} friends[i] 's lucky number is ' lucky_numbers[i]
        3:
            header: Proberen maar!
            text: Veel plezier met de avonturen in level 16!
    17:
        1:
            header: Welkom bij level 17
            text: In dit level leer je hoe je een dubbele punt gebruikt en leer je het {elif} commando.
        2:
            header: Dubbele punt
            text: Het inspringen verandert weer een klein beetje. Elke keer als er ingesprongen moet worden, hebben we ook een dubbele punt nodig in de zin daarvoor.
            code: |-
                prices = ['1 million dollars', 'an apple pie', 'nothing']
                your_price = prices[{random}]
                {print} 'You win ' your_price
                {if} your_price == '1 million dollars' :
                    {print} 'Yeah! You are rich!'
                {else}:
                    {print} 'Better luck next time..'
        3:
            header: '{elif}'
            text: 'In dit level kun je ook een nieuw commando gebruiken: {elif}. {elif} is een samenvoeging van {else} en {if}. Je kunt het gebruiken om een 3e optie te creëren (of zelfs meer!). Kijk maar!'
            code: |-
                prices = ['1 million dollars', 'an apple pie', 'nothing']
                your_price = prices[{random}]
                {print} 'You win ' your_price
                {if} your_price == '1 million dollars' :
                    {print} 'Yeah! You are rich!'
                {elif} your_price == 'an apple pie' :
                    {print} 'Lovely, an apple pie!'
                {else}:
                    {print} 'Better luck next time..'
        4:
            header: Aan het werk!
            text: Veel plezier met de avonturen in level 17!
    18:
        1:
            header: Welkom bij level 18
            text: Welkom in het laatste level van Hedy! We zijn aangekomen bij echte Python code! Dit betekent ook dat je de Hedy code uit de level in iedere Python omgeving kunt gebruiken als je Engelse commando's gebruikt. Deed je dat tot nu toe nog niet, zet dan de knop om in het commando's menu.
        2:
            header: De Python manier
            text: |-
                We zijn aangekomen bij echte Python code! Dat betekent dat we vanaf nu haakjes moeten zetten om {print} en {range}.

                Daarnaast moeten we komma's gaan gebruiken als we meer dan 1 item willen printen.

                Tot slot moeten we het commando {ask} veranderen in {input}.

                Klik op het tabje '{print}' voor alle voorbeelden.
            editor: /hedy/18
        3:
            header: De laatste avonturen!
            text: Veel plezier bij de laatse avonturen in level 18!
