levels:
    0:
        1:
            header: Ласкаво просимо до Хеди!
            text: Hedy - це мова програмування.
        2:
            header: Програмування
            text: |-
                Програмування - це надання інструкцій комп'ютеру, використовуючи мову комп'ютера.

                Така мова називається "мовою програмування".
        3:
            header: Мова програмування
            text: |-
                Можливо, ви вже знаєте деякі мови програмування?
                Деякі приклади:
                * Scratch
                * Python
                * HTML
        4:
            header: Програмування
            text: |-
                Якщо ви вмієте програмувати, ви можете робити багато крутих речей:
                * Створювати інтерактивні історії
                * Створювати комп'ютерні малюнки та переносити їх на папір чи тканину
                * Створювати власні додатки для використання на телефоні
        5:
            header: Програмування в Hedy
            text: У Hedy ми використовуємо спеціальні команди, такі як `{print}`.
            code: '{print} Ласкаво просимо до Hedy!'
        6:
            header: Програмування в Hedy
            text: Слова-команди будуть показані рожевим кольором.
            code: '{print} Ласкаво просимо до Hedy!'
        7:
            header: Програмування в Hedy
            text: Ми запускаємо команди за допомогою кнопки Запустити код під введеними командами.
            code: '{print} Ласкаво просимо до Hedy!'
        8:
            header: Програмування в Hedy
            text: Вихідні дані з'являються ліворуч.
            code: '{print} Ласкаво просимо до Hedy!'
        9:
            header: Програмування в Hedy
            text: Результатом також може бути малюнок.
            code: |-
                {forward} 100
                {turn} {left}
    1:
        1:
            header: Ласкаво просимо на перший рівень!
            text: |-
                Ми почнемо перший рівень зі створення історій у Hedy!

                Для створення інтерактивних історій нам знадобляться три текстові команди.
        2:
            header: '{print}'
            text: |-
                Перший команда, яку ви можете використовувати на першому рівні, це `{print}`.

                `{print}` використовується для виведення тексту на екран.
            code: '{print} Показати текст на екрані'
        3:
            header: 'Команда {print}'
            text: |-
                Другий команда, яку ви можете використовувати на першому рівні - це `{ask}`.

                `{ask}` використовується для того, щоб поставити запитання, на яке можна відповісти.
            code: |-
                {print} Ласкаво просимо до Hedy!
                {print} Почніть програмувати зараз!
        4:
            header: '{ask}'
            text: |-
                Остання команда, яку ви можете використати на першому рівні - `{echo}`.

                `{echo}` використовується для повторення відповіді на `{ask}`.
            code: |-
                {print} Ласкаво просимо до ваших власних паперових ножиць!
                {ask} Що ти вибереш?
        5:
            header: '{echo}'
            text: |-
                Як ви могли бачити в попередньому прикладі. Якщо ви використовуєте команду `{ask}`, ви можете поставити запитання.
                Однак відповідь не відображається на екрані виводу.

                Якщо ви хочете, щоб відповідь була показана, ви можете використати останню команду цього рівня: `{echo}`.
                `{echo}` використовується для повторення відповіді `{ask}`.
            code: "{print} Привіт!\n{запитувати} Як тебе звати?\n{echo} привіт"
        6:
            header: Програмуємо!
            text: "За допомогою `{print}`, `{ask}` і `{echo}` ви вже можете створити маленьку історію.\nЦе гарний час, щоб спробувати пригоди «Папуга», «Історія» та «Камінь, ножиці для паперу»."
            editor: /hedy/1
        7:
            header: Програмуємо!
            text: Кнопки з жовтими стрілками можна використовувати для копіювання прикладів.
            editor: /hedy#print_command
        8:
            header: Програмування!
            text: Жовті кнопки зі стрілками можна використовувати для копіювання прикладів.
            editor: /hedy# print_command
        9:
            header: 'Малювання з черепахою'
            text: '`{forward}` використовується для переміщення черепахи вперед.'
        10:
            header: 'Малюнок з черепахою: {forward}'
            text: Команда `{turn}` використовується, щоб змусити черепашку повернути ліворуч або праворуч.
            code: |-
                {forward} 50
        11:
            code: |-
                {forward} 50
                {turn} {left}
            header: 'Малюнок з черепахою: {turn}'
            text: '`{turn}` використовується для повороту черепахи ліворуч або праворуч.'
        12:
            header: Налагодження
            text: Налагодження коду означає позбавлення від помилок у коді. Давайте разом налагодимо цей код. Натисніть кнопку сонечка, щоб запустити налагоджувач.
            debug: 'True'
            code: "Я діджей Хеді\n{print} Яку пісню ви б хотіли почути?\n{ask} Мені теж подобається ця пісня!\n{print} Далі... {echo}"
        13:
            text: Насолоджуйтесь пригодами на рівні 1!
            header: Нехай розвага з програмування почнеться!
    2:
        3:
            text: |-
                Ми також можемо встановити змінну, ставлячи запитання.

                Відповідь на запитання зберігається у змінній.

                Таким чином нам не потрібна команда `{echo}`.
            header: Інтерактивний
            code: "ім'я {is} {ask} Як тебе звати?\n{print} Привіт ім'я"
        4:
            text: Тепер, коли ми використовуємо змінні, ми можемо використовувати декілька змінних замість однієї команди `{echo}`.
            header: Кілька змінних
            code: "ім'я {is} {ask} Як тебе звати?\n{print} Привіт ім'я\nage {is} {ask} Скільки тобі років?\n{print} ім'я вік років."
        1:
            header: Ласкаво просимо на рівень 2
            text: "На цьому рівні ви навчитеся використовувати змінні.\n\nЗмінна — це слово, яке можна використовувати для зберігання інформації.\n\nНаприклад: ім'я, вік або улюблена спортивна команда."
        2:
            header: Змінні
            text: Щоб створити або «встановити» змінну, ми використовуємо команду `{is}`
            code: "ім'я {is} Хеді\nвік {is} 15\n{print} ім'я вік років"
        5:
            header: сон
            text: Ви також можете використати команду `{sleep}`, щоб призупинити код на деякий час.
            code: "{print} Мій улюблений колір...\n{sleep} 2\n{print} зелений!"
        6:
            header: Сон 5
            text: "Ви можете додати число після команди `{sleep}`, якщо хочете, щоб пауза була довшою.\n\nЯкщо ви хочете, ви навіть можете використовувати змінну замість числа, щоб визначити тривалість команди сну."
            code: "пауза {is} 10\n{print} Мій улюблений колір...\n{sleep} пауза\n{print} зелений!"
        7:
            header: Налагодження
            text: Налагодження коду означає позбавлення від помилок у коді. Давайте разом налагодимо цей код. Натисніть кнопку сонечка, щоб запустити налагоджувач.
            code: "{print} Ласкаво просимо до магазину пончиків!\nначинка {є} Яку начинку ви хотіли б?\n{print} Ви вибрали... Наповнення! смак!\ntopping {ask} Яку начинку ви хотіли б?\nначинка смачна!\n{print} Я піду за вашим пончиком. {сон}\n{print} Ось вам! Ситний пончик з начинкою!\n{ask} Гарного дня!"
            debug: 'True'
        8:
            header: Нехай розвага з програмування почнеться!
            text: Насолоджуйтесь пригодами на рівні 2!
    4:
        9:
            header: Очистити
            text: "На цьому рівні ви також вивчите команду {clear}.\nЗа допомогою цієї команди ви можете стерти весь текст із екрана виводу.\n\nБудьте обережні, щоб ви також завжди використовували команду сну. Якщо ви цього не зробите, комп’ютер зітре весь текст, перш ніж ви зможете його прочитати!"
            code: "{print} '3'\n{clear}\n{print} '2'\n{clear}\n{print} '1'\n{clear}\n{print} \"СЮРПРИЗ!\""
        7:
            header: Лапки та змінні
            code: "ім'я {is} Гаррі\n{print} 'Привіт ' name ', як справи?'"
            text: "Коли імена змінних використовуються в середині речення, ви повинні залишити змінні поза лапками.\nОднак решта речення потребує лапок. Це виглядає так:"
        5:
            code: name {is} {ask} 'ім'я будь ласка?'
            header: Лапки з запитом
            text: Це також стосується команди `{ask}`.
        11:
            text: Насолоджуйтесь пригодами на 4 рівні!
            header: Готовий, готовий, вперед!
        4:
            code: "{print} 'друк у лапках!'"
            header: Лапки з друком
            text: Кожного разу, коли ви використовуєте команду `{print}`, вам потрібно брати текст, який ви хочете відобразити на екрані, у лапки.
        1:
            header: Привітання до рівня 4
            text: У цьому рівні ви дізнаєтеся, як використовувати мітки.
            code: "{print} 'друк у лапках!'"
        2:
            text: 'У попередніх рівнях ви можете зіткнутися з цією проблемою:'
            header: Проблема
            code: "ім'я {is} Софі\nДовідник Ім'я"
            debug: 'True'
        3:
            header: Закріплюючи це лапками
            text: "На цьому рівні ми вирішимо цю проблему, використовуючи лапки.\n\nЦе також робить наш код більш схожим на «справжній» код Python."
        10:
            header: Налагодження
            text: Давайте налагодимо цей код!
            code: "{очистити}\n{print} Який чудовий день, щоб піти на пляж!\n{ask} «Ви хочете побудувати замок з піску чи поплавати в океані?»\n{print} \"Ви хотіли б зайнятися\"\n{print} \"Я теж хотів би це зробити\"\n{print} «Погляньте на ці чудові черепашки!»\nкольори {is} 'помаранчевий, срібний, білий, коричневий'\n{print} 'Мені подобаються кольори {at} {random} one!'\nвибір {є} {питати} Який тобі подобається?"
            debug: 'True'
        6:
            code: "ім'я {is} Гаррі\n{print} Ім'я \"Привіт\""
            header: Лапки та змінні
            text: "Ви не хочете, щоб імена змінних друкувались на екрані.\nОсь чому змінні слід не брати в лапки, наприклад:"
        8:
            code: '{print} "Це не спрацює!"'
            header: Лапки та скорочення
            text: "Будьте обережні! Тепер, коли ви використовуєте лапки, ви не можете використовувати апостроф у скороченнях.\n\nБудь ласка, спробуйте надрукувати скорочення на зразок «ти» або «я» на екрані нижче, і подивіться, що станеться...."
            debug: 'True'
    3:
        2:
            header: Складання списку
            text: "Ви створюєте список за допомогою `{is}`.\n\nРозділяйте елементи у списку комами."
            code: тварини {is} собаки, коти, кенгуру
        1:
            header: Ласкаво просимо на 3 рівень
            text: На цьому рівні ви навчитеся складати список, додавати й видаляти елементи зі своїх списків і вибирати випадковий елемент із цього списку.
        3:
            header: Навмання
            text: "Ви можете використовувати список за допомогою команди `{at}` `{random}`.\nКомп’ютер випадковим чином вибере один пункт зі списку.\nЩоразу, коли ви запускаєте цей код, результат буде відрізнятися."
            code: "тварини собаки, коти, кенгуру\n{print} тварин {at} {random}"
        4:
            header: Навмання в реченні
            text: Ви також можете використовувати команду `{at}` `{random}` у реченні.
            code: "тварини собаки, коти, кенгуру\n{print} Моя улюблена тварина це тварини {at} {random}"
        5:
            header: Додати до
            text: "Ви можете додати елементи до списку за допомогою команди `{add}` `{to}`.\n\nВи можете вибрати, що додати до списку, або скористатися командою `{add}` `{to}` у поєднанні з командою `{ask}`.\nТаким чином ви можете дозволити гравцеві вирішувати, що додати до списку."
            code: "тварини {is} собака, кіт, кенгуру\nlike {is} {ask} Яка твоя улюблена тварина?\n{add} як {to_list} тварин\n{print} Я вибираю тварин {at} {random}"
        7:
            debug: 'True'
            editor: "music_genres {is} рок, поп, метал, інді, джаз\nSelect_genre Музика {at} {random}\nДовідник Послухайте вибраний жанр\nкрасиві {ask} Ви любите цей жанр?\n{remove} обраний_genre {від} вибрано_genre\nРусскийУкраїнськаБеларускаяOʻzbek tiliEnglish\n{print} або ви віддаєте перевагу... Другий_хойсе {at} {random}\n0 товар(ов) - 0.00 р.\nДовідник Я люблю музику_genre {random} кращий!"
            header: Налагодження
            text: Давайте налагодимо цей код!
        8:
            header: Давайте до роботи!
            text: Насолоджуйтесь пригодами на рівні 3!
        6:
            header: Видалити з
            code: "тварини {is} собака, кіт, кенгуру\ndislike {is} {ask} Яка тварина тобі не подобається?\n{remove} не подобається {from} тварин\n{print} Я вибираю тварин {at} {random}"
            text: "Протилежністю команди `{add}` `{to}` є команда `{remove}` `{from}`.\nЦя команда видаляє елемент зі списку."
    6:
        3:
            text: Якщо ви хочете відняти, ви можете використовувати знак мінус.
            code: "{print} '5 мінус 5 це ' 5 - 5"
            header: Віднімання
        1:
            text: На цьому рівні ми додаємо математику до наших кодів.
            header: Ласкаво просимо на 6 рівень
        2:
            header: Доповнення
            code: "{print} '5 плюс 5 це ' 5 + 5"
            text: Якщо ви хочете обчислити додавання, просто використовуйте знак плюс.
        4:
            code: "{print} '5 помножити на 5 це ' 5 * 5"
            header: Множення
            text: Якщо ви хочете зробити множення, ви можете використовувати зірочку.
        7:
            code: "ім'я = Хеді\nвідповідь = 20 + 4"
            header: Символ =
            text: "Відтепер ви також можете використовувати символ = замість команди `{is}`.\nЦе стосується як чисел, так і слів, а також після команд `{if}` або `{else}`."
        6:
            text: Підсумовуючи, ви можете використовувати +, -, * і / для виконання математики.
            header: Резюме
            code: "{print} '5 плюс 5 це ' 5 + 5\n{print} '5 мінус 5 це ' 5 - 5\n{print} '5 помножити на 5 це ' 5 * 5\n{print} '5 поділити на 5 це ' 5 / 5"
        8:
            header: Обчислення зі змінними
            text: 'Ви можете використовувати обчислення з числами, але ви також можете використовувати змінні для виконання обчислень, наприклад:'
            code: "number_1 = {ask} 'Заповніть перше число:'\nnumber_2 = {ask} 'Заповніть друге число:'\nправильна_відповідь = число_1 * число_2\n{print} number_1 ' разів ' number_2 ' є ' правильною_відповіддю"
        5:
            header: Поділ
            text: Ви можете використовувати косу риску для поділу.
            code: "{print} '5 поділити на 5 це ' 5 / 5"
        10:
            header: Давайте до роботи!
            text: Насолоджуйтесь пригодами на 6 рівні!
        9:
            header: Налагодження
            text: Давайте налагодимо цей код!
            debug: 'True'
            code: "{print} \"Це автомат для продажу квитків у аквапарк\"\n{print} 'Прайс-лист: діти до 12 років 3 $, дорослі 5 $'\n{print} \"У понеділок діє знижка 25%\"\namount_of_children = 'Скільки дитячих квитків ви хочете?'\namount_of_adults = 'Скільки квитків для дорослих ви хочете?'\nday_of_the_week = {ask} 'Який сьогодні день?'\n{clear}\nchild_price = кількість дітей * 3\nдоросла_ціна = кількість_дорослих + 5\nзагальна_ціна = доросла_ціна * дитяча_ціна\n{if} день {is} понеділок\nзагальна_ціна = загальна_ціна * 0,25\n{print} \"Це буде total_price, будь ласка\""
    5:
        3:
            debug: 'True'
            header: Не забудьте роздрукувати
            text: "Використовуючи команду `{if}`, не забудьте використати команду `{print}`.\nЦей код не працюватиме!"
            code: "{if} name {is} Hedy 'приємно'"
        2:
            header: if
            code: "name {is} {ask} 'як тебе звуть?'\n{if} name {is} Hedy {print} 'nice'"
            text: "Команда `{if}` дозволяє вибрати між двома варіантами.\nУ цьому прикладі комп’ютер надрукує «приємно», якщо заданою відповіддю є Хеді.\nЯкщо відповідь не Hedy, комп’ютер нічого не робитиме."
        6:
            text: "Якщо ви тренувалися з командами `{if}` і `{else}`, ви також можете спробувати команду `{in}`.\n\nЗа допомогою `{in}` ви можете дозволити комп’ютеру перевірити, чи є елемент у списку, наприклад:\n\nЗверніть увагу, що Hedy чутливий до регістру. Це означає, що якщо ви відповісте «Green» замість «green», Hedy надрукує «meh»."
            header: Ще одна нова команда
            code: "pretty_colors {is} зелений, жовтий\nfavorite_color {is} {ask} 'Який твій улюблений колір?'\n{if} favorite_color {in} pretty_colors {print} 'красиво!'\n{else} {print} 'мех'"
        8:
            header: ходімо!
            text: Насолоджуйтесь пригодами на рівні 5!
        7:
            header: Налагодження
            text: Давайте налагодимо цей код!
            debug: 'True'
            code: "{print} Ласкаво просимо до HedyAir Security!\nboarding_pass {is} {ask} \"У вас є посадковий талон?\"\n{if} bording_pass так {print} Чудово!\n{else} Приготуйте свій посадковий талон.\npassport {is} 'Чи можу я побачити ваш паспорт, будь ласка?'\n{if} паспорт {is} так \"дякую\"\n{else} «Ти не можеш літати без паспорта»\ndeclare {is} {ask} Вам є що декларувати?\n{if} оголосити {is} так\nitem_to_declare {is} {ask} 'Що б ви хотіли задекларувати'\n{else} Добре\n{print} Дякую. Будь ласка, прямуйте до воріт A22»"
        1:
            header: Ласкаво просимо на 5 рівень
            text: 'На цьому рівні ви навчитеся використовувати 3 нові команди: `{if}`, `{else}` і `{in}`.'
        4:
            text: "Використовуючи команду `{if}`, ви також можете додати команду `{else}`.\nЯкщо відповідь Hedy, комп’ютер надрукує «приємно».\nАле якщо відповідь буде іншою, комп’ютер надрукує «бу»"
            header: Else
            code: "{if} name {is} Hedy {print} 'приємно' {else} {print} 'бу!'"
        5:
            header: Довгі черги
            code: "{if} name {is} Hedy {print} 'nice'\n{else} {print} \"бу!\""
            text: "Можливо, ви помітили, що ваші рядки можуть стати дуже довгими, якщо у вас одночасно є команди `{if}` і `{else}`.\n\nВи можете розділити команди та розмістити їх у 2 рядки, наприклад:"
    7:
        4:
            header: Повторіть команду запиту
            text: Ви також можете повторити команду `{ask}`, `{if}` або `{else}` кілька разів.
            code: "{repeat} 2 {times} answer = {ask} \"Чи знаєте ви, що можете поставити запитання кілька разів?\"\n{if} answer {is} yes {repeat} 2 {times} {print} 'Ви вже це знали!'\n{else} {repeat} 3 {times} {print} 'Ви дізналися щось нове!'"
        5:
            debug: 'True'
            header: Налагодження
            text: Давайте налагодимо цей код!
            code: "{print} Ви опинилися на безлюдному острові.\n{repeat} 3 'Допоможіть!'\nrescued = {ask} Хтось прийшов на допомогу?\n{if} врятовано так {is}\n{print} Пощастило!\n{else} {repeat} 3 {times} \"ДОПОМОЖІТЬ!\"\nrescued = 'А зараз?'\n{if} так\n{print} «Ура!\n{else} «Шкода... Ну що ж... час побудувати притулок і знайти їжу»"
        3:
            code: "{repeat} 5 {times} 'Допоможіть!'"
            header: Не забудьте команду друку
            text: Використовуючи команду повторення, не забувайте про команду `{print}`.
            debug: 'True'
        6:
            text: Насолоджуйтесь пригодами на 7 рівні!
            header: Готовий до старту!
        2:
            code: "{print} «Принц кликав на допомогу»\n{repeat} 5 {times} {print} 'Допоможіть!'\n{print} «Чому мені ніхто не допомагає?»"
            header: повторити 3 рази
            text: "Якщо ви хочете повторити рядок коду, ви можете використати код `{repeat}` 3 `{times}`.\nЯкщо ви хочете повторити рядок кілька разів, просто змініть номер.\n\nНаприклад: якщо ви програмуєте історію, у якій ваш персонаж 5 разів кричить про допомогу, це може виглядати так:"
        1:
            header: Ласкаво просимо на 7 рівень
            text: На цьому рівні ви навчитеся повторювати рядок коду скільки завгодно разів.
    8:
        4:
            text: "Якщо ви хочете, ви можете продовжити після команди `{repeat}` без відступу.\nРядки, які не починаються з відступу, не повторюватимуться."
            header: '{repeat} команд зараз'
            code: "{repeat} 3 {times}\n    {print} 'Привіт!'\n{print} 'Ми закінчили повторювати!'"
        8:
            header: оператори if всередині операторів if
            text: "Можливо, ви подумали спробувати вставити команду if в команду повторення або в іншу команду if.\nНаразі це поки що неможливо. На вищих рівнях це буде дозволено, але зараз давайте зосередимося на відпрацюванні команд `{if}` `{else}` і `{repeat}` з правильним відступом."
        9:
            header: Налагодження
            text: Давайте налагодимо цей код!
            debug: 'True'
            code: "{print} \"Автомат для продажу автобусних квитків HedyWheels\"\nзона_1 = ратуша, бібліотека, кампус, ринок\nзона_2 = басейн, скейт-парк, торговий центр, аеропорт\nпризначення = 'Куди ви хочете поїхати?'\n{if} призначення {in} зоні 1\n{print} призначення \"знаходиться в зоні 1\"\nціна = 3 євро\n    {if} призначення {is} зона_2\n{print} призначення \"знаходиться в зоні 2\"\nціна = 6\nticket_types = {ask} 'Натисніть 1 для одноразового квитка.\nНатисніть 2, щоб отримати квиток в обидві сторони:'\n{if} тип_квитка = 1\n{print} \"Ви вибрали одноразовий квиток\"\n{else}\n        {print} Ви вибрали квиток туди й назад\"\nціна * 2\n{print} \"Це буде \"ціна\" євро, будь ласка\""
        2:
            code: "{repeat} 5 {times} {print} 'Допоможіть!'"
            header: '{повторити} команд раніше'
            text: "На попередніх рівнях команда `{repeat}` виглядала так:\n\nВи можете повторити лише один рядок коду."
            debug: 'True'
        7:
            header: зупинка відступу
            text: Подібно до команди `{repeat}`, ви можете припинити використання відступів, і рядки завжди відображатимуться. Не тільки якщо твердження правдиве.
            code: "name = {ask} 'Як тебе звати?'\n{if} name {is} Hedy\n    {print} «Ласкаво просимо, Хеді»\n{else}\n    {print} 'Ласкаво просимо програмісту!' \n{print} '3..2..1.. Розпочніть програмування!'"
        6:
            header: якщо і інакше зараз
            text: "Тепер це команди `{if}` і `{else}`.\nКожен рядок після команд `{if}` і `{else}` починається з відступу."
            code: "name = {ask} 'Як тебе звати?'\n{if} name {is} Hedy\n    {print} «Ласкаво просимо, Хеді»\n{інше}\n    {print} 'Ласкаво просимо програмісту!'"
        5:
            text: "Те саме стосується команд `{if}` і `{else}`.\nЦе були команди раніше:"
            debug: 'True'
            header: if і else раніше
            code: "{if} name {is} Hedy {print} 'nice'\n{else} {print} \"бу!\""
        1:
            header: Ласкаво просимо на 8 рівень
            text: На цьому рівні ви навчитеся використовувати відступи, щоб команди `{repeat}`, `{if}` і `{else}` працювали для кількох рядків коду.
        3:
            header: '{repeat} команд зараз'
            text: "На цьому рівні ви можете повторювати кілька рядків коду. Для цього ви повинні повідомити комп’ютеру, які рядки належать разом і повинні повторюватися.\nЦе можна зробити за допомогою відступу.\n\nВикористовуйте 4 пробіли (або одну табуляцію) на початку кожного рядка, який потрібно повторити, наприклад:"
            code: "{repeat} 5 {times}\n    {print} \"Всім привіт\"\n    {print} 'Це буде надруковано 5 разів'"
        10:
            header: Давайте перевіримо пригоди!
            text: Насолоджуйтесь пригодами на 8 рівні!
    16:
        4:
            header: Давайте спробуємо!
            text: Насолоджуйтесь пригодами на рівні 16!
        3:
            header: Налагодження
            text: Давайте налагодимо цей код!
            debug: 'True'
            code: "{print} \"Дружній тест\" Р\n{subjects} = ['song', 'movie', 'food', 'drink']\nВідповіді_player_1= []\nВідповіді_player_2 = []\nрахунок = 100\n\nПро нас Я {in} {range} 1 {to} 4 хв\nВідповідь = {ask} 'Чи є ваші улюблені ' суб'єкти[i]\n{add} відповідь {to} відповіді_player_1\n\n{print} 'Player 2, ваш поворот! Р\nПро нас in  {  { 4 хв\nВідповідь_player_2 = {ask} 'що є гравцем 1s улюблених ' суб'єктів\n{add} відповідь_player_2 {in} відповіді_player_2\n{if} Відповіді_player_2[2]==Відповіді_player_1[1]\n{print} 'Correct! Р\nПро нас\n{print} 'Вонг! Р\nрахунок = рахунок - 25\n\n{print} 'Player 2, ви забили ' рахунок '%'\n\n{if} рахунок = 100\n{print} 'Ви дивний друг'\n{if} Оцінка < 100 {or} бал >= 50 р.\n{print} 'Ви можете зробити краще'\n{else} Оцінка < 50\n{print} 'Ви навіть знаєте цю людину?! Р"
        1:
            text: У цьому рівні ви дізнаєтесь про [коротки] і як їх використовувати.
            header: Ласкаво просимо до рівня 16
        2:
            header: Квадратні кронштейни
            text: Ми збираємось зробити списки Python, з квадратними дужками навколо списку! Ми також зберігаємо позначки на кожному елементі, як ми навчилися в попередніх рівнях. Ми використовуємо квадратні кронштейни для позначення місця в списку. У випадковому команді не можна використовувати більше.
            code: "друзі = ['Ahmed', 'Ben', 'Cayden']\n{print} друзі[1] - це перший друг у списку. Р\n{print} друзі [2] ' є другим другом у списку. Р\n{print} друзі (2009) ' є третім другом у списку. Р\n#тепер ми зустрінемо 2 списки за допомогою змінного i\n0 товар(ов) - 0.00 €\nПро нас Я {in} {range} 1 {to} 3 хв\n{print} друзі[i] \"Щасливий номер є \"щасливим\"[i]"
    17:
        5:
            text: Насолоджуйтесь пригодами на рівні 17!
            header: Давайте спробуємо!
        1:
            header: Ласкаво просимо до рівня 17
            text: у цьому рівні ви дізнаєтеся, як використовувати колонку і ви дізнаєтеся команду elif.
        4:
            header: Налагодження
            code: "{define} запитувати_direction\nJavaScript licenses API Веб-сайт Go1.13.8 Р\n{if} напрямок = 'backwards Р\n{повернення} 180\n{else} напрямок == Яскравий Р\n{повернення} 90\n{else} напрямок == лівий Р\n{повернення} 270\nПро нас 100 р.\n\nПерейти до вмісту Р\n\n{while} продовжити == 'yes Р\n{print} запитувати_direction\nПро нас\nПродовжити = «Ви хочете зробити ще? Р\nПро нас"
            text: Давайте налагодимо цей код!
            debug: 'True'
        2:
            header: Колон
            text: 'Тепер ми трохи змінимо відступ. Щоразу, що нам потрібна відступка, нам потрібно : на лінії перед відступом.'
            code: "ціни = ['1 млн. доларів', 'ябл. пиріг', 'nothing']\nВаш_ціна = ціни[{random}]\nДовідник 'Ви виграєте ' your_price\n{if} your_price == '1 млн. доларів' :\n{print} 'Я Ви багаті! Р\n{else}:\n{print} 'Повага наступного разу.. Р"
        3:
            header: Еліф
            text: 'У цьому рівні ви також можете використовувати нову команду: elif. elif є коротким для інших, якщо вам потрібно, коли ви хочете зробити 3 (або більше!) варіанти. Зареєструватися!'
            code: "ціни = ['1 млн. доларів', 'ябл. пиріг', 'nothing']\nВаш_ціна = ціни[{random}]\nДовідник 'Ви виграєте ' your_price\n{if} your_price == '1 млн. доларів' :\n{print} 'Я Ви багаті! Р\n{elif} your_price == \"Яблевий пиріг\" :\n{print} 'Любо, яблуневий пиріг! Р\n{else}:\n{print} 'Повага наступного разу.. Р"
    9:
        8:
            header: Налагодження
            debug: 'True'
            text: Давайте налагодимо цей код!
            code: "{print} «Ласкаво просимо до HedyJumps, вашої пригоди з парашутом!»\npeople = {ask} «Зі скількома людьми ти сьогодні стрибаєш?»\n{print} \"З міркувань безпеки ми задамо вам кілька запитань\".\nдодаткові_інструкції_люди = a, b\n{повторити} 3 {разів}\n    name = {ask} 'Як тебе звати?'\njumped_before = 'Ви коли-небудь стрибали з парашутом раніше, ' ім'я '?'\n{if} jumped_before ні\n{print} \"Не хвилюйтеся, ви отримаєте додатковий інструктаж з безпеки в кімнаті 13\"\n{add} name {to} extra_instructions_people\n{інше}\n{print} Весело!\n{print} Дякуємо, що заповнили запитання щодо безпеки. Насолоджуйтесь своїм стрибком!'"
        1:
            text: "На цьому рівні ви можете використовувати кілька рядків коду після команди `{if}` або `{repeat}`.\n\nВи навіть можете помістити команду `{repeat}` в іншу команду `{repeat}`."
            header: Ласкаво просимо на 9 рівень
        2:
            header: Кілька рядків після `{repeat}`
            text: Вам дозволено комбінувати `{repeat}` і `{if}` на цьому рівні.
            code: "{repeat} 3 {разів}\n    food = {ask} 'Що ти хочеш?'\n    {if} їжа {is} піца\n        {print} 'приємно!'\n    {else}\n        {print} \"піца краще\""
        3:
            code: "{repeat} 3 {times}\n    {print} 'Цей рядок буде повторюватися...'\n    {print} \"Цей теж...\"\n{print} 'але цього не буде!'"
            header: Відступ має значення!
            text: Відступи дуже важливі, щоб повідомити комп’ютеру, які рядки мають повторюватися, а які – лише один раз.
        4:
            code: "continue = {ask} 'Ви бажаєте продовжити?'\n{if} продовжити = так\n    sure = {ask} 'Ви впевнені?'\n    {if} впевнений {is} так\n        {print} «Ми продовжимо»\n    {else}\n        {print} \"Ви не впевнені\"\n{else}\n    {print} \"Ви не хочете продовжувати\""
            header: Кілька рядків після `{if}`
            text: Ви також можете використовувати кілька рядків після `{if}`
        7:
            text: Майте на увазі, що четвертий і шостий рядки цього коду починаються з 8 пробілів відступу.
            header: Зверніть увагу на відступ
            code: "{repeat} 3 {times}\n    food = {ask} 'Що ти хочеш?'\n    {if} їжа {is} піца\n        {print} 'приємно!'\n    {else}\n        {print} \"піца краще\""
        5:
            header: Відступ має значення
            code: "continue = {ask} 'Ви бажаєте продовжити?'\n{if} продовжити = так\n    sure = {ask} 'Ви впевнені?'\n    {if} впевнений {is} так\n        {print} «Ми продовжимо»\n{else}\n    {print} \"Ви не впевнені\""
            text: Знову ж таки, відступ все ще дуже важливий і може значно змінити код.
        6:
            header: '`{if}` всередині `{repeat}`'
            text: "Тепер, коли ви можете використовувати кілька рядків коду після цієї команди, ви також можете розмістити їх один в одному.\nПеревірте це:"
            code: "{repeat} 3 {times}\n    food = {ask} 'Що ти хочеш?'\n    {if} їжа {is} піца\n        {print} 'приємно!'\n    {else}\n        {print} \"піца краще\""
        9:
            header: ходімо!
            text: Насолоджуйтесь пригодами на 9 рівні!
    13:
        5:
            header: Приклад
            text: "У цьому прикладі ви бачите, як використовується аргумент 'place' в функції.\nЗапустіть код і змініть 'ocean' і 'sea' на щось інше, і див. що відбувається."
            code: "{define} пісня {з} місце\n{print} 'Мій Бонні над ' місце\n\n{call} пісня {з} 'ocean Р\n{call} пісня {з} 'sea'\n{call} пісня {з} 'ocean Р"
        7:
            header: Ще більше питань!
            code: "{define} пісня {з} місце\n{print} 'Мій Бонні над ' місце\n\n{call} пісня {з} 'ocean Р\n{call} пісня {з} 'sea'\n{call} пісня {з} 'ocean Р"
            text: "Тепер ми поєднали ще більше питання з функцією. Введіть цей код і подивіться, що відбувається.\n\nЗверніть увагу, як змінні та аргументи мають однакову назву. Це дозволено.\nЯк це заплутати? Використовуйте різні імена, що допускається.\nй й\nвизначення пісні з назвою, місце\nДрук \"Мій\" ім'я '' місце\n\nім'я попросити 'Хто? Р\nмісце просити 'Чи є вони? Р\nДзвоните до пісні з ім'ям, місце\nй й"
        2:
            code: "name = {ask} 'Чи є ваше ім'я? Р\nвік = {ask} 'Чи є ваш вік? Р\n{if} назва {is} 'Hedy' {and} вік {is} 2 000 р.\n{print} 'Ви реальний Гей! Р"
            header: Команда
            text: "Команда `{and} завжди використовується в поєднанні з командою {if}.\nТаким чином, ви можете перевірити, чи дійсно 2 виписки. Наприклад:"
        9:
            header: ходімо!
            text: Насолоджуйтесь пригодами на рівні 13!
        8:
            text: Давайте налагодимо цей код!
            debug: 'True'
            header: Налагодження
            code: "{define} щастя {з} ім'я\n浜у 涓 蹇 Р\n{play} Г\n{play} А\n{play} Б\n{print} 'Вечір на, ' name\n{define} садкість\n浜у 涓 蹇 Р\nПро нас\n{play} Д\n{play} C\nДовідник 'Надія ви відчуваєте краще, ' name\n\nname = {ask} 'Що таке ім'я '? Р\nнастрій = {ask} 'Ви щасливі або сумні? Р\nІм'я *\n{call} щастя {з} особа\n{else} настрій = сумний\n{define} розмір {to} ім'я"
        1:
            header: Ласкаво просимо до рівня 13
            text: "Ми зараз будемо вчитися `{and}` і `{or}`! Якщо ви хочете перевірити дві заяви, ви не повинні використовувати два випадки, але можете використовувати і або.\nВідтепер можна використовувати аргументи у ваших функціях."
        3:
            header: Команди
            text: "`{or}` працює так само, як і команда `{and}`, але тільки 1 з двох виписок має бути вірним.\n\nПобачимо, що відбувається при зміні `{and}` для `{or}`."
            code: "name = {ask} 'Чи є ваше ім'я? Р\n{if} name {is} 'Hedy' {or} name {is} 'hedy Р\n{print} 'Велком!! Р"
        4:
            header: Функції з аргументами
            text: Тепер ви дізналися, як використовувати функції, ви дізнаєтеся, як використовувати функцію з **argument***. Цей аргумент є змінною, яка використовується в межах функції. Не використовується зовні функції.
        6:
            header: Приклад з змінною
            text: "Ви також можете поєднувати функції з питанням.\n\nЩо відбувається, якщо ви вносите ці зміни:\nй й\nвизначення пісні з місцем\nДрук \"Мій Бонні\" - місце\n\nвідповідь попросити 'Where мій Bonnie? Р\nДзвоните до пісні з відповідь\nй й"
            code: "{define} пісня {з} місце\n{print} 'Мій Бонні над ' місце\n\n{call} пісня {з} 'ocean Р\n{call} пісня {з} 'sea'\n{call} пісня {з} 'ocean Р"
    18:
        3:
            header: Останні пригоди!
            text: Насолоджуйтесь найсвіжіші пригоди на рівні 18!
        1:
            header: Ласкаво просимо до рівня 18
            text: Вітаємо! Ви досягали останнього рівня Хеди! Якщо ви створили цей код, ви можете копіюватися в реальних середовищах Python, таких як репліт або PyCharm. Зауважте, що Python може лише читати англійські команди, тому якщо ви використовуєте інші мови, вам потрібно буде перейти на англійську мову.
        2:
            editor: /hedy/18
            header: The Python шлях
            text: "Ми приїхали до реального коду Python! Це означає, що ми повинні використовувати дужки з друком і діапазоном відтепер.\n\nТакож, якщо ви хочете друкувати більше одного елемента, потрібно відокремити їх комами.\n\nДля того, щоб отримати код Python змінився запит у вхід.\n\nНатисніть на вкладку «принт» для всіх прикладів."
    14:
        5:
            header: Повернення вартості
            code: "{define} розрахунок_new_price {з} кількість, відсоток\nвідсоток = відсоток / 100\nзнижка_amount = сума * відсоток\n{return} кількість - знижка_amount\n\nстарий_ціна = {ask} 'Як багато коштує на цінному тегі? Р\nзнижка = {ask} 'Що відсоток є знижка? Р\n\nnew_price = {call} розрахунок_new_price {with} old_price, знижка\nДовідник 'Нова ціна 'Нова_ціна' долар Р"
            text: Наприклад, в цьому коді функція обчислення_new_price розрахувати нову ціну будь-якого товару. Це дасть вам нову ціну в якості вартості повернення.
        6:
            debug: 'True'
            header: Налагодження
            text: Давайте налагодимо цей код!
            code: "пункт = 'не куплений Р\n{print} 'Я хотів би купити цей елемент Р\nціна === {ask} 'Яка ціна? Р\n{if} ціна менше, ніж або так само, як 10\n{print} 'Діти велику угоду! Р\nп»ї Р\n{if} ціна більше 10 {and} менше, ніж 20\n{print} 'Алайт Р\nп»ї Р\n{if} ціна більше 20 {and} менше 50\nДовідник \"Чому трохи багато! Р\n{if} ціна більш ніж 50\n{print} 'Не вдалося! Р\n{if} товар =! купити\n{print} 'Shame. Я не буду купувати це'\nПро нас\n{print} 'Я буду купити його! Дякуємо! Р"
        7:
            header: Давайте до роботи!
            text: Насолоджуйтесь пригодами на рівні 14!
        4:
            header: Повернення вартості
            text: У попередніх рівнях ви навчилися створювати функції та використовувати аргументи з ними. Ще одне велике використання функції полягає в тому, щоб він розрахувати щось для вас. Ви можете надати функцію розрахунку, і це дасть відповідь на розрахунок. Ця відповідь називається **return значення***.
        3:
            text: "Ви також можете використовувати:\n\n== так само, як.\n\n!== немає\n\n== використовується в `{if}`."
            code: "відповідь = {ask} 'Ви хочете дізнатися більше? Р\n{if} відповідь == Р\n{print} 'Go в наступну пригоду! Р\n{if} відповідь != Я Р\nДовідник «Чи є хата! Р"
            header: Символи
        2:
            code: "вік = {ask} 'Як старий ти? Р\n{if} вік < 13\n{print} 'Ви молодше мене! Р\nПро нас\n{print} 'Ви старше мене! Р"
            header: Символи
            text: "Це нові символи, які ви можете використовувати:\n\n> означає більше...\n\n>= означає більше, ніж або так само, як...\n\n< означає менше...\n\n<= означає менше, ніж або так само, як і...\n\nВи можете використовувати їх, як це:"
        1:
            header: Ласкаво просимо до рівня 14
            text: У цьому рівні ви дізнаєтеся деякі нові символи, які допоможуть вам покращити свої програми, такі як >. Ви також навчитеся працювати з значеннями повернення функції.
    15:
        1:
            text: У цьому рівні ви дізнаєтеся про `{while}` петлі.
            header: Ласкаво просимо до рівня 15
        2:
            header: '{while}'
            text: "Збираємося дізнатися нову петлю, при цьому петлю! Петля триває до тих пір, поки заява неправда. Так не забудьте змінити значення в петлі.\n\nУ прикладному коді ми продовжуємо до дати коректної відповіді. Якщо вірна відповідь ніколи не дається, петля ніколи не закінчиться!"
            code: "0 р.\n{while} відповідь 25 мар\nВідповідь = {ask} 'Що таке 5 разів 5? Р\nДовідник 'Поправка відповіді була надана Р"
        3:
            header: Налагодження
            text: Давайте налагодимо цей код!
            debug: 'True'
            code: "число = 1, 2\n\nПро нас Я {in} {range} 3 {to} 50 р.\n{add} x {to} кількість\nдо 1\n\nJavaScript licenses API Веб-сайт\nЗдогадки = 10\n\n{while} вгадати = 0\nВідповідь = \"Оцінити номер: Р\n{if} відповідь >= випадковий_number\n{print} 'низько Р\nвагітні = вагітні -1\n{if} відповідь > випадковим_number\n{print} 'високий! Р\nвагітна = вагітна\n{else} відповідь = випадковим_number\n{print} 'correct Р\nЗдогадки = 10"
        4:
            header: Дякуемо!
            text: Насолоджуйтесь пригодами на рівні 15!
    10:
        2:
            header: Команда for
            text: За допомогою for ви можете створити список і використовувати всі елементи цього списку. `{for}` створює блок, як і повтор, і якщо так, то всі рядки в блоці повинні починатися з відступу (4 пробіли).
            code: "тварини = собака, кішка, риба-крапля\n{for} тварин {in} тварин\n    {print} «Я люблю» тварин"
        4:
            text: Давайте налагодимо цей код
            header: Налагодження
            debug: 'True'
            code: "{print} \"Пані та панове!\"\n{print} 'На одну ніч і тільки одну ніч у цирку Хеді!'\nдіяти = стріляти з канону, ходити по канату, пакувати себе у валізу,\nлюди = Айріс Неймовірна Ахмед Дивовижний Френсіс Фантастичний\n    {для} людей {в} діє\nобрана_особа {є} люди {випадкові}\n    вибрана_особа 'буде' діяти\n{add} selected_person {from} людей\n{print} 'Приходьте сьогодні на наше шоу!'\n{print} 'Квитки доступні лише в касі"
        1:
            header: Ласкаво просимо на 10 рівень
            text: 'На цьому рівні ви вивчите нову команду: `{for}`.'
        3:
            header: Команда for
            text: 'Ось ще один приклад команди `{for}`:'
            code: "днів = понеділок, вівторок, середа, четвер, п'ятниця, субота, неділя\nімена = мама, тато, Емма, Софі\n{for} день {in} днів\n    {print} іменує {at} {random} ' миє посуд у ' день"
        5:
            text: Насолоджуйтесь пригодами на 10 рівні!
            header: Час програмувати!
    12:
        1:
            text: "З цього рівня ви маєте можливість використовувати десяткові числа, і є деякі зміни до ставок.\nВи також можете використовувати функції з цього рівня!"
            header: Ласкаво просимо на рівень 12
        5:
            header: Смоктати Невеликий зірочок!
            text: "У цій програмі ви побачите приклад функції.\nДавайте подивимося, що відбувається, якщо ви заповнюєте решту пісні!"
            code: "{define} близнюки\n{print} 'Помилки Р\n{Відбиток} '... Р\n\n{call} близнюки\nДовідник 'Зверху над світом так висока'\nДовідник 'Подивитися діамант в небі'\n{call} близнюки"
        3:
            code: "{print} 'декількі числа зараз потрібно використовувати точка р\n{принт} 2.5 + 2.5"
            text: "З цього рівня ви також можете використовувати десяткові числа. Ми можемо самі зателефонувати одержувачу!\n\nКількість не потрібно міток."
            header: Кількість номерів
        2:
            text: "Цей рівень робить деякі зміни до використання міток.\nВідтепер,**всі тексти**** повинні бути в ціні знаків. Це включає значення змінних, елементів у списку та тексту після команд {if}."
            header: Оцінка ставок
            code: "ім'я = \"Діти Роботу\"\n{print} 'Привіт'"
        6:
            header: Функції
            text: Як ви можете побачити в прикладі функції є блоком коду, який можна назвати в будь-який час. Ви використовуєте `{define}` для налаштування функції та `{call}` для його використання.
        7:
            debug: 'True'
            header: Налагодження
            text: Давайте налагодимо цей код!
            code: "{call} новий_член\n{print} 'Привіт новий учасник! Р\nІм'я користувача = {ask} 'Що таке ім'я користувача? Р\nпароль = \"Який пароль? Р\n{print} 'Велком до нашого клубу! Р\n\nІм'я користувача = {ask} 'Будь ласка, введіть ім'я користувача. Чи є у вас новий учасник? Тип нового учасника Р\n{if} Ім'я користувача = Новий Учасник\n{call} новий учасник\nПро нас\nпароль = {ask} 'Будь ласка пароль Р"
        4:
            header: Функції!
            text: "У цьому рівні ви дізнаєтеся, як використовувати функції. Функція є блоком коду, який ви можете легко використовувати кілька разів. Використання функцій допомагає нам організовувати частини коду, які ми можемо використовувати знову і знову. Щоб створити функцію, скористайтеся визначенням і дати функцію ім'я. Потім покладіть всі лінії, які ви хочете в функції в відступному блокі під конкретну лінію. Залиште один порожній рядок у вашому коді, щоб зробити його гарним і акуратним. Чудова робота! Ви створили функцію!\n\nТепер, коли нам потрібно, щоб блокувати код, ми просто використовуємо виклик з ім'ям функції, щоб викликати його! Ми не повинні знову ввести блок коду."
        8:
            header: Читання спробувати це?
            text: Насолоджуйтесь пригодами на рівні 12!
    11:
        2:
            header: Команда for
            text: 'Ось як виглядає нова команда for:'
            code: "{for} лічильника {in} {range} 1 {to} 10\n    Лічильник {print} i\n {print} «Готові чи ні. Ось я іду!'"
        3:
            header: змінна i
            code: "число = 10\n{for} i {in} {range} 1 {to} 10\n    {print} i * число"
            text: "На попередньому слайді змінна була названа «лічильник», оскільки вона веде зворотній відлік.\nВи, звичайно, можете використовувати будь-яке ім'я для змінної, яку хочете.\nСтандартна назва змінних у цій ситуації, яка використовується в мовах програмування, таких як Python, — «i».\nЦе виглядає так:"
        4:
            header: Налагодження
            text: Давайте налагодимо цей код!
            debug: 'True'
            code: "множник {is} {ask} 'Яка таблиця множення вам потрібна?'\n{repeat} {for} чисел {in} {range} 1 {to} 10 {times}\n    {print} Це таблиця множення на множник\n    {print} число 'x' фактор ' = ' i * фактор"
        5:
            header: Починаємо програмувати!
            text: Насолоджуйтесь пригодами на рівні 11!
        1:
            header: Ласкаво просимо на 11 рівень
            text: "На цьому рівні ми додаємо нову форму команди `{for}`. На попередніх рівнях ми використовували для зі списком, але ми також можемо використовувати для з числами.\n\nТаким чином нам більше не потрібна команда `{repeat}`."
