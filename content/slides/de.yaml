levels:
    0:
        1:
            header: Willkommen bei Hedy!
            text: Hedy ist eine Programmiersprache.
        2:
            header: Programmieren
            text: |-
                Programmieren bedeutet, einem Computer Anweisungen in der Sprache des Computers zu geben.

                Solch eine Sprache nennt man "Programmiersprache".
        3:
            header: Programmiersprache
            text: |-
                Vielleicht kennst du schon einige Programmiersprachen?
                Einige Beispiele sind:
                * Scratch
                * Python
                * HTML
        4:
            header: Programmieren
            text: |-
                Wenn du programmieren kannst, kannst du viele coole Dinge machen:
                * Interaktive Geschichten bauen
                * Computergrafiken kreieren und sie auf Papier oder Stoff zeichnen
                * Deine eigenen Apps für dein Smartphone bauen
        5:
            header: Programmieren in Hedy
            text: |-
                In Hedy benutzen wir speziellen Code, wie `{print}`.
                <iframe class="embedded-hedy" src="/adventure/story/1/raw"></iframe>
        6:
            header: Programmieren in Hedy
            text: |-
                Code-Wörter werden in pink angezeigt.
                <iframe class="embedded-hedy" src="/adventure/story/1/raw"></iframe>
        7:
            header: Programmieren in Hedy
            text: |-
                Wir starten den Code mit dem Run code Knopf unter dem Code.
                <iframe class="embedded-hedy" src="/adventure/story/1/raw"></iframe>
        8:
            header: Programmieren in Hedy
            text: |-
                Die Ausgabe erscheint auf der linken Seite.
                <iframe class="embedded-hedy" src="/adventure/story/1/raw"></iframe>
        9:
            header: Programmieren in Hedy
            text: |-
                Die Ausgabe kann auch eine Zeichnung sein.
                <iframe class="embedded-hedy" src="/adventure/turtle/1/raw"></iframe>
    1:
        1:
            header: Willkommen in Level 1!
            text: |-
                Wir werden Level 1 beginnen, indem wir Geschichten in Hedy schreiben!

                Wir brauchen drei Text-Codes, um interaktive Geschichten zu erstellen.
        2:
            header: '{print}'
            text: |-
                Den ersten Code, den du in Level 1 benutzen kannst, ist `{print}`.

                `{print}` wird benutzt, um Text auf dem Bildschirm anzuzeigen.
            editor: <iframe class="fragment" src="/adventure/story/1/raw"></iframe>
        3:
            header: Der {print} Befehl
            text: |-
                Der zweite Code, den du in Level 1 benutzen kannst, ist `{ask}`.

                `{ask}` wird benutzt, um eine Frage zu stellen, die beantwortet werden kann.
            editor: <iframe class="fragment" src="/adventure/rock/1/raw"></iframe>
        4:
            header: '{ask}'
            text: |-
                Der letzte Text-Code, den du in Level 1 benutzen kannst, ist `{echo}`.

                `{echo}` wird benutzt, um die Antwort auf ein `{ask}` zu wiederholen.
            editor: <iframe class="fragment" src="/adventure/parrot/1/raw"></iframe>
        5:
            header: '{echo}'
            text: |-
                Mit `{print}`, `{ask}` und `{echo}` kannst du bereits eine kleine Geschichte erstellen.
                Dies ist ein guter Zeitpunkt die Abenteuer Papagei, Geschichte und Stein Schere Papier zu versuchen.
            editor: <iframe class="fragment" src="/adventure/ask_command/1/raw"></iframe>
        6:
            header: Programmieren!
            text: Abenteuer sind in den Tabs.
        7:
            header: Programmieren!
            text: |-
                Die gelben Pfeilknöpfe können zum Kopieren von Beispielen benutzt werden.
                <iframe class="fragment" src="/hedy/1"></iframe>
            editor: <iframe class="fragment" src="/hedy/1"></iframe>
        8:
            header: Programmierung!
            text: Nun da wir uns Text-Codes angeguckt haben, schauen wir uns als Nächstes Codes zum Zeichnen an.
        9:
            header: Zeichnen mit der Schildkröte
            text: '`{forward}` wird benutzt, um die Schildkröte vorwärts zu bewegen.'
        10:
            header: 'Zeichnen mit der Schildkröte: {forward}'
            text: '`{turn}` wird benutzt, um die Schildkröte nach links oder rechts zu drehen.'
            editor: <iframe class="fragment" src="/adventure/turtle/1/raw"></iframe>
        11:
            header: 'Zeichnen mit der Schildkröte: {turn}'
            text: '`{turn}` is used to make the turtle turn left or right.'
            editor: <iframe class="fragment" src="/adventure/turtle/1/raw"></iframe>
    2:
        1:
            header: Willkommen auf Level 2
            text: |-
                In this level you will learn to use variables.

                A variable is a word that can be used to store informatie.

                For example: a name, age or favorite sports team.
        2:
            header: Variablen
            text: To make or 'set' a variable we use the `{is}` command
            editor: <iframe class="fragment" src="/adventure/is_command/2/raw"></iframe>
        3:
            header: Interaktiv
            text: |-
                We can also set a variable by asking questions.

                The answer to the question is stored in the variable.

                This way we don't need the `{echo}`  command.
            editor: <iframe class="fragment" src="/adventure/ask_command/2/raw"></iframe>
        4:
            header: Mehrere Variablen
            text: Now that we use variables, we can use multiple variables instead of just one `{echo}`command.
            editor: <iframe class="fragment" src="/adventure/ask_command/2/raw"></iframe>
        5:
            header: Schlafen
            text: You can also use the `{sleep}` command to pause the code for a while.
            editor: <iframe class="fragment" src="/adventure/sleep_command/2/raw"></iframe>
        6:
            header: Schlafen 5
            text: |-
                You can add a number after the `{sleep}` command if you want the pause to be longer.

                If you want, you could even use a variable instead of a number to decide the duration of the sleep command.
            editor: <iframe class="fragment" src="/adventure/sleep_command/2/raw"></iframe>
        7:
            header: Lasst den Programmierspaß beginnen!
            text: Enjoy the adventures in level 3!
    3:
        1:
            header: Willkommen auf Level 3
            text: In this level you'll learn how to make a list, add and remove items form your lists and pick a random item off that list.
        2:
            header: Erstellen einer Liste
            text: |-
                You make a list with `{is}`.

                Seperate the items on your list with a comma.
            editor: <iframe class="fragment" src="/adventure/random_command/3/raw"></iframe>
        3:
            header: Zufällig
            text: |-
                You can use the list with the `{at}` `{random}` command.
                The computer will randomly pick one item of the list.
                Every time you run this code the output will differ.
            editor: <iframe class="fragment" src="/adventure/dice/3/raw"></iframe>
        4:
            header: Zufällig in einem Satz
            text: You can use the `{at}` `{random}` command in a sentence as well.
            editor: <iframe class="fragment" src="/adventure/random_command/3/raw"></iframe>
        5:
            header: Hinzufügen
            text: |-
                You can add items to a list with the `{add}` `{to}` command.

                You can choose what to add to the list or you can use the `{add}` `{to}` command in combination with the `{ask}` command.
                This way you can let the player decide what to add to the list.
            editor: <iframe class="fragment" src="/adventure/add_remove_command/3/raw"></iframe>
        6:
            header: Entfernen von
            text: |-
                The opposite of the `{add}` `{to}` command is the  `{remove}` `{from}` command.
                This command removes an item from a list.
            editor: <iframe class="fragment" src="/adventure/add_remove_command/3/raw"></iframe>
        9:
            header: Lass uns beginnen!
            text: Enjoy the adventures in level 3!
    4:
        1:
            header: Willkommen auf Level 4
            text: In this level you will learn how to use quotation marks.
            editor: <iframe class="fragment" src="/adventure/quotation_marks/4/raw"></iframe>
        2:
            header: Problem
            text: 'In the previous levels, you might have come across this problem:'
            editor: <iframe class="fragment" src="/adventure/default/4/raw"></iframe>
        3:
            header: Korrigiere es mit Anführungszeichen
            text: |-
                In this level we will fix this problem by using quotation marks.

                This also makes our code look more like 'real' Python code.
        4:
            header: Quotation marks with print
            text: Each time you use the `{print}` command you need to put the text that you want to appear on the screen in quotation marks.
            editor: <iframe class="fragment" src="/adventure/quotation_marks/4/raw"></iframe>
        5:
            header: Quotation marks with ask
            text: This also goes for the `{ask}` command.
            editor: <iframe class="fragment" src="/adventure/quotation_marks/4/raw"></iframe>
        6:
            header: Anführungszeichen und Variablen
            text: |-
                You do not want variable names to be printed on the screen.
                This is why variables should be left out of the quotation marks, like this:
            editor: <iframe class="fragment" src="/adventure/quotation_marks/4/raw"></iframe>
        7:
            header: Anführungszeichen und Variablen
            text: |-
                When variable names are used in the middle of a sentence, you have to leave the variables out of the quotation marks.
                The rest of the sentence however, does need quotation marks. That looks like this:
            editor: <iframe class="fragment" src="/adventure/quotation_marks/4/raw"></iframe>
        8:
            header: Anführungszeichen und Abkürzungen
            text: |-
                Be careful! Now that you are using quotation marks, you can't use apostrophes in contractions.

                Please try to print a contraction like "you're" or "I'm" in the screen below and see what happens....
            editor: <iframe class="fragment" src="/adventure/rock/4/raw"></iframe>
        9:
            header: Ready, Set, Go!
            text: Enjoy the adventures in level 4!
            editor: <iframe class="fragment" src="/adventure/clear_command/4/raw"></iframe>
        10:
            header: Auf die Plätze, fertig, los!
            text: Enjoy the adventures in level 4!
    5:
        1:
            header: Willkommen auf Level 5
            text: 'In this level you will learn to use 3 new commands: `{if}`, `{else}` and `{in}`.'
        2:
            header: if
            text: |-
                The `{if}` command allows you to choose between two options.
                In this example the computer will print 'nice' if the given answer is Hedy.
                If the answer is not Hedy, the computer will do nothing.
            editor: <iframe class="fragment" src="/adventure/if_command/5/raw"></iframe>
        3:
            header: Don't forget to print
            text: When using the `{if}` command, don't forget to use the `{print}` command.
            editor: <iframe class="fragment" src="/adventure/if_command/5/raw"></iframe>
        4:
            header: else
            text: |-
                When using an `{if}` command, you can also add an `{else}` command.
                If the answer is Hedy, the computer will print 'nice'.
                But if the answer is something else the computer will print 'boo'
            editor: <iframe class="fragment" src="/adventure/if_command/5/raw"></iframe>
        5:
            header: Long lines
            text: |-
                You might have noticed that your lines can get very long when you have both an `{if}` and an `{else}` command.

                You can choose to seperate commands and put them on 2 lines, like this:
            editor: <iframe class="fragment" src="/adventure/if_command/5/raw"></iframe>
        6:
            header: Ein weiterer neuer Befehl
            text: |-
                If you have practised with the `{if}` and `{else}` commands, you can also try the `{in}` command.

                With `{in}` you can let the computer check if an item is in a list, for example:

                Please note that Hedy is case sensitive. This means that if you answer "Green" instead of "green", Hedy will print "meh".
            editor: <iframe class="fragment" src="/adventure/in_command/5/raw"></iframe>
        7:
            header: Los geht's
            text: Enjoy the adventures in level 5!
    6:
        1:
            header: Willkommen auf Level 6
            text: In this level we are adding maths to our codes.
        2:
            header: Addition
            text: If you want to calculate an addition, simply use the plus sign.
            editor: <iframe class="fragment" src="/adventure/maths/6/raw"></iframe>
        3:
            header: Subtraction
            text: If you want to subtract, you can use the minus sign.
            editor: <iframe class="fragment" src="/adventure/maths/6/raw"></iframe>
        4:
            header: Multiplication
            text: If you want to do multiplications, you can use the asterisk.
            editor: <iframe class="fragment" src="/adventure/maths/6/raw"></iframe>
        5:
            header: Division
            text: You can use the slash for division.
            editor: <iframe class="fragment" src="/adventure/maths/6/raw"></iframe>
        6:
            header: Summary
            text: In summary, you can use +, -, * and / to do maths.
            editor: <iframe class="fragment" src="/adventure/maths/6/raw"></iframe>
        7:
            header: The = symbol
            text: |-
                From now on you can also use the = symbol instead of the `{is}` command.
                This goes for both numbers and words, and it also goes after the `{if}` or `{else}` commands.
            editor: <iframe class="fragment" src="/adventure/is_command/6/raw"></iframe>
        8:
            header: Calculations with variables
            text: 'You can use calculations with numbers, but you can also use variables to do calculations, like this:'
            editor: <iframe class="fragment" src="/adventure/calculator/6/raw"></iframe>
        9:
            header: Let's get to work!
            text: Enjoy the adventures in level 6!
    7:
        1:
            header: Welcome to level 7
            text: In this level you will learn how to repeat a line of code as many times a you'd like.
        2:
            header: repeat 3 times
            text: |-
                If you want to repeat a line of code, you can use the `{repeat}` 3 `{times}` code.
                If you want to repeat the line more times, simply change the number.

                For example: If you are programming a story where your character shouts for help for 5 times, it could look like this:
            editor: <iframe class="fragment" src="/adventure/story/7/raw"></iframe>
        3:
            header: Don't forget the print command
            text: When using the repeat command, do not forget the `{print}` command.
            editor: <iframe class="fragment" src="/adventure/print/7/raw"></iframe>
        4:
            header: Repeat an ask command
            text: You can also repeat an `{ask}`, `{if}` or `{else}` command multiple times.
            editor: <iframe class="fragment" src="/adventure/repeat_command_2/7/raw"></iframe>
        5:
            header: Ready Set Go!
            text: Enjoy the adventures in level 7!
    8:
        1:
            header: Welcome to level 8
            text: In this level you will learn to use indentation to make the `{repeat}`, `{if}` and `{else}` commands work for multiple lines of code.
        2:
            header: '{repeat} commands before'
            text: |-
                In the previous levels, the `{repeat}` command looked like this:

                You could only repeat one line of code.
            editor: <iframe class="fragment" src="/adventure/story/7/raw"></iframe>
        3:
            header: '{repeat} commands now'
            text: |-
                In this level you can repeat multiple lines of code. To do this you must tell the computer which lines belong together and should be repeated.
                You do this by using indentation.

                Use 4 spaces (or one tab) at the beginning of each line that you want to repeat, like this:
            editor: <iframe class="fragment" src="/adventure/repeat_command/8/raw"></iframe>
        4:
            header: '{repeat} commands now'
            text: |-
                If you want to, you can continue after the `{repeat}` command without indentation.
                The lines that do not start with indentation will not be repeated.
            editor: <iframe class="fragment" src="/adventure/repeat_command_2/8/raw"></iframe>
        5:
            header: if and else before
            text: |-
                The same goes for the `{if}` and `{else}` commands.
                These were the commands before:
            editor: <iframe class="fragment" src="/adventure/if_command/5/raw"></iframe>
        6:
            header: if and else now
            text: |-
                These are the `{if}` and `{else}` commands now.
                Each line after the `{if}` and `{else}` commands start with indentation.
            editor: <iframe class="fragment" src="/adventure/if_command/8/raw"></iframe>
        7:
            header: stopping the indentation
            text: Just like with the `{repeat}` command, you can stop using indentation and the lines will always be shown. Not just if the statement is true.
            editor: <iframe class="fragment" src="/adventure/if_command/8/raw"></iframe>
        8:
            header: if statements inside if statements
            text: |-
                You might have thought of trying to put an if command inside a repeat command, or inside another if command.
                For now, this is not possible yet. In the higher levels, it will be allowed, but for now let's focus on practising the `{if}` `{else}` and `{repeat}` commands with proper indentation first.
        9:
            header: Let's check out the adventures!
            text: Enjoy the adventures in level 8!
    9:
        1:
            header: Welcome to level 9
            text: |-
                In this level you can use multiple lines of code after an `{if}` or after a `{repeat}` command.

                You can even put a `{repeat}` command within another `{repeat}`  command.
        2:
            header: Multiple lines after `{repeat}`
            text: You are allowed to use multiple lines after `{repeat}`.
            editor: <iframe class="fragment" src="/adventure/repeat_command/9/raw"></iframe>
        3:
            header: Indentation matters!
            text: Indentation is very important to tell the computer which lines should be repeated and which lines should only be ran once.
            editor: <iframe class="fragment" src="/adventure/repeat_command_2/8/raw"></iframe>
        4:
            header: Multipe lines after `{if}`
            text: You can also use multiple lines after `{if}`
            editor: <iframe class="fragment" src="/adventure/if_command/9/raw"></iframe>
        5:
            header: Indentation matters
            text: Again, indentation is still very important and can make a big difference in the code.
            editor: <iframe class="fragment" src="/adventure/if_command/9/raw"></iframe>
        6:
            header: An `{if}` inside a `{repeat}`
            text: |-
                Now that you can use multiple lines of code after these command, you can also put them within each other.
                Check it out:
            editor: <iframe class="fragment" src="/adventure/repeat_command/9/raw"></iframe>
        7:
            header: Mind the indentation
            text: Mind that the fourth and sixth line of this code starts with 8 spaces of indentation.
            editor: <iframe class="fragment" src="/adventure/repeat_command/9/raw"></iframe>
        8:
            header: Let's go!
            text: Enjoy the adventures in level 9!
    10:
        1:
            header: Welcome to level 10
            text: 'In this level you will learn a new command: `{for}`.'
        2:
            header: The for command
            text: With for you can make a list and use all items on that list. `{for}` creates a block, like repeat and if so all lines in the block need to start with indentation (4 spaces).
            editor: <iframe class="fragment" src="/adventure/for_command/10/raw"></iframe>
        3:
            header: The for command
            text: 'Here you see another example of the `{for}` command:'
            editor: <iframe class="fragment" src="/adventure/dishes/10/raw"></iframe>
        4:
            header: Time to program!
            text: Enjoy the adventures in level 10!
    11:
        1:
            header: Welcome to level 11
            text: |-
                In this level, we add a new form of the `{for}` command. In earlier levels, we used for with a list, but we can also use for with numbers.

                This way we don't need the `{repeat}` command anymore.
        2:
            header: The for command
            text: 'This is what the new for command looks like:'
            editor: <iframe class="fragment" src="/adventure/for_command/11/raw"></iframe>
        3:
            header: the variable i
            text: |-
                In the previous slide the variable was named 'counter', because it was counting down.
                You can of course use any name for the variable you want.
                The standard name  for variables in this situation that is used in programming languages like Python is 'i'.
                That looks like this:
            editor: <iframe class="fragment" src="/adventure/calculator/11/raw"></iframe>
        4:
            header: Let's start programming!
            text: Enjoy the adventures in level 11!
    12:
        1:
            header: Welcome to level 12
            text: From this level on you are allowed to use decimal numbers and there are some changes to the quotation marks.
        2:
            header: Quotation marks
            text: |-
                This level makes some changes to the usage of quotation marks.
                From now on, **all texts** need to be in quotation marks. This includes values of variables, items on lists and text after {if} commands.
            editor: <iframe class="fragment" src="/adventure/quotation_marks/12/raw"></iframe>
        3:
            header: Decimal numbers
            text: |-
                From this level on you are also allowed to use decimal numbers. This can make programs like your restaurant even better!

                Numbers do not quotation marks.
            editor: <iframe class="fragment" src="/adventure/maths/12/raw"></iframe>
        4:
            header: Ready to try it out?
            text: Enjoy the adventures in level 12!
    13:
        1:
            header: Welcome to level 13
            text: We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two ifs but can use and and or.
        2:
            header: The and command
            text: |-
                The `{and}` command is always used in a combination with the {if} command.
                This way you can check if 2 statements are true. For example:
            editor: <iframe class="fragment" src="/adventure/and_or_command/13/raw"></iframe>
        3:
            header: The or command
            text: |-
                The `{or}` works in the same way as the `{and}` command, but only 1 of the two statements has to be true.

                Let's see what happens when you change the `{and}` for `{or}`.
            editor: <iframe class="fragment" src="/adventure/and_or_command/13/raw"></iframe>
        4:
            header: Let's go!
            text: Enjoy the adventures in level 13!
    14:
        1:
            header: Welcome to level 14
            text: In this level you'll learn some new symbols that can help you improve your programs, like >.
        2:
            header: Symbols
            text: |-
                These are the new symbols you can use:

                  The >  means bigger than...

                  The >= means bigger than or the same as...

                  The <  means smaller than...

                  The <= means smaller than or the same as...

                You can use them like this:
            editor: <iframe class="fragment" src="/adventure/is_command/14/raw"></iframe>
        3:
            header: Symbols
            text: |-
                You can also use:

                == is the same as.

                != is not

                == is used in `{if}` statements.
            editor: <iframe class="fragment" src="/adventure/default/14/raw"></iframe>
        4:
            header: Let's get to work!
            text: Enjoy the adventures in level 14!
    15:
        1:
            header: Welcome to level 15
            text: In this level you will learn about the `{while}` loop.
        2:
            header: '{while}'
            text: |-
                We are going to learn a new loop, the while loop! The loop continues as long as the statement is true. So don't forget to change the value in the loop.

                In the example code, we continue until a correct answer has been given. If the correct answer is never given, the loop will never end!
            editor: <iframe class="fragment" src="/adventure/while_command/15/raw"></iframe>
        3:
            header: Let's try it out!
            text: Enjoy the adventures in level 15!
    16:
        1:
            header: Welcome to level 16
            text: In this level you will learn about the [square brackets] and how to use them.
        2:
            header: Square brackets
            text: We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels. We use square brackets to point out a place in a list. The at random command can not be used anymore.
            editor: <iframe class="fragment" src="/adventure/random_command/16/raw"></iframe>
        3:
            header: Let's try it out!
            text: Enjoy the adventures in level 16!
    17:
        1:
            header: Welcome to level 17
            text: in this level you will learn how to use a colon and you will learn the elif command.
        2:
            header: Colon
            text: 'Now we are going to change indentation a little bit. Every time that we need an indentation, we need : at the line before the indentation.'
            editor: <iframe class="fragment" src="/adventure/print_command/17/raw"></iframe>
        3:
            header: Elif
            text: 'In this level you can also use a new command: elif. elif is short for else if and you need it when you want to make 3 (or more!) options. Check it out!'
            editor: <iframe class="fragment" src="/adventure/elif_command/17/raw"></iframe>
        4:
            header: Let's try it out!
            text: Enjoy the adventures in level 17!
    18:
        1:
            header: Welcome to level 18
            text: Congratulations! You have reached the last level of Hedy! The code you have created here can be copied to real Python environments like replit or PyCharm, and you can continue learning there! Note however that Python can only read English commands, so if you have been using other languages,
                you will need to switch to English now.
        2:
            header: The Python way
            text: |-
                We arrived at real Python code! That means we need to use parentheses with print and range from now on.

                Also, if you want to print more than one item, you need to separate them by commas.

                The final change we will need to make to get Python code is changing ask into input.

                Click on the 'print' tab for all the examples.
            editor: <iframe class="fragment" src="/hedy/18"></iframe>
        3:
            header: The very last adventures!
            text: Enjoy the very last adventures in level 18!
