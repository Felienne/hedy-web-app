levels:
    0:
        1:
            header: ¡Bienvenido a Hedy!
            text: Hedy es un lenguaje de programación.
        2:
            header: Programación
            text: |-
                Programar es dar instrucciones a un ordenador, utilizando el lenguaje del ordenador.

                Dicho lenguaje se denomina "lenguaje de programación".
        3:
            header: Lenguaje de programación
            text: |-
                ¿Quizá ya conoces algunos lenguajes de programación?
                Algunos ejemplos son:
                * Scratch
                * Python
                * HTML
        4:
            header: Programación
            text: |-
                Si sabes programar, puedes hacer muchas cosas chulas:
                * Construir historias interactivas
                * Crear dibujos por ordenador y dibujarlos en papel o tela.
                * Construir tus propias aplicaciones para usarlas en tu teléfono.
        5:
            header: Programar en Hedy
            text: |-
                En Hedy usamos códigos especiales, como `{print}`.
            code: '{print} Welcome to Hedy!'
        6:
            header: Programar en Hedy
            text: |-
                Las palabras del código se mostrarán en rosa.
            code: '{print} Welcome to Hedy!'
        7:
            header: Programar en Hedy
            text: |-
                Iniciamos el código con el botón Ejecutar código debajo del código.
            code: '{print} Welcome to Hedy!'
        8:
            header: Programar en Hedy
            text: |-
                El resultado aparece en el lado derecho.
            code: '{print} Welcome to Hedy!'
        9:
            header: Programar en Hedy
            text: |-
                La salida también puede ser un dibujo.
            code: |-
                {forward} 100
                {turn} left
    1:
        1:
            header: ¡Bienvenido al nivel 1!
            text: |-
                ¡Empezaremos el nivel 1 creando historias en Hedy!

                Necesitamos tres códigos de texto para crear historias interactivas.
        2:
            header: '{print}'
            text: |-
                El primer código que puede utilizar en el nivel 1 es `{print}`.

                `{print}` se utiliza para mostrar texto en la pantalla.
            code: |-
                {print} Put text on the screen
        3:
            header: El comando {print}
            text: |-
                Puedes cambiar el texto después del comando imprimir al que tu quieras.

                O puedes imprimir varias líneas añadiendo otra línea de código que también empiece con `{print}`.
            code: |-
                {print} Put text on the screen
        4:
            header: '{ask}'
            text: |-
                El segundo código que puedes usar en el nivel 1 es `{ask}`.

                `{ask}` se usa para hacer una pregunta que se puede responder.
            code: |-
                {print} Welcome to your own rock scissors paper!
                {ask} What will you choose?
        5:
            header: '{echo}'
            text: |-
                Como puedes ver en el ejemplo anterior. Si usas el comando `{ask}`, puedes hacer una pregunta.

                En cambio, la respuesta no se muestra en la pantalla de salida.

                Si quieres que la respuesta se muestre, puedes usar el último comando de este nivel: `{echo}`.

                `{echo}` se usa para repetir la respuesta de una `{ask}`.
            editor: /hedy/1
        6:
            header: ¡Programando!
            text: |-
                Con `{print}`, `{ask}` y `{echo}` ya puedes crear una pequeña historia.
                Este es un buen momento para probar las aventuras Loro, Cuento y Piedra, papel o tijera.
        7:
            header: ¡Programando!
            text: Las aventuras se muestran en pestañas.
            editor: /hedy/1
        8:
            header: ¡Programación!
            text: |-
                Los botones de flecha amarillos se pueden utilizar para copiar ejemplos.
            editor: /hedy/1
        9:
            header: Dibuja con la tortuga
            text: Ahora que ya hemos visto los códigos de texto, veremos a continuación los códigos de dibujo.
        10:
            header: 'Dibujando con la tortuga: {forward}'
            text: '`{forward}` se utiliza para mover la tortuga hacia adelante.'
            code: |-
                {forward} 50
                {turn} left
        11:
            header: 'Dibuja con la tortuga: {turn}'
            text: '`{turn}` se utiliza para hacer que la tortuga gire a la izquierda o a la derecha.'
            code: |-
                {forward} 50
                {turn} left
        12:
            header: Debugging
            text: Debugging a code means getting rid of mistakes in the code. Let's debug this code together. Click the ladybug button to start the debugger.
            code: |
                    I am DJ Hedy
                    {print} What song would you like to hear?
                    {ask} I like that song too!
                    {print} Next up... {echo}
        13:
            header: Let the programming fun begin!
            text: Enjoy the adventures in level 1!
    2:
        1:
            header: Bienvenido al nivel 2
            text: |-
                En este nivel aprenderás a usar las variables.

                Una variable es una palabra que se usa para almacenar información.

                Por ejemplo: un nombre, edad o equipo de deportes favorito.
        2:
            header: Variables
            text: Para crear o 'establecer' una variable usamos el comando `{is}`
            code: |-
                name {is} Hedy
                age {is} 15
                {print} name is age years old
        3:
            header: Interactivo
            text: |-
                También podemos establecer una variable haciendo preguntas.

                La respuesta a esta pregunta se guarda en la variable.

                De esta manera no hace falta el comando `{echo}`.
            code: |-
                name {is} {ask} What is your name?
                {print} Hello name
        4:
            header: Multiples variables
            text: Ahora que usamos variables, podemos usar varias variables en vez de sólo un comando `{echo}`.
            code: |-
                name {is} {ask} What is your name?
                {print} Hello name
                age {is} {ask} How old are you?
                {print} name is age years old.
        5:
            header: Dormir
            text: También puedes usar el comando `{sleep}` para pausar el código durante un rato.
            code: |-
                {print} My favorite colour is...
                {sleep} 2
                {print} green!
        6:
            header: Dormir 5
            text: |-
                Puedes añadir un número tras el comando `{sleep}` si quieres que la pausa sea más larga.

                Si quieres, incluso podrías usar una variable en vez de un número para decidir la duración del comando dormir.
            code: |-
                pause {is} 10
                {print} My favorite colour is...
                {sleep} pause
                {print} green!
        7:
            header: Debugging
            text: Debugging a code means getting rid of mistakes in the code. Let's debug this code together. Click the ladybug button to start the debugger.
            code: |-
                    {print} Welcome to the donut shop!
                    filling {is} What kind of filling would you like?
                    {print} You have chosen... Filling! Yum!
                    topping {ask} What kind of topping would you like?
                    topping is delicious!
                    {print} I'll go get your donut. {sleep}
                    {print} Here you go! A filling donut with toping!
                    {ask} Have a nice day!
        8:
            header: ¡Que empiece la diversión de programar!
            text: ¡Disfruta las aventuras en el nivel 3!
    3:
        1:
            header: Bienvenido al nivel 3
            text: En este nivel aprenderás como hacer un lista, añadir y eliminar objetos de tus listas y elegir un objeto al azar de esa lista.
        2:
            header: Hacer una lista
            text: |-
                Creas una lista con `{is}`.

                Separa tus objetos en tu lista con una coma.
            code: |-
                animals {is} dogs, cats, kangaroos
                ```
        3:
            header: En aleatorio
            text: |-
                Puedes usar la lista con el comando `{at}` `{random}`.
                El ordenador elegirá al azar un objeto de la lista.
                Cada vez que ejecutes este código el resultado será diferente.
            code: |-
                animals {is} dogs, cats, kangaroos
                {print} animals {at} {random}
                ```
        4:
            header: En aleatorio en una frase
            text: También puedes usar el comando `{at}` `{random}` en una frase.
            code: |-
                animals {is} dogs, cats, kangaroos
                {print} My favorite animal is animals {at} {random}
                ```
        5:
            header: Añadir a
            text: |-
                Puedes añadir objetos a una lista con el comando `{add}` `{to}`.

                Puedes elegir qué añadir a la lista o puedes usar el comando `{add}` `{to}` en combinación con el comando `{ask}`.
                De esta manera puedes dejar que el jugador elija qué añadir a la lista.
            code: |-
                animals {is} dog, cat, kangaroo
                like {is} {ask} What is your favorite animal?
                {add} like {to_list} animals
                {print} I choose animals {at} {random}
        6:
            header: Eliminar de
            text: |-
                Lo contrario del comando `{add}` `{to}` es el comando `{remove}` `{from}`.
                Este comando elimina un objeto de una lista.
            code: |-
                animals {is} dog, cat, kangaroo
                dislike {is} {ask} What animal do you not like?
                {remove} dislike {from} animals
                {print} I choose animals {at} {random}
        7:
            header: Debugging
            text: Let's debug this code!
            editor: |-
                    music_genres {is} rock, pop, metal, indie, jazz
                    chosen_genre is music {at} {random}
                    {print} Let's listen to chosen genre
                    nice {ask} Do you like that genre?
                    {remove} chosen_genre {from} chosen_genre
                    second_choice {is} music_genres
                    {print} or do you prefer... second_choice {at} {random}
                    {remove} second_choice {to} music_genres
                    {print} I like music_genre {random} best!
        8:
            header: ¡Manos a la obra!
            text: ¡Disfruta las aventuras en el nivel 3!
    4:
        1:
            header: Bienvenido al nivel 4
            text: En este nivel aprenderás a cómo usar las comillas.
            code: '{print} ''print with quotes!'''
        2:
            header: Problema
            text: 'En los niveles anteriores, quizá te hayas encontrado este problema:'
            code: |-
                name {is} Sophie
                {print} My name is name
        3:
            header: Arreglarlo con comillas
            text: |-
                En este nivel arreglaremos este problema usando las comillas.

                Esto tambiém hace que nuestro código se parezca más a un código 'real' de Python.
        4:
            header: Comillas con imprimir
            text: Cada vez que uses el comando `{print}` necesitas poner el texto que quieras con comillas para que aparezca en la pantalla.
            code: '{print} ''print with quotes!'''
        5:
            header: Comillas con preguntar
            text: Esto también ocurre para el comando `{ask}`.
            code: name {is} {ask} 'name please?'
        6:
            header: Comillas y variables
            text: |-
                No quieres que se impriman nombres de variables en la pantalla.
                Esto es por lo que las variables deben dejarse fuera de las comillas, tal que así:
            code: |-
                name {is} Harry
                {print} 'Hello ' name
        7:
            header: Comillas y variables
            text: |-
                Cuando los nombres de variables se usan en medio de una frase, tienes que dejar las variables fuera de las comillas.
                El resto de la frase en cambio, necesita comillas. Que se parece a esto:
            code: |-
                name {is} Harry
                {print} 'Hello ' name ', how are you?'
        8:
            header: Comillas y contracciones
            text: |-
                ¡Cuidado! Ahora que estás usando comillas, no puedes usar apóstrofes en las abreviaturas.

                Por favor intenta imprimir una contracción como "you're" o "I'm" en la pantalla de abajo y verás que sucede....
            code: '{print} ''This won''t work!'''
        9:
            header: Limpiar
            text: |-
                En este nivel también aprenderás el comando {clear}.
                Con este comando puedes limpiar todo el texto de tu pantalla de salida.

                Ten cuidado si siempre también usas un comando dormir. Si no lo haces el ordenador ¡limpiará todo el texto antes de que lo puedas leer!
            code: |-
                {print} '3'
                {clear}
                {print} '2'
                {clear}
                {print} '1'
                {clear}
                {print} 'SURPRISE!'
        10:
            header: ¡Preparados, Listos, Ya!
            text: ¡Disfruta las aventuras en el nivel 4!
    5:
        1:
            header: Bienvenido al nivel 5
            text: 'En este nivel aprenderás a usar 3 comandos nuevos: `{if}`, `{else}` y `{in}`.'
        2:
            header: si
            text: |-
                El comando `{if}` permite elegir entre dos opciones.
                En este ejemplo el ordenador imprimirá 'bien' si la respuesta dad es Hedy.
                Si la respuesta no es Hedy, el ordenador no hará nada.
            code: |-
                name {is} {ask} 'what is your name?'
                {if} name {is} Hedy {print} 'nice'
        3:
            header: No te olvides imprimir
            text: Al usar el comando `{if}`, no te olvides de usar el comando `{print}`.
            code: '{if} name {is} Hedy ''nice'''
        4:
            header: sino
            text: |-
                Al usar el comando `{if}`, también puedes añadir el comando `{else}`.
                Si la respuesta es Hedy, el ordenador imprimirá 'bien'.
                Pero si la respuesta es otra cosa el ordenador imprimirá 'boo'
            code: '{if} name {is} Hedy {print} ''nice'' {else} {print} ''boo!'''
        5:
            header: Líneas largas
            text: |-
                Quizás te hayas dado cuenta que tus líneas pueden hacerse muy largas cuando tienes ambos comandos `{if}` y `{else}`.

                Puedes elegir separar los comandos y ponerlos en 2 líneas, tal que así:
            code: |-
                {if} name {is} Hedy {print} 'nice'
                {else} {print} 'boo!'
        6:
            header: Otro comando nuevo
            text: |-
                Si has practicado con los comandos `{if}` y `{else}`, también puedes intentar el comando `{in}`.

                Con `{in}` puedes dejar que el ordenador compruebe si un objeto está en una lista, por ejemplo:

                Por favor ten en cuenta que Hedy distingue entre mayúsculas y minúsculas. Esto significa que tu respuesta "Verde" en vez de "verde", Hedy imprimirá "meh".
            code: |-
                pretty_colors {is} green, yellow
                favorite_color {is} {ask} 'What is your favorite color?'
                {if} favorite_color {in} pretty_colors {print} 'pretty!'
                {else} {print} 'meh'
        7:
            header: ¡Vamos!
            text: ¡Disfruta las aventuras en el nivel 5!
    6:
        1:
            header: Bienvenido al nivel 6
            text: En este nivel añadimos las matemáticas a nuestros códigos.
        2:
            header: Suma
            text: Si quieres calcular una suma, simplemente usa el signo más.
            code: '{print} ''5 plus 5 is '' 5 + 5'
        3:
            header: Resta
            text: Si quieres restar, puedes usar el signo menos.
            code: '{print} ''5 minus 5 is '' 5 - 5'
        4:
            header: Multiplicación
            text: Si quieres hacer multiplicaciones, puedes usar el asterisco.
            code: '{print} ''5 times 5 is '' 5 * 5'
        5:
            header: División
            text: Puedes usar la barra para dividir.
            code: '{print} ''5 divided by 5 is '' 5 / 5'
        6:
            header: Resumen
            text: En resumen, puedes usar +, -, * y / para hacer cálculos.
            code: |-
                {print} '5 plus 5 is ' 5 + 5
                {print} '5 minus 5 is ' 5 - 5
                {print} '5 times 5 is ' 5 * 5
                {print} '5 divided by 5 is ' 5 / 5
        7:
            header: El símbolo =
            text: |-
                Desde ahora puedes usar también el símbolo = en vez del comando `{is}`.
                Esto ocurre tanto para números y palabras, y también ocurre tras los comandos `{if}` o `{else}`.
            code: |-
                name = Hedy
                answer = 20 + 4
        8:
            header: Cálculos con variables
            text: 'Puedes usar cálculos con números, pero también puedes usar variables para hacer cálculos, tal que así:'
            code: |-
                number_1 = {ask} 'Fill in the first number:'
                number_2 = {ask} 'Fill in the second number:'
                correct_answer = number_1 * number_2
                {print} number_1 ' times ' number_2 ' is ' correct_answer
        9:
            header: ¡Manos a la obra!
            text: ¡Disfruta las aventuras en el nivel 6!
    7:
        1:
            header: Bienvenido al nivel 7
            text: En este nivel aprenderás a cómo repetir una línea de código tantas veces como quieras.
        2:
            header: repetir 3 veces
            text: |-
                Si quieres repetir una línea de código, puedes usar el código `{repeat}` 3 `{times}`.
                Si quieres repetir la línea más veces, simplemente cambia el número.

                Por ejemplo: Si estás programando una historia donde tu personaje pide ayuda 5 veces, podría ser así:
            code: |-
                {print} 'The prince kept calling for help'
                {repeat} 5 {times} {print} 'Help!'
                {print} 'Why is nobody helping me?'
        3:
            header: No te olvides el comando imprimir
            text: Al usar el comando repetir, no te olvides el comando `{print}`.
            code: '{repeat} 5 {times} ''Help!'''
        4:
            header: Repetir un comando preguntar
            text: También puedes repetir un comando `{ask}`, `{if}` or `{else}` varias veces.
            code: |-
                {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                {else} {repeat} 3 {times} {print} 'You have learned something new!'
        5:
            header: ¡Preparado Listo Ya!
            text: ¡Disfruta las aventuras en el nivel 7!
    8:
        1:
            header: Bienvenido al nivel 8
            text: En este nivel aprenderás a usar la sangría para hacer funcionar los comandos `{repeat}`, `{if}` and `{else}` para varias líneas de código.
        2:
            header: comandos {repeat} antes
            text: |-
                En los niveles anteriores, el comando `{repeat}` se parecía a esto:

                Sólo podías repetir una línea de código.
            code: |-
                {print} 'The prince kept calling for help'
                {repeat} 5 {times} {print} 'Help!'
                {print} 'Why is nobody helping me?'
        3:
            header: comandos {repeat} ahora
            text: |-
                En este nivel puedes repetir carias líneas de código. Para hacerlo debes decirle al ordenador que líneas van juntas y deberían repetirse.
                Esto lo haces usando la sangría.

                Usa 4 espacios (o una tabulación) al principio de cada línea que quieras repetir, tal que así:
            code: |-
                {repeat} 5 {times}
                    {print} 'Hello everyone'
                    {print} 'This will be printed 5 times'
        4:
            header: comandos {repeat} ahora
            text: |-
                Si quieres, puedes continur tras el comando `{repeat}` sin sangría.
                Las líneas que no empiecen con sangría no se repetirán.
            code: |-
                {repeat} 3 {times}
                    {print} 'Hello!'
                {print} 'We are done repeating!'
        5:
            header: antes si y sino
            text: |-
                Lo mismo ocurre para los comandos `{if}` y `{else}`.
                Antes estos eran los comandos:
            code: |-
                {if} name {is} Hedy {print} 'nice'
                {else} {print} 'boo!'
        6:
            header: ahora si y sino
            text: |-
                Ahora estos son los comandos `{if}` y `{else}`.
                Cada línea tras los comandos `{if}` y `{else}` empieza con sangría.
            code: |-
                name = {ask} 'What is your name?'
                {if} name {is} Hedy
                    {print} 'Welcome Hedy'
                {else}
                    {print} 'Welcome programmer!'
        7:
            header: detener la sangría
            text: Al igual que con el comando `{repeat}`, puedes dejar de usar sangría y las líneas siempre se mostrarán. No sólo si la sentencia es verdadera.
            code: "name = {ask} 'What is your name?'\n{if} name {is} Hedy\n    {print} 'Welcome Hedy'\n{else}\n    {print} 'Welcome programmer!' \n{print} '3..2..1.. Start programming!'"
        8:
            header: sentencias si dentro de sentencias si
            text: |-
                Quizás hayas pensado en intentar poner un comando si dentro de un comando repetir, o dentro de otro comando si.
                Por ahora, esto todavía no es posible. En niveles superiores, esto se permitirá, pero por ahora centrémosnos primero en practicar los comandos `{if}` `{else}` y `{repeat}` con la sangría adecuada.
        9:
            header: ¡Vamos a ver las aventuras!
            text: ¡Disfruta las aventuras en el nivel 8!
    9:
        1:
            header: Bienvenido al nivel 9
            text: |-
                En este nivel puedes usar varias líneas de código tras un comando `{if}` o tras un `{repeat}`.

                Incluso puedes poner un comando `{repeat}` dentro de otro comando `{repeat}`.
        2:
            header: Varias líneas después de `{repeat}`
            text: Tienes permitido usar varias líneas después de `{repeat}`.
            code: |-
                {repeat} 3 {times}
                    food = {ask} 'What do you want?'
                    {if} food {is} pizza
                        {print} 'nice!'
                    {else}
                        {print} 'pizza is better'
        3:
            header: ¡La sangría importa!
            text: La sangría es muy importante para decirle al ordenador qué líneas deberían repetirse y qué líneas deberían ejecutarse una vez.
            code: |-
                {repeat} 3 {times}
                    {print} 'This line will be repeated...'
                    {print} 'This one too...'
                {print} 'but this one will not!'
        4:
            header: Varias líneas después de `{if}`
            text: Puedes usar varias líneas después de `{if}`
            code: |-
                continue = {ask} 'Do you want to continue?'
                {if} continue = yes
                    sure = {ask} 'Are you sure?'
                    {if} sure {is} yes
                        {print} 'We will continue'
                    {else}
                        {print} 'You are not sure'
                {else}
                    {print} 'You do not want to continue'
        5:
            header: La sangría importa
            text: De nuevo, la sangría es todavía muy importante y puede hacer una gran diferencia en el código.
            code: |-
                continue = {ask} 'Do you want to continue?'
                {if} continue = yes
                    sure = {ask} 'Are you sure?'
                    {if} sure {is} yes
                        {print} 'We will continue'
                {else}
                    {print} 'You are not sure'
        6:
            header: Un `{if}` dentro de un `{repeat}`
            text: |-
                Ahora que puedes usar varias líneas de código tras estos comandos, también puedes ponerlos dentro de otros.
                Compruébalo:
            code: |-
                {repeat} 3 {times}
                    food = {ask} 'What do you want?'
                    {if} food {is} pizza
                        {print} 'nice!'
                    {else}
                        {print} 'pizza is better'
        7:
            header: Cuidado con la sangría
            text: Cuidado que la cuarta y sexta línea de este código empieza con 8 espacios de sangría.
            code: |-
                {repeat} 3 {times}
                    food = {ask} 'What do you want?'
                    {if} food {is} pizza
                        {print} 'nice!'
                    {else}
                        {print} 'pizza is better'
        8:
            header: ¡Vamos!
            text: ¡Disfruta las aventuras en el nivel 9!
    10:
        1:
            header: Bienvenido al nivel 10
            text: 'En este nivel aprenderás un nuevo comando: `{for}`.'
        2:
            header: El comando para
            text: Con para puedes hacer una lista y usar todos los objectos de esa lista. `{for}` crea un bloque, como repetir y si así que todas las líneas del bloque tienen que empezar con sangría (4 espacios).
            code: |-
                animals = dog, cat, blobfish
                {for} animal {in} animals
                    {print} 'I love ' animal
        3:
            header: El comando para
            text: 'Aquí puedes ver otro ejemplo del comando `{for}`:'
            code: |-
                days = Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
                names = mom, dad, Emma, Sophie
                {for} day {in} days
                    {print} names {at} {random} ' does the dishes on ' day
        4:
            header: ¡Hora de programar!
            text: ¡Disfruta las aventuras en el nivel 10!
    11:
        1:
            header: Bienvenido al nivel 11
            text: |-
                En este nivel, añadimos una nueva forma del comando `{for}`. En niveles anteriores, usamos para con una lista, pero también podemos usar para con números.

                De esta manera no necesitamos el comando `{repeat}` nunca más.
        2:
            header: El comando para
            text: 'Así es el nuevo comando para:'
            code: |-
                {for} counter {in} {range} 1 {to} 10
                    {print} counter
                {print} 'Ready or not. Here I come!'
        3:
            header: la variable i
            text: |-
                En la diapositiva anterior la variable se llamó 'contador', porque because era la cuenta atrás.
                Por supuesto puedes usar cualquier nombre que quieras para la variable.
                En esta situación el nombre estándar para las variables que se usan en lenguajes de programación como Python es 'i'.
                Se parece a esto:
            code: |-
                number = 10
                {for} i {in} {range} 1 {to} 10
                    {print} i * number
        4:
            header: ¡Comencemos a programar!
            text: ¡Disfruta las aventuras en el nivel 11!
    12:
        1:
            header: Bienvenido al nivel 12
            text: |-
                A partir de este nivel puedes utilizar números decimales y hay algunos cambios en las comillas.
                ¡A partir de este nivel también puedes utilizar funciones!
        2:
            header: Comillas
            text: |-
                Este nivel trae algunos cambios al uso de las comillas.
                De ahora en adelante, **todos los textos** tienen que tener comillas. Esto incluye los valores de las variables, objetos en listas y texto tras comandos {if}.
            code: |-
                name = 'Hedy the Robot'
                {print} 'Hello ' name
        3:
            header: Números decimales
            text: |-
                Desde este nivel en adelante también se permite que uses números decimales. ¡Esto puede hacer programas como tu restaurante incluso mejor!

                Los números no llevan comillas.
            code: |-
                {print} 'decimal numbers now need to use a dot'
                {print} 2.5 + 2.5
        4:
            header: Functions!
            text: |-
                In this level you'll learn how to use functions. A function is a block of code you can easily use multiple times. Using functions helps us organize pieces of code that we can use again and again. To create a function, use define and give the function a name. Then put all the lines you want in the function in a indented block under the define line. Leave one empty line in your code to make it look nice and neat. Great job! You have created a function!

                Now, whenever we need that block of code, we just use call with the function's name to call it up! We don't have to type that block of code again.
        5:
            header: ¡Brilla brilla pequeña estrella!
            text: |-
                En este programa ves un ejemplo de una función.
                ¡Veamos qué ocurre si rellenas el resto!
            code: |-
                {define} twinkle
                     {print} 'Twinkle'
                     {print} '...'

                 {call} twinkle
                 {print} 'Up above the world so high'
                 {print} 'Like a diamond in the sky'
                 {call} twinkle
        6:
            header: Funciones
            text: Como has podido ver en el ejemplo una función es un bloque de código que puede ser llamado en cualquier momento. Se usa `{define}` para definir la función y `{call}` para usarla.
        7:
            header: ¿Listo para probarlo?
            text: ¡Disfruta de las aventuras en el nivel 12!
    13:
        1:
            header: Bienvenido al nivel 13
            text: |-
                Ahora vamos a aprender `{and}` y `{or}`. Si quieres comprobar dos sentencias, no tienes que usar dos if sino que puedes usar and y or.
                A partir de ahora también puedes usar argumentos en tus funciones.
        2:
            header: El comando y
            text: |-
                El comando `{and}` siempre se usa en una combinación con el comando {if}.
                De esta manera puedes comprobar si 2 sentencias son verdaderas. Por ejemplo:
            code: |-
                name = {ask} 'what is your name?'
                age = {ask} 'what is your age?'
                {if} name {is} 'Hedy' {and} age {is} 2
                    {print} 'You are the real Hedy!'
        3:
            header: El comando o
            text: |-
                El `{or}` funciona de la misma manera que el comando `{and}`, pero sólo 1 de las dos sentencias tiene que ser verdadero.

                Veamos que ocurre cuando cambias el `{and}` por `{or}`.
            code: |-
                name = {ask} 'what is your name?'
                {if} name {is} 'Hedy' {or} name {is} 'hedy'
                    {print} 'Welcome!!'
        4:
            header: Functions with arguments
            text: Now that you've learned how to use functions, you'll learn how to use a function with an **argument**. An argument is a variable that is used within a function. It is not used outside the function.
        5:
            header: Ejemplo
            text: |-
                En este ejemplo puedes ver cómo se utiliza el argumento 'place' en la función.
                Ejecuta el código y cambia 'ocean' y 'sea' por otra cosa, a ver qué pasa.
            code: |-
                {define} song {with} place
                    {print} 'My Bonnie is over the ' place

                {call} song {with} 'ocean'
                {call} song {with} 'sea'
                {call} song {with} 'ocean'
        6:
            header: Un ejemplo con una variable
            text: |-
                Ahora has ssen cómo funcionan los argumentos, también podría combinar función con una pregunta.

                ¿Qué sucede si usted hace estos cambios?:
                ```
                definir canción con lugar
                    Imprimir 'Mi Bonnie es ' lugar

                La respuesta es preguntar "¿Dónde está mi Bonnie?"
                llamada a la canción con la respuesta
                ```
            code: |-
                {define} song {with} place
                    {print} 'My Bonnie is over the ' place

                {call} song {with} 'ocean'
                {call} song {with} 'sea'
                {call} song {with} 'ocean'
        7:
            header: ¡Aún más preguntas!
            text: |-
                Ahora hemos combinado aún más preguntas con la función. Escriba este código y vea qué sucede.

                Observe cómo las variables y los argumentos tienen el mismo nombre. Esto está permitido.
                ¿Te confunde? Simplemente use nombres diferentes, eso también está permitido.
                ```
                definir canción con nombre, lugar
                    imprime 'Mi 'nombre' es 'lugar

                el nombre es preguntar '¿Quién?'
                el lugar es preguntar '¿Dónde están?'
                llamar canción con nombre, lugar
                ```
            code: |-
                {define} song {with} place
                    {print} 'My Bonnie is over the ' place

                {call} song {with} 'ocean'
                {call} song {with} 'sea'
                {call} song {with} 'ocean'
        8:
            header: ¡Vamos!
            text: ¡Disfruta de las aventuras en el nivel 13!
    14:
        1:
            header: Bienvenido al nivel 14
            text: En este nivel aprenderás algunos símbolos nuevos que pueden ayudarte a mejorar tus programas, como >. También aprenderás a trabajar con los valores de retorno de una función.
        2:
            header: Símbolos
            text: |-
                Estos son los nuevos símbolos que puedes usar:

                  El >  significa mayor que...

                  El >= significa mayor o igual que...

                  El <  significa menor que...

                  El <= significa menor o igual que...

                Puedes usarlos así:
            code: |-
                age = {ask} 'How old are you?'
                {if} age < 13
                    {print} 'You are younger than me!'
                {else}
                    {print} 'You are older than me!'
        3:
            header: Símbolos
            text: |-
                También puedes usar:

                == is igual que.

                != no es

                == se usa en sentencias `{if}`.
            code: |-
                answer = {ask} 'Do you want to learn more?'
                {if} answer == 'yes'
                    {print} 'Go to the next adventure!'
                {if} answer != 'yes'
                    {print} 'That is a shame!'
        4:
            header: Return value
            text: In the previous levels you have learned to create functions and use arguments with them. Another great use of a function is to let it calculate something for you. You can give the function a calculation and it will give you the answer of the calculation. This answer is called a **return
                value**.
        5:
            header: Valor devuelto
            text: Por ejemplo, en este código la función calculate_new_price calculará el nuevo precio de cualquier artículo. Le dará el nuevo precio como valor de retorno.
            code: |-
                {define} calculate_new_price {with} amount, percentage
                    percentage = percentage / 100
                    discount_amount = amount * percentage
                    return amount - discount_amount

                old_price = {ask} 'How much is on the price tag?'
                discount = {ask} 'What percentage is the discount?'

                new_price = {call} calculate_new_price {with} old_price, discount
                {print} 'The new price is ' new_price ' dollar'
        6:
            header: ¡Manos a la obra!
            text: ¡Disfruta de las aventuras en el nivel 14!
    15:
        1:
            header: Bienvenido al nivel 15
            text: En este nivel aprenderás sobre el bucle `{while}`.
        2:
            header: '{while}'
            text: |-
                Vamos a aprender un nuevo bucle, ¡el bucle mientras! El bucle continua tanto que la sentencia sea verdadera. Así que no te olvides de cambiar el valor en el bucle.

                En el código de ejemplo, continuamos hasta que se da una respuesta correcta. Si nunca se da la respuesta correcta, ¡el bucle nunca acabará!
            code: |-
                answer = 0
                {while} answer != 25
                    answer = {ask} 'What is 5 times 5?'
                {print} 'A correct answer has been given'
        3:
            header: ¡Vamos a probarlo!
            text: ¡Disfruta las aventuras en el nivel 15!
    16:
        1:
            header: Bienvenido al nivel 16
            text: En este nivel aprenderás sobre los [corchetes] y cómo se usan.
        2:
            header: Corchetes
            text: Vamos a hacer listas a la manera de Python, ¡con corchetes alrededor de las listas! También mantendremos las comillas alrededor de cada objeto como hemos aprendido en los niveles anteriores. Usamos corchetes para apuntar a un lugar en una lista. El comando en aleatorio ya no se puede
                usar nunca más.
            code: |-
                friends = ['Ahmed', 'Ben', 'Cayden']
                {print} friends[1] ' is the first friend on the list.'
                {print} friends[2] ' is the second friend on the list.'
                {print} friends[3] ' is the third friend on the list.'
                #now we will match 2 lists using the variable i
                lucky_numbers = [15, 18, 6]
                {for} i {in} {range} 1 {to} 3
                    {print} friends[i] 's lucky number is ' lucky_numbers[i]
        3:
            header: ¡Vamos a probarlo!
            text: ¡Disfruta las aventuras en el nivel 16!
    17:
        1:
            header: Bienvenido al nivel 17
            text: en este nivel aprenderás a como usar los dos puntos y aprenderás el comando sino.
        2:
            header: Dos puntos
            text: 'Ahora vamos a cambiar la sangría un poco. Cada vez que necesitemos una sangría, necesitamos : en la línea de antes de la sangría.'
            code: |-
                prices = ['1 million dollars', 'an apple pie', 'nothing']
                your_price = prices[{random}]
                {print} 'You win ' your_price
                {if} your_price == '1 million dollars' :
                    {print} 'Yeah! You are rich!'
                {else}:
                    {print} 'Better luck next time..'
        3:
            header: Sino
            text: 'En este nivel también puedes usar un nuevo comando: sino. sino es la abreviatura para si no si y lo necesitas cuando quieras hacer 3 (''o más!) opciones. ¡Compruébalo!'
            code: |-
                prices = ['1 million dollars', 'an apple pie', 'nothing']
                your_price = prices[{random}]
                {print} 'You win ' your_price
                {if} your_price == '1 million dollars' :
                    {print} 'Yeah! You are rich!'
                {elif} your_price == 'an apple pie' :
                    {print} 'Lovely, an apple pie!'
                {else}:
                    {print} 'Better luck next time..'
        4:
            header: ¡Vamos a probarlo!
            text: ¡Disfruta las aventuras en el nivel 17!
    18:
        1:
            header: Bienvenido al nivel 18
            text: ¡Enhorabuena! ¡Has alcanzado el último nivel de Hedy! El código que has creado se puede copiar a un entorno de Python como replit o PyCharm, ¡y puedes continuar aprendiendo allí! Sin embargo ten en cuenta que Python sólo puede ller comandos en inglés, así que si has usado otros lenguajes,
                tendrás ahora que cambiar a inglés.
        2:
            header: Al estilo Python
            text: |-
                ¡Hemos llegado la código real de Python! Esto significa que tenemos que usar paréntesis con imprimir y rango de ahora en adelante.

                También, si quieres imprimir más de un objeto, necesitas separarlos por comas.

                El cambio final que tenemos que hacer para conseguir el código Python es cambiar ask por entrada.

                Haz clic en la pestaña 'imprimir' para todos los ejemplos.
            editor: /hedy/18
        3:
            header: ¡Las últimas aventuras!
            text: ¡Disfruta las últimas aventuras en el nivel 18!
