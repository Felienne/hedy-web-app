levels:
    0:
        1:
            header: Bienvenue sur Hedy !
            text: Hedy est un langage de programmation.
        2:
            header: Programmation
            text: |-
                Programmer c'est donner des instructions à un ordinateur en utilisant la langue de l'ordinateur.

                Ce type de langue s'appelle un "langage de programmation".
        3:
            header: Langage de programmation
            text: |-
                Peut-être connais tu quelques langages de programmation ?
                Par exemple :
                * Scratch
                * Python
                * HTML
        4:
            header: Programmation
            text: |-
                Si tu sais programmer, tu sais faire plein de super choses :
                * Ecrire des histoires interactives
                * Créer des dessins sur l'ordinateur et les transférer sur du papier ou du tissu
                * Créer tes propres applications à installer sur ton smartphone
        5:
            header: Programmer en Hedy
            text: 'Dans Hedy nous utilisons des codes speciaux comme : `{print}`.'
            code: '{print} Bienvenue sur Hedy !'
        6:
            header: Programmer avec Hedy
            text: Les mots du code seront affichés en rose.
            code: '{print} Bienvenue sur Hedy  !'
        7:
            header: Programmer en Hedy
            text: On lance le code avec le bouton « Exécuter le code » sous le code.
            code: '{print} Bienvenue sur Hedy!'
        8:
            header: Programmer en Hedy
            text: Les sorties apparaissent sur le côté droit.
            code: '{print} Welcome to Hedy!'
        9:
            header: Programmer en Hedy
            text: La sortie peut également être une figure.
            code: "{forward} 100\n{turn} {left}"
    1:
        1:
            header: Bienvenue au niveau 1 !
            text: |-
                Commençons le niveau 1 en créant des histoires en Hedy !

                Nous avons besoin de trois codes textuels pour créer des histoires interactives.
        2:
            text: |-
                Le premier code que tu peux utiliser au niveau 1 est `{print}`.

                `{print}` permet d'afficher du texte à l'écran.
            code: '{print} Put text on the screen'
            header: '{print}'
        3:
            header: La commande {print}
            text: |-
                Tu peux changer le texte après la commande affiche par ce que tu veux.

                Tu peux également imprimer plusieurs lignes en ajoutant une autre ligne de code qui commence également par `{print}`.
            code: |-
                {print} Bienvenu sur Hedy !
                {print} Commence à programmer dès maintenant !
        4:
            text: |-
                Le deuxième code que tu peux utiliser au niveau 1 est `{ask}`.

                `{ask}` est utilisé pour poser une question à laquelle on peut répondre.
            code: |-
                {print} Bienvenue sur votre propre papier à ciseaux !
                {ask} Que choisirez-vous ?
            header: '{ask}'
        5:
            text: |-
                Comme vous avez pu le voir dans l'exemple précédent. Si vous utilisez la commande `{ask}`, vous pouvez poser une question.
                Cependant, la réponse ne s'affiche pas dans l'écran de sortie.

                Si vous souhaitez que la réponse s'affiche, vous pouvez utiliser la commande finale de ce niveau : `{echo}`.
                `{echo}` est utilisé pour répéter la réponse à un `{ask}`.
            code: |-
                {print} Bonjour !
                {ask} Quel est ton nom ?
                {echo} bonjour
            header: '{echo}'
        6:
            header: Programmons !
            text: |-
                Avec `{print}`, `{ask}` et `{echo}` tu peux déjà créer une petite histoire.
                Il est temps d'essayer les aventures : Perroquet, Histoires, Pierre-papier-ciseaux, …
            editor: /hedy/1
        7:
            header: Programmons !
            text: Les aventures sont affichées dans des onglets.
            editor: /hedy/1
        8:
            header: Programmons!
            text: Les boutons en forme de flèches jaunes peuvent être utilisés pour copier des exemples.
            editor: /hedy/
        9:
            header: Dessinons avec la tortue
            text: Maintenant que nous avons vu les codes textuels, nous allons désormais nous attarder sur les codes en forme de dessins.
        10:
            header: 'Dessinons avec la tortue : {forward}'
            text: '`{forward}` est utilisé pour faire avancer la tortue.'
            code: |-
                {forward} 50
                {turn} left
        11:
            header: 'Dessinons avec la tortue: {turn}'
            text: '`{turn}` est utilisée pour faire tourner la tortue vers la gauche ou la droite.'
            code: |-
                {forward} 50
                {turn} left
        12:
            debug: 'True'
            header: Debugging
            code: "I am DJ Hedy\n{print} What song would you like to hear?\n{ask} I like that song too!\n{print} Next up... {echo}"
            text: Debugging a code means getting rid of mistakes in the code. Let's debug this code together. Click the ladybug button to start the debugger.
        13:
            text: Enjoy the adventures in level 1!
            header: Let the programming fun begin!
    2:
        1:
            header: Bienvenue au niveau 2
            text: |-
                Dans ce niveau tu vas apprendre à utiliser les variables.

                Une variable est un mot qui peut être utilisé pour conserver des informations.

                Par exemple: un nom, un âge ou ton équipe sportive favorite.
        2:
            text: Pour créer ou 'définir' une variable nous utilisons la commande `{is}`.
            header: Variables
            code: "name {is} Hedy\nage {is} 15\n{print} name is age years old"
        3:
            header: Interactif
            text: |-
                Nous pouvons aussi définir une variable en posant des questions.

                La réponse à la question posée est alors stockée dans la variable..

                De cette façon nous n'avons pas besoin de la commande `{echo}`  .
            code: "name {is} {ask} What is your name?\n{print} Hello name"
        4:
            header: Variables multiples
            text: Maintenant que nous utilisons les variables, nous pouvons utiliser des variables multiples au lieu d'une seule commande `{echo}`.
            code: "name {is} {ask} What is your name?\n{print} Hello name\nage {is} {ask} How old are you?\n{print} name is age years old."
        5:
            text: Tu peux aussi utiliser la commande `{sleep}` pour mettre le code en pause pendant un moment.
            header: Sleep
            code: "{print} My favorite colour is...\n{sleep} 2\n{print} green!"
        6:
            text: |-
                Tu peux ajouter un nombre après la commande `{sleep}` si tu veux que la pause soit plus longue.

                Si tu le veux, tu peux même utiliser une variable au lieu d'un nombre pour contrôler la durée de la commande sleep.
            header: Sleep 5
            code: "pause {is} 10\n{print} My favorite colour is...\n{sleep} pause\n{print} green!"
        8:
            header: Que le plaisir de programmer commence!
            text: Profite des aventures du niveau 2!
        7:
            text: Debugging a code means getting rid of mistakes in the code. Let's debug this code together. Click the ladybug button to start the debugger.
            debug: 'True'
            header: Debugging
            code: "{print} Welcome to the donut shop!\nfilling {is} What kind of filling would you like?\n{print} You have chosen... Filling! Yum!\ntopping {ask} What kind of topping would you like?\ntopping is delicious!\n{print} I'll go get your donut. {sleep}\n{print} Here you go! A filling donut with toping!\n{ask} Have a nice day!"
    3:
        1:
            header: Bienvenue au niveau 3
            text: Dans ce niveau tu apprendras à faire une liste, à ajouter et retirer des éléments de tes listes et à choisir un élément au hasard parmi une liste.
        2:
            header: Créons une liste
            text: |-
                Tu crées une liste avec `{is}`
                Sépare les éléments de ta liste avec une virgule.
            code: animals {is} dogs, cats, kangaroos
        3:
            header: Au hasard
            text: |-
                Tu peux utiliser la liste avec la commande `{at}` `{random}`.
                L'ordinateur tirera au hasard un élément de la liste.
                A chaque fois que tu exécuteras le code, le tirage changera.
            code: "animals {is} dogs, cats, kangaroos\n{print} animals {at} {random}"
        4:
            header: Au hasard dans une phrase
            text: Tu peux également utiliser la commande `{at}` `{random}` dans une phrase.
            code: "animals {is} dogs, cats, kangaroos\n{print} My favorite animal is animals {at} {random}"
        5:
            header: Ajouter à
            text: |-
                Tu peux ajouter des éléments à une liste avec la commande `{add}` `{to}`.

                Tu peux choisir ce qu'il faut ajouter à la liste ou tu peux combiner la commande `{add}` `{to}` avec la commande `{ask}` .
                De cette façon, tu peux laisser le joueur décider de ce qu'il faut ajouter à la liste.
            code: "animals {is} dog, cat, kangaroo\nlike {is} {ask} What is your favorite animal?\n{add} like {to_list} animals\n{print} I choose animals {at} {random}"
        6:
            header: Retirer de
            text: |-
                Le contraire de la commande `{add}` `{to}` est la commande  `{remove}` `{from}`.
                Cette commande retire un élément d'une liste.
            code: "animals {is} dog, cat, kangaroo\ndislike {is} {ask} What animal do you not like?\n{remove} dislike {from} animals\n{print} I choose animals {at} {random}"
        8:
            header: Il est temps de passer à l'action!
            text: Profite des aventures du niveau 3!
        7:
            debug: 'True'
            header: Debugging
            editor: "music_genres {is} rock, pop, metal, indie, jazz\nchosen_genre is music {at} {random}\n{print} Let's listen to chosen genre\nnice {ask} Do you like that genre?\n{remove} chosen_genre {from} chosen_genre\nsecond_choice {is} music_genres\n{print} or do you prefer... second_choice {at} {random}\n{remove} second_choice {to} music_genres\n{print} I like music_genre {random} best!"
            text: Let's debug this code!
    4:
        1:
            header: Bienvenue au niveau 4
            text: Dans ce niveau, tu apprendras à te servir des guillemets.
            code: "{print} 'print with quotes!'"
        2:
            header: Problème
            text: 'Dans les niveaux précédents, tu as peut-être été confronté à ce problème:'
            debug: 'True'
            code: "name {is} Sophie\n{print} My name is name"
        3:
            header: Résolvons-le avec les guillemets
            text: |-
                Dans ce niveau, nous résoudrons ce problème en utilisant des guillemets.

                Notre code ressemblera aussi davantage à un "vrai" code Python.
        4:
            header: Guillemets avec print
            text: A chaque fois que tu utilises la commande`{print}`, il faut que tu mettes le texte que tu veux voir apparaître à l'écran entre guillemets.
            code: "{print} 'print with quotes!'"
        5:
            header: Guillemets avec ask
            text: C'est aussi valable pour la commande `{ask}`.
            code: name {is} {ask} 'name please?'
        6:
            header: Guillemets et variables
            text: |-
                Tu ne veux pas que le nom des variables soit affiché à l'écran.
                C'est pourquoi les variables doivent être laissées en dehors des guillemets, comme ça:
            code: "name {is} Harry\n{print} 'Hello ' name"
        7:
            header: Guillemets et variables
            text: |-
                Quand les noms des variables sont utilisés au milieu d'une phrase, tu dois laisser les variables en dehors des guillemets.
                Néanmoins, le reste de la phrase a besoin de guillemets. Cela ressemble à ça:
            code: "name {is} Harry\n{print} 'Hello ' name ', how are you?'"
        9:
            header: Ready, Set, Go!
            text: Enjoy the adventures in level 4!
            code: "{print} '3'\n{clear}\n{print} '2'\n{clear}\n{print} '1'\n{clear}\n{print} 'SURPRISE!'"
        8:
            text: "Be careful! Now that you are using quotation marks, you can't use apostrophes in contractions.\n\nPlease try to print a contraction like \"you're\" or \"I'm\" in the screen below and see what happens...."
            debug: 'True'
            code: "{print} 'This won't work!'"
            header: Quotation marks and contractions
        10:
            code: "{clear}\n{print} What a nice day to go to the beach!\n{ask} 'Do you want to build a sandcastle or swim in the ocean?'\n{print} 'You would like to activity '\n{print} 'I'd like to do that too'\n{print} 'Look at these beautiful seashells!'\ncolors {is} 'orange, silver, white, brown'\n{print} 'I love the colors {at} {random} one!'\nchoice {is} {ask} Which one do you like?"
            debug: 'True'
            header: Debugging
            text: Let's debug this code!
        11:
            header: Ready, Set, Go!
            text: Enjoy the adventures in level 4!
    8:
        7:
            code: "nom = {ask} \"Comment t'appelles-tu ?\"\n{if} nom {is} Hedy\n    {print} 'Bienvenue Hedy'\n{else}\n    {print} 'Bienvenu·e programmeur·se !' \n{print} '3… 2… 1… Programme !'"
            text: Just like with the `{repeat}` command, you can stop using indentation and the lines will always be shown. Not just if the statement is true.
            header: stopping the indentation
        1:
            text: In this level you will learn to use indentation to make the `{repeat}`, `{if}` and `{else}` commands work for multiple lines of code.
            header: Welcome to level 8
        3:
            text: "In this level you can repeat multiple lines of code. To do this you must tell the computer which lines belong together and should be repeated.\nYou do this by using indentation.\n\nUse 4 spaces (or one tab) at the beginning of each line that you want to repeat, like this:"
            header: '{repeat} commands now'
            code: "{repeat} 5 {times}\n    {print} 'Hello everyone'\n    {print} 'This will be printed 5 times'"
        4:
            header: '{repeat} commands now'
            text: "If you want to, you can continue after the `{repeat}` command without indentation.\nThe lines that do not start with indentation will not be repeated."
            code: "{repeat} 3 {times}\n    {print} 'Hello!'\n{print} 'We are done repeating!'"
        5:
            header: if and else before
            debug: 'True'
            text: "The same goes for the `{if}` and `{else}` commands.\nThese were the commands before:"
            code: "{if} name {is} Hedy {print} 'nice'\n{else} {print} 'boo!'"
        9:
            text: Let's debug this code!
            debug: 'True'
            header: Debugging
            code: "{print} 'HedyWheels bus tickets machine'\nzone_1 = Town Hall, Library, Campus, Market Place\nzone_2 = Swimming Pool, Skate Park, Mall, Airport\ndestination = 'Where do you want to go?'\n{if} destination {in} zone 1\n{print} destination 'is in zone 1'\nprice = 3 euros\n    {if} destination {is} zone_2\n{print} destination 'is in zone 2'\nprice = 6\nticket_types = {ask} 'Press 1 for a single use ticket.\nPress 2 for a round trip ticket:'\n{if} ticket_type = 1\n{print} 'You chose a single use ticket'\n{else}\n        {print} You chose a round trip ticket'\nprice * 2\n{print} 'That will be ' price ' euros please'"
        10:
            text: Enjoy the adventures in level 8!
            header: Let's check out the adventures!
        2:
            text: "In the previous levels, the `{repeat}` command looked like this:\n\nYou could only repeat one line of code."
            code: "{repeat} 5 {times} {print} 'Help!'"
            debug: 'True'
            header: '{repeat} commands before'
        8:
            text: "You might have thought of trying to put an if command inside a repeat command, or inside another if command.\nFor now, this is not possible yet. In the higher levels, it will be allowed, but for now let's focus on practising the `{if}` `{else}` and `{repeat}` commands with proper indentation first."
            header: if statements inside if statements
        6:
            header: if and else now
            text: "These are the `{if}` and `{else}` commands now.\nEach line after the `{if}` and `{else}` commands start with indentation."
            code: "name = {ask} 'What is your name?'\n{if} name {is} Hedy\n    {print} 'Welcome Hedy'\n{else}\n    {print} 'Welcome programmer!'"
    9:
        7:
            header: Mind the indentation
            text: Mind that the fourth and sixth line of this code starts with 8 spaces of indentation.
            code: "{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    {else}\n        {print} 'pizza is better'"
        8:
            text: Let's debug this code!
            debug: 'True'
            header: Debugging
            code: "{print} 'Welcome to HedyJumps, your parachute jump adventure!'\npeople = {ask} 'How many people are you jumping with today?\n{print} 'We'll ask all of you some questions for safety reasons.'\nextra_instructions_people = a, b\n{repeat} 3 {times}\n    name = {ask} 'What is your name?'\njumped_before = 'Have you ever done a parachute jump before, ' name '?'\n{if} jumped_before  no\n{print} 'No worries, you'll get an extra safety instruction in room 13'\n{add} name {to} extra_instructions_people\n{else}\n{print} 'Fun!'\n{print} 'Thanks for filling in the safety questions everyone. Enjoy your jump!'"
        1:
            header: Welcome to level 9
            text: "In this level you can use multiple lines of code after an `{if}` or after a `{repeat}` command.\n\nYou can even put a `{repeat}` command within another `{repeat}`  command."
        2:
            code: "{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    {else}\n        {print} 'pizza is better'"
            header: Multiple lines after `{repeat}`
            text: You are allowed to combine `{repeat}` and `{if}` in this level.
        3:
            header: Indentation matters!
            text: Indentation is very important to tell the computer which lines should be repeated and which lines should only be ran once.
            code: "{repeat} 3 {times}\n    {print} 'This line will be repeated...'\n    {print} 'This one too...'\n{print} 'but this one will not!'"
        4:
            header: Multiple lines after `{if}`
            code: "continue = {ask} 'Do you want to continue?'\n{if} continue = yes\n    sure = {ask} 'Are you sure?'\n    {if} sure {is} yes\n        {print} 'We will continue'\n    {else}\n        {print} 'You are not sure'\n{else}\n    {print} 'You do not want to continue'"
            text: You can also use multiple lines after `{if}`
        5:
            code: "continue = {ask} 'Do you want to continue?'\n{if} continue = yes\n    sure = {ask} 'Are you sure?'\n    {if} sure {is} yes\n        {print} 'We will continue'\n{else}\n    {print} 'You are not sure'"
            text: Again, indentation is still very important and can make a big difference in the code.
            header: Indentation matters
        9:
            text: Enjoy the adventures in level 9!
            header: Let's go!
        6:
            header: An `{if}` inside a `{repeat}`
            code: "{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    {else}\n        {print} 'pizza is better'"
            text: "Now that you can use multiple lines of code after these command, you can also put them within each other.\nCheck it out:"
    6:
        5:
            text: You can use the slash for division.
            header: Division
            code: "{print} '5 divided by 5 is ' 5 / 5"
        9:
            header: Debugging
            text: Let's debug this code!
            code: "{print} 'This is the water park ticket machine'\n{print} 'Price list: Children under 12 $3, Adults $5'\n{print} 'Mondays are 25% off'\namount_of_children = 'How many kids tickets would you like?'\namount_of_adults = 'How many adult tickets would you like?'\nday_of_the_week = {ask} 'What day is it?'\n{clear}\nchild_price = amount of children * 3\nadult_price = amount_of_adults + 5\ntotal_price = adult_price * child_price\n{if} day {is} monday\ntotal_price = total_price * 0.25\n{print} 'That will be total_price please'"
            debug: 'True'
        2:
            header: Addition
            text: If you want to calculate an addition, simply use the plus sign.
            code: "{print} '5 plus 5 is ' 5 + 5"
        1:
            header: Welcome to level 6
            text: In this level we are adding maths to our codes.
        3:
            text: If you want to subtract, you can use the minus sign.
            code: "{print} '5 minus 5 is ' 5 - 5"
            header: Subtraction
        10:
            header: Let's get to work!
            text: Enjoy the adventures in level 6!
        8:
            code: "number_1 = {ask} 'Fill in the first number:'\nnumber_2 = {ask} 'Fill in the second number:'\ncorrect_answer = number_1 * number_2\n{print} number_1 ' times ' number_2 ' is ' correct_answer"
            text: 'You can use calculations with numbers, but you can also use variables to do calculations, like this:'
            header: Calculations with variables
        6:
            header: Summary
            text: In summary, you can use +, -, * and / to do maths.
            code: "{print} '5 plus 5 is ' 5 + 5\n{print} '5 minus 5 is ' 5 - 5\n{print} '5 times 5 is ' 5 * 5\n{print} '5 divided by 5 is ' 5 / 5"
        4:
            text: If you want to do multiplications, you can use the asterisk.
            header: Multiplication
            code: "{print} '5 times 5 is ' 5 * 5"
        7:
            header: The = symbol
            text: "From now on you can also use the = symbol instead of the `{is}` command.\nThis goes for both numbers and words, and it also goes after the `{if}` or `{else}` commands."
            code: "name = Hedy\nanswer = 20 + 4"
    7:
        5:
            text: Let's debug this code!
            debug: 'True'
            header: Debugging
            code: "{print} You gave stranded on a desert island.\n{repeat} 3 'Help!'\nrescued = {ask} Has anybody come to the rescue?\n{if} rescued yes {is}\n{print} Lucky!\n{else} {repeat} 3 {times} 'HELP!'\nrescued = 'What about now?'\n{if} yes\n{print} 'Hurray!\n{else} 'That's a shame... Oh well... time to build a shelter and find some food.'"
        3:
            text: When using the repeat command, do not forget the `{print}` command.
            header: Don't forget the print command
            debug: 'True'
            code: "{repeat} 5 {times} 'Help!'"
        1:
            text: In this level you will learn how to repeat a line of code as many times a you'd like.
            header: Welcome to level 7
        2:
            header: repeat 3 times
            text: "If you want to repeat a line of code, you can use the `{repeat}` 3 `{times}` code.\nIf you want to repeat the line more times, simply change the number.\n\nFor example: If you are programming a story where your character shouts for help for 5 times, it could look like this:"
            code: "{print} 'The prince kept calling for help'\n{repeat} 5 {times} {print} 'Help!'\n{print} 'Why is nobody helping me?'"
        4:
            text: You can also repeat an `{ask}`, `{if}` or `{else}` command multiple times.
            header: Repeat an ask command
            code: "{repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'\n{if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'\n{else} {repeat} 3 {times} {print} 'You have learned something new!'"
        6:
            header: Ready Set Go!
            text: Enjoy the adventures in level 7!
    10:
        2:
            header: The for command
            text: With for you can make a list and use all items on that list. `{for}` creates a block, like repeat and if so all lines in the block need to start with indentation (4 spaces).
            code: "animals = dog, cat, blobfish\n{for} animal {in} animals\n    {print} 'I love ' animal"
        4:
            header: Debugging
            debug: 'True'
            code: "{print} 'Ladies and gentlemen!'\n{print} 'For one night and one night only in circus Hedy!'\nacts = shoot out of a canon, walk the tightrope, pack themself in a suitcase,\npeople = Iris the Incredible Achmed the Amazing Francis the Fantastic\n    {for} people {in} acts\nchosen_person {is} people {random}\n    chosen_person ' will ' act\n{add} chosen_person {from} people\n{print} 'Come and watch our show tonight!'\n{print} 'Tickets are only available at the counter"
            text: Let's debug this code
        3:
            header: The for command
            text: 'Here you see another example of the `{for}` command:'
            code: "days = Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday\nnames = mom, dad, Emma, Sophie\n{for} day {in} days\n    {print} names {at} {random} ' does the dishes on ' day"
        5:
            header: Time to program!
            text: Enjoy the adventures in level 10!
        1:
            header: Welcome to level 10
            text: 'In this level you will learn a new command: `{for}`.'
    15:
        1:
            header: Welcome to level 15
            text: In this level you will learn about the `{while}` loop.
        4:
            header: Let's try it out!
            text: Enjoy the adventures in level 15!
        3:
            debug: 'True'
            header: Debugging
            text: Let's debug this code!
            code: "numbers = 1, 2\n\n{for} i {in} {range} 3 {to} 50\n    {add} x {to} numbers\n    i = + 1\n\nrandom_number = numbers {random}\nguesses = 10\n\n{while} guess = 0\n    answer = 'Guess my number:'\n    {if} answer >= random_number\n        {print} 'lower'\n        guesses = guesses -1\n    {if} answer > random_number\n        {print} 'higher!'\n        guesses = guesses\n    {else} answer = random_number\n        {print} 'correct'\n        guesses = 10"
        2:
            header: '{while}'
            text: "We are going to learn a new loop, the while loop! The loop continues as long as the statement is true. So don't forget to change the value in the loop.\n\nIn the example code, we continue until a correct answer has been given. If the correct answer is never given, the loop will never end!"
            code: "answer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'"
    16:
        1:
            text: In this level you will learn about the [square brackets] and how to use them.
            header: Welcome to level 16
        2:
            header: Square brackets
            code: "friends = ['Ahmed', 'Ben', 'Cayden']\n{print} friends[1] ' is the first friend on the list.'\n{print} friends[2] ' is the second friend on the list.'\n{print} friends[3] ' is the third friend on the list.'\n#now we will match 2 lists using the variable i\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} friends[i] 's lucky number is ' lucky_numbers[i]"
            text: We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels. We use square brackets to point out a place in a list. The at random command can not be used anymore.
        3:
            header: Debugging
            text: Let's debug this code!
            code: "{print} 'Friendship test'\n{subjects} = ['song', 'movie', 'food', 'drink']\nanswers_player_1 = []\nanswers_player_2 = []\nscore = 100\n\n{for} i {in} {range} 1 {to} 4\n    answer = {ask} 'what is your favorite ' subjects[i]\n{add} answer {to} answers_player_1\n\n{print} 'Player 2, your turn!'\n{for} i {in} {range} 0 {to} 4\n    answer_player_2 = {ask} 'what is player 1s favorite ' subjects\n    {add} answer_player_2 {in} answers_player_2\n    {if} answers_player_2[2] == answers_player_1[1]\n        {print} 'Correct!'\n    {else}\n        {print} 'Wrong!'\n    score = score - 25\n\n{print} 'Player 2, you've scored ' score '%'\n\n{if} score = 100\n    {print} 'You are an amazing friend'\n{if} score < 100 {or} score >= 50\n    {print} 'You could do better'\n{else} score < 50\n    {print} 'Do you even know this person?!'"
            debug: 'True'
        4:
            text: Enjoy the adventures in level 16!
            header: Let's try it out!
    17:
        3:
            code: "prices = ['1 million dollars', 'an apple pie', 'nothing']\nyour_price = prices[{random}]\n{print} 'You win ' your_price\n{if} your_price == '1 million dollars' :\n    {print} 'Yeah! You are rich!'\n{elif} your_price == 'an apple pie' :\n    {print} 'Lovely, an apple pie!'\n{else}:\n    {print} 'Better luck next time..'"
            text: 'In this level you can also use a new command: elif. elif is short for else if and you need it when you want to make 3 (or more!) options. Check it out!'
            header: Elif
        4:
            debug: 'True'
            text: Let's debug this code!
            header: Debugging
            code: "{define} ask_direction\n    direction = {ask} 'Where do you want to go?'\n    {if} direction = 'backwards'\n        {turn} 180\n    {else} direction == 'right'\n        {turn} 90\n    {else} direction == 'left'\n        {turn} 270\n        {forward} 100\n\ncontinue = 'yes'\n\n{while} continue == 'yes'\n    {print} ask_direction\n    {sleep}\n    continue = 'do you want to draw some more?'\n    {sleep}"
        2:
            header: Colon
            text: 'Now we are going to change indentation a little bit. Every time that we need an indentation, we need : at the line before the indentation.'
            code: "prices = ['1 million dollars', 'an apple pie', 'nothing']\nyour_price = prices[{random}]\n{print} 'You win ' your_price\n{if} your_price == '1 million dollars' :\n    {print} 'Yeah! You are rich!'\n{else}:\n    {print} 'Better luck next time..'"
        1:
            text: in this level you will learn how to use a colon and you will learn the elif command.
            header: Welcome to level 17
        5:
            header: Let's try it out!
            text: Enjoy the adventures in level 17!
    18:
        2:
            header: The Python way
            editor: /hedy/18
            text: "We arrived at real Python code! That means we need to use parentheses with print and range from now on.\n\nAlso, if you want to print more than one item, you need to separate them by commas.\n\nThe final change we will need to make to get Python code is changing ask into input.\n\nClick on the 'print' tab for all the examples."
        3:
            header: The very last adventures!
            text: Enjoy the very last adventures in level 18!
        1:
            text: Congratulations! You have reached the last level of Hedy! The code you have created here can be copied to real Python environments like replit or PyCharm, and you can continue learning there! Note however that Python can only read English commands, so if you have been using other languages, you will need to switch to English now.
            header: Welcome to level 18
    12:
        4:
            header: Functions!
            text: "In this level you'll learn how to use functions. A function is a block of code you can easily use multiple times. Using functions helps us organize pieces of code that we can use again and again. To create a function, use define and give the function a name. Then put all the lines you want in the function in a indented block under the define line. Leave one empty line in your code to make it look nice and neat. Great job! You have created a function!\n\nNow, whenever we need that block of code, we just use call with the function's name to call it up! We don't have to type that block of code again."
        2:
            text: "This level makes some changes to the usage of quotation marks.\nFrom now on, **all texts** need to be in quotation marks. This includes values of variables, items on lists and text after {if} commands."
            code: "name = 'Hedy the Robot'\n{print} 'Hello ' name"
            header: Quotation marks
        7:
            header: Debugging
            debug: 'True'
            text: Let's debug this code!
            code: "{call} new_member\n{print} 'Hi new member!'\nusername = {ask} 'What is your username?'\npassword = 'What is your password?'\n{print} 'Welcome to our club!'\n\nusername = {ask} 'Please enter your username. Are you a new member? Type New Member'\n{if} username = New Member\n{call} new member\n    {else}\n        password = {ask} 'Please enter password'"
        8:
            text: Enjoy the adventures in level 12!
            header: Ready to try it out?
        5:
            header: Twinkle Twinkle little star!
            text: "In this program you see an example of a function.\nLet's see what happens if you fill in the rest of the song!"
            code: "{define} twinkle\n     {print} 'Twinkle'\n     {print} '...'\n\n{call} twinkle\n{print} 'Up above the world so high'\n{print} 'Like a diamond in the sky'\n{call} twinkle"
        6:
            header: Functions
            text: As you could see in the example a function is a block of code that can be called anytime. You use `{define}` to set the function and `{call}` to use it.
        1:
            header: Welcome to level 12
            text: "From this level on you are allowed to use decimal numbers and there are some changes to the quotation marks.\nYou can also use functions from this level on!"
        3:
            text: "From this level on you are also allowed to use decimal numbers. This can make programs like your restaurant even better!\n\nNumbers do not need quotation marks."
            code: "{print} 'decimal numbers now need to use a dot'\n{print} 2.5 + 2.5"
            header: Decimal numbers
    5:
        3:
            text: "When using the `{if}` command, don't forget to use the `{print}` command.\nThis code will not work!"
            debug: 'True'
            header: Don't forget to print
            code: "{if} name {is} Hedy 'nice'"
        2:
            text: "The `{if}` command allows you to choose between two options.\nIn this example the computer will print 'nice' if the given answer is Hedy.\nIf the answer is not Hedy, the computer will do nothing."
            code: "name {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice'"
            header: if
        4:
            header: else
            code: "{if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'"
            text: "When using an `{if}` command, you can also add an `{else}` command.\nIf the answer is Hedy, the computer will print 'nice'.\nBut if the answer is something else the computer will print 'boo'"
        6:
            header: Another new command
            text: "If you have practised with the `{if}` and `{else}` commands, you can also try the `{in}` command.\n\nWith `{in}` you can let the computer check if an item is in a list, for example:\n\nPlease note that Hedy is case sensitive. This means that if you answer \"Green\" instead of \"green\", Hedy will print \"meh\"."
            code: "pretty_colors {is} green, yellow\nfavorite_color {is} {ask} 'What is your favorite color?'\n{if} favorite_color {in} pretty_colors {print} 'pretty!'\n{else} {print} 'meh'"
        8:
            header: Let's go!
            text: Enjoy the adventures in level 5!
        1:
            header: Welcome to level 5
            text: 'In this level you will learn to use 3 new commands: `{if}`, `{else}` and `{in}`.'
        5:
            header: Long lines
            code: "{if} name {is} Hedy {print} 'nice'\n{else} {print} 'boo!'"
            text: "You might have noticed that your lines can get very long when you have both an `{if}` and an `{else}` command.\n\nYou can choose to separate commands and put them on 2 lines, like this:"
        7:
            text: Let's debug this code!
            header: Debugging
            code: "{print} Welcome to HedyAir Security!\nboarding_pass {is} {ask} 'Do you have your boarding pass?'\n{if} bording_pass yes {print} Great!\n{else} Please, get your boarding pass ready.\npassport {is} 'Can I see your passport, please?'\n{if} passport {is} yes 'thank you'\n{else} 'You can't fly without a passport'\ndeclare {is} {ask} Do you have anything to declare?\n{if} declare {is} yes\nitem_to_declare {is} {ask} 'What would you like to declare'\n{else} Alright\n{print} Thank you. Please head to gate A22.'"
            debug: 'True'
    11:
        1:
            text: "In this level, we add a new form of the `{for}` command. In earlier levels, we used for with a list, but we can also use for with numbers.\n\nThis way we don't need the `{repeat}` command anymore."
            header: Welcome to level 11
        2:
            header: The for command
            text: 'This is what the new for command looks like:'
            code: "{for} counter {in} {range} 1 {to} 10\n    {print} counter\n{print} 'Ready or not. Here I come!'"
        3:
            text: "In the previous slide the variable was named 'counter', because it was counting down.\nYou can of course use any name for the variable you want.\nThe standard name  for variables in this situation that is used in programming languages like Python is 'i'.\nThat looks like this:"
            header: the variable i
            code: "number = 10\n{for} i {in} {range} 1 {to} 10\n    {print} i * number"
        4:
            debug: 'True'
            header: Debugging
            text: Let's debug this code!
            code: "factor {is} {ask} 'Which table of multiplication do you need?'\n{repeat} {for} numbers {in} {range} 1 {to} 10 {times}\n    {print} This is the table of multiplications for factor\n    {print} number ' x ' factor ' = ' i * factor"
        5:
            text: Enjoy the adventures in level 11!
            header: Let's start programming!
    13:
        2:
            text: "The `{and}` command is always used in a combination with the {if} command.\nThis way you can check if 2 statements are true. For example:"
            header: The and command
            code: "name = {ask} 'what is your name?'\nage = {ask} 'what is your age?'\n{if} name {is} 'Hedy' {and} age {is} 2\n    {print} 'You are the real Hedy!'"
        3:
            code: "name = {ask} 'what is your name?'\n{if} name {is} 'Hedy' {or} name {is} 'hedy'\n    {print} 'Welcome!!'"
            text: "The `{or}` works in the same way as the `{and}` command, but only 1 of the two statements has to be true.\n\nLet's see what happens when you change the `{and}` for `{or}`."
            header: The or command
        6:
            code: "{define} song {with} place\n    {print} 'My Bonnie is over the ' place\n\n{call} song {with} 'ocean'\n{call} song {with} 'sea'\n{call} song {with} 'ocean'"
            header: Example with variable
            text: "You can also combine functions with a question.\n\nWhat happens if you make these changes:\n```\ndefine song with place\n    print 'My Bonnie is ' place\n\nanswer is ask 'Where is my Bonnie?'\ncall song with answer\n```"
        8:
            code: "{define} happiness {with} name\n    {print} '🥳'\n{play} G\n{play} A\n{play} B\n{print} 'Party on, ' name\n{define} sadness\n{print} '😞'\n{play} E\n{play} D\n{play} C\n{print} 'Hope you feel better, ' name\n\nname = {ask} 'What is your' name '?'\nmood = {ask} 'Are you happy or sad?'\n{if} mood = happy\n    {call} happiness {with} person\n{else} mood = sad\n    {define} sadness {to} name"
            debug: 'True'
            text: Let's debug this code!
            header: Debugging
        9:
            text: Enjoy the adventures in level 13!
            header: Let's go!
        5:
            text: "In this example you see how the argument 'place' is used in the function.\nRun the code and change 'ocean' and 'sea' to something else, and see what happens."
            header: Example
            code: "{define} song {with} place\n    {print} 'My Bonnie is over the ' place\n\n{call} song {with} 'ocean'\n{call} song {with} 'sea'\n{call} song {with} 'ocean'"
        7:
            header: Even more questions!
            text: "Now we have combined even more question with the function. Type this code and see what happens.\n\nNote how the variables and the arguments have the same name. This is allowed.\nDoes it confuse you? Just use different names, that is allowed as well.\n```\ndefine song with name, place\n    print 'My ' name ' is ' place\n\nname is ask 'Who?'\nplace is ask 'Where are they?'\ncall song with name, place\n```"
            code: "{define} song {with} place\n    {print} 'My Bonnie is over the ' place\n\n{call} song {with} 'ocean'\n{call} song {with} 'sea'\n{call} song {with} 'ocean'"
        4:
            header: Functions with arguments
            text: Now that you've learned how to use functions, you'll learn how to use a function with an **argument**. An argument is a variable that is used within a function. It is not used outside the function.
        1:
            header: Welcome to level 13
            text: "We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two ifs but can use and and or.\nFrom now on you could also use arguments in your functions."
    14:
        1:
            header: Welcome to level 14
            text: In this level you'll learn some new symbols that can help you improve your programs, like >. You will also learn to work with return values of a function.
        2:
            text: "These are the new symbols you can use:\n\n  The >  means bigger than...\n\n  The >= means bigger than or the same as...\n\n  The <  means smaller than...\n\n  The <= means smaller than or the same as...\n\nYou can use them like this:"
            header: Symbols
            code: "age = {ask} 'How old are you?'\n{if} age < 13\n    {print} 'You are younger than me!'\n{else}\n    {print} 'You are older than me!'"
        4:
            text: In the previous levels you have learned to create functions and use arguments with them. Another great use of a function is to let it calculate something for you. You can give the function a calculation and it will give you the answer of the calculation. This answer is called a **return value**.
            header: Return value
        5:
            text: For example, in this code the function calculate_new_price will calculate the new price of any item. It will give you the new price as a return value.
            header: Return value
            code: "{define} calculate_new_price {with} amount, percentage\n    percentage = percentage / 100\n    discount_amount = amount * percentage\n    {return} amount - discount_amount\n\nold_price = {ask} 'How much is on the price tag?'\ndiscount = {ask} 'What percentage is the discount?'\n\nnew_price = {call} calculate_new_price {with} old_price, discount\n{print} 'The new price is ' new_price ' dollar'"
        6:
            text: Let's debug this code!
            header: Debugging
            debug: 'True'
            code: "item = 'not bought'\n{print} 'I would like to buy this item'\nprice == {ask} 'What is the price?'\n{if} price less than or the same as 10\n    {print} 'Thats a great deal!'\n    item = 'bought'\n{if} price is more than 10 {and} less than or the same as 20\n    {print} 'Alright'\n    item = 'bought'\n{if} price is more than 20 {and} less than 50\n    {print} 'That is a bit much!'\n{if} price is more than or the same as 50\n    {print} 'No way!'\n{if} item =! bought\n    {print} 'Shame.. I wont buy it'\n{else}\n    {print} 'I will buy it! Thank you!'"
        7:
            header: Let's get to work!
            text: Enjoy the adventures in level 14!
        3:
            text: "You can also use:\n\n== is the same as.\n\n!= is not\n\n== is used in `{if}` statements."
            header: Symbols
            code: "answer = {ask} 'Do you want to learn more?'\n{if} answer == 'yes'\n    {print} 'Go to the next adventure!'\n{if} answer != 'yes'\n    {print} 'That is a shame!'"
