1:
    intro_text: |
        ¬°Bienvenido a Hedy! En el Nivel 1 puedes usar los comandos `{print}`,` {ask}` y `{echo}`.

        En el lado izquierdo de tu pantalla est√°n todos los comandos del Nivel 1.

        ¬°Presiona el bot√≥n azul y el c√≥digo ser√° escrito autom√°ticamente!

        Prueba el c√≥digo con el bot√≥n verde 'Ejecutar c√≥digo' debajo del espacio de programaci√≥n de la izquierda.

        ¬øNo sabes qu√© crear? En las siguientes pesta√±as encontrar√°s algunas ideas en las que inspirarte.
    start_code: "{print} hola mundo!"
    commands:
    -   name: "{print}"
        explanation: "Mostrar algo con `{print}`."
        example: "Ejemplo: {print} Hola bienvenido a Hedy!"
        demo_code: "{print} Hola bienvenido a Hedy!"
    -   name: "{ask}"
        explanation: "Preguntar algo con `{ask}`."
        example: "Ejemplo: {ask} ¬øCu√°l es tu color favorito?"
        demo_code: "{ask} ¬øCu√°l es tu color favorito?"
    -   name: "{echo}"
        explanation: "Repetir algo usando `{echo}`."
        example: "Ejemplo: {echo} entonces tu color favorito es "
        demo_code: |-
            {ask} ¬øCu√°l es tu color favorito?
            {echo} entonces tu color favorito es
    -   demo_code: '{print} üôã üåç ‚ùó'
        name: '{print} emojis'
        explanation: imprime un emoji con `{print}`
        example: 'Ejemplo: {print} üôã‚Äç üåç ‚ùó'
    -   name: '{forward}'
        demo_code: '{forward} 100'
        example: 'Example: {forward} 100'
        explanation: Draw a line with `{forward}`.
    -   explanation: Gira a la tortuga con `{turn}`
        example: 'Ejemplo: {turn}'
        name: '{turn}'
        demo_code: "{forward} 25\n{turn} left\n{forward} 25\n{turn} right"
    example_code: "## C√≥digo de ejemplo\n```\n{print} Hola!\n{print} Bienvenido a Hedy!\n```\n"
    intro_text_2: "Tambi√©n puedes solicitar  entrada y repetirla usando el comando`{echo}`.\nPrueba el c√≥digo a tu izquierda de nuevo.\n\n¬øNo sabes qu√© crear? En las siguientes pesta√±as vas a encontrar ideas de programas para construir.\n"
    example_code_2: "## C√≥digo de ejemplo\n```\n{ask} ¬øCu√°l es tu nombre?\n{echo} hola\n```\n"
    intro_text_3: "Let's get started! Don't know what to create? In the next tabs you will find ideas for programs to build.\n"
2:
    intro_text: |
        En el nivel 2 aprendemos algo nuevo. Puedes nombrar una palabra con `{is}`.

        Si pones el c√≥digo en la parte superior de tu programa, puedes usar `nombre` en cualquier parte y ser√° reemplazado por Hedy:

        ```
        nombre {is} Hedy
        {print} Bienvenido nombre
        ```

        Nota: `{ask}` ha cambiado en el nivel 2, tambi√©n puedes guardar la respuesta con un nombre:

        ```
        respuesta {is} {ask} ¬øC√≥mo te llamas?
        ```

        `{print}` sigue funcionando como en el nivel 1, as√≠ que ya no necesitas usar `{echo}`.
    start_code: "{print} hola mundo!"
    commands:
    -   name: "{is}"
        explanation: "Dar un nombre a una palabra para usar en el programa con `{is}`."
        example: "Ejemplo: nombre {is} Hedy"
        demo_code: |-
            nombre {is} Hedy
            {print} Bienvenido nombre
    -   name: "{ask}"
        explanation: "Preguntar algo con `{ask}`. ¬°Atenci√≥n! Necesitas darle un nombre a la respuesta con `{is}`"
        example: "Ejemplo: color {is} {ask} ¬øCu√°l es tu color favorito?"
        demo_code: |-
            color {is} {ask} ¬øCu√°l es tu color favorito?
            {print} El color es t√∫ favorito
    -   explanation: Permite pausar a Hedy por un (par de) segundo(s).
        name: '{sleep}'
        example: 'Ejemplo: {sleep} 2 '
        demo_code: "{print} D√©jame pensar por un segundo...\n{sleep}\n{print} Hmm.. Necesito 3 segundos m√°s...\n{sleep} 3\n{print} ¬°Eureka! ¬°Lo tengo!"
    -   name: is - turtle
        example: 'Ejemplo: √°ngulo {is} 90'
        demo_code: "√°ngulo {is} 90\n{turn} √°ngulo\n{forward} 100"
        explanation: Dale un nombre a un n√∫mero usando `{is}`. Puedes escoger el nombre t√∫ misme.
    example_code: "## Example code\n```\nname {is} Hedy\nage {is} 15\n{print} name is age years old\n```\n"
    intro_text_2: "`{print}` still works the same, but the `{ask}` command has changed. You need to use a variable in the `{ask}` command as well. It looks like this:\n"
    example_code_2: "```\nanswer {is} {ask} What is your name?\n{print} Hello answer\n```\n"
    intro_text_3: "Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.\n"
    example_code_3: "```\n{print} My favorite colour is...\n{sleep} 2\n{print} green!\n```\n"
3:
    intro_text: |
        En el nivel 3 tambi√©n puedes hacer una lista. Puedes dejar al ordenador escoger algo aleatorio de la lista, usando `{at} {random}` (se pronuncia: et ren-dom).
    start_code: "{print} hola mundo!"
    commands:
    -   name: "choose_random"
        explanation: "Seleccionar una palabra aleatoria de un grupo usando `{at}` y `{random}`."
        example: "Ejemplo: animales {is} perro, gato, canguro"
        demo_code: |-
            animales {is} perro, gato, canguro
            {print} animales {at} {random}
    -   example: 'Example: {add} dog {to_list} animals'
        demo_code: "animals {is} cow, cat\n{add} dog {to_list} animals"
        explanation: add an item to a list
        name: '{add}'
    -   name: '{remove}'
        explanation: remove an item from a list
        example: 'Example: {remove} dog {from} animals'
        demo_code: "animals {is} cat, dog, cow\n{remove} dog {from} animals"
    example_code: "## C√≥digo de Hedy de ejemplo\n\n```\nanimales {is} perro, gato, canguro\n{print} animales {at} {random}\n```\n"
    intro_text_2: Tambi√©n puedes a√±adir elementos a una lista con `{add}` y quitar elementos con `{remove}`.
    example_code_2: "## C√≥digo de ejemplo de Hedy\n\n```\nanimales {is} perro, gato, canguro\n{add} ping√ºino {to_list} animales\n{remove} gato {from} animales\n{print} animales {at} {random}\n```\n"
4:
    intro_text: |
        En el nivel 4 `{ask}` y `{print}` funcionan diferente.

        Debes poner el texto que quieras imprimir entre comillas.

        Esto es √∫til, porque ahora puedes imprimir todas las palabras que quieras. Tambi√©n las palabras que usaste para almacenar algo con `{is}`.

        La mayor√≠a de los lenguajes de programaci√≥n tambi√©n utilizan comillas al imprimir, ¬°por lo que nos estamos acercando un paso m√°s a la programaci√≥n real!

        ## Las tareas son cada vez m√°s dif√≠ciles
        Encontrar√°s de nuevo los comandos a la izquierda y las tareas en las siguientes pesta√±as. Las tareas ser√°n cada vez m√°s dif√≠ciles.
        As√≠ que lo mejor es empezar por la izquierda con la historia y continuar hacia la derecha para que los desaf√≠os sean cada vez mayores.
    start_code: "{print} 'Hola mundo'"
    commands:
    -   name: "{print}"
        explanation: "Para mostrar un texto literal con el comando `{print}` debes usar las comillas simples."
        example: "Ejemplo: {print} 'Hola bienvenido a Hedy.'"
        demo_code: "{print} 'Hola bienvenido a Hedy.'"
    -   name: "{is}"
        explanation: "Dar un nombre al texto y mostrar sin comillas simples."
        example: "Ejemplo: nombre {is} Hedy."
        demo_code: |-
            nombre {is} Hedy
            {print} 'Mi nombre es ' nombre
    -   name: "{ask}"
        explanation: "Preguntar algo con `{ask}`."
        example: "Ejemplo: color {is} '{ask} ¬øCu√°l es tu color favorito?'"
        demo_code: |-
            color {is} {ask} '¬øCu√°l es tu color favorito?'
            {print} 'Tu color favorito es ' color
    example_code: "## Example Hedy code\n```\nprint 'You need to use quotation marks from now on!'\nanswer is ask 'What do we need to use from now on?'\nprint 'We need to use ' answer\n```\n"
    intro_text_2: "## Adventures are getting more and more difficult\nThe adventures are now getting more and more difficult in the successive tabs.\nSo it is best to start on the left with the story, and work to the right, in order to be challenged more and more.\n"
5:
    start_code: |-
        nombre {is} {ask} '¬øC√≥mo te llamas?'
        {if} nombre {is} Hedy {print} '¬°genial!' {else} {print} 'meh'
    intro_text: |
        `{ask}` y `{print}` siguen funcionando como en el nivel 4.

         En el nivel 5 hay algo nuevo, el `{if}`! `{if}` significa `si` en ingl√©s. Con el `{if}` puedes elegir entre dos opciones.

         ## Ejemplo de c√≥digo Hedy
         ```
         nombre {is} {ask} '¬øC√≥mo te llamas?'
         {if} nombre {is} Hedy {print} 'bien' {else} {print} 'buu'
         ```

         Este c√≥digo imprime bien si introduces Hedy como nombre, y buu si introduces algo distinto.

         ## Las tareas son cada vez m√°s dif√≠ciles

         Tambi√©n en el nivel 5, las tareas en las pesta√±as se vuelven cada vez m√°s dif√≠ciles. As√≠ que hazlas de izquierda a derecha.
    commands:
    -   name: "{print}"
        explanation: "Mostrar un texto literal con el comando `{print}`."
        example: "Ejemplo: {print} 'Hola bienvenido a Hedy.'"
        demo_code: "{print} 'Hola bienvenido a Hedy.'"
    -   name: "{ask}"
        explanation: "Preguntar algo con `{ask}`."
        example: "Ejemplo: color {is} {ask} ¬øCu√°l es tu color favorito?"
        demo_code: |-
            color {is} {ask} ¬øCu√°l es tu color favorito?
            {print} 'Tu color favorito es ' color
    -   name: "{if}"
        explanation: "Elegir una opci√≥n con `{if}`"
        example: "Ejemplo: {if} color {is} verde {print} 'qu√© bonito!' {else} {print} 'no es tan bonito'"
        demo_code: |-
            color {is} {ask} '¬øCu√°l es tu color favorito?'
            {if} color {is} verde {print} 'qu√© bonito!' {else} {print} 'no es tan bonito'
    -   demo_code: "answer {is} {ask} 'How far should I walk?'\n{if} answer {is} far {forward} 100 {else} {forward} 5"
        example: 'Example: {if} answer {is} far {forward} 100 {else} {forward} 5'
        name: '{if} with turtle'
        explanation: Make a choice with `{if}`
    -   name: '{in}'
        explanation: Check elements with `{in}`
        example: "Example: {if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
        demo_code: "pretty_colors {is} green, yellow\ncolor {is} {ask} 'What {is} your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
    example_code_2: "```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice'\n{else} {print} 'boo!'\n```\n"
    intro_text_3: "## Lists\nWhen we want to check if something is in a list, we can now use the `{in}` command.\nThis code prints pretty! if you choose green or yellow, and meh otherwise.\n"
    example_code: "## Example Hedy Code\n```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'\n```\n"
    example_code_3: "```\npretty_colors {is} green, yellow\ncolor {is} {ask} 'What is your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!'\n{else} {print} 'meh'\n```\n"
    intro_text_2: "Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:\n"
6:
    start_code: "{print} '5 veces 5 es ' 5 * 5"
    intro_text: |
        `{ask}`,` {print}` y `{if}` siguen funcionando como en los niveles 5.
         Pero en el nivel 6 hay algo nuevo, ahora tambi√©n puedes calcular.

         El signo m√°s es f√°cil, lo escribes como en las matem√°ticas: `5 + 5` por ejemplo. El signo menos tambi√©n funciona: `5 - 5`.

         La multiplicaci√≥n es un poco diferente, ya que no hay signo de multiplicaci√≥n en el teclado. ¬°B√∫scalo, ver√°s que no lo hay!
         Es por eso que usamos el asterisco para multiplicar: `5 * 5`. Lee esto como "5 veces 5", entonces lo recordar√°s con mayor facilidad.
         ## Ejemplo de c√≥digo Hedy
         ```
         {print} '5 m√°s 5 es ' 5 + 5
         {print} '5 menos 5 es ' 5 - 5
         {print} '5 multiplicado por 5 es ' 5 * 5
         ```
    commands:
    -   name: "{print}"
        explanation: "Mostrar un texto literal con `{print}` usando comillas simples."
        example: "Ejemplo: {print} '5 multiplicado por 5 es ' 5 * 5"
        demo_code: "{print} '5 multiplicado por 5 es ' 5 * 5"
    -   name: "{ask} e {if} con operaciones"
        explanation: "Pregunta por una operaci√≥n y comprueba que sea correcta."
        example: "Ejemplo: respuesta = {ask} ¬øCu√°nto es 10 m√°s 10?"
        demo_code: |-
            resultado = {ask} '¬øCu√°nto es 10 m√°s 10?'
            {if} resultado {is} 20 {print} '¬°¬°Correcto!!' {else} {print} '¬°Casi!, int√©ntalo otra vez'
    -   name: "`{ask}` and `{if}` turtle"
        explanation: "Ask the user how many angles they want"
        example: "Example: angles = {ask} 'How many angles?'"
        demo_code: |-
            angles = {ask} 'How many angles?'
            angle = 360 / angles
            {forward} 50
    example_code: "## Example Hedy code\n```\n{print} '5 plus 5 is ' 5 + 5\n{print} '5 minus 5 is ' 5 - 5\n{print} '5 {times} 5 is ' 5 * 5\n```\n"
    intro_text_2: "We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:\n"
    example_code_2: "```\nname = Hedy\nanswer = 20 + 4\n```\n"
7:
    start_code: "{repeat} 3 {times} {print} 'Hedy es divertido!'"
    intro_text: |
        `{ask}`, `{print}` e `{if}` funcionan como en el nivel 5 y 6.
        Pero en el nivel 7 hay algo nuevo: `{repeat}`.
        Con `{repeat}` puedes repetir una l√≠nea de c√≥digo varias veces.
        ## Ejemplo de c√≥digo Hedy
        ```
        {repeat} 3 {times} {print} 'Hedy es divertido!'
        ```
    commands:
    -   name: "{print}"
        explanation: "Imprimir un texto literal con `{print}`."
        example: "Ejemplo: {print} 'Hola bienvenido a Hedy.'"
        demo_code: "{print} 'Hola bienvenido a Hedy.'"
    -   name: "{ask}"
        explanation: "Preguntar algo con `{ask}`."
        example: "Ejemplo: color = {ask} '¬øCu√°l es tu color favorito?'"
        demo_code: |-
            color = {ask} '¬øCu√°l es tu color favorito?'
            {print} 'Tu color favorito es el ' color
    -   name: "{if}"
        explanation: "Tomar una decisi√≥n con `{if}`."
        example: "Ejemplo: {if} color {is} verde {print} '¬°qu√© bonito!' {else} {print} 'no es tan bonito'"
        demo_code: |-
            color = {ask} '¬øCu√°l es tu color favorito?'
            {if} color {is} verde {print} '¬°qu√© bonito!' {else} {print} 'no es tan bonito'
    -   name: "{repeat} - turtle"
        explanation: "Repeat a line of code with `{repeat}`."
        example: "Example: {repeat} 3 {times} {forward} 10"
        demo_code: |-
            {repeat} 3 {times} {forward} 10
    example_code: "## Example Hedy code\n```\n{repeat} 3 {times} {print} 'Hedy {is} fun!'\n```\n"
8:
    start_code: |-
        {repeat} 5 {times}
            {print} 'Hola amigos'
            {print} 'Esto se va a mostrar 5 veces'
    intro_text: |
        `{ask}` y `{print}` siguen funcionando igual. Pero `{if}` y `{repeat}` han cambiado!
        Ahora puedes ejecutar grupos de c√≥digo, pero vas a tener que respetar el sangrado.
        Esto signfica que es necesario poner 4 espacios al principio de la l√≠nea. Esto tambi√©n se aplica cuando solo deseas crear un bloque de una l√≠nea.

        ## Ejemplo de c√≥digo Hedy
        ```
        {repeat} 5 {times}
            {print} 'Hola amigos'
            {print} 'Esto se va a mostrar 5 veces'
        ```
    commands:
    -   name: "{print}"
        explanation: "Imprime algo con `{print}`. Recuerda usar las comillas simples para mostrar el texto literal."
        example: "Ejemplo: {print} '5 multiplicado por 5 es ' 5 * 5"
        demo_code: "{print} '5 multiplicado por 5 es ' 5 * 5"
    -   name: "`{if}` con varias l√≠neas"
        explanation: "Pregunta por la respuesta de una suma y comprueba el resultado. Ahora podemos mostrar 2 l√≠neas."
        example: "Ejemplo: resultado = {ask} '¬øCu√°nto es 5 m√°s 5?'"
        demo_code: |-
            resultado = {ask} '¬øCu√°nto es 5 m√°s 5?'
            {if} resultado {is} 10
                {print} '¬°Muy bien!'
                {print} 'Efectivamente, la respuesta es ' resultado
            {else}
                {print} '¬°Ups!'
                {print} 'La respuesta es 10'
    -   example: 'Example: draw a square'
        name: '`{repeat}` with turtle'
        explanation: '{repeat} multiple lines'
        demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
    example_code: "## Example Hedy code\n```\n{repeat} 5 {times}\n    {print} 'Hello everyone'\n    {print} 'This is all repeated 5 times'\n```\n"
9:
    commands:
    -   explanation: The answer of a sum of questions with '{ask}' and see if it is correct. Now we print out two lines.
        example: "Example: answer = {ask} 'What is 20 plus 20?'"
        name: '`{if}` with multiple lines'
        demo_code: "answer = {ask} 'What is 20 plus 20?'\n{if} answer {is} 20\n    {print} 'Well done!!'\n    {print} 'The answer is indeed' answer\nelse\n    {print} 'Wrong'\n    {print} 'The answer is 20'"
    -   example: 'Example: create a square'
        name: '`{repeat}` and turtle'
        explanation: '{repeat} multiple lines'
        demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
    start_code: "{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} 'pizza'\n        {print} 'nice!'\n    else\n        {print} 'pizza is better'"
    intro_text: "In this level you can not only use multiple lines with `{if}` {and} `{repeat}`, but you can also put them together!\nIn the example you see an `{if}` command within a `{repeat}` command. It is also allowed the other way around, and an `{if}` is also allowed in an `{if}` and a `{repeat}` in a `{repeat}`.\nGive it a try!\n\n## Example Hedy code\n```\n{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} 'pizza'\n        {print} 'nice!'\n    else\n        {print} 'pizza is better'\n```\n"
    example_code: "## Example Hedy code\n```\n{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    else\n        {print} 'pizza is better'\n```\n"
12:
    commands:
    -   name: float directly
        explanation: Decimal numbers
        example: '{print} 2.5 + 2.5'
        demo_code: "{print} 'Calculate away!'\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n"
    -   name: assign text
        example: name = 'Hedy'
        explanation: Text with quotation marks after =
        demo_code: "name = 'Hedy the Robot'\n{print} 'Hello ' name\n"
    -   example: name = 'Hedy'
        name: quotes after {if} comparison
        explanation: Text with quotation marks after {if}
        demo_code: "name = {ask} 'Who are you?'\n{if} name = 'Hedy'\n    {print} 'Hi there!'\n"
    -   name: quotes in list
        explanation: A list with quotation marks
        example: name = 'Hedy', 'Felienne'
        demo_code: "superheroes = 'Iron Man', 'Batman', 'Superman'\n{print} superheroes {at} {random}\n"
    start_code: "{print} 'decimal numbers now need to use a dot'\n{print} 2.5 + 2.5"
    intro_text: "## Decimal numbers\nSo far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.\n```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n## All texts need to be in quotation marks\nFor this level on you will also have to use quotation marks when storing a text with `=`:\n\n```\nname = 'Hedy the Robot'\n{print} 'Hello ' name\n```\n## All items in lists need quotation marks too\nLists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.\nThis allows you to save two words as 1 item on the list, for example 'Iron Man'.\n\n```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n## All text after `{if}` comparisons need quotation marks too\n```\nname = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n## Numbers don't need quotation marks\n{for} numbers, you do not use quotation marks in the `=`:\n```\nscore = 25\n{print} 'You got ' score\n```\n"
    example_code_2: "```\nname = 'Hedy the Robot'\n{print} 'Hello ' name\n```\n"
    example_code: "## Example Hedy code\n```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n"
    intro_text_2: "**All texts need to be in quotation marks**\nFor this level on you will also have to use quotation marks when storing a text with `=`:\n"
    intro_text_3: "**All items in lists need quotation marks too**\nLists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.\nThis allows you to save two words as 1 item on the list, for example 'Iron Man'.\n"
    example_code_3: "```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n"
    intro_text_4: "**All text after `{if}` comparisons need quotation marks too**\n"
    example_code_4: "```\nname = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n"
    intro_text_5: "**Numbers don't need quotation marks**\nFor numbers, you do not use quotation marks in the `=`:\n"
    example_code_5: "```\nscore = 25\n{print} 'You got ' score\n```\n"
    intro_text_6: "**Maths with words** In this level it is also allowed to use the + sign with texts. For example:\n"
    example_code_6: "```\na = 'Hello '\nb = 'world!'\nprint a + b\n```\n"
13:
    commands:
    -   name: '{and}'
        explanation: Two parts both need to be correct
        example: if 3+2 {is} 5 {and} 2+2 {is} 4
        demo_code: "answer1 = {ask} 'What is 3+2?'\nanswer2 = {ask} 'What is 2+2?'\n{if} answer1 {is} 5 {and} answer2 {is} 4\n    {print} 'Both answers are correct!'\nelse\n    {print} 'At least one answer is wrong!'"
    -   explanation: At least 1 of the two parts need to be correct. If both are correct, it is also fine.
        example: if 3+2 {is} 5 {or} 2+2 {is} 4
        demo_code: "answer1 = {ask} 'What is 3+2?'\nanswer2 = {ask} 'What is 2+2?'\n{if} answer1 {is} 5 {or} answer2 {is} 4\n    {print} 'At least one answer is correct!'\nelse\n    {print} 'Both answers are wrong!'"
        name: '{or}'
    start_code: "name = {ask} 'what is your name?'\nage = {ask} 'what is your age?'\n{if} name {is} 'Hedy' {and} age {is} 2\n    {print} 'You are the real Hedy!'"
    intro_text: We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two if's but can use `{and}` and `{or}`. If you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct.
    example_code: "```\nname = ask 'what is your name?'\nage = ask 'what is your age?'\nif name is 'Hedy' and age is 2\n    print 'You are the real Hedy!'\n```\n"
14:
    commands:
    -   name: Smaller
        explanation: We use the `<` to check if the first number is smaller than the second number.
        example: 'For example: age < 12'
        demo_code: "age = {ask} 'How old are you?'\n{if} age < 13\n    {print} 'You are younger than me!'"
    -   demo_code: "age = {ask} 'How old are you?'\n{if} age > 13\n    {print} 'You are older than me!'"
        name: Bigger
        explanation: We use the `>` to check if the first number is bigger than the second number.
        example: 'For example: age > 12'
    -   name: Equal
        example: 'For example: answer == 25'
        explanation: We use the `==` to check if two things are the same.
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer == 25\n    {print} 'That {is} correct!'"
    -   name: Not equal
        explanation: 'We use the `!=` to check if two things are not the same. '
        example: 'For example: answer != 25'
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer != 25\n    {print} 'That is not correct!'"
    -   name: Smaller {or} equal
        explanation: We use the `<=` to check if the first number is smaller than or equal to the second number.
        example: 'For example: age <= 12'
        demo_code: "age = {ask} 'How old are you?'\n{if} age <= 12\n    {print} 'You are younger than me!'"
    -   explanation: We use the `>=` to check if the first number is bigger than or equal to the second number.
        name: Bigger or equal
        example: 'For example: age >= 14'
        demo_code: "age = {ask} 'How old are you?'\n{if} age >= 14\n    {print} 'You are older than me!'"
    start_code: "age = {ask} 'How old are you?'\n{if} age < 13\n    {print} 'You are younger than me!'\nelse\n    {print} 'You are older than me!'"
    intro_text: "We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.\nThe `<` checks if the first number is smaller than the second, for example `age < 12` checks if `age` {is} smaller than 12.\nIf you want to check if the first number is smaller or equal to the second, you can use `<=`, for example `age <= 11`.\nThe `>` checks if the first number is bigger than the second, for example `points > 10` checks if `points` is larger than 10.\nIf you want to check if the first number is bigger or equal to the second, you can use `>=`, for example `points >= 11`.\nYou use these comparisons in an `{if}`, like this:\n```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n\nFrom this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:\n```\nname = {ask} 'What is your name?'\n{if} name == 'Hedy'\n    {print} 'You are coo!'\n```\n\nYou can also compare if something is *not* equal to something else using `!=` like this:\n```\nname = {ask} 'What is your name?'\n{if} name != 'Hedy'\n    {print} 'You are not Hedy'\n```\n"
    example_code: "## Example Hedy Code\n```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n"
    intro_text_2: "From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:\n"
    example_code_2: "```\nname = {ask} 'What is your name?'\n{if} name == 'Hedy'\n    {print} 'You are coo!'\n```\n"
    intro_text_3: "You can also compare if something is *not* equal to something else using `!=` like this:\n"
    example_code_3: "```\nname = {ask} 'What is your name?'\n{if} name != 'Hedy'\n    {print} 'You are not Hedy'\n```\n"
16:
    commands:
    -   name: square brackets
        explanation: Lists with square brackets
        example: "For example: fruit = ['apple', 'banana', 'cherry']"
        demo_code: "fruit = ['apple', 'banana', 'cherry']\n{print} fruit"
    -   name: Get an item from a list
        example: 'For example: firstfruit = fruit[1]'
        explanation: To get an item from a list we use [number] so fruit[1] means, get the first fruit from the list!
        demo_code: "fruit = ['banana', 'apple', 'cherry']\nfirstfruit = fruit[1]\n{print} firstfruit"
    -   name: Get a random item from a list
        explanation: To get a random item from a list we use [random] so fruit[random] means, get a random fruit from the list!
        example: 'For example: random_fruit {is} fruit[random]'
        demo_code: "fruit = ['banana', 'apple', 'cherry']\nrandom_fruit = fruit[random]\n{print} random_fruit"
    start_code: "fruit = ['apple', 'banana', 'cherry']\n{print} fruit"
    intro_text: "We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.\nYou can use the square brackets as well to point out a place in the lists.\n\n```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
    example_code: "## Example Hedy Code\n```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
17:
    commands:
    -   name: '{elif}'
        explanation: '`{elif}`.'
        demo_code: "a = 2\n{if} a == 1:\n    {print} 'a is 1'\n{elif} a == 2:\n    {print} 'a is 2'\n{else}:\n    {print} 'a is not 1 or 2'"
        example: '{elif} a {is} 5:'
    -   name: '{print}'
        explanation: When we use a `{for}`, we need to put a `:` behind the `{for}` statement!
        example: 'for i {in} {range} 1 {to} 10:'
        demo_code: "{for} i {in} {range} 1 {to} 12:\n    {print} i\n{print} 'Ready or not, here I come!'"
    -   demo_code: "colour = {ask} 'What is your favorite color?'\n{if} colour == green:\n    {print} 'Your favorite colour is green'\n{else}:\n    {print} 'Your favorite colour is not green'"
        name: '{if}'
        explanation: We need to do the same with all of our `{if}` statements
        example: if colour {is} green:'
    start_code: "{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Ready or not, here I come!'"
    intro_text: "Now we are going to change a little bit with indentation. Every time that we need an indentation, we need `:` at the line before the indentation.\n\nIn this level you can also use a new command: `{elif}`. `{elif}` is short for {else} {if} and you need it when you you want to make 3 (or more!) options.\nCheck it out!\n```\nprices = ['1 million dollars', 'an apple pie', 'nothing']\nyour_price = prices[random]\n{print} 'You win ' your_price\n{if} your_price == '1 million dollars' :\n    {print} 'Yeah! You are rich!'\n{elif} your_price == 'an apple pie' :\n    {print} 'Lovely, an apple pie!'\n{else}:\n    {print} 'Better luck next time..'\n```\n"
10:
    intro_text: "In this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.\n`{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with spaces.\n\n## Example Hedy code\n```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal\n```\n"
    commands:
    -   name: '{print}'
        explanation: print something. Remember to use a quotation mark for literal printing.
        example: "Example: {print} '5 times 5 is ' 5 * 5"
        demo_code: "{print} '5 times 5 is ' 5 * 5"
    -   demo_code: "animals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal"
        name: '{for} with a list'
        explanation: 'print all things in a list '
        example: 'Example: {for} animal {in} animals'
    start_code: "animals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal"
    example_code: "## Example Hedy code\n```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal\n```\n"
11:
    start_code: "{for} counter {in} {range} 1 {to} 5\n    {print} counter"
    intro_text: '`{print}` works just the same but the we add a new form of the `{for}`. You can now write `{for} counter {in} {range} 1 {to} 5` and use `counter` in your program. Try it out to see what happens! Remember to use indentations after the `{for}` and `{if}` statements (That means starting a sentence with four spaces)'
    commands:
    -   name: '{for} loop'
        explanation: We can use `{for}` with a {range}
        example: for counter {in} {range} 1 {to} 5
        demo_code: "{for} counter {in} {range} 1 {to} 5\n    {print} counter"
    -   name: '{ask}'
        example: "Example: answer = {ask} 'What is 5 plus 5?'"
        explanation: ask for the answer to a sum and check if it is correct. We can now print 2 lines.
        demo_code: "answer = {ask} 'What is 5 plus 5?'\n{if} answer {is} 10\n    {print} 'Well done!'\n    {print} 'Indeed, the answer was ' answer\nelse\n    {print} 'Oops!'\n    {print} 'The answer is 10'"
    example_code: "## Example Hedy code\n```\nfor counter in range 1 to 5\n    print counter\n```\n"
15:
    start_code: "answer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'"
    intro_text: "We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.\nSo don't forget to change the value in the loop.\n\nIn the example code, we continue until a correct answer has been given.\nIf the correct answer is never given, the loop never ends!\n"
    commands:
    -   name: '{while}'
        explanation: We can use the `{while}` loop with not equal
        example: 'Example: {while} correct_answer != 25'
        demo_code: "answer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'"
    -   name: Smaller {while}
        explanation: 'We can also use the `{while}` loop with `<` and `>`. '
        example: 'For example: {while} count < 3'
        demo_code: "count = 1\n{while} count < 3\n    {print} 'We do this ' 3 - count ' more times'\n    count = count + 1\n{print} 'We are done'"
    example_code: "## Example Hedy code\n```\nanswer = 0\nwhile answer != 25\n    answer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n```\n"
18:
    start_code: "naam = 'Hedy'\n{print}('My name is ', naam)"
    intro_text: "We arrived at real pythoncode! That means we need to use parentheses with {print} and {range} from now on.\nThat looks like this:\n```\n{print}('my name is Hedy!')\n```\nIf you want to print more thant one items, you need to separate them by commas.\n```\nnaam = 'Hedy'\n{print}('my name is ', naam)\n```"
    commands:
    -   name: '{print}'
        explanation: With `{print}` you need to use parentheses
        example: '{print}'
        demo_code: "{print}('hi!')"
    -   name: '{print} with var'
        explanation: With `{print}` you need to use parentheses and commas if you {print} more items
        example: '{print}'
        demo_code: "naam = 'Hedy'\n{print}('my name is ', naam)"
