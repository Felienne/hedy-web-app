1:
    story_text: |
        Καλωσήρθες στη Hedy! Στο επίπεδο 1 μπορείς να χρησιμοποιήσεις τις εντολές `{print}`, `{ask}` και`{echo}`.

        Για παράδειγμα, μπορείς να εμφανίσεις κείμενο στην οθόνη χρησιμοποιώντας την `{print}`. Μπορείς να δεις ένα παράδειγμα 
        με απόσπασμα κώδικα στα αριστερά.

        Πάτησε το πράσινο κουμπί και ο κώδικας θα πληκτρολογηθεί για σένα.
        Δοκίμασε και εσύ τον κώδικα πατώντας το πράσινο κουμπί 'Εκτέλεσε κώδικα' κάτω από το αριστερό προγραμματιστικό πεδίο.
    start_code: 'print γειά σου κόσμε!'
    example_code: "## Παράδειγμα κώδικα\n```\n{print} Γεια!\n{print} Καλώς ήρθες στη Hedy!\n```\n"
    story_text_2: "Μπορείς επίσης να ζητήσεις δεδομένα εισόδου και  να τα επαναλάβεις με μια εντολή  `{echo}`.\nΔοκίμασε τον κώδικα στα αριστερά σου πάλι. \n\nΔεν ξέρεις τι δημιούργησες;  Στις επόμενες καρτέλες θα βρεις ιδέες για προγράμματα προς κατασκευή.\n"
    example_code_2: "## Παράδειγμα κώδικα\n```\n{ask} Ποιο είναι το όνομά σου;\n{echo} γεια\n```\n"
    story_text_3: "Let's get started! Don't know what to create? In the next tabs you will find ideas for programs to build.\n"
2:
    story_text: |
        Στο επίπεδο 2 θα μάθουμε κάτι καινούριο. Μπορείς να ορίσεις μια λέξη με την `is`.  Μπορείς να χρησιμοποιήσεις τη λέξη οπουδήποτε στον κώδικά σου και θα αντικατασταθεί από την Hedy, ως εξής: 

        ```name {is} Χέντι
        {print} Γεια name
        ```

        Σημείωση: Η `ask` έχει αλλάξει, μπορείς να αποθηκεύσεις την απάντηση με ένα όνομα , κάπως έτσι:
        ```
        answer {is} {ask} Ποιο είναι το όνομά σου;
        ```

        Η print λειτουργεί όπως και στο επίπεδο 1, και πλέον δεν χρειάζεσαι την `echo`.

        Μια νέα εντολή  σ' αυτό το επίπεδο είναι η `{sleep}`, η οποία σταματάει το πρόγραμμα για ένα δευτερόλεπτο. Αν πλητρολογήσεις έναν αριθμό μετά την εντολή   `{sleep}`, το πρόγραμμα θα σταματήσει για τόσα δευτερόλεπτα όσα ο αριθμός που έθεσες. 
        ```
        {print} Το αγαπημένο μου χρώμα είναι...
        {sleep} 2
        {print} πράσινο!
        ```
    start_code: 'print γεια σου κόσμε!'
    example_code: "## Example code\n```\nname {is} Hedy\nage {is} 15\n{print} name is age years old\n```\n"
    story_text_2: "`{print}` still works the same, but the `{ask}` command has changed. You need to use a variable in the `{ask}` command as well. It looks like this:\n"
    example_code_2: "```\nanswer {is} {ask} What is your name?\n{print} Hello answer\n```\n"
    story_text_3: "Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.\n"
    example_code_3: "```\n{print} My favorite colour is...\n{sleep} 2\n{print} green!\n```\n"
3:
    story_text: |
        Στο επίπεδο 3 μπορείς να δημιουργήσεις μια λίστα. Μπορείς να αφήσεις τον υπολογιστή να επιλέξει κάτι τυχαία από τη λίστα. Αυτό γίνεται με τη χρήση της `at random`.
    start_code: 'print γεια σου κόσμε!'
    example_code: "## Παράδειγμα κώδικα Hedy \n\n```\nanimals {is} σκύλος, γάτα, καγκουρό\n{print} animals {at} {random}\n```\n"
    story_text_2: Μπορείς επίσης να προσθέσεις στοιχεία με την `{add}` και να αφαιρέσεις με την `{remove}`.
    example_code_2: "## Example Hedy Code\n\n```\nanimals {is} σκύλος, γάτα, καγκουρό\n{add} πιγκουίνος {to_list} animals\n{remove} γάτα {from} animals\n{print} animals {at} {random}\n```\n"
4:
    start_code: "print 'Γεια σου κόσμε'"
    story_text: |
        Στο επίπεδο 4  οι εντολές `{ask}` and `{print}` αλλάζουν.

        Πρέπει να περικλείσεις το κείμενο που θέλεις να εμφανίσεις σε εισαγωγικά.

        Αυτό είναι χρήσιμο, επειδή τώρα μπορείς να εμφανίσεις όσες λέξεις θέλεις. Επίσης, τις λέξεις που αποθήκευες με την `{is}`.

        Οι περισσότερες γλώσσες προγραμματισμού χρησιμοποιούν εισαγωγικά όταν εμφανίζουν στην οθόνη, οπότε βρισκόμαστε ένα βήμα πιο κοντά στον πραγματικό προγραμματισμό!

        ## Οι ασκήσεις γίνονται ολοένα και πιο δύσκολες
        Θα βρεις τις εντολές στα αριστερά και πάλι, και τις ασκήσεις στις ακόλουθες καρτέλες. Οι ασκήσεις πλέον γίνονται όλο και πιο δύσκολες στις διαδοχικές καρτέλες. 
        Έτσι, είναι καλύτερα να ξεκινήσεις από τα αριστερά με την ιστορία, και να δουλεύεις στα δεξιά, έτσι ώστε να προσπαθείς όλο και περισσότερο.
    example_code: "## Example Hedy code\n```\nprint 'You need to use quotation marks from now on!'\nanswer is ask 'What do we need to use from now on?'\nprint 'We need to use ' answer\n```\n"
    story_text_2: "## Adventures are getting more and more difficult\nThe adventures are now getting more and more difficult in the successive tabs.\nSo it is best to start on the left with the story, and work to the right, in order to be challenged more and more.\n"
5:
    start_code: |-
        name is ask 'Ποιό είναι το όνομά σου;'
        if name is Hedy print 'τέλεια!' else print 'έτσι κι έτσι'
    story_text: |
        Οι `ask` και `print` λειτουργούν ακριβώς όπως στο επίπεδο 4.

        Στο επίπεδο 5 υπάρχει κάτι νέο, η εντολή `if`! Με την `if` μπορείς να διαλέξεις ανάμεσα σε δύο διαφορετικές επιλογές.

        ## Παράδειγμα κώδικα Hedy
        ```
        name {is} {ask} 'ποιο είναι το όνομά σου;'
        {if} name {is} Hedy print 'ωραία' else print 'μπου!'
        ```

        Όταν θέλουμε να ελέγξουμε ότι κάτι είναι μέσα σε μια λίστα, μπορούμε τώρα να χρησιμοποιούμε το `in` ανάμεσα στο πράγμα και τη λίστα.

         ## Παράδειγμα κώδικα Hedy
         ```
         pretty_colors {is} πράσινο, κίτρινο
         color {is} {ask} 'Ποιο είναι το αγαπημένο σου χρώμα;'
         {if} color {in} pretty_colors {print} 'ωραία!' {else} {print} 'μπου'
         ```

        Αυτός ο κώδικας εμφανίζει 'ωραία' αν εισάγεις σαν όνομα το Hedy, και 'μπου!' αν εισάγεις κάτι άλλο.

        ## Υπόδειξη
         Μερικές φορές ο κώδικας με ένα `{if}` γίνεται μακρύς και δεν χωράει στη γραμμή. <br>Μπορεις να χωρίσεις τον κώδικα σε δύο γραμμές, ξεκινώντας τη δεύτερη γραμμή με ένα `{else}`ως εξής:
         ```
         name {is} {ask} 'ποιο είναι το όνομά σου;'
         {if} name {is} Hedy {print} 'ωραία'
         {else} {print} 'μπου!'
         ```
        ## Οι ασκήσεις γίνονται όλο και πιο δύσκολες

        Επίσης στο επίπεδο 5, οι ασκήσεις στις καρτέλες γίνονται ολοένα και πιο δύσκολες. Οπότε καλό θα είναι να τις κάνεις από τα αριστερά προς τα δεξιά.
    example_code: "## Example Hedy Code\n```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'\n```\n"
    story_text_3: "## Lists\nWhen we want to check if something is in a list, we can now use the `{in}` command.\nThis code prints pretty! if you choose green or yellow, and meh otherwise.\n"
    example_code_3: "```\npretty_colors {is} green, yellow\ncolor {is} {ask} 'What is your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!'\n{else} {print} 'meh'\n```\n"
    story_text_2: "Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:\n"
    example_code_2: "```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice'\n{else} {print} 'boo!'\n```\n"
6:
    start_code: "print '5 επί 5 ίσον με ' 5 * 5"
    story_text: |
        Οι `ask`, `print` και `if` είναι ακόμα ίδιες όπως και στο επίπεδο 5.
        Αλλά στο επίπεδο 6 μαθαίνεις κάτι καινούριο: πλέον μπορείς να κάνεις υπολογισμούς.

        Το συν είναι εύκολο, το γράφεις όπως στα μαθηματικά: για παράδειγμα `5+5`. Το πλην επίσης λειτουργεί μια χαρά, έτσι `5-5`.

        Το επί είναι λίγο διαφορετικό, επειδή δεν υπάρχει σύμβολο επί στο πληκτρολόγιό σου. Απλά ψάξε και θα δεις, δεν υπάρχει!
        Αυτός είναι ο λόγος που πολλαπλασιάζουμε με τον αστερίσκο στο πλήκτρο 8: `5 * 5`. Διάβαζε το σαν "5 φορές το 5" για να το θυμάσαι πιο εύκολα.
        ## Παράδειγμα κώδικα Hedy
        ```
        print '5 συν 5 κάνει ' 5 + 5
        print '5 πλην 5 κάνει ' 5 - 5
        print '5 επί 5 κάνει ' 5 * 5
        ```

        Μπορούμε επίσης να κάνουμε μια αλλαγή στην αποθήκευση! Μπορείς τώρα να χρησιμοποιήσεις `=` αντί για`{is}` όταν αποθηκεύεις ένα όνομα ή έναν αριθμό, ως εξής:

         ```
         name = Hedy
         answer = 20 + 4
         ```
    example_code: "## Example Hedy code\n```\n{print} '5 plus 5 is ' 5 + 5\n{print} '5 minus 5 is ' 5 - 5\n{print} '5 {times} 5 is ' 5 * 5\n```\n"
    story_text_2: "We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:\n"
    example_code_2: "```\nname = Hedy\nanswer = 20 + 4\n```\n"
7:
    start_code: "repeat 3 times print 'Η Hedy είναι διασκεδαστική!'"
    story_text: |
        Οι `ask`, `print` και `if` λειτουργούν ακριβώς όπως και στο επίπεδο 5 και 6.
        Όμως, το επίπεδο 7 προσθέτει την εντολή `repeat`. H repeat (επανάληψη) μπορεί να χρησιμοποιηθεί για να εκτελέσουμε μια γραμμή κώδικα πολλές φορές.
        ## Παράδειγμα Κώδικα Hedy
        ```
        repeat 3 times print 'H Hedy είναι διασκεδαστική!'
        ```
    example_code: "## Example Hedy code\n```\n{repeat} 3 {times} {print} 'Hedy {is} fun!'\n```\n"
8:
    start_code: |-
        repeat 5 times
            print 'Γειά σας παιδιά'
            print 'Αυτό θα εμφανιστεί 5 φορές'
    story_text: |
        Οι ask και print λειτουργούν ακόμα όπως τις γνωρίζεις. Όμως, οι if και repeat έχουν αλλάξει!
        Τώρα μπορείτε να εκτελείς μαζί ομάδες κώδικα, αλλά θα πρέπει να βάλεις εσοχή στον κώδικα.
        Αυτό σημαίνει να προσθέσεις τέσσερα κενά στην αρχή της γραμμής. Το ίδιο ισχύει όταν θέλεις να δημιουργήσεις ένα μπλοκ μιας γραμμής.

        ## Παράδειγμα κώδικα Hedy
        ```
        repeat 5 times
            print 'Γεια σας'
            print 'Αυτό θα επαναληφθεί 5 φορές'
        ```
    example_code: "## Example Hedy code\n```\n{repeat} 5 {times}\n    {print} 'Hello everyone'\n    {print} 'This is all repeated 5 times'\n```\n"
9:
    start_code: |-
        repeat 3 times
            food = ask 'Τι θέλεις;'
            if food is 'πίτσα'
                print 'ωραία!'
            else
                print 'η πίτσα είναι καλύτερη!'
    story_text: |
        Σ΄αυτό το επίπεδο όχι μόνον μπορείς να χρησιμοποιήσεις πολλές γραμμές στις εντολές `if` and `repeat`, αλλά μπορέις και να τις τοποθετήσεις μαζί! 
        Στο παρακάτω παράδειγμα βλέπεις μια εντολή  `if` μέσα σε μια εντολή `repeat`. Μπορεί να χρησιμοποιηθεί και αντίστροφα, επιτέπεται επίσης και ένα `if` μέσα σε ένα `if` και ένα `repeat` μέσα σε ένα `repeat`.
        Δοκίμασέ το!

        ## Παράδειγμα κώδικα Hedy 
        ```
        repeat 3 times
            food = ask 'Τι θέλεις;'
            if food is 'πίτσα'
                print 'ωραία!'
            else
                print 'η πίτσα είναι καλύτερη!'
        ```
    example_code: "## Example Hedy code\n```\n{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    else\n        {print} 'pizza is better'\n```\n"
10:
    start_code: |-
        animals is dog, cat, blobfish
        for animal in animals
          print 'I love ' animal
    story_text: |
        In this level we learn a new code called `for`. With `for` you can make a list and use all elements.
        `for` creates a block, like `repeat` and `if` so all lines in the block need to start with spaces.

        ## Example Hedy code
        ```
        animals is dog, cat, blobfish
        for animal in animals
          print 'I love ' animal
        ```
    example_code: "## Example Hedy code\n```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal\n```\n"
11:
    start_code: |-
        {for} counter {in} {range} 1 {to} 5
            {print} counter
    story_text: 'Η `print` λειτουργεί ακριβώς όπως και πριν, όμως η `repeat` τώρα αντικαθίσταται από τη `for`! Θα χρησιμοποιείς `for i in range 1 to 5`, αντί για `repeat 5 times`. Μπορείς επίσης να χρησιμοποιείς το `i` στο πρόγραμμα σου! Θυμήσου να χρησιμοποιείς εσοχές ύστερα από κάθε δήλωση `for` και `if` (Αυτό σημαίνει να ξεκινάς μια πρόταση με 4 κενά)'
    example_code: "## Example Hedy code\n```\nfor counter in range 1 to 5\n    print counter\n```\n"
12:
    start_code: |-
        print 'decimal numbers now need to use a dot'
        print 2.5 + 2.5
    story_text: |
        ## Δεκαδικοί αριθμοί
        Μέχρι τώρα η Hedy δενεπέτρεπε δεκαδικούς αριθμούς όπως 1.5, αλλά δεν θα το επιτρέψουμε πλέον. Σημείωσε ότι οι υπολογιστές χρησιμοποιούν το `.` για τους δεκαδικούς αριθμούς.
        ```
        {print} 'Δύο και μισό συν δύο και μισό είναι...'
        {print} 2.5 + 2.5
        ```
        ## Όλα τα κείμενα πρέπει να βρίσκονται μέσα σε εισαωγικά
        Από αυτό το επίπεδο και μετά πρέπει να χρησιμοποιείς τα εισαγωγικά όταν αποθηκεύεις κείμενο με `=`:

        ```
        name = 'Hedy το Ρομπότ'
        {print} 'Γεια' name
        ```
        ## Όλα τα στοιχέια στις λίστες θέλουν εισαγωγικά επίσης
        Οι λίστες είναι κείμενα, άρα θέλουν επίσης εισαγωγικά. Πρόσεξε ότι κάθε στοιχείο στη λίστα έχει εισαγωγικά. 
        Αυτό σου επιτρέπει να αποθηκέυσεις δυο λέξεις ως ένα στοιχείο, πχ 'Iron Man'.

        ```
        superheroes = 'Spiderman', 'Batman', 'Iron Man'
        {print} superheroes {at} {random}
        ```
        ## Όλο το κείμενο μετά τις συγκρίσεις `{if}` comparisons χρειάζονται επίσης εισαγωγικά
        ```
        name = {ask} 'Ποιο είναι το όνομά σου;'
        {if} name = 'Hedy το Ρομπότ'
            {print} 'Γεια σου!'
        ```
        ## Οι αριθμοί δεν χρειάζονται εισαγωγικά
        Για τους αριθμούς, δεν χρησιμοποιούνται εισαγωγικά στο `=`:
        ```
        score = 25
        {print} 'Έφερες ' score
        ```
    example_code: "## Example Hedy code\n```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n"
    example_code_5: "```\nscore = 25\n{print} 'You got ' score\n```\n"
    example_code_2: "```\nname = 'Hedy the Robot'\n{print} 'Hello ' name\n```\n"
    story_text_2: "**All texts need to be in quotation marks**\nFor this level on you will also have to use quotation marks when storing a text with `=`:\n"
    story_text_3: "**All items in lists need quotation marks too**\nLists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.\nThis allows you to save two words as 1 item on the list, for example 'Iron Man'.\n"
    example_code_3: "```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n"
    story_text_4: "**All text after `{if}` comparisons need quotation marks too**\n"
    example_code_4: "```\nname = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n"
    story_text_5: "**Numbers don't need quotation marks**\nFor numbers, you do not use quotation marks in the `=`:\n"
    story_text_6: "**Maths with words** In this level it is also allowed to use the + sign with texts. For example:\n"
    example_code_6: "```\na = 'Hello '\nb = 'world!'\nprint a + b\n```\n"
13:
    start_code: |-
        name = ask 'what is your name?'
        age = ask 'what is your age?'
        if name is 'Hedy' and age is 2
            print 'You are the real Hedy!'
    story_text: Τώρα θα μάθουμε τα `and` και `or`! Αν θέλεις να ελέγξεις δύο δηλώσεις, δεν χρειάζεται να χρησιμοποίησεις δύο if αλλά μπορείς να χρησιμοποιήσεις τα `and` και `or`. Αν χρησιμοποιήσεις τo `and`, και οι δύο προτάσεις, αριστερά και δεξιά από το `and` θα πρέπει να είναι αληθείς. Μπορούμε επίσης να χρησιμοποιήσουμε το `or`. Τότε, μόνο μια πρόταση χρειάζεται να είναι αληθής.
#16:
#    start_code: |-
#        # Αυτό είναι ένα πρόγραμμα που θα ρωτήσεις κάποιες ερωτήσεις μαθηματικών
#        for i in range(1,10):
#            # Θα ρωτήσουμε τον πίνακα πολλαπλασιασμού του 5
#            answer is input('Πόσο κάνει ' i ' φορές το 5?')
#            # Ελέγχουμε αν η απάντηση είναι ίδια με το άθροισμά μας
#            correct_answer is i * 5
#            if answer is correct_answer:
#                print(answer ' είναι σωστό')
#            else:
#                print('Αυτό είναι λάθος, θα έπρεπε να είναι: ' i*5)
#    story_text: |-
#        Όταν κάνεις μεγαλύτερα προγράμματα, θα πρέπει να βρεις έναν τρόπο να θυμάσαι τί κάνει κάθε κομμάτι κώδικα. Για αυτόν το σκοπό χρησιμοποιούμε τα σχόλια. Ένα σχόλιο μοιάζει κάπως έτσι:
#        ` # Αυτό είναι ένα σχόλιο`.
#        Οτιδήποτε μετά το # θα είναι αόρατο για τον κώδικα.
#    commands:
#    -   name: Σχόλιο
#        explanation: Μπορούμε να τοποθετήσουμε σχόλια όπου θέλουμε
#        example: '# Αυτό είναι ένα σχόλιο'
#        demo_code: |-
#            # Αυτό το πρόγραμμα εμφανίζει γειά
#            # Δημιουργήθηκε με τη Hedy
#            # Δεν κάνει τίποτα άλλο εκτός από το να εμφανίζει Γειά
#            print('γειά!')
    example_code: "```\nname = ask 'what is your name?'\nage = ask 'what is your age?'\nif name is 'Hedy' and age is 2\n    print 'You are the real Hedy!'\n```\n"
14:
    start_code: |-
        age = ask 'Πόσο χρονών είσαι;'
        if age < 13
            print 'Είσαι νεότερη από εμένα!'
        else
            print 'Είσαι μεγαλύτερη από εμένα!'
    story_text: "Θα μάθουμε μερικά ακόμα νέα πράγματα! Ίσως να τα γνωρίζεις ήδη από τα μαθηματικά, τα `<` και `>`. \nΤο `<` ελέγχει αν ο πρώτος αριθμός είναι μικρότερος από τον δεύτερο, πχ `age < 12` ελέγχει αν το  `age` είναι μικρότερο από  12.\nΑν θέλεις να ελέγξεις αν ο πρώτος αριθμός είναι μικρότερος ή ίσος από τον δεύτερο, μπορείς να χρησιμοποιήσεις  `<=`, πχ`age <= 11`.\nΤο `>` ελέγχει αν ο πρώτος αριθμός είναι μεγαλύτερος από τον δεύτερο, πχ `points > 10` ελέγχει αν `points` είναι μεγαλύτερο  από 10.\nΑν θέλεις να ελέγξεις αν ο πρώτος αριθμός είναι μεγαλύτερος ή ίσος από τον δεύτερο, μπορείς να χρησιμοποιήσεις`>=`, πχ `points >= 11`.\nΧρησιμοποιείς αυτές τις συγκρίσεις μέσα σε ένα  `{if}`, ως εξής: \n```\nage = {ask} 'Πόσων ετών είσαι;'\n{if} age > 12\n    {print} 'Είσαι μεγαλύτερος από μένα!'\n```\n\nΑπό υτό το επίπεδο και μετά, αν θέλεις να συγκρίνεις ακριβώς, μπορείς να χρησιμοποιείς 2 σύμβολα ίσον. Αυτό είναι που κάνουν και οι περισσότερες γλώσσες προγραμματισμού: \n```\nname = {ask} 'Ποιο είναι το όνομά σου;'\n{if} name == 'Hedy'\n    {print} 'Είσαι τέλεια!'\n```\n\nΜπορείς επίσηςνα συγκρίνεις αν κάτι *δεν* έιναι ίσο με κάτι 'αλλο χρησιμοποιώντας το `!=`ως εξής:\n```\nname = {ask} 'Ποιο είναι το όνομά σου;'\n{if} name != 'Hedy'\n    {print} 'Δεν είσαι η Hedy'\n```\n"
    example_code: "## Example Hedy Code\n```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n"
    story_text_2: "From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:\n"
    example_code_2: "```\nname = {ask} 'What is your name?'\n{if} name == 'Hedy'\n    {print} 'You are coo!'\n```\n"
    story_text_3: "You can also compare if something is *not* equal to something else using `!=` like this:\n"
    example_code_3: "```\nname = {ask} 'What is your name?'\n{if} name != 'Hedy'\n    {print} 'You are not Hedy'\n```\n"
15:
    start_code: |-
        answer = 0
        while answer != 25
            answer = ask 'Πόσο κάνει 5 φορές το 5;'
        print 'Δόθηκε η σωστή απάντηση'
    story_text: "Θα μάθουμε ένα νέο βρόχο, το βρόχο `while`! Συνεχίζουμε το βρόχο για όσο η πρόταση είναι αληθής/ορθή! \nΜην ξεχάσεις να αλλάξεις την τιμή στον βρόχο.\n\nΈτσι στο παράδειγμα του κώδικα, συνεχίζουμε ώσπου να δοθεί μια σωστή απάντηση. \nΑν δε δοθεί ποτέ η σωστή απάντηση, ο βρόχος δε θα σταματήσει ποτέ!\n"
    example_code: "## Example Hedy code\n```\nanswer = 0\nwhile answer != 25\n    answer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n```\n"
16:
    start_code: |-
        fruit = ['μήλο', 'μπανάνα', 'κεράσι']
        print fruit 
    story_text: "Θα κάνουμε λίστες με τον τρόπο που ακολουθεί η Python, με αγκύλες γύρω από τις λίστες! Επίσης διατηρούμε τα εισαγωγικά γύρω από κάθε στοιχείο 'οπως μάθαμε σε προηγούμενα επίπεδα. \nΜπορείς επίσης να χρησιμοποιήσεις τις αγκύλες για να υποδείξεις μια θέση μέσα στις λίστες. \n\n```\nfriends = ['Μαρία', 'Κώστας', 'Αλκμήνη']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'ο τυχερός αριθμός του/της' friends[i]\n    {print} 'είναι' lucky_numbers[i]\n```\n"
    example_code: "## Example Hedy Code\n```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
17:
    start_code: |-
        for i in range 1 to 10:
            print i
        print 'Έτοιμοι ή όχι, έρχομαι!'
    story_text: "Τώρα θα αλλάξουμε λίγο τις εσοχές. Κάθε φορά που χρειαζόμαστε μια εσοχή, χρειαζόμαστε ένα `:` στη γραμμή πριν την εσοχή.\n\nΣ' αυτό το επίπεδο μπορείς επίσηςνα χρησιμοποιήσει ςμια νέα εντολή: `{elif}`. 'Η`{elif}` είναι σύντμηση των {else} {if}  και θα το χρειαστείς όταν θέλεις να έχεις 2 (ή περισσότερες!) επιλογές. \nΔοκίμασέ το!\n\nprices = ['1 εκατομμύριο ευρώ', 'μια μηλόπιτα', 'τίποτα']\nyour_price = prices[random]\n{print} 'Κέρδισες ' your_price\n{if} your_price == '1 εκατομμύριο ευρώ' :\n    {print} 'Είσαι πλούσιος!'\n{elif} your_price == 'μια μηλόπιτα' :\n    {print} 'Ωραιότατα, μια μηλόπιτα!'\n{else}:\n    {print} 'Θα έχεις περισσότερη φορά την επόμενη φορά..'\n```\n"
18:
    start_code: "naam = 'Hedy'\n{print}('My name is ', naam)"
    story_text: "We arrived at real pythoncode! That means we need to use parentheses with {print} and {range} from now on.\nThat looks like this:\n```\n{print}('my name is Hedy!')\n```\nIf you want to print more thant one items, you need to separate them by commas.\n```\nnaam = 'Hedy'\n{print}('my name is ', naam)\n```"
