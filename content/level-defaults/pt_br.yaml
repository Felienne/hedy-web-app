1:
    story_text: |
        Bem-vindo ao Hedy! No nível 1 você pode usar os comandos `print`,` ask` e `echo`.

        No lado esquerdo da tela estão todos os comandos do nível 1.

        Pressione o botão azul e o código será digitado para você!

        Experimente você mesmo o código com o botão verde 'Executar o código' sob o campo de programação esquerdo.

        Não sabe o que programar? Nas próximas abas, você encontrará algumas idéias sobre o que construir.
    start_code: "print olá mundo!"
    example_code: "## Example code\n```\n{print} Hello!\n{print} Welcome to Hedy!\n```\n"
    story_text_2: "You can also ask for input and repeat it back with an `{echo}` command.\nTry the code to your left again.\n\nDon't know what to create? In the next tabs you will find ideas for programs to build.\n"
    example_code_2: "## Example code\n```\n{ask} What is your name?\n{echo} hello\n```\n"
    story_text_3: "Let's get started! Don't know what to create? In the next tabs you will find ideas for programs to build.\n"
2:
    story_text: |
        No nível 2, aprendemos algo novo. Você pode nomear uma palavra com `is`.

        Se você colocar o código `name is Hedy` no topo do seu programa, poderá usar o nome em qualquer lugar. Isso será então substituído por Hedy.

        O `ask` mudou no nível 2, você também salva a resposta com um nome:

        ```
        resposta is ask Qual é o seu nome?
        ```

        A impressão ainda funciona como no nível 1 e você não precisa mais de um ultrassom.
    start_code: "print olá mundo!"
    example_code: "## Example code\n```\nname {is} Hedy\nage {is} 15\n{print} name is age years old\n```\n"
    story_text_2: "`{print}` still works the same, but the `{ask}` command has changed. You need to use a variable in the `{ask}` command as well. It looks like this:\n"
    example_code_2: "```\nanswer {is} {ask} What is your name?\n{print} Hello answer\n```\n"
    story_text_3: "Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.\n"
    example_code_3: "```\n{print} My favorite colour is...\n{sleep} 2\n{print} green!\n```\n"
3:
    story_text: |
        No nível 3, você também pode fazer uma lista. Você pode então escolher qualquer coisa da lista. Você faz isso com `at random` (você diz: et ren-dom).

        ```
        animais is cachorro, gato, canguru
        print animais at random
        ```


        Você encontrará todos os códigos do nível 3 na barra esquerda. Também existem guias com atribuições.
    start_code: "print olá mundo!"
    example_code: "## Example Hedy Code\n\n```\nanimals {is} dog, cat, kangaroo\n{print} animals {at} {random}\n```\n"
    story_text_2: You can also add items to the list with `{add}` and remove items with `{remove}`.
    example_code_2: "## Example Hedy Code\n\n```\nanimals {is} dog, cat, kangaroo\n{add} penguin {to_list} animals\n{remove} cat {from} animals\n{print} animals {at} {random}\n```\n"
4:
    start_code: "print 'Olá mundo'"
    story_text: |
        `ask` e` print` mudam no nível 4.

        Você deve colocar o texto que deseja imprimir entre aspas.

        Isso é útil porque agora você pode imprimir todas as palavras que desejar. Além disso, as palavras que você usou para armazenar algo com `is`.

        A maioria das linguagens de programação também usa aspas ao imprimir, portanto, também estamos nos aproximando da programação real!

        ## As atribuições estão ficando cada vez mais difíceis
        Você encontrará os comandos à esquerda novamente e as atribuições nas guias a seguir. As atribuições estão ficando cada vez mais difíceis nas guias sucessivas.
        Portanto, é melhor começar pela esquerda com a história e trabalhar à direita para ser desafiada cada vez mais.
    example_code: "## Example Hedy code\n```\nprint 'You need to use quotation marks from now on!'\nanswer is ask 'What do we need to use from now on?'\nprint 'We need to use ' answer\n```\n"
    story_text_2: "## Adventures are getting more and more difficult\nThe adventures are now getting more and more difficult in the successive tabs.\nSo it is best to start on the left with the story, and work to the right, in order to be challenged more and more.\n"
5:
    start_code: |-
        nome is ask 'qual o seu nome?'
        if nome is Hedy print 'legal!' else print 'não tão legal'
    story_text: |
        `ask` e `print` ainda funcionam como no nível 4.

         No nível 5, há algo novo, o `if`! Se é inglês para se. Com o `if` você pode escolher entre duas opções diferentes.

         ## Exemplo de código Hedy
         ```
         nome is ask 'qual é o seu nome?'
         if nome is Hedy print 'legal' else print 'não tão legal'
         ```

         Este código imprime legal se você inserir Hedy como um nome, e não tão legal se você inserir outra coisa.

         Se quisermos conferir se algo está numa lista, agora podemos usar `in` entre a coisa e a lista.

         ## Exemplo de código Hedy
         ```
         cores_bonitas is amarelo, verde
         cor is ask 'Qual sua cor favorita?'
         if cor in cores_bonitas print 'bonita!' else print 'certo'
         ```

         Este código imprime bonita! se você escolher amarelo ou verde, e certo caso contrário.

         ## As atribuições estão ficando cada vez mais difíceis
         Também no nível 4, as atribuições nas guias tornam-se cada vez mais difíceis. Então, faça-os da esquerda para a direita.
    example_code: "## Example Hedy Code\n```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'\n```\n"
    story_text_3: "## Lists\nWhen we want to check if something is in a list, we can now use the `{in}` command.\nThis code prints pretty! if you choose green or yellow, and meh otherwise.\n"
    example_code_3: "```\npretty_colors {is} green, yellow\ncolor {is} {ask} 'What is your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!'\n{else} {print} 'meh'\n```\n"
    story_text_2: "Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:\n"
    example_code_2: "```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice'\n{else} {print} 'boo!'\n```\n"
6:
    start_code: "print '5 vezes 5 é ' 5 * 5"
    story_text: |
        `ask`,` print` e `if` ainda funcionam como no nível 5.
        Mas no nível 6 há algo novo, agora você também pode calcular.

        No nível 6, novos códigos são adicionados, agora você pode começar a calcular em seu código.

        O plus é fácil, você escreve como com matemática: `5 + 5` por exemplo. O sinal de menos também funciona bem, que é `5 - 5`.

        Os vezes são um pouco diferentes, porque não existem vezes no seu teclado. Basta pesquisar, realmente não há!
        Por isso fazemos os tempos com asterisco acima de 8: `5 * 5`. Leia isso como 5 vezes 5, então você se lembrará mais facilmente.
        ## Exemplo de código Hedy
        ```
        print '5 plus 5 is ' 5 + 5
        print '5 menos 5 is ' 5 - 5
        print '5 vezes 5 is ' 5 * 5
        ```
    example_code: "## Example Hedy code\n```\n{print} '5 plus 5 is ' 5 + 5\n{print} '5 minus 5 is ' 5 - 5\n{print} '5 {times} 5 is ' 5 * 5\n```\n"
    story_text_2: "We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:\n"
    example_code_2: "```\nname = Hedy\nanswer = 20 + 4\n```\n"
7:
    start_code: "repeat 3 times print 'Hedy é divertido!'"
    story_text: |
        Os comandos `ask`, `print` e `if` funcionam exatamente como no nível 5 e 6.
        Mas o nível 7 adiciona o comando `repeat`.
        `repeat` pode ser usado para executar uma linha de código várias vezes.
        ## Exemplo de código Hedy
        ```
        repeat 3 times print 'Hedy é divertido!'
        ```
    example_code: "## Example Hedy code\n```\n{repeat} 3 {times} {print} 'Hedy {is} fun!'\n```\n"
8:
    start_code: |-
        repeat 5 times
            print 'Olá galera'
            print 'Isso vai ser printado 5 vezes'
    story_text: |
        Os comandos `ask` e `print` ainda funcionam da mesma forma. Mas `if` e `repeat` mudaram!
        Você agora pode executar grupos de códigos juntos, mas você terá que identar o código.
        Isso significa colocar espaços no começo da linha. O mesmo vale para quando você queira criar um bloco só com um linha.

        ## Exemplo de código Hedy
        ```
        repeat 5 times
            print 'Olá galera'
            print 'Isso vai ser printado 5 vezes'
        ```
    example_code: "## Example Hedy code\n```\n{repeat} 5 {times}\n    {print} 'Hello everyone'\n    {print} 'This is all repeated 5 times'\n```\n"
9:
    start_code: |-
        repeat 3 times
            comida = ask 'O que você deseja?'
            if comida is 'pizza'
                print 'excelente!'
            else
                print 'pizza é melhor'
    story_text: |
        Neste nível você pode não só usar múltiplas linhas com `if` e `repeat`, mas também juntar os dois!
        Neste exemplo você encontra um comando `if` dentro de um comando `repeat`. Também é possível fazer o contrário, e um `if`
        também pode aparecer dentro de outro `if` e um `repeat` dentro de outro `repeat`.
        Experimente!

        ## Exemplo de código Hedy
        ```
        repeat 3 times
            comida = ask 'O que você deseja?'
            if comida is 'pizza'
                print 'excelente!'
            else
                print 'pizza é melhor'
        ```
    example_code: "## Example Hedy code\n```\n{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    else\n        {print} 'pizza is better'\n```\n"
10:
    start_code: |-
        animais is dog, cat, blobfish
        for animal in animais
          print 'I love ' animal
    story_text: |
        Neste nível vamos aprender uma nova palavra chamada `for`. Com `for` você pode fazer uma lista e
        usar todos os elementos. `for` cria um bloco, assim como `repeat` e `if`, de modo que todas as
        linhas dentro do bloco precisam começar com espaços.

        ## Example Hedy code
        ```
        animais is dog, cat, blobfish
        for animal in animais
          print 'I love ' animal
        ```
    example_code: "## Example Hedy code\n```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal\n```\n"
11:
    start_code: |-
        for contador in range 1 to 5
            print contador
    story_text: "O `print` continua funcionando do mesmo modo, mas `repeat` é substituído por `for`! Agora dá para escrever `for contador in range 1 to 5` e usar `contador` no seu programa. Experimente para ver o que acontece! Lembre-se de usar indentação depois dos comandos `for` e `if` (que significa começar uma frase com quatro espaços)"
    example_code: "## Example Hedy code\n```\nfor counter in range 1 to 5\n    print counter\n```\n"
12:
    start_code: |-
        print 'números decimais agora precisam de um ponto'
        print 2.5 + 2.5
    story_text: |
        Até agora, Hedy não permitia números decimais como 1.5, mas agora permitimos
        isso. Observe que os computadores usam o . para números decimais.

        Deste nível em diante você também vai ter que usar aspas simples quando
        for armazenar texto com `is`:

        ```
        nome = 'Hedy'
        print 'Olá ' nome
        ```

        Para números, não se usa aspas simples no `is`:
        ```
        pontuação = 25
        print 'Você marcou ' pontuação
        ```
    example_code_5: "```\nscore = 25\n{print} 'You got ' score\n```\n"
    example_code: "## Example Hedy code\n```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n"
    story_text_2: "**All texts need to be in quotation marks**\nFor this level on you will also have to use quotation marks when storing a text with `=`:\n"
    example_code_2: "```\nname = 'Hedy the Robot'\n{print} 'Hello ' name\n```\n"
    story_text_3: "**All items in lists need quotation marks too**\nLists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.\nThis allows you to save two words as 1 item on the list, for example 'Iron Man'.\n"
    example_code_3: "```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n"
    story_text_4: "**All text after `{if}` comparisons need quotation marks too**\n"
    example_code_4: "```\nname = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n"
    story_text_5: "**Numbers don't need quotation marks**\nFor numbers, you do not use quotation marks in the `=`:\n"
    story_text_6: "**Maths with words** In this level it is also allowed to use the + sign with texts. For example:\n"
    example_code_6: "```\na = 'Hello '\nb = 'world!'\nprint a + b\n```\n"
13:
    start_code: |-
        nome = ask 'qual o seu nome?'
        idade = ask 'qual sua idade?'
        if nome is 'Hedy' and idade is 2
            print 'Você é realmente Hedy!'
    story_text: "Agora vamos aprender `and` e `or`! Se você quiser verificar duas instruções, não é necessário usar dois `if` porque você pode usar `and` e `or`. Se você usar `and`, ambas as instruções, à esquerda e à direita do `and` têm de ser verdadeiras. Podemos também utilizar `or`. Neste caso, apenas uma das instruções tem de ser verdadeira."
#16:
#    start_code: |-
#        # Este é um programa que vai perguntar algumas questões de Matemática
#        for i in range(1, 10):
#            # Vamos perguntar pela tabuada do 5
#            resposta is input('Quanto é ' i ' vezes 5?')
#            # Verificamos se o resultado é igual ao nosso cálculo
#            resposta_certa is i * 5
#            if resposta is resposta_certa:
#                print(resposta ' está certo!')
#            else:
#                print('Está errado, a resposta devia ser: ' i*5)
#    story_text: |-
#        Quando você estiver criando programas maiores, vai precisar
#        arranjar uma maneira de lembrar o que cada pedaço de código faz.
#        Usamos os comentários para isso. Um comentário se parece com isso:
#        ` # Isto é um comentário`. Tudo o que aparecer depois do # será
#        invisível para o código.
#    commands:
#    -   name: "Comentário"
#        explanation: "Podemos colocar comentários onde quisermos."
#        example: "# Isto é um comentário"
#        demo_code: |-
#            # Este programa escreve Olá!
#            # Este programa foi feito em Hedy
#            # Não faz mais nada além de escrever Olá!
#            print('Olá!')
#20:
#    start_code: |-
#        fruta = ['maçã', 'banana', 'cereja']
#        for i in range(1, 3):
#            print(fruta[i])
#    story_text: |-
#        Podemos também ver tudo na lista com o ciclo `for`. Como
#        existem três coisas na lista, passamos o ciclo de 1 até 3.
#        Durante o ciclo nós printamos tudo que há na lista.
#    commands:
#    -   name: "Tamanho da lista"
#        explanation: |-
#            Com `length` podemos saber o tamanho da lista. A lista no
#            exemplo tem tamanho 3, porque existem três coisas na lista.
#        example: "length(lista)"
#        demo_code: |-
#            fruta = ['maçã', 'banana', 'cereja']
#            print('tamanho da lista é ' length(fruta))
#            for i in range(1, length(fruta)):
#                print(fruta[i])
#21:
#    start_code: |-
#        print('Quanto é 5+3?')
#        resposta = 5+3
#        print('Resposta é agora:')
#        print(resposta)
#        if resposta == 8:
#            print('Está certo!')
#        else:
#            print('Oh não, está errado!')
#    story_text: |-
#        Agora vamos substituir o `is` por `=` e `==`. Usamos `=` se
#        quisermos atribuir um determinado valor a uma variável. Se
#        quisermos atribuir 8 à variável chamada resposta, então
#        escrevemos resposta = 8. Utilizamos `==` quando queremos
#        saber se duas coisas são iguais.
#    commands:
#    -   name: "Comparar"
#        explanation: "Se quisermos comparar, usamos ==. 5+3 == 8 verifica se 5+3 é igual a 8"
#        example: "Por exemplo: 5+3 == 8"
#        demo_code: |-
#            if 5+3 == 8:
#                print('5+3 é realmente 8')
#            else:
#                print('Isto não será printado, porque 5+3 é 8!')
#    -   name: "Atribuir valor"
#        explanation: |-
#            Se quisermos dizer que uma variável chamada resposta é 8,
#            escrevemos resposta = 8.
#        example: "Por exemplo: resposta = 8"
#        demo_code: |-
#            print('Quanto é 5+3?')
#            resposta = 5+3
#            print('Resposta é agora:')
#            print(resposta)
#    -   name: "Comparar e atribuir valor"
#        explanation: |-
#            Se vamos comparar dois valores, utilizamos `==`. Se
#            vamos atribuir um valor a uma variável, usamos `=`.
#        example: "Por exemplo: 5+3 == 8, resposta = 8"
#        demo_code: |-
#            print('Quanto é 5+3?')
#            resposta = 5+3
#            print('Resposta é agora:')
#            print(resposta)
#            if resposta == 8:
#                print('Está certo!')
#            else:
#                print('Não, está errado!')
    example_code: "```\nname = ask 'what is your name?'\nage = ask 'what is your age?'\nif name is 'Hedy' and age is 2\n    print 'You are the real Hedy!'\n```\n"
14:
    start_code: |-
        idade = ask 'Quantos anos você tem?'
        if idade < 13
            print 'Você é mais novo a do que eu!'
        else
            print 'Você é mais velho a do que eu!'
    story_text: "Vamos aprender mais coisas novas! Você pode já ter aprendido sobre elas em Matemática: o `<` e o `>`. O `<` verifica se o primeiro número é menor que o segundo, como `4 < 5`. O `>` verifica se o primeiro número é maior que o segundo, como `6 > 5`."
    example_code: "## Example Hedy Code\n```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n"
    story_text_2: "From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:\n"
    example_code_2: "```\nname = {ask} 'What is your name?'\n{if} name == 'Hedy'\n    {print} 'You are coo!'\n```\n"
    story_text_3: "You can also compare if something is *not* equal to something else using `!=` like this:\n"
    example_code_3: "```\nname = {ask} 'What is your name?'\n{if} name != 'Hedy'\n    {print} 'You are not Hedy'\n```\n"
15:
    start_code: |-
        resultado = 0
        while resultado != 25
            resultado = ask 'Quanto é 5 vezes 5?'
        print 'Foi dada uma boa resposta'
    story_text: |-
        Vamos aprender um ciclo novo, o ciclo `while`! Continuamos o
        ciclo enquanto a instrução for verdadeira/válida! Portanto,
        no exemplo de código, continuamos até ser dada a resposta
        certa. Se a resposta correta nunca for dada, o ciclo nunca
        acaba!
    example_code: "## Example Hedy code\n```\nanswer = 0\nwhile answer != 25\n    answer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n```\n"
16:
    start_code: |-
        fruta = ['maçã', 'banana', 'cereja']
        print fruta 
    story_text: "Vamos colocar as listas entre colchetes! Também vamos ter de colocar cada elemento da lista entre aspas simples ('). "
    example_code: "## Example Hedy Code\n```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
17:
    start_code: |-
        for i in range 1 to 10:
            print i
        print 'Preparados ou não, aqui vou eu!'
    story_text: "Agora vamos mudar um pouco as coisas com a indentação. Cada vez que precisarmos de indentação, temos de colocar `:` na linha antes da indentação."
18:
    start_code: "naam = 'Hedy'\n{print}('My name is ', naam)"
    story_text: "We arrived at real pythoncode! That means we need to use parentheses with {print} and {range} from now on.\nThat looks like this:\n```\n{print}('my name is Hedy!')\n```\nIf you want to print more thant one items, you need to separate them by commas.\n```\nnaam = 'Hedy'\n{print}('my name is ', naam)\n```"
