1:
    intro_text: |
        ## Willkommen bei Hedy!
        In Level 1 kannst du die Befehle `print`, `ask` und `echo` verwenden.
        Tippe den Code in das Programmierfeld. Oder drücke den grünen Knopf beim Beispielcode um ihn in dein Programm zu übernehmen!
        Probiere den Code selbst mit der grünen Schaltfläche 'Code ausführen' unter dem linken Programmierfeld aus.

        Du kannst Text auf dem Bildschirm ausgeben lassen indem du den Befehl `{print}` verwendest.
    start_code: "print Hallo Welt!"
    commands:
    -   name: "print"
        explanation: "Gib etwas mit `print` aus."
        example: "Beispiel: print Hallo willkommen bei Hedy!"
        demo_code: "print Hallo willkommen bei Hedy!"
    -   name: "ask"
        explanation: "Frage etwas mit `ask`."
        example: "Beispiel: ask Was ist deine Lieblingsfarbe?"
        demo_code: "ask Was ist deine Lieblingsfarbe?"
    -   name: "echo"
        explanation: "Wiederhole etwas mit `echo`."
        example: "Beispiel: echo Also deine Lieblingsfarbe ist "
        demo_code: |-
            ask Was ist deine Lieblingsfarbe?
            echo Also deine Lieblingsfarbe ist
    -   name: forward
        explanation: Gebe ein emoji mit `{print}`aus
        example: 'Beispiel: forward 100'
        demo_code: forward 100
    -   name: turn
        explanation: Zeichne eine Linie mit `forward`.
        example: turn
        demo_code: |-
            {forward} 100
    -   demo_code: "{forward} 25\n{turn} {left}\n{forward} 25\n{turn} {right}"
        explanation: Drehe die Schildkröte mit `{turn}`
        example: 'Beispiel: {turn}'
        name: '{turn}'
    example_code: "## Hedy Beispiel-Code\n```\n{print} Hallo!\n{print} Willkommen bei Hedy!\n```\n"
    intro_text_2: "Du kannst auch nach Eingaben fragen und sie dir zurückgeben lassen, mit dem Befehl `{echo}`.\n"
    example_code_2: "## Hedy Beispiel-Code\n```\n{ask} Wie heißt du?\n{echo} Hallo\n```\n"
    intro_text_3: "Lass uns loslegen! Weißt du nicht was du programmieren sollst? In den nächsten Tabs warten Ideen für Programme auf dich.\n"
2:
    intro_text: |
        ## Variablen
        In Level 2 lernen wir zwei neue Befehle: `{is}`und `{sleep}`.
        Du kannst ein Wort mit `is` benennen. Das nennt man eine Variable. In diesem Beispiel machen wir eine Variable die sich Name nennt, und eine Variable die sich Alter nennt. Du kannst das Wort Name irgendwo in deinem Code verwenden und es wird dann durch Hedy ersetzt, und zwar so:

        Deswegen benötigst du den Befehl `echo` nicht mehr!
    start_code: "print Hallo Welt!"
    commands:
    -   name: "is"
        explanation: "Gib einem Wort einen Namen mit `is`, den du in deinem Programm wiederverwenden kannst."
        example: "Beispiel: name is Hedy."
        demo_code: |-
            name is Hedy
            print Willkommen name
    -   name: "ask"
        explanation: "Frage etwas mit `ask`. Aber pass auf! Du musst der Antwort einen Namen mit `is` geben."
        example: "Beispiel: farbe is ask Was ist deine Lieblingsfarbe?"
        demo_code: |-
            Farbe is ask Was ist deine Lieblingsfarbe?
            print Du magst am liebsten Farbe !
    -   name: sleep
        explanation: Lass Hedy für ein paar Sekunden pausieren.
        example: 'Beispiel: sleep 2 '
        demo_code: |-
            print Lass mich einen Moment nachdenken...
            sleep
            print Hmm.. Ich brauche noch 3 Sekunden mehr...
            sleep 3
            print Eureka! Jetzt hab ich's!
    -   explanation: Vergib einen Namen an eine Zahl mit `is`. Du kannst den Namen selbst wählen.
        example: 'Beispiel: winkel is 90'
        demo_code: |-
            winkel is 90
            turn winkel
            forward 100
        name: is - Schildkröte
    example_code: "## Example code\n```\nName {is} Hedy\nAlter {is} 15\n{print} Name ist Alter Jahre alt\n```\n"
    intro_text_2: "`{print}` funktioniert genauso wie vorher, aber der Befehl `{ask}` hat sich verändert. Du brauchst jetzt auch für den Befehl `{ask}` eine Variable. Das sieht so aus:\n"
    example_code_2: "```\nAntwort {is} {ask} Wie heißt du?\n{print} Hallo Antwort\n```\n"
    intro_text_3: "Ein weiterer neuer Befehl in diesem Level ist `{sleep}`, was das Programm für eine Sekunde anhält. Wenn du hinter {sleep} eine Zahl tippst, wartet das Programm so viele Sekunden.\n"
    example_code_3: "```\n{print} Meine Lieblingsfarbe ist...\n{sleep} 2\n{print} grün!\n```\n"
3:
    intro_text: |
        ## Erstelle eine Liste!
        In Level 3 kannst Du eine Liste erstellen. Du kannst den Computer etwas zufällig aus der Liste auswählen lassen. Du machst dies mit `at random` (es bedeutet zufällig und man spricht es "ät rän-dum" aus).
    start_code: "print Hallo Welt!"
    commands:
    -   name: "wähle_zufällig"
        explanation: "Wähle mit `at` und `random` zufällig ein Wort aus einer Gruppe aus"
        example: "Beispiel: tiere is Hund, Katze, Känguru."
        demo_code: |-
            tiere is Hund, Katze, Känguru
            print tiere at random
    -   name: Add
        explanation: Füge ein Ding zu einer Liste hinzu.
        example: 'Beispiel: add Hund to tiere'
        demo_code: |-
            tiere is Kuh, Katze
            add Hund to tiere
    -   name: Remove
        explanation: Entferne ein Ding aus einer Liste
        example: 'Beispiel: remove Hund from tiere'
        demo_code: |-
            tiere is Katze, Hund, Kuh
            remove Hund from tiere
    example_code: "## Hedy Beispiel-Code\n\n```\nTiere {is} Hund, Katze, Känguru\n{print} Tiere {at} {random}\n```\n"
    intro_text_2: Du kannst auch Elemente der Liste mit `{add}` hinzufügen und Elemente mit`{remove}` entfernen.
    example_code_2: "## Hedy Beispiel-Code\n\n```\nTiere {is} Hund, Katze, Känguru\n{add} Pinguin {to_list} Tiere\n{remove} Katze {from} Tiere\n{print} Tiere {at} {random}\n```\n"
4:
    start_code: "print 'Hallo Welt'"
    intro_text: |
        ## 'Anführungszeichen'
        In Level 4 haben sich `print` und `ask` geändert.

        Du musst Text, den du genau so mit `print` ausgeben möchtest, in Anführungszeichen setzen.

        Das ist nützlich, denn nun kannst du alle Wörter ausgeben, die du möchtest. Auch die Wörter, mit denen du etwas mit `is` gespeichert hast.

        Die meisten Programmiersprachen verwenden beim `print`-Befehl Anführungszeichen, sodass wir dem echten Programmieren einen Schritt näher kommen!
    commands:
    -   name: "print"
        explanation: "Benutze Anführungszeichen, um einen Text genau so auszugeben."
        example: "Beispiel: print 'Hallo. Willkommen bei Hedy.'"
        demo_code: "print 'Hallo. Willkommen bei Hedy.'"
    -   name: "is"
        explanation: "Gib einem Text einen Namen und gib ihn ohne Anführungszeichen aus."
        example: "Beispiel: name is Hedy."
        demo_code: |-
            name is Hedy
            print 'Ich heisse ' name
    -   name: "ask"
        explanation: "Frage etwas mit `ask`."
        example: "Beispiel: farbe is ask 'Was ist deine Lieblingsfarbe?'"
        demo_code: |-
            farbe is ask 'Was ist deine Lieblingsfarbe?'
            print 'Du magst am liebsten ' farbe
    example_code: "## Hedy Beispiel-Code\n```\nprint 'Ab jetzt musst du Anführungszeichen verwenden!'\nAntwort is ask 'Was müssen wir ab jetzt verwenden?'\nprint 'Wir müssen ' Antwort ' verwenden.'\n```\n"
    intro_text_2: "## Abenteuer werden immer schwieriger\nDie Abenteuer werden jetzt immer schwieriger in den nächsten Tabs.\nDeswegen ist es am Besten wenn du dich mit der Geschichte von links nach rechts vorarbeitest, um immer mehr herausgefordert zu werden.\n"
5:
    start_code: |-
        name is ask 'Wie heisst du?'
        if name is Hedy print 'Toll!' else print 'Blöd'
    intro_text: |
        ## Falls... sonst...
        In Level 5 gibt es etwas neues, nämlich das `if`! Mit `if` kannst du zwischen zwei verschiedenen Möglichkeiten wählen.
        Dieser Code gibt 'Toll!' aus, wenn du Hedy als Namen eingibst, und 'Blöd!', wenn du etwas anderes eingibst.
        `ask` und `print` funktionieren immer noch wie in Level 4.

    commands:
    -   name: "print"
        explanation: "Benutze Anführungszeichen, um einen Text genau so auszugeben."
        example: "Beispiel: print 'Hallo. Willkommen bei Hedy.'"
        demo_code: "print 'Hallo. Willkommen bei Hedy.'"
    -   name: "ask"
        explanation: "Frage etwas mit `ask`."
        example: "Beispiel: farbe is ask 'Was ist deine Lieblingsfarbe?'"
        demo_code: |-
            farbe is ask 'Was ist deine Lieblingsfarbe?'
            print 'Du magst am liebsten ' farbe
    -   name: "if"
        explanation: "Treffe eine Auswahl mit `if` und `else`"
        example: "Beispiel: if farbe is grün print 'Hübsch!' else print 'Bäh'"
        demo_code: |-
            farbe is ask 'Was ist deine Lieblingsfarbe?'
            if farbe is grün print 'Hübsch!' else print 'Bäh'
    -   name: if with turtle
        explanation: Triff eine Entscheidung mit `if`
        example: 'Beispiel: if Antwort is weit forward 100 else forward 5'
        demo_code: |-
            Antwort is ask 'Wie weit soll ich laufen?'
            if Antwort is weit forward 100 else forward 5
    -   name: in
        explanation: Prüfe ob ein Ding in einer Liste enthalten ist
        example: "Beispiel: if farbe in schöne_farben print 'Schön!' else print 'meh'"
        demo_code: |-
            schöne_farben is Grün, Gelb
            farbe is ask 'Was ist deine Lieblingsfarbe?'
            if farbe in schöne_farben print 'Schön!' else print 'meh'
    example_code: "## Hedy Beispiel-Code\n```\nName {is} {ask} 'Wie heißt du?'\n{if} Name {is} Hedy {print} 'Schön' {else} {print} 'Buh!'\n```\n"
    intro_text_3: "## Lists\nWenn wir überprüfen möchten ob etwas in einer Liste ist, können wir das mit dem Befehl `{in}` machen.\nDieser Code gibt schön! aus wenn du grün oder gelb auswählst, und na ja wenn du dich für eine andere Farbe entscheidest.\n"
    example_code_3: "```\nschöne_Farben {is} grün, gelb\nFarbe {is} {ask} 'Was ist deine Lieblingsfarbe?'\n{if} Farbe {in} schöne_Farben {print} 'schön!'\n{else} {print} 'na ja'\n```\n"
    intro_text_2: "Machmal wir Code mit einem`{if}`ziemlich lang und passt nicht gut in eine Zeile. <br> Du kannst den Code auch auf zwei Teilen aufteilen, beginnend mit der zweiten Zeile beim `{else}` Befehl, und zwar so:\n"
    example_code_2: "```\nName {is} {ask} 'Wie heißt du?'\n{if} Name {is} Hedy {print} 'Schön'\n{else} {print} 'Buh!'\n```\n"
6:
    start_code: "print '5 mal 5 ist ' 5 * 5"
    intro_text: |
        ## 1 + 1
        In diesem Level lernst du etwas neues: du kannst jetzt auch rechnen.

        Das Plus ist leicht, das schreibst du wie in Mathe: `5 + 5` zum Beispiel. Das Minus funktioniert genauso, zum Beispiel `5 - 5`.

        Das Mal ist etwas anders, da auf deiner Tastatur kein Malzeichen (`·`) vorhanden ist. Suche mal, das gibt es wirklich nicht!
        Deshalb multiplizieren wir mit dem Stern (auf der Tastatur über dem Plus): `5 * 5`. Lies das mal als "5 mal 5", dann kannst du dich am einfachsten daran erinnern.

    commands:
    -   name: "print"
        explanation: "Benutze Anführungszeichen, um einen Text genau so auszugeben."
        example: "Beispiel: print '5 mal 5 ist ' 5 * 5"
        demo_code: "print '5 mal 5 ist ' 5 * 5"
    -   name: "`ask` und `if` mit Berechnungen"
        explanation: "Frage nach einer Rechenaufgabe."
        example: "Beispiel: antwort = ask 'Was ist 10 plus 10?'"
        demo_code: |-
            antwort = ask 'Was ist 10 plus 10?'
            if antwort is 20 print 'Ja!' else print 'Ups'
    -   name: "`ask` and `if` turtle"
        explanation: "Ask the user how many angles they want"
        example: "Example: angles = ask 'How many angles?'"
        demo_code: |-
            angles = ask 'How many angles?'
            angle = 360 / angles
            forward 50
    example_code: "## Hedy Beispiel-Code\n```\n{print} '5 plus 5 macht ' 5 + 5\n{print} '5 minus 5 macht ' 5 - 5\n{print} '5 {times} 5 macht ' 5 * 5\n```\n"
    intro_text_2: "Wir verändern auch wie du ein Wort in einer Variable speichern kannst! Du darfst jetzt `=`anstatt `{is}` verwenden, wenn du ein Wort oder eine Zahl in einer Variable speicherst, und zwar so:\n"
    example_code_2: "```\nName = Hedy\nAntwort = 20 + 4\n```\n"
7:
    start_code: "repeat 3 times print 'Hedy macht Spaß!'"
    intro_text: |
        ## Level 7! Level 7!
        In Level 7 kommt der Befehl `{repeat}`dazu. Mit {repeat} kannst du eine Zeile Code mehrmals ausführen.
    commands:
    -   name: "print"
        explanation: "Benutze Anführungszeichen, um einen Text genau so auszugeben."
        example: "Beispiel: print 'Hallo. Willkommen bei Hedy.'"
        demo_code: "print 'Hallo. Willkommen bei Hedy.'"
    -   name: "ask"
        explanation: "Frage etwas mit `ask`."
        example: "Beispiel: farbe = ask 'Was ist deine Lieblingsfarbe?'"
        demo_code: |-
            farbe = ask 'Was ist deine Lieblingsfarbe?'
            print 'Du magst am liebsten ' farbe
    -   name: "if"
        explanation: "Treffe eine Auswahl mit `if` und `else`"
        example: "Beispiel: if farbe is grün print 'Hübsch!' else print 'Bäh'"
        demo_code: |-
            farbe = ask 'Was ist deine Lieblingsfarbe?'
            if farbe is grün print 'Hübsch!' else print 'Bäh'
    -   name: "repeat - turtle"
        explanation: "Repeat a line of code with `repeat`."
        example: "Example: repeat 3 times forward 10"
        demo_code: |-
            repeat 3 times forward 10
    example_code: "## Hedy Beispiel-Code\n```\n{repeat} 3 {times} {print} 'Hedy {is} cool!'\n```\n"
8:
    start_code: |-
        repeat 5 times
            print 'Hello Leute'
            print 'Das wird 5 mal ausgegeben'
    intro_text: |
        ## Die Einrückung
        `ask` und `print` funktionieren immer noch wie du es gewohnt bist. Aber `if` und `repeat` haben sich verändert!
        Du kannst jetzt Befehlsgruppen zusammen ausführen, aber du musst den Code dafür *einrücken*.
        Das bedeutet dass du die Befehlszeilen mit vier Leerzeichen beginnen musst. Das gilt auch, wenn du einen Block mit nur einer Zeile schreiben möchtest.
    commands:
    -   name: "print"
        explanation: "Gib etwas aus. Denke daran, Anführungszeichen für eine wörtliche Ausgabe zu verwenden."
        example: "Beispiel: print '5 mal 5 ist ' 5 * 5"
        demo_code: "print '5 mal 5 ist ' 5 * 5"
    -   name: "`if` mit mehreren Zeilen"
        explanation: "Frage nach einer Summe und prüfe, ob die Antwort richtig ist. Wir können jetzt zwei Zeilen ausgeben."
        example: "Beispiel: antwort = ask 'Was ist 5 plus 5?'"
        demo_code: |-
            antwort = ask 'Was ist 5 plus 5?'
            if antwort is 10
                print 'Gut gemacht!'
                print 'Die Antwort ist wirklich ' antwort
            else
                print 'Ups!'
                print 'Die Antwort is 10'
    -   name: '`repeat` with turtle'
        explanation: Wiederhole mehrere Befehlszeilen
        example: 'Beispiel: Zeichne ein Quadrat'
        demo_code: |-
            repeat 4 times
                turn 90
                forward 50
    example_code: "## Hedy Beispiel-Code\n```\n{repeat} 5 {times}\n    {print} 'Hallo zusammen'\n    {print} 'Das hier wird fünf Mal wiederholt'\n```\n"
9:
    start_code: |-
        repeat 3 times
            Essen = ask 'Was möchtest du gern?'
            if Essen is 'Pizza'
                print 'Gut!'
            else
                print 'Pizza ist besser'
    intro_text: |
        ## Jetzt alles auf einmal!
        In diesem Level kannst du nicht nur mehrere Zeilen mit `if` und `repeat` verwenden, du kannst sie auch kombinieren!
        Im Beispiel siehst du einen `if` Befehl innerhalb eines `repeat` Befehls. Es ist auch anders herum erlaubt. Und ebenso ist `if` innerhalb eines anderen `if` Befehls erlaubt, genau wie `repeat` in einem anderen `repeat` Befehl.
        Versuch es mal!

    commands:
    -   name: "`if` with multiple lines"
        explanation: "The answer of a sum of questions with 'ask' and see if it is correct. Now we print out two lines."
        example: "Example: answer = ask 'What is 20 plus 20?'"
        demo_code: |-
            answer = ask 'What is 20 plus 20?'
            if answer is 20
                print 'Well done!!'
                print 'The answer is indeed' answer
            else
                print 'Wrong'
                print 'The answer is 20'
    -   name: "`repeat` and turtle"
        explanation: "Repeat multiple lines"
        example: "Beispiel: Zeichne ein Quadrat"
        demo_code: |-
            repeat 4 times
                turn 90
                forward 50
    example_code: "## Hedy Beispiel-Code\n```\n{repeat} 3 {times}\n    Essen = {ask} 'Was würden Sie gerne essen?'\n    {if} Essen {is} Pizza\n        {print} 'Schön!'\n    else\n        {print} 'Pizza ist leckerer'\n```\n"
10:
    start_code: |-
        animals is dog, cat, blobfish
        for animal in animals
          print 'I love ' animal
    intro_text: |
        ## Für jedes Element in meiner Liste...
        In diesem Level lernen wir den neuen Befehl `for`. Mit `for` kannst du eine Liste machen und alle ihre Elemente verwenden.
        `for` erstellt einen Block, so wie `repeat` und `if`, daher müssen alle Zeilen in dem Block mit Leerzeichen beginnen.
    commands:
    -   name: "print"
        explanation: "Print something. Remember to use a quotation mark for literal printing."
        example: "Example: print '5 times 5 is ' 5 * 5"
        demo_code: "print '5 times 5 is ' 5 * 5"
    -   name: "for with a list"
        explanation: "gebe alle Elemente einer Liste aus "
        example: "Example: for dier in dieren"
        demo_code: |-
            animals is dog, cat, blobfish
            for animal in animals
              print 'I love ' animal
    example_code: "## Hedy Beispiel-Code\n```\nTiere {is} Hund, Katze, Kugelfisch\n{for} Tier {in} Tiere\n  {print} 'Ich mag ' Tier\n```\n"
11:
    start_code: |-
        for Zähler in range 1 to 5
            print Zähler
    intro_text: |
        ## Schleifen!
        `print` funktioniert exakt genauso, aber wir verwenden jetzt die neue Form des Befehls `for`. Du kannst jetzt `{for} Zähler {in} {range} 1 {to} 5` schreiben und `Zähler` in deinem Programm verwenden.
        Probier es mal aus, und schau was passiert! Denke daran, Einrückungen nach den `for`- und `if`-Anweisungen zu verwenden (Das bedeutet, einen Satz mit vier Leerzeichen zu beginnen).
    commands:
    -   explanation: "wir ersetzen `repeat` mit `for`"
        example: "for i in range 1 to 10"
        demo_code: |-
            for Zähler in range 1 to 5
              print Zähler
        name: '{for}-Schleife'
    -   name: '{ask}'
        explanation: Frag nach der Antwort zu einer Summe und überprüfe ob sie stimmt. Wir können jetzt zwei Zeilen ausgeben.
        example: "Beispiel: Antwort = {ask} 'Was ist 5 plus 5?'"
        demo_code: "Antwort = {ask} 'Was ist 5 plus 5?'\n{if} Antwort {is} 10\n    {print} 'Gut gemacht!'\n    {print} 'Nicht ganz, die Antwort wäre ' Antwort\nelse\n    {print} 'Ups!'\n    {print} 'Die Antwort war 10'"
    example_code: "## Hedy Beispiel-Code\n```\nfor Zähler in range 1 to 5\n    print Zähler\n```\n"
12:
    start_code: |-
        print 'decimal numbers now need to use a dot'
        print 2.5 + 2.5
    intro_text: |
        ## Zahlen und Texte
        **Dezimalzahlen**
        Bis jetzt konntest du mit Hedy keine Dezimalzahlen (das sind Kommazahlen) wie 1.5 verwenden, aber jetzt geht das. Denke daran, dass Computer anstatt des Kommas einen Punkt ('.') verwenden.
    commands:
    -   name: "float direkt"
        explanation: "Calculation with decimals"
        example: "print 2.5 + 2.5"
        demo_code: |
            print 'Calculate away!'
            print 'Two and a half plus two and a half is...'
            print 2.5 + 2.5
    -   name: "float in var"
        explanation: "Storing a calculation with decimals"
        example: "antwoord = 2.5 + 2.5"
        demo_code: |
            Name = 'Hedy der Roboter'
            {print} 'Hallo ' Name

    -   name: Anführungszeichen nach einem {if} Vergleich
        example: Name = 'Hedy'
        explanation: Text in Anführungszeichen nach {if}
        demo_code: "Name = {ask} 'Wer bist du?'\n{if} Name = 'Hedy'\n    {print} 'Hallo!'\n"
    -   name: Anführungszeichen in Listen
        explanation: Eine Liste mit Anführungszeichen
        demo_code: "Superhelden = 'Iron Man', 'Batman', 'Superman'\n{print} Superhelden {at} {random}\n"
        example: Name = 'Hedy', 'Felienne'
    example_code: "## Hedy Beispiel-Code\n```\n{print} 'Zweieinhalb plus zweieinhalb macht...'\n{print} 2.5 + 2.5\n```\n"
    intro_text_2: "**Jeder Text muss zwischen Anführungszeichen stehen**\nAb diesem Level musst du auch Anführungszeichen verwenden wenn du Text mit einem `=` abspeicherst:\n"
    example_code_2: "```\nName = 'Hedy der Roboter'\n{print} 'Hallo ' name\n```\n"
    intro_text_3: "**Auch alle Elemente in Listen brauchen Anführungszeichen**\nListen sind Texte, also brauchen auch sie Anführungszeichen. Achte darauf dass jedes einzelne Element in einer Liste Anführungszeichen hat.\nSo kannst du zwei Wörter als ein Listenelement speichern, zum Beispiel 'Iron Man'.\n"
    example_code_3: "```\nSuperhelden = 'Spiderman', 'Batman', 'Iron Man'\n{print} Superhelden {at} {random}\n```\n"
    intro_text_4: "**Auch jeder Text nach einem `{if}` Vergleich braucht Anführungszeichen**\n"
    example_code_4: "```\nName = {ask} 'Wie heißt du?'\n{if} Name = 'Hedy der Roboter'\n    {print} 'Hallo!'\n```\n"
    intro_text_5: "**Zahlen brauchen keine Anführungszeichen**\nFür Zahlen verwendest du keine Anführungszeichen mit dem `=`:\n"
    example_code_5: "```\nPunkte = 25\n{print} 'Du hast ' score\n```\n"
    intro_text_6: "**Mathe in Worten** In diesem Level ist es auch erlaubt das + Zeichen mit Texten zu benutzen. Zum Beispiel:\n"
    example_code_6: "```\na = 'Hallo '\nb = 'Welt!'\nprint a + b\n```\n"
13:
    start_code: |-
        Name = ask 'Wie heißt Du?'
        Alter = ask 'Wie alt bist Du?'
        if Name is 'Hedy' and Alter is 2
            print 'Du bist die echte Hedy!'
    intro_text: |
        ## Und... oder...?
        Wir werden jetzt `{and}` und `{or}` lernen! Wenn du zwei Angaben überprüfen willst, musst du nicht zwei `{if}` verwenden, sondern kannst `{and}` und `{or}` benutzen. Wenn du `{and}` verwendest, müssen beide Angaben, also links und rechts vom `{and}`, wahr sein. Du kannst auch `{or}` verwenden. Dann muss nur eine der beiden Aussage wahr sein.
    commands:
    -   name: "`and`"
        explanation: "Beide Angaben (links und rechts vom `and`) müssen richtig sein."
        example: "if 3+2 is 5 and 2+2 is 4"
        demo_code: |-
            antwort1 = ask 'Was ergibt 3+2?'
            antwort2 = ask 'Was ergibt 2+2?'
            if antwort1 is 5 and antwort2 is 4
                print 'Beide Antworten sind richtig!'
            else
                print 'Mindestens eine Antwort ist falsch.'
    -   name: "`or`"
        explanation: |-
            Mindestens eine der beiden Aussagen links und rechts vom `or`, muss richtig sein. Wenn beide richtig sind, ist es auch in Ordnung.
        example: "if 3+2 is 5 or 2+2 is 4"
        demo_code: |-
            antwort1 = ask 'Was ergibt 3+2?'
            antwort2 = ask 'Was ergibt 2+2?'
            if antwort1 is 5 or antwort2 is 4
                print 'Mindestens eine Antwort ist richtig!'
            else
                print 'Beide Antworten sind falsch.'
#16:
#    start_code: |-
#        # Dieses Programm wird ein paar mathematische Fragen stellen
#        for i in range(1,10):
#            # Wir werden die Multiplikationstabelle der 5 abfragen
#            antwort is input('Was ergibt ' i ' mal 5?')
#            # Wir prüfen ob die Antwort mit unserer übereinstimmt
#            korrekte_antwort is i * 5
#            if antwort is korrekte_antwort:
#                print(antwort ' ist korrekt!')
#            else:
#                print('Das ist falsch. Die richtige Antwort lautet: ' i*5)
#    intro_text: |-
#        Wenn du größere Programme erstellst, brauchst du einen Weg, um dir zu merken, was jedes Codestück tut.
#        Wir verwenden dafür Kommentare.
#        Ein Kommentar sieht folgendermaßen aus:\n ` # Dies ist ein Kommentar`.
#        Alles nach dem `#` wird für den Code unsichtbar.
#    commands:
#    -   name: "Kommentar"
#        explanation: "Wir können Kommentare platzieren, wo immer wir wollen."
#        example: "# Dies ist ein Kommentar"
#        demo_code: |-
#            # Dieses Programm gibt Hallo! aus
#            # Es ist in Hedy erstellt worden
#            # Es macht nichts außer Hallo! zu auszugeben
#            print('Hallo!')
    example_code: "```\nName = ask 'Wie heißt du?'\nAlter = ask 'Wie alt bist du?'\nif Name is 'Hedy' and Alter is 2\n    print 'Du bist die echte Hedy!'\n```\n"
14:
    start_code: |-
        alter = ask 'Wie alt bist du?'
        if alter < 13
            print 'Du bist jünger als ich!'
        else
            print 'Du bist älter als ich!'
    intro_text: |
        ## Groß, größer, am größten!
        Wir lernen weitere neue Elemente kennen! Du kennst sie vielleicht schon aus der Mathematik, das `<` und das `>` Zeichen.
        Das `<` prüft, ob die erste Zahl kleiner ist als die zweite, so überprüft `Alter < 12` zum Beispiel ob `Alter` kleiner als 12 ist.
        Wenn du überprüfen willst, ob die erste Zahl kleiner oder gleich der zweiten ist, kannst du `<=`verwenden, zum Beispiel `Alter <= 11`.
        Das `>` prüft, ob die erste Zahl größer als die zweite ist, so überprüft `Punkte > 10` zum Beispiel ob `Punkte` größer als 10 ist.
        Wenn du überprüfen willst, ob die erste Zahl größer oder gleich der zweiten ist, kannst du `>=`verwenden, also zum Beispiel `Punkte >= 11`.
        All diese Vergleiche kannst du mit einem `{if}`verwenden, das geht so:
    commands:
    -   name: "Kleiner"
        explanation: |-
            Wir verwenden das `<`, um zu prüfen, ob die erste Zahl kleiner als die zweite Zahl ist. Wenn wir zum Beispiel sehen wollen, ob eine Variable kleiner als 15 ist, verwenden wir `variable < 15`.
        example: "alter < 13"
        demo_code: |-
            alter = ask 'Wie alt bist du?'
            if alter < 13
                print 'Du bist jünger als ich!'
    -   name: "Größer"
        explanation: |-
            Wir verwenden das `>`, um zu prüfen, ob die erste Zahl größer als die zweite Zahl ist. Wenn wir zum Beispiel sehen wollen, ob eine Variable größer als 15 ist, verwenden wir `variable > 15`.
        example: "alter > 13"
        demo_code: |-
            alter = ask 'Wie alt bist du?'
            if alter > 13
                print 'Du bist älter als ich!'
    -   name: Gleich
        explanation: Wir verwenden `==` um zu überprüfen ob zwei Dinge gleich sind.
        example: 'Zum Beispiel: Antwort == 25'
        demo_code: "Antwort = {ask} 'Was macht 5 * 5?'\n{if} Antwort == 25\n    {print} 'Das stimmt!'"
    -   name: Ungleich
        explanation: 'Wir verwenden das `!=` um zu überprüfen ob zwei Dinge ungleich, also nicht gleich sind. '
        example: 'Zum Beispiel: Antwort != 25'
        demo_code: "Antwort = {ask} 'Was macht 5 * 5?'\n{if} Antwort != 25\n    {print} 'Das stimmt nicht!'"
    -   example: 'Zum Beispiel: Alter <= 12'
        explanation: Wir verwenden `<=` um zu überprüfen ob die erste Zahl kleiner oder gleich der zweiten Zahl ist.
        name: Kleiner gleich
        demo_code: "Alter = {ask} 'Wie alt bist du?'\n{if} Alter <= 12\n    {print} 'Du bist jünger als ich!'"
    -   example: 'Zum Beispiel: Alter >= 14'
        name: Größer gleich
        explanation: Wir verwenden `>=` um zu überprüfen ob die erste Zahl größer oder gleich der zweiten Zahl ist.
        demo_code: "Alter = {ask} 'Wie alt bist du?'\n{if} Alter >= 14\n    {print} 'Du bist älter als ich!'"
    example_code: "## Hedy Beispiel-Code\n```\nAlter = {ask} 'Wie alt bist du?'\n{if} Alter > 12\n    {print} 'Du bist älter als ich!'\n```\n"
    intro_text_2: "Ab diesem Level, wenn du überprüfen willst ob etwas genau gleich ist, kannst du zwei Gleichheitszeichen verwenden. So machen das die meisten Programmiersprachen:\n"
    example_code_2: "```\nName = {ask} 'Wie heißt du?'\n{if} Name == 'Hedy'\n    {print} 'Du bist cool!'\n```\n"
    intro_text_3: "Du kannst auch überprüfen ob etwas *nicht* gleich wie etwas anderes ist, mit `!=`und zwar so:\n"
    example_code_3: "```\nName = {ask} 'Wie heißt du?'\n{if} Name != 'Hedy'\n    {print} 'Du bist nicht Hedy'\n```\n"
15:
    start_code: |-
        antwort = 0
        while antwort != 25
            antwort = ask 'Wieviel ist 5 mal 5?'
            print 'Das ist die richtge Antwort!'
    intro_text: |
        ## Mehr Schleifen!
        Wir lernen eine neue Schleife kennen, die `{while}`-Schleife! Wir setzen die Schleife so lange fort, wie die Aussage wahr ist!
        Also vergiss nicht den Wert innerhalb der Schleife zu ändern.

        Im Beispielcode fahren wir also fort, bis eine korrekte Antwort gegeben wurde.
        Wenn die richtige Antwort nie gegeben wird, endet die Schleife nie!
    commands:
    -   name: "while"
        explanation: "Wir können die `while`-Schleife verwenden."
        example: "while richtige_antwort is False"
        demo_code: |-
            antwort = 0
            while antwort != 25
                antwort = ask 'Wieviel ist 5 mal 5?'
                print 'Das ist die richtge Antwort!'
    -   name: "while mit Ungleichungen"
        explanation: |-
            Wir können die "while"-Schleife auch mit "<" und ">" verwenden. Beachte, dass du die Zahl ändern musst, damit die Schleife endet. Wir machen das hier mit `zähler = zähler + 1`. 
        example: "while zähler < 3"
        demo_code: |-
            zähler = 1
            while zähler < 3
                print 'Wir machen dies noch ' 3 - zähler ' mal.'
                zähler = zähler + 1
            print 'Wir sind fertig!'
    example_code: "## Hedy Beispiel-Code\n```\nAntwort = 0\nwhile Antwort != 25\n    Antwort = ask 'Was macht 5 mal 5?'\nprint 'Es wurde eine richtige Antwort abgegeben'\n```\n"
16:
    start_code: |-
        früchte = ['Apfel', 'Banane', 'Kirsche']
        print früchte
    intro_text: |
        ## Wir kommen dem richtigem Code immer näher!
        Wir setzen jetzt eckige Klammern um Listen, so wie das in Python gemacht wird! Außerdem müssen wir jetzt einfache Anführungszeichen `'` um jedes Element einer Liste setzen, wie wir es in den vorherigen Leveln gelernt haben.
        Du kannst die eckigen Klammern auch verwenden um eine Stelle in der Liste zu benennen.
    commands:
    -   explanation: |-
            Wir werden eckige Klammern um Listen setzen! Wir müssen auch `'` um Elemente in Listen setzen.
        example: "früchte = ['Apfel', 'Banane', 'Kirsche']"
        demo_code: |-
            früchte = ['Apfel', 'Banane', 'Kirsche']
            print früchte
        name: Eckige Klammern
    -   name: "Nimm ein Element aus einer Liste"
        explanation: |-
            Um ein Element aus einer Liste zu erhalten, verwenden wir `[Zahl]`. Mit `früchte[1]` erhalten wir also die erste Frucht aus der Liste!
        example: "erste_frucht = früchte[1]"
        demo_code: |-
            früchte = ['Apfel', 'Banane', 'Kirsche']
            erste_frucht = früchte[1]
            print erste_frucht
    -   name: "Nimm ein zufälliges Element aus einer Liste"
        explanation: |-
            Um ein zufälliges Element aus einer Liste zu erhalten, verwenden wir `[random]`. Mit früchte[random] erhalten wir also eine zufällige Frucht aus der Liste!
        example: "zufällige_frucht = früchte[random]"
        demo_code: |-
            früchte = ['Apfel', 'Banane', 'Kirsche']
            zufällige_frucht = früchte[random]
            print zufällige_frucht

    example_code: "## Hedy Beispiel-Code\n```\nFreunde = ['Ahmed', 'Ben', 'Clemens']\nGlückszahlen = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'Die Glückszahl von ' Freunde[i]\n    {print} 'ist ' Glückszahlen[i]\n```\n"
17:
    start_code: |-
        for i in range 1 to 10:
            print i
        print 'Bereit oder nicht, hier komme ich!'
    intro_text: |
        Jetzt werden wir ein wenig an der Einrückung ändern. Jedes Mal, wenn wir eine Einrückung benötigen, brauchen wir `:` in der Zeile vor der Einrückung.

        In diesem Level kannst du außerdem einen neuen Befehl benutzen: `{elif}`. `{elif}` ist eine Abkürzung für {else} {if} und du brauchst ihn wenn du drei (oder Mehr!) Optionen machen willst.
        Probier es mal aus!
        ```
        Preise = ['1 Million Euro', 'ein Apfelkuchen', 'nichts']
        dein_Preis = Preise[random]
        {print} 'Du gewinnst ' dein_Preis
        {if} dein_Preis == '1 Million Euro' :
            {print} 'Juhuu! Du bist reich!'
        {elif} dein_Preis == 'ein Apfelkuchen' :
            {print} 'Wunderbar, ein Apfelkuchen!'
        {else}:
            {print} 'Viel Glück beim nächsten Mal...'
        ```
    commands:
    -   explanation: "`{elif}`."
        example: "for i in range 1 to 10:"
        demo_code: |-
            a = 2
            {if} a == 1:
                {print} 'a ist gleich 1'
            {elif} a == 2:
                {print} 'a ist gleich 2'
            {else}:
                {print} 'a ist nicht gleich 1 oder 2'
        name: '{elif}'
    -   explanation: "Wenn wir ein `{for}` verwenden, müssen wir ein `:` hinter die `{for}` Anweisung schreiben!"
        example: "for i {in} {range} 1 {to} 10:"
        demo_code: |-
            {for} i {in} {range} 1 {to} 12:
                {print} i
            {print} 'Ob ihr bereit seid oder nicht, ich komme!'
        name: '{print}'
    -   explanation: |-
            Wir müssen dasselbe mit allen unseren `if`-Anweisungen tun.
        example: "{if} Farbe {is} grün:'"
        demo_code: |-
            Farbe = {ask} 'Was ist deine Lieblingsfarbe?'
            {if} Farbe == 'grün':
                {print} 'Deine Lieblingsfarbe ist grün'
            {else}:
                {print} 'Deine Lieblingsfarbe ist nicht grün'
        name: '{if}'
18:
    start_code: "Name = 'Hedy'\n{print}('Ich heiße ', Name)"
    commands:
    -   name: '{print}'
        explanation: Mit `{print}` musst du runde Klammern verwenden
        example: '{print}'
        demo_code: "{print}('Hi!')"
    -   name: '{print} mit einer Variable'
        explanation: Mit `{print}`musst du runde Klammern verwenden, und Kommas falls du mehrere Elemente ausgeben möchtest
        example: '{print}'
        demo_code: "Name = 'Hedy'\n{print}('Ich heiße ', Name)"
    intro_text: "## Level 18\nWir sind bei richtigem Python Code angekommen! Das bedeutet dass wir ab jetzt rund Klammern mit den Befehlen {print} und {range} benutzen müssen.\nDas sieht so aus:\n```\n{print}('Ich heiße Hedy!')\n```\nWenn du mehr als ein Element ausgeben möchtest, musst du sie mit Kommas trennen.\n```\nName = 'Hedy'\n{print}('Ich heiße ', Name)\n```"
