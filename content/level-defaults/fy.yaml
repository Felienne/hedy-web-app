1:
    intro_text: |
        Wolkom by Hedy! Kinst de kommando's `print`, `ask` en `echo` brûke.

        Yn de linker balke sjochst alle kommando's dytst brûke kinst yn level 1.

        Atst op de blauwe knop drukst, wurdt de koade alfêst foar dy ynfolle!

        Besykje de koade sels te draaien mei de griene 'Koade draaie'-knop ûnder it linker programmearfjild.

        Witst net watst meitsje silst? Yn de oare tabs stean wat ideeën.
    start_code: "print oant moarn!"
    commands:
    -   name: "printe"
        explanation: "Eat printe mei `print`."
        example: "Foarbyld: print Hoi wolkom by Hedy!"
        demo_code: "print Hoi wolkom by Hedy!"
    -   name: "freegje"
        explanation: "Eat freegje mei `ask`."
        example: "Foarbyld: ask Wat is dyn favorite kleur?"
        demo_code: "ask Wat is dyn favorite kleur?"
    -   name: "echo"
        explanation: "Eat werhelje mei `echo`."
        example: "Foarbyld: echo Dus dyn favorite kleur is"
        demo_code: |-
            ask Wat is dyn favorite kleur?
            echo Dus dyn favorite kleur is...
    -   name: "foarút"
        explanation: "Een line tekenje mei `forward`."
        example: "Foarbyld: forward 100"
        demo_code: "forward 100"
    -   name: "draaie"
        explanation: "De teken-skyldpod draaie mei `turn`"
        example: "Foarbyld: turn"
        demo_code: |-
            forward 25
            turn left
            forward 25
            turn right
    -   example: 'Example: {turn}'
        demo_code: "{forward} 25\n{turn} left\n{forward} 25\n{turn} right"
        name: '{turn}'
        explanation: turn the drawing turtle with `{turn}`
    intro_text_2: "You can also ask for input and repeat it back with an `{echo}` command.\nTry the code to your left again.\n\nDon't know what to create? In the next tabs you will find ideas for programs to build.\n"
    example_code: "## Example code\n```\n{print} Hello!\n{print} Welcome to Hedy!\n```\n"
    example_code_2: "## Example code\n```\n{ask} What is your name?\n{echo} hello\n```\n"
    intro_text_3: "Let's get started! Don't know what to create? In the next tabs you will find ideas for programs to build.\n"
2:
    intro_text: |
        Yn level 2 leare wy wat nijs. Kinst in wurd in namme jaan mei `is`. Dernei kinst oeral yn dyn koade dy namme brûke. Hedy ferfangt dat dan. Dat giet sa:
        ```
        namme is Hedy
        print hoi namme
        ```

        It kommando `ask` is yn level 2 ek feroare. It antwurd ûnthaldst ek mei in namme:

        ```
        antwurd is ask Wat is dyn namme?
        ```

        `print` wurket noch lykas yn level 1, en `echo` hast net mear nedich.
    start_code: "print oant moarn!"
    commands:
    -   name: "is"
        explanation: "In wurd in namme jaan mei `is`. Meist de namme sels kieze."
        example: "Foarbyld: foarnamme is Hedy."
        demo_code: |-
            foarnamme is Hedy
            print ik bin foarnamme
    -   name: "is - teken-skyldpod"
        explanation: "In getal in namme jaan mei `is`. Meist de namme sels kieze."
        example: "Foarbyld: hoek is 90."
        demo_code: |-
            hoeke is 90
            turn hoeke
            forward 100
    -   name: "ask"
        explanation: "Eat freegje mei `ask`. Mar tink derom! Moatst dyn antwurd in namme jaan mei `is`."
        example: "Foarbyld: kleur is ask Wat is dyn favorite kleur?"
        demo_code: |-
            kleur is ask Wat is dyn favorite kleur?
            print Dyn favorite is dus kleur
    -   explanation: Give a number a name using `{is}`. You can choose the name yourself.
        example: 'Example: angle {is} 90'
        demo_code: "angle {is} 90\n{turn} angle\n{forward} 100"
        name: is - turtle
    example_code: "## Example code\n```\nname {is} Hedy\nage {is} 15\n{print} name is age years old\n```\n"
    intro_text_2: "`{print}` still works the same, but the `{ask}` command has changed. You need to use a variable in the `{ask}` command as well. It looks like this:\n"
    example_code_2: "```\nanswer {is} {ask} What is your name?\n{print} Hello answer\n```\n"
    intro_text_3: "Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.\n"
    example_code_3: "```\n{print} My favorite colour is...\n{sleep} 2\n{print} green!\n```\n"
3:
    intro_text: |
        Yn level 3 kinst ek in list meitsje. Ut de list kinst dan eat willekeurichs kieze. Dat dochst mei `at random` (sprek út: et ren-dum).

        ```
        bisten is hûn, kat, kangeroe
        print bisten at random
        ```

        Alle koade fan level 3 stiet wer in de linkerbalke. Yn de tabkes stean wer opjeften.
    start_code: "print oant moarn!"
    commands:
    -   name: "kies_random"
        explanation: "Eat willekeurichs út in groepke wurden kieze mei `at` en `random`."
        example: "Foarbyld: bisten is hûn, kat, kangeroe."
        demo_code: |-
            bisten is hûn, kat, kangeroe
            print bisten at random
    -   name: '{add}'
        explanation: add an item to a list
        example: 'Example: {add} dog {to_list} animals'
        demo_code: "animals {is} cow, cat\n{add} dog {to_list} animals"
    -   name: '{remove}'
        example: 'Example: {remove} dog {from} animals'
        demo_code: "animals {is} cat, dog, cow\n{remove} dog {from} animals"
        explanation: remove an item from a list
    example_code: "## Example Hedy Code\n\n```\nanimals {is} dog, cat, kangaroo\n{print} animals {at} {random}\n```\n"
    intro_text_2: You can also add items to the list with `{add}` and remove items with `{remove}`.
    example_code_2: "## Example Hedy Code\n\n```\nanimals {is} dog, cat, kangaroo\n{add} penguin {to_list} animals\n{remove} cat {from} animals\n{print} animals {at} {random}\n```\n"
4:
    start_code: "print 'oant moarn'"
    intro_text: |
        Yn level 4 binne `ask` en `print` feroare.

        Tekst dytst letterlik printe wolst, moatst no tusken oanhellingstekens sette.

        Dat is wol sa handich, want no kinst alle wurden printe dytst mar wolst. Ek de wurden dytst brûkt hast om eat mei te ûnthalden mei `is`.

        De measte programmeartalen brûke ek oanhellingstekens by it printen, dat sa komme we al in stap tichterby echt programmearje!

        ## Opjeften wurde dreger
        De kommando's stean wer links, en de opjeften in de oare tabkes. De opjeften wurde stadichoan dreger. Begjin dus links mei it ferhaal, en wurkje sa troch om mear en mear útdage te wurden.

    commands:
    -   name: "print"
        explanation: "Eat letterlik printe mei `print`."
        example: "Foarbyld: print 'Hoi wolkom by Hedy.'"
        demo_code: "print 'Hoi wolkom by Hedy'"
    -   name: "is"
        explanation: "In stikje tekst in namme jaan mei `is` en printe sûnder oanhellingstekens"
        example: "Foarbyld: namme is Hedy."
        demo_code: |-
            namme is Hedy
            print 'ik bin ' namme
    -   name: "ask"
        explanation: "Eat freegje mei `ask`"
        example: "Foarbyld: kleur is ask Wat is dyn favorite kleur?"
        demo_code: |-
            kleur is ask 'Wat is dyn favorite kleur?'
            print 'Dyn favorite is dus ' kleur
    example_code: "## Example Hedy code\n```\nprint 'You need to use quotation marks from now on!'\nanswer is ask 'What do we need to use from now on?'\nprint 'We need to use ' answer\n```\n"
    intro_text_2: "## Adventures are getting more and more difficult\nThe adventures are now getting more and more difficult in the successive tabs.\nSo it is best to start on the left with the story, and work to the right, in order to be challenged more and more.\n"
5:
    start_code: |-
        namme is ask 'Wat is dyn namme?'
        if namme is Hedy print 'leuk' else print 'minder leuk!'
    intro_text: |
        `ask` en `print` wurkje noch lykas yn level 4.

        Yn level 5 is der wat nijs, de `if`! If is Ingelsk foar 'as'. Mei de `if` kinst in kar (keus) meitsje tusken twa ferskillende opsjes.

        ## Foarbyld Hedy koade
        ```
        namme is ask 'Wat is dyn namme?'
        if namme is Hedy print 'leuk' else print 'minder leuk!'
        ```

        Dizze koade print 'leuk' ast Hedy als namme ynfolst, en 'minder leuk' ast wat oars ynfolst.

        ## Tip
        Koade mei in `if` kin tige lang wurde en dan past it net mear goed yn it tekstfakje. Brûk yn dat gefal in 'enter' om de koade oer twa rigels te ferdielen. Begjin dan de twadde rigel mei in `else`:
        ```
        namme is ask 'Wat is dyn namme?'
        if namme is Hedy print 'leuk'
        else print 'minder leuk!'
        ```

        ## Opjeften wurde dreger

        Ek yn level 5 wurde de opjeften yn de tabkes stadichoan wat dreger. Doch se dus fan links nei rjochts.

    commands:
    -   name: "print"
        explanation: "Eat letterlik printe mei `print`."
        example: "Foarbyld: print 'Hoi wolkom by Hedy.'"
        demo_code: "print 'Hoi wolkom by Hedy.'"
    -   name: "ask"
        explanation: "Eat freegje mei `ask`."
        example: "Foarbyld: kleur is ask 'Wat is dyn favorite kleur?'"
        demo_code: |-
            kleur is ask 'Wat is dyn favorite kleur?'
            print 'Dyn favorite is dus ' kleur
    -   name: "if"
        explanation: "In kar meitsje mei `if`"
        example: "Foarbyld: if kleur is grien print 'kreas!' else print 'minder kreas'"
        demo_code: |-
            kleur is ask 'Wat is dyn favorite kleur?'
            if kleur is grien print 'kreas!' else print 'minder kreas'
    -   name: "if mei teken-skyldpod"
        explanation: "In kar meitsje mei `if`"
        example: "Foarbyld: if antwurd is fier forward 100 else forward 5"
        demo_code: |-
            antwurd is ask 'Hoe fier moat ik rinne?'
            if antwurd is fier forward 100 else forward 5
    -   name: '{in}'
        explanation: Check elements with `{in}`
        example: "Example: {if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
        demo_code: "pretty_colors {is} green, yellow\ncolor {is} {ask} 'What {is} your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
    example_code: "## Example Hedy Code\n```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'\n```\n"
    intro_text_3: "## Lists\nWhen we want to check if something is in a list, we can now use the `{in}` command.\nThis code prints pretty! if you choose green or yellow, and meh otherwise.\n"
    example_code_3: "```\npretty_colors {is} green, yellow\ncolor {is} {ask} 'What is your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!'\n{else} {print} 'meh'\n```\n"
    intro_text_2: "Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:\n"
    example_code_2: "```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice'\n{else} {print} 'boo!'\n```\n"
6:
    start_code: "print '5 kear 5 is ' 5 * 5"
    intro_text: |
        `ask`, `print` en `if` wurkje noch lykas yn level 5.
        Mar yn Level 5 is der wat nijs, kinst no ek rekkenje.

        De plus is maklik, dy skriuwst as by rekkenjen: `5 + 5` bygelyks. De min giet krekt sa, dat is `5 - 5`.

        De kear is wat anders, want dy sit net op dyn toetseboerd. Sykje mar ris, dy is der echt net!
        Dêrom dogge we de kear mei it stjêrke boppe de 8: `5 * 5`. Lês dat mar as "5 kear 5", dan ûnthâldst it it maklikst.
        ## Foarbyld Hedy koade
        ```
        print '5 plus 5 is ' 5 + 5
        print '5 min 5 is ' 5 - 5
        print '5 kear 5 is ' 5 * 5
        ```
    commands:
    -   name: "print"
        explanation: "Eat letterlik printe mei `print`."
        example: "Foarbyld: print '5 keer 5 is ' 5 * 5"
        demo_code: "print '5 keer 5 is ' 5 * 5"
    -   name: "`ask` en `if` - rekkenje"
        explanation: "It antwurd fan in som freegje mei `ask` en sjen of't it goed is."
        example: "Foarbyld: antwurd = ask 'Hoefolle is 10 plus 10?'"
        demo_code: |-
            antwurd = ask 'Hoefolle is 10 plus 10?'
            if antwurd is 20 print 'Bêst genôch!' else print 'Flaterke'
    -   name: "`ask` en `if` turtle"
        explanation: "De brûker freegje hoefolle hoeken hy wol"
        example: "Foarbyld: hoeken = ask 'hoefolle hoeken kriget dit figuur?'"
        demo_code: |-
            hoeken = ask 'Hoefolle hoeken kriget dit figuur?'
            hoek = 360 / hoeken
            forward 50
    example_code: "## Example Hedy code\n```\n{print} '5 plus 5 is ' 5 + 5\n{print} '5 minus 5 is ' 5 - 5\n{print} '5 {times} 5 is ' 5 * 5\n```\n"
    intro_text_2: "We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:\n"
    example_code_2: "```\nname = Hedy\nanswer = 20 + 4\n```\n"
7:
    start_code: "repeat 3 times print 'Hedy is leuk!'"
    intro_text: |
        `ask`, `print` en `if` wurkje noch lykas yn level 5 en 6.
        Mar yn Level 7 is er eat nijs: de `repeat`.
        Met `repeat` kinst koade in tal kear werhelje.

        ## Foarbyld Hedy koade
        ```
        repeat 3 times print 'Hedy is leuk!'
        ```
    commands:
    -   name: "print"
        explanation: "Eat letterlik printe mei `print`."
        example: "Foarbyld: print 'Hoi wolkom by Hedy.'"
        demo_code: "print 'Hoi wolkom by Hedy'"
    -   name: "ask"
        explanation: "Eat freegje mei `ask`."
        example: "Foarbyld: kleur = ask 'Wat is dyn favorite kleur?'"
        demo_code: |-
            kleur = ask 'Wat is dyn favorite kleur?'
            print 'Dyn favorite is dus ' kleur
    -   name: "if"
        explanation: "In kar meitsje mei `if`"
        example: "Foarbyld: if kleur is grien print 'kreas!' else print 'minder kreas'"
        demo_code: |-
            kleur = ask 'Wat is dyn favorite kleur?'
            if kleur is grien print 'kreas!' else print 'minder kreas'
    -   name: "repeat"
        explanation: "Eat herhelje met `repeat`."
        example: "Foarbyld: repeat 3 times print 'Hedy is leuk!'"
        demo_code: |-
            repeat 3 times print 'Hedy is leuk!'
    example_code: "## Example Hedy code\n```\n{repeat} 3 {times} {print} 'Hedy {is} fun!'\n```\n"
8:
    start_code: |-
        repeat 5 times
            print 'Goeie allegearre'
            print 'Dit wurdt allegearre 5 kear werhelle'
    intro_text: |
        `ask` en `print` wurkje noch as east, mar `if` en `repeat` binne no oars!
        Kinst no meardere rigels tegearre werhelje. Dan moatst de rigel dytst werhelje wolst wol ynspringe,
        dat wol sizze dat se mei fjouwer spaasjes begjinne moatte.
        Ek atst mar ien rigel werhelje wolst, moatst ynspringe!

        ## Foarbyld Hedy koade
        ```
        repeat 5 times
            print 'Goeie allegearre'
            print 'Dit wurdt allegearre 5 keer werhelle'
        ```

    commands:
    -   name: "print"
        explanation: "Eat letterlik printe mei `print`."
        example: "Foarbyld: print '5 keer 5 is ' 5 * 5"
        demo_code: "print '5 keer 5 is ' 5 * 5"
    -   name: "`if` mei mear rigels"
        explanation: "It antwurd fan in som freegje mei `ask` en sjen oft it goed is. No printe wy twa rigels!"
        example: "Foarbyld: antwurd = ask 'Hoefolle is 10 plus 10?'"
        demo_code: |-
            antwurd = ask 'Hoefolle is 10 plus 10?'
            if antwurd is 20
                print 'Kreas!'
                print 'It antwurd wie yndie ' antwurd
            else
                print 'Flaterke'
                print 'It antwurd moast 20 wêze'
    -   name: "`repeat` mei de teken-skyldpod"
        explanation: "Mear rigels tegearre werhelje"
        example: "Foarbyld: in fjouwerkant meitsje"
        demo_code: |-
            repeat 4 times
                turn 90
                forward 50
    example_code: "## Example Hedy code\n```\n{repeat} 5 {times}\n    {print} 'Hello everyone'\n    {print} 'This is all repeated 5 times'\n```\n"
9:
    start_code: |-
        repeat 3 times
            food = ask 'What do you want?'
            if food is 'pizza'
                print 'nice!'
            else
                print 'pizza is better'
    intro_text: |
        In this level you can not only use multiple lines with `if` and `repeat`, but you can also put them together!
        In the example you see an `if` command within a `repeat` command. It is also allowed the other way around, and an `if` is also allowed in an `if` and a `repeat` in a `repeat`.
        Give it a try!

        ## Example Hedy code
        ```
        repeat 3 times
            food = ask 'What do you want?'
            if food is 'pizza'
                print 'nice!'
            else
                print 'pizza is better'
        ```

    commands:
    -   name: "`if` with multiple lines"
        explanation: "The answer of a sum of questions with 'ask' and see if it is correct. Now we print out two lines."
        example: "Example: answer = ask 'What is 20 plus 20?'"
        demo_code: |-
            answer = ask 'What is 20 plus 20?'
            if answer is 20
                print 'Well done!!'
                print 'The answer is indeed' answer
            else
                print 'Wrong'
                print 'The answer is 20'
    -   name: "`repeat` and turtle"
        explanation: "Repeat multiple lines"
        example: "Example: create a square"
        demo_code: |-
            repeat 4 times
                turn 90
                forward 50
    example_code: "## Example Hedy code\n```\n{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    else\n        {print} 'pizza is better'\n```\n"
10:
    start_code: |-
        dieren is hond, kat, papegaai
        for dier in dieren
          print dier ' is een leuk dier!'
    intro_text: |
        In dit level leren we een nieuwe code, de code `for`. Met `for` kun je alle dingen in een lijstje gebruiken.
        `for` mag meerdere regels gebruiken, net zoals de `repeat` and `if`, dus alle regels eronder moeten met spaties beginnen.

        ## Voorbeeld Hedy code
        ```
        dieren is hond, kat, papegaai
        for dier in dieren
          print dier ' is een leuk dier!'
        ```
    commands:
    -   name: "print"
        explanation: "Iets letterlijk printen met `print`."
        example: "Bijvoorbeeld: print '5 keer 5 is ' 5 * 5"
        demo_code: "print '5 keer 5 is ' 5 * 5"
    -   name: "for met een lijst"
        explanation: "Alle dingen in een lijstje printen "
        example: "Bijvoorbeeld: for dier in dieren"
        demo_code: |-
            dieren is hond, kat, papegaai
            for dier in dieren
              print dier
    example_code: "## Example Hedy code\n```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal\n```\n"
11:
    start_code: |-
        for i in range 1 to 10
            print i
        print 'Wie niet weg is is gezien'
    intro_text: |-
        Wy feroarje no `repeat` yn `for`! No typst `for i in range 1 to 5`, ynstee fan `repeat 5 times`. 
        It leuke is datst dy fariabele `i` ek yn dyn programma brûke kinst!
        Tink derom datst noch hieltiid alle rigels dy't werhelle wurde moatte, ynspringst mei 4 spaasjes.
    commands:
    -   name: "repeat ferfange troch for"
        explanation: "`repeat` ferfange"
        example: "for i in range 1 to 10"
        demo_code: |
            for i in range 1 to 10
                print i
            print 'Wie niet weg is is gezien'
    -   name: '{ask}'
        explanation: ask for the answer to a sum and check if it is correct. We can now print 2 lines.
        example: "Example: answer = {ask} 'What is 5 plus 5?'"
        demo_code: "answer = {ask} 'What is 5 plus 5?'\n{if} answer {is} 10\n    {print} 'Well done!'\n    {print} 'Indeed, the answer was ' answer\nelse\n    {print} 'Oops!'\n    {print} 'The answer is 10'"
    example_code: "## Example Hedy code\n```\nfor counter in range 1 to 5\n    print counter\n```\n"
12:
    start_code: |-
        print 'decimal numbers now need to use a dot'
        print 2.5 + 2.5
    intro_text: |
        So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that cmputers use the . for decimal numbers.

        For this level on you will also have to use quotation marks when storing a text with `is`:

        ```
        name = 'Hedy'
        print 'Hello ' name
        ```

        For numbers, you do not use quotation marks in the `is`:
        ```
        score = 25
        print 'You got ' score
        ```
# Marleen, deze tekst hierboven en commands hieronder moet voor Engels nog uitgebreid worden (zoals bij Nederlands)
    # jaja hermans, ik ben al bezig!
    commands:
    -   name: "float directly"
        explanation: "Calculation with decimals"
        example: "print 2.5 + 2.5"
        demo_code: |
            print 'Calculate away!'
            print 'Two and a half plus two and a half is...'
            print 2.5 + 2.5
    -   name: "float in var"
        explanation: "Storing a calculation with decimals"
        example: "antwoord = 2.5 + 2.5"
        demo_code: |
            answer = 2.5 + 2.5
            print 'Calculate away!'
            print 'Two and a half plus two and a half is...'
            print answer

    -   name: quotes after {if} comparison
        example: name = 'Hedy'
        explanation: Text with quotation marks after {if}
        demo_code: "name = {ask} 'Who are you?'\n{if} name = 'Hedy'\n    {print} 'Hi there!'\n"
    -   example: name = 'Hedy', 'Felienne'
        name: quotes in list
        explanation: A list with quotation marks
        demo_code: "superheroes = 'Iron Man', 'Batman', 'Superman'\n{print} superheroes {at} {random}\n"
    intro_text_5: "**Numbers don't need quotation marks**\nFor numbers, you do not use quotation marks in the `=`:\n"
    example_code: "## Example Hedy code\n```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n"
    intro_text_2: "**All texts need to be in quotation marks**\nFor this level on you will also have to use quotation marks when storing a text with `=`:\n"
    example_code_2: "```\nname = 'Hedy the Robot'\n{print} 'Hello ' name\n```\n"
    intro_text_3: "**All items in lists need quotation marks too**\nLists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.\nThis allows you to save two words as 1 item on the list, for example 'Iron Man'.\n"
    example_code_3: "```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n"
    intro_text_4: "**All text after `{if}` comparisons need quotation marks too**\n"
    example_code_4: "```\nname = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n"
    example_code_5: "```\nscore = 25\n{print} 'You got ' score\n```\n"
    intro_text_6: "**Maths with words** In this level it is also allowed to use the + sign with texts. For example:\n"
    example_code_6: "```\na = 'Hello '\nb = 'world!'\nprint a + b\n```\n"
13:
    start_code: |-
        name = ask 'what is your name?'
        age = ask 'what is your age?'
        if name is 'Hedy' and age is 2
            print 'You are the real Hedy!'
    intro_text: "We sille no `and` en `or` brûke. Ast 2 dingen kontroleare wolst, hoechst net mear 2 `if`-kes yninoar te dwaan, mar kinst no `and` brûke. Beide dingen yn 'e if moeten waar zijn als je een `and` gebruikt. We kunnen ek `or` brûke. Daarbij moet er 1 fan de twa waar zijn."
    commands:
    -   name: "And"
        explanation: "`And` is dus en. Beide dingen links en rechts fan de `and` moeten waar zijn."
        example: "if 3+2 is 5 and 2+2 is 4"
        demo_code: |-
            antwurd1 = ask 'Hoefolle is 3+2?'
            antwurd2 = ask 'Hoefolle is 2+2?'
            if antwurd1 is 5 and antwurd2 is 4
                print 'Beide antwurden binne goed!'
            else
                print 'Minimaal 1 antwurd is fout!'
    -   name: "Or"
        explanation: "`Or` is dus of. Minimaal 1 fan de 2 tusken de `or` moat goed wêze. beide goed mei ek."
        example: "if 3+2 is 5 or 2+2 is 4"
        demo_code: |-
            antwurd1 = ask 'Hoefolle is 3+2?'
            antwurd2 = ask 'Hoefolle is 2+2?'
            if antwurd1 is 5 or antwurd2 is 4
                print 'Je hebt minimaal 1 antwurd goed!'
            else
                print 'Beide antwurden binne fout!'
#16:
#    start_code: |-
#        # Dit is een programma dat in tal sommen freegjen giet
#
#        for i in range(1, 10):
#            # We sille de tafel fan 5 freegje
#            antwurd is input('Hoefolle is ' i ' kear 5?')
#            # We sjogge oft de som lyk is oan it antwurd
#            goed_antwurd is i * 5
#            if antwurd is goed_antwurd:
#                print(antwurd ' is goed')
#            else:
#                print('Dat is fout, it moat: ' i*5 ' wêze')
#    intro_text: |-
#        Ast gruttere programma's makkest, silst byhâlde moatte wat elts stikje koade docht. Hjir brûke wy 'comments' foar.
#        In comment sjocht der sa út:
#        `# dit is in comment`.
#        Alles wat op de rigel nei de # skreaun wurdt, brûkt Hedy net yn it programma.
#    commands:
#    -   name: "Comment"
#        explanation: "We kinne oeral wêr't wy wolle comments delsette."
#        example: "# Dit is in comment"
#        demo_code: |-
#            # Dit programma print goeie
#            # It is gemaakt in Hedy
#            # It docht eins neat fierder!
#            print('goeie')
#20:
#    start_code: |-
#        fruit = ['apel', 'banaan', 'kjers']
#        for i in range(1, 3):
#            print(fruit[i])
#    intro_text: "We kinne ek alles fan de list sjen litte. Omt er trije dingen yn sitte, pakke we de `for`-lus fan 1 oant 3. No printe we alles út wat yn de list sit."
#    commands:
#    -   name: "Lingte fan in list"
#        explanation: "Mei `length` kinst sjen hoe grut in list is. Hjir is `length` bygelyks 3 want we ha 3 dingen yn de list"
#        example: "length(fruit)"
#        demo_code: |-
#            fruit = ['apel', 'banaan', 'kjers']
#            print('lingte fan de list is ' length(fruit))
#            for i in range(1, length(fruit)):
#                print(fruit[i])
#21:
#    start_code: |-
#        print('Hoefolle is 5+3?')
#        antwurd = 5+3
#        print('antwurd is nu:')
#        print(antwurd)
#        if antwurd == 8:
#            print('Dat is goed!')
#        else:
#            print('Spitich, dat is fout!')
#    intro_text: "No feroarje wy is yn `=` en `==`. Brûkst `=` ast eat in getal meitsje wolst. Ast bygelyks antwurd 8 meitsje wolst, seist `antwurd = 8`. `==` brûkst om te sjen of twa dingen itselde binne."
#    commands:
#    -   name: "Fergelykje"
#        explanation: "As we fergelykje wolle, brûke we dus `==`. `5+3 == 8` sjoch of 5+3 gelyk is oan 8"
#        example: "Foarbyld: 5+3 == 8"
#        demo_code: |-
#            if 5+3 == 8:
#                print('5+3 is yndie 8')
#            else:
#                print('Dit wurdt net printe, want 5+3 is 8!')
#    -   name: "Wearde jaan"
#        explanation: "As wy sizze wolle dat in fariabele mei de namme `antwurd` 8 is, dan dogge wy `antwurd = 8`."
#        example: "Foarbyld: antwurd = 8"
#        demo_code: |-
#            print('Hoefolle is 5+3?')
#            antwurd = 5+3
#            print('antwurd is no:')
#            print(antwurd)
#    -   name: "Fergelykje en wearde jaan"
#        explanation: "As we fergelykje wolle, brûke we dus `==`. As we in wearde jouwe dan brûke we `=`."
#        example: "Foarbyld: antwurd == 8, antwurd = 8"
#        demo_code: |-
#            print('Hoefolle is 5+3?')
#            antwurd = 5+3
#            print('antwurd is no:')
#            print(antwurd)
#            if antwurd == 8:
#                print('Dat is goed!')
#            else:
#                print('Spitich leave, dat is fout!')
    example_code: "```\nname = ask 'what is your name?'\nage = ask 'what is your age?'\nif name is 'Hedy' and age is 2\n    print 'You are the real Hedy!'\n```\n"
14:
    start_code: |-
        leeftyd = ask 'Hoe âld bisto?'
        if leeftyd < 13
            print 'Dan bist jonger as ik!'
        else
            print 'Dan bist âlder as ik!'
    intro_text: |-
        We sille nije tekens leare, do kinst se miskien al fan rekkenjen as wiskunde: `<` en `>`. De `<` sjocht oft it earste getal
        lytser is as it twadde lykas `4 < 5`. De `>` sjocht oft eat grutter is as it twadde getal, lykas `6 > 5`.
    commands:
    -   name: "Lytser"
        explanation: "De `<` sjocht dus oft it earste getal lytser is as it twadde getal. Ast witte wolst of in fariabele lytser is as 15, dan brûkst dus `fariabele < 15`"
        example: "Foarbyld: leeftyd < 12"
        demo_code: |-
            leeftyd = ask 'Hoe âld bisto?'
            if leeftyd < 13
                print 'Dan bist jonger as ik!'
    -   name: "Grutter"
        explanation: "De `>` sjocht dus oft it earste getal grutter is as it twadde getal. Ast witte wolst of in fariabele lytser is as 15, dan brûkst dus `fariabele < 15`"
        example: "Foarbyld: leeftyd > 12"
        demo_code: |-
            leeftyd = ask 'Hoe âld bisto?'
            if leeftyd < 13
                print 'Dan bist âlder as ik!'
    -   name: Equal
        explanation: We use the `==` to check if two things are the same.
        example: 'For example: answer == 25'
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer == 25\n    {print} 'That {is} correct!'"
    -   name: Not equal
        explanation: 'We use the `!=` to check if two things are not the same. '
        example: 'For example: answer != 25'
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer != 25\n    {print} 'That is not correct!'"
    -   explanation: We use the `<=` to check if the first number is smaller than or equal to the second number.
        example: 'For example: age <= 12'
        demo_code: "age = {ask} 'How old are you?'\n{if} age <= 12\n    {print} 'You are younger than me!'"
        name: Smaller {or} equal
    -   name: Bigger or equal
        explanation: We use the `>=` to check if the first number is bigger than or equal to the second number.
        example: 'For example: age >= 14'
        demo_code: "age = {ask} 'How old are you?'\n{if} age >= 14\n    {print} 'You are older than me!'"
    example_code: "## Example Hedy Code\n```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n"
    intro_text_2: "From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:\n"
    example_code_2: "```\nname = {ask} 'What is your name?'\n{if} name == 'Hedy'\n    {print} 'You are coo!'\n```\n"
    intro_text_3: "You can also compare if something is *not* equal to something else using `!=` like this:\n"
    example_code_3: "```\nname = {ask} 'What is your name?'\n{if} name != 'Hedy'\n    {print} 'You are not Hedy'\n```\n"
15:
    start_code: |-
        antwoord = 0
        while antwoord != 25
            antwurd = ask 'Wat is 5 kear 5?'
        print 'Dat wie it goede antwurd!'
    intro_text: "No sille wy in nije lus leare: De `while`-lus. We gean troch sa lang de koade dy't yn'e lus stiet `True` is. Dus bij de foarbyldkoade gean wy troch oant der in goed antwurd jûn is. As der nea in goed antwurd jûn wurdt, dan stoppet de lus nea!"
    commands:
    -   name: "while"
        explanation: "We kinne dus in `while`-lus brûke mei de `True` en `False`"
        example: "Foarbyld: while goed_antwurd is False"
        demo_code: |-
            antwoord = 0
            while antwoord != 25
                antwurd = ask 'Wat is 5 kear 5?'
            print 'Dat wie it goede antwurd!'
    -   name: "Smaller while"
        explanation: "We kinne in `while`-lus ek brûke mei `<` en `>`. Tink der om datst it getal wol grutter makkest. Oars komst de lus net út."
        example: "Foarbyld: while tel < 3"
        demo_code: |-
            tel = 1
            while tel < 3
                print 'Dit is de ' tel 'e kear'
                tel = tel + 1
            print 'We zijn klaar'

    example_code: "## Example Hedy code\n```\nanswer = 0\nwhile answer != 25\n    answer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n```\n"
16:
    start_code: |-
        fruit = ['apel', 'banaan', 'kjers']
        print fruit 
    intro_text: "No sette wy fjouwerkante heakjes om listen. We moatte no ek inkele oanhellingstekens (') om dingen in listen sette."
    commands:
    -   name: "Heakjes om listen"
        explanation: "We sette no heakjes om listen. Tink ek om de inkelde oanhellingstekens om dingen yn 'e liste!"
        example: "Foarbyld: fruit = ['apel', 'banaan', 'kjers']"
        demo_code: |-
            fruit = ['apel', 'banaan', 'kjers']
            print fruit 
    -   name: "Pak eat út in list"
        explanation: "Om in ding út in list te krijen, brûke we `[nûmer]`. Dus mei fruit[1] krigest it earste fruit út 'e list!"
        example: "Foarbyld: earstefruit = fruit[1]"
        demo_code: |-
            fruit = ['apel', 'banaan', 'kjers']
            earstefruit = fruit[1]
            print earstefruit 
    -   name: "Nim in willekeurich ding út 'e list"
        explanation: "Om in willekeurich ding út 'e list te nimmen, brûke we [random]. Dus fruit[random] pakt in willekeurich fruit út 'e list!"
        example: "Foarbyld: random_fruit is fruit[random]"
        demo_code: |-
            fruit = ['apel', 'banaan', 'kjers']
            random_fruit = fruit[random]
            print random_fruit
    example_code: "## Example Hedy Code\n```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
17:
    start_code: |-
        for i in range 1 to 10:
            print i
        print 'Wie niet weg is is gezien'
    intro_text: |-
        No feroarje wy noch in lyts stikje dat te dwaan hat mei it ynspringjen.
        Eltse kear dat wy ynspringe moatte wy in ':' der efter sette.
    commands:
    -   name: "for met :"
        explanation: "By `for` moatst no in `:` efteroan sette!"
        example: "for i in range 1 to 10:"
        demo_code: |-
            for i in range 1 to 10:
                print i
            print 'Wie niet weg is is gezien'
    -   name: "if met :"
        explanation: "We moatte itselde dwaan mei al ús `if`"
        example: "if kleur is grien:"
        demo_code: |-
            kleur = ask 'Wat is dyn favorite kleur?'
            if kleur is 'grien':
                print 'De kleur is grien'
            else:
                print 'De kleur is net grien'
    -   name: "(Optioneel) elif"
        explanation: |-
            Meist ek in nij kommando brûke: `elif`.
            `elif` is eins 'else if'. Sjochst dus earst nei `if` en as dy net wier is, dan besikest `elif`,
            en als dy net wier is dan giest nei de `else`.
        example: "elif a is 5:"
        demo_code: |-
            a = 2
            if a is 1:
                print 'a is 1'
            elif a is 2:
                print 'a is 2'
            else:
                print 'a is net 1 of 2'
18:
    commands:
    -   name: '{print}'
        explanation: With `{print}` you need to use parentheses
        example: '{print}'
        demo_code: "{print}('hi!')"
    -   example: '{print}'
        demo_code: "naam = 'Hedy'\n{print}('my name is ', naam)"
        name: '{print} with var'
        explanation: With `{print}` you need to use parentheses and commas if you {print} more items
    start_code: "naam = 'Hedy'\n{print}('My name is ', naam)"
    intro_text: "We arrived at real pythoncode! That means we need to use parentheses with {print} and {range} from now on.\nThat looks like this:\n```\n{print}('my name is Hedy!')\n```\nIf you want to print more thant one items, you need to separate them by commas.\n```\nnaam = 'Hedy'\n{print}('my name is ', naam)\n```"
