1:
    story_text: |
        Bienvenue à Hedy! Au niveau 1, tu peux utiliser les commandes `{print}`,` {ask}` et `{echo}`.

        Sur le côté gauche de votre écran se trouvent toutes les commandes du niveau 1.

        Appuyez sur le bouton bleu et le code sera tapé pour toi!

        Essayez le code toi-même avec le bouton vert «Exécuter le code» sous le champ de programmation de gauche.

        Vous ne savez pas quoi programmer? Dans les onglets suivants, vous trouverez des idées sur les éléments à construire.
    start_code: "{print} bonjour le monde!"
    example_code: "## Exemple de code\n```\n{print} Bonjour !\n{print} Bienvenue sur Hedy !\n```\n"
    story_text_2: "You can also ask for input and repeat it back with an `{echo}` command.\nTry the code to your left again.\n\nDon't know what to create? In the next tabs you will find ideas for programs to build.\n"
    example_code_2: "## Example code\n```\n{ask} What is your name?\n{echo} hello\n```\n"
    story_text_3: "Let's get started! Don't know what to create? In the next tabs you will find ideas for programs to build.\n"
2:
    story_text: |
        Au niveau 2, nous apprenons quelque chose de nouveau. Vous pouvez nommer un mot avec `{is}`.

        Si vous mettez le code `name {is} Hedy` en haut de votre programme, vous pouvez alors utiliser name partout. Cela sera alors remplacé par Hedy.

        Le `{ask}` a changé au niveau 2, vous enregistrez également la réponse avec un nom:

        ```
        reponse {is} {ask} quel est votre nom?
        ```

        L'impression fonctionne toujours comme au niveau 1 et vous n'avez plus besoin d'une échographie.
    start_code: "{print} bonjour le monde!"
    story_text_2: "`{print}` still works the same, but the `{ask}` command has changed. You need to use a variable in the `{ask}` command as well. It looks like this:\n"
    example_code: "## Example code\n```\nname {is} Hedy\nage {is} 15\n{print} name is age years old\n```\n"
    example_code_2: "```\nanswer {is} {ask} What is your name?\n{print} Hello answer\n```\n"
    story_text_3: "Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.\n"
    example_code_3: "```\n{print} My favorite colour is...\n{sleep} 2\n{print} green!\n```\n"
3:
    story_text: |
        Au niveau 3, vous pouvez également faire une liste. Vous pouvez ensuite choisir n'importe quoi dans la liste. Vous faites cela avec `{at} {random}` (vous dites: et ren-dom).

        ```
        animaux {is} chien, chat, kangourou
        {print} animaux {at} {random}
        ```

        Vous trouverez tous les codes du niveau 3 dans la barre de gauche. Il existe également des onglets avec des affectations.
    start_code: "{print} bonjour le monde!"
    example_code: "## Example Hedy Code\n\n```\nanimals {is} dog, cat, kangaroo\n{print} animals {at} {random}\n```\n"
    story_text_2: You can also add items to the list with `{add}` and remove items with `{remove}`.
    example_code_2: "## Example Hedy Code\n\n```\nanimals {is} dog, cat, kangaroo\n{add} penguin {to_list} animals\n{remove} cat {from} animals\n{print} animals {at} {random}\n```\n"
4:
    start_code: "{print} 'Bonjour le monde'"
    story_text: |4

        `Print` et `impreso` changent au niveau 5.

        Vous devez placer le texte que vous souhaitez imprimer entre guillemets.

        Ceci est utile, car vous pouvez désormais imprimer tous les mots souhaités. Aussi les mots que vous avez utilisés pour stocker quelque chose avec `{is}`.

        La plupart des langages de programmation utilisent également des guillemets lors de l'impression, nous nous rapprochons donc également de la programmation réelle!

        ## Les affectations deviennent de plus en plus difficiles
        Vous retrouverez les commandes sur la gauche et les affectations dans les onglets suivants. Les affectations deviennent de plus en plus difficiles dans les onglets successifs.
        Il est donc préférable de commencer à gauche avec l'histoire, et de travailler à droite pour être de plus en plus contestée.
    story_text_2: "## Adventures are getting more and more difficult\nThe adventures are now getting more and more difficult in the successive tabs.\nSo it is best to start on the left with the story, and work to the right, in order to be challenged more and more.\n"
    example_code: "## Example Hedy code\n```\nprint 'You need to use quotation marks from now on!'\nanswer is ask 'What do we need to use from now on?'\nprint 'We need to use ' answer\n```\n"
5:
    start_code: |-
        nom {is} {ask} 'quel est ton nom?'
        {if} nom {is} Hedy {print} 'cool!' {else} {print} 'mouais'
    story_text: |
        `{ask}` et` {print}` fonctionnent toujours comme au niveau 4.

         Au niveau 5, il y a quelque chose de nouveau, le `{if}`! If est l'anglais pour se. Avec le `{if}`, vous pouvez choisir entre deux options différentes.

         ## Exemple de code Hedy
         ```
         nom {is} {ask} 'quel est votre nom?'
         {if} nom {is} Hedy {print} 'cool!' {else} {print} 'moins amusant!'
         ```

         Ce code s'imprime cool! si vous entrez Hedy comme nom, et moins amusant! si vous entrez autre chose.

         ## Les affectations deviennent de plus en plus difficiles

         Toujours au niveau 5, les affectations dans les onglets deviennent de plus en plus difficiles. Alors faites-les de gauche à droite.
    example_code: "## Example Hedy Code\n```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'\n```\n"
    story_text_3: "## Lists\nWhen we want to check if something is in a list, we can now use the `{in}` command.\nThis code prints pretty! if you choose green or yellow, and meh otherwise.\n"
    example_code_3: "```\npretty_colors {is} green, yellow\ncolor {is} {ask} 'What is your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!'\n{else} {print} 'meh'\n```\n"
    story_text_2: "Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:\n"
    example_code_2: "```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice'\n{else} {print} 'boo!'\n```\n"
6:
    start_code: "{print} '5 fois 5 font ' 5 * 5"
    story_text: |
        `{ask}`,` {print}` et `{if}` fonctionnent toujours comme dans les niveaux 5.
         Mais au niveau 6, il y a quelque chose de nouveau, vous pouvez maintenant aussi calculer.

         Le plus est simple, vous l'écrivez comme avec les maths: `5 + 5` par exemple. Le moins fonctionne également très bien, qui est `5 - 5`.

         Le fois sont un peu différentes, car il n'y a pas de fois sur votre clavier. Cherchez, il n'y en a vraiment pas!
         C'est pourquoi nous faisons les temps avec l'astérisque au-dessus de 8: `5 * 5`. Lisez cela comme "5 fois 5", alors vous vous en souviendrez le plus facile.
         ## Exemple de code Hedy
         ```
         {print} '5 plus 5 est ' 5 + 5
         {print} '5 moins 5 est ' 5 - 5
         {print} '5 fois 5 est ' 5 * 5
         ```
    example_code: "## Example Hedy code\n```\n{print} '5 plus 5 is ' 5 + 5\n{print} '5 minus 5 is ' 5 - 5\n{print} '5 {times} 5 is ' 5 * 5\n```\n"
    story_text_2: "We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:\n"
    example_code_2: "```\nname = Hedy\nanswer = 20 + 4\n```\n"
7:
    start_code: "{repeat} 3 {times} {print} 'Hedy est amusant!'"
    story_text: |
        `{ask}`, `{print}` et `{if}` fonctionnent exactement comme au niveau 4 et 5.
        Le niveau 5 ajoute la commande `{repeat}`.
        `{repeat}` te permet d’exécuter une ligne de commande plusieurs fois.
        ## Exemple de code Hedy
        ```
        {repeat} 3 {times} {print} 'Hedy est amusant!'
        ```
    example_code: "## Example Hedy code\n```\n{repeat} 3 {times} {print} 'Hedy {is} fun!'\n```\n"
8:
    start_code: |-
        {repeat} 5 {times}
            {print} 'Bonjour les amis'
            {print} 'Ceci sera affiché 5 fois'
    story_text: |
        `{ask}` et `{print}` fonctionnent comme tu y es habitué. Mais `{if}` et `{repeat}` ont changé!
        Tu peux maintenant exécuter des groupes de commandes ensemble, mais tu dois indenter ces commandes.
        Cela veut dire que tu dois mettre 4 espaces au début des lignes.
        Cela fonctionne aussi si tu veux créer un bloc d’une seule ligne.

        ## Exemple de code Hedy
        ```
        {repeat} 5 {times}
            {print} 'Bonjour les amis'
            {print} 'Ceci sera affiché 5 fois'
        ```
    example_code: "## Example Hedy code\n```\n{repeat} 5 {times}\n    {print} 'Hello everyone'\n    {print} 'This is all repeated 5 times'\n```\n"
9:
    start_code: |-
        {repeat} 3 {times}
            food = {ask} 'What do you want?'
            {if} food {is} pizza
                {print} 'nice!'
            {else}
                {print} 'pizza {is} better'
    story_text: |
        In this level you can not only use multiple lines with `{if}` and `{repeat}`, but you can also put them together!
        In the example you see an `{if}` command within a `{repeat}` command. It is also allowed the other way around, and an `{if}` is also allowed in an `{if}` and a `{repeat}` in a `{repeat}`.
        Give it a try!

        ## Example Hedy code
        ```
        {repeat} 3 {times}
            food = {ask} 'What do you want?'
            {if} food {is} pizza
                {print} 'nice!'
            {else}
                {print} 'pizza is better'
        ```
    example_code: "## Example Hedy code\n```\n{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    else\n        {print} 'pizza is better'\n```\n"
10:
    start_code: |-
        animals {is} dog, cat, blobfish
        {for} animal {in} animals
          {print} 'I love ' animal
    story_text: |
        In this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.
        `{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with spaces.

        ## Example Hedy code
        ```
        animals {is} dog, cat, blobfish
        {for} animal {in} animals
          {print} 'I love ' animal
        ```
    example_code: "## Example Hedy code\n```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal\n```\n"
11:
    start_code: |-
        {for} i {in} {range} 1 {to_list} 11
            {print} i
        {print} ' Cache toi ou je te verrai !'
    story_text: "`{print}` fonctionne encore comme avant, mais `{repeat}` est changé ! Tu tape maintenant `{for} i {in} {range} 1 {to_list} 5`, au lieu de `{repeat} 5 {times}`. La bonne chose est que tu peux également utiliser cette variable i dans ton programme! Tu dois encore toujours mettre en retrait toutes les lignes répétitives (cela signifie qu'elles doivent commencer par quatre espaces)"
    example_code: "## Example Hedy code\n```\nfor counter in range 1 to 5\n    print counter\n```\n"
12:
    start_code: "{print} 'decimal numbers now need to use a dot'\n{print} 2.5 + 2.5"
    story_text: "## Decimal numbers\nSo far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.\n```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n## All texts need to be in quotation marks\nFor this level on you will also have to use quotation marks when storing a text with `=`:\n\n```\nname = 'Hedy the Robot'\n{print} 'Hello ' name\n```\n## All items in lists need quotation marks too\nLists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.\nThis allows you to save two words as 1 item on the list, for example 'Iron Man'.\n\n```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n## All text after `{if}` comparisons need quotation marks too\n```\nname = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n## Numbers don't need quotation marks\n{for} numbers, you do not use quotation marks in the `=`:\n```\nscore = 25\n{print} 'You got ' score\n```\n"
    example_code: "## Example Hedy code\n```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n"
    story_text_2: "**All texts need to be in quotation marks**\nFor this level on you will also have to use quotation marks when storing a text with `=`:\n"
    example_code_2: "```\nname = 'Hedy the Robot'\n{print} 'Hello ' name\n```\n"
    story_text_3: "**All items in lists need quotation marks too**\nLists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.\nThis allows you to save two words as 1 item on the list, for example 'Iron Man'.\n"
    example_code_3: "```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n"
    story_text_4: "**All text after `{if}` comparisons need quotation marks too**\n"
    example_code_4: "```\nname = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n"
    story_text_5: "**Numbers don't need quotation marks**\nFor numbers, you do not use quotation marks in the `=`:\n"
    example_code_5: "```\nscore = 25\n{print} 'You got ' score\n```\n"
    story_text_6: "**Maths with words** In this level it is also allowed to use the + sign with texts. For example:\n"
    example_code_6: "```\na = 'Hello '\nb = 'world!'\nprint a + b\n```\n"
13:
    start_code: "name = {ask} 'what is your name?'\nage = {ask} 'what is your age?'\n{if} name {is} 'Hedy' {and} age {is} 2\n    {print} 'You are the real Hedy!'"
    story_text: We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two if's but can use `{and}` and `{or}`. If you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct.
    example_code: "```\nname = ask 'what is your name?'\nage = ask 'what is your age?'\nif name is 'Hedy' and age is 2\n    print 'You are the real Hedy!'\n```\n"
14:
    start_code: "age = {ask} 'How old are you?'\n{if} age < 13\n    {print} 'You are younger than me!'\nelse\n    {print} 'You are older than me!'"
    story_text: "We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.\nThe `<` checks if the first number is smaller than the second, for example `age < 12` checks if `age` {is} smaller than 12.\nIf you want to check if the first number is smaller or equal to the second, you can use `<=`, for example `age <= 11`.\nThe `>` checks if the first number is bigger than the second, for example `points > 10` checks if `points` is larger than 10.\nIf you want to check if the first number is bigger or equal to the second, you can use `>=`, for example `points >= 11`.\nYou use these comparisons in an `{if}`, like this:\n```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n\nFrom this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:\n```\nname = {ask} 'What is your name?'\n{if} name == 'Hedy'\n    {print} 'You are coo!'\n```\n\nYou can also compare if something is *not* equal to something else using `!=` like this:\n```\nname = {ask} 'What is your name?'\n{if} name != 'Hedy'\n    {print} 'You are not Hedy'\n```\n"
    example_code: "## Example Hedy Code\n```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n"
    story_text_2: "From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:\n"
    example_code_2: "```\nname = {ask} 'What is your name?'\n{if} name == 'Hedy'\n    {print} 'You are coo!'\n```\n"
    story_text_3: "You can also compare if something is *not* equal to something else using `!=` like this:\n"
    example_code_3: "```\nname = {ask} 'What is your name?'\n{if} name != 'Hedy'\n    {print} 'You are not Hedy'\n```\n"
15:
    start_code: "answer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'"
    story_text: "We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.\nSo don't forget to change the value in the loop.\n\nIn the example code, we continue until a correct answer has been given.\nIf the correct answer is never given, the loop never ends!\n"
    example_code: "## Example Hedy code\n```\nanswer = 0\nwhile answer != 25\n    answer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n```\n"
16:
    start_code: "fruit = ['apple', 'banana', 'cherry']\n{print} fruit"
    story_text: "We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.\nYou can use the square brackets as well to point out a place in the lists.\n\n```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
    example_code: "## Example Hedy Code\n```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
17:
    start_code: |-
        {for} i {in} {range} 1 {to_list} 10:
            {print} i
        {print} 'Cache toi ou je te verrai !'
    story_text: "Maintenant on change encore un petit chose concernant l'indentation. Chaque fois que nous indentons, il faut ajouter un `:` à la fin du règle précédente."
18:
    start_code: "naam = 'Hedy'\n{print}('My name is ', naam)"
    story_text: "We arrived at real pythoncode! That means we need to use parentheses with {print} and {range} from now on.\nThat looks like this:\n```\n{print}('my name is Hedy!')\n```\nIf you want to print more thant one items, you need to separate them by commas.\n```\nnaam = 'Hedy'\n{print}('my name is ', naam)\n```"
