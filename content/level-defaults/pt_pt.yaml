1:
    story_text: |
        Bem-vindo(a) à Hedy! No nível 1 podes usar os comandos `print`, `ask` e `echo`.

        Na barra à esquerda podes ver todos os comandos usados no nível 1.

        Pressiona o botão azul e o código será digitado para ti!

        Experimenta o código à vontade, usando o botão verde 'Executa o código', por baixo do painel de programação esquerdo.

        Ainda não sabes o que criar? Nos próximos separadores vais encontrar algumas ideias sobre o que fazer.
    start_code: "print Olá mundo!"
    example_code: "## Example code\n```\n{print} Hello!\n{print} Welcome to Hedy!\n```\n"
    story_text_2: "You can also ask for input and repeat it back with an `{echo}` command.\nTry the code to your left again.\n\nDon't know what to create? In the next tabs you will find ideas for programs to build.\n"
    example_code_2: "## Example code\n```\n{ask} What is your name?\n{echo} hello\n```\n"
    story_text_3: "Let's get started! Don't know what to create? In the next tabs you will find ideas for programs to build.\n"
2:
    story_text: |
        No nível 2 vamos aprender algo novo. Podemos atribuir um nome a uma palavra utilizando `is`.

        Se usares o código `nome is Hedy`, podes colocar nome em qualquer parte do teu código, que será automaticamente substituído por Hedy.

        Nota: `ask` mudou, também podes guardar a resposta com um nome, da seguinte maneira:

        ```
        resposta is ask Como te chamas??
        ```

        `print` funciona tal e qual como no nível 1 e já não precisas de usar `echo`.
    start_code: "print Olá mundo!"
    story_text_2: "`{print}` still works the same, but the `{ask}` command has changed. You need to use a variable in the `{ask}` command as well. It looks like this:\n"
    example_code: "## Example code\n```\nname {is} Hedy\nage {is} 15\n{print} name is age years old\n```\n"
    example_code_2: "```\nanswer {is} {ask} What is your name?\n{print} Hello answer\n```\n"
    story_text_3: "Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.\n"
    example_code_3: "```\n{print} My favorite colour is...\n{sleep} 2\n{print} green!\n```\n"
3:
    story_text: |
        No nível 3 também podes criar uma lista. Podes fazer o computador escolher algo aleatório (ou seja, uma coisa ao calhas) dessa lista. Fazes isso utilizando 'at random'.

        ```
        animais is cão, gato, canguru
        print animais at random
        ```

        Encontras todos os códigos do nível 3 na barra esquerda. Temos também separadores com tarefas.
    start_code: "print Olá mundo!"
    example_code: "## Example Hedy Code\n\n```\nanimals {is} dog, cat, kangaroo\n{print} animals {at} {random}\n```\n"
    story_text_2: You can also add items to the list with `{add}` and remove items with `{remove}`.
    example_code_2: "## Example Hedy Code\n\n```\nanimals {is} dog, cat, kangaroo\n{add} penguin {to_list} animals\n{remove} cat {from} animals\n{print} animals {at} {random}\n```\n"
4:
    start_code: "print 'Olá mundo!'"
    story_text: |
        `ask` funciona no nível 4 tal como funcionava no nível 3, mas `print` está diferente agora.

         Tens de colocar o texto que queres escrever entre aspas simples.

         Isto é útil, porque agora podes escrever todas as palavras que queres. O mesmo se aplica às palavras com que costumavas guardar algo usando `is`.

         A maioria das linguagens de programação também usam aspas simples quando querem escrever, por isso, estamos um passo mais próximos da realidade da programação!

         ## As tarefas estão a ficar cada vez mais difíceis
         Vais encontrar os comandos à esquerda, novamente, e as tarefas nos separadores seguintes. À medida que avanças pelos separadores, as tarefas vão ficando mais difíceis.
         Por isso, é melhor começares pela esquerda na história e ires avançando para a direita, para que o desafio vá aumentando, gradualmente.
    example_code: "## Example Hedy code\n```\nprint 'You need to use quotation marks from now on!'\nanswer is ask 'What do we need to use from now on?'\nprint 'We need to use ' answer\n```\n"
    story_text_2: "## Adventures are getting more and more difficult\nThe adventures are now getting more and more difficult in the successive tabs.\nSo it is best to start on the left with the story, and work to the right, in order to be challenged more and more.\n"
5:
    start_code: |-
        nome is ask Como te chamas?
        if nome is Hedy print 'Fixe!' else print 'pff'
    story_text: |
        `ask` e `print` funcionam como no nível 4.

         No nível 5 temos algo novo, o `if`! Com o `if` podes escolher entre duas opções diferentes.

         ## Exemplo de Código Hedy
         ```
         nome is ask Como te chamas?
         if nome is Hedy print 'Fixe!' else print 'boo!'
         ```

         Este código escreve Fixe! se colocares Hedy como nome e boo! se colocares outra coisa qualquer.

         ## As tarefas estão a ficar cada vez mais difíceis

         Também no nível 5 as tarefas que vais encontrar nos separadores estão a tornar-se mais difíceis. Por isso, completa-as da esquerda para a direita.
    example_code: "## Example Hedy Code\n```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'\n```\n"
    story_text_3: "## Lists\nWhen we want to check if something is in a list, we can now use the `{in}` command.\nThis code prints pretty! if you choose green or yellow, and meh otherwise.\n"
    example_code_3: "```\npretty_colors {is} green, yellow\ncolor {is} {ask} 'What is your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!'\n{else} {print} 'meh'\n```\n"
    story_text_2: "Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:\n"
    example_code_2: "```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice'\n{else} {print} 'boo!'\n```\n"
6:
    start_code: "print '5 vezes 5 é ' 5 * 5"
    story_text: |
        `ask`, `print` e `if` ainda funcionam como nos nível 5.
         Mas no nível 6 temos algo novo, também podes fazer cálculos.

         No nível 6 acrescentamos novos símbolos e agora tu podes fazer cálculos dentro do teu código.

         A soma é fácil, escreves tal como fazes em Matemática: `5 + 5`, por exemplo. A subtração também funciona na perfeição, é `5 - 5`.

         A multiplicação é um pouco diferente, porque não existe o símbolo de multiplicar no teu teclado. Podes procurar à vontade, não existe mesmo!
         Por esse motivo, multiplicamos utilizando o asterisco: `5 * 5`. Lê isto como 5 vezes 5 e assim será mais fácil memorizar.
         ## Example Hedy code
         ```
         print '5 mais 5 é ' 5 + 5
         print '5 menos 5 é ' 5 - 5
         print '5 vezes 5 é ' 5 * 5
         ```
    example_code: "## Example Hedy code\n```\n{print} '5 plus 5 is ' 5 + 5\n{print} '5 minus 5 is ' 5 - 5\n{print} '5 {times} 5 is ' 5 * 5\n```\n"
    story_text_2: "We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:\n"
    example_code_2: "```\nname = Hedy\nanswer = 20 + 4\n```\n"
7:
    start_code: "repeat 3 times print 'Hedy é divertida!'"
    story_text: |
        `ask`, `print` e `if` funcionam, exactamente, como acontecia no nível 5 e 6.
        Mas o nível 7 acrescenta o comando `repeat`.  `repeat` pode ser usado para executar uma linha de código múltiplas vezes.
        ## Exemplo de Código Hedy
        ```
        repeat 3 times print 'Hedy é divertida!'
        ```
    example_code: "## Example Hedy code\n```\n{repeat} 3 {times} {print} 'Hedy {is} fun!'\n```\n"
8:
    start_code: |-
        repeat 5 times
            print 'Olá amigos!'
            print 'Isto vai ser escrito 5 vezes.'
    story_text: |
        `ask` e `print` ainda funcionam como já conheces. Mas `if` e `repeat` mudaram!
        Tu podes agora executar grupos de código em conjunto, mas vais ter de indentar o código.
        Isto significa colocar quatro espaços no início da linha. Isto também se aplica quando quiseres apenas criar um bloco só de uma linha.

        ## Exemplo de Código Hedy
        ```
        repeat 5 times
            print 'Olá a todos!'
            print 'Tudo isto é repetido 5 vezes.'
        ```
        Se juntares um `repeat` e um `if`, terás de indentar cada bloco. Observa o exemplo de código para mais detalhes!"
    example_code: "## Example Hedy code\n```\n{repeat} 5 {times}\n    {print} 'Hello everyone'\n    {print} 'This is all repeated 5 times'\n```\n"
9:
    start_code: |-
        repeat 3 times
            food = ask 'What do you want?'
            if food is 'pizza'
                print 'nice!'
            else
                print 'pizza is better'
    story_text: |
        In this level you can not only use multiple lines with `if` and `repeat`, but you can also put them together!
        In the example you see an `if` command within a `repeat` command. It is also allowed the other way around, and an `if` is also allowed in an `if` and a `repeat` in a `repeat`.
        Give it a try!

        ## Example Hedy code
        ```
        repeat 3 times
            food = ask 'What do you want?'
            if food is 'pizza'
                print 'nice!'
            else
                print 'pizza is better'
        ```
    example_code: "## Example Hedy code\n```\n{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    else\n        {print} 'pizza is better'\n```\n"
10:
    start_code: |-
        animals is dog, cat, blobfish
        for animal in animals
          print 'I love ' animal
    story_text: |
        In this level we learn a new code called `for`. With `for` you can make a list and use all elements.
        `for` creates a block, like `repeat` and `if` so all lines in the block need to start with spaces.

        ## Example Hedy code
        ```
        animals is dog, cat, blobfish
        for animal in animals
          print 'I love ' animal
        ```
    example_code: "## Example Hedy code\n```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal\n```\n"
11:
    start_code: "for counter in range 1 to 5\n    print counter"
    story_text: "`print` funciona na mesma mas o `repeat` agora é substituído por `for`! Podes agora escrever `for counter in range 1 to 5` e usar `counter` no teu programa. Experimenta para veres o que acontece! Lembra-te de usar a indentação a seguir às instruções `for` e `if` (Isto significa começar uma frase com quatro espaços)."
    example_code: "## Example Hedy code\n```\nfor counter in range 1 to 5\n    print counter\n```\n"
12:
    start_code: |-
        print 'decimal numbers now need to use a dot'
        print 2.5 + 2.5
    story_text: |
        So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that cmputers use the . for decimal numbers.

        For this level on you will also have to use quotation marks when storing a text with `is`:

        ```
        name = 'Hedy'
        print 'Hello ' name
        ```

        For numbers, you do not use quotation marks in the `is`:
        ```
        score = 25
        print 'You got ' score
        ```
    example_code: "## Example Hedy code\n```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n"
    story_text_2: "**All texts need to be in quotation marks**\nFor this level on you will also have to use quotation marks when storing a text with `=`:\n"
    example_code_2: "```\nname = 'Hedy the Robot'\n{print} 'Hello ' name\n```\n"
    story_text_3: "**All items in lists need quotation marks too**\nLists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.\nThis allows you to save two words as 1 item on the list, for example 'Iron Man'.\n"
    example_code_3: "```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n"
    story_text_4: "**All text after `{if}` comparisons need quotation marks too**\n"
    example_code_4: "```\nname = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n"
    story_text_5: "**Numbers don't need quotation marks**\nFor numbers, you do not use quotation marks in the `=`:\n"
    example_code_5: "```\nscore = 25\n{print} 'You got ' score\n```\n"
    story_text_6: "**Maths with words** In this level it is also allowed to use the + sign with texts. For example:\n"
    example_code_6: "```\na = 'Hello '\nb = 'world!'\nprint a + b\n```\n"
13:
    start_code: |-
        name = ask 'what is your name?'
        age = ask 'what is your age?'
        if name is 'Hedy' and age is 2
            print 'You are the real Hedy!'
    story_text: "Vamos agora aprender `and` e `or`! Se queres verificar duas instruções, não precisas de usar dois `if` mas podes usar `and` e `or`. Se utilizares `and`, ambas as instruções, à esquerda e à direita do `and` têm de ser verdadeiras. Podemos também utilizar `or`. Neste caso, apenas uma das instruções tem de ser verdadeira."
#16:
#    start_code: |-
#        # Este é um programa que vai colocar algumas questões de Matemática
#        for i in range(1, 10):
#            # Vamos perguntar pela tabuada do 5
#            resultado is input('Quanto é ' i ' vezes 5?')
#            # Verificamos se o resultado é igual ao nosso cálculo
#            resposta_certa is i * 5
#            if resultado is resposta_certa:
#                print(resultado ' está certo!')
#            else:
#                print('Está errado, a resposta devia ser: ' i*5)
#    story_text: "Quando estás a criar programas maiores, tens de arranjar uma maneira de te lembrares o que cada bocado de código faz. Usamos os comentários para esse efeito. Um comentário é semelhante a isto:\n ` # Isto é um comentário`. Tudo o que aparece depois do # será invisível para o código."
#    commands:
#    -   name: "Comentário"
#        explanation: "Podemos colocar comentários onde quisermos."
#        example: "# Isto é um comentário"
#        demo_code: |-
#            # Este programa escreve Olá!
#            # Este programa foi feito em Hedy
#            # Não faz mais nada excepto escrever Olá!
#            print('Olá!')
#20:
#    start_code: |-
#        fruta = ['maçã', 'banana', 'cereja']
#        for i in range(1, 3):
#            print(fruta[i])
#    story_text: "Podemos também ver tudo na lista com o ciclo `for`. Como existem três coisas na lista, passamos o ciclo de 1 até 3. Agora escrevemos tudo durante o ciclo."
#    commands:
#    -   name: "Tamanho da lista"
#        explanation: "Com `length` podemos saber o tamanho da lista. A lista no exemplo tem tamanho 3, porque existem três coisas na lista."
#        example: "length(lista)"
#        demo_code: |-
#            fruta = ['maçã', 'banana', 'cereja']
#            print('tamanho da lista é ' length(fruta))
#            for i in range(1, length(fruta)):
#                print(fruta[i])
#21:
#    start_code: |-
#        print('Quanto é 5+3?')
#        resposta = 5+3
#        print('Resposta é agora:')
#        print(resposta)
#        if resposta == 8:
#            print('Está certo!')
#        else:
#            print('Oh não, está errado!')
#    story_text: "Agora vamos mudar o is para `=` e `==`. Usamos `=` se queremos atribuir um determinado valor a uma variável. Se queremos atribuir 8 à variável chamada resposta, então colocamos resposta = 8. `==` utilizamos quando queremos saber se duas coisas são iguais entre elas."
#    commands:
#    -   name: "Compara"
#        explanation: "Se queremos comparar, usamos ==. 5+3 == 8 verifica se 5+3 é igual a 8"
#        example: "Por exemplo: 5+3 == 8"
#        demo_code: |-
#            if 5+3 == 8:
#                print('5+3 é de facto 8')
#            else:
#                print('Isto não será escrito, porque 5+3 é 8!')
#    -   name: "Atribui valor"
#        explanation: "Se pretendemos dizer que uma variável chamada resposta é 8, então colocamos resposta = 8."
#        example: "Por exemplo: resposta = 8"
#        demo_code: |-
#            print('Quanto é 5+3?')
#            resposta = 5+3
#            print('Resposta é agora:')
#            print(resposta)
#    -   name: "Compara e atribui um valor"
#        explanation: "Se vamos comparar dois valores, utilizamos `==`. Se formos atribuir um valor a uma variável, usamos `=`. "
#        example: "Por exemplo: 5+3 == 8, resposta = 8"
#        demo_code: |-
#            print('Quanto é 5+3?')
#            resposta = 5+3
#            print('Resposta é agora:')
#            print(resposta)
#            if resposta == 8:
#                print('Está certo!')
#            else:
#                print('Não, está errado!')
#12-old:
#    start_code: |-
#        idade is input('Quantos anos tens?')
#        print('Então já tivestes estas idades:')
#        for i in range(0, idade):
#            print(i)
#    story_text: "Vamos utilizar parênteses curvos e vamos mudar `ask`! Vamos alterar `ask` para `input`! Com `print`, `input` e `for` vamos passar a usar agora parênteses curvos."
#    commands:
#    -   explanation: "Vamos utilizar parênteses com `print` agora!"
#        example: "Por exemplo: print('Olá mundo!')"
#        demo_code: "print('Olá mundo!')"
#    -   explanation: "Removemos o `ask` a agora chamamos-lhe `input`. Também vamos passar a usar parênteses."
#        example: "Por exemplo: nome is input('Como te chamas?')"
#        demo_code: |-
#            nome is input('Como te chamas?')
#            print('Então o teu nome é ' nome)
#    -   explanation: "Agora colocamos os números entre parênteses nos ciclos `for`. for i in range (0, 10):"
#        example: "Por exemplo: for i in range(0, 10):"
#        demo_code: |-
#            for i in range(0, 10):
#                print(i)
#            print('Preparados ou não, aqui vou eu!')
    example_code: "```\nname = ask 'what is your name?'\nage = ask 'what is your age?'\nif name is 'Hedy' and age is 2\n    print 'You are the real Hedy!'\n```\n"
14:
    start_code: |-
        idade = ask 'Quantos anos tens?'
        if idade < 13
            print 'És mais novo a do que eu!'
        else
            print 'És mais velho a do que eu!'
    story_text: "Vamos aprender mais coisas novas! Podes já ter aprendido sobre elas na Matemática, o `<` e `>`. O `<` verifica se o primeiro número é menor que o segundo, como `4 < 5`. O `>` verifica se o primeiro número é maior que o segundo, como `6 > 5`."
    example_code: "## Example Hedy Code\n```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n"
    story_text_2: "From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:\n"
    example_code_2: "```\nname = {ask} 'What is your name?'\n{if} name == 'Hedy'\n    {print} 'You are coo!'\n```\n"
    story_text_3: "You can also compare if something is *not* equal to something else using `!=` like this:\n"
    example_code_3: "```\nname = {ask} 'What is your name?'\n{if} name != 'Hedy'\n    {print} 'You are not Hedy'\n```\n"
15:
    start_code: |-
        resultado = 0
        while resultado != 25
            resultado = ask 'Quanto é 5 vezes 5?'
        print 'Foi dada a resposta correcta.'
    story_text: "Vamos aprender um ciclo novo, o ciclo `while`! Continuamos o ciclo enquanto a instrução for verdadeira/válida! Portanto, no exemplo de código, continuamos até ser dada a resposta certa. Se a resposta correcta nunca for dada, o ciclo nunca acaba!"
    example_code: "## Example Hedy code\n```\nanswer = 0\nwhile answer != 25\n    answer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n```\n"
16:
    start_code: |-
        fruta = ['maçã', 'banana', 'cereja']
        print fruta 
    story_text: "Vamos colocar as listas entre parênteses rectos! Também vamos ter de colocar cada elemento da lista entre aspas simples ('). "
    example_code: "## Example Hedy Code\n```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
17:
    start_code: |-
        for i in range 1 to 10:
            print i
        print 'Preparados ou não, aqui vou eu!'
    story_text: "Agora vamos mudar um pouco as coisas com a indentação. Cada vez que precisarmos de indentação, temos de colocar `:` na linha antes da indentação."
18:
    story_text: "We arrived at real pythoncode! That means we need to use parentheses with {print} and {range} from now on.\nThat looks like this:\n```\n{print}('my name is Hedy!')\n```\nIf you want to print more thant one items, you need to separate them by commas.\n```\nnaam = 'Hedy'\n{print}('my name is ', naam)\n```"
    start_code: "naam = 'Hedy'\n{print}('My name is ', naam)"
