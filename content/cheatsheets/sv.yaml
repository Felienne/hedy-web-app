1:
-   name: '{print}'
    explanation: Print something with `{print}`.
    demo_code: '{print} Hall√• och v√§lkommen till Hedy!'
-   name: '{ask}'
    explanation: Fr√•ga n√•got med `{ask}`.
    demo_code: '{ask} Vilken √§r din favoritf√§rg?'
-   name: '{echo}'
    explanation: Repetera n√•got med `{echo}`.
    demo_code: "{ask} Vilken √§r din favoritf√§rg?\n{echo} s√• din favoritf√§rg √§r"
-   name: '{print} emojis'
    explanation: Skriv en emoji med `{print}`.
    demo_code: '{print} üôã üåç ‚ùó'
-   name: '{forward}'
    explanation: Rita en linje med `{forward}`.
    demo_code: '{forward} 100'
-   name: '{turn}'
    explanation: Sv√§ng ritsk√∂ldpaddan med `{turn}`.
    demo_code: "{forward} 25\n{turn} {left}\n{forward} 25\n{turn} {right}"
2:
-   name: '{is}'
    explanation: F√∂r att anv√§nda ett ord i programmet kan du namnge det med `{is}`. Du kan v√§lja namnet sj√§lv.
    demo_code: "namn {is} Hedy\n{print} v√§lkommen namn"
-   name: '{ask}'
    explanation: Fr√•ga n√•got med `{ask}`. Se upp! Du beh√∂ver namnge svaret med `{is}`.
    demo_code: "f√§rg {is} {ask} Vilken √§r din favoritf√§rg?\n{print} f√§rg √§r din favorit!"
-   name: '{sleep}'
    explanation: '`{sleep}` l√•ter Hedy vila en (eller flera) sekund(er).'
    demo_code: "{print} L√•t mig t√§nka i en sekund\n{sleep}\n{print} Hmm.. Jag beh√∂ver 3 sekunder till...\n{sleep} 3\n{print} Ahaa! Nu vet jag!"
-   name: '{is} med sk√∂ldpadda'
    explanation: Namnge ett nummer med `{is}`. Du kan v√§lja namnet sj√§lv.
    demo_code: "vinkel {is} 90\n{turn} vinkel\n{forward} 100"
3:
-   demo_code: "djur {is} hund, katt, k√§ngru\n{print} djur {at} {random}"
    name: V√§lj slumpm√§ssig
    explanation: V√§lj ett slumpm√§ssigt ord fr√•n en grupp med `{at}` och `{random}`.
-   name: '{add}'
    explanation: '`{add}` l√§gg till en sak `{to_list}` en lista.'
    demo_code: "djur {is} ko, katt\n{add} hund {to_list} djur"
-   name: '{remove}'
    explanation: '`{remove}` en sak `{from}` en lista.'
    demo_code: "djur {is} katt, hund, ko\n{remove} hund {from} djur"
4:
-   name: '{print}'
    explanation: Skriv exakt med hj√§lp av citationstecken.
    demo_code: "{print} 'Hej och v√§lkommen till Hedy.'"
-   name: '{is}'
    explanation: Namnge en text och `{print}` utan citationstecken.
    demo_code: "namn {is} Hedy\n{print} 'mitt namn √§r ' namn"
-   explanation: Fr√•ga n√•got med `{ask}`.
    demo_code: "f√§rg {is} {ask} 'Vilken √§r din favoritf√§rg?'\n{print} f√§rg ' √§r din favorit!'"
    name: '{ask}'
5:
-   name: '{print}'
    explanation: Skriv ut exakt med hj√§lp av citationstecken.
    demo_code: "{print} 'Hej och v√§lkommen till Hedy.'"
-   name: '{ask}'
    explanation: Fr√•ga n√•got med `{ask}`.
    demo_code: "f√§rg {is} {ask} 'Vilken √§r din favoritf√§rg?'\n{print} f√§rg ' √§r din favorit!'"
-   name: '{if}'
    explanation: G√∂r ett val med `{if}`.
    demo_code: "f√§rg {is} {ask} 'Vilken √§r din favoritf√§rg?'\n{if} f√§rg {is} gr√∂n {print} 'fin!' {else} {print} 's√•d√§r'"
-   name: '{if} med sk√∂ldpadda'
    explanation: G√∂r ett val med `{if}`.
    demo_code: "svar {is} {ask} 'Hur l√•ngt ska jag g√•?'\n{if} svar {is} l√•ngt {forward} 100 {else} {forward} 5"
-   demo_code: "snygga_f√§rger {is} gr√∂nt, gult\nf√§rg {is} {ask} 'Vad {is} din favoritf√§rg?'\n{if} f√§rg {in} snygga_f√§rger {print} 'snyggt!' {else} {print} 'meh'"
    name: '{in}'
    explanation: Kolla element med `{in}`.
-   name: '{pressed}'
    explanation: Kontrollera om en viss tangent √§r `{pressed}`.
    demo_code: "{if} a {is} {pressed} {print} 'Du tryckte p√• A!' {else} {print} 'Du tryckte p√• en annan tangent!'"
6:
-   name: '{print}'
    explanation: Skriv ut exakt med citattecken.
    demo_code: "{print} '5 g√•nger 5 √§r ' 5 * 5"
-   demo_code: "svar = {ask} 'Vad √§r 10 plus 10?'\n{if} svar {is} 20 {print} 'Ja!' {else} {print} 'Hoppsan'"
    name: '{ask}'
    explanation: Be om en utr√§kning och kolla om den st√§mmer.
-   name: '`{ask}` och `{if}` med sk√∂ldpadda'
    explanation: Fr√•ga anv√§ndaren hur m√•nga vinklar den vill ha.
    demo_code: "vinklar = {ask} 'Hur m√•nga vinklar?'\nvinkel = 360 / vinklar\n{forward} 50"
9:
-   explanation: Fr√•ga efter svaret p√• en addition med `{ask}` och se om det √§r korrekt. Nu skriver vi ut tv√• rader.
    demo_code: "svar = {ask} 'Vad √§r 10 plus 10?'\n{if} svar {is} 20\n    {print} 'Bra jobbat!!'\n    {print} 'Svaret √§r faktiskt ' svar\n{else}\n    {print} 'Fel'\n    {print} 'Svaret √§r 20'"
    name: '{if} med flera rader'
-   name: '{repeat} med sk√∂ldpadda'
    explanation: Upprepa flera rader.
    demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
12:
-   name: flyt direkt
    explanation: Decimaltal.
    demo_code: "{print} 'R√§kna p√•!'\n{print} 'Tv√• och en halv plus tv√• och en halv √§r...'\n{print} 2.5 + 2.5"
-   name: tilldela text
    explanation: Text med citattecken efter `=`
    demo_code: "namn = 'Roboten Hedy'\n{print} 'Hej ' namn"
-   name: citattecken efter `{if}`-j√§mf√∂relse
    explanation: Text med citattecken efter `{if}`.
    demo_code: "namn = {ask} 'Vem √§r du?'\n{if} namn = 'Hedy'\n    {print} 'Hall√• d√§r!'"
-   name: citattecken i lista
    explanation: En lista med citattecken.
    demo_code: "superhj√§ltar = 'Iron Man', 'Batman', 'St√•lmannen'\n{print} superhj√§ltar {at} {random}"
13:
-   name: '{and}'
    explanation: Tv√• delar som b√•da m√•ste vara r√§tt.
    demo_code: "svar1 = {ask} 'Vad √§r 3+2?'\nsvar2 = {ask} 'Vad √§r 2+2?'\n{if} svar1 {is} 5 {and} svar2 {is} 4\n    {print} 'B√•da svaren √§r r√§tt!'\n{else}\n    {print} 'Minst ett svar √§r fel!'"
-   name: '{or}'
    explanation: Minst ett av de tv√• delarna m√•ste vara r√§tt. Om b√•da √§r r√§tt g√•r det ocks√• bra.
    demo_code: "svar1 = {ask} 'Vad √§r 3+2?'\nsvar2 = {ask} 'Vad √§r 2+2?'\n{if} svar1 {is} 5 {or} svar2 {is} 4\n    {print} 'Minst ett svar √§r r√§tt!'\n{else}\n    {print} 'B√•da svaren √§r fel!'"
14:
-   name: Mindre √§n
    explanation: Vi anv√§nder `<` f√∂r att kolla om det f√∂rsta talet √§r mindre √§n det andra.
    demo_code: "√•lder = {ask} 'Hur gammal √§r du?'\n{if} √•lder < 13\n    {print} 'Du √§r yngre √§n jag!'"
-   name: St√∂rre √§n
    explanation: Vi anv√§nder `>` f√∂r att kolla om det f√∂rsta talet √§r st√∂rre √§n det andra talet.
    demo_code: "√•lder = {ask} 'Hur gammal √§r du?'\n{if} √•lder > 13\n    {print} 'Du √§r √§ldre √§n jag!'"
-   name: Lika med
    explanation: Vi anv√§nder `==` f√∂r att kolla om tv√• saker √§r lika.
    demo_code: "svar = {ask} 'Vad √§r 5 * 5?'\n{if} svar == 25\n    {print} 'Det st√§mmer!'"
-   name: Olika
    explanation: Vi anv√§nder `!=` f√∂r att kolla om tv√• saker √§r olika.
    demo_code: "svar = {ask} 'Vad √§r 5 * 5?'\n{if} svar != 25\n    {print} 'Det st√§mmer inte!'"
-   name: Mindre √§n eller lika med
    explanation: Vi anv√§nder `<=` f√∂r att kolla om det f√∂rsta talet √§r mindre √§n eller lika med det andra talet.
    demo_code: "√•lder = {ask} 'Hur gammal √§r du?'\n{if} √•lder <= 12\n    {print} 'Du √§r yngre √§n jag!'"
-   name: St√∂rre √§n eller lika med
    explanation: Vi anv√§nder `>=` f√∂r att kolla om det f√∂rsta talet √§r st√∂rre √§n eller lika med det andra talet.
    demo_code: "√•lder = {ask} 'Hur gammal √§r du?'\n{if} √•lder >= 14\n    {print} 'Du √§r √§ldre √§n jag!'"
15:
-   name: '{while}'
    explanation: Vi kan anv√§nda `{while}` med skilt fr√•n.
    demo_code: "svar = 0\n{while} svar != 25\n    svar = {ask} 'Vad √§r 5 g√•nger 5?'\n{print} 'R√§tt svar har getts'"
-   demo_code: "antal = 1\n{while} antal < 3\n    {print} 'Vi g√∂r det h√§r ' 3 - antal ' g√•nger till'\n    antal = antal + 1\n{print} 'Nu √§r det klart'"
    name: Mindre √§n {while}
    explanation: Vi kan ocks√• anv√§nda `{while}` med `<` och `>`.
16:
-   name: hakparenteser
    explanation: Listor med hakparenteser.
    demo_code: "frukt = ['√§pple', 'banan', 'k√∂rsb√§r']\n{print} frukt"
-   name: H√§mta ett element fr√•n en lista
    explanation: F√∂r att h√§mta ett element fr√•n en lista anv√§nder vi [tal] s√• frukt[1] betyder att h√§mta den f√∂rsta frukten fr√•n listan!
    demo_code: "frukt = ['banan', '√§pple', 'k√∂rsb√§r']\nf√∂rsta_frukten = frukt[1]\n{print} f√∂rsta_frukten"
-   name: H√§mta ett slumpm√§ssigt element fr√•n en lista
    explanation: F√∂r att f√• ett slumpm√§ssigt element fr√•n en lista anv√§nder vi [slump] s√• frukt[slump] betyder att h√§mta en slumpm√§ssig frukt fr√•n listan!
    demo_code: "frukt = ['banan', '√§pple', 'k√∂rsb√§r']\nslumpad_frukt = frukt[{random}]\n{print} slumpad_frukt"
17:
-   name: '{elif}'
    demo_code: "a = 2\n{if} a == 1:\n    {print} 'a √§r 1'\n{elif} a == 2:\n    {print} 'a √§r 2'\n{else}:\n    {print} 'a √§r inte 1 eller 2'"
    explanation: '`{elif}`'
-   name: '{print}'
    explanation: N√§r vi anv√§nder `{for}` m√•ste vi ha ett `:` efter `{for}`-satsen!
    demo_code: "{for} i {in} {range} 1 {to} 12:\n    {print} i\n{print} 'Redo eller inte, h√§r kommer jag!'"
-   name: '{if}'
    explanation: Vi beh√∂ver g√∂ra samma sak med alla v√•ra `{if}`-satser.
    demo_code: "f√§rg = {ask} 'Vilken √§r din favoritf√§rg?'\n{if} f√§rg == 'gr√∂nt':\n    {print} 'Din favoritf√§rg √§r gr√∂nt'\n{else}:\n    {print} 'Din favoritf√§rg √§r inte gr√∂nt'"
18:
-   name: '{print}'
    explanation: Efter `{print}` beh√∂ver du ha parenteser.
    demo_code: "{print}('hej!')"
-   name: '{range}'
    explanation: Efter `{range}` beh√∂ver du ha parenteser.
    demo_code: "{for} i {in} {range} (1,10):\n    {print}('Hej, g√•nger ', i)"
-   name: '{print} med var'
    explanation: Med `{print}` beh√∂ver du anv√§nda parenteser och kommatecken om du skriver ut fler saker.
    demo_code: "namn = 'Hedy'\n{print}('Jag heter ', namn)"
-   name: fr√•ga n√•got med {input}
    explanation: Anv√§nd `{input}` ist√§llet f√∂r `{ask}` f√∂r att fr√•ga n√•got.
    demo_code: "namn = {input}('Vad heter du?')\n{print}('S√• du heter ', namn)"
7:
-   name: '{print}'
    explanation: Skriv ut exakt med citattecken.
    demo_code: "{print} 'Hej och v√§lkommen till Hedy.'"
-   name: '{ask}'
    explanation: Fr√•ga n√•got med `{ask}`.
    demo_code: "f√§rg = {ask} 'Vilken √§r din favoritf√§rg?'\n{print} f√§rg ' √§r din favorit!'"
-   name: '{if}'
    explanation: V√§lj ett alternativ `{if}`.
    demo_code: "f√§rg = {ask} 'Vilken √§r din favoritf√§rg?'\n{if} f√§rg {is} gr√∂nt {print} 'fint!' {else} {print} 'meh'"
-   name: '{repeat} med sk√∂ldpadda'
    explanation: Upprepa en kodrad med `{repeat}`.
    demo_code: '{repeat} 3 {times} {forward} 10'
8:
-   name: '{print}'
    explanation: Skriv ut n√•got. Kom ih√•g att anv√§nda citattecken f√∂r att skriva ut exakt.
    demo_code: "{print} '5 g√•nger 5 √§r ' 5 * 5"
-   name: '{ask}'
    explanation: Fr√•ga efter svaret p√• en addition och kontrollera om det √§r korrekt. Vi kan nu skriva ut tv√• rader.
    demo_code: "svar = {ask} 'Vad √§r 5 plus 5?'\n{if} svar {is} 10\n    {print} 'Bra jobbat!'\n    {print} 'Svaret var faktiskt ' svar\n{else}\n    {print} 'Hoppsan!'\n    {print} 'Svaret √§r 10'"
-   name: '{repeat} med sk√∂ldpadda'
    explanation: Upprepa flera rader.
    demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
-   name: '{pressed}'
    explanation: Kontrollera om en viss tangent √§r `{pressed}`.
    demo_code: "{if} a {is} {pressed}\n    {print} 'Du tryckte p√• A!'\n{else}\n    {print} 'Du tryckte p√• en annan tangent'"
10:
-   name: '{print}'
    explanation: Skriv ut n√•got. Kom ih√•g att anv√§nda citattecken f√∂r exakt utskrift.
    demo_code: "{print} '5 g√•nger 5 √§r ' 5 * 5"
-   name: '{for} med en lista'
    explanation: Skriv ut alla saker i en lista.
    demo_code: "alla_djur {is} hund, katt, marulk\n{for} djur {in} alla_djur\n  {print} 'Jag √§lskar ' djur"
11:
-   name: '{for}-loop'
    explanation: Vi kan anv√§nda `{for}` med ett `{range}`.
    demo_code: "{for} r√§knare {in} {range} 1 {to} 5\n    {print} r√§knare"
-   name: '{ask}'
    explanation: Fr√•ga efter svaret p√• en addition och kolla om det √§r korrekt. Vi kan nu skriva ut tv√• rader.
    demo_code: "svar = {ask} 'Vad √§r 5 plus 5?'\n{if} svar {is} 10\n    {print} 'Bra jobbat!'\n    {print} 'Ja, svaret var ' svar\n{else}\n    {print} 'Hoppsan!'\n    {print} 'Svaret √§r 10'"
