adventures:
    story:
        name: Hist√≤ria
        default_save_name: Hist√≤ria
        description: Hist√≤ria
        levels:
            1:
                story_text: |
                    Al nivell 1 pots fer una hist√≤ria amb un protagonista diferent cada vegada a la teva elecci√≥.

                    A la primera l√≠nia, utilitza `{ask}` per preguntar qui ser√† el protagonista de la hist√≤ria.

                    Despr√©s d'aquesta primera l√≠nia, comen√ßa amb `{print}` quan calgui imprimir la frase.
                    Feu servir `{echo}` quan vulguis que el nom del protagonista estigui al final de la frase.
                example_code: |
                    ```
                    {ask} El protagonista de l'hist√≤ria √©s...
                    {print} El protagonista ha anat a fer un tomb al bosc
                    {echo} Est√† una mica espantat,
                    {print} Sent sorolls extranys per tot arreu
                    {print} Li fa por que estigui a un bosc encantat
                    ```
                story_text_2: |
                    ### Exercici
                    Ara crea la teva pr√≤pia hist√≤ria d'almenys 6 l√≠nies de codi.
                    Aquesta hist√≤ria no pot ser la mateixa que el codi d'exemple.
                    Utilitzeu almenys una ordre `{ask}` i una `{echo}`.
                    Podeu fer-ho sobre qualsevol tema que us agradi.
                    Si no se t'acut un tema, pots fes servir una de les nostres opcions: anar al cinema, un partit esportiu o un dia al zoo.
            2:
                story_text: |
                    Al nivell 2 pots fer que la teva hist√≤ria sigui m√©s divertida. El nom del teu protagonista ara pot estar en qualsevol part de la frase.

                    Haur√†s de programar una mica m√©s per fer-ho. Primer has de posar primer nom al teu protagonista.

                    A continuaci√≥, pots posar aquest nom a qualsevol part d'una frase.
                example_code: |-
                    ```
                    nom {is} {ask} Quin √©s el nom del protagonista?
                    {print} nom s'en va a correr pel bosc
                    {print} nom est√† una mica espantat
                    {print} De sobte sent un soroll extrany...
                    {sleep}
                    {print} nom li fa por que estigui en un bosc encantat
                    ```
                story_text_2: |
                    ### Exercici
                    Ara √©s el moment d'afegir variables a la hist√≤ria que has fet al nivell anterior.
                    Ves a "Els meus programes", busca la teva aventura d'hist√≤ria de nivell 1 i copia'n el codi. Enganxa'l la pantalla d'entrada en aquest nivell.

                    Aquest codi no funcionar√† en aquest nivell, perqu√® encara no has utilitzat variables.
                    Canvia les ordres `{ask}` i les ordres `{echo}` del teu codi a la forma correcta que heu apr√®s en aquest nivell.

                    **Extra** Afegeix una ordre `{sleep}` al teu codi per afegir tensi√≥ a la teva hist√≤ria.
            3:
                story_text: |
                    Al nivell 3 pots fer que la teva hist√≤ria sigui m√©s divertida. Podeu utilitzar l'aleatorietat per a qualsevol monstre, animal o altre obstacle, com aqu√≠:
                example_code: |
                    ```
                    animals {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} De cop sent el soroll de un animals {at} {random}
                    ```
                story_text_2: |
                    La comanda  `{add}` tamb√© pot ser √∫til a la vostra hist√≤ria.
                example_code_2: |
                    ```
                    {print} De cop se sent un soroll.
                    animals {is} üêø, ü¶î, ü¶á, ü¶â
                    animal {is} {ask} Qu√® creus que √©s?
                    {add} animal {to_list} animals
                    {print} era un animals {at} {random}
                    ```
                story_text_3: |
                    Aquest √©s un exemple de la comanda `{remove}` a la teva hist√≤ria

                    ### Exercici
                    Copia la teva hist√≤ria dels nivells anteriors a aquest nivell.
                    En aquest nivell has apr√®s 3 noves comandes: `{at} {random}`, `{add} {to_list}` i `{remove} {from}`.
                    Afegeix noves l√≠nies de codi a la vostra hist√≤ria, de manera que totes les comandes noves hi apareguin almenys una vegada.
                example_code_3: |
                    ```
                    {print} La seva motxilla es va fer massa pesada.
                    {print} A dins hi havia una ampolla d'aigua, una llanterna i un ma√≥.
                    bossa {is} aigua, llanterna, ma√≥
                    tirar {is} {ask} Quin element hauria de tirar?
                    {remove} tirar {from} bossa
                    ```
            4:
                story_text: |
                    ### Exercici
                    Copia el codi d'exemple i acaba'l afegint cometes als espais en blanc de les l√≠nies 1 i 2.
                    Els espais en blanc de la l√≠nia 3 i 4 no s'han de substituir per cometes, sin√≥ per una comanda `{sleep}` i una comanda `{clear}`. Pots fer-ho funcionar?

                    ### Exercici 2
                    Torna als nivells anteriors i copia el teu codi de la hist√≤ria. Fes funcionar el codi en aquest nivell afegint cometes als llocs adequats.
                    Recorda: Les variables de la teva pr√≤pia hist√≤ria han d'estar fora de les cometes. Igual que a la segona l√≠nia de l'exemple de codi. En aquesta l√≠nia, la variable nom es col¬∑loca fora de les cometes.
                example_code: |
                    ```
                    nom {is} {ask} _ Com et dius? _
                    {print}  _ El protagonista es diu _ nom
                    _
                    _
                    {print} nom  _ ha anat a fer un tomb al bosc _
                    {print} nom_ est√† una mica espantat _
                    animals {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} _ Sent el so de _ animals {at} {random}
                    {print} name _ li fa por que estigui en un bosc encantat _
                    ```
            5:
                story_text: |
                    En aquest nivell, pots programar diferents finals, cosa que far√† que la teva hist√≤ria sigui encara m√©s divertida.
                    En el codi d'exemple pots veure com es programen 2 finals diferents.

                    ### Exercici 1
                    Escriu una nova hist√≤ria curta de com a m√≠nim 6 l√≠nies de codi sobre un tema triat per tu.
                    No est√†s inspirat? Tria un dels temes seg√ºents: un superheroi, un dia avorrit a l'escola, naufragar en una illa deserta.

                    Ara, dona l'opci√≥ al jugador de triar un final feli√ß o dolent, com en el codi d'exemple.
                    Programa ambd√≥s finals.

                    ### Exercici 2
                    Copia la teva hist√≤ria creada en la teva pr√≤pia aventura d'hist√≤ria dels nivells anteriors.
                    Troba una manera d'afegir com a m√≠nim 2 comandes d'`{if}` i `{else}` a la teva hist√≤ria.
                    Aix√≤ pot ser amb un final feli√ß o dolent, per√≤ tamb√© pots provar d'utilitzar altres maneres d'incorporar les comandes.
                example_code: |
                    ```
                    nom {is} {ask} 'Qui camina pel bosc?'
                    {print} nom ' camina pel bosc'
                    {print} nom ' troba un monstre'
                    final {is} {ask} 'Vols un final bo o dolent?'
                    {if} final {is} bo {print} nom " agafa l'espasa i el monstre fuig r√†pidament"
                    {else} {print} 'El monstre menja ' nom ' per sopar'
                    ```
            7:
                story_text: |
                    En una hist√≤ria, sovint es repeteixen paraules diverses vegades. Per exemple, quan alg√∫ demana ajuda o canta una can√ß√≥.
                    En aquest nivell, pots crear aquestes repeticions amb `{repeat}`.

                    ### Exercici
                    Afegeix una repetici√≥ a la vostra pr√≤pia hist√≤ria. Torna als teus programes desats, tria el teu programa d'hist√≤ria del nivell anterior i
                    quan trobis una l√≠nia que contingui `{print}` i repeteix-la!
                example_code: |
                    ```
                    {print} "El pr√≠ncep no parava de demanar ajuda"
                    {repeat} 5 {times} {print} "Ajuda!"
                    {print} "Per qu√® ning√∫ m'ajuda?"
                    ```
            8:
                story_text: |
                    En aquest nivell podeu utilitzar diverses l√≠nies en les comandes `{if}`, d'aquesta manera podeu actualitzar el vostre final feli√ß o trist.

                    ### Exercici 1
                    El codi d'exemple mostra dos finals diferents; un on els personatges salten en una m√†quina de temps i un on no ho fan.
                    Completa els espais en blanc amb almenys una frase per terminaci√≥.
                    **Extra** Fes la hist√≤ria m√©s llarga. Qu√® passa a la hist√≤ria? Podeu afegir un segon `{ask}` amb opcions diferents.

                    ### Exercici 2
                    Torneu als vostres programes guardats, trieu el vostre programa d‚Äôhist√≤ria de nivell 5. Ara escriviu un final feli√ß o trist d‚Äôalmenys tres l√≠nies!
                example_code: |
                    ```
                    {print} "OH NO! El T-rex s'apropa!"
                    final = {ask} "Quin final vols, trist o feli√ß?"
                    {if} final {is} feli√ß
                        {print} "En Ricard torna a temps dins la m√†quina del temps!"
                        {print} _
                    {else}
                        {print} "Oh no! En Ricard √©s massa lent..."
                        {print} _
                    ```
            9:
                story_text: |
                    In this level you can use nesting to put `{if}`, `{repeat}` or `{for}` commands inside other `{if}`, `{repeat}` or `{for}` commands. This gives you many options and really helps you to make your story interactive.
                example_code: |
                    ```
                    {print} 'Robin is walking downtown'
                    location = {ask} 'Is Robin going into a shop, or does she go home?'
                    {if} location {is} shop
                        {print} 'She enters the shop.'
                        {print} 'Robin sees an interesting looking book'
                        book = {ask} 'Does Robin buy the book?'
                        {if} book {is} yes
                        _{print} 'Robin buys the book and goes home'
                        {else}
                        _{print} 'Robin leaves the shop and goes home'
                    {else}
                        {print} 'Robin goes home'
                    ```
            10:
                story_text: |
                    In this level you can use the {for} command in your story. In this way you could easily program the children's book 'brown bear, brown bear, what do you see'.
                example_code: |
                    ```
                    animals = _ , _ , _ 
                    {print} 'Os bru, Os bru'
                    {print} 'Qu√® veus?'
                    ```
            12:
                story_text: In this level you can use the quotation marks to save multiple words in a variable.
                example_code: |
                    ```
                    nom = "La Reina d'Englaterra"
                    {print} nom ' menjava un tall de past√≠s, quan de sopte‚Ä¶'
                    ```
            13:
                story_text: |
                    By using the `{and}` and `{or}` commands, you can shorten your stories. For example, check out the dragon story.

                    ### Exercise
                    Can you make your own adventure minigame like this?
                example_code: |
                    ```
                    {print} 'El nostre hero√Øna camina dins el bosc'
                    {print} 'El cam√≠ t√© una bifurcaci√≥'
                    cam√≠= {ask} 'Quin cam√≠ ha d'escollir?'
                    arma = {ask} 'Quina arma desenfunda?'
                    {if} cam√≠ {is} 'esquerre' {and} arma {is} 'espasa'
                        _'
                    ```
            15:
                example_code: |
                    ```
                    claus = 'perdudes'
                    {print} 'Et trobes al gard√≠ per√≤ no pots entrar ja que has perdut les claus.'
                    {print} 'On les vols buscar?'
                    {print} "Pots escollir entre: l'arbre, les flors, la roca, la b√∫stia"
                    {while} claus == 'perdudes'
                        lloc = {ask} 'On vols buscar-les?'
                        {if} lloc == 'les flors'
                            {print} 'Aqu√≠ estan!'
                            claus = 'trobades'
                        {else}
                            {print} ' No, no s√≥n a ' lloc
                    {print} 'Ja pots entrar a casa!'
                    ```
                story_text: "Utilitzant el bucle `{while}` pots fer que les teves hist√≤ries siguin m√©s interessants. Per exemple, pots fer servir `{while} game == 'on'` per a poder jugar el joc fins que s'acabi.\nTamb√© pots fer servir `{while} sword == 'lost'` i aix√≠ el jugador no podr√† continuar el joc fins que trobi alguna cosa concreta.\n\n### Exercici\nAquest exemple mostra com usar el bucle `{while}` dins una hist√≤ria, Ara **pensa en un escenari propi** en qu√® el jugador ha de trobar alguna cosa abans de poder continuar.\n"
            18:
                example_code: |
                    ```
                    {print}('Benvingut a aquesta hist√≤ria!')
                    ```
                story_text_2: |
                    ### Exercici 2
                    Ja hem preparat un `{input}` per a tu. Per comen√ßar, fes servir la variable `name` de la vostra hist√≤ria.
                    A continuaci√≥, afegeix un segon `{ask}` fent-hi servir la variable.
                    Consell: Recorda afegir les comes en un `{print}` entre el text i les variables!
                example_code_2: |
                    ```
                    nom = {input}("Com et dius?")
                    {print}('Benvingut a aquesta hist√≤ria!')
                    ```
                story_text: "Ara imprimirem una nova hist√≤ria, per√≤ ara farem servir els par√®ntesis amb el `{print}`.\n\n### Exercici 1\nCrea un conte amb un m√≠nim de 5 frases. Encara no has de fer servir 'nom'.\n"
    add_remove_command:
        default_save_name: comanda_afegir_borrar
        description: Introduint {add} {to_list} i {remove} {from}
        levels:
            3:
                story_text: |
                    ## Afegeix a
                    Pots afegir articles a la llista amb la comanda`{add} {to_list}`. Per afegir un element a una llista, simplement escrius: `{add} penguin {to} animals` o b√© pots utilitzar la comanda `{ask}` com en el codi d'exemple.
                example_code: |
                    ```
                    animals {is} gos, gat, cangur
                    prefe {is} {ask} Quin √©s el teu animal preferit?
                    {add} prefe {to_list} animals
                    {print} Escullo animals {at} {random}
                    ```
                story_text_2: |
                    ## Esborra de
                    De la mateixa manera que pots afegir articles a una llista pots treure'ls. Aix√≤ es fa amb la comanda `{remove} {from}`.
                example_code_2: |
                    ```
                    animals {is} gos, gat, cangur
                    noagrada {is} {ask} Quin animal no t'agrada?
                    {remove} noagrada {from} animals
                    {print} Escullo animals {at} {random}
                    ```
                story_text_3: |
                    ### Exercici
                    Descobreix les noves comandes en aquest restaurant virtual. Afegeix el gust desitjat pel jugador a la llista i elimina'n els gustos als quals n'√©s al¬∑l√®rgic.
                example_code_3: |
                    ```
                    {print} Batut misteri√≥s
                    gustos {is} maduixa, xocolata, vainilla
                    desitjat {is} {ask} Quin gust t'esperes?
                    _
                    al¬∑l√®rgia {is} {ask} Ets al¬∑√©rgic a algun ingredient?
                    _
                    {print} T'ha tocat gustos {at} {random} milkshake
                    ```
        name: '{add}{to_list} & {remove}{from}'
    and_or_command:
        default_save_name: i o
        description: Introduint {and} & {or}
        levels:
            13:
                story_text: |-
                    Ara aprendrem `{and}` i `{or}`! Quan vols comprovar dues sent√®ncies no cal fer servir dos `{if}`s, enlloc pots utilitzar les comandes `{and}` i `{or}`.

                    Quan utilitzes `{and}` cal que ambdues sent√®ncies, tant l'esquerra com la dreta del `{and}` , siguin certes. En canvi, quan utilitzes `{or}`, nom√©s una de les sent√®ncies ha de ser certa.
                example_code: |
                    ```
                    nom = {ask} 'Com et dius?'
                    edat = {ask} 'Quants anys tens?'
                    {if} nom {is} 'Hedy' {and} edat {is} 2
                        {print} 'Ets el veritable Hedy!'
                    ```
        name: '{and} & {or}'
    ask_command:
        default_save_name: comanda_pregunta
        description: Introducci√≥ a la comanda {ask}
        levels:
            1:
                story_text: |
                    ## La comanda pregunta
                    Ara que ja saps utilitzar la comanda`{print}`, est√†s preparat per aprendre la seg√ºent comanda: `{ask}`. Amb `{ask}`, pots fer una pregunta. Comprova-ho:
                example_code: |
                    ```
                    {print} Hola!
                    {ask} Com et dius?
                    ```
                story_text_2: |
                    ## La comanda `{echo}`
                    Si vols que l'ordinador et repeteixi la resposta, pots utilitzar l'ordre `{echo}`. La resposta es mostrar√† al final de la frase, com en aquest exemple despr√©s d'hola.
                    .
                example_code_2: |
                    ```
                    {print} Hola!
                    {ask} Com et dius?
                    {echo} Hola
                    ```
                story_text_3: |
                    ### Exercici
                    Proveu les comandes `{ask}` i `{echo}`. Abans de res, ompliu els buits perqu√® aquest programa funcioni.
                    A continuaci√≥, feu 2 preguntes m√©s utilitzant la comanda `{ask}`, despr√©s de cada `{ask}` utilitzeu `{echo}` per imprimir la resposta a la pantalla.
                example_code_3: |
                    ```
                    _ Com vas?
                    _
                    ```
            2:
                story_text: |
                    ## La comanda pregunta
                    Ara que sabem utilitzar **variables** als nostres codis, ja no necessitem la comanda `{echo}`.
                    Podem utilitzar variables per emmagatzemar les respostes a les nostres preguntes i podem respondre m√∫ltiples preguntes en els nostres codis.
                    Comprova-ho:

                    D'aquesta manera, el teu codi es torna interactiu!
                example_code: |
                    ```
                    nom {is} {ask} Com et dius?
                    {print} Hola nom
                    edat {is} {ask} Quants anys tens?
                    {print} nom t√© edat anys.
                    ```
                story_text_2: |
                    ### Exercici
                    A la pestanya anterior heu practicat a establir variables amb la comanda `{is}`.
                    Has creat almenys 3 variables i les has utilitzat amb una comanda d'impressi√≥.
                    Ara, en lloc d'establir les variables, volem que les facis interactives, com hem fet al nostre exemple.

                    Copia el teu codi de la pestanya anterior i fes que les variables siguin interactives mitjan√ßant la comanda `{ask}`.
                example_code_2: |
                    ```
                    animal_preferit {is} {ask} Quin √©s el teu animal preferit?
                    {print} M'agrada el animal_preferit
                    ```
            18:
                story_text: El canvi final que haurem de fer per obtenir codi Python √©s canviar `{ask}` per `{input}`.
                example_code: "```\n{print}('El meu nom √©s Hedy!')\nnom = {input}('Com et dius?')\n{print}('El teu nom √©s ', nom)\n```\n"
        name: '{ask}'
    blackjack:
        description: Intenta apropar-te tant com puguis a 21
        default_save_name: Blackjack
        levels:
            17:
                story_text: "El Blackjack √©s un joc de cartes senzill en el qual has d‚Äôapropar-te tant com puguis a 21 punts. Reps dues cartes. Cada carta val el seu valor num√®ric, i les figures (Sota, Reina i Rei) valen 10 punts.\nL'As val o b√© 1 o b√© 11 punts (pots triar). La banca, el teu oponent, qui reparteix, tamb√© rep dues cartes.\nSi ho vols, pots rebre una altra carta, i els seus punts s'afegiran al teu total. La banca tamb√© pot triar rebre una altra carta.\nPer√≤ vigila de no superar els 21 punts, perqu√® si ho fas, perds!\nEl jugador que s‚Äôapropa m√©s a 21, sense superar-lo, guanya!\n\n### Exercici\nEn aquesta aventura, codifiquem la primera part del nostre joc de Blackjack. Crearem una funci√≥ per calcular quants punts val una carta.\n\n***Defineix les variables***\nComen√ßa fent una llista de totes les cartes, del 2 a l'As. A continuaci√≥, fes una llista de les figures, √©s a dir, la Sota, la Reina i el Rei. Despr√©s tria una carta aleat√≤ria de la llista de cartes per assignar-la a carta_1.\n\n***Crea una funci√≥ per calcular els punts***\nCrea una funci√≥ que calculi quants punts val una carta.\nTotes les figures valen 10 punts, l'As en val 11 i totes les altres cartes valen el seu n√∫mero.\nRetorna la variable `points` al final de la funci√≥.\n\n***Prova la funci√≥***\nProva si la teva funci√≥ funciona correctament. Completa la primera comanda print omplint quina carta has tret. Aleshores completa la segona l√≠nia cridant la funci√≥ amb carta_1.\nExecuta el codi unes quantes vegades. Est√†s satisfet amb els resultats? Genial! Aleshores pots eliminar la part de proves i avan√ßar a la seg√ºent pestanya!\n"
                example_code: "```\n{print} 'BLACKJACK'\n\n# Defineix les variables\ncartes = _\ncartes_obertes = _\ncarta_1 =\n\n# Crea una funci√≥ per a calcular els punts\n{define} calcular_punts {with} carta:\n    {if} carta {in} cartes_obertes:\n        points = _\n    {elif} _\n        _\n    {else}:\n        _\n    _ points\n\n# Testeja la teva funci√≥\n{print} 'La teva carta √©s ' _\n{print} 'Aquesta carta val ' _ ' points'.\n```\n"
        name: Blackjack
    calculator:
        name: Calculadora
        default_save_name: Calculadora
        description: Crea una calculadora
        levels:
            6:
                example_code: |
                    ```
                    nombre_1 = {ask} 'Escriu el primer nombre:'
                    nombre_2 = {ask} 'Escriu el segon nombre:'
                    resposta_correcta = nombre_1 * nombre_2
                    {print} nombre_1 ' per ' nombre_2 ' √©s ' resposta_correcta
                    ```
                example_code_2: |
                    ```
                    resposta_correcta = 11 * 27
                    resposta = {ask} 'Quant √©s 11 per 27?'
                    {if} resposta {is} _ {print} 'Bona feina!'
                    {else} {print} 'Incorrecte! Era ' _
                    ```
                story_text_3: |
                    **Extra** Tamb√© pots deixar que l'ordinador faci productes aleatoris per ell mateix utilitzant `{random}`.
                example_code_3: |-
                    ```
                    nombres = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    nombre_1 = _
                    nombre_2 = _
                    resposta_correcta = nombre_1 * nombre_2
                    resposta_dada = {ask} 'Quin √©s ' nombre_1 ' per ' nombre_2 '?'
                    {if} _
                    {else} _
                    ```
                story_text_2: "### Exercici\nLa calculadora de m√©s amunt calcular√† la resposta per a tu, per√≤ tamb√© pots fer un programa per posar a prova les teves habilitats matem√†tiques, com aquest:\nOmple els espais en blanc per completar-lo!\n"
                story_text: "Ara que ja pots fer mates, pots fer la teva pr√≤pia calculadora!\n"
            9:
                story_text: |
                    In a previous level you've created a calculator, in this level you can expand that code so it asks multiple questions.

                    ### Exercise 1
                    Can you finish line 10 to get the code to work?

                    ### Exercise 2
                    Give the player feedback when the enter an answer, like `{print} 'Correct!'` or `{print} 'Wrong! The correct answer is ' correct_answer`.
                example_code: "```\npunts = 0\n{repeat} 10 {times}\n    nombres = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    nombre_1 = nombres {at} {random}\n    nombre_2 = nombres {at} {random}\n    resposta_correcta = nombre_1 * nombre_2\n    {print} 'Quant fa ' nombre_1 ' per ' nombre_2 '?'\n    answer = {ask} 'Escriu la teva resposta aqu√≠...'\n    {print} 'La teva resposta √©s ' answer\n    {if} _ {is} _\n        punts = punts + 1\n{print} 'Bona feina! la teva puntuaci√≥ √©s ... ' punts ' sobre 10!'\n```\n"
            12:
                story_text: |
                    En aquest nivell, pots fer una calculadora que funcioni amb nombres decimals.

                    ### Exercici 1
                    Omple els buits per completar la calculadora. Recorda utilitzar un punt i no una coma per als nombres decimals.

                    ### Exercici 2
                    Crea un nou programa de pr√†ctica matem√†tica, per√≤ ara utilitza nombres decimals. 
                    Crea una llista de nombres, tria'n dos per multiplicar i deixa que el jugador respongui. 
                    I, per descomptat, has de validar la resposta! **Extra** Augmenta la dificultat afegint vides: un jugador perd una vida per cada resposta incorrecta i el joc acaba despr√©s de tres respostes incorrectes.
                example_code: |
                    ```
                    nombre1 = {ask} 'Quin √©s el primer nombre?'
                    nombre2 = {ask} 'Quin √©s el segon nombre?'
                    resposta = _
                    {print} nombre1 ' m√©s ' nombre2 ' √©s ' _
                    ```
            13:
                example_code: |
                    ```
                    resposta1 = {ask} 'Quin √©s 10 per 7?'
                    resposta2 = {ask} 'Quin √©s 6 per 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
                story_text: "### Exercici 1\nFem que el programa de pr√†ctica sigui una mica m√©s dif√≠cil. Ara el jugador ha de respondre correctament dues preguntes. Omple els espais en blanc per completar el programa.\n\n### Exercici 2\nDe vegades, els c√†lculs tenen m√∫ltiples respostes correctes. Per exemple, 10 es pot dividir entre 5 i entre 2. Aix√≠, la pregunta \"Quin nombre divideix 10?\" es pot respondre amb 2 o amb 5.\nPlanteja una pregunta de c√†lcul que tingui m√∫ltiples respostes correctes, demana al jugador que la respongui i determina si √©s correcta utilitzant `{or}`.\nNeteja l'editor de codi i crea la teva pr√≤pia soluci√≥.\n"
            14:
                example_code: |
                    ```
                    {define} calculate_mean_grade
                        total = 0
                        {for} i {in} {range} 1 {to} 4
                            grade = {ask} _
                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
                    ```

                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
                story_text: "En aquesta aventura construir√†s una calculadora que calcula la teva nota mitjana. Si aconsegueixes que la teva calculadora funcioni, pots continuar amb la pr√≤xima aventura, que et permetr√† afegir dues funcions extres.\n\n### Exercici 1\nOmple els espais en blanc per fer que la calculadora funcioni.\n* Comen√ßa amb la quarta l√≠nia, afegeix una pregunta per saber quina nota ha tret l‚Äôestudiant.\n* A la cinquena l√≠nia vols calcular el total de totes les notes, aix√≠ que el total = total + nota.\n* Despr√©s fixem el valor de retorn. Volem retornar la mitjana, aix√≠ que el total dividit pel nombre de proves (4).\n* Finalment, acabem el codi cridant la funci√≥ a la l√≠nia 8.\n\nHo has aconseguit? Genial! T‚Äôagradaria afegir encara m√©s funcions a la teva calculadora? **Aquesta aventura continua a la pr√≤xima pestanya!**\n"
            10:
                story_text: "Aquest joc de la calculadora t'ajuda a practicar les taules de multiplicar!\n### Exercici\nOmple els espais en blanc. Volem que aquest programa faci aquestes preguntes al jugador:\n```\nQuant fa 1 per 1?\nQuant fa 1 per 2?\nQuant fa 1 per 3?\nQuant fa 2 per 1?\nQuant fa 2 per 2?\nQuant fa 2 per 3?\nQuant fa 3 per 1?\nQuant fa 3 per 2?\nQuant fa 3 per 3?\n_\n```\n"
                example_code: "```\nnumeros = 1, 2, 3\n{for} _\n    {for} _\n        resposta = {ask} _\n        correcta = numero_1 * numero_2\n        {if} resposta {is} correcta\n            {print} 'Bona feina!'\n        {else}\n            {print} 'Aix√≤ √©s incorrecte. La resposta correcta era ' correcta\n```\n"
            11:
                example_code: "```\nnum = 10\n{for} i {in} {range} 1 {to} 10\n    {print} i * num\n```\n"
                story_text: "Amb una `{for}` pots simplificar el programa de pr√†ctica de taules de multiplicar.\n\n### Exercici 1\nMillora el codi de l'exemple de manera que imprimeixi una taula de multiplicar ben presentada: <br> \"1 per 10 √©s 10\", \"2 per 10 √©s 20\", etc.\n\n### Exercici 2\nTorna al teu codi de multiplicaci√≥ de nivell 10 i modifica'l perqu√® faci servir una `{for}` i `{range}`.\n"
            15:
                story_text: "Pots afegir el bucle `{while}` al joc de la calculadora que has apr√®s a fer en un nivell anterior.\nAix√≤ assegura que el jugador no pugui continuar a la seg√ºent pregunta si respon incorrectament.\n\n### Exercici\nAfegeix el bucle `{while}` a la funci√≥, pregunta al jugador quant fa nombre_1 per nombre_2 i imprimeix la seva resposta.\nDespr√©s `{call}` la funci√≥.\n"
                example_code: "```\n{define} nova_pregunta\n    nums = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    num_1 = nums {at} {random}\n    num_2 = nums {at} {random}\n    correcte = num_1 * num_2\n    resposta = 0\n    _\n    _\n    _\n    {print} 'Ben fet!'\n\n{print} 'Respon correctament 10 vegades per guanyar!'\n{for} i {in} {range} 1 {to} 10\n    _\n{print} 'Enhorabona!! Has guanyat!'\n```\n"
    clear_command:
        default_save_name: comanda_netejar
        description: comanda {clear}
        name: '{clear}'
        levels:
            4:
                story_text: "√âs hora d‚Äôuna nova comanda! Amb `{clear}` pots esborrar tot el text de la pantalla de sortida. D‚Äôaquesta manera pots evitar que la pantalla s‚Äôompli massa de text.\nCompte! Si fas servir una comanda `{clear}`, potser necessitar√†s utilitzar un `{sleep}` a sobre d‚Äôella. En cas contrari, Hedy esborrar√† la pantalla sense donar-te temps per llegir, tal com pots veure a l'exemple!\n"
                example_code: "```\n{print} '3'\n{clear}\n{print} '2'\n{clear}\n{print} '1'\n{clear}\n{print} 'espera...'\n{sleep} 3\n{clear}\n{print} 'Sorpresa!'\n```\n"
    debugging:
        name: depuraci√≥
        default_save_name: depuraci√≥
        description: l'aventura de depurar
        levels:
            1:
                story_text: |-
                    Benvingut a una aventura de depuraci√≥. Depurar un codi significa eliminar errors en el codi.
                    Aix√≤ vol dir que en aquestes aventures de depuraci√≥, t'ensenyarem codi que encara no funciona.
                    Haur√†s de descobrir qu√® est√† malament i corregir els errors.

                    ### Exercici
                    Depura aquest codi. Bona sort!
                example_code: |
                    **Atenci√≥!, cal depurar aquest codi!**
                    ```
                    {print} M'encanta programar
                    T'agrada programar tamb√©?
                    {echo}
                    {print} Quins s√≥n les teves aficions?
                    {echo} Les teves aficions s√≥n
                    ```
            2:
                story_text: |-
                    Benvingut a una aventura de depuraci√≥. Depurar un codi significa eliminar errors en el codi.
                    Aix√≤ vol dir que en aquestes aventures de depuraci√≥, et donarem un codi que encara no funciona.
                    Haur√†s de descobrir qu√® est√† malament i corregir els errors.

                    ### Exercici
                    Depura aquest codi. Bona sort!
                example_code: |
                    **Atenci√≥!, cal depurar aquest codi!**
                    ```
                    destinacio {ask} On vas de vacances?
                    {print} El vol surt a les 3 de la tarda.
                    {ask} Ja has fet el check-in del teu equipatge?
                    {echo}
                    {print} Deixa'm imprimir-te la targeta d'embarcament.
                    {sleep}
                    Aqu√≠ tens! Que tinguis un bon viatge!
                    ```
            3:
                story_text: |-
                    Benvingut a una aventura de depuraci√≥. Depurar un codi significa eliminar errors en el codi.
                    Aix√≤ vol dir que en aquestes aventures de depuraci√≥, et donarem un codi que encara no funciona.
                    Haur√†s de descobrir qu√® est√† malament i corregir els errors.

                    ### Exercici
                    Depura aquest codi. Bona sort!
                example_code: |
                    **Atenci√≥!, cal depurar aquest codi!**
                    ```
                    opcions_pelicula {is} dracula, fast and furious, solo en casa, barbie 
                    pelicula_escollida {is} movies {at} {random}
                    {print} Aquesta nit veurem _pelicula_escollida
                    com {ask} T'agrada aquesta pel¬∑l√≠cula?
                    {print} Dem√† veurem una altra cosa.
                    {add} pelicula_escollida {to_list} opcions_pelicula
                    {print} Dem√† veurem pelicula_dema
                    pelicula_dema {is} opcions_pelicula {at} {random}
                    Anir√© a buscar les crispetes! {print}
                    ```
            4:
                story_text: |-
                    ### Exercici
                    Depura aquest codi. Bona sort!
                example_code: |
                    **Atenci√≥!, cal depurar aquest codi!**
                    ```
                    {print} 'Benvingut a la biblioteca en l√≠nia!'
                    {ask} Quin g√®nere de llibres t'agrada?
                    {print} T'agrada el g√®nere
                    autor {is} {ask} 'Qui √©s el teu autor preferit?'
                    {print} 'autor √©s el teu autor preferit'
                    {print} Hmmm... crec que hauries de provar... llibres {at} {random}
                    ```
            5:
                story_text: |-
                    ### Exercici
                    Depura aquest codi. Bona sort!
                example_code: "**Atenci√≥!, cal depurar aquest codi!**\n```\n{print} Benvinguts a la piscina Hedy!\nclasse {is} {ask} \"Llest per unir-te a la classe d'avui?\"\n{if} classe s√≠\n{print} 'Fant√†stic! t'uneixes a una classe\n{print} {else} \"No t'uneixes a cap classe\"\ndescompte {is} 'Tens un codi de descompte?'\n{if} descompte {is} s√≠\ndescompte_resposta {is} {ask} 'Quin √©s el teu codi de decompte?'\ndecompte_codis = Senior4231, Estudiant8786, NouMembre6709\n{if} descompte_resposta {is} {in} decompte_codis\n{print} 'Seran 3,50‚Ç¨'\n'Seran 5,50‚Ç¨'\n{print} 'Passi-ho b√© nedant!'\n```\n"
            6:
                story_text: |-
                    ### Exercici
                    Depura aquest codi. Bona sort!
                example_code: "**Atenci√≥!, cal depurar aquest codi!**\n```\n{print} 'M√°quina expenadora'\nproducte_escollit = {ask} 'Selecciona un producte siusplau'\n1_euro_producte = cocacola fanta suc aigua\n2_euro_producte = xocolata, galetes, barreta de muesli\n3dollar_prodcuts = patates xips, magdalena, embotit\n{if} chosen {is} {in} 1_euro_producte\npreu = 1\n{if} producte_escollit {is} 2_euro_producte\npreu = 2\n{else} producte_escollit {in} 3_euro_producte\npreu = 3\nquantitat_productes = '{ask} Quants ' producte_escollit vols escollir?'\ntotal = preu + quantitat_producte\n{print} 'Seran ' preu '‚Ç¨ siusplau'\n```\n"
            7:
                story_text: |-
                    ### Exercici
                    Sorpresa! Aquest programa sembla m√©s una sortida que un codi. I, tanmateix, no volem que simplement afegeixis comandes `{print}` davant de cada l√≠nia.
                    Arregla aquest programa per convertir-lo en la can√ß√≥ infantil 'Fr√®re Jacques' utilitzant la comanda {repeat}, √©s clar!
                example_code: |
                    **Atenci√≥!, cal depurar aquest codi!**
                    ```
                    Fr√®re Jacques, fr√®re Jacques,
                    Dormez-vous? Dormez-vous?
                    Sonnez les matines! Sonnez les matines!
                    Ding, dang, dong. Ding, dang, dong.
                    ```
            8:
                story_text: |-
                    ### Exercici
                    Depura aquest codi. Bona sort!
                example_code: |-
                    **Atenci√≥!, cal depurar aquest codi!**
                    ```
                    {print} 'Benvinguts a la botiga de manicura i pedicura Hedy!'
                    parts_cos = {ask} 'Avui vols fer-te les ungles dels peus o de les mans? o ambdues?'
                    {if} parts_cos {is} ambdues
                            {print} Costar√† 25‚Ç¨'
                            preu = 25
                        {else}
                            {print} Costar√† 18$'
                            preu = 18
                    color = {ask} De quin color ho voldries?
                    brillibrilli = {ask} "T'animes a posar-hi brillibrilli?"
                    {if} brillibrilli {is} s√≠
                        {print} 'Hi haur√† un c√†rrec de 3 euros addicionals'
                    preu = preu + 3
                    {else} {print} 'No brillibrilli,' {print} 'per tant, no hi haur√† cap c√†rrec addicional'
                    {sleep} 5
                    {print} 'Fant√†stic! Costar√† ' preu '‚Ç¨ siusplau!'
                    {print} 'Merci! Ad√®u-siau!'
                    ```
            9:
                story_text: |-
                    ### Exercici
                    Depura aquest codi. Bona sort!
                example_code: |
                    **Atenci√≥!, cal depurar aquest codi!**
                    ```
                    {print} "Benvingut a la nostra botiga d'entrepans"
                    quantitat "Quants entrepans t'agradaria comprar?"
                    {repeat} quantitat {times}
                    {ask} {is} {ask} "Quin tipus de pa t'agradaria per al teu entrep√†?"
                    tipus_de_pa {is} blanc, blat, s√®gol, all, sense gluten
                    {if} pa_elegit in tipus_de_pa
                    {print} "Excel¬∑lent!"
                    {else}
                    "Ho sento, no venem aix√≤"
                    guarnicio {is} {ask} "Quin tipus de guarnici√≥ t'agradaria?"
                    salsa {is} {ask} "Quin tipus de salsa t'agradaria?"
                    {print} Un pa_elegit amb guarnicio i salsa.
                    preu = quantitat * 6
                    {print} "Seran " preu " euros, si us plau"
                    ```
            10:
                story_text: |-
                    ### Exercici
                    Depura aquest codi. Bona sort!
                example_code: |
                    **Atenci√≥!, cal depurar aquest codi!**
                    ```
                    noms = Muad Hasan Samira Noura
                    activitats = volar un estel, anar a nedar, fer senderisme, posar-se moreno
                    {for} nom {is} noms
                    {print} A la platja, nom li encanta activity {at} {random}
                    ```
            11:
                story_text: |-
                    ### Exercici
                    Depura aquest programa de calendari. La sortida d'aquest programa hauria de semblar una llista de dates.
                    Per exemple:

                    ```
                    Calendari de Hedy
                    Tots els dies de novembre:
                    1 de novembre
                    2 de novembre
                    3 de novembre
                    ```
                    I aix√≠ successivament.

                    Tingues en compte que has de provar el teu codi amb molta cura per al mes de febrer, ja que la quantitat de dies en aquest mes canvia als anys de trasp√†s.
                example_code: |
                    **Atenci√≥!, cal depurar aquest codi!**
                    ```
                    {print} "Calendari de Hedy"
                    mesos_amb_31_dies = Gener, Mar√ß, Maig, Juliol, Setembre, Octubre, Desembre
                    mesos_amb_30_dies = Abril, Juny, Agost, Novembre
                    mes = {ask} "Quin mes t'agradaria veure?"
                    {if} mes {in} mesos_amb_31_dies
                        dies = 31
                        {if} mes {in} mesos_amb_30_dies
                            dies = 30
                    {if} mes = Febrer
                        anys_de_trasp√†s = 2020, 2024, 2028, 2036, 2040, 2044, 2028
                        any = {ask} "Quin any √©s?"
                    {if} any {in} anys_de_trasp√†s
                        dies = 29
                    {else}
                        dies = 28

                    {print} "Aqu√≠ tens tots els dies de " mse
                    {for} i {in} {range} 1 {to} dies
                        {print} mes i
                    ```
            12:
                story_text: |-
                    ### Exercici
                    Depura aquest codi. Bona sort!
                example_code: |
                    **Atenci√≥!, cal depurar aquest codi!**
                    ```
                    {define} saludar
                    greetings = "Hola", "Hola a tots", "Bona tarda"
                        {print} greetings {at} {random}

                    {define} prendre_comanda
                        menjar = {ask} "Qu√® t'agradaria menjar?"
                        {print} "Un menjar"
                        beguda = "Qu√® t'agradaria beure?"
                        {print} "Una " beguda
                        mes = {ask} "Vols alguna cosa m√©s?"
                            {if} mes {is} "no"
                        {print} "Molt b√©"
                            {else}
                            {print} "I " mes
                    {print} "Gr√†cies"

                    {print} "Benvingut al nostre restaurant"
                    persones = {ask} "Quantes persones sou aquesta nit?"
                    {for} i {in} {range} 0 {to} persones
                        {call} saludar_client
                    ```
            13:
                story_text: |-
                    ### Exercici
                    Depura aquest codi. Bona sort!
                example_code: |
                    **Atenci√≥!, cal depurar aquest codi!**
                    ```
                    {define} recomanacio_pelicula {with} nom
                        pelicules_accio = "Die Hard", "Fast and Furious", "Malditos Bastardos"
                        pelicules_romantiques = "Love Actually", "Barcelona nit d'estiu", "Titanic"
                        pelicules_comedia = "Mr Bean", "Barbie", "La casa en flames"
                        pelicules_nens = "Tintin", "Les tres bessones", "Inside out"
                        {if} nom {is} "Camila" {or} nom {is} "Manel"
                            pelicula_recomanada = pelicules_nens {at} {random}
                        {if} nom {is} "Pere" {or} "Gabriella"
                                estat_d_√†nim = {ask} "Quin estat d'√†nim tens?"
                            {if} estat_d_√†nim {is} "acci√≥"
                                pelicula_recomanada = pelicules_accio {at} {random}
                            {if} estat_d_√†nim {is} "romantica"
                                pelicula_recomanada = pelicules_romantiques
                            {if} estat_d_√†nim {is} "comedia"
                                pelicula_recomanada = pelicules_comedia {at} {random}

                    {print} "Et recomanaria " pelicula_recomanada " per " nom

                    nom = {ask} "Qui est√† mirant?"
                    recomanacio = {ask} "Vols una recomanaci√≥?"
                    {if} recomanacio {is} "s√≠"
                    {print} recomanacio_pelicula {with} nom
                    {else}
                    {print} "Cap problema!"
                    ```
            14:
                story_text: |-
                    ### Exercici
                    Depura aquest codi. Bona sort!
                example_code: |
                    **Atenci√≥!, cal depurar aquest codi!**
                    ```
                    {define} calcular_pulsacions
                        {print} "Pressiona els dits suaument contra el costat del teu coll"
                        {print} "(just sota de la mand√≠bula)"
                        {print} "Conta el nombre de pulsacions que sents durant 15 segons"
                        pulsacions == {ask} "Quantes pulsacions sents en 15 segons?"
                        pols = pulsacions * 4
                        {print} "El teu pols √©s " pols
                        {if} pols >= 60 {or} pols <= 100
                            {print} "El teu pols sembla estar b√©"
                        {else}
                            {if} pols > 60
                                {print} "El teu pols sembla massa baix"
                            {if} pols < 100
                                {print} "El teu pols sembla massa alt"
                            {print} "Potser hauries de contactar amb un professional m√®dic"

                    mesurar_pulsacio = {ask} "Vols mesurar el teu pols?"
                    {if} mesurar_pulsacio = "s√≠"
                        {call} calcular_pulsacions
                    {else}
                        "Cap problema"
                    ```
            15:
                story_text: |-
                    ### Exercici
                    Depura aquesta hist√≤ria infantil aleat√≤ria. Bona sort!
                example_code: |
                    **Atenci√≥!, cal depurar aquest codi!**
                    ```
                    noms = "Tanya", "Romy", "Kayla", "Aldrin", "Ali"
                    verbs = "caminant", "saltant", "ciclant", "conduint", "corrent"
                    llocs = "en un cim", "al supermercat", "cap a la piscina"
                    llocs_on = "darrera d'un arbre", "sota d'una taula", "dins d'una caixa"
                    sons = "una trompeta", "un xoc de cotxes", "un tro"
                    causes_de_sorolls= "un televisor", "un nen amb petards", "un elefant m√†gic", "un somni"

                    elegit_nom = noms {at} {random}
                    elegit_verb = verbs {at} {random}
                    elegit_lloc = llocs {at} {random}
                    elegit_so = sons {at} {random}
                    elegit_lloc = llocs_on {random}
                    elegit_causa = causes_de_sorolls {at} {random}

                    {print} elegit_nom " estava " elegit_verb " " elegit_lloc
                    {print} "quan de sobte van sentir un so com " sounds {at} {random}
                    {print} elegit_nom " va mirar al seu voltant, per√≤ no va poder descobrir d'on venia el soroll"
                    {print} elegit_nom " es va amagar " elegit_lloc
                    {print} "Van intentar mirar al seu voltant, per√≤ no van poder veure res des d'all√†"
                    amagat = "s√≠"
                    {while} amagat = "s√≠"
                        {print} elegit_nom " encara no veia res"
                    resposta = {ask} "Es mou " elegit_nom " del seu lloc d'amagat?"
                        {if} resposta = "s√≠"
                            amagat == "no"
                    {print} elegit_nom " es va moure de " elegit_lloc
                    {print} "I llavors van veure que nom√©s era " elegit_causa
                    {print} elegit_nom " va riure i va continuar amb el seu dia"
                    {print} "Fi"
                    ```
            16:
                story_text: |-
                    ### Exercici
                    Depura aquest codi. Bona sort!
                    Consell: Assegura't que nom√©s vegis la teva puntuaci√≥ una vegada al final.
                example_code: |
                    **Atenci√≥!, cal depurar aquest codi!**
                    ```
                    pa√≠s = ['Pa√Øsos Baixos', 'Catalunya', 'Turquia', 'Zimbabwe', 'Tail√†ndia', 'Pa√≠s Basc', 'Per√∫', 'Austr√†lia', '√çndia', 'Romania']
                    capitals = 'Amsterdam', 'Barcelona', 'Istanbul', 'Harare', 'Bangkok', 'Bilbao', 'Lima', 'Canberra', 'Nova Delhi', 'Bucarest'
                    puntuaci√≥ = 0
                    {for} i {in} {range} 0 {to} 10
                        resposta = {ask} 'Quina √©s la capital de ' pa√≠s[i]
                        correcte = capitals[i]
                        {if} resposta = correcte
                            {print} 'Correcte!'
                        puntuaci√≥ = puntuaci√≥ + 1
                        {else}
                            {print} 'Incorrecte, ' capitals[i] ' √©s la capital de ' pa√≠s[i]
                    {print} 'Has obtingut ' puntuaci√≥ ' de 10'

                    ```
            17:
                story_text: |-
                    ### Exercici
                    Depura aquest codi. Bona sort!
                example_code: |
                    **Atenci√≥!, cal depurar aquest codi!**
                    ```
                    {define} comanda_menjar
                        ingredients = {ask} "de pepperoni, de tonyina, vegetariana o de formatge?"
                        mida = {ask} "gran, mitjana o petita?"
                        nombre_de_pizzas = {ask} "Quantes d'aquestes pizzes voldries?"

                        {print} "HAS ORDENAT"
                        {print} nombre_de_pizzas " mida pizza " ingredients

                    {define} comanda_beure
                        beguda = {ask} "aigua, cola, te gelat, limonada o caf√®?"
                        nombre_de_bebides = {ask} "Quantes d'aquestes begudes voldries?"

                        {print} "HAS ORDENAT"
                        {print} nombre_de_bebides " " beguda

                    "Benvingut a Hedy pizza"
                    m√©s_comanda = {ask} "Voldries demanar una pizza?"
                    {while} m√©s_comanda = "s√≠"
                        {return} comanda_menjar
                        m√©s_comanda = {ask} "Voldries demanar una pizza?"
                    m√©s_bebides = {ask} "Voldries demanar alguna beguda?"
                    {while} m√©s_bebides = "s√≠"
                        {call} comanda_beure
                        m√©s_bebides = {ask} "Voldries demanar m√©s begudes?"


                    {print} "Gr√†cies per la teva comanda!"
                    ```
            18:
                story_text: |-
                    ### Exercici
                    Depura aquest programa d'Old MacDonald del nivell 16. Bona sort!
                example_code: |
                    **Atenci√≥!, cal depurar aquest codi!**
                    ```
                    animals = ['un porc', 'un gos', 'una vaca']
                    sons = ['oink', 'bub', 'muu']
                    {for} i {in} {range} 1 {to} 3
                        animal = animals[i]
                        so = sons[i]
                        {print} 'En MacDonald viu al camp'
                        {print} 'IA IA O!'
                        {print} 'hi ha ' animal ' pasturant'
                        {print} 'IA IA O!'
                        {print} 'Fa ' so so ' per aqu√≠'
                        {print} 'i fa ' so so ' per all√†'
                        {print} so ' per aqu√≠'
                        {print} so ' per all√†'
                        {print} 'tot arreu un ' so so
                    ```
    default:
        name: Introducci√≥
        description: Explicaci√≥ del nivell
        levels:
            1:
                story_text: |
                    Benvingut a Hedy! Aqu√≠ pots aprendre a programar pas a pas.

                    Prova el codi tu mateix! El bot√≥ groc copia el codi d'exemple al teu camp de programaci√≥.
                    Despr√©s, prem el bot√≥ verd 'Executa codi' sota del camp de programaci√≥ per executar el codi.

                    Preparat? Ves a la pestanya seg√ºent per aprendre com fer el teu propi codi!
                example_code: "```\n{print} Hola m√≥n!\n```\n"
            2:
                story_text: |
                    Enhorabona! Has arribat al nivell 2. Segurament ja has fet codis genials!
                    Durant el primer nivell t'haur√†s adonat que la comanda `{echo}` nom√©s pot guardar una pe√ßa d'informaci√≥ cada vegada.
                    Per exemple, a l'aventura del restaurant podies repetir el que el client volia menjar, o el que volia beure, per√≤ no tot d'una vegada.
                    Aix√≤ canvia al nivell 2. Al nivell 2 aprendr√†s a treballar amb variable que et permetran guardar m√∫ltiples peces d'informaci√≥ i imprimir-les a qualsevol lloc que vulguis.
                    om-hi!, anem a la seg√ºent pestanya!
                example_code: |
                    **Alerta! Aquest codi no funciona!**
                    A Hedy les comandes van canviant. Per exemple la comanda `{echo}` nom√©s funciona al nivell 1. En aquest nivell aprendr√†s una millor manera de respondre.

                    ```
                    {print} Benvingut a Hedy
                    {ask} Qu√® voldria per menjar?
                    {echo} Vost√© vol
                    {ask} Qu√® voldria per beure?
                    {echo} Vost√© vol
                    ```
            3:
                story_text: |
                    Al nivell anterior has apr√®s qu√® √©s una variable i com la pots utilitzar per fer les teves aventures de forma m√©s interactiva.
                    Per√≤... Hi ha moltes m√©s coses a fer amb les variables! Tamb√© pots utilitzar les variables per fer llistes.
                    Fins i tot pots deixar que Hedy esculli una paraula aleat√≤ria d'una llista, permetent-nos fer jocs reals!
                    Fes-hi una ullada a la seg√ºent pestanya!
            4:
                story_text: |
                    Als nivells anteriors has estat practicant amb les variables, i segurament t'has trobat amb el seg√ºent problema.
                    En intentar executar un codi com aquest:

                    Segurament volies imprimir

                    `My name is Sophie`

                    per√≤ Hedy ha impr√®s

                    `My Sophie is Sophie`.

                    En aquest nivell se soluciona aquest problema fent servir les cometes.
                example_code: |
                    ```
                    nom {is} Sofia
                    {print} El meu nom √©s nom
                    ```
            5:
                story_text: |
                    Als nivells anteriors has apr√®s a fer servir `{at} {random}` que feia que els jocs fossin diferents a cada execuci√≥.
                    Per√≤ realment no era interactiu, el jugador no tenia cap influ√®ncia amb el que passava al joc.

                    En aquest nivell aprendr√†s la comanda `{if}`, que et permet donar respostes diferents. D'aquesta manera per exemple podr√†s programar una contrasenya secreta pel teu ordinador.
                    Som-hi!, anem a la seg√ºent pestanya a descobrir la nova comanda!
                example_code: |
                    ```
                    contrasenya {is} {ask} 'Quina √©s la contrassenya correcta?'
                    ```
            6:
                story_text: |
                    Al nivell anterior has practicat amb `{ask}` i `{if}`. Ara per exemple pots preguntar als convidats qu√® volen per menjar.
                    Encara, per√≤ no pots calcular el preu del sopar per tothom.

                    En aquest nivell ser√† possible utilitzar la suma, resta i la multiplicaci√≥ als reus programes. D'aquesta manera podr√†s calcular preus al teu restaurant, tamb√© podr√†s afegir un codi secret per compartir-lo amb els teus amics i fam√≠lia.

                    Una altra opci√≥ d'aquest nivell ser√† programar el teu propi joc matem√†tic, i podr√†s ajudar al teu germanet o germaneta a practicar les multiplicacions.
                    Descobreix-ho tu mateix!
                example_code: |
                    ```
                    preu_menjar {is} 0
                    preu_beguda {is} 0
                    preu_total {is} 0
                    {print} 'Benvinguts a McHedy'
                    comanda {is} {ask} 'Qu√® voleu per menjar?'
                    {if} comanda  {is} hamburguesa preu_menjar {is} 5
                    {if} comanda  {is} patates preu_menjar {is} 2
                    beguda {is} {ask} 'Qu√® voleu per beure?'
                    {if} beguda {is} aigua preu_beguda {is} 0
                    {else} preu_beguda {is} 3
                    preu_total {is} preu_menjar + preu_beguda
                    {print} 'Seran ' preu_total ' euros, siusplau'
                    ```
            7:
                story_text: |
                    Bona feina! Has superat el nivell. Significa que has practicat amb les comandes `{if}` i `{else}`. Probablement, haur√†s notat que el teu codi √©s cada vegada m√©s llarg.
                    Per exemple quan vols programar la can√ß√≥ de 'Moltes felicitats'.

                    Hi ha molt de codi on repetim les mateixes paraules una vegada i una altra. Per sort a la seg√ºent pestanya aprendr√†s una soluci√≥ amb la comanda `{repeat}`. La comanda et permet repetir una l√≠nia de codi moltes vegades.
                example_code: |
                    ```
                    {print} 'moltes felicitats'
                    {print} 'moltes felicitats'
                    {print} 'et desitjem tots Hedy'
                    {print} 'moltes felicitats'
                    ```
            8:
                story_text: |
                    Ja has apr√®s com repetir una sola l√≠nia de codi. Aix√≤ pot ser molt √∫til, per√≤ no sempre suficient. A vegades pots voler repetir m√∫ltiples l√≠nies de cop.
                    Aquest nivell et permetr√† agrupar una parella de l√≠nies de codi i repetir-les de cop!
                example_code: |
                    ```
                    {repeat} 5 {times} {print} 'A la seg√ºent pestanya podr√†s repetir m√∫ltiples l√≠nies de cop!'
                    ```
            9:
                story_text: |
                    Bona feina! Has aconseguit un nou nivell! Al nivell anterior has apr√®s a fer servir m√∫ltiples l√≠nies de codi dins una comanda {if} o {repeat}. Encara, per√≤ no pots combinar-les...
                    Bones not√≠cies! En aquest nivell estar√† perm√®s situar un {if} dins d'un altre {if}, o dins d'una comanda {repeat}. Posar un bloc de codi dins d'un altre bloc de codi es diu anidament.                     ```Posar un bloc de codi dins d'un altre bloc de codi es diu anidament.
                example_code: |
                    ```
                    resposta = {ask} 'Est√†s llest per aprendre una cosa nova?'
                    {if} resposta {is} si
                    {print} 'Genial!, pots aprendre a fer servir la comanda repeat dins la comanda if!'
                        {print} 'Hurra!'
                        {print} 'Hurra!'
                        {print} 'Hurra!'
                    {else}
                        {print} 'Potser haur√†s de repassar el nivell anterior...'
            10:
                story_text: |
                    Ho est√†s fent molt b√©! En els nivells anteriors encara ens vam haver d'enfrontar a un petit problema. Has apr√®s a repetir l√≠nies, per√≤ qu√® passaria si volguessis canviar lleugerament la l√≠nia.
                    Per exemple, si vols cantar la can√ß√≥ 'Si ets feli√ß i ho saps'. Es veuria aix√≠:

                    Si tamb√© vols el seg√ºent vers 'pica de peus', i el seg√ºent, i el seg√ºent, hauries de canviar completament el codi.
                    En aquest nivell, aprendr√†s la comanda `{for}`, que et permet fer una llista d'accions i repetir el codi amb una altra acci√≥ cada vegada!
                    Fem-hi un cop d'ull!
                example_code: |
                    ```
                    {repeat} 2 {times}
                        {print} 'si ets feli√ß i ho saps pica de mans'
                    {print} 'si ets feli√ß i ho saps i ho vols fer saber a tothom'
                    {print} 'si ets feli√ß i ho saps pica de mans'
                    ```
            11:
                story_text: |
                    Has arribat al nivell 11! Ho est√†s fent genial! Als nivells superiors, Hedy es focalitza en ensenyar-te m√©s i m√©s el llenguatge Python.
                    A Python no hi ha la comanada `{repeat}`. Hi ha, per√≤ una comanda molt similar a {repeat}. No est√†s cur√≥s per saber com fer la comanda `{repeat}` a Python? Corre, ves a descobrir-ho!
            12:
                story_text: |
                    Potser has provat d'utilitzar n√∫meros en decimal a l'aventura del restaurant. Si ho has fet, probablement haur√†s notat que Hedy no els entenia i ho arrodonia.
                    A partir d'ara pots utilitzar nombres decimals.
                example_code: |
                    ```
                    hamburguesa = 5
                    beguda = 2
                    total = hamburguesa + beguda
                    print 'Has demanat una hamburguesa i una beguda '
                    print 'Costa ' total ' euros, siusplau'
                    ```
            13:
                story_text: |
                    Als nivells anteriors has apr√®s a posar dues comandes `{if}`, una dins d'una altra. Aix√≤ funciona b√©, per√≤ fa que els codis siguin llargs i poc pr√†ctics com aquest:

                    Aqu√≠, haur√†s d'introduir tant el nom d'usuari com la contrasenya correcta.
                    En aquest nivell aprendr√†s a fer servir la comanda `{and}` que ens permetr√† reduir considerablement la mida del codi i fer-lo m√©s entenedor.
                    Comprova-ho!
                example_code: |
                    ```
                    usuari = {ask} 'Quin √©s el teu usuari?'
                    contrassenya = {ask} 'Quina √©s la teva contrassenya?'
                    {if} usuari {is} 'Hedy'
                        {if} contrassenya {is} 'secreta'
                            {print} 'Benvingut/da Hedy!'
                        {else}
                            {print} 'Acc√©s denegat'
                    {else}
                        {print} 'Acc√©s denegat!'
                    ```
            14:
                story_text: |
                    Amb el codi d'exemple pots calcular si has aprovat una assignatura (per tant, una nota superior o igual a 5).
                    Pots observar que aquest codi √©s extremadament ineficient, a causa de la longitud excessiva de la l√≠nia 5.
                    Totes les notes de l'1 al 5 s'han programat per separat. Est√†s de sort, ja que en aquest nivell aprendr√†s a fer-ho molt m√©s curt!
                example_code: |
                    ```
                    primera_nota= {ask} 'Quina nota has tret al primer examen?'
                    segona_nota= {ask} 'Quina nota has tret al segon examen?'
                    suma = primera_nota + segona_nota
                    mitjana_nota = suma / 2
                    {if} mitjana_nota = 0 {or} mitjana_nota = 1 {or} mitjana_nota = 2 {or} mitjana_nota = 3 {or} mitjana_nota = 4
                        {print} 'Oh no! Has susp√©s....'
                    {else}
                        {print} 'Perfecte! Has aprovat!'
                    ```
            15:
                story_text: |
                    Pel joc de baix s'ha preparat el codi per assegurar-se que el jugador pot jugar tanta estona com vulgui ...
                    El codi, per√≤ √©s massa llarg i inefica√ß. A m√©s, qu√® passa si el jugador vol jugar 101 partides en lloc de 100?
                    No es pot jugar fins a l'infinit?
                    Durant aquest nivell aprendr√†s una comanda que fa la vida f√†cil amb tot aix√≤!
                example_code: |
                    ```
                    joc = 'en curs'
                    {for} i {in} {range} 1 {to} 100
                        {if} joc == 'en curs'
                            resposta = {ask} 'Vols continuar?'
                            {if} resposta == 'no'
                                joc = 'acabat'
                            {if} resposta == 'si'
                                {print} D'acord continuem'
                    ```
            16:
                story_text: |
                    En aquest nivell avan√ßarem una mica m√©s cap al codi Python real. Tamb√© aprendr√†s com combinar dues llistes.
                    D'aquesta manera pots programar com l'animal correcte s'associa al so correcte.
                    Perqu√® els dos codis d'aqu√≠ sota... Evidentment, no tenen cap sentit!
                example_code: |-
                    ```
                    animals = 'gallina', 'burra', 'vaca'
                    sons = 'cocococ', 'ii-ah', 'muuu'
                    {for} animal {in} animals
                        {print} 'Una ' animal ' fa ' sons {at} {random}
                    ```
                    Tamb√© pots provar-ho d'aquesta manera, per√≤...
                    ```
                    animals = 'gallina', 'burra', 'vaca'
                    sons = 'cocococ', 'ii-ah', 'muuu'
                    {for} animal {in} animals
                        {for} sound {in} sons
                            {print} 'Una ' animal ' fa ' sound
                    ```
                    Nota: Aquests codis no funcionaran aix√≠ en aquest nivell. Ves a la seg√ºent pestanya per veure quines parts has de corregir.
            17:
                story_text: |
                    Ara canviarem com funciona la indentaci√≥ una mica. Cada cop que necessitem una sagnia, necessitem `:` a la l√≠nia abans de la sagnia.

                    En aquest nivell tamb√© pots utilitzar una comanda nova: `{elif}`. `{elif}` √©s una abreviatura de `{else} {if}` i √©s molt √∫til per a quan vols fer 3 (o m√©s!) opcions.
                    Comprova-ho!
            18:
                story_text: |
                    L'enhorabona! Has assolit l'√∫ltim nivell de Hedy! El codi has creat aqu√≠ pot ser copiat a entorns reals de Python com replit o PyCharm, i pots continuar aprenent all√†!
                    Tingues en compte que aquell Python nom√©s pot llegir comandes en angl√®s, aix√≠ que si has estat utilitzant altres lleng√ºes, ara les haur√†s de posar en angl√®s.
        default_save_name: enter
    dice:
        name: Dau
        default_save_name: Dau
        description: Fes el teu dau
        levels:
            3:
                story_text: |
                    En aquest nivell podem escollir des d'una llista. D'aquesta manera podem fer que l'ordinador tiri un dau.
                    Busca i dona una ullada als jocs que tens a l'armari a casa.
                    Tens jocs amb un algun dau normal? (o algun amb un dau especial?) Pots recrear-los amb el seg√ºent programa.
                    Per exemple, el dau del joc del Pikomino t√© els n√∫meros de l'1 al 5 i en lloc del 6 un cuc de terra dibuixat.

                    ![Dau del Pikomino amb cares de l'1 al 5 m√©s un cuc](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    opcions {is} 1, 2, 3, 4, 5, cuc
                    {print} opcions {at} {random}!
                    ```
                example_code_2: |
                    ```
                    opcions {is} _
                    ```
                story_text_2: "### Exercici\nEls daus de l'exemple anterior s√≥n per a un joc espec√≠fic. Pots fer daus normals?\nO altres daus especials d'un joc diferent?\n"
            4:
                story_text: |
                    In this level we can make sentences with the die value in the sentence, with quotes of course.
                    This time the sample code is not quite complete. Can you finish the code?
            5:
                story_text: |
                    Afegirem les comandes `{if}` i `{else}` als nostres daus!

                    ### Exercici
                    Completa el codi d'exemple perqu√® el codi digui "Pots deixar de tirar" un cop hagis tirat un cuc. Ha de dir "Has de tornar a tirar" si has tirat qualsevol altra cosa.
                    **Extra** Potser vols recrear un dau d'un joc completament diferent. Tamb√© est√† b√©! Llavors, crea la teva pr√≤pia reacci√≥, per exemple, 's√≠' per a 6 i 'quina pena' per a qualsevol altra cosa.
                example_code: |
                    ```
                    opcions {is} 1, 2, 3, 4, 5, cuc
                    tirada {is} opcions {at} {random}
                    {print} 'Has tirat ' tirada
                    _ tirada {is} cuc {print} 'Pots parar de tirar.'
                    _ {print} 'Has de tornar a tirar'
                    ```
            6:
                story_text: |
                    En aquest nivell pots tornar a fer el dau del Pikomino (dau del cuc de terra), ara, per√≤ calcularem quants punts s'han aconseguit tirant el dau.
                    Com segurament ja saps, el cuc compta per 5 punts. Ara, despr√©s d'un llan√ßament, pots calcular immediatament quants punts has aconseguit amb la tirada.
                    Aquest √©s el codi per calcular els punts d'un dau:

                    ### Exercici
                    Pots fer el codi per obtenir la puntuaci√≥ total per a 8 daus? Per fer-ho, haur√†s de copiar i enganxar algunes l√≠nies del codi.
                example_code: |
                    ```
                    opcions = 1, 2, 3, 4, 5, cuc
                    punts= 0
                    tirada = opcions {at} {random}
                    {print} "Has tirat " tirada
                    {if} tirada {is} cuc punts = punts+ 5 {else} punts = punts + tirada
                    {print} "Aix√≤ s√≥n " punts " punts "
                    ```
                example_code_2: |
                    Has aconseguit calcular la puntuaci√≥ per a 8 daus? Segur que aix√≤ ha fet que el copy-paste tregui fum, oi? Ara ho farem m√©s f√†cil que al nivell 7!
            7:
                story_text: |
                    Tamb√© pots fer un dau en aquest nivell. Amb la comanda`{repeat}` pots tirar f√†cilment m√∫ltiples daus.

                    ### Exercici
                    Prova d'acabar el codi d'exemple! **Extra** Pensa en un joc que coneguis que impliqui un dau i programa'l utilitzant un `{repeat}`.
                example_code: |
                    ```
                    opcions = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
            10:
                story_text: |
                    ### Exercici
                    Est√† tothom trigant massa a llen√ßar els daus? En aquest nivell pots deixar que Hedy llenci tots els daus alhora!
                    Canvia els noms pels noms dels teus amics o familiars i completa el codi.
                example_code: |
                    ```
                    jugadors = Ann, John, Jesse
                    opcions = 1, 2, 3, 4, 5, 6
                    _ _ _ _
                        {print} jugador ' tira ' opcions {at} {random}
                        {sleep}
                    ```
            15:
                story_text: "### Exercici\nEn aquest nivell pots crear un petit joc en qu√® haur√†s de treure un 6 com m√©s r√†pidament millor.\nHem comen√ßat el codi, i ara et toca a tu fer que el joc funcioni!\n\nPrimer, afegeix un bucle `{while}` que comprovi si s‚Äôha tret un 6 o no.\nMentre no hagis tret un 6, tira el dau amb un nombre aleatori.\nImprimeix el que ha tret el jugador.\nAfegeix un intent al nombre d‚Äôintents.\nEspera un segon abans de tornar a tirar o, en cas que hagis tret un 6, abans que el joc acabi.\n"
                example_code: "```\nopcions = 1, 2, 3, 4, 5, 6\n{print} 'Tira un 6 tant r√†pid com puguis'\ntirat = 0\nintents = 0\n_\n_\n_\n_\n_\n{print} 'S√≠! Has tirat un 6 en ' intents ' intents.'\n```\n"
    dishes:
        name: Plats?
        default_save_name: Plats
        description: Utilitza l'ordinador per veure qui renta els plats.
        levels:
            3:
                story_text: |
                    Do you always disagree at home about who should wash the dishes or change the litter box today?
                    Then you can let the computer choose very fairly. You can program that in this level!
                    You first make a list of the members of your family. Then choose `{at} {random}` from the list.
                example_code: |
                    ```
                    gent {is} mama, papa, Emma, Sofia
                    {print} gent {at} {random} li toca rentar plats
                    ```
                story_text_2: |
                    Don't feel like doing the dishes yourself? Hack the program by removing your name from the list with the `{remove}` `{from}` command.
            4:
                story_text: |
                    With quotation marks you can make your dishwashing planning more beautiful.
                    This time the sample code is not quite complete.

                    Can you complete the code by filling the blanks? Every blank must be replaced with one word of symbol.

                    Tip: Don't forget the quotation marks!
                example_code: |
                    ```
                    gent {is} mama, papa, Emma, Sofia
                    {print} _ els plats son rentats per _
                    {sleep}
                    {print} gent {at} _
                    ```
            5:
                story_text: |
                    With the `{if}` you can now have more fun with choice in the program. You can have your program respond to the choice that the computer has made.

                    Can you finish the code so that it prints 'too bad' when it is your turn and otherwise 'yes!'?
                    Don't forget the quotes!
                example_code: "```\ngent {is} mama, papa, Emma, Sofia\nnetejador {is} gent {at} {random}\n_ netejador {is} Sofia {print} _ Pffff... em toca rentar plats _\n_ {print} 'per sort no hi ha plats perqu√® ' _ ' ja els est√† rentant'\n```\n"
            6:
                example_code: |
                    ```
                    gent = mama, papa, Emma, Sofia
                    emma_renta = 0
                    netejador = gent {at} {random}
                    {print} 'Li toca rentar plats a ' netejador 
                    {if} netejador {is} Emma emma_renta = emma_renta + 1
                    {print} "L'Emma rentar√† els plats aquesta setmana" emma_renta "vegades"
                    ```

                    Now you can copy lines 3 to 5 a few times (e.g. 7 times for a whole week) to calculate for a whole week again.
                    Do you make the code for the whole week?
                story_text_2: |
                    Si tens molta mala sort, el programa anterior podria triar-te per a rentar plats de tota la setmana! I aix√≤ no √©s just!
                    Per crear un sistema m√©s just, pots utilitzar l'ordre `{remove}` per eliminar la persona escollida de la llista. D'aquesta manera no haureu de tornar a rentar els plats fins que tothom hagi tingut el seu torn.

                    Dilluns i dimarts ja estan preparats per a tu! Pots afegir la resta de la setmana?
                    I... pots trobar una soluci√≥ per a quan la llista estigui buida?
                example_code_2: |
                    ```
                    gent = mama, papa, Emma, Sofia
                    netejador = gent {at} {random}
                    {print} "Dilluns renta: " netejador
                    {remove} netejador {from} gent
                    netejador = gent {at} {random}
                    {print} "Dimarts renta: " netejador
                    {remove} netejador {from} gent
                    ```
                story_text: "Quantes vegades rentar√† els plats cadasc√∫? √âs just? Pots comptar-ho en aquest nivell.\n"
            7:
                story_text: |
                    Amb el `{repeat}` pots repetir fragments de codi. Pots utilitzar-ho per calcular qui rentar√† els plats durant diversos dies!
                    ### Exercici
                    Utilitza l'ordre `{repeat}` per decidir qui ha de rentar els plats durant una setmana sencera. Cada espai en blanc s'ha d'omplir amb una comanda o n√∫mero!
                    **Extra** Pots pensar en altres tasques de la casa? Adapta el codi perqu√® decideixi sobre tres tasques dom√®stiques. No oblidis imprimir de quines tasques es refereix!
                example_code: |
                    ```
                    gent = mama, papa, Emma, Sofia
                    {repeat} _ _ {print} 'Li toca rentar plats a ' _ _ _
                    ```
            10:
                story_text: |
                    En aquest nivell pots fer un horari per a tota la setmana d'una manera f√†cil!

                    ### Exercici
                    Afegeix-hi una segona tasca, com passar l'aspiradora o endre√ßar, i assegura't que tamb√© estigui dividida durant tota la setmana.
                    <br> **Extra** El programa no √©s just, pots tenir mala sort i haver de rentar durnat tota la setmana. Com pots fer el programa m√©s just?
                example_code: |
                    ```
                    days = Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
                    names = mom, dad, Emma, Sophie
                    _ day _ days
                        {print} names {at} {random} ' does the dishes on ' day
                    ```
    elif_command:
        default_save_name: sino
        levels:
            17:
                example_code: "```\npremis = [\"1 mili√≥ d'euros\", \"un past√≠s de poma\", \"res\"]\nteu_premi = premis[{random}]\n{print} 'Has guanyat ' teu_premi\n{if} teu_premi == \"1 mili√≥ d'euros\" :\n    {print} 'Yeah! Ets ric!'\n{elif} teu_premi == 'un past√≠s de poma' :\n    {print} 'B√©... un past√≠s de poma!'\n{else}:\n    {print} 'M√©s sort a pla propera...'\n```\n"
                story_text: "En aquest nivell tamb√© pots fer servir una nova comanda: `{elif}`. `{elif}` √©s una combinaci√≥ de les paraules clau `{else}` i `{if}`, i la necessites quan vols fer 3 (o m√©s!) opcions.\nProva-ho!\n"
        name: '{elif}'
        description: '{elif}'
    for_command:
        default_save_name: per
        description: comanda {for}
        levels:
            10:
                story_text: |-
                    ## Per
                    En aquest nivell aprendrem una nova comanda anomenada `{for}`. Amb `{for}` pots fer una llista i utilitzar-ne tots els elements.
                    `{for}` crea un bloc, com `{repeat}` i `{if}`, de manera que totes les l√≠nies del bloc han de comen√ßar amb 4 espais.
                example_code: "```\nanimals = gossos, gats, ping√ºins\n{for} animal {in} animals\n    {print} \"M'encanten els \" animal\n```\n"
                story_text_2: "### Exercici\nAcaba aquest codi afegint `{for} action {in} actions` a la l√≠nia 2.\n"
                example_code_2: "```\naccions = pica de mans, pica de peus, crida Hurra!\n_\n    {repeat} 2 {times}\n        {print} 'Si ets feli√ß i ho saps, ' action\n        {sleep} 2\n    {print} 'Si ets feli√ß i ho saps, i ho vols fer saber a tothom'\n    {print} 'Si ets feli√ß i ho saps, ' action\n    {sleep} 3\n```\n"
            11:
                story_text: |-
                    In this level, we add a new form of the `{for}`. In earlier levels, we used `{for}` with a list, but we can also use `{for}` with numbers.
                    We do that by adding a variable name, followed by  `{in}` `{range}`. We then write the number to start at, `{to}` and the number to end at.
                    Try the example to see what happens! In this level again, you will need to use indentations in lines below the `{for}` statements.
                example_code: "```\n{for} comptador {in} {range} 1 {to} 10\n    {print} comptador\n{print} 'Llest o no. Ves que vinc!'\n```\n"
            17:
                story_text: "Ara canviem una mica la indentaci√≥. Cada vegada que necessitem una indentaci√≥, hem de posar `:` a la l√≠nia abans de la indentaci√≥.\n"
                example_code: "```\n{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Llest o no, ves que vinc!'\n```\n"
            18:
                story_text: "Finalment, convertirem `{for} i {in} {range} 1 to 5` en codi Python real, aix√≠:\n"
                example_code: "```\n{for} i {in} {range}(1,5):\n    {print} (i)\n```\n"
        name: '{for}'
    fortune:
        name: L'endev√≠
        default_save_name: L'endev√≠
        description: Deixa que Hedy predigui el futur
        levels:
            1:
                story_text: |
                    Have you ever been to a carnival and had your future predicted by a fortune teller? Or have you ever played with a magic eight ball?
                    Then you probably know that they can't really predict your future, but it's still fun to play!

                    In the upcoming levels you can learn how to create your own fortune telling machine!
                    In level 1 you can start off easy by letting Hedy introduce herself as a fortune teller and let her {echo} the players' answers.
                    Like this:
                example_code: |
                    ```
                    _ Hola, soc Hedy l'endevina
                    _ Qui ets tu?
                    _ Deixa'm donar una ullada a la meva bola de cristall
                    _ Veig... Veig...
                    _ El teu nom √©s
                    ```
                story_text_2: |
                    ### Exercici
                    Copia el codi d'exemple a la teva pantalla d'entrada i omple els espais en blanc per fer funcionar el teu codi.
                    **Extra** Canvia el codi i deixa que l'endevina no nom√©s predigui el teu nom, sin√≥ tamb√© la teva edat, el teu esport preferit o alguna altra cosa sobre tu mateix.
            3:
                story_text: |
                    In the previous levels you've created your first fortune telling machine, but Hedy couldn't really predict anything, only {echo}.
                    In this level you can use a variable and the `{at} {random}` command to really let Hedy choose an answer for you. Check out this code for instance:
                example_code: "```\n{print} S√≥c Hedy, l'endev√≠!\npregunta {is} {ask} Qu√® vols saber?\n{print} Aix√≤ √©s el que vols saber: pregunta\nrespostes {is} s√≠, no, potser\n{print} La meva bola de cristall diu...\n{sleep} 2\n{print} respostes {at} {random}\n```\n"
                story_text_2: "### Exercici\nAra, Hedy nom√©s pot respondre s√≠, no o potser. Pots donar-li m√©s opcions de resposta, com 'definitivament' o 'pregunta de nou'?\n"
            4:
                example_code: |
                    ```
                    _ Agrega les cometes a aquest codi _
                    {print} S√≥c Hedy l'endevina!
                    pregunta {is} {ask} Qu√® vols saber?
                    {print} Aquesta √©s la teva pregunta: ¬∑ ¬∑ pregunta
                    resposta {is} si, no, potser
                    {print} La meva bola de cristall diu...
                    {sleep} 2
                    {print} resposta {at} {random}
                    ```
                story_text: "### Exercici\nHem eliminat totes les cometes d‚Äôaquest codi d‚Äôexemple, pots afegir-les als llocs correctes?\n\n### Exercici 2\nTorna al nivell anterior i copia el teu codi de l'endev√≠. Fes que el codi funcioni en aquest nivell afegint les cometes als llocs correctes.\n"
            5:
                story_text: |
                    ### Exercici
                    En aquest codi d'exemple veur√†s com fer un programa endev√≠ que et permeti inclinar les possibilitats a favor teu. Aquest programa que fa trames sempre et diu que guanyar√†s la loteria, per√≤ els teus amics mai guanyaran.

                    Usa aix√≤ per fer el teu propi programa, sigues creatiu! Per exemple, pots crear un codi que predigui que:
                    * el teu equip esportiu preferit guanyar√† a tots els seus contrincants!
                    * s'elegir√† la teva pel¬∑l√≠cula preferida com a pel¬∑l√≠cula de la nit!
                    * guanyar√†s entrades pel teu espectacle preferit!
                    * ets el m√©s bonic/a de tots/es, com el mirall m√†gic de la Blancaneu.
                    Deixa que la teva imaginaci√≥ faci el treball!

                    El teu programa ha de tenir almenys 10 l√≠nies de codi i ha de contenir com a m√≠nim una comanda '{if}' i '{else}'.
                example_code: "```\namics {is} Jordi, Lucy, David\n{print} 'Puc predir la loteria de dem√†! i dir-te si et tocar√† o no!'\npersona {is} {ask} 'Qui ets tu?'\nresposta_bona {is} Visca! La guanyar√†s!, Segur que la guanyes dem√†!, tenim un guanyador!\nresposta_dolenta {is} Mala sort! Torna-ho a provar!, Ser√† una altra persona qui la guanyi, ets un perdedor!\n{if} persona {in} amics {print} resposta_bona {at} {random}\n{else} {print} resposta_dolenta {at} {random}\n```\n"
            6:
                example_code: |
                    ```
                    {print} "S√≥c Hedy l'endev√≠!"
                    {print} "Puc predir quants fills tindr√†s quan siguis gran"
                    edat = {ask} "Quants anys tens?"
                    germans = {ask} "Quants gemans tens?"
                    altura = {ask} "Quants centr√≠metres fas d'al√ßada?"
                    fills = altura / edat
                    fills = fills - germans
                    {print} 'Tindr√†s ...'
                    {sleep}
                    {print} fills ' fills!'
                    ```
                story_text: "En aquest nivell pots utilitzar matem√†tiques en les teves prediccions com a endev√≠. Aix√≤ et permet crear (totes les) f√≥rmules divertides per calcular el futur.\nPer exemple, podries calcular quants diners tindr√†s o quants fills tindr√†s quan siguis gran.\n\n\n\n### Exercici\nPots inventar la teva pr√≤pia m√†quina de prediccions (divertides)?\n"
            7:
                story_text: |
                    ### Exercici
                    Finalitza aquest programa que et diu si el teu enamorat t'estima o no.
                example_code: |
                    ```
                    {print} 'Tinc una flor amb p√®tals m√†gics'
                    {print} "Si agafes els p√®tals de la flor, et dir√† si el teu amor tamb√© t'estima"
                    quantitat = {ask} 'Quants p√®tals vols agafar?'
                    options = t'estima, no t'estima
                    _ _ _ _ options {at} {random}
                    ```
            8:
                story_text: |
                    En el pr√≤xim exemple pots fre que l'endev√≠ et faci diverses preguntes i tamb√© que les imprimeixi!

                    ### Exercici
                    Pots posar les comandes correctes als forats en blanc?
                example_code: |
                    ```
                    {print} "S√≥c Hedy l'endev√≠!"
                    {print} "Pots fer-me 3 preguntes."
                    answers = s√≠, no, potser
                    _ _ _
                       question = {ask} "Qu√® vols saber?"
                       {print} question
                       {sleep}
                       {print} "La meva bola de cristall diu..." answers {at} {random}
                    ```
            10:
                story_text: |
                    En aquest nivell aprendr√†s a programar el joc MASH (mansi√≥, apartament, cabana, casa). En aquest joc pots predir per a tots els jugadors al mateix temps com ser√† el seu futur.

                    ### Exercici
                    Omple els espais buits utilitzant la nova comanda que has apr√®s en aquest nivell.
                example_code: |
                    ```
                    cases = una mansi√≥, un apartment, una cabana, una casa
                    amor = ning√∫, un pr√≠ncep, el seu ve√≠, el seu amor verdader
                    mascotes= gos, gat, elefant
                    noms= Jana, Rai, Jaume
                    {for} nom {in} noms
                        {print} nom ' viu en ' cases {at} {random}
                        {print} nom ' es casar√† amb ' amor {at} {random}
                        {print} nom ' tindr√† un ' mascotes {at} {random} ' com a mascota.'
                        {sleep}
                    ```
            12:
                story_text: |
                    In this level you can make your fortunes multiple words. Can you add more different fortunes to the list?
                example_code: |
                    ```
                    dest√≠ = "relliscar√†s amb una pela de platan," _
                    {print} "Deixa'm fer una ullada al la meva bola de cristall per observar el teu futur"
                    {print} 'Veig... veig...'
                    {sleep}
                    {print} dest√≠ {at} {random}
                    ```
    functions:
        levels:
            12:
                example_code: |
                    ```
                    costats = 'dreta', 'esquerra'
                    extremitats = 'm√†', 'cama'
                    colors = 'vermell', 'blau', 'verd', 'groc'

                    {define} turn
                        costat_escollit = costats {at} {random}
                        extremitat_escollida = extremitats _
                        color_escollit = colors _
                        {print} extremitat_escollida ' ' costat_escollit ' al ' color_escollit

                    {print} 'Juguem al Twister!'
                    {for} i {in} {range} 1 to _
                        {call} turn
                        {sleep} 2
                    ```
                story_text: "En aquest nivell aprendr√†s a utilitzar **funcions**. Una funci√≥ √©s un bloc de codi que pots fer servir f√†cilment diverses vegades. Usar funcions ens ajuda a organitzar fragments de codi que podem usar una vegada i una altra.\nPer crear una funci√≥, usa `{define}` i dona-li un nom a la funci√≥. Despr√©s, posa totes les l√≠nies que vols dins de la funci√≥ en un bloc indentat sota la l√≠nia `{define}`.\nDeixa una l√≠nia buida al teu codi per fer-lo m√©s net i organitzat. Bona feina! Ja has creat una funci√≥!\n\nAra, sempre que necessitem aquest fragment de codi, nom√©s hem d'utilitzar <code>{call}</code> amb el nom de la funci√≥ per cridar-la! No cal tornar a escriure i repetir el codi.\n\nMira aquest exemple de codi d'un joc de Twister. La funci√≥ 'turn' cont√© un bloc de codi que tria quina part del cos ha d'anar a cada color.\n\n### Exercici\nAcaba aquest codi establint les dues variables 'extremitat_escollida' i 'color_escollit'.\nDespr√©s, tria quantes vegades vols cridar la funci√≥ per fer girar la roda de Twister.\n\n### Exercici 2\nMillora el teu codi afegint una variable anomenada 'persones'. Utilitza la variable per donar a tots els jugadors el seu propi comandament en el joc.\nPer exemple: 'Ahmed, m√† dreta al verd' o 'Jessica, peu esquerre al groc'.\n"
            13:
                story_text: |
                    Now that you've learned how to use functions, you'll learn how to use a function with an argument.
                    An **argument** is a variable that is used within a function. It is not used outside the function.

                    For example in this code we've programmed the first verse of the song 'My Bonnie is over the ocean'.
                    In this example code the argument `place` is used. Place is a variable that is only used in the function, so an argument.
                    To use `place` we have programmed the line `define song with place`.
                    When the function is called, computer will replace the argument `place`, with the piece of text after `call song with`.

                    ### Exercise
                    The next verse of this song goes:

                    Last night as I lay on my pillow
                    Last night as I lay on my bed
                    Last night as I lay on my pillow
                    I dreamed that my Bonnie is dead

                    Can you program this verse in the same way as the example?
                example_code: "```\n{define} song {with} place\n    {print} 'My Bonnie is over the ' place\n\n{call} song {with} 'ocean'\n{call} song {with} 'sea'\n{call} song {with} 'ocean'\n```\n"
            14:
                example_code: |
                    ```
                    {define} calcula_preu_nou {with} quantitat, percentatge
                        percentatge = percentatge / 100
                        descompte_quantitat = quantitat * percentatge
                        return quantitat - descompte_quantitat

                    preu_vell = {ask} "Quant hi ha a l'etiqueta de preu?"
                    descompte = {ask} "Amb quin percentatge de descompte?"

                    preu_nou = _ calcula_preu_nou {with} preu_vell, _
                    {print} 'El nou preu √©s ' preu_nou ' euros'
                    ```
                story_text: "En els nivells anteriors has apr√®s a crear funcions i utilitzar arguments amb elles. Un altre gran √∫s d'una funci√≥ √©s permetre que et faci un c√†lcul.\nPots donar a la funci√≥ un c√†lcul i et donar√† la resposta d'aquest c√†lcul. Aquesta resposta es coneix com el **valor de retorn**.\n\nPer exemple, en aquest codi, la funci√≥ 'calcula_preu_nou' calcular√† el nou preu de qualsevol article. Et donar√† el nou preu com a valor de retorn.\n\n### Exercici\nAcaba aquest codi. Ja hem creat la variable 'preu_nou' per tu, nom√©s has de configurar-la.\nHas d'acabar la l√≠nia de codi cridant la funci√≥ que calcula el nou preu.\n"
            18:
                story_text: "Fem servir les funcions de la manera de Python! Per definir una funci√≥, ja no utilitzem:\n\n`{define} nom_funcio {with} argument_1, argument_2:`\n\nsi no que usem:\n\n`{def} nom_funcio (argument_1, argument_2):`.\n\n\nSi no vols fer servir arguments, simplement deixes l'espai entre els par√®ntesis buit.\nPer cridar una funci√≥, ja no necessitem la comanda `{call}`. Simplement escrius el nom de la funci√≥.\n"
                example_code: "```\n{def} calcula_puntuacio(resposta, resposta_corercta):\n    {if} resposta == resposta_corercta:\n        punts = 1\n    {elif} resposta == '?':\n        punts = 0\n    {else}:\n        punts = -1\n    {return} punts\n\nresposta = {input} ('A on podem trobar la Torre Eifel?')\nresposta_corercta = 'Par√≠s'\npunts = calcula_puntuacio(resposta, resposta_corercta)\n{print} ('La teva puntuaci√≥ √©s ... ', punts)\n```\n"
        name: funcions
        default_save_name: funcions
        description: funcions
    haunted:
        levels:
            1:
                story_text_2: |
                    ### Exercise
                    Can you finish the scary story? Or make up your own haunted house story?
            2:
                example_code: |
                    ```
                    monster_1 {is} üëª
                    monster_2 {is} ü§°
                    monster_3 {is} üë∂
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
                example_code_2: |
                    ```
                    monster_1 {is} _
                    monster_2 {is} _
                    monster_3 {is} _
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
            3:
                story_text: |
                    In the previous levels you've made an introduction to your haunted house game, but as you might have noticed the story would always have a dreadful end.
                    In this level you can make your story more interactive by changing the outcome of the game; sometimes you'll get eaten, sometimes you'll escape!
                    Let Hedy decide randomly!
            4:
                story_text: |
                    In this level you learn how to use quotation marks in your games.
                    Can you make your Haunted House level 4 proof?
                example_code: |
                    ```
                    {print} _ Escape from the haunted house! _
                    {print} _ There are 3 doors in front of you... _
                    choice {is} {ask} _ Which door do you choose? _
                    {print} _ You picked door ... _ choice
                    monsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED
                    {print} _ You see... _
                    {sleep}
                    {print} monsters {at} {random}
                     ```
            9:
                story_text: |
                    In this level you can use nesting, which allows you to make the haunted house even more interactive!

                    ### Exercise
                    Now it's very hard to win this game, can you make it easier to win?
                    For example by only having 1 wrong door and 2 correct doors instead of 1 correct door and 2 wrong ones?
            11:
                story_text: |
                    In this level we've changed the repeat command and we've added a line to our haunted house that tells the player in which room they are.

                    ### Exercise
                    Finish the program with the correct line of code. Mind: There are 3 rooms that the player needs to survive before they win!
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player {is} alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    _
                        {if} player {is} alive
                            correct_door = doors {at} {random}
                            {print} 'Room ' i
                            {print} 'There are 3 doors in front of you...'
                            chosendoor = {ask} 'Which door do you choose?'
                            {if} chosendoor {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
    if_command:
        description: Introducing the if command
        levels:
            9:
                story_text: |
                    In this level you can also put an {if} command inside another {if} command.
    in_command:
        description: Introducing the in command
        levels:
            5:
                example_code_2: |
                    ```
                    animals is dog, cow, sheep
                    answer is ask 'What is your favorite animal?'
                    _ answer _ animals _ 'Mine too!'
                    _ _ 'My favorite animals are dogs, cows and sheep'
                    ```
    is_command:
        default_save_name: comanda_es
        description: Introducci√≥ a la comanda {is}
        levels:
            2:
                story_text: |
                    ## Variables
                    Pots anomenar una paraula amb `{is}`. Aix√≤ s'anomena **variable**. En aquest exemple hem fet una variable anomenada nom i una variable anomenada edat. Podeu utilitzar la paraula nom a qualsevol part del vostre codi i ser√† substitu√Øt per Hedy aix√≠:
                example_code: |
                    ```
                    nom {is} Hedy
                    edat {is} 15
                    {print} nom t√© edat anys
                    ```
                story_text_2: |
                    ### Exercici
                    √âs hora de crear les teves pr√≤pies variables!
                    En el codi d'exemple hem fet un exemple de la variable `animal_preferit`. A la l√≠nia 1 es defineix la variable, i a la l√≠nia 2 hem utilitzat la variable dins una comanda d'impressi√≥.
                    En primer lloc, acabeu el nostre exemple omplint el vostre animal preferit als espais en blanc. A continuaci√≥, feu vosaltres mateixos almenys 3 d'aquests codis. Trieu una variable i configureu-la amb la comanda {is}. A continuaci√≥, utilitzeu-lo amb una comanda {print}, tal com hem fet abans.
                example_code_2: "```\nanimal_preferit {is} _\n{print} M'agraden els/les animal_preferit \n```\n"
            14:
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
                    ```

                    {if} age < 13
                        {print} 'You are younger than me!'
                    {else}
                        {print} 'You are older than me!'
    language:
        levels:
            5:
                story_text: |
                    Make your own program to practice your vocabulary in a new language.

                    ### Exercise
                    Can you make this program for a different language? Or can you add more words to the French one?
    maths:
        levels:
            6:
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 minus 5 is ' 5 - 5
                    {print} '5 times 5 is ' 5 * 5
                    ```
            12:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```

                    {print} 2.5 + 2.5
    music:
        levels:
            6:
                story_text: "Instead of playing notes, you can also play numbers now. Simply type `{play} 1` for the lowest note, `{play} 70` for the highest note, or anything in between.\n\n### Exercise\n This calls for musical maths! Try out the example code a couple of times with different starting numbers. \nThen, see if you can compose a song using the numbers.\n"
    parrot:
        name: Lloro
        description: Crea el teu lloro i fes que repeteixi el que li dius!
        levels:
            1:
                story_text_2: |
                    ### Exercise
                    Can you make the parrot ask a different question? Fill in the blanks in the example!
            2:
                story_text: |
                    En el nivell anterior has fet un lloro que repetia el que li deies. En aquest nivell farem que el lloro sigui interactiu utilitzant una variable i la comanda `{ask}` .
                    Tamb√© farem el lloro sigui m√©s real afegint la comanda `{sleep}` despr√©s de dir una cosa.
                example_code: |
                    ```
                    {print} Im Hedy the parrot
                    name {is} {ask} whats your name?
                    {print} name
                    {sleep}
                    {print} squawk
                    {sleep}
                    {print} name
                    ```
                story_text_2: |
                    ### Exercise
                    You can use variables to make the parrot say more than only your name. Can you complete this code?
            3:
                story_text: |
                    Teach your parrot a new word with `{add}`.
                    ### Exercise
                    How can you make your parrot say multiple words?
                example_code: |
                    ```
                    words {is} squawk, Hedy
                    {print} Train your parrot!
                    new_word {is} {ask} Which word do you want to teach them?
                    {add} new_word {to_list} words
                    {print} üßí Say new_word, Hedy!
                    {print} ü¶ú words {at} {random}
                    ```
            4:
                story_text: |
                    In this level we have to use quotation marks with the commands `{ask}` and `{print}`.
                    Can you complete the code by adding quotation marks?
            5:
                story_text: |
                    Reward your parrot if it says the correct word!
                    Finish the code by filling in the 4 missing commands.
    piggybank:
        levels:
            12:
                story_text: |
                    In this adventure you learn how to make a digital piggy bank.
                    Finish the code to calculate how much money you have and how long you need to save up to buy what you want!
            14:
                example_code: |
                    ```
                    _ calculate_budget with wish, money, allowance
                        to_save = wish - money
                        weeks = to_save / allowance
                        {if} wish _ money
                            {print} 'You need to save up some more!'
                            {print} 'Youll need ' weeks ' more weeks.'
                        {else}
                            {print} 'Great! You have enough'
                            {print} 'Lets go shopping!'

                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'

                    {call} calculate_budget with _, _, _
                    ```
    pressit:
        levels:
            9:
                story_text: |
                    Now that you know how to combine statements, you can create a touch type tool with `{pressed}`.

                    ### Exercise
                    Finish the code. Each time a random letter should be chosen, which you have to press. You get a point for a correct press, and and two points deduction for a wrong press.
                    **(extra)** Clear the screen after each letter, and show the user how many points they have scored.
    print_command:
        description: Introducci√≥ a la comanda imprimir
        levels:
            1:
                story_text: |
                    ## La comanda imprimir
                    Pots imprimir un text a la pantalla utilitzant la comanda `{print}` .
                example_code: |
                    ```
                    {print} Ei programador!
                    {print} Benvingut a Hedy!
                    ```
                story_text_2: |
                    ### Exercici
                    A Hedy trobar√†s exercicis a cada aventura. Un exercici et permet per practicar les comandes noves, diferents conceptes, i et permet jugar amb els codis d'exemple.
                    En aquest exercici veureu un espai buit rosa. Has d'omplir l'espai en blanc si vols que el codi pugui funcionar.

                    Omple la comanda `{print}` a l'espai blanc i despr√©s afegeix cinc l√≠nies m√©s al codi. Cada l√≠nia ha de comen√ßar amb la comanda `{print}`.
                    Gaudeix-ho!
                example_code_2: |
                    ```
                    _ Hola!
                    ```
            18:
                story_text: |-
                    Hem arribat al codi Python real! Aix√≤ vol dir que hem d'utilitzar par√®ntesis amb `{print}` i `{range}` d'ara endavant.
                    Aix√≤ tamb√© significa que podeu utilitzar a partir d'aquest nivell el codi d'Hedy en qualsevol entorn Python sempre que utilitzeu les comandes angleses. Si no has fet encara, pots canviar-ho la pestanya del men√∫ de comandes.
                example_code: |
                    ```
                    {print}('Hola!')
                    {for} i {in} {range}(1, 10):
                        {print}('Aquesta √©s la l√≠nia ', i)
                    ```
                story_text_2: Si vols imprimir m√©s d'un element, necessites separar-los per comes.
                example_code_2: |
                    ```
                    temperatura = 25
                    {print}('Fa ', temperatura , " graus a l'exterior")
                    ```

                    {print}('Em dic ', nom)
    quotation_marks:
        levels:
            4:
                example_code_2: |
                    ```
                    _ Aquesta √©s la manera incorrecta d'apostrofar _
                    {print} 'Amb l'Anna hem d'anar a fer de cangur als meus nebots'
                    {print} 'M'encanta! la meva germana n'estar√† orgullosa'
                    ```
    random_command:
        levels:
            16:
                story_text: |-
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    We use square brackets to point out a place in a list. For example: `friends[1]` is the first name on the list of friends, as you can see in the first part of the example code. The second part of the example code shows you that we can also match 2 lists using the variable i.
    repeat_command:
        description: repeat command
        levels:
            7:
                story_text: |
                    ## Repeat! Repeat! Repeat!
                    Level 7 adds the `{repeat}` command.  `{repeat}` can be used to execute one line of code multiple times. Like this:

                    ### Exercise
                    Play around with the repeat command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?
            9:
                story_text: |
                    Great job! You've reached another new level! In the previous level you've learned to use multiple lines of code in an {if} or {repeat} command. But you can't yet combine the two...
                    Good news! In this level you will be allowed to put an {if} inside an {if}, or inside a {repeat} command. Putting a block of code inside another block of code is called nesting.                     ``` Putting a block of code inside another block of code is called nesting.
                example_code: |
                    ```
                    answer = {ask} 'Are you ready to learn something new?'
                    {if} answer {is} yes
                        {print} 'Great! You can learn to use the repeat command in the if command!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                    {else}
                        {print} 'Maybe you should practice some more in the previous level'
    repeat_command_2:
        description: repeat command 2
        levels:
            7:
                story_text_2: |
                    Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.
                    Then, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.
    restaurant:
        levels:
            1:
                story_text_2: |
                    ### Exercise
                    Can you think of more lines to add to your restaurant code? For example, can you {ask} the guests what they'd like to drink, tell them the price, or wish them a pleasant meal?
                example_code_2: |
                    ```
                    {print} Welcome to Hedy's restaurant üçü
                    {ask} What would you like to order?
                    {echo} So you would like to order
                    {print} Thanks you for your order!
                    {print} It's on its way!
                    ```
            2:
                story_text: |
                    In level 2 you could expand your restaurant by using variables. In level 1 Hedy could only {echo} the order once and only remember the last thing that was ordered.
                    Now you can use variables and Hedy can remember both the food and the toppings!
                story_text_2: |
                    ### Exercise
                    Can you make this code more elaborate? For example by adding drinks to the order? Or...?
            3:
                story_text: |
                    Having trouble to decide what you wanna have for dinner? You can let Hedy choose for you!
                    Simply add lists of your favorite (or least favorite) meals and Hedy can randomly choose your dinner.
                    You can also have a bit of fun, by letting Hedy choose the price for your dinner as well! What will you get?
                    ### Exercise
                    Can you make your own version of the random restaurant?
                example_code: |
                    ```
                    {print} Welcome to Hedy's Random Restaurant!
                    {print} The only restaurant that will randomly choose your meal and its price for you!
                    starters {is} salad, soup, carpaccio
                    mains {is} pizza, brussels sprouts, spaghetti
                    desserts {is} brownies, ice cream, french cheeses
                    drinks {is} cola, beer, water
                    prices {is} 1 dollar, 10 dollars, 100 dollars
                    {print} You will start with: starters {at} {random}
                    {print} Then we'll serve: mains {at} {random}
                    {print} And as dessert: desserts {at} {random}
                    {print} You will get a drinks {at} {random} to drink
                    {print} That will be: prices {at} {random}
                    {print} Thank you and enjoy your meal!
                    ```
                story_text_2: |
                    Does your costumer have any allergies or do they dislike certain dishes? Then you can use the `{remove}`command to remove it from your menu.
                example_code_2: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    allergies {is} {ask} Are you allergic to any falvors?
                    _
                    {print} You get a flavors {at} {random} milkshake
                    ```
            4:
                story_text: |
                    ### Exercise
                    Add the quotation marks to this code to make it work! Be careful: variables should not be in quotation marks.
                example_code: |
                    ```
                    _ Add the quotation marks to this code _
                    {print} Welcome to Hedys restaurant!
                    {print} Today we are serving pizza or lasagna.
                    food {is} {ask} What would you like to eat?
                    {print} Great choice! The  food  is my favorite!
                    topping {is} {ask} Would you like meat or veggies on that?
                    {print} food  with  topping  is on its way!
                    drinks {is} {ask} What would you like to drink with that?
                    {print} Thank you for your order.
                    {print} Your  food  and  drinks  will be right there!
                    ```
            5:
                story_text: |
                    In this level the `{if}` command allows you to `{ask}` your customers questions and give different responses to the answers.
                    In the example below, you see that you can `{ask}` the customer `{if}` they want to hear the specials and Hedy can respond accordingly.
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    special {is} {ask} 'Would you like to hear our specials today?'
                    {if} special {is} yes {print} 'Todays special is chicken piri piri and rice.' {else} {print} 'No problem.'
                    food {is} {ask} 'What would you like to eat?'
                    {print} 'One ' food ', coming right up!'
                    drink {is} {ask} 'What would you like to drink with that?'
                    {if} drink {is} cola {print} 'Im sorry, we are out of cola!' {else} {print} 'Great choice!'
                    anything {is} {ask} 'Would you like anything {else}?'
                    {print} 'Let me repeat your order...'
                    {print} 'One ' food
                    {if} drink {is} cola {print} 'and...' {else} {print} 'One ' drink
                    {if} anything {is} no {print} 'Thats it!' {else} {print} 'One ' anything
                    {print} 'Thank you for your order and enjoy your meal!'
                    ```
            6:
                story_text: |
                    In this level you can use maths to calculate the total price of your customer's order, which can make your virtual restaurant more realistic.
            7:
                story_text: |
                    In this level you've learned how to use the `{repeat}` command to repeat a line of code a certain amount of times.
                    You can use that in your restaurant to `{ask}` multiple people what they'd like to eat.

                    ### Exercise
                    Can you fill in the blanks? Hedy needs to repeat this question as many times as there are people. So of there are 5 people, the question needs to be asked 5 times.
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people are joining us today?'
                    {repeat} _ {times} food = {ask} 'What would you like to eat?'
                    {print} 'Thanks for your order! Its coming right up!'
                    ```
            9:
                story_text: |
                    In this level you can use nesting to make your restaurant more realistic and more fun!
                    For example you would ask for sauce if somebody orders fries, but you wouldn't if someone orders pizza!

                    ### Exercise
                    This is a challenge for the real brainiacs! Each line that needs indentation has been given a blank.
                    Can you figure out how much indentation each line needs in order for the code to work propperly?
                    Good luck!
                    TIP: If the customer orders pizza, Hedy shouldn't ask what sauce the costumer wants.
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people will be joining us today?'
                    {print} 'Great!'
                    price = 0
                    {repeat} people {times}
                    _ food = {ask} 'What would you like to order?'
                    _ {print} food
                    _ {if} food {is} fries
                    _ price = price + 3
                    _ sauce = {ask} 'What kind of sauce would you like with your fries?'
                    _ {if} sauce {is} no
                    _ {print} 'no sauce'
                    _ {else}
                    _ price = price + 1
                    _ {print} 'with ' sauce
                    _ {if} food {is} pizza
                    _ price = price + 4
                    {print} 'That will be ' price ' dollar'
                    {print} 'Enjoy your meal!'
                    ```
            10:
                story_text: |
                    In this level you'll learn how to easily {ask} your guests' orders in a short code.
                example_code: |
                    ```
                    courses = appetizer, main course, dessert
                    {for} course {in} courses
                        food = {ask} 'What would you like to eat as your ' course '?'
                        {print} food ' will be your ' course
                    ```
                story_text_2: |
                    ### Exercise
                    Of course, you could also order for multiple people!
                    Can you add the correct amount of indentation before each line to make the code work properly?
                    TIP: some lines don't need any indentation at all.
                example_code_2: |
                    ```
                    _ courses = appetizer, main course, dessert
                    _ names = Timon, Onno
                    _ {for} name {in} names
                    _ {for} course {in} courses
                    _ food = {ask} name ', what would you like to eat as your ' course '?'
                    _ {print} name ' orders ' food ' as their ' course
                    ```
            11:
                story_text: |
                    We can use the `{for} i {in} {range} 1 {to} 5` to `{print}` the orders from multiple customers in an orderly manner.

                    ### Exercise
                    Can you handle another indentation challenge? Get the code to work properly by adding the right amount of indentation before each line!
                example_code: |
                    ```
                    {print} 'Welcome to Restaurant Hedy!'
                    people = {ask} 'For how many people would you like to order?'
                    {for} i {in} {range} 1 {to} people
                    _ {print} 'Order number ' i
                    _ food = {ask} 'What would you like to eat?'
                    _ {print} food
                    _ {if} food {is} fries
                    _ sauce = {ask} 'What kind of sauce would you like with that?'
                    _ {print} sauce
                    _ drinks = {ask} 'What would you like to drink?'
                    _ {print} drinks
                    price = 4 * people
                    {print} 'That will be ' price ' dollars, please!'
                    ```
            12:
                story_text: |
                    From this level on you can use decimal numbers to make you menu more realistic.

                    ### Exercise
                    Can you think of a code to give your friends and family a 15% discount?
                example_code: |
                    ```
                    price = 0
                    food = {ask} 'What would you like to order?'
                    drink = {ask} 'What would you like to drink?'
                    {if} food {is} 'hamburger'
                        price = price + 6.50
                    {if} food {is} 'pizza'
                        price = price + 5.75
                    {if} drink {is} 'water'
                        price = price + 1.20
                    {if} drink {is} 'soda'
                        price = price + 2.35
                    {print} 'That will be ' price ' dollar, please'
                    ```
            13:
                story_text: |
                    In this level we can use the new commands to upgrade our restaurant.
                    We use `{and}` to see {if} two things are both the case.
                example_code: |
                    ```
                    price = 10
                    food = {ask} 'What would you like to eat?'
                    drinks = {ask} 'What would you like to drink?'
                    {if} food {is} 'sandwich' {and} drinks {is} 'juice'
                        {print} 'Thats our discount menu'
                        price = price - 3
                    {print} 'That will be ' price ' dollars'
                    ```
    rock:
        default_save_name: Rock
        levels:
            2:
                story_text: |
                    In this level you can practise using the variables, so that you can make the rock, paper, scissors game in the next level!
                example_code: |
                    ```
                    _ {is} {ask} rock, paper, or scissors?
                    {print} I choose _
                    ```
            3:
                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} choices {at} {random}
                    ```
                story_text_2: |
                    ### Exercise
                    Now you only have one player, so can you add a second player?
                    You can even use variables to name player 1 and player 2.
                example_code_2: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} player 1 chooses... choices {at} {random}
                    {print} player 2 _
                    ```
            5:
                story_text: |
                    In this level we can determine who won.
                    For that you need the new `{if}` code.

                    Save your choice with the name of choice and the choice of computer as computer choice.
                    Then you can use `{if}` to see if they are the same or different.
                    Will you finish the code?
                example_code: |
                    ```
                    options {is} rock, paper, scissors
                    computer_choice {is} _
                    choice {is} {ask} 'What do you choose?'
                    {print} 'you chose ' _
                    {print} 'computer chose ' _
                    {if} _ {is} _ {print} 'tie!' {else} {print} 'no tie'
                    ```

                    Fill in the correct code on the blanks to see {if} it is a draw.
            9:
                story_text: |
                    In this level you can program the whole rock, paper, scissors game by nesting the `{if}` commands. Can you finish the code?
                example_code: |
                    ```
                    choices = rock, paper, scissors
                    your_choice = {ask} 'What do you choose?'
                    {print} 'You choose ' your_choice
                    computer_choice = choices {at} {random}
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} rock
                        {if} your_choice {is} paper
                            {print} 'You win!'
                        {if} your_choice {is} scissors
                            {print} 'You lose!'
                    # finish this code
                    ```
            10:
                story_text: |
                    Feeling too lazy to play the game yourself? Let Hedy play it for you!
                    You only have to fill in the names of the players.
                example_code: |
                    ```
                    choices = rock, paper, scissors
                    players = _
                    {for} player {in} players
                         {print} player ' chooses ' choices {at} {random}
                    ```
            13:
                story_text: |
                    With the `{and}` command you can shorten your rock, paper, scissors code! Check out the example code below and try to finish it.
    rock_2:
        levels:
            2:
                story_text: |
                    Now that you have learned how to use the `{ask} command, you can make your rock, paper, scissors code interavtive too!

                    ### Exercise
                    Make the rock, paper, scissors code interactive by adding the `{ask}` command and a question to your rock, paper, scissors code.
                example_code: |
                    ```
                    choice is _
                    {print} I choose choice
                    ```
    secret:
        levels:
            12:
                story_text: |
                    In this adventure you can create your own super spy code. Encode a message that only the right agent can decipher.
                    If the enemy tries to crack the code, they will get some false info to waste their time.

                    ### Exercise
                    Make your own secret code for your superspy. Can you make it consist of even more variables?
                example_code: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name {is} '_'
                        a = 'Go to the airport '
                    {else}
                        a = 'Go to the trainstation '
                    password = {ask} 'What is the password?'
                    {if} password {is} _
                        b = 'tomorrow at 02.00'
                    {else}
                        b = 'today at 10.00'
                    {print} _ _ _
                    ```
            13:
                story_text: |
                    Can you fill in the right command on the blank? Mind: The superspy has to answer BOTH questions correctly, before they get the confidential information!
    sleep_command:
        description: introducing sleep command
        levels:
            2:
                story_text: |
                    ## The sleep command
                    Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.
    songs:
        levels:
            7:
                story_text: |
                    Songs often contain a lot of repetition. For example... Baby Shark! If you sing it, you keep singing the same thing:

                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark

                    You can make this song much shorter with a `{repeat}`! Can you finish the code?
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Baby Shark tututudutudu'
                    {print} 'Baby Shark'
                    ```

                    After Baby Shark you can of course also program other songs. There are many songs with repetition.
            8:
                story_text: |
                    In a previous level you've programmed the song 'Bottles of beer'. You made one verse and then had to copy the verses 99 times. In this level you can repeat the song 99 times, just by adding one simple line!
                    Do you know which line of code to add on the blanks?
                example_code: |
                    ```
                    verse = 99
                    _ _ _
                        {print} verse ' bottles of beer on the wall'
                        {print} verse ' bottles of beer'
                        {print} 'Take one down, pass it around'
                        verse = verse - 1
                        {print} verse ' bottles of beer on the wall'
                    ```
            10:
                story_text: |
                    In this level you can easily make the childrens' song 'Five little monkeys'. Can you make the last chorus?
                    You can also make the whole baby shark song (including all the other sharks in the family) in only 6 lines, using `{for}`!
                    Or you can make Old MacDonald with all the different animals.



                    ### Exercises
                    Can you add the last verse of the monkeys on the bed, when there is only one monkey left?

                    Can you make the baby shark code even shorter by using a `{repeat}` command?

                    Can you add new animals to Old MacDonald's farm?
                example_code: |
                    ```
                    monkeys = 5, 4, 3, 2
                    {for} monkey {in} monkeys
                        {print} monkey ' little monkeys jumping on the bed'
                        {print} 'One fell off and bumped his head'
                        {print} 'Mama called the doctor and the doctor said'
                        {print} 'NO MORE MONKEYS JUMPING ON THE BED!'
                    ```

                    ```
                    sharks = baby, mommy, daddy, grandma, grandpa
                    {for} shark {in} sharks
                        {print} shark ' shark tututututudu'
                        {print} shark ' shark tututututudu'
                        {print} shark ' shark tututututudu'
                        {print} shark ' shark'
                    ```
                    ```
                    animals = pig, dog, cow
                    {for} animal {in} animals
                        {if} animal {is} pig
                            sound = oink
                        {if} animal {is} dog
                            sound = woof
                        {if} animal {is} cow
                            sound = moo
                        {print} 'Old MacDonald had a farm'
                        {print} 'E I E I O!'
                        {print} 'and on that farm he had a ' animal
                        {print} 'E I E I O!'
                        {print} 'with a ' sound sound ' here'
                        {print} 'and a ' sound sound ' there'
                        {print} 'here a ' sound
                        {print} 'there a ' sound
                        {print} 'everywhere a ' sound sound
                    ```
                story_text_2: |
                    ### Exercise 2
                    Print the song Five little moneys jumping on the bed. Look up the text if you don't remember.

                    **(extra)** Print the song Old MacDonald had a farm, and make sure all animals make a different sound, using an `{if}`.
            11:
                story_text: |
                    In this level you can use the `{for} i {in} {range}` command to make songs that use counting, like the 5 little monkeys.

                    ### Exercise
                    Fill in the blanks and make the code work!
                example_code: |
                    ```
                    _ _ _ _ 5 _ 1
                        {print} i ' little monkeys jumping on the bed'
                        {print} 'One fell off and bumped his head'
                        {print} 'Mama called the doctor and the doctor said'
                        {if} i {is} 1
                            {print} 'PUT THOSE MONKEYS RIGHT TO BED!'
                        {else}
                            {print} 'NO MORE MONKEYS JUMPING ON THE BED!'
                    ```
            12:
                example_code: |
                    ```
                    _ accions = "pica de mans", "pica de peus", "crida Hurra!"
                    _ {for} accio {in} accions
                    _ {for} i {in} {range} 1 {to} 2
                    _ {print} "si ets feli√ß i ho saps"
                    _ {print} accio
                    _ {print} "si ets feli√ß i ho saps, i ho vols fer saber a tothom"
                    _ {print} "si ets feli√ß i ho saps"
                    _ {print} accio
                    ```
    songs_2:
        levels:
            12:
                example_code: |
                    ```
                    {define} twinkle
                        {print} 'Twinkle'
                        {print} '...'

                    {call} twinkle
                    {print} 'Up above the world so high'
                    {print} 'Like a diamond in the sky'
                    {call} _
                    ```
    turtle:
        levels:
            2:
                story_text: |
                    In this level you can use variables to make the turtle interactive. For example you can ask the player how many steps the turtle must make.
                example_code: |
                    ```
                    answer {is} {ask} How many steps should the turtle make?
                    {forward} answer
                    ```
                story_text_2: |
                    Also, in level 1 the turtle could only turn left or right. That is a bit boring!
                    In level 2 he can point his nose in all directions.

                    Use 90 to turn a quarter. We call this degrees. A full turn is 360 degrees.

                    ### Exercise
                    Can you make a figure with this code? Maybe a triangle or a circle?
                example_code_2: |
                    ```
                    {print} Drawing figures
                    angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
            3:
                story_text: |
                    In this level you can use use `{at} {random}` with the drawing turtle. A random choice makes the turtle walk a different path each time.
                    Use `{at} {random}` to choose a value from a list.
                    ### Exercise
                    Can you copy and paste lines 2 and 3 to create a longer random path?
            5:
                example_code_2: |
                    ```
                    direction {is} {ask} 'Do you want to go left, right, or straight ahead?'
                    if direction is left turn _
                    if direction is right turn _
                    forward 100
                    ```
            8:
                story_text: |
                    Now that we can repeat several lines, we can make figures more easily.
                    We only have to set the angle once and then use that variable in the `{repeat}`.
                example_code: |
                    ```
                    angle = 90
                    {repeat} 10 {times}
                        {turn} angle
                        {forward} 50
                    ```
                story_text_2: |
                    Also, we can now improve the program that draws different figures.
                    Can you figure out how far the turtle has to turn here? Finish the code and you can draw any polygon you'd like!
            9:
                story_text: |
                    Now that we can use a `{repeat}` inside a `{repeat}`, we can create more complex figures.

                    ### Exercise 1
                    This code creates three black triangles, change that into five pink squares.

                     **(extra)** Create a figure of your own choosing consisting of at least two different shapes types.
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                     **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
    turtle_draw_it:
        levels:
            9:
                example_code: |
                    Hint for the nested squares:
                    ```
                    colors = red, blue, orange, yellow, pink, purple, green, brown, black
                    distance = 120
                    repeat 5 times
                    _
                    ```
                    Hint for the flags:
                    ```
                    country = ask 'which country would you like to see the flag of?'
                    if country is 'the Netherlands'
                        color_1 = red
                        color_2 = white
                        color_3 = blue
                    ```
            10:
                example_code: |
                    Hint Nested Hexagon:
                    ```
                    distances = 100, 80, 60, 40, 20
                    {for} distance {in} distances
                    _
                    ```

                    Hint Traffic Lights:
                    ```
                    colors = red, yellow, green
                    {for} chosen_color {in} colors
                        color _
                        {repeat} _
                    ```
            12:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!
                    Hint: Bracelet designing program. Firstly, define a function **for each shape** you want to use on the bacelet. Then, add the shapes to the bacelet like this:
                    </div>
                    Bracelet Designing program <img src="https://github.com/hedyorg/hedy/assets/80678586/549d7f3a-c492-4b4a-b173-746eb3400951" width="500">
                example_code: |
                    ```
                    {define} draw_a_square
                    _

                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 180

                    {for} i {in} {range} 1 {to} 5
                        {color} gray
                        {forward} 100
                        shape = {ask} 'What kind of shape would you like next on the bracelet?'
                        chosen_color = {ask} 'In which color?'
                        {color} chosen_color
                        {if} shape = 'square'
                            {call} draw_a_square
                    ```
    while_command:
        description: while
    years:
        description: Countdown to the new year!
        levels:
            11:
                story_text: |
                    In this level you can use the `{for} i {in} {range}` command to countdown to the New Year.

                    ### Exercise
                    Fill in the blanks and make the code work!
                example_code: |
                    ```
                    {for} _ {in} _ 10 {to} 1
                        {print} i
                    {print} 'Happy New Year!'
                    ```
    blackjack_3:
        levels:
            17:
                story_text: "A les pestanyes anteriors has apr√®s com tirar 2 cartes aleat√≤ries per a tu i per la banca i com calcular quants punts heu aconseguit.\nEn aquesta aventura, afegim l'opci√≥ de demanar una carta extra tant per a tu com per la banca.\n\n### Exercici\n***Enganxa el teu codi de l‚Äôaventura anterior*** Primer, copia el teu codi de la pestanya anterior i enganxa‚Äôl aqu√≠.\n\n***Carta extra per a tu*** Si vols, pots agafar una carta extra per apropar-te tant com sigui possible a 21. Primer, pregunta al jugador si vol una carta extra.\nSi la vol, escull una carta aleat√≤ria i imprimeix quina carta ha tret. Si la carta no √©s un As, pots cridar la funci√≥ i afegir els punts al teu total.\nEn cas que la carta sigui un As, no pots utilitzar la funci√≥, perqu√® l'As pot valdre o 1 punt o 11 punts, depenent de quants punts ja has aconseguit.\nSi el teu total √©s inferior a 11, vols que l'As valgui 11 punts (perqu√® aix√≤ √©s m√©s proper a 21). Per tant, afegeixes 11 punts al teu total.\nSi el total √©s m√©s gran o igual a 11, vols que l'As valgui 1 punt (perqu√® no vols superar els 21 punts). Per tant, afegeixes 1 punt al teu total.\nFinalment, imprimeix el teu nou total de punts.\n\n***Carta extra per la banca*** La banca tamb√© pot agafar una carta extra. No cal preguntar-li, perqu√® sempre agafa una carta extra si el seu total √©s inferior a 17.\nCopia el codi de la 'Carta extra per a tu' i enganxa‚Äôl a la secci√≥ de la banca. Despr√©s modifica‚Äôl per adaptar-lo a la selecci√≥ de carta extra i a la suma de punts de la banca.\n"
                example_code: "```\n# Enganxa el codi de l'aventura anterior aqu√≠\n\n# Carta extra per tu\npujar_aposta = {ask} _\n{if} pujar_aposta == 's√≠':\n    carta_3 = _\n    {print} _\n    {if} carta_3 _ 'As':\n        teus_punts_3 = _\n        teus_total = _\n    {else}:\n       {if} teus_total _\n            _\n        {else}:\n            _\n    {print} _\n\n# Carta extra per la banca\n{if} banca_total < 17\n_\n```\n"
        description: Blackjack 3a part
        name: Blackjack 3
        default_save_name: Blackjack_3
    blackjack_4:
        levels:
            17:
                story_text: "A les √∫ltimes 3 aventures has creat gaireb√© un joc de blackjack funcional! Nom√©s falta decidir qui √©s el guanyador!\n\n### Exercici\n***Enganxa el teu codi de l‚Äôaventura anterior*** Comen√ßa enganxant el codi que has fet fins ara al teu camp de programaci√≥.\n\n***Decideix un guanyador***\nPrimer, si tu i la banca teniu la mateixa quantitat de punts, √©s un empat.\nEn segon lloc, si la banca t√© m√©s de 21 punts i tu no, tu ets el guanyador.\nEn tercer lloc, si tant tu com la banca teniu menys de 22 punts, cal veure qui s'ha acostat m√©s a 21. Ho fem comparant qui t√© la puntuaci√≥ m√©s alta. Si el teu total √©s superior al total de la banca, llavors tu ets el guanyador. Si no, guanya la banca.\nFinalment, en tots els altres escenaris (per exemple, tu tens m√©s de 21 punts i la banca no, o tots dos teniu m√©s de 21 punts) tu ets el perdedor.\n\n***Gaudeix del joc!***\nEl teu joc funciona correctament? Fant√†stic! Has fet una gran feina! Gaudeix del teu joc!\nSi no funciona a la primera, no et preocupis, potser has com√®s un error. Mant√©n la calma i depura el teu codi amb el bot√≥ de l'insecte.\n"
                example_code: "```\n# Enganxa el teu codi de l'aventura anterior aqu√≠\n\n# Decideix el guanyador\n{if} _\n    {print} 'Hi ha un empat! Juga de nou!'\n{elif} _\n    {print} 'Has guanyat!'\n{elif} _ :\n    {if} _:\n        {print} _\n    {else}:\n        {print} _\n{else}:\n    _\n```\n"
        name: Blackjack 4
        default_save_name: Blackjack_4
        description: Blackjack 4a part
    blackjack_2:
        levels:
            17:
                example_code: "```\n# Enganxa el codi de l'aventura anterior aqu√≠\n\n# Afegeix les seg√ºents variables a la llista\ncarta_2 = _\ncarta_banca_1 = _\ncarta_banca_2 = _\n\n# Conta els teus punts\nteus_punts_1 = {call} _ {with} carta_1\nteus_punts_2 = _\nteus_total = _\n\n# Conta els punts de la banca\nbanca_punts_1 = _\n_\n_\n\n# 2 Asos\n{if} carta_1 == 'As' {and} _\n    teus_total = 12\n{if} carta_banca_1 _\n    banca_total = _\n\n# Mostra els punts\n{print} 'Has tret un ' _ ' i un ' _ '. S√≥n ' _ ' punts'\n{print} 'La banca ha tret un ' _ ' i un ' _ '. S√≥n ' _ ' punts'\n```\n"
                story_text: "### Exercici\nEn aquesta aventura codifiquem la segona part del nostre joc de Blackjack.\n\n***Enganxa el teu codi de l‚Äôaventura anterior***\nA l‚Äôaventura anterior has comen√ßat una llista de variables i has creat una funci√≥ per calcular quants punts val una carta. Copia el teu codi i enganxa'l aqu√≠. Tingues en compte que no necessites la part de proves, aix√≠ que, si encara no l'has eliminat, fes-ho ara.\n\n***Afegeix m√©s variables***\nJa has definit les llistes `cartes` i `cartes_obertes` i la variable `carta_1`. A sota d'aquestes variables, crea 3 variables m√©s: `carta_2`, `carta_repartidor_1` i `carta_repartidor_2`. Aquestes variables s‚Äôassignen a una carta aleat√≤ria de la llista de cartes.\n\n***Suma de punts***\nPer calcular quants punts has aconseguit, crida la funci√≥ amb la carta 1 i fes-ho de nou amb la carta 2. Aleshores suma aquests dos resultats per obtenir el teu total.\nFes el mateix per als punts de la banca, per√≤ assegura't d'utilitzar les cartes de la banca i no les teves!\n\n***2 Asos***\nHo est√†s fent molt b√©! Ja es poden calcular gaireb√© tots els punts. Nom√©s hi ha una excepci√≥: 2 Asos. Si treus 2 Asos, el teu total √©s de 12 punts i no de 22 (perqu√® 22 punts significaria perdre!). Aix√≤, √©s clar, tamb√© s'aplica a la banca.\n\n***Mostra la puntuaci√≥***\nFinalment, vols que el programa t'indiqui quines cartes has tret i quants punts tens. A continuaci√≥, mostra quines cartes t√© la banca i quants punts t√©.\n\n***Continua a la seg√ºent pestanya***\nGenial! Has acabat aquesta part del joc! Copia el teu codi i ves a la seg√ºent pestanya per aprendre com demanar una carta extra i declarar un guanyador.\n"
        name: Blackjack 2
        default_save_name: Blackjack_2
        description: Blackjack 2a part
    calculator_2:
        levels:
            14:
                story_text: "### Exercici 2\n**Aquesta √©s la segona part d‚Äôaquesta aventura.** L‚Äôaventura comen√ßa a la pestanya anterior.\nNo sempre voldr√†s calcular la mitjana de 4 proves. Potser voldr√†s calcular la mitjana de 10 proves o nom√©s de 2...\nPodem solucionar aquest problema afegint l'argument i la variable 'num_proves'.\n* Comen√ßa una nova l√≠nia a la l√≠nia 3. Defineix l‚Äôargument num_proves preguntant a l‚Äôalumne quantes proves ha fet.\n* Canvia el 4 de la l√≠nia 4 per al nou argument num_proves.\n* Finalment, canvia el 4 de la l√≠nia 6 per num_proves.\n\nProva el teu nou programa. Funciona?\n\n### Exercici 3\nVols millorar encara m√©s el teu programa? Genial! En el programa anterior nom√©s podies calcular la nota mitjana d'una assignatura, per√≤ seria millor si poguessis calcular la nota mitjana de totes les assignatures que vulguis!\nNo t‚Äôexplicarem com fer-ho, per√≤ et donarem un consell: Comen√ßa el teu codi a la l√≠nia 1 amb: define calcula_mitjana_nota with assignatura.\n"
                example_code: "```\n# Utilitza el teu propi codi de l'aventura anterior.\n```\n"
        description: Calculadora 2
        name: Calculadora 2
        default_save_name: Calculadora 2
    guess_my_number:
        levels:
            14:
                example_code: "```\n{print} 'Endevina el meu n√∫mero!'\nnumeros = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nnumero = numeros {at} {random}\njoc = 'jugant'\n{for} i {in} {range} 1 {to} 10\n    {if} joc == 'jugant'\n        resposta = {ask} 'Quin n√∫mero creus que √©s?'\n        {if} resposta _ numero\n            {print} 'M√©s petit!'\n        {if} resposta _ numero\n            {print} 'M√©s gran!'\n        {if} resposta _ numero\n            {print} 'Has guanyat!'\n            joc = 'final'\n```\n"
                story_text: "En aquest nivell pots programar el joc \"Endevina el meu n√∫mero\".\n\n### Exercici\nOmple els s√≠mbols correctes als espais en blanc per fer que el joc funcioni.\n"
        name: Endevina el meu n√∫mero
        description: Endevina el meu n√∫mero
        default_save_name: endevina el meu n√∫mero
    hangman:
        levels:
            17:
                story_text: "En aquesta aventura programem un joc de penjat. Primer fem algunes preparacions, despr√©s programem el joc i en la tercera part afegim un dibuix amb la tortuga.\n\n### Exercici\n***Configura les variables*** En aquest joc de penjat, el Jugador 1 tria una resposta i el Jugador 2 ha d'endevinar les lletres d'aquesta resposta.\nPer deixar que l'ordinador conegui totes les lletres de la paraula, convertirem la resposta en una llista de lletres. Farem el mateix amb les endevinalles que fa el Jugador 2.\nComen√ßarem el joc amb 2 llistes buides. Hem creat una llista buida per a la variable resposta per a tu. Ara crea tamb√© una llista buida per a les `lletres_endevinades`.\nDespr√©s omplim el nombre d'errors que s'han com√®s. Al principi del joc, aquest ha de ser 0.\nLa variable `quantitat_lletres` ens diu quantes lletres t√© la resposta. Demana al Jugador 1 que ens digui quantes lletres t√© la seva paraula.\nFinalment, li diem a l'ordinador si el joc ha acabat. Utilitzem la variable `joc_acabat` i la configurem a `False`.\n\n***Triant la resposta*** Volem que el Jugador 1 pugui triar la resposta. Els preguntarem, les vegades que sigui necessari, quina √©s la seg√ºent lletra.\nDespr√©s afegim aquesta lletra a la resposta. Finalment, afegim un _ buit a la llista de lletres endevinades, aix√≠ obtenim tants _ com lletres t√© la resposta.\n\n***Torn del Jugador 2***\nDiu al Jugador 2 que √©s el seu torn. Despr√©s informa-li de quantes lletres t√© la resposta. Finalment, imprimeix la llista de `lletres_endevinades`.\n\n***V√©s a la seg√ºent pestanya*** Ara que totes les variables inicials estan configurades, podem comen√ßar a programar el joc en si. Consulta la seg√ºent pestanya per aprendre com!\n"
        name: El penjat
        default_save_name: El penjat
        description: Endevina la paraula
