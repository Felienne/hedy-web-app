adventures:
    default:
        name: "Introduction"
        description: "Level explanation"
        default_save_name: "intro"
        levels:
            1:
                story_text: "På Nivå 1 kan du bruke kommandoene `{print}`, `{ask}` og `{echo}`.\nSkriv koden i programmeringsfeltet, eller trykk på den grønne boksen i eksempelkodeblokken og koden vil bli skrevet for deg!\nPrøv koden selv med den grønne 'Kjør kode' knappen under programmeringsfeltet.\n\nDu kan skrive tekst til skjermen ved å bruke `{print}` kommandoen.\n"
                start_code: '{print} hallo verden!'
            2:
                story_text: "På nivå 2 lærer vi to nye kommandoer: `{is}` og `{sleep}`.\nDu kan navngi et ord med `{is}`. Dette kalles en variabel. I dette eksempelet har vi laget en variabel kalt 'navn' og en variabel kalt 'alder'. Du kan bruke ordet 'navn' hvor som helst i koden og det vil bli erstattet av Hedy, som dette:\n\nPå denne måten trenger du ikke lenger `{echo}`kommandoen!\n"
                example_code: "```\nnavn {is} Hedy\nalder {is} 15\n{print} navn is alder år gammel\n```\n"
                story_text_2: "`{print}` fungerer fortsatt som før, men `{ask}` kommandoen har endret seg. Fra nå må du bruke en variabel når du bruker `{ask}` kommandoen. Det ser slik ut:\n"
                start_code: '{print} hallo verden!'
            3:
                story_text: "På nivå 3 kan du lage lister. Du kan la datamaskinen velge noe tilfeldig fra listen, du gjør det med `{at} {random}`.\n"
                start_code: '{print} hallo verden!'
            4:
                start_code: "{print} 'Hallo verden'"
                story_text: "På nivå 4 har `{ask}` og`{print}` blitt endret.\n\nDu må fra nå av legge tekst du vil skrive ut mellom fnutter.\n\nDette er nyttig, fordi nå kan du skrive ut alle ordene du vil. Også de ordene du har brukt til å lagre noe med `{is}`.\n\nDe fleste programmeringsspråk bruker også fnutter når de skriver ut ting, så vi går altså enda et steg nærmere ekte programmering!\n"
                example_code: "```\n{print} 'Du må bruke fnutter fra nå av!'\nsvar {is} {ask} 'Hva må vi bruke fra nå av?'\n{print} 'Vi må bruke' svar\n```\n"
            5:
                start_code: "navn {is} {ask} 'Hva heter du?'\n{if} navn {is} Hedy {print} 'kult!' {else} {print} 'meh'"
                story_text: "På nivå 5 er det noe nytt å lære seg, `{if}`! Med `{if}` kommandoen kan du velge mellom to forskjellige valg.\nDenne koden skriver ut 'nice' hvis du skriver inn Hedy som navn, og 'buu!' hvis du skriver noe annet.\n`{ask}` and `{print}` vil fungere på samme måte som de gjorde i nivå 4.\n"
                example_code: "```\nnavn {is} {ask} 'Hva heter du?'\n{if} navn {is} Hedy {print} 'wow!' {else} {print} 'fysj!'\n```\n"
            6:
                start_code: "{print} '5 ganger 5 er ' 5 * 5"
                story_text: "På dette nivået skal du få lære noe nytt! Du kan nå bruke Hedy til å gjøre matte.\n\nÅ plusse sammen to tall er enkelt, du bare gjør som du ville gjort i mattetimen, for eksempel: `5 + 5`. Minus funker også: `5 - 5`.\n\nÅ gange er litt anederledes, fordi det ikke er et gangesymbol på tastaturet ditt. Bare se hvis du vil, der er virkelig ikke et gangeteng.\nDerfor bruker vi vanligvis en stjerne `*` når vi ganger. `5 * 5`kan leses som \"5 ganger 5\". Det kan være du må holde inne SHIFT knappen for å kunne skrive *-tegnet.\n"
                example_code: "```\n{print} '5 pluss 5 er ' 5 + 5\n{print} '5 minus 5 er ' 5 - 5\n{print} '5 ganger 5 er ' 5 * 5\n```\n"
            7:
                start_code: "{repeat} 3 {times} {print} 'Hedy er morro!'"
                story_text: "Nivå 7 legger til `{repeat}` kommandoen. {repeat} kan brukes til å kjøre en kodelinje flere ganger.\n"
                example_code: "```\n{repeat} 3 {times} {print} 'Hedy {is} morro!'\n```\n"
            8:
                start_code: "{repeat} 5 {times}\n    {print} 'Hallo folkens'\n    {print} 'Dette vil bli skrevet ut 5 ganger'"
                story_text: "`{ask}` {and} `{print}` fungerer fortsatt slik du er vandt til, men `{if}` {and} `{repeat}` har endret seg litt!\nDu kan nå kjøre små blokker med kode sammen, men du må gi koden korrekt *innrykk*.\nDet betyr at du må legge til fire mellomrom på starten av kodelinjen. Du må også ha nytt innrykk når du skal lage en blokk på en linje.\n"
                example_code: "```\n{repeat} 5 {times}\n    {print} 'Hallo alle sammen'\n    {print} 'Dette blir gjentatt 5 ganger'\n```\n"
            9:
                start_code: "{repeat} 3 {times}\n    matrett = {ask} 'Hva vil du ha?'\n    {if} matrett {is} pizza\n        {print} 'nice!'\n    else\n        {print} 'pizza er bedre'"
                story_text: "På dette nivået kan du bruke både `{if}` med kodeblokker {and} `{repeat}` sammen!\nI eksempelet kan du se en `{if}` kommando inni en `{repeat}` kommando. Det er også mulig å gjøre det motsatte (`{repeat}` inni en `{if}`).\nDu kan også legge en `{if}` inni en annen `{if}` og en `{repeat}` inni en `{repeat}`.\nPrøv å se om du får det til!\n"
                example_code: "```\n{repeat} 3 {times}\n    matrett = {ask} 'Hva vil du ha?'\n    {if} matrett {is} pizza\n        {print} 'bra!'\n    else\n        {print} 'pizza er bedre'\n```\n"
            10:
                start_code: "dyrene {is} hunder, katter, flyndre\n{for} dyr {in} dyrene\n    {print} 'Jeg elsker ' dyr"
                story_text: "På dette nivået skal vi lære et nytt nøkkelord `{for}`. Med `{for}` kan du lage en liste og bruke alle elementene i listen.\n`{for}` lager en kodeblokk, på samme måte som `{repeat}` og `{if}`, så alle linjene i kodeblokken må starte med 4 mellomrom (innrykk).\n"
                example_code: "```\ndyrene {is} hunder, katter, flyndre\n{for} dyr {in} dyrene\n    {print} 'Jeg elsker ' dyr\n```\n"
            11:
                start_code: "{for} teller {in} {range} 1 {to} 5\n    {print} teller"
                story_text: "`{print}` fungerer på samme måten som før, men vi legger til en ny versjon av `{for}`. Nå kan du skrive`{for} teller {in} {range} 1 {to} 5` and og bruke `teller` i programmet ditt. En {range} er bare noen tall som kommer etter hverandre på tall-linjen.\nPrøv det ut og se hva som skjer! Husk å ha innrykk på linjen etter `{for}` og `{if}` uttrykkene (det betyr at du må starte setningen med fire mellomrom)\n"
            12:
                start_code: "{print} 'desimaltall må bruke et punktum nå'\n{print} 2.5 + 2.5"
                story_text: "**Desimaltall**\nFør dette nivået har det ikke vært mulig å bruke desimaltall som 1.5 i Hedy, men fra nå av kan du det! Legg merke til at datamaskiner bruker punktum `.` som skilletegn i desimaltall.\n"
                example_code: "```\n{print} 'To og en halv pluss to og en halv er lik...'\n{print} 2.5 + 2.5\n```\n"
            13:
                start_code: "navn = {ask} 'Hva heter du?'\nalder = {ask} 'Hvor gammel er du?'\n{if} navn {is} 'Hedy' {and} alder {is} 2\n    {print} 'Du er den ekte Hedy!'"
                story_text: "Nå skal vi lære om `{and}` og`{or}`! Hvis du har lyst til å sjekke to påstander trenger du ikke å bruke to `{if}`, du kan bruke `{and}` og `{or}`. Hvis du bruker `{and}` må begge påstandene være sann. Vi kan også bruke `eller`, da trenger kun en av påstandene å være sann.\n"
                example_code: "```\nnavn = {ask} 'Hva heter du?'\nalder = {ask} 'Hvor gammel er du?'\n{if} navn {is} 'Hedy' {and} alder {is} 2\n    {print} 'Du er den ekte Hedy'\n```\n"
            14:
                start_code: "alder = {ask} 'Hvor gammel er du?'\n{if} alder < 13\n    {print} 'Du er yngre enn meg!'\n{else}\n    {print} 'Du er eldre enn meg!'"
                story_text: "Vi skal lære enda flere nye ting. Det kan være du allerede kjenner til disse fra mattetimen, `<`og `>`.\n`<` kaller vi 'mindre enn'-tegnet. Dette bruker vi for å sjekke om det første tallet er *mindre enn* det andre, f.eks: `alder < 12`kan leses som `alder er mindre enn 12`.\nHvis du vil sjekke om det første tallet er mindre eller like stort som det andre, kan du bruke `<=`, f.eks: `alder <= 11`.\n`>` kaller vi `større enn`-tegnet. Dette bruker vi for å sjekke om det første tallet er *større enn* det andre, f.eks: `poeng > 10` kan leses som `poeng er større enn 10`.\nHvis du vil sjekke om det første tallet er større eller like stort som det andre, kan du bruke `>=`, f.eks: `poeng >= 11`.\nDu kan bruke disse sammenligningene i en `hvis`, for eksempel slik:\n"
                example_code: "```\nalder = {ask} 'Hvor gammel er du?'\n{if} alder > 12\n    {print} 'Du er eldre enn meg!'\n```\n"
            15:
                start_code: "svar = 0\n{while} svar != 25\n    svar = {ask} 'Hva er 5 ganger 5?'\n{print} 'Det svaret var riktig'"
                story_text: "Vi skal lære en ny løkke, `{while}` løkken! Denne løkken fortsetter å kjøre så lenge påstanden er sann.\nDet er derfor veldig viktig å endre verdien i løkken.\n\nI eksempelkoden lar vi løkken kjøre til vi får det riktige svaret.\nHvis ikke vi aldri får det riktige svaret, så fortsetter løkken for alltid!\n"
                example_code: "```\nsvar = 0\n{while} svar != 25\n    svar = {ask} 'Hva er 5 ganger 5?'\n{print} 'A korrekt svar ble gitt'\n```\n"
            16:
                start_code: "frukt = ['eple', 'banan', 'kirsebær']\n{print} frukt"
                story_text: "Vi skal nå lage lister på Python måten, med firkantparanteser rundt listene! Vi beholder fnuttene rundt tekstene i listen slik som vi lærte på et tidligere nivå.\nDu kan bruke firkanparantesene til å peke på en plass i listen.\n"
                example_code: "```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
            17:
                start_code: "{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Klar eller ei, her kommer jeg!'"
                story_text: "Nå gjør vi en liten endring i koden når vi bruker innrykk. Hver gang vi trenger innrykk, må vi nå skrive `:` på linjen før innrykket.\n\nPå dette nivået kan du også bruke en ny kommando `{elif}`. `{elif}` er en forkortelse for {else} {if} og du trenger det når du har lyst til å lage kode med 3 (eller fler!) alternativer.\nSjekk hvordan det blir!\n```\npremier = ['1 million kroner', 'en eplekake', 'ingenting']\ndin_premie = premier[{random}]\n{print} 'Du vinner ' din_premie \n{if} din_premie == '1 million kroner':\n    {print} 'Hurra! Du er rik!'\n{elif} din_premie == 'en eplekake':\n    {print} 'Digg, eplekake!'\n{else}:\n    {print} 'Bedre lykke neste gang..'\n```\n"
            18:
                start_code: "navn = 'Hedy'\n{print}('Mitt navn er ', navn)"
                story_text: "Vi har ankommet nivået hvor vi skriver virkelig pythonkode! Python er riktignok ikke på norsk, men du kan bruke knappen oppe i høyre hjørne av kodefeltet hvis du vil se hvordan koden ser ut på engelsk.\nNå når vi har nådd ekte pythonkode må vi bruke paranteser når vi bruker {print} og {range}.\nDette ser slik ut:\n```\n{print}('Mitt navn er Hedy!')\n```\nFor å skrive ut mer enn en ting må du bruke et komma mellom tingene.\n```\nnavn = 'Hedy'\n{print}('Mitt navn er ', navn)\n```"
    story:
        name: Fortelling
        levels:
            5:
                start_code: "{print} 'Her starter fortellingen din!'"
                story_text: "På dette nivået kan du programmere forskjellige avsluttninger, som vil gjøre fortellingen din enda gøyere.\n\nTenk på to avslutninger på fortellingen, for eksempel:\n\n- Prinsessen går gjennom skogen\n- Hun treffer på et monster\n\n- Lykkelig slutt: Hun tar sverdet sitt og monsteret løper sin vei\n- Ulykkelig slutt: Monsteret spiser prinsessen\n\nDu kan også sørge for at et navn kan bli skrevet inn på nytt. Det fungerer akkurat som på de forrige nivåene. Du kan kombinere det med en `{if}`, så har du allerede laget et helt program!\n"
                example_code: "```\nnavn {is} {ask} 'Hvem er det som går i skogen?'\n{print} navn 'går i skogen'\n{print} navn 'støter på et monster'\nslutt {is} {ask} 'Vil du ha en glad eller trist slutt?'\n{if} slutt {is} glad {print} navn 'tar sverdet og monsteret løper sin vei'\n{else} {print} 'Monsteret spiser' navn\n```\n"
            4:
                start_code: "{print} 'Fortellingen din vil bli skrevet her!'"
                story_text: "Du kan ha lagt merke til at det fremdeles er et problem med forrige nivå. Prøvde du å skrive ut en settning som inneholdt ordet navn?\nDu kan fikse det på dette nivået. Du må bruke hermetegn rundt alt som du vil skrive ut.\n"
                example_code: "```\nnavn {is} Ola\n{print} 'Navnet på hovedpersonen er' navn\n{print} navn 'skal nå gå en tur i skogen'\n{print} navn 'er litt redd'\ndyrene {is} 🦔, 🐿, 🦉, 🦇\n{print} 'Han hører lyden av en' dyrene {at} {random}\n{print} navn 'er redd for at det spøker i skogen'\n```\n"
            1:
                story_text: "På nivå 1 kan du lage en fortelling med en hovedperson som du velger selv.\n\nSom første linje, bruk denne koden:\n\n```\n{ask} hvem er stjernen i fortellingen din?\n```\n\nEtter den første linjen, start med `{print}` hvis du vil at setningen skal skrives ut. \nDu bruker `{echo}` hvis du vil ha hovedpersonen din skal være på slutten av setningen.\n"
                example_code: "\n```\n{ask} Hovedpersonen i fortellingen er\n{print} Hovedpersonen skal nå på tur i skogen\n{echo} Han er litt redd,\n{print} Han hører skumle lyder overalt\n{print} Han er redd dette er en forhekset skog\n```\n"
                start_code: '{print} Fortellingen din starter her'
                story_text_2: "### Exercise\nCan you make your own story in Hedy now by using `{print}` , `{ask}` and `{echo}`?\n"
            2:
                story_text: "På nivå 2 kan du gjøre fortellingen din gøyere. Hovedpersonen sitt navn kan nå være overalt i setningen.\n\nDu må programmere litt ekstra for det. Du må nå navngi hovedpersonen din først.\n\nDa kan du bruke navnet hvor som helst i en setning.\n"
                example_code: "\n```\nnavn {is} {ask} Hva heter hovedpersonen?\n{print} navn skal nå løpe i skogen\n{print} navn er litt redd\n{print} Plutselig hører han en skummel lyd...\n{sleep}\n{print} navn er redd dette er en forhekset skog\n```\n"
                start_code: '{print} fortellingen din'
                story_text_2: "### Exercise\nNow it's time to add variables to your own story that you've made in the previous level.\nGo to 'My programs', look for your level 1 story adventure and copy the code. Paste the code in your input screen in this level.\n\nThis code won't work in this level, because you have not used variables yet.\nChange the `{ask}` commands and `{echo}` commands in your code to the correct form that you've learned in this level.\n\n**Extra** Add a sleep command to your code to build up tension in your story.\n"
            12:
                story_text: "På dette nivået kan du bruke hermetegn for å lagre flere ord i en variabel.\n"
                example_code: "\n```\nnavn = 'Dronningen av England'\n{print} navn ' spiste kake, da plutselig ...'\n```\n"
                start_code: '# skriv koden din her'
            10:
                story_text: "På dette nivået kan du bruke {for} kommandoen i fortellingen din. På denne måten kan du enkelt programmere barneboken 'brunbjørn, brunbjørn, hva ser du'.\n"
                example_code: "```\ndyreliste = rød fugl, svart sau, grønn frosk, gul and, lite barn\n{print} 'brunbjørn'\n{print} 'brunbjørn'\n{print} 'Hva ser du?'\n{for} dyr {in} dyreliste\n    {print} 'Jeg ser et ' dyr ' som ser på meg'\n    {print} dyr\n    {print} dyr\n    {print} 'Hva ser du?'\n{print} 'Jeg ser alle dyrene som ser på meg!'\n```\n"
                start_code: '# skriv koden din her'
            9:
                story_text: "På dette nivået kan du bruke nøsting til å putte {if}, {repeat} eller {for}kommandoer inne i andre {if}, {repeat} eller {for}kommandoer. Dette gir deg mange muligheter og virkelig gjør fortellingen din interaktiv.\n"
                example_code: "```\n{print} 'Robin er på tur i byen'\nplassering = {ask} 'Skal Robin gå inn i en butikk eller går hun hjem?'\n{if} plassering {is} butikk\n    {print} 'Hun går inn i butikken.'\n    {print} 'Robin ser en bok som ser interessant ut'\n    bok = {ask} 'Kjøper Robin boken?'\n    {if} bok {is} ja\n        {print} 'Robin kjøper boken og går hjem'\n    {else}\n        {print} 'Robin forlater butikken og går hjem'\n{else}\n    {print} 'Robin går hjem'\n```\n"
                start_code: '# skriv koden din her'
            8:
                story_text: "På dette nivået kan du bruke flere linjer i din {if} kommando. På denne måten kan du oppgradere din lykkelige eller triste slutt!\n"
                example_code: "```\n{print} 'Å NEI! T-rexen haler innpå!'\nslutt = {ask} 'Vil du ha en lykkelig eller en trist slutt?'\n{if} slutt {is} lykkelig\n    {print} 'Akkurat i tide hopper Rolf tilbake i tidsmaskinen!'\n    {print} 'Mikal skriver inn koden og...'\n    {print} '💥PANG!💥'\n    {print} 'De er tilbake i garasjen sin'\n{else}\n    {print} 'Mikal roper KOM IGJEN ROLF! LØP RASKERE!'\n    {print} 'Men Rolf løper for sakte...'\n    {print} 'T-rexen haler innpå og spiser ham i ett stort jafs!🦖'\n```\n"
                start_code: '# skriv koden din her'
            7:
                story_text: "I en fortelling sier noen ord flere ganger. For eksempel når noen roper etter hjelp eller synger en sang.\nDu kan putte inn slike repetisjoner i historien din på dette nivået med `{repeat}`.\n"
                example_code: "```\n{print} 'Prinsen ropte og ropte etter hjelp'\n{repeat} 5 {times} {print} 'Hjelp!'\n{print} 'Hvorfor hjelper ingen meg?'\n```\n"
                start_code: "{repeat} 5 {times} {print} 'Hjelp!'"
            3:
                story_text: "På nivå 3 kan du gjøre historien din enda mer gøy. Du kan bruke tilfeldighet for å velge et hvilket som helst monster, dyr eller hindring slik:\n"
                example_code: "```\ndyrene {is} 🦔, 🐿, 🦉, 🦇\n{print} Han hører nå lyden av en dyrene {at} {random}\n```\n"
                story_text_2: "Kommandoen `{add}` kan også være nyttig i historien din.\n"
                example_code_2: "```\n{print} Han hører en lyd\ndyrene {is} 🐿, 🦔, 🦇, 🦉\ndyret {is} {ask} Hva tror du det er?\n{add} dyret {to_list} dyrene\n{print} det var en dyrene {at} {random}\n```\n"
                story_text_3: "Dette er et eksempel på `{remove}` kommandoen i historien din\n"
                example_code_3: "```\n{print} Ryggsekken hans ble alt for tung.\n{print} Inni den var en vannflaske, en lommelykt og en murstein.\nryggsek {is} vannflaske, lommelykt, murstein\ndump {is} {ask} Hvilken ting skal han legge igjen?\n{remove} dump {from} ryggsekk\n```\n"
                start_code: '{print} Fortellingen din'
            15:
                story_text: "Ved hjelp av `{while}` løkke kan man gjøre historier mer interessante. For eksempel kan du bruke `{while} spillet {is} 'i gang'`så du kan spille til spillet er over.\nEller så kan du bruke `{while} sverd {is} 'mistet'` så spilleren ikke kan fortsette før de har funnet noe.\n"
                example_code: "```\nkeys = 'mistet'\n{print} 'Du står i hagen din og har mistet nøklene dine.'\n{print} 'Hvor vil du lete etter de?'\n{print} 'Du kan velge mellom: tre, blomsterbed, stein, postboks'\n{while} keys == 'mistet'\n    location = {ask} 'Hvor vil du lete?'\n    {if} location == 'blomsterbed'\n        {print} 'Der var de ja!'\n        keys = 'funnet'\n    {else}\n        {print} 'Nei, de er ikke ved ' location\n{print} 'Nå kan du gå inn i huset!'\n```\n"
                start_code: '# skriv koden din her'
            13:
                story_text: "Ved å bruke `{and}` og `{or}` kommandoene, kan du korte ned historier. For eksempel, sjekk ut historien om dragen.\n"
                example_code: "```\nsverd = 'tapt'\nspill = 'i gang'\n{print} 'Helten vår går gjennom skogen'\n{print} 'Veien deler seg i to'\n{for} i {in} {range} 0 {to} 2\n    {if} spill {is} 'i gang'\n        vei = {ask} 'Hvilken vei skal hun velge?'\n        {if} vei {is} 'venstre' {and} sverd {is} 'funnet'\n            {print} 'Helten vår støter på en drage!'\n            {print} 'Heldigvis har helten et sverd til å beseire beistet'\n            spill = 'ferdig'\n        {if} vei {is} 'venstre' {and} sverd {is} 'tapt'\n            {print} 'Helten vår støter på en drage, men hun har ingen våpen!'\n            {print} 'Helten vår blir tatt av monsteret...'\n            {print} 'Prøv igjen'\n            spill = 'ferdig'\n        {if} vei {is} 'høyre' {and} sverd {is} 'funnet'\n            {print} 'Du har allerede funnet sverdet, det er ikke noe mer her'\n            {print} 'Hun går tilbake'\n        {if} vei {is} 'høyre' {and} sverd {is} 'tapt'\n            {print} 'Helten vår finner et sverdy'\n            {print} 'Dette kan være veldig hendig'\n            sverd = 'funnet'\n```\n"
                start_code: '# skriv koden din her'
            18:
                story_text: "We are going to print another story, but now we have to use brackets with `{print}`.\n\n### Exercise 1\nCreate a story of at least 5 sentences. You don't have to use 'name' just yet.\n"
                example_code: "```\n{print}('Welcome to this story!')\n```\n"
                example_code_2: "```\nnaam = {input}(\"What's your name?\")\n{print}('Welcome to this story!')\n```\n"
                story_text_2: "### Exercise 2\nWe have already prepared an `{input}` for you. First, use the `name` variable in your story.\nThen add a second `{ask}` and use that variable as well.\nTip: Remember the commas in a `{print}` between text and variables!\n"
                start_code: '# Schrijf jouw code hier'
        description: Fortelling
        default_save_name: Fortelling
    turtle:
        levels:
            4:
                start_code: "{print} 'Tegner figurer'\nvinkel {is} 90\n{turn} vinkel\n{forward} 25\n"
                story_text: "På nivå 4 kan du bruke fnutter med `{print}` og `{ask}`. Også når du tegner!\n"
                example_code: "```\n{print} 'Tegner figurer'\nvinkel {is} 90\n{turn} vinkel\n{forward} 25\n{turn} vinkel\n{forward} 25\n```\n"
                example_code_2: "```\n{color} {white}\n{forward} -80\n{color} {green}\n{forward} 50\n{color} {yellow}\n{forward} 50\n{color} {red}\n{forward} 50\n```\n"
                story_text_2: "You can also change the color of the lines with the command `{color}`. Check out the example.\nYou can also use the command `{color} {white}` to make 'invisible' lines. You could use these white lines to move the turtle anywhere in the screen before you start drawing.\n"
            1:
                story_text: "Du ha også bruke Hedy til å tegne. Ved å kombinere svinger og linjer så kan du lage firkanter eller trapper!\n\nVed å bruke `{forward}` kan du tegne en linje fremover. Talle bak kommandoen bestemmer hvor langt skilpadden vil gå. `{turn} {right}` snur skilpadden en kvart runde med klokken, `{turn} {left}` snur skilpadden mot klokken.\n\nDette er starten på en liten trapp. Kan du få den til å ha 5 trinn?\n"
                example_code: "```\n{turn} {right}\n{forward} 50\n{turn} {left}\n{forward} 50\n```\n"
                start_code: "{forward} 50\n{turn} {left}"
            2:
                story_text: "På nivå 1 kunne skilpadden kun snu seg til høyre eller venstre. Det er litt kjedelig!\nPå nivå 2 kan den peke nesen i alle retninger.\n\nBruk 90 til å snu en kvart omdreining. Vi kalle dette grader. En full rotasjon er 360 grader.\nKan du lage en liten figur med denne koden? Kanskje et triangel eller en sirkel?\n"
                example_code: "\n```\n{print} Tegner figurer\nvinkel {is} 90\n{turn} vinkel\n{forward} 25\n{turn} vinkel\n{forward} 25\n```\n"
                start_code: "{print} Skilpadderace!\nvinkel {is} 90\n{turn} vinkel\n{forward} 25\n"
                story_text_2: "Also, in level 1 the turtle could only turn left or right. That is a bit boring!\nIn level 2 he can point his nose in all directions.\n\nUse 90 to turn a quarter. We call this degrees. A full turn is 360 degrees.\nCan you make a figure with this code? Maybe a triangle or a circle?\n"
                example_code_2: "```\n{print} Drawing figures\nangle {is} 90\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n```\n"
            3:
                story_text: "På dette nivået kan du bruke `{at} {random}` med den tegnende skilpadden. Et tilfeldig valg gjør at skilpadden går en ny rute hver gang.\nBruk `{at} {random}` for å velge en verdi fra listen. Du kan kopiere og lime inn line 2 og 3 for å lage en lenger tilfeldig sti.\n"
                example_code: "\n```\nvinkler {is} 10, 50, 90, 150, 250\n{turn} vinkler {at} {random}\n{forward} 25\n```\n"
                start_code: "vinkler {is} 10, 50, 90, 150, 250\n{turn} vinkler {at} {random}\n{forward} 25\n"
            5:
                story_text: "På nivå 5 kan du ta valg med `{if}`. For eksempel mellom forskjellige typer figurer.\n"
                example_code: "```\n{print} 'Tegner figurer'\nfigur {is} {ask} 'Vil du lage en firkant eller en trekant?'\n{if} figur {is} trekant vinkel {is} 120\n{else} vinkel {is} 90\n{turn} vinkel\n{forward} 25\n{turn} vinkel\n{forward} 25\n{turn} vinkel\n{forward} 25\n{turn} vinkel\n{forward} 25\n```\n"
                start_code: "{print} 'Tegner figurer'\nfigur {is} {ask} 'Vil du lage en firkant eller en trekant?'\n{if} figur {is} trekant vinkel {is} 120 {else} vinkel {is} 90\n{turn} vinkel\n{forward} 25\n"
                story_text_2: "### Exercise\nFill in the correct numbers in this code to get it to work.\nAfter you've done that, you can try to add the option backwards.\n\n**Extra** Instead of using 'left' and 'right', remake the program with North, East, South and West.\nThis way you could add even more directions like Northeast and Southwest etc.\n"
                example_code_2: "```\ndirection {is} {ask} 'Do you want to go left, right, or straight ahead?'\nif direction is left turn _\nif direction is right turn _\nforward 100\n```\n"
            8:
                story_text: "Nå som vi kan repetere flere linjer så kan vi lage figurer lettere.\nVi trenger bare å sette vinkelen en gang og så bruke den variabelen i en `{repeat}`.\n"
                example_code: "```\nvinkel = 90\n{repeat} 10 {times}\n    {turn} vinkel\n    {forward} 50\n```\n"
                story_text_2: "Vi kan også forbedre programmet som tegner forskjellige figurer.\nKan du finne ut hvor langt skilpadden må snu seg her? Fullfør koden og du kan tegne et hvilket som helst polygon!\n"
                example_code_2: "```\nhjørner = {ask} 'Hvor mange hjørner skal jeg tegne?'\ngrader = 360 / hjørner\n{repeat} grader {times}\n    {turn} _\n    {forward} _\n```\n"
                start_code: "hjørner = {ask} 'Hvor mange hjørner skal jeg tegne?'\n"
            6:
                story_text: "På dette nivået kan du bruke regning for å tegne forskjellige figurer.\nDu kan ha lært på skolen at å snu en full sirkel er 360 grader. Hvis ikke så vet du det nå!\nDet er derfor du bruker 90 grader for en firkant. 360 grader delt på 4 er 90.\nNå som vi kan gjøre matte med Hedy så kan vi tegne alle figurene vi vil!\n"
                example_code: "```\nhjørner = {ask} 'Hvor mange hjørner vil du ha?'\ngrader = 360 / hjørner\n{forward} 50\n{turn} grader\n{forward} 50\n{turn} grader\n{forward} 50\n{turn} grader\n{forward} 50\n{turn} grader\n{forward} 50\n{turn} grader\n{forward} 50\n{turn} grader\n```\n"
                start_code: "{print} 'Tegner figurer'\n"
            9:
                story_text: "Now that we can use a `{repeat}` inside a `{repeat}`, we can create more complex figures.\n\n### Exercise 1\nThis code creates three black triangles, change that into five pink squares.\n\n **(extra)** Create a figure of your own choosing consisting of at least two different shapes types.\n"
                example_code: "```\n{color} {black}\n{repeat} 3 {times}\n    {repeat} 3 {times}\n        {forward} 10\n        {turn} 120\n    {color} {white}\n    {forward} 50\n    {color} {black}\n```\n"

                start_code: '# place your code here'
        name: Skilpadde
        description: Lag din egen tegning
        default_save_name: Skilpadde
    rock:
        levels:
            9:
                start_code: '# skriv koden din her'
                story_text: "På dette nivået kan du programmere hele stein, saks, papir ved å plassere `{if}`-kommandoer inni `{if}`-kommandoer. Kan du fullføre koden?\n"
                example_code: "```\nvalgene {is} stein, saks, papir\nditt_valg {is} {ask} 'Hva velger du?'\n{print} 'Du valgte ' ditt_valg\ndatamaskinens_valg {is} valgene {at} {random}\n{print} 'Datamaskinen valgte ' datamaskinens_valg\n{if} datamaskinens_valg {is} ditt_valg\n    {print} 'Uavgjort'\n{if} datamaskinens_valg {is} stein\n    {if} ditt_valg {is} papir\n        {print} 'Du vant!'\n    {if} ditt_valg {is} saks\n        {print} 'Du tapte!'\n```\n"
            1:
                story_text: "På nivå 1 kan du starte med spillet stein, saks, papir.\n\nMed `{ask}` kan du ta et valg og med `{echo}` kan du gjenta det valget.\n"
                example_code: "\n```\n{print} hva velger du?\n{ask} velg mellom stein, saks, papir\n{echo} du valgte:\n```\nIstedenfor å bruke ord så kan du selvfølgelig bruke emoji: ✊✋✌\n"
                start_code: '{print} Velkommen til din egen stein saks papir!'
                story_text_2: "### Exercise\nInstead of using words, you could also use emojis: ✊✋✌\nCan you create a code using emojis?\n"
                example_code_2: "```\n{print} what do you choose?\n{ask} choose from _\n{echo} so your choice was:\n```\n"
            10:
                story_text: "Er du for lat til å spille spillet selv? La Hedy spille det for deg!\n"
                example_code: "```\nvalgene = stein, saks, papir\nspillere = Maren, Magnus\n{for} spiller {in} spillere\n     {print} spiller ' velger ' valgene {at} {random}\n```\n"
                start_code: '# skriv koden din her'
            5:
                story_text: "På dette nivået kan vi bestemme hvem som vant.\nTil det trenger vi den nye `{if}`-koden.\n\nTa vare på ditt valg og datamaskinens valg.\nSå kan du bruke `{if}` for å se om de er det samme eller forskjellig.\nKan du fullføre koden?\n"
                example_code: "```\nvalgene {is} stein, saks, papir\ndatamaskin_valg {is} _\nditt_valg {is} {ask} 'Hva velger du?'\n{print} 'du velger ' _\n{print} 'datamaskinen velger ' _\n{if} _ {is} _ {print} 'uavgjort!' {else} {print} 'ikke uavgjort'\n```\n\nFyll ut resten av koden der det er linjer for å se om det er uavgjort.\n"
                start_code: "{print} 'Velkommen til din egen stein saks papir!'"
            4:
                story_text: "På dette nivået kan vi programmere videre på stein, saks, papir. Om du vil legge til tekst må du bruke fnutter her også.\nKan du fullføre koden ved å fylle ut de riktige kommandoene og tengene der det er streker?\n"
                start_code: "{print} 'Velkommen til din egen stein saks papir!'"
            3:
                story_text: "\nPå dette nivået kan vi lage lister og velge ting fra de.\nDu kan først lage en liste med `{is}`. Så kan du la datamaskinen velge noe annet fra listen med `{at} {random}`.\nFor eksempel så kan du la datamaskinen velge mellom stein, saks og papir.\n"
                example_code: "\n```\nvalgene {is} stein, saks, papir\n{print} valgene {at} {random}\n```\n"
                start_code: '{print} Velkommen til din egen stein saks papir!'
                story_text_2: "### Exercise\nNow you only have one player, so can you add a second player?\nYou can even use variables to name player 1 and player 2.\n"
                example_code_2: "```\nchoices {is} rock, paper, scissors\n{print} player 1 chooses... choices {at} {random}\n{print} player 2 _\n```\n"
            2:
                story_text: "På dette nivået kan du øve deg på å bruke variabler så du kan lage stein, saks, papir-spillet på neste nivå!\n"
                example_code: "```\nvalg {is} _\n{print} Jeg velger valg\n```\n"
                start_code: '# skriv koden din her'
            15:
                story_text: "Spill til du klarer å slå datamaskinen! Men først, fullfør eksempelkoden...\n"
                example_code: "```\nvunnet = 'nei'\nvalgene = 'stein', 'saks', 'papir'\n{while} vunnet == 'nei'\n    ditt_valg = {ask} 'Hva velger du?'\n    datamaskinens_valg = valgene {at} {random}\n    {print} 'du valgte ' ditt_valg\n    {print} 'datamaskinen valgte ' datamaskinens_valg\n    {if} datamaskinens_valg == ditt_valg\n        {print} 'Uavgjort!'\n    {if} datamaskinens_valg == 'stein' {and} ditt_valg == 'saks'\n        {print} 'Du tapte!'\n    {if} datamaskinens_valg == 'stein' {and} ditt_valg == 'papir'\n        {print} 'Du vant!'\n        vunnet = 'yes'\n```\n"
                start_code: '# skriv koden din her'
            13:
                story_text: "Med `{and}`-kommandoen kan du korte ned stein, saks, papir-koden din! Sjekk ut eksempelkoden under og prøv å fullføre den.\n"
                example_code: "```\nvalgene = 'stein', 'saks', 'papir'\nditt_valg = {ask} 'Hva velger du?'\ndatamaskinens_valg = valgene {at} {random}\n{print} 'Du valgte ' ditt_valg\n{print} 'Datamaskinen valgte ' datamaskinens_valg\n{if} datamaskinens_valg {is} ditt_valg\n    {print} 'Uavgjort'\n{if} datamaskinens_valg {is} 'stein' {and} ditt_valg {is} 'papir'\n    {print} 'Du vant!'\n{if} datamaskinens_valg {is} 'stein' {and} ditt_valg {is} 'saks'\n    {print} 'Datamaskinen vant!'\n```\n"
                start_code: '# skriv koden din her'
        name: Stein, saks, papir
        description: Lag ditt eget stein, saks,papir-spill
        default_save_name: Stein
    calculator:
        levels:
            12:
                start_code: '# skriv koden din her'
                story_text: "Du kan lage en kalkulator som fungerer med desimaltall.\n"
                example_code: "```\ntall1 = {ask} 'Hva er det første tallet?'\ntall2 = {ask} 'Hva er det andre tallet?'\nriktig_svar = tall1 + tall2\n{print} tall1 ' pluss ' tall2 ' er ' riktig_svar\n```\n"
            14:
                story_text: "På dette nivået kan du programmere spillet \"Gjett hvilket nummer\"\n"
                example_code: "```\n{print} 'Gjett hvilket nummer'\ntallene = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\ntallet = tallene {at} {random}\nspill = 'i gang'\n{for} i {in} {range} 1 {to} 10\n    {if} spill == 'i gang'\n        gjetting = {ask} 'Hvilket tall tror du det er?'\n        {if} gjetting > tallet\n            {print} 'Lavere!'\n        {if} gjetting < tallet\n            {print} 'Høyere!'\n        {if} gjetting == tallet\n            {print} 'Du vant!'\n            spill = 'slutt'\n```\n"
                start_code: '# skriv koden din her'
            10:
                story_text: "Dette kalkulatorspillet hjelper med å øve på multiplikasjonstabeller!\nOm du legger til flere tall på listen så kan du øve på alle gangetabellene.\n"
                example_code: "```\ntallene = 1, 2, 3\n{for} tall1 {in} tallene\n    {for} tall2 {in} tallene\n        ditt_svar = {ask} 'Hvor mye er ' tall1 ' ganger ' tall2 '?'\n        riktig_svar = tall1 * tall2\n        {if} ditt_svar {is} riktig_svar\n            {print} 'Godt jobbet!'\n        {else}\n            {print} 'Det er feil. Det riktige svaret er ' riktig_svar\n```\n"
                start_code: '# skriv koden din her'
            9:
                story_text: "På de forrige nivåene lærte du hvordan å lage en kalkulator. På dette nivået kan du utvide koden til å lage et lite mattespill. Slik som dette...\n"
                example_code: "```\npoengsum = 0\n{repeat} 10 {times}\n    tallene = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    tall1 = tallene {at} {random}\n    tall2 = tallene {at} {random}\n    riktig_svar = tall1 * tall2\n    {print} 'Hva er ' tall1 ' ganget med ' tall2 '?'\n    ditt_svar = {ask} 'Skriv svaret ditt her...'\n    {print} 'Ditt svar er ' ditt_svar\n    {if} ditt_svar {is} riktig_svar\n        poengsum = poengsum + 1\n{print} 'Godt jobbet! Din poengsum er... ' poengsum ' av 10!'\n```\n"
                start_code: "{print} 'Velkommen til denne kalkulatoren!'"
            6:
                story_text: "Nå som du kan regne så kan du også lage et program til å øve på regnestykker. Du kan lage regnestykker til deg selv, for eksempel:\n"
                example_code: "```\nriktig_svar = 11 * 27\nditt_svar = {ask} 'Hvor mye er 11 ganger 27?'\n{if} ditt_svar {is} riktig_svar {print} 'godt jobbet!'\n{else} {print} 'Feil! Riktig svar er ' riktig_svar\n```\n"
                story_text_2: "Du kan også la datamaskinen lage tilfeldige regnestykker på egenhånd ved hjelp av `{at} {random}`.\nDette er hvordan du velger tall fra en tabell med tall å øve på og fra det vil du få forskjellige summer:\n"
                example_code_2: "```\ntabellene = 4, 5, 6, 8\ntallene = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\ntabell = tabellene {at} {random}\ntall = tallene {at} {random}\nriktig_svar = tabell * tall\nditt_svar = {ask} 'hvor mye er ' tabell ' ganget med ' tall '?'\n{if} ditt_svar {is} riktig_svar {print} 'riktig'\n{else} {print} 'feil! det var ' riktig_svar\n```\n"
                start_code: "{print} 'Velkommen til denne kalkulatoren!'"
                story_text_3: "You can also let the computer do random sums on its own using random.\nThis is how you choose a number of tables to practice, and from that you always get a different sum:\n"
            15:
                story_text: "Du kan legge til en `{while}`-løkke til kalkulatorspillet du lærte å lage på det forrige nivået.\nDette gjør det sånn at spilleren ikke kan fortsette til neste spørsmål om de har svart feil.\n"
                example_code: "```\npoengsum = 0\n{for} i {in} {range} 0 {to} 9\n    tallene = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    tall1 = tallene {at} {random}\n    tall2 = tallene {at} {random}\n    riktig_svar = tall1 * tall2\n    ditt_svar = 0\n    {while} ditt_svar != riktig_svar\n        {print} 'Hvor mye er ' tall1 ' ganger ' tall2 '?'\n        ditt_svar = {ask} 'Skriv inn ditt svar:'\n        {print} 'Ditt svar er ' ditt_svar\n    {print} 'Godt jobbet!'\n{print} 'Du vant!'\n```\n"
                start_code: '# skriv koden din her'
            11:
                example_code: "```\nnumber = 10\n{for} i {in} {range} 1 to 10\n    {print} i * number\n```\n"
                story_text: "With a `{for}` you can simplify tables of multiplication practise program.\n\n### Exercise 1\nImprove the example code such that it prints a nice multiplication table: <br> \"1 times 10 is 10\", \"2 times 10 is 20\", etc.\n\n### Exercise 2\nGo back to your level 10 multiplication code, and modify it so that it uses a `{for}` and `{range}`.\n"
                start_code: '# place your code here'
            13:
                story_text: "\n### Exercise 1\nLet's make the practice program a bit harder. The player now has to answers two questions correctly. Fill out the blanks to complete the program.\n\n### Exercise 2 (extra)\nSometimes, calculations have multiple correct answers. For example, 10 can be divided by 5 and by 2. So the question 'What number divides 10?' can be answered by 2 and by 5.\nAsk for a calculation that has multiple correct answers, ask the player to answer it, and determine if it is correct using `{or}`.\nEmpty the programming field and create your own solution.\n"
                example_code: "```\nanswer1 = {ask} 'What is 10 times 7?'\nanswer2 = {ask} 'What is 6 times 7?'\n{if} _ _ _ _ _ _ _\n    {print} _\n```\n"
                start_code: '# Schrijf jouw code hier'
        name: Kalkulator
        description: Lag en kalkulator
        default_save_name: Kalkulator
    restaurant:
        levels:
            2:
                start_code: '# skriv koden din her'
                story_text: "På nivå 2 kan du utvide din restaurant ved å bruke variabler. På nivå 1 kunne Hedy bare svare med bestillingen 1 gang og den kunne bare huske siste ting som var bestilt.\nNå kan du bruke variabler og Hedy kan huske både mat og drikke!\n"
                example_code: "```\n{print} Velkommen til Hedys restaurant!\n{print} I dag har vi pizza og lasagne på menyen.\nmaten {is} {ask} Hva har du lyst til å spise?\n{print} Godt valg! maten er min favoritt!\ntilbehør {is} {ask} Foretrekker du vegetar eller med kjøtt?\n{print} maten med tilbehør skal bli!\ndrikken {is} {ask} Vil du ha noe å drikke med det?\n{print} Takk for bestillingen\n{print} maten og drikken kommer snart!\n```\n"
                story_text_2: "### Exercise\nCan you make this code more elaborate? For example by adding drinks to the order? Or...?\n"
            7:
                example_code: "```\n{print} 'Velkommen Hedys restaurant!'\nantall_personer = {ask} 'Hvor mange personer er dere i dag?'\n{repeat} antall_personer times mat = {ask} 'Hva vil du spise?'\n{print} 'Takk for bestillingen, den er på vei!'\n```\n"
                story_text: "På dette nivået har du lært å bruke `{repeat}`-kommandoen til å repeterer en linje med kode et visst antall ganger.\nDu kan bruke det i din restaurant til å spørre flere gjester hva de har lyst på. Slik:\n"
                start_code: '# skriv koden din her'
            1:
                story_text: " På nivå 1 kan du lage din egne virtuelle restaurant og ta imot dine gjesters bestillinger.\n"
                example_code: "  ```\n {print} Velkommen til Hedys restaurant 🍟\n {ask} Hva har du lyst å bestille?\n {echo} Så du vil bestille\n {print} Takk for din bestilling!\n {print} Den er på vei!\n ```\n"
                story_text_2: "Kan du tenke deg flere linjer du kan legge til restaurantens kode? For eksempe, kan du spørre gjestene hva de har lyst å drikke, fortelle de prisen eller å ønske de et godt måltid?\n"
                start_code: '# skriv koden din her'
            12:
                story_text: "Fra dette nivået av kan du bruke desimaltall for å gjøre menyen mer realistisk.\n"
                example_code: "```\npris = 0\nønsket_mat = {ask} 'What would you like to order?'\nønsket_drikke = {ask} 'What would you like to drink?'\n{if} ønsket_mat {is} 'hamburger'\n    pris = pris + 60.50\n{if} ønsket_mat {is} 'pizza'\n    pris = pris + 50.75\n{if} ønsket_drikke {is} 'vann'\n    pris = pris + 10.50\n{if} ønsket_drikke {is} 'brus'\n    pris = pris + 20.35\n{print} 'Det blir ' pris ' kroner, takk!'\n```\n"
                start_code: '# skriv koden din her'
            11:
                story_text: "Vi kan bruke `{for} i {in} {range} 1 {to} 5`til å skrive ut ordrene fra flere kunder på en ordnet måte.\n"
                example_code: "```\n{print} 'Velkommen til Restaurant Hedy!'\nantall_personer = {ask} 'Hvor mange personer er dere i dag?'\n{for} i {in} {range} 1 {to} antall_personer\n    {print} 'Ordre nummer ' i\n    ønsket_mat = {ask} 'Hva vil du ha å spise?'\n    {print} ønsket_mat\n    {if} ønsket_mat {is} pommes frites\n        dressing = {ask} 'Ønsker dere dressing med det?'\n        {print} dressing\n    drikke = {ask} 'Hva vil du ha å drikke?'\n    {print} drikke\npris = 40 * antall_personer\n{print} 'Det blir ' pris ' kroner, takk!'\n```\n"
                start_code: '# skriv koden din her'
            10:
                story_text: "På dette nivået kan du lære hvordan å enkelt spørre om gjestenes ønsker i kort kode.\n"
                example_code: "```\nretter = forrett, hovedrett, dessert\n{for} rett {in} retter\n    ønsket_mat = {ask} 'Hva ønsker du til ' rett '?'\n    {print} ønsket_mat ' skal du få til ' rett\n```\n"
                story_text_2: "Selvfølgelig, du kan også bestille for flere personer!\n"
                example_code_2: "```\nretter = forrett, hovedrett, dessert\nnavnene = Timon, Onno\n{for} navn {in} navnene\n    {for} rett {in} retter\n        ønsket_mat = {ask} navn ', hva vil du ha til ' rett '?'\n        {print} navn ' bestiller ' ønsket_mat ' til ' rett\n```\n"
                start_code: retter = forrett, hovedrett, dessert
            9:
                story_text: "På dette nivået kan du putte `{if}` inni `{if}` for å gjøre restauranten din mer realistisk og gøy!\nDu kan for eksempel spørre om saus om noen bestiller pommes frites, men det passer kanskje ikke om noen bestiller lasagne!\nSjekk ut eksempelet og prøv dette på din egne virtuelle restaurant!\n"
                example_code: "```\n{print} 'Velkommen til Hedys restaurant!'\nantall_personer = {ask} 'Hvor mange er dere i dag?'\n{print} 'Supert!'\npris = 0\n{repeat} antall_personer {times}\n    ønsket_mat = {ask} 'Hva ønsker dere å bestille?'\n    {print} ønsket_mat\n    {if} ønsket_mat {is} pommes frites\n        pris = pris + 30\n        dressing = {ask} 'Ønsker dere dressing med det?'\n        {if} dressing {is} no\n            {print} 'ingen dressing'\n        {else}\n            pris = pris + 10\n            {print} 'med ' dressing\n    {if} ønsket_mat {is} pizza\n        pris = pris + 40\n{print} 'Det blir ' pris ' kroner'\n{print} 'Vel bekomme!'\n```\n"
                start_code: '# skriv koden din her'
            8:
                story_text: "På dette nivået kan du lage din virtuelle restaurant enda mer forseggjort ved å reptere flere linjer med kode. Slik:\n"
                example_code: "```\n{print} 'Velkommen til Hedys restaurant!'\nantall_personer = {ask} 'Hvor mange er dere i dag?'\n{print} 'Supert!'\n{repeat} antall_personer {times}\n    ønsker = {ask} 'Hva har dere lyst på?'\n    {print} ønsker\n{print} 'Takk for bestillingen!'\n{print} 'Vel bekomme!'\n```\n"
                story_text_2: "Selvfølgelig, denne koden kan utvides med flere tin i menyen, tilbud om drikke, og/eller flere retter så legg til så mye du ønsker!\n"
                start_code: '# skriv koden din her'
            6:
                story_text: "På dette nivået kan du bruke matte til å regne ut totalprisen på kundens bestilling. Dette vil gjøre den virtuelle restauranten mer realistisk.\n"
                example_code: "Enkel\nDu kan lage koden for en enkel restaurant slik:\n```\n{print} 'Velkommen til Hedys restaurant'\n{print} 'Her er vår meny:'\n{print} 'Våre hovedretter er pizza, lasagne og spaghetti'\nhovedrett = {ask} 'Hvilken hovedrett vil du ha?'\npris = 0\n{if} hovedrett {is} pizza pris = 100\n{if} hovedrett {is} lasagne pris = 120\n{if} hovedrett {is} spaghetti pris = 80\n{print} 'Du har bestilt ' hovedrett\n{print} 'Det blir ' pris ' kroner, takk'\n{print} 'Takk, vel bekomme!'\n```\n"
                start_code: '# skriv koden din her'
            5:
                story_text: "På dette nivået lar `{if}`-kommandoen deg å spørre kunder spørsmål og gi forskjellige ting til svar.\nI eksempelet under kan du se at du kan spørre kunden om de har lyst å høre om dagens rett og Hedy kan svare deretter.\n"
                example_code: "```\n{print} 'Velkommen til Hedys restaurant!'\nvil_høre {is} {ask} 'Vil du høre om dagens rett?'\n{if} vil_høre {is} ja {print} 'Dagens rett er kylling piri piri med ris.' {else} {print} 'Ikke noe problem.'\nmatønske {is} {ask} 'Hva har du lyst å spise?'\n{print} 'en ' matønske ' er på vei!'\ndrikke {is} {ask} 'Hva har du lyst å drikke til?'\n{if} drikke {is} cola {print} 'Beklager, vi er tom for cola!' {else} {print} 'Godt valg!'\nannet {is} {ask} 'Vil du ha noe annet?'\n{print} 'La meg lese opp bestillingen...'\n{print} 'En ' matønske\n{if} drikke {is} cola {print} 'og...' {else} {print} 'En ' drikke\n{if} annet {is} nei {print} 'Det var det!' {else} {print} 'En ' annet\n{print} 'Takk for bestillingen og vel bekomme!'\n```\n"
                start_code: '# skriv koden din her'
            4:
                story_text: "På dette nivået må du bruke fnutter når du bruker `{print}`-kommandoen.\nKan du gjøre sånn at koden fra forrige nivå også fungerer ved å legge til fnutter?\n\nVær forsiktig! I forrige nivå var fnutter lov i tekst, men på dette nivået vil det forvirre Hedy om du har fnutter i teksten din.\nSå istedenfor å skrive `{print} I dag serverer vi pizza`, må du nå skrive `{print} 'I dag serverer vi pizza'`\n"
                example_code: "```\n{print} 'Velkommen til Hedys Restaurant!'\n{print} 'I dag er det pizza og lasagne på menyen.'\nmaten {is} {ask} 'Hva har du lyst til å spise?'\n{print} 'Godt valg! ' maten ' er min favoritt!'\ntilbehør {is} {ask} 'Foretrekker du vegetar eller med kjøtt?'\n{print} maten ' med ' tilbehør ' skal bli!'\ndrikken {is} {ask} 'Vil du ha noe å drikke til?'\n{print} 'Takk for bestillingen.'\n{print} maten ' og ' drikken ' kommer snart!'\n```\n"
                start_code: '# skriv koden din her'
            3:
                story_text: "Har du problemer med å bestemme hva du vil ha til middag? Du kan la Hedy bestemme for deg!\nLag en liste over dine favorittmåltid og Hedy kan tilfeldig plukke ut en middag til deg.\nDu kan også ha litt gøy ved å la Hedy velge prisen for middagen også. Hva blir det til middag i dag?`\n"
                example_code: "```\n{print} Velkommen til Hedys Tilfeldige Restaurant!\n{print} Den eneste restauranten som tilfeldig velger hva du får servert og hva det vil koste!\nforretter {is} salat, suppe, carpaccio\nhovedretter {is} pizza, rosenkål, spaghetti\ndesserter {is} brownies, iskrem, franske oster\ndrikker {is} cola, øl, vann\npriser {is} 10 kroner, 100 kroner, 1000 kroner\n{print} Du vil begynne med: forretter {at} {random}\n{print} Og så vil vi servere: hovedretter {at} {random}\n{print} Og til slutt: desserter {at} {random}\n{print} Til maten vil du få drikker {at} {random} å drikke\n{print} Det vil koste deg: priser {at} {random}\n{print} Takk og vel bekomme!\n```\n"
                story_text_2: "Har dine gjester noen allergier eller noen retter de ikke liker? Da kan du bruke `{remove}`-kommandoen til å fjerne ting fra menyen.\n"
                example_code_2: "```\n{print} Mysteriemilkshake\nsmaker {is} jordbær, sjokolader, vanilje\nallergier {is} {ask} Er du allergisk til en av smakene?\n{remove} allergier {from} smaker\n{print} Du vil få en flavors {at} {random} milkshake\n```\n"
                start_code: '# skriv koden din her'
            15:
                story_text: "Med `{while}` kan du sørge for at kundene dine kan fortsette å bestille til de er ferdig.\n"
                example_code: "```\n{print} 'Velkommen til McHedy'\nmer = 'ja'\n{while} mer == 'ja'\n    ønsker = {ask} 'Hva vil du bestille?'\n    {print} ønsker\n    mer = {ask} 'Vil du ha noe mer?'\n{print} 'Takk!'\n```\n"
                start_code: '# skriv koden din her'
            13:
                story_text: "På dette nivået kan vi bruke de nye kommandoen til å oppgradere restauranten vår.\nVi bruker `{and}`til å se om to ting begge stemmer.\n"
                example_code: "```\npris = 100\nønsket_mat = {ask} 'Hva vil du ha å spise?'\nønsket_drikke = {ask} 'Hva ønsker du å drikke til maten?'\n{if} ønsket_mat {is} 'toast' {and} ønsket_drikke {is} 'juice'\n    {print} 'Det er på tilbudsmenyen'\n    pris = pris - 30\n{print} 'Det blir ' pris ' kroner'\n```\n"
                start_code: '# skriv koden din her'
        name: Restaurant
        description: Lag din egen virtuelle restaurant
        default_save_name: Restaurant
    fortune:
        levels:
            10:
                story_text: "In this level you'll learn how to program the game MASH (mansion, apartement, shack, house). In this game you can predict for all the players at once, what their future will look like.\n"
                example_code: "```\nhouses = mansion, apartment, shack, house\nloves = nobody, a royal, their neighbour, their true love\npets = dog, cat, elephant\nnames = Jenna, Ryan, Jim\n{for} name {in} names\n    {print} name ' lives in a ' houses {at} {random}\n    {print} name ' will marry ' loves {at} {random}\n    {print} name ' will get a ' pets {at} {random} ' as their pet.'\n    {sleep}\n```\n"
                start_code: '# skriv koden din her'
            1:
                story_text: "Have you ever been to a carnival and had your future predicted by a fortune teller? Or have you ever played with a magic eight ball?\nThen you probably know that they can't really predict your future, but it's still fun to play!\n\nIn the upcoming levels you can learn how to create your own fortune telling machine!\nIn level 1 you can start off easy by letting Hedy introduce herself as a fortune teller and let her {echo} the players' answers.\nLike this:\n"
                example_code: "```\n{print} Hello, I'm Hedy the fortune teller!\n{ask} Who are you?\n{print} Let me take a look in my crystal ball\n{print} I see... I see...\n{echo} Your name is\n```\n"
                story_text_2: "### Exercise\nHedy now only tells you your name. Can you expand the code so that Hedy can predict more things about you?\nObviously, Hedy isn't a very good fortune teller yet, as she can only repeat the answers that were given by the players!\nTake a look in level 2 to improve your fortune teller.\n"
                start_code: '# skriv koden din her'
            12:
                story_text: "In this level you can make your fortunes multiple words. Like in this example below:\n"
                example_code: "```\nfortunes = 'you will be rich', 'you will fall in love', 'you will slip on a banana peel'\n{print} 'I will take a look in my crystall ball for your future.'\n{print} 'I see... I see...'\n{sleep}\n{print} fortunes {at} {random}\n```\n"
                start_code: '# skriv koden din her'
            8:
                story_text: "In the previous levels you've learned how to use repeat to make the fortune teller answer 3 questions in a row, but we had a problem with printing the questions.\nNow that problem is solved, because of the new way of using the repeat command.\nIn the next example you can have your fortune teller {ask} 3 questions and also print them!\n"
                example_code: "```\n{print} 'I am Hedy the fortune teller!'\n{print} 'You can {ask} me 3 questions.'\nanswers = yes, no, maybe\n{repeat} 3 {times}\n   question = {ask} 'What do you want to know?'\n   {print} question\n   {sleep}\n   {print} 'My crystal ball says...' answers {at} {random}\n```\n"
                start_code: '# skriv koden din her'
            7:
                story_text: "In this level you can use the `{repeat}` command to make your machine tell multiple fortunes at once.\n"
                example_code: "```\n{print} 'Im Hedy the fortune teller!'\n{print} 'You can {ask} 3 questions!'\n{repeat} 3 {times} question = {ask} 'What do you want to know?'\nanswer = yes, no, maybe\n{repeat} 3 {times} {print} 'My crystal ball says... ' answer {at} {random}\n```\n"
                start_code: '# skriv koden din her'
            6:
                story_text: "In this level you can use math in your predictions as a fortune teller. This allows you to make up (silly) formulas to calculate the future.\nFor example you could calculate how rich you'll get or how many kids you will have when you grow up.\n"
                example_code: "```\n{print} 'I am Hedy the fortune teller!'\n{print} 'I can predict how many kids youll get when you grow up!'\nage = {ask} 'How old are you?'\nsiblings = {ask} 'How many siblings do you have?'\nlength = {ask} 'How tall are you in centimetres?'\nkids = length / age\nkids = kids - siblings\n{print} 'You will get ...'\n{sleep}\n{print} kids ' kids!'\n```\n\nIf the previous example wasn't silly enough for you, take a look at this one!\n\n```\n{print} 'Im Hedy the silly fortune teller!'\n{print} 'I will predict how smart you are!'\nfootball = {ask} 'On a scale 1-10 how much do you love football?'\nbananas = {ask} 'How many bananas did you eat this week?'\nhygiene = {ask} 'How many times did you wash your hands today?'\nresult = bananas + hygiene\nresult = result * football\n{print} 'You are ' result ' percent smart.'\n```\n"
                start_code: '# skriv koden din her'
            5:
                story_text: "In this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!\nBy using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.\nCheck out this example to find out how.\n"
                example_code: "```\n{print} 'Im Hedy the fortune teller!'\n{print} 'I can predict {if} youll win the lottery tomorrow!'\nperson {is} {ask} 'Who are you?'\n{if} person {is} Hedy {print} 'You will definitely win!🤩' {else} {print} 'Bad luck! Someone {else} will win!😭'\n```\n"
                start_code: '# skriv koden din her'
            4:
                story_text: "This level has no new functions, but allows you to practice with using the quotation marks.\nYou can remake your level 3 code, and make sure to add the quotation marks in the right places!\n\nMind that in level 3, we couldn't use the word 'question' as both the name of the variable and a normal word that could be printed.\nThe quotation marks in level 3 make this possible!\n\nImportant! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.\nMake sure to remove those apostrophes and change the spelling to Im or Whats.\n"
                example_code: "```\n{print} 'Im Hedy the fortune teller!'\nquestion {is} {ask} 'What do you want to know?'\n{print} 'This is your question: ' question\nanswers {is} yes, no, maybe\n{print} 'My crystal ball says...'\n{sleep} 2\n{print} answers {at} {random}\n```\n"
                start_code: '# skriv koden din her'
            3:
                story_text: "In the previous levels you've created your first fortune telling machine, but Hedy couldn't really predict anything, only {echo}.\nIn this level you can use a variable and the `{at} {random}` command to really let Hedy choose an answer for you. Check out this code for instance:\n"
                example_code: "In this example the player can {ask} Hedy a yes-no question and Hedy will pick a random answer for you.\n```\n{print} I’m Hedy the fortune teller!\nquestion {is} {ask} What do you want to know?\n{print} This is what you want to know: question\nanswers {is} yes, no, maybe\n{print} My crystal ball says...\n{sleep} 2\n{print} answers {at} {random}\n```\n"
                story_text_2: "### Exercises\nNow, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or '{ask} again'.\n"
                start_code: '# skriv koden din her'
        name: Spåkone
        description: La Hedy forutsi fremtiden
        default_save_name: Spåkone
    haunted:
        levels:
            11:
                story_text: "In this level we've changed the repeat command and we've added a line to our haunted house that tells the player in which room they are.\n"
                example_code: "```\n{print} 'Escape from the Haunted House!'\nplayer {is} alive\ndoors = 1, 2, 3\nmonsters = zombie, vampire, giant spider\n{for} i {in} {range} 1 {to} 3\n    {if} player {is} alive\n        correct_door = doors {at} {random}\n        {print} 'Room ' i\n        {print} 'There are 3 doors in front of you...'\n        chosendoor = {ask} 'Which door do you choose?'\n        {if} chosendoor {is} correct_door\n            {print} 'No monsters here!'\n        {else}\n            {print} 'You are eaten by a ' monsters {at} {random}\n            player = dead\n    {else}\n        {print} 'GAME OVER'\n{if} player {is} alive\n    {print} 'Great! You survived!'\n```\n"
                start_code: "{print} 'Flykt fra det forheksede huset!'"
            16:
                start_code: '# skriv koden din her'
                story_text: "This haunted house game uses the connection between the lists you can use in this level.\nFor example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.\nCheck out the code!\n"
                example_code: "```\nnumbers = [1, 2, 3]\ni = numbers[random]\nhint = ['growling', 'a cackling laugh', 'fluttering batwings']\nmonsters = ['zombie', 'witch', 'vampire']\nbad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']\ngood_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']\nweapons = ['ham', 'lighter', 'garlic']\n{print} 'You are standing in front of an old mension'\n{print} 'Something is not right here'\n{print} 'You hear ' hint[i]\n{print} 'You are going to explore it'\n{print} 'You enter the kitchen en see a lighter, a raw ham and a garlic.'\nyour_weapon = {ask} 'What do you bring with you?'\n{print} 'With your ' your_weapon ' you enter the living room'\n{print} 'There you find a ' monsters[i]\nneeded_weapon = weapons[i]\n{if} your_weapon == needed_weapon\n    {print} 'You use your ' your_weapon\n    {print} good_fate[i]\n    {print} 'YOU WIN!'\n{else}\n    {print} 'You have chosen the wrong weapon...'\n    {print} bad_fate[i]\n    {print} 'GAME OVER'\n```\n"
            1:
                story_text: "In this adventure you are working towards making a game in which you have to escape from a haunted house by picking the correct door.\nIf you pick the right door you'll survive, but {if} not a terrible monster might...\n\nIn level 1 we start our haunted house game by making up a scary story and {ask} the player what monster they'll see in the haunted house.\n"
                example_code: "\n```\n{print} How did I get here?\n{print} I remember my friend telling me to go into the old mansion...\n{print} and suddenly everything went black.\n{print} But how did I end up on the floor...?\n{print} My head hurts like Ive been hit by a baseball bat!\n{print} What's that sound?\n{print} Oh no! I feel like Im not alone in this house!\n{print} I need to get out of here!\n{print} There are 3 doors in front of me..\n{ask} Which door should i pick?\n{echo} I choose door\n{print} ...?\n```\n"
                story_text_2: "### Exercise\nCan you finish the scary story? Or make up your own haunted house story?\n"
                start_code: '{print} Hvordan kom jeg meg her?'
            2:
                story_text: "In this haunted house you can choose your monsters with emojis. Of course you could also use words.\n"
                example_code: "```\nmonster_1 {is} 👻\nmonster_2 {is} 🤡\nmonster_3 {is} 👶\n{print} You enter the haunted house.\n{print} Suddenly you see a monster_1\n{print} You run into the other room, but a monster_2 is waiting there for you!\n{print} Oh no! Quickly get to the kitchen.\n{print} But as you enter monster_3 attacks you!\n```\n"
                start_code: monster1 {is} _
                story_text_2: "### Exercise\nIn the example above the monsters are predetermined. So each time you run your code, the output is the same.\nCan you add `{ask}` commands to make the haunted house interactive and have the players choose the monsters they come across?\n"
                example_code_2: "```\nmonster_1 {is} _\nmonster_2 {is} _\nmonster_3 {is} _\n{print} You enter the haunted house.\n{print} Suddenly you see a monster_1\n{print} You run into the other room, but a monster_2 is waiting there for you!\n{print} Oh no! Quickly get to the kitchen.\n{print} But as you enter monster_3 attacks you!\n```\n"
            14:
                story_text: "In this level you can use the `<` and `>` symbol to introduce lives to your game.\n"
                example_code: "```\n{print} 'Escape from the haunted house'\nlives = 3\ndoors = 1, 2, 3\nmonsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'\n{for} i {in} {range} 1 {to} 10\n    {if} lives > 0\n        good_door = doors {at} {random}\n        monster = monsters {at} {random}\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} good_door == chosen_door\n            {print} 'You have chosen the correct door'\n        {else}\n            {print} 'You see...' monster\n            {if} monster == 'a sleeping 3 headed dog'\n                {print} 'Pffieuw.... Its asleep'\n            {else}\n                {print} 'You lose one life'\n                lives = lives -1\n    {else}\n        {print} 'GAME OVER'\n```\n"
                start_code: '# skriv koden din her'
            9:
                story_text: "In this level you can use nesting, which allows you to make the haunted house even more interactive!\n\n### Exercise\nNow it's very hard to win this game, can you make it easier to win?\nFor example by only having 1 wrong door and 2 correct doors instead of 1 correct door en 2 wrong ones?\n"
                example_code: "```\n{print} 'Escape from the Haunted House!'\nplayer = alive\ndoors = 1, 2, 3\nmonsters = zombie, vampire, giant spider\n{repeat} 3 {times}\n    {if} player {is} alive\n        correct_door {is} doors {at} {random}\n        {print} 'There are 3 doors in front of you...'\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} chosen_door {is} correct_door\n            {print} 'No monsters here!'\n        {else}\n            {print} 'You are eaten by a ' monsters {at} {random}\n            player = dead\n    {else}\n        {print} 'GAME OVER'\n{if} player {is} alive\n    {print} 'Great! You survived!'\n```\n"
                start_code: "{print} 'Flykt fra det forheksede huset!'"
            5:
                story_text: "Up until this level the haunted house game always asked the player to choose a door, but as you might have noticed, they didn't really have to answer correctly.\nIf the player filled in a completely random answer, the game would still work and the player might even win (despite not picking a door).\nIn this level you can only win the game by picking the same door Hedy picked randomly.\n"
                example_code: "```\n{print} 'Escape from the haunted house!'\n{print} 'There are 3 doors in front of you...'\ndoors {is} 1, 2, 3\nmonsters {is} werewolf, mummy, vampire, zombie\nchosen_door {is} {ask} 'Which door do you choose?'\n{print} 'You chose door...' chosen_door\n{sleep}\ncorrect_door {is} doors {at} {random}\n{if} chosen_door {is} correct_door {print} 'Great! Youve escaped!'\n{else} {print} 'Oh no! You are being eaten by a...' monsters {at} {random}\n```\n"
                start_code: '# skriv koden din her'
            4:
                story_text: "In this level you learn how to use quotation marks in your games.\nCan you make your Haunted House level 4 proof?\n"
                example_code: "```\n{print} _Escape from the haunted house!_\n{print} _There are 3 doors in front of you..._\nchoice {is} {ask} _Which door do you choose?_\n{print} _You picked door ..._ choice\nmonsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED\n{print} _You see..._\n{sleep}\n{print} monsters {at} {random}\n ```\n"
                start_code: '# skriv koden din her'
            3:
                story_text: "In the previous levels you've made an introduction to your haunted house game, but as you might have noticed the story would always have a dreadful end.\nIn this level you can make your story more interactive by changing the outcome of the game; sometimes you'll get eaten, sometimes you'll escape!\nLet Hedy decide randomly!\n"
                start_code: '# skriv koden din her'
                example_code: "```\n_ Escape from the haunted house!\n_ There are 3 doors in front of you...\n_ _ _ Which door do you choose?\n_ You picked door ... choice\nmonsters _ a zombie, a vampire, NOTHING YOUVE ESCAPED\n_ You see...\n{sleep}\n_ _ _ _\n```\n"
        name: Spøkelseshus
        description: flykt fra det forheksede huset
        default_save_name: Spøkelseshus
    piggybank:
        name: Sparebøsse
        description: Tell sparepengene dine!
        default_save_name: Sparebøsse
        levels:
            14:
                story_text: "In this level you can let Hedy tell you {if} you have saved up enough money!\n"
                example_code: "```\nmoney = {ask} 'How much money have you saved?'\nwish = {ask} 'How much money do you need?'\nallowance = {ask} 'How much pocket money do you get each week?'\nto_save = wish - money\nweeks = to_save / allowance\n{if} wish > money\n    {print} 'You need to save up some more!'\n    {print} 'Youll need ' weeks ' more weeks.'\n{else}\n    {print} 'Great! You have enough'\n    {print} 'Lets go shopping!'\n```\n"
                start_code: '# skriv koden din her'
            12:
                story_text: "In this adventure you learn how to make a digital piggy bank, to calculate how much money you have and how long you need to save up to buy what you want!\n"
                example_code: "```\n{print} 'The digital piggy bank'\nwish = {ask} 'What would you like to buy?'\nprice = {ask} 'How much does that cost?'\nsaved = {ask} 'How much money have you saved already?'\nallowance = {ask} 'How much pocket money do you get per week?'\nto_save = price - saved\nweeks = to_save / allowance\n{print} 'You can buy a ' wish ' in ' weeks ' weeks.'\n```\n"
                start_code: '# skriv koden din her'
    parrot:
        name: Papegøye
        description: Lag din egen online papegøye som hermer etter det du sier!
        default_save_name: Papegøye
        levels:
            1:
                story_text: "Lag din egen online papegøye som hermer etter deg!\n"
                example_code: "```\n{print} Jeg er papegøyen Hedy\n{ask} hva er ditt navn?\n{echo}\n{echo}\n```\n"
                start_code: '{print} Jeg er papegøyen Hedy'
                story_text_2: "### Exercise\nCan you make the parrot ask a different question? Fill in the blanks in the example!\n"
                example_code_2: "```\n{print} Im Hedy the parrot\n{ask} _\n{echo}\n{echo}\n"
            2:
                story_text: "Lag din egen online papegøye som hermer etter deg!\n"
                example_code: "```\n{print} Jeg er papegøyen Hedy\nnavn {is} {ask} hva er ditt navn?\n{print} navn\n{sleep}\n{print} skrik!\n{sleep}\n{print} navn\n```\n"
                start_code: '{print} Jeg er papegøyen Hedy!'
                story_text_2: "### Exercise\nYou can use variables to make the parrot say more than only your name. Can you complete this code?\n"
            3:
                story_text: "Lær papegøyen din et nytt ord med `{add}`.\n"
                example_code: "```\nordene {is} skrik, Hedy\n{print} Lær din papegøye!\nnytt_ord {is} {ask} Hvilket nytt ord vil du lære den?\n{add} nytt_ord {to_list} ordene\n{print} 🧒 Si nytt_ord , Hedy!\n{print} 🦜 ordene {at} {random}\n```\n"
                start_code: '# skriv koden din her'
            5:
                story_text: "Belønn papegøyen din om det sier det riktige ordet!\n"
                example_code: "```\nordene {is} skrik, Hedy\n{print} 'Tren papegøyen din!'\nnytt_ord {is} {ask} 'Hvilket nytt ord vil du lære den?'\n{add} nytt_ord {to_list} ordene\nuttalt_ord {is} ordene {at} {random}\n{print} '🧒 Si ' nytt_ord ', Hedy!'\n{print} '🦜 ' uttalt_ord\n{if} uttalt_ord {is} nytt_ord {print} '🧒 Godt jobbet, Hedy! 🍪'\n{else} {print} '🧒 Nei, Hedy! Si ' nytt_ord\n```\n"
                start_code: '# skriv koden din her'
            4:
                story_text: "In this level we have to use quotation marks with the commands `{ask}` and `{print}`.\nCan you complete the code by adding quotation marks?\n"
                example_code: "```\nwords {is} squawk, Hedy\n{print} _ Train your parrot! _\nnew_word {is} {ask} _ Which word do you want to teach them? _\n{add} new_word {to_list} words\n{print} _ 🧒 Say _ new_word _, Hedy!_\n{print} _ 🦜 _ words {at} {random}\n```\n"
                start_code: '# Write your code here'
    songs:
        name: Syng en sang!
        description: Skriv ut en sang
        default_save_name: Sang
        levels:
            12:
                story_text: "I denne sangen kan vi gjøre det enda enklere å programmere  'Hvis du er lyklig og du vet det, klappe klapp'. Fordi vi kan putte alle handlingene i en variabel, sjekk ut dette:\n"
                example_code: "```\nhandlinger = 'klappe klapp', 'trampe tramp', 'rop hurra!'\n{for} handling {in} handlinger\n    {for} i {in} {range} 1 {to} 2\n        {print} 'Hvis du er lykkelig og du vet det'\n        {print} handling\n    {print} 'Hvis du er lykkelig og vet det må du la alle andre se det'\n    {print} 'Hvis du er lykkelig og du vet det'\n    {print} handling\n```\n"
                start_code: '# skriv koden din her'
            11:
                story_text: "På dette nivået kan du bruke `{for} i {in} {range}` kommandoen til å lage sanger som bruker telling.\n"
                example_code: "```\n{for} i {in} {range} 5 {to} 1\n    {print} i ' små aper hopper i en seng'\n    {print} 'En falt av og dunket hodet sitt'\n    {print} 'Så mamma ringte doktoren og doktoren sa'\n    {if} i {is} 1\n        {print} 'FÅ DE APENE RETT TIL SENGS!'\n    {else}\n        {print} 'INGEN FLERE APER FÅR HOPPE I EN SENG!'\n```\n"
                start_code: '# skriv koden din her'
            10:
                story_text: "På dette nivået kan du lett lage barnesangen \"Fem små aper\". Kan du lage det siste refrenget?\nDu kan også lage hele \"baby shark\"-sangen (inkludert alle de andre haiene i familien) på bare 6 linjer!\nEller du kan lage \"Old McDonald\" med alle de forskjellige dyrene.\n"
                example_code: "```\napene = 5, 4, 3, 2\n{for} ape {in} apene\n    {print} ape ' små aper hopper i en seng'\n    {print} 'En falt av og dunket hodet sitt'\n    {print} 'å mamma ringte doktoren og doktoren sa'\n    {print} 'INGEN FLERE APER FÅR HOPPE I EN SENG!'\n```\n\n```\nhaiene = baby, mommy, daddy, grandma, grandpa\n{for} hai {in} haiene\n    {print} hai 'tututututudu'\n    {print} hai 'tututututudu'\n    {print} hai 'tututututudu'\n    {print} hai\n```\n```\ndyrene = pig, dog, cow\n{for} dyret {in} dyrene\n    {if} dyret {is} pig\n        lyd = oink\n    {if} dyret {is} dog\n        lyd = woof\n    {if} dyret {is} cow\n        lyd = moo\n    {print} 'Old McDonald had a farm'\n    {print} 'E I E I O!'\n    {print} 'and on that farm he had a ' dyret\n    {print} 'E I E I O!'\n    {print} 'with a ' lyd lyd ' here'\n    {print} 'and a ' lyd lyd ' there'\n    {print} 'here a ' lyd\n    {print} 'there a ' lyd\n    {print} 'everywhere a ' lyd lyd\n```\n"
                start_code: '# skriv koden din her'
                example_code_2: "```\nmonkeys = 5, 4, 3, 2, 1\n```\n"
                story_text_2: "### Exercise 2\nPrint the song Five little moneys jumping on the bed. Look up the text if you don't remember.\n\n**(extra)** Print the song Old MacDonald had a farm, and make sure all animals make a different sound, using an `{if}`.\n"
            8:
                story_text: "På et tidligere nivå programmerte du sangen 'Bottles of beer'. Du lagde ett vers og så måtte du kopiere verset 99 ganger. På nivå 7 kan du repetere sangen 99 ganger, bare legg til en enkel linje!\n"
                example_code: "```\nvers = 99\n{repeat} 99 {times}\n    {print} vers ' bottles of beer on the wall'\n    {print} vers ' bottles of beer'\n    {print} 'Take one down, pass it around'\n    verse = vers - 1\n    {print} vers ' bottles of beer on the wall'\n```\n"
                start_code: '# skriv koden din her'
            7:
                story_text: "Sanger inneholder ofte en del repetisjon. For eksempel... Baby Shark! Om du synger den så kan du fortsette å synge det samme:\n\nBaby Shark tututudutudu <br>\nBaby Shark tututudutudu <br>\nBaby Shark tututudutudu <br>\nBaby Shark\n\nDu kan lage denne sangen mye kortere med en `{repeat}`! Kan du fullføre koden?\n"
                example_code: "```\n{repeat} _ _ {print} 'Baby Shark tututudutudu'\n{print} 'Baby Shark'\n```\n\nEtter Baby Shark kan du selvfølgelig programmere andre sanger. Det er mange sanger med repetisjon.\n"
                start_code: "{print} 'Baby Shark'"
            6:
                story_text: "Sanger inneholder ofte en del repetisjon. Noen ganger er repetisjonen også basert på telling.\nFor eksempel i den velkjente sangen 'Bottles of beer'. Du kan programmere den sangen med litt matte.\n"
                example_code: "```\nvers = 99\n{print} vers ' bottles of beer on the wall'\n{print} vers ' bottles of beer'\n{print} 'Take one down, pass it around'\nverse = vers - 1\n{print} vers ' bottles of beer on the wall'\n```\n\nDu kan repetere linjene 2 til 9 så mange ganger du vil ved å kopiere de linjene.\n"
                start_code: "{print} 'Baby shark'"
                story_text_2: "This children's song counts down from 5 little monkeys to 1 monkey.\nIf you copy line 2 - 7 and paste it under the the code, you can sing the whole song!\n"
                example_code_2: "```\nnumber = 6\nnumber = number - 1\nprint number ' little monkeys jumping on the bed'\nprint 'One fell off and bumped his head'\nprint 'Mama called the doctor and the doctor said'\nprint 'NO MORE MONKEYS JUMPING ON THE BED!'\nsleep\n```\n"
            16:
                story_text: "På dette nivået kan du programmere en sang som \"Old MacDonald\" enda raskere. Du kan knytte sammen det riktige dyret til den riktige lyden ved å putte de på den samme plassen i listen.\n\"The Drunken Sailor\" er også rask å lage på dette nivået. Du trenger bare 8 linjer for hele sangen, sjekk det ut!\n"
                example_code: "```\ndyrene = ['pig', 'dog', 'cow']\nlydene = ['oink', 'woof', 'moo']\n{for} i {in} {range} 1 {to} 3\n    dyret = dyrene[i]\n    lyden = lydene[i]\n    {print} 'Old McDonald had a farm'\n    {print} 'E I E I O!'\n    {print} 'and on that farm he had a ' dyret\n    {print} 'E I E I O!'\n    {print} 'with a ' lyden lyden ' here'\n    {print} 'and a ' lyden lyden ' there'\n    {print} 'here a ' lyden\n    {print} 'there a ' lyden\n    {print} 'everywhere a ' lyden lyden\n```\n\n```\nlinjene = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']\n{for} linjen {in} linjene\n    {for} i {in} {range} 1 {to} 3\n        {print} linjen\n    {print} 'early in the morning'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'way hay and up she rises'\n    {print} 'early in the morning'\n```\n"
                start_code: '# skriv koden din her'
            18:
                story_text: "In level 16 we made songs using lists. These programs however are no longer working properly in this level. The colons from level 17 and the brackets from level 18 still need to be added.\n\n### Exercise 1\nThe Drunken sailor song is given as sample code, but not yet working.\nCan you make sure everything works again? To help you, we've put _ in the places of _some_ errors.\n\n### Exercise 2\nNow also look up your Old MacDonald song from level 16, and correct it.\n"
                example_code: "```\nlines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']\n{for} line {in} lines _\n    {for} i {in} {range} 1 {to} 3 _\n        {print} _ line _\n    {print} 'early in the morning'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'way hay and up she rises'\n    {print} 'early in the morning'\n```\n"
                start_code: '# Schrijf jouw code hier'
    dishes:
        name: Retter?
        description: Bruk datamaskinen til å se hvem som skal ta oppvasken (Start på nivå 2)
        default_save_name: Retter
        levels:
            10:
                story_text: "På dette nivået kan du lage en enda bedre oppvaskeplan.\n"
                example_code: "```\ndager = Mandag, Tirsdag, Onsdag, Torsdag, Fredag, Lørdag, Søndag\nnavn = mamma, pappa, Emma, Sofie\n{for} day {in} dager\n    {print} navn {at} {random} ' tar oppvasken på ' day\n```\n"
                start_code: '# skriv koden din her'
            7:
                story_text: "Med `{repeat}` kan du repetere deler av kode. Du kan bruke dette til å beregne hvem som skal ta oppvasken for hele uken.\n"
                example_code: "```\nfamilie = mamma, pappa, Emma, Sofie\n{repeat} _ _ {print} 'Den som tar oppvasken er ' _\n```\n"
                start_code: "{print} 'Hvem tar oppvasken?'"
            6:
                story_text: "Hvor ofte må hver ta oppvasken? Er det rettferdig? Du kan telle det på dette nivået.\n"
                example_code: "```\nfamilie = mamma, pappa, Emma, Sofie\nemma_vasker = 0\noppvasker = familie {at} {random}\n{print} 'Den som tar oppvasken er ' oppvasker\n{if} oppvasker {is} Emma emma_vasker = emma_vasker + 1\n{print} 'Emma tar oppvasken ' emma_vasker ' ganger denne uken'\n```\n\nDu kan nå kopiere linjene 3 til 5 et par ganger (f.eks. 7 ganger for en hel uke) for å regne ut for hele uken.\nLager du koden for hele uken?\n"
                story_text_2: "Om du er ekstremt uheldig så kan det forrige programmet velge deg til å gjøre oppvasken hele uken! Det er ikke rettferdig!\nFor å lage et mer rettferdig system så kan du bruke `{remove}`-kommandoen for å fjerne en gitt person fra listen. På denne måten trenger du ikke å ta oppvasken igjen før alle har tatt sin tur.\n\nMandag og tirsdag er klar for deg! Kan du legge til resten av uken?\nOg.. kan du komme på en løsning dersom listen er tom?\n"
                example_code_2: "```\nfamilie = mamma, pappa, Emma, Sofie\noppvasker = familie {at} {random}\n{print} 'Mandag blir oppvasken tatt av: ' dishwasher\n{remove} oppvasker {from} familie\noppvasker = people {at} {random}\n{print} 'Tirsdag blir oppvasken tatt av: ' dishwasher\n{remove} oppvasker {from} familie\noppvasker = familie {at} {random}\n```\n"
                start_code: "{print} 'Hvem tar oppvasken?'"
            5:
                story_text: "Med `{if}`kan du nå ha det mer gøy med valg i programmet. Du kan få programmet til å respondere med det valget maskinen har tatt.\n\nKan du fullføre koden så det skriver ut 'det var dumt' når det er din tur og 'jippi!' ellers?\nIkke glem fnutter!\n"
                example_code: "```\nfamilie {is} mamma, pappa, Emma, Sofie\noppvasker {is} familie {at} {random}\n{if} oppvasker {is} Sofie {print} _ det var dumt at jeg må ta oppvasken _ {else} {print} 'heldigvis ingen oppvask fordi' _ 'allerede tar oppvasken'\n```\n"
                start_code: "{print} 'Hvem tar oppvasken?'"
            4:
                story_text: "Med fnutter kan du gjøre oppvaskeplanleggingen penere.\nDenne gangen er eksempelkoden ikke helt ferdig.\n\nKan du fullføre koden ved å fylle inn det som mangler? Hver tomme plass må erstattes med et ord eller et symbol.\n\nTips: Ikke glem fnutter!\n"
                example_code: "```\nfamilie {is} mamma, pappa, Emma, Sofie\n{print} _ oppvasken blir tatt av _\n{sleep}\n{print} familie {at} _\n```\n"
                start_code: "{print} 'Hvem tar oppvasken?'"
            3:
                story_text: "Er dere alltid uenig hjemme om hvem som skal ta oppvasken eller hvem som skal rense kattedoen?\nDa kan du la datamaskinen velge helt rettferdig. Du kan programmere det på dette nivået!\nFørst må du lage en liste over folk i familien. Så velger du `{at} {random}` fra listen.\nDo you always disagree at home about who should wash the dishes or change the litter box today?\nThen you can let the computer choose very fairly. You can program that in this level!\nYou first make a list of the members of your family. Then choose '{at} {random}' from the list.\n"
                example_code: "```\nfamilie {is} mamma, pappa, Emma, Sofie\n{print} familie {at} {random}\n```\n"
                story_text_2: "Føler du ikke for å ta oppvasken selv? Hack programmet til å fjerne navnet ditt fra listen.\n"
                start_code: '{print} Hvem tar oppvasken?'
    dice:
        name: Terninger
        description: Lag din egen terning
        default_save_name: Terninger
        levels:
            10:
                story_text: "Bruker alle for lang tid på å trille terninger? På dette nivået kan du la Hedy trille alle terningene på en gang!\n"
                example_code: "```\nspillere = Anne, Jon, Jørgen\nvalg = 1, 2, 3, 4, 5, 6\n{for} spiller {in} spillere\n    {print} spiller ' triller ' valg {at} {random}\n    {sleep}\n```\n"
                start_code: '# skriv koden din her'
            7:
                story_text: "Du kan også lage en terning igjen på nivå 5. Med `{repeat}` kan du enkelt trille en hel håndfull med terninger.\nPrøv å fullføre eksempelkoden. Der det er streker skal det være flere kommandoer og tegn.\n\nMen kanskje du har lyst å lage en helt annen terning. Selvfølgelig kan du det!\n"
                example_code: "```\nvalgene = 1, 2, 3, 4, 5, makk\n{repeat} _ _ {print} _ _ _\n```\n"
                start_code: "{print} 'Hva vil terningen vise denne gangen?'"
            6:
                story_text: "Du kan også lage en Earthworm-terning igjen i dette, men nå kan du også kalkulere hvor mange poeng som har blitt trillet.\nDu vet kanskje at makken teller for 5 poeng i Earthworms. Etter hver trilling kan du umiddelbart kalkulere antall poeng du har trillet.\nDette er koden for å kalkulere poeng for 1 terning:\n"
                example_code: "```\nvalgene = 1, 2, 3, 4, 5, makk\npoeng = 0\nverdi = valgene {at} {random}\n{print} 'du trillet' verdi\n{if} verdi {is} makk poeng = poeng + 5 {else} poeng = poeng + verdi\n{print} 'det er' poeng ' poeng'\n```\nKan du gjøre det slik at koden gir deg den totale poengsummen for 8 terningkast? For å gjøre det må du kopiere og lime inn et par linjer kode.\n"
                example_code_2: "\nKlarte du å beregne poeng for 8 terninger? Det krevde mye kopiering og liming, sant? Vi skal gjøre det lettere på nivå 7!\n"
                start_code: "{print} 'Hva vil terningen vise denne gangen?'"
            5:
                story_text: "Du ha også lage en terning igjen på dette nivået ved å bruke `{if}`.\nFullfør eksempelkoden slik at koden sier \"Du kan slutte å trille\" så snart du har trillet en makk.\n\nMen kanskje du har lyst å gjenskal en terning fra et annet spill. Det er også greit! Isåfall lager du din egen reaksjon. F.eks. 'ja' for 6 og 'det var synd' for alt annet.\n"
                example_code: "```\nvalgene {is} 1, 2, 3, 4, 5, makk\nkastet {is} _\n{print} 'du trillet ' _ 'med terningen'\n{if} _ {is} makk {print} 'Du kan slutte å trille.' _ {print} 'Prøv igjen!'\n```\n"
                start_code: "{print} 'Hva vil terningen vise denne gangen?'"
            4:
                story_text: "På dette nivået kan vi lage setninger med terningens verdi i setningen, med fnutter så klart.\nDenne gangen er ikke eksempelkoden helt ferdig. Kan du fullføre koden?\n"
                start_code: "{print} 'Hva vil terningen vise denne gangen?'"
            3:
                story_text: "På dette nivået kan vi velge fra en liste. Med det kan vi la datamaskinen velge en side av en terning.\nTa en titt på spillene du har i skapet hjemme.\nEr det spill der med en (spesiell) terning? Du kan også kopiere den med denne koden.\nFor eksempel, en terning fra spillet Earthworms med tallene 1 til 5 og en makk på\n\n![Terning fra Earthworms med 1 til 5 og en makk på](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)\n"
                example_code: "```\nvalgene {is} 1, 2, 3, 4, 5, makk\n{print} valgene {at} {random}\n```\n"
                start_code: '{print} Hva vil terningen vise denne gangen?'
                story_text_2: "### Exercise\nThe dice in the example above are dice for a specific game. Can you make normal dice?\nOr other special dice from a different game?\n"
                example_code_2: "```\nchoices {is} _\n```\n"
            15:
                story_text: "I dette spillet må du trille 6 på så få forsøk som mulig.\n"
                example_code: "```\nvalg = 1, 2, 3, 4, 5, 6\n{print} 'Trill 6 så raskt som du kan!'\ntrillet = 0\nforsøk = 0\n{while} trillet != 6\n    trillet = valg {at} {random}\n    {print} 'Du trillet ' trillet\n    forsøk = forsøk + 1\n{print} 'Jippi! Du trillet 6 på ' forsøk ' forsøk.'\n```\n"
                start_code: '# skriv koden din her'
    quizmaster:
        name: Quizmester
        description: Lag din egen quiz!
        default_save_name: Quizmester
        levels:
            14:
                story_text: "In this adventure you can make your own quiz! Fill in the blanks, add more questions and enjoy your own quiz!\nYou can make a quiz about anything you like: your hobby, your favorite animal, your favorite book or anything at all!\n"
                example_code: "```\n{print} 'Make your own quiz'\npoints_a = 0\npoints_b = 0\n{print} 'Question'\n{print} 'Answer option A'\n{print} 'Answer option B'\nanswer = {ask} 'Which answer?'\n{if} answer == 'A'\n    points_a = points_a + 1\n{if} answer == 'B'\n    points_b = points_b + 1\n{print} 'End of the quiz!'\n{print} 'Lets see the results!'\n{if} points_a > points_b\n    {print} 'You belong to the A club'\n{if} points_b > points_a\n    {print} 'You belong to the B club'\n```\n"
                start_code: '# skriv koden din her'
    language:
        name: Språk
        description: Øv på ord fra andre språk
        default_save_name: språk
        levels:
            16:
                start_code: '# skriv koden din her'
                story_text: "Make your own program to practice your vocabulary in a new language.\n"
                example_code: "```\nfrench_words = ['bonjour', 'ordinateur', 'pomme de terre']\ntranslation = ['hello', 'computer', 'potato']\nscore = 0\n{for} i {in} {range} 1 {to} 3\n    answer = {ask} 'What does ' french_words[i] ' mean?'\n    correct = translation[i]\n    {if} answer == correct\n        {print} 'Correct!'\n        score = score + 1\n    {else}\n        {print} 'Wrong, ' french_words[i] ' means ' translation[i]\n{print} 'You gave ' score ' correct answers.'\n```\n"
            5:
                story_text: "Make your own program to practice your vocabulary in a new language.\n"
                example_code: "```\n{print} 'Learn French!'\ncat {is} {ask} '🐱'\n{if} cat {is} chat {print} 'Terrific!'\n{else} {print} 'No, cat is chat'\nfrog {is} {ask} '🐸'\n{if} frog {is} grenouille {print} 'Super!'\n{else} {print} 'No, frog is grenouille'\n```\n"
                start_code: '# skriv koden din her'
    secret:
        name: SuperSpion
        description: Lag din egen spionkode
        default_save_name: språk
        levels:
            12:
                story_text: "In this adventure you can create your own super spy code. Encode a message that only the right agent can decipher.\nIf the enemy tries to crack the code, they will get some false info to waste their time.\n"
                example_code: "```\nname is ask 'Hva heter du??'\nif name is 'Agent007'\n    a is 'Go to the airport '\nelse\n    a is 'Go to the trainstation '\npassord is ask 'Hva er passordet?'\nif passord is 'TOPSECRET'\n    b is 'tomorrow at 02.00'\nelse\n    b is 'today at 10.00'\nprint a + b\n```\n"
                start_code: '# skriv koden din her'
            13:
                story_text: "The code you made in the previous level can be made a lot easier in this one with the `{and}` command.\n"
                example_code: "```\nname is ask 'Hva heter du??'\npassord is ask 'Hva er ditt passord?'\nif name is 'Agent007' and passord is 'TOPSECRET'\n    print 'Go to the airport at 02.00'\nelse\n    print 'Go to the trainstation at 10.00'\n ```\n"
                start_code: '# skriv koden din her'
    tic:
        name: Tic Tac Toe
        description: Play a game of Tic Tac Toe!
        default_save_name: Tic
        levels:
            13:
                start_code: '# place your code here'
                story_text: "In this adventure you can program a game of Tic Tac Toe. You can play with two people. Taking turns, you pick a number of the spot (1 - 9) you want to put your sign (x or o) on.\nThe first player that gets 3 in a row (horizontally, vertically or diagonally) wins!\nHave fun!\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game {is} 'on'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice {is} 1\n                spot_1 = sign\n            {if} choice {is} 2\n                spot_2 = sign\n            {if} choice {is} 3\n                spot_3 = sign\n            {if} choice {is} 4\n                spot_4 = sign\n            {if} choice {is} 5\n                spot_5 = sign\n            {if} choice {is} 6\n                spot_6 = sign\n            {if} choice {is} 7\n                spot_7 = sign\n            {if} choice {is} 8\n                spot_8 = sign\n            {if} choice {is} 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner {is} 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign {is} 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
            14:
                start_code: '# place your code here'
                story_text: "In the previous levels you've made a tic tac toe game. Now you've learned how to use the = sign, the == sign and the != sign.\nYou can use this knowledge in your new Taic Tac Toe game, like this:\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game != 'over'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice == 1\n                spot_1 = sign\n            {if} choice == 2\n                spot_2 = sign\n            {if} choice == 3\n                spot_3 = sign\n            {if} choice == 4\n                spot_4 = sign\n            {if} choice == 5\n                spot_5 = sign\n            {if} choice == 6\n                spot_6 = sign\n            {if} choice == 7\n                spot_7 = sign\n            {if} choice == 8\n                spot_8 = sign\n            {if} choice == 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner == 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign == 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
            15:
                story_text: "In this level you can improve your Tic Tac Toe game with the {while} loop/ With this loop you can combine the `{if} game != 'over'` and the `{for} i {in} {range} 1 to 9` into one simple line.\nCheck it out:\n"
                start_code: '# place your code here'
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over'\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots\n        {remove} choice {from} open_spots\n        {if} choice == 1\n            spot_1 = sign\n        {if} choice == 2\n            spot_2 = sign\n        {if} choice == 3\n            spot_3 = sign\n        {if} choice == 4\n            spot_4 = sign\n        {if} choice == 5\n            spot_5 = sign\n        {if} choice == 6\n            spot_6 = sign\n        {if} choice == 7\n            spot_7 = sign\n        {if} choice == 8\n            spot_8 = sign\n        {if} choice == 9\n            spot_9 = sign\n    {else}\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    winner = {ask} 'Did you win?'\n    {if} winner == 'yes'\n        {print} 'Good job, player ' sign '!'\n        game = 'over'\n    {else}\n        {if} sign == 'x'\n            sign = 'o'\n        {else}\n            sign = 'x'\n```\n"
            17:
                story_text: "In the previous levels the tic tac toe game had an annoying feature. After every move, you had to fill in yourself if you had won or not.\nThis made the game playable, but also quite slow. In this level we have learned the `{elif}` command, that could solve that problem.\nTo use the {elif} to let Hedy check whether or not a player has won is fun, but it also requires a fair amount of extra lines.\n\nIn the example code you see that we added the requirements to win (3 spots in a row horizontally, vertically or diagonally).\nYou can find them in line 46 to 69. You can see that each time the requirement is met (so if a player has won) the variable game is set to 'over'.\nThis means that the {while} loop will be stopped and the game ends.\n"
                example_code: "```\nsign = 'x'\nopen_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over':\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots:\n        {remove} choice {from} open_spots\n        {if} choice == 1:\n            spot_1 = sign\n        {if} choice == 2:\n            spot_2 = sign\n        {if} choice == 3:\n            spot_3 = sign\n        {if} choice == 4:\n            spot_4 = sign\n        {if} choice == 5:\n            spot_5 = sign\n        {if} choice == 6:\n            spot_6 = sign\n        {if} choice == 7:\n            spot_7 = sign\n        {if} choice == 8:\n            spot_8 = sign\n        {if} choice == 9:\n            spot_9 = sign\n    {else}:\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {else}:\n        {if} sign == 'x':\n            sign = 'o'\n        {else}:\n            sign = 'x'\n```\n"
                start_code: '# place your code here'
    blackjack:
        name: Blackjack
        description: Try to get as close to 21 as you can
        default_save_name: Blackjack
        levels:
            17:
                story_text: "Blackjack is a simple game of cards in which you have to get as close to 21 points as possible. You get two cards. Each card is worth their numeral value, and the face cards (Jack, Queen and King) are worth 10 points.\nThe Ace is worth either 1 or 11 points (you can choose). The dealer, your opponent, also gets two cards.\nIf you want, you can get another card, and its points will be added to your total. The dealer can also choose to take another card.\nBut be careful not to get more than 21 points, because if you do, you lose!\nThe player who gets closest to 21, without going over it, wins!\n\nHave fun!\n"
                example_code: "```\n{print} 'BLACKJACK'\ncards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen','King', 'Ace']\npoints = 0\ndealer_points = 0\ncard_1 = cards[{random}]\ncard_2 = cards[{random}]\ncard_3 = cards [{random}]\ndealer_card_1 = cards[{random}]\ndealer_card_2 = cards[{random}]\ndealer_card_3 = cards[{random}]\n# Points for card 1\n{if} card_1 == 'Jack' {or} card_1 == 'Queen' {or} card_1 == 'King':\n    points = points + 10\n{elif} card_1 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_1\n# Points for card 2\n{if} card_2 == 'Jack' {or} card_2 == 'Queen' {or} card_2 == 'King':\n    points = points + 10\n{elif} card_2 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_2\n# Points for dealer card 1\n{if} dealer_card_1 == 'Jack' {or} dealer_card_1 == 'Queen' {or} dealer_card_1 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_1 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_1\n# Points for dealer card 2\n{if} dealer_card_2 == 'Jack' {or} dealer_card_2 == 'Queen' {or} dealer_card_2 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_2 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_2\n# Two Aces\n{if} card_1 == 'Ace' {and} card_2 == 'Ace':\n    points = 12\n{if} dealer_card_1 == 'Ace' {and} dealer_card_2 == 'Ace':\n    dealer_points = 12\n# Scoreboard\n{print} 'You have a ' card_1 ' and a ' card_2 ' (' points ' points)'\n{print} 'The dealer has a ' dealer_card_1 ' and a ' dealer_card_2 ' (' dealer_points ' points)'\n# Extra card for the player\nhit = {ask} 'Do you want an extra card?'\n{if} hit == 'yes':\n    {if} card_3 == 'Jack' {or} card_3 == 'Queen' {or} card_3 == 'King':\n        points = points + 10\n    {elif} card_3 == 'Ace':\n        {if} points > 11:\n            points = points + 11\n        {else}:\n            points = points + 1\n    {else}:\n        points = points + card_3\n    print 'You get an extra ' card_3 ' (' points ' points)'\n{else}:\n    print 'No extra cards'\n# Winner\n{if} points > 21 {or} dealer_points > points {or} dealer_points == 21:\n    {print} 'You lose'\n{elif} dealer_points < 17:\n    {print} 'The dealer takes an extra card. It is a... ' dealer_card_3\n    {if} dealer_card_3 == 'Jack' {or} dealer_card_3 == 'Queen' {or} dealer_card_3 == 'King':\n        dealer_points = dealer_points + 10\n    {elif} dealer_card_3 == 'Ace':\n        {if} dealer_points < 11:\n            dealer_points = dealer_points + 11\n        {else}:\n            dealer_points = dealer_points + 1\n    {else}:\n        dealer_points = dealer_points + dealer_card_3\n    {print} 'The dealer has ' dealer_points ' points now'\n    {if} dealer_points < 21 {and} dealer_points > points:\n        {print} 'You lose'\n    {else}:\n        {print} 'You win'\n{elif} points > dealer_points {and} points < 21:\n    {print} 'You win!'\n```\n"
                start_code: '# place your code here'
    years:
        name: New Year's
        default_save_name: New Year's Countdown
        description: Countdown to the new year!
        levels:
            11:
                story_text: "In this level you can use the `{for} i {in} {range}` command to countdown to the New Year.\n\n### Exercise\nFill in the blanks and make the code work!\n"
                example_code: "```\nfor _ in _ 10 to 1\n    {print} i\n{print} 'Happy New Year!'\n```\n"
                start_code: '# place your code here'
    pressit:
        default_save_name: Pressed
        levels:
            7:
                start_code: '# place your code here'
                story_text: "Now that you have learned about `{repeat}`, we can press keys multiple times.\nYou can use it to make the turtle walk forward and turn.\n\n### Exercise\nThe code you have seen in level 5 only checks the key once. Copy the example code and add a `{repeat}` to it, so that you can press the keys many times.\nUse this code to draw something nice.\n"
                example_code: "```\n{if} x {is} {pressed} {forward} 15 {else} {turn} 90\n```\n"
            5:
                start_code: '# place your code here'
                example_code_2: "```\n{if} y {is} {pressed} {forward} 15\n{else} {turn} 90\n```\n"
                story_text_2: "You can also link turtle commands to keys.\n\n### Exercise\nCopy the lines a few times so you can create a larger drawing.\n"
                story_text: "In this level there is another new keyword: `{pressed}`!\nWith `{pressed}` you can use keys on your keyboard to control what lines are used.\n\n### Exercise\nLook at the example and add one more line of code that reacts to a key press.\n"
                example_code: "```\n{print} 'Do you want a good (g) or bad (b) ending?'\n{if} g {is} {pressed} {print} 'They lived happily ever after ❤'\n{else} {print} 'The prince was eaten by a hippopotamus 😭'\n```\n"
            9:
                story_text: "Now that you know how to combine statements, you can create a touch type tool with `{pressed}`.\n\n### Exercise\nFinish the code. Each time a random letter should be chosen, which you have to press. You get a point for a correct press, and and two points deduction for a wrong press.\n**(extra)** Clear the screen after each letter, and show the user how many points they have scored.\n"
                example_code: "```\npoints = 0\nletters = a, b, c, d, e\n{repeat} 10 {times}\n    letter = _ _ _\n    {print} 'Press the letter ' letter\n    {if} letter {is} {pressed}\n    _\n    _\n    _\n```\n"
                start_code: '# place your code here'
        name: Key presses
        description: Try linking a keyboard key to a command!
    print_command:
        description: Introduction print command
        default_save_name: print
        levels:
            1:
                story_text: "## The print command\nYou can print text to the screen using the `{print}` command.\n"
                story_text_2: "### Exercise\nIn Hedy you will find exercises in every adventure. An exercise allows you to practise the new commands and concepts, and lets you give your own twist to the example codes.\nIn this exercise you will see a pink blank space. You have to fill something in the place of the blank space before the code can be ran.\n\nFill in the `{print}` command in the blank space and then add five more lines of code. Each line has to start with a `{print}` command.\nHave fun!\n"
                example_code_2: "```\n_ Hello!\n```\n"
                start_code: "{print} Welcome to Hedy!\n"
                example_code: "```\n{print} Hi there, programmer!\n{print} Welcome to Hedy!\n```\n"
            17:
                start_code: "{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Ready or not, here I come!'"
                story_text: "Now we are going to change indentation a little bit. Every time that we need an indentation, we need `:` at the line before the indentation.\n"
                example_code: "```\n{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Ready or not, here I come!'\n```\n"
            18:
                start_code: "name = 'Hedy'\n{print}('My name is ', name)"
                story_text: "We arrived at real Python code! That means we need to use parentheses with `{print}` and `{range}` from now on.\nIt also means you can use Hedy code from this level in any Python environment as long as you use the English commands. If you haven't until now, you can switch the toggle in the commands menu to do so."
                story_text_2: If you want to print more than one item, you need to separate them by commas.
                example_code_2: "```\ntemperature = 25\n{print}('It is ', temperature, ' degrees outside')\n```\n"
                story_text_3: The final change we will need to make to get Python code is changing `{ask}` into `{input}`.
                example_code_3: "```\n{print}('My name is Hedy!')\nname = {input}('What is your name?')\n{print}('So your name is ', name)\n```\n"
                example_code: "```\n{print}('Hello!')\n{for} i {in} {range}(1, 10):\n    {print}('This is line ', i)\n```\n"
        name: "{print}"
    ask_command:
        description: Introduction ask command
        default_save_name: ask_command
        levels:
            1:
                story_text: "## The ask command\nNow that you can use the `{print}` command, you are ready to learn the next command: `{ask}`. With the `{ask}` command, you can ask a question. Check it out:\n"
                example_code: "```\n{print} Hello!\n{ask} What is your name?\n```\n"
                story_text_2: "## The echo command\nIf you want the computer to repeat the answer back to you, you can use the `{echo}` command. Mind that the answer is echoed back at the end of the sentence, so it this example after hello.\n"
                story_text_3: "### Exercise\nTry out the `{ask}` and `{echo}` commands. Firstly, fill in the blanks to make this program work.\nThen ask 2 more questions using the `{ask}` command, after each `{ask}` use an `{echo}` to print the answer on the screen.\n"
                example_code_2: "```\n{print} Hello!\n{ask} What is your name?\n{echo} hello\n```\n"
                example_code_3: "```\n_ How are you doing?\n_\n```\n"
                start_code: "{print} Hello!\n{ask} What is your name?\n{echo} hello\n"
            2:
                story_text: "## The ask command\nNow that we can use **variables** in our codes, we no longer need the `{echo}` command.\nWe can use variables to store the answers to our questions and this way we can use the answer to multiple questions in our codes.\nCheck it out:\n\nThis way your code is becoming interactive!\n"
                example_code: "```\nname {is} {ask} What is your name?\n{print} Hello name\nage {is} {ask} How old are you?\n{print} name is age years old.\n```\n"
                story_text_2: "### Exercise\nIn the previous tab you have practised with setting variables with the `{is}` command.\nYou have created at least 3 variables and used them with a print command.\nNow, instead of setting the variables we want you to make the variables interactive, like we did in our example.\n\nCopy your code from the previous tab and make the variables interactive by using `{ask}` commands.\n"
                example_code_2: "```\nfavorite_animals is ask What is your favorite animal?\nprint I like favorite_animals\n```\n"
                start_code: "name {is} {ask} What is your name?\n{print} Hello name\nage {is} {ask} How old are you?\n{print} name is age years old."
        name: "{ask}"
    is_command:
        name: "{is}"
        description: introducing is command
        default_save_name: is_command
        levels:
            2:
                story_text: "## Variables\nYou can name a word with `{is}`. This is called a **variable**. In this example we made a variable called name and a variable called age. You can use the word name anywhere in your code and it will be replaced by Hedy, like this:\n"
                example_code: "```\nname {is} Hedy\nage {is} 15\n{print} name is age years old\n```\n"
                story_text_2: "### Exercise\nTime to make your own variables!\nIn the example code we made an example of the variable `favorite_animals`. In line 1 the variable is set, and in line 2 we haved used the variable in a print command.\nFirstly, finish our example by filling in your favorite animal in the blanks. Then make at least 3 of these codes yourself. Pick a variable, and set the variable with the {is} command. Then use it with a {print} command, just like we did.\n"
                example_code_2: "```\nfavorite_animals is _\n{print} I like favorite_animals\n```\n"
                start_code: "name {is} Hedy\nage {is} 15\n{print} name is age years old"
            14:
                start_code: "age = {ask} 'How old are you?'\n{if} age < 13\n    {print} 'You are younger than me!'\n{else}\n    {print} 'You are older than me!'"
                story_text: "We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.\nThe `<` checks if the first number is smaller than the second, for example age `<` 12 checks if age is smaller than 12.\nIf you want to check if the first number is smaller or equal to the second, you can use `<=`, for example age `<=` 11.\nThe `>` checks if the first number is bigger than the second, for example points `>` 10 checks if points is larger than 10.\nIf you want to check if the first number is bigger or equal to the second, you can use `>=`, for example points `>=` 11.\nYou use these comparisons in an `{if}`, like this:\n"
                example_code: "```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n"
                story_text_2: "From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:\n"
                example_code_2: "```\nname = {ask} 'What is your name?'\n{if} name == 'Hedy'\n    {print} 'You are cool!'\n```\n"
                story_text_3: "You can also compare if something is *not* equal to something else using `!=` like this:\n"
                example_code_3: "```\nname = {ask} 'What is your name?'\n{if} name != 'Hedy'\n    {print} 'You are not Hedy'\n```\n"
    random_command:
        description: introducing at random command
        default_save_name: random_command
        levels:
            3:
                story_text: "## At random\nIn this level you can make a list using the `{is}` command. You can let the computer choose a random item from that list. You do that with `{at} {random}`.\n"
                example_code: "```\nanimals {is} dogs, cats, kangaroos\n{print} animals {at} {random}\n```\n"
                story_text_2: "You can use the `{at} {random}` command in a sentence as well.\n"
                example_code_2: "```\nfood {is} sandwich, slice of pizza, salad, burrito\n{print} I am going to have a food {at} {random} for lunch.\n```\n"
                story_text_3: "### Exercise\nTry out the `{at} {random}` command by making your own gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!\nCan you do it? We have already put the first lines into the example code.\n"
                example_code_3: "```\n{print} The big gameshow!\n{print} There are 3 suitcases in front of you...\nchosen {is} {ask} Which suitcase do you choose?\nprices {is} _\n_\n```\n"
                start_code: "animals {is} dog, cat, kangaroo\n{print} animals {at} {random}\n"
            16:
                start_code: "fruit = ['apple', 'banana', 'cherry']\n{print} fruit[random]"
                story_text: "We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.\nWe use square brackets to point out a place in a list. The {at} {random} command can not be used anymore."
                example_code: "```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
        name: "{random}"
    add_remove_command:
        name: "{add} {to} & {remove} {from}"
        description: introducing add to and remove from
        default_save_name: add_remove_command
        levels:
            3:
                story_text: "## Add to\nYou can add items to the list with the `{add} {to}` command. To add an item to a list you can simply type: `{add} penguin {to} animals` or you can use the `{ask}` command like in the example code.\n"
                example_code: "```\nanimals {is} dog, cat, kangaroo\nlike {is} {ask} What is your favorite animal?\n{add} like {to_list} animals\n{print} I choose animals {at} {random}\n```\n"
                story_text_2: "## Remove from\nIf you can add items to a list, of course you can also take them off. This is done with the `{remove} {from}` command.\n"
                example_code_2: "```\nanimals {is} dog, cat, kangaroo\ndislike {is} {ask} What animal do you not like?\n{remove} dislike {from} animals\n{print} I choose animals {at} {random}\n```\n"
                story_text_3: "### Exercise\nTry out the new commands in this virtual restaurant. Add the flavor the player is hpoing for to the list and remove the flavors they are allergic to.\n"
                example_code_3: "```\n{print} Mystery milkshake\nflavors {is} strawberry, chocolate, vanilla\nhope {is} {ask} What flavor are you hoping for?\n_\nallergies {is} {ask} Are you allergic to any flavors?\n_\n{print} You get a flavors {at} {random} milkshake\n```\n"
                start_code: "animals {is} dog, cat, kangaroo\nlike {is} {ask} What is your favorite animal?\n{add} like {to_list} animals\ndislike {is} {ask} What animal do you not like?\n{remove} dislike {from} animals\n{print} I choose animals {at} {random}"
    sleep_command:
        name: "{sleep}"
        description: introducing sleep command
        default_save_name: sleep_command
        levels:
            2:
                story_text: "## The sleep command\nAnother new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.\n"
                example_code: "```\n{print} My favorite colour is...\n{sleep} 2\n{print} green!\n```\n"
                start_code: "{print} My favorite colour is...\n{sleep} 2\n{print} green!"
    if_command:
        name: "{if} & {else}"
        description: Introducing the if command
        default_save_name: if_command
        levels:
            5:
                story_text: "## If... else....\nIn level 5 there is something new, the `{if}`! With the `{if}` you can choose between two different options.\nThis code prints nice if you enter Hedy as a name, and boo! if you enter something else.\n`{ask}` and `{print}` still work like they did in level 4.\n"
                example_code: "```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'\n```\n"
                story_text_2: "Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:\n"
                example_code_2: "```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice'\n{else} {print} 'boo!'\n```\n"
                story_text_3: "### Exercise\nTry to create your own code with `{if}` and `{else}`. You can use the example code if you want.\n"
                example_code_3: "```\nanswer {is} {ask} '2 + 2 = ?'\n_ _ _ 4 _ 'Great job!'\n_ _ 'No 2 + 2 = 4'\n```\n"
                start_code: "name {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice'\n{else} {print} 'boo!'"
            8:
                start_code: "name {is} {ask} 'What is your name?'\n{if} name {is} Hedy\n    {print} 'Welcome Hedy'\n    {print} 'You can play on your computer!'\n"
                example_code: "```\nname {is} {ask} 'What is your name?'\n{if} name {is} Hedy\n    {print} 'Welcome Hedy'\n    {print} 'You can play on your computer!'\n```\n"
                story_text: "## If... Else...\nYou have learned to repeat a block of lines of code after a `{repeat}` command.\nNow you can also use indentation to make blocks after a {if} or {else} command.\nCheck out the example code.\n\n### Exercise\nAdd an {else} command to the example code. Make a block of line using indentation. You do this by starting each line with 4 spaces.\n"
    in_command:
        name: "{in}"
        description: Introducing the in command
        default_save_name: in_command
        levels:
            5:
                story_text: "## Lists\nWhen we want to check if something is in a list, we can now use the `{in}` command.\nThis code prints pretty! if you choose green or yellow, and meh otherwise.\n"
                example_code: "```\npretty_colors {is} green, yellow\nfavorite_color {is} {ask} 'What is your favorite color?'\n{if} favorite_color {in} pretty_colors {print} 'pretty!'\n{else} {print} 'meh'\n```\n"
                story_text_2: "### Exercise\nFinish the example code by filling in the blanks with commands that you've learned.\nWhen you've finished the code, try to create a code of your own and use a question that you've thought of yourself.\n"
                example_code_2: "```\nanimals is dog, cow, sheep\nanswer is ask 'What is your favorite animal?'\n_ answer _ animals _ 'Mine too!'\n_ _ 'My favorite animals are dogs, cows and sheep'\n```\n"
                start_code: "pretty_colors {is} green, yellow\nfavorite_color {is} {ask} 'What is your favorite color?'\n{if} favorite_color {in} pretty_colors {print} 'pretty!'\n{else} {print} 'meh'"
    quotation_marks:
        name: "'quotation marks'"
        description: Introduction quotation marks
        default_save_name: quotation_marks
        levels:
            4:
                story_text: "## 'Quotation marks'\nIn level 4 `{ask}` and `{print}` have changed.\nYou must put text that you want to print between quotation marks.\nThis is useful, because now you can print all the words you want. Also the words you used to store something with `{is}`.\nMost programming languages also use quotation marks when printing, so we are also getting a step closer to real programming!\n"
                story_text_2: "## Contractions\nImportant! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.\nMake sure to remove those apostrophes and change the spelling to I am or What is.\nCheck out the example code to see the wrong way of using apostrophes.\n"
                example_code_2: "```\n_ This is the wrong way of using apostrophes _\n{print} 'I'm babysitting my sister's kids'\n{print} 'What's more fun than that?'\n```\n"
                start_code: "{print} 'You need to use quotation marks from now on!'\nanswer {is} {ask} 'What do we need to use from now on?'\n{print} 'We need to use ' answer"
                example_code: "```\n{print} 'You need to use quotation marks from now on!'\nanswer {is} {ask} 'What do we need to use from now on?'\n{print} 'We need to use ' answer\n```\n"
            12:
                example_code_2: "```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n"
                story_text_3: "**All text after `{if}` comparisons need quotation marks too**\n"
                example_code_3: "```\nname = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n"
                story_text: "**All texts need to be in quotation marks**\nFor this level on you will also have to use quotation marks when storing a text with `=`:\n"
                example_code: "```\nname = 'Hedy the Robot'\n{print} 'Hello ' name\n```\n"
                story_text_2: "**All items in lists need quotation marks too**\nLists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.\nThis allows you to save two words as 1 item on the list, for example 'Iron Man'.\n"
                story_text_4: "**Numbers don't need quotation marks**\nFor numbers, you do not use quotation marks in the `=`:\n"
                example_code_4: "```\nscore = 25\n{print} 'You got ' score\n```\n"
                start_code: "name = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'"
    repeat_command:
        name: "{repeat}"
        description: repeat command
        default_save_name: repeat_command
        levels:
            7:
                story_text: "## Repeat! Repeat! Repeat!\nLevel 7 adds the `{repeat}` command.  `{repeat}` can be used to execute one line of code multiple times. Like this:\n\n### Exercise\nPlay around with the repeat command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?\n"
                example_code: "```\n{repeat} 3 {times} {print} 'Hedy is fun!'\n```\n"
                start_code: "{print} 'happy birthday to you'\n{print} 'happy birthday to you'\n{print} 'happy birthday dear Hedy'\n{print} 'happy birthday to you'\n"
            9:
                story_text: "In this level you can not only use multiple lines with `{if}` and `{repeat}`, but you can also put them together!\nIn the example you see an `{if}` command within a `{repeat}` command. It is also allowed the other way around, and an `{if}` is also allowed in an `{if}` and a `{repeat}` in a `{repeat}`.\nGive it a try!\n"
                example_code: "```\n{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    {else}\n        {print} 'pizza is better'\n```\n"
                start_code: "{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    {else}\n        {print} 'pizza is better'"
            8:
                start_code: "{repeat} 5 {times}\n    {print} 'Hello everyone'\n    {print} 'This will be printed 5 times'"
                story_text: "### Repeat commands and indentation\nIn this level you can repeat multiple lines of code with only 1 repeat command.\nYou do this by making a block of lines that you want to repeat.\nThe lines in this block will need **indentation** .\nThat means putting four spaces at the beginning of each line. You will also have to indent when you just want to create a block of one line.\n"
                example_code: "```\n{repeat} 5 {times}\n    {print} 'Hello everyone'\n    {print} 'This is all repeated 5 times'\n```\n"
    repeat_command_2:
        name: "{repeat} 2"
        description: repeat command 2
        default_save_name: repeat_command_2
        levels:
            7:
                story_text: "## Repeat with other commands and with variables\nYou have practiced the `{repeat}` command in combination with the `{print}` command now, but did you know you could also use other commands with `{repeat}` ?\nIn this example code you can see that `{repeat}` can also be used with an `{ask}`, `{if}` or `{else}` command.\n"
                story_text_2: "Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.\nThen, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.\n"
                example_code: "```\n{repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'\n{if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'\n{else} {repeat} 3 {times} {print} 'You have learned something new!'\n```\n"
                example_code_2: "```\n{print} 'Yay! It is your birthday!'\nage = {ask} 'How old are you now?'\n{repeat} age {times} {print} 'Hip Hip Hurray!'\n```\n"
                start_code: "{repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'\n{if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'\n{else} {repeat} 3 {times} {print} 'You have learned something new!'"
            8:
                story_text: "### In the block or not?\nIn this level you have to think carefully which lines of code should be in the block and which shouldn't.\nFor example: If you want to sing the song *the muffin man*. You only want the line with 'the muffin man' to be repeated twice.\nThis means the last line shouldn't start with indentation as it doesn't belong to the block.\nIf you do start the last line with indentation the song will turn out wrong.\n\n## Exercise\nEach line in the example code starts with a blank. Remove the blanks and try to figure out which line need indentation and which don't to make the muffin man song.\n"
                start_code: "{repeat} 3 {times}\n    {print} 'This line will be repeated...'\n    {print} 'This one too...'\n{print} 'but this one will not!'"
                example_code: "```\n_ {print} 'Do you know the muffin man?'\n_ {repeat} 2 {times}\n_ {print} 'The muffin man'\n_ {print} 'Do you know the muffin man, who lives on Drury Lane?'\n```\n"
    for_command:
        name: "{for}"
        description: for command
        default_save_name: for
        levels:
            10:
                start_code: "animals {is} dog, cat, blobfish\n{for} animal {in} animals\n    {print} 'I love ' animal"
                story_text: "## For\nIn this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.\n`{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with 4 spaces."
                example_code: "```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n    {print} 'I love ' animal\n```\n"
            11:
                start_code: "{for} counter {in} {range} 1 {to} 5\n    {print} counter"
                story_text: "In this level, we add a new form of the `{for}`. In earlier levels, we used `{for}` with a list, but we can also use `{for}` with numbers.\nWe do that by adding a variable name, followed by  `{in}` `{range}`. We then write the number to start at, `{to}` and the number to end at.\n\nTry the example to see what happens! In this level again, you will need to use indentations in lines below the `{for}` statements."
                example_code: "```\n{for} counter {in} {range} 1 {to} 5\n    {print} counter\n```\n"
    maths:
        name: maths
        levels:
            6:
                story_text_2: "We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:\n"
                start_code: "{print} '5 times 5 is ' 5 * 5"
                story_text: "## 1 + 1\nIn this level you learn something new: you can now also calculate.\n\nThe plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.\n\nThe times is a bit different, because there is no times symbol on your keyboard. Just search, there really isn't!\nThat is why we multiply with the asterisk above 8: `5 * 5`. Read that as \"5 times 5\" that helps you remember it best.\n"
                example_code: "```\n{print} '5 plus 5 is ' 5 + 5\n{print} '5 minus 5 is ' 5 - 5\n{print} '5 times 5 is ' 5 * 5\n```\n"
                example_code_2: "```\nname = Hedy\nanswer = 20 + 4\n```\n"
            12:
                start_code: "{print} 'decimal numbers now need to use a dot'\n{print} 2.5 + 2.5"
                story_text: "**Decimal numbers**\nSo far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers."
                example_code: "```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n"
        description: Introducing maths
        default_save_name: maths
    and_or_command:
        description: introducing and or
        default_save_name: and or
        levels:
            13:
                example_code: "```\nname = {ask} 'what is your name?'\nage = {ask} 'what is your age?'\n{if} name {is} 'Hedy' {and} age {is} 2\n    {print} 'You are the real Hedy!'\n```\n"
                start_code: "name = {ask} 'what is your name?'\nage = {ask} 'what is your age?'\n{if} name {is} 'Hedy' {and} age {is} 2\n    {print} 'You are the real Hedy!'"
                story_text: "We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two `{if}`s but can use `{and}` and `{or}`.\n\nIf you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct."
        name: "{and} & {or}"
    while_command:
        name: "{while}"
        description: while
        default_save_name: while_command
        levels:
            15:
                start_code: "answer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'"
                example_code: "```\nanswer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'\n```\n"
                story_text: "We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.\nSo don't forget to change the value in the loop.\n\nIn the example code, we continue until a correct answer has been given.\nIf the correct answer is never given, the loop never ends!"
    elif_command:
        name: "{elif}"
        description: elif
        default_save_name: elif
        levels:
            17:
                story_text: "In this level you can also use a new command: `{elif}`. `{elif}` is short for `{else}` `{if}` and you need it when you want to make 3 (or more!) options.\nCheck it out!\n"
                example_code: "```\nprices = ['1 million dollars', 'an apple pie', 'nothing']\nyour_price = prices[{random}]\n{print} 'You win ' your_price\n{if} your_price == '1 million dollars' :\n    {print} 'Yeah! You are rich!'\n{elif} your_price == 'an apple pie' :\n    {print} 'Lovely, an apple pie!'\n{else}:\n    {print} 'Better luck next time..'\n```\n"
                start_code: "prices = ['1 million dollars', 'an apple pie', 'nothing']\nyour_price = prices[{random}]\n{print} 'You win ' your_price\n{if} your_price == '1 million dollars' :\n    {print} 'Yeah! You are rich!'\n{elif} your_price == 'an apple pie' :\n    {print} 'Lovely, an apple pie!'\n{else}:\n    {print} 'Better luck next time..'"
    rock_2:
        levels:
            2:
                story_text: "Now that you have learned how to use the `{ask} command, you can make your rock, paper, scissors code interavtive too!\n\n### Exercise\nMake the rock, paper, scissors code interactive by adding the `{ask}` command and a question to your rock, paper, scissors code.\n"
                example_code: "```\nchoice is _\n{print} I choose choice\n```\n"
                start_code: "# place your code here"
        name: Rock, paper, scissors 2
        description: Part 2 of rock, paper, scissors
        default_save_name: rock_2
    harry_potter:
        default_save_name: Harry Potter
        levels:
            10:
                example_code: "```\nhouses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw\nsubjects = potions, defence against the dark arts, charms, transfiguration\nfears = Voldemort, spiders, failing your OWL test\nnames = Harry, Ron, Hermione\n_\n_ {print} name ' is placed in ' houses {at} {random}\n_ {print} name ' is great at ' subjects {at} {random}\n_ {print} name 's greatest fear is ' fears {at} {random}\n```\n"
                start_code: '# place your code here'
                story_text: "### Exercise\nWe can also make a Harry Potter themed fortune teller. Fill in blanks such that 9 lines are printed.\n**Extra** Change the theme of the fortune teller into something else, such as your favorite book, film or tv show.\n"
        name: Harry Potter
        description: Harry Potter adventures
    clear_command:
        name: '{clear}'
        description: clear command
        default_save_name: clear_command
        levels:
            4:
                start_code: "print '3'\nsleep\nclear\nprint '2'\nsleep\nclear\nprint '1'\nsleep\nclear\nprint 'SURPRISE!'\n"
                story_text: "Time for a new command! With `{clear}` you can clear all the text form your output screen. This way you can prevent your screen getting too full of text.\nBeware! If you are using a `{clear}` command, remember to use a `{sleep}` above it. Otherwise Hedy will clear your screen without giving you the time to read!\n"
                example_code: "```\nprint '3'\nsleep\nclear\nprint '2'\nsleep\nclear\nprint '1'\nsleep\nclear\nprint 'SURPRISE!'\n```\n"
