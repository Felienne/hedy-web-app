adventures:
    story:
        name: Historie
        default_save_name: Historie
        description: Historie
        levels:
            1:
                story_text: |
                    På niveau 1 kan du lave en historie med en hovedperson du selv indtaster.

                    På første linje, brug `{ask}` til at spørge hvem hovedpersonen skal være.

                    Efter den første linje, start med `{print}` hvis sætningen skal printes.
                    Brug `{echo}` hvis du vil have din hovedpersonen i slutningen af sætningen.
                example_code: |
                    ```
                    {ask} Hovedpersonen i denne historie
                    {print} Hovedpersonen går nu ind i skoven
                    {echo} Han er en lidt bange,
                    {print} Han hører mærkelige lyde alle steder
                    {print} Han er bange for at det en hjemsøgt skov
                    ```
                story_text_2: |
                    ### Opgave
                    Kan du lave din egen historie i Hedy nu og ved at bruge `{print}` , `{ask}` og `{echo}`?
            2:
                story_text: |
                    På niveau 2 kan du gøre din historie sjovere. Din hovedperson kan nu være hvor som helst i sætningen.

                    Du bliver nødt til at programmere en lille smule mere for at få det til at ske. Du skal nu først give en hovedperson et navn.

                    Så kan du sætte det navn ind alle steder i en sætning.

                    ### Opgave
                    Kan du selv lave en historie hvor du bruger en variabel? Kan du tilføje endnu flere variabler?
                example_code: |-
                    ```
                    navn {is} {ask} Hvad hedder hovedpersonen?
                    {print} navn løber nu rundt i skoven
                    {print} navn er lidt bange
                    {print} Pludselig hører han en mærkelig lyd...
                    {sleep}
                    {print} navn er bange for at det er en hjemsøgt skov
                    ```
                story_text_2: |
                    ### Exercise
                    Now it's time to add variables to your own story that you've made in the previous level.
                    Go to 'My programs', look for your level 1 story adventure and copy the code. Paste the code in your input screen in this level.

                    This code won't work in this level, because you have not used variables yet.
                    Change the `{ask}` commands and `{echo}` commands in your code to the correct form that you've learned in this level.

                    **Extra** Add a sleep command to your code to build up tension in your story.
            3:
                story_text: |
                    På niveau 3 kan du gøre din historie endnu sjovere. Du kan bruge tilfældighed til et monster, dyr eller anden forhindring, sådan her:
                example_code: |
                    ```
                    dyr {is} 🦔, 🐿, 🦉, 🦇
                    {print} Nu hører han lyden af et dyr {at} {random}
                    ```
                story_text_2: |
                    Kommandoen `{add}` kan også hjælpe dig i din historie.
                example_code_2: |
                    ```
                    {print} Han hører en lyd
                    dyr {is} 🐿, 🦔, 🦇, 🦉
                    dyret {is} {ask} Hvad tror du det er?
                    {add} dyret {to_list} dyr
                    {print} det var et dyr {at} {random}
                    ```
                story_text_3: |
                    Dette er et eksempel med `{remove}` kommandoen i din historie

                    ### Opgave
                    Kan du bruge de 3 nye kommandoer `{at} {random}` , `{add} {to_list}` og `{remove} {from}` i din egen historie?
                example_code_3: |
                    ```
                    {print} Hans rygsæk blev alt for tung.
                    {print} I den var der en flaske med vand, en lommelygte og en mursten.
                    taske {is} vand, lommelygte, mursten
                    efterlad {is} {ask} Hvilken ting skal han efterlade?
                    {remove} efterlad {from} taske
                    ```
            5:
                story_text: |
                    På dette niveau kan du programmere forskellige slutninger, hvilket vil gøre din historie endnu sjovere.

                    ### Opgave
                    Find på to forskellige slutninger til din historie, for eksempel:

                    - Prinsessen går gennem skoven
                    - Hun møder et monster

                    - Lykkelig slutning: Hun griber sit sværd og monstret løber hurtigt sin vej
                    - Ulykkelig slutning: Monstret spiser prinsessen

                    Du kan også sikre at et navn bliver indtastet igen. Det fungerer ligesom på det forrige niveau. Du kan kombinere det med `{if}`, og så har du allerede lavet et helt program!
                example_code: |
                    ```
                    navn {is} {ask} 'Hvem går i skoven?'
                    {print} navn ' går gennem skoven'
                    {print} navn ' møder et monster'
                    slutning {is} {ask} 'Vil du have en lykkelig eller ulykkelig slutning?'
                    {if} slutning {is} lykkelig {print} navn ' griber sit sværd og monstret løber hurtigt sin vej'
                    {else} {print} 'Monstret æder ' navn
                    ```
            7:
                story_text: |
                    I en historie, gentages nogle ord flere gange. For eksempel, når nogen råber på hjælp eller synger en sang.
                    Du kan indsætte disse gentagelser i din historie, på dette niveau med `{repeat}`.

                    ### Opgave
                    Tilføj en gentagelse til din egen historie. Gå tilbage til dine gemte programmer, vælg dit historieprogram fra niveau 6 og
                    find en linje der indeholder {print} og gentag det!
            8:
                story_text: |
                    In this level you can use multiple lines in your {if} commands, this way you can upgrade your happy or sad ending!

                    ### Exercise
                    Can you make your own story with two different endings?
                example_code: |
                    ```
                    {print} 'OH NO! The T-rex is closing in!'
                    end = {ask} 'Do you want a happy or a sad ending?'
                    {if} end {is} happy
                        {print} 'Just in time Richard jumps back into the time machine!'
                        {print} 'Michael types in the code and...'
                        {print} '💥ZAP!💥'
                        {print} 'They are back in their garage'
                    {else}
                        {print} 'Michael yells COME ON RICHARD! RUN FASTER!'
                        {print} 'But Richard is too slow...'
                        {print} 'The T-rex closes in and eats him in one big bite!🦖'
                    ```
            9:
                example_code: |
                    ```
                    {print} 'Robin is walking downtown'
                    location = {ask} 'Is Robin going into a shop, or does she go home?'
                    {if} location {is} shop
                        {print} 'She enters the shop.'
                        {print} 'Robin sees an interesting looking book'
                        book = {ask} 'Does Robin buy the book?'
                        {if} book {is} yes
                            {print} 'Robin buys the book and goes home'
                        {else}
                            {print} 'Robin leaves the shop and goes home'
                    {else}
                        {print} 'Robin goes home'
                    ```
            10:
                example_code: |
                    ```
                    animals = red bird, black sheep, green frog, yellow duck, little child
                    {print} 'brown bear'
                    {print} 'brown bear'
                    {print} 'What do you see?'
                    {for} animal {in} animals
                        {print} 'I see a ' animal ' looking at me'
                        {print} animal
                        {print} animal
                        {print} 'What do you see?'
                    {print} 'I see all the animals looking at me!'
                    ```
            12:
                example_code: |
                    ```
                    name = 'The Queen of England'
                    {print} name ' was eating a piece of cake, when suddenly...'
                    ```
            13:
                example_code: |
                    ```
                    sword = 'lost'
                    game = 'on'
                    {print} 'Our hero is walking through the forest'
                    {print} 'The path splits two ways'
                    {for} i {in} {range} 0 {to} 2
                        {if} game {is} 'on'
                            path = {ask} 'Which path should she choose?'
                            {if} path {is} 'left' {and} sword {is} 'found'
                                {print} 'Our hero comes across a dragon!'
                                {print} 'Luckily our hero has a sword to defeat the beast!'
                                game = 'over'
                            {if} path {is} 'left' {and} sword {is} 'lost'
                                {print} 'Our hero finds a dragon, but she doesnt have any weapons!'
                                {print} 'Our hero is beaten by the dragon...'
                                {print} 'Try again'
                                game = 'over'
                            {if} path {is} 'right' {and} sword {is} 'found'
                                {print} 'You have already found the sword. There is nothing left here.'
                                {print} 'She walks back'
                            {if} path {is} 'right' {and} sword {is} 'lost'
                                {print} 'Our hero finds a sword'
                                {print} 'This could come in very handy'
                                sword = 'found'
                    ```
    add_remove_command:
        name: '{add} {to} & {remove} {from}'
        description: introducing add to and remove from
        levels:
            3:
                story_text_3: |
                    ### Exercise
                    Try out the new commands in this virtual restaurant. Add the flavor the player is hpoing for to the list and remove the flavors they are allergic to.
    and_or_command:
        description: introducing and or
    ask_command:
        description: Introduction ask command
        levels:
            1:
                story_text_2: |
                    ## The echo command
                    If you want the computer to repeat the answer, you can use the `{echo}` command. The answer will then be echoed back at the end of the sentence, so in this example after hello.
            2:
                example_code_2: |
                    ```
                    yndlingsdyr {is} {ask} Hvad er dit yndlingsdyr?
                    {print} Jeg elsker yndlingsdyr
                    ```
    blackjack_2:
        description: Blackjack del 2
    blackjack_3:
        description: Blackjack del 3
    blackjack_4:
        description: Blackjack del 4
    calculator:
        levels:
            6:
                example_code: |
                    ```
                    number_1 {is} {ask} 'Fill in the first number:'
                    number_2 {is} {ask} 'Fill in the second number:'
                    correct_answer = number_1 * number_2
                    {print} number_1 ' times ' number_2 ' is ' correct_answer
                    ```
                story_text_3: |
                    You can also let the computer do random calculations on its own using {random}.
                example_code_3: |
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number_1 = _
                    number_2 = _
                    correct_answer = number_1 * number_2
                    given_answer = 'What is ' number_1 ' times ' number_2 '?'
                    {if} _
                    {else} _
            11:
                example_code: |
                    ```
                    number = 10
                    {for} i {in} {range} 1 to 10
                        {print} i * number
                    ```
            12:
                story_text: |
                    Now you can make a calculator that works for decimal numbers. Fill in the blanks to get it to work properly!
                example_code: |
                    ```
                    number1 = {ask} 'What is the first number?'
                    number2 = {ask} 'What is the second number?'
                    answer = _
                    {print} number1 ' plus ' number2 ' is ' answer
                    ```
    calculator_2:
        name: Lommeregner 2
        default_save_name: Lommeregner 2
        description: Lommeregner 2
    clear_command:
        description: clear command
    debugging:
        levels:
            3:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    movie_choices {is} dracula, fast and furious, home alone, barbie
                    chosen_movie {is} movies {at} {random}
                    {print} Tonight we will watch chosen _movies
                    like {ask} Do you like that movie?
                    {print} Tomorrow we will watch something else.
                    {add} chosen_movie {to} movie_choices
                    {print} Tomorrow we will watch tomorrows_movie
                    tomorrows_movie {is} movie_choices {at} {random}
                    I'll go get the popcorn! {print}
                    ```
            7:
                story_text: |-
                    ### Exercise
                    Surprise! This program looks more like an output than a code. And yet, we don't want you to just add `{print}` commands in front of each line.
                    Fix this program to turn it into the nursery rhyme 'Brother John (Frère Jaques)' by using the {repeat} command of course!
            9:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to our sandwich shop'
                    amount 'How many sandwiches would you like to buy?'
                    {repeat} amount {times}
                    {ask} {is} {ask} 'What kind or bread would you like your sandwich to be?'
                    types_of_bread {is} white, wheat, rye, garlic, gluten free
                    {if} chosen_bread in types_of_bread
                    {print} 'Lovely!'
                    {else}
                    'I'm sorry we don't sell that'
                    topping {is} {ask} 'What kind of topping would you like?'
                    sauce {is} {ask} 'What kind of sauce would you like?'
                    {print} One chosen_bread with topping and sauce.
                    price = amount * 6
                    {print} 'That will be 'price dollar' please'
                    ```

                    price = amount * 6
                    {print} 'That will be 'price dollar' please'
            10:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    names = Muad Hasan Samira Noura
                    activities = fly a kite, go swimming, go hiking, catch tan in the sun
                    {for} name {is} names
                    {print} At the beach name loves to activity at random
                    ```
            11:
                story_text: |-
                    ### Exercise
                    Debug this calender program. The output of this program is supposed to look like a list of dates.
                    For example:

                    ```
                    Hedy calender
                    Here are all the days of November
                    November 1
                    November 2
                    November 3
                    ```
                    And so on.

                    Mind that you have to test your code extra carefully for the month February, because the amount of days in this month changes in leap years.
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    print 'Hedy calender'
                    months_with_31 days = January, March, May, July, September, October, December
                    months_with_30_days = April, June, August, November
                    month = ask 'Which month would you like to see?'
                    if month in months_with_31_days
                        days = 31
                        if month in months_with30_days
                            days = 30
                    if month = February
                        leap_years = 2020, 2024, 2028, 2036, 2040, 2044, 2028
                        year = ask 'What year is it?'
                    if year in leap_years
                        days = 29
                    else
                        days = 28

                    print 'Here are all the days of ' moth
                    for i in range 1 to days
                        print month i
                    ```
            12:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define greet
                    greetings = 'Hello', 'Hi there', 'Goodevening'
                        print greetings at random

                    define take_order
                        food = ask 'What would you like to eat?'
                        print 'One food'
                        drink = 'What would you like to drink?'
                        print 'One ' drink
                        more = ask 'Would you like anything else?'
                            if more is 'no'
                        print 'Alright'
                            else
                            print 'And ' more
                    print 'Thank you'

                    print 'Welcome to our restaurant'
                    people = ask 'How many people are in your party tonight?'
                    for i in range 0 to people
                        call greet_costumer
                    ```
            13:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    defin movie_recommendation with name
                        action_movies == 'Die Hard', 'Fast and Furious', 'Inglorious Bastards'
                        romance_movies = 'Love Actually', 'The Notebook', 'Titanic'
                        comedy_movies = 'Mr Bean' 'Barbie''Deadpool'
                        kids_movies = 'Minions', 'Paddington', 'Encanto'
                        if name is 'Camila' or name is 'Manuel'
                            recommended_movie = kids_movie at random
                        if name is 'Pedro' or 'Gabriella'
                                mood = ask 'What you in the mood for?'
                            if mood is 'action'
                                recommended_movie = comedy_movies at random
                            if mood is 'romance'
                                recommended_movie = romance_movies
                        if mood is 'comedy'
                                recommended_movie = comedy_movies at random

                    print 'I would recommend ' recommended_movie ' for ' name

                    name = ask 'Who is watching?'
                    recommendation = ask 'Would you like a recommendation?'
                    if recommendaion is 'yes'
                    print movie_recommendation with name
                    else
                    print 'No problem!'
                    ```
            14:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define calculate_heartbeat
                        print 'Press your fingertips gently against the side of your neck'
                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
                    ```

                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
            15:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    names = 'Tanya', 'Romy', 'Kayla', 'Aldrin', 'Ali'
                    verbs='walking', 'skipping', 'cycling', 'driving', 'running'
                    locations = 'on a mountaintop', 'in the supermarket', 'to the swimming pool'
                    hiding_spots = 'behind a tree', under a table', in a box'
                    sounds = 'a trumpet', 'a car crash', 'thunder'
                    causes_of_noise = 'a television', 'a kid with firecrackers', 'a magic elephant', 'a dream'

                    chosen_ name = names at random
                    chosen_verb = verbs at random
                    chosen_location = 'locations at random'
                    chosen_sounds = noises at random
                    chosen_spot = hiding_spots random
                    chosen_causes = causes_of_noise at random

                    print chosen_name ' was ' chosen_verb ' ' chosen_location
                    print 'when they suddenly heard a sound like ' sounds at random
                    print chosen_name ' looked around, but they couldn't discover where the noise came from'
                    print chosen_name ' hid ' chosen_spot'
                    print 'They tried to look around, but couldn't see anything from there'
                    hidden = 'yes'
                    while hidden = 'yes'
                        print chosen_name 'still didn't see anything'
                    answer = ask 'does ' chosen_name ' move from their hiding spot?'
                        if answer = 'yes'
                            hidden == 'no'
                    print 'chosen_name moved from' chosen_spot
                    print 'And then they saw it was just' chosen_cause
                    print chosen_name 'laughed and went on with their day'
                    print The End
                    ```
            16:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    country = ['The Netherlands', 'Poland', 'Turkey', 'Zimbabwe', 'Thailand', 'Brasil', 'Peru', 'Australia', 'India', 'Romania' ]
                    capitals = 'Amsterdam', 'Warshaw' 'Istanbul', 'Harare', 'Bangkok', 'Brasilia', 'Lima', 'Canberra', 'New Delhi', 'Bucharest'
                    score = 0
                    for i in range 0 to 10
                        answer = ask 'What's the capital of ' countries[i]
                        correct = capital[i]
                        if answer = correct
                            print 'Correct!'
                        score = score + 1
                        else
                            print 'Wrong,' capitals[i] 'in the capital of' countries[i]
                        print 'You scored ' score ' out of 10'

                    ```
            17:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define food_order
                        toppings = ask 'pepperoni, tuna, veggie or cheese?'
                        size = ask 'big, medium or small?'
                        number_of_pizza = ask 'How many these pizzas would you like?'

                        print 'YOU ORDERED'
                        print number_of_pizzas ' size  ' topping ' pizza'

                    define drinks_order
                        drink = ask 'water, coke, icetea, lemonade or coffee?'
                        number_of_drinks = ask 'How many of these drinks would you like?'

                        print 'YOU ORDERED'
                        print number_of_drinks ' ' drink

                    'Welcome to Hedy pizza'
                    more_food = ask 'Would you like to order a pizza?'
                    while more_food = 'yes'
                        return food_order
                        more_food = ask 'Would you like to order a pizza?'
                    more_drinks = ask 'Would you like to order some drinks?'
                    while more_drinks == 'yes'
                        call drink_order
                        more_drinks == ask 'Would you like to order more drinks?'


                    print 'Thanks for ordering!'
                    ```
    default:
        name: Introduktion
        description: Niveau forklaring
        levels:
            1:
                story_text: "På niveau 1 kan do bruge kommandoerne `{print}`, `{ask}` og `{echo}`.\n Skriv din programkode i programmeringsfeltet. Eller tryk på den grønne knap i kodeeksemplet, og koden vil blive skrevet for dig!\nPrøv selv koden med den grønne 'Kør koden' knappen under programmeringsfeltet.\n\nDu kan printe tekst på skærmen ved at bruge `{print}` kommandoen.     \n"
            3:
                story_text: |
                    På niveau 3 kan du lave en liste. Du kan lade computeren vælge noget tilfældigt fra listen. Det kan du gøre med `{at} {random}`.
            4:
                story_text: |
                    På niveau 4 har `{ask}` og `{print}` ændret sig.

                    Du skal den tekst du vil printe i anførselstegn.

                    Dette er nyttigt, for nu kan du printe alle de ord du har lyst til. Du kan også printe de ord du har brugt til at gemme med `{is}`.

                    De fleste programmeringssprog bruger også anførselstegn til at printe, så vi kommer også tættere på rigtig programmering!
                example_code: |
                    ```
                    {print} 'Du skal bruge anførselstegn fra nu af!'
                    svar {is} {ask} 'Hvad er det du skal bruge fra nu af?'
                    {print} 'Vi har brug for at bruge ' svar
                    ```
            5:
                story_text: |
                    På niveau 5 er der noget nyt, `{if}`! Med `{if}` kan du vælge mellem 2 forskellige muligheder.
                    Denne kode printer lækkert hvis du taster Hedy som navn, and bøh! hvis du skriver noget andet.
                    `{ask}` og `{print}` virker stadig som de gjorde på niveau 4.
                example_code: |
                    ```
                    navn {is} {ask} 'hvad er dit navn?'
                    {if} navn {is} Hedy {print} 'lækkert' {else} {print} 'buh!'
                    ```
            6:
                story_text: |
                    På dette niveau lærer du noget nyt: du kan nu også regne.

                     Plus er nemt, du skriver det som i matematik: `5 + 5` for eksempel. Minus virker også fint, det er `5 - 5`.

                     Gange er en smule anderledes, for der er ikke noget gange symbol på dit tastatur. Prøv at lede, den er der virkelig ikke!
                     Der for ganger vi med stjernen ved siden af ø: `5 * 5`. Læs det som "5 gange 5" det hjælper dig med at huske det.
                example_code: |
                    ```
                    {print} '5 plus 5 er ' 5 + 5
                    {print} '5 minus 5 er ' 5 - 5
                    {print} '5 gange 5 er ' 5 * 5
                    ```
            7:
                story_text: |
                    Niveau 7 tilføjer `{repeat}` kommandoen.  `{repeat}` kan bruges til at udføre en kodelinje flere gange.
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy er sjovt!'
                    ```
            8:
                story_text: |
                    `{ask}` og`{print}` virker stadig som du kender dem. Men `{if}`, `{else}`, {pressed} og `{repeat}` har ændret sig!
                    Du kan nu udføre en gruppe kode sammen, men du skal *indrykke* koden.
                    Det betyder at sætte fire mellemrum i begyndelsen af linjen. Du skal også indrykke når du blot vil lave en gruppe med en enkelt linje.
                example_code: |
                    Sådan virker `{repeat}` kommandoen nu:
                    ```
                    {repeat} 5 {times}
                        {print} 'Hej alle'
                        {print} 'Dette gentages 5 gange'
                    ```
                    Sådan virker `{if}` og `{else}` kommandoerne nu:

                    ```
                    navn {is} {ask} 'Hvad hedder du?'
                    {if} navn {is} Hedy
                        {print} 'Velkommen Hedy'
                        {print} 'Du må spille på din computer!'
                    {else}
                        {print} 'ADVARSEL!'
                        {print} 'Du må ikke bruge denne computer!'
                    ```
            9:
                story_text: |
                    På dette niveau må du kun bruge flere linjer med `{if}` og`{repeat}`, men du kan også sætte dem sammen!
                    I eksemplet kan du se en `{if}` kommando inde i en `{repeat}` kommando. Det er også tilladt den anden vej rundt, og en `{if}` er også tilladt i en anden `{if}` og en `{repeat}` i en `{repeat}`.
                    Giv det et forsøg!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        mad = {ask} 'Hvad kunne du tænke dig?'
                        {if} mad {is} pizza
                            {print} 'lækkert!'
                        {else}
                            {print} 'pizza er bedre'
                    ```
            10:
                story_text: |-
                    På dette niveau lærer vi en ny kommando der hedder `{for}`. Med `{for}` kan du lave en liste og bruge alle elementerne.
                    `{for}` skaber en blok, ligesom `{repeat}` og `{if}` så alle linjer i blokken skal starte med mellemrum (indrykning).
                example_code: |
                    ```
                    alle_dyr {is} hunde, katte, fisk
                    {for} dyr {in} alle_dyr
                      {print} 'Jeg elsker ' dyr
                    ```
            12:
                story_text: |-
                    **Kommatal**
                    Indtil nu, har Hedy ikke tilladt kommatal som 1,5, men nu tillader vi det. Bemærk at computere bruger `.` i kommatal.
                example_code: |
                    ```
                    {print} 'To og en halv plus to og en halv er..'
                    {print} 2.5 + 2.5
                    ```

                    {print} 2.5 + 2.5
            13:
                story_text: Vi skal nu lære `{and}` og `{or}`! Hvis du vil tjekke to udsagn, behøver du ikke bruge to {if} kommandoer men kan blot bruge `{and}` og `{or}`. Hvis du bruger `{and}`, skal begge udsagn, til højre og venstre for `{and}` være sande. Vi kan også bruge `{or}`. Så behøver kun et enkelt udsagn være sandt.
                example_code: |
                    ```
                    navn = {ask} 'hvad hedder du?'
                    alder = {ask} 'hvor gammel er du?'
                    {if} navn {is} 'Hedy' {and} alder {is} 2
                        {print} 'Du er virkelig Hedy!'
                    ```
            14:
                story_text: |
                    Vi skal lære flere nye ting. Du kender dem måske allerede fra matematik,  `<` og `>`.
                    `<` tjekker om det første tal er mindre end det andet, for eksempel alder `<` 12 tjekker om alder er mindre end 12.
                    Hvis du gerne vil tjekke om det første tale er mindre end eller lig med, kan du bruge `<=`, for eksempel alder `<=` 11.
                    `>` tjekker  om det første tal er større end det andet, for eksempel point `>` 10 tjekker om point er større end 10.
                    Hvis du vil tjekke om det første tal er større end eller lig med det andet, kan du bruge `>=`, for eksempel point `>=` 11.
                    Du kan bruge disse sammenligninger i en `{if}`, sådan her:
                example_code: |
                    ```
                    alder = {ask} 'Hvor gammel er du?'
                    {if} alder > 12
                        {print} 'Du er ældre end mig!'
                    ```

                    {if} alder < 13
                        {print} 'Du er yngre end mig!'
                    {else}
                        {print} 'Du er ældre end mig!'
            15:
                story_text: |-
                    Nu skal vi lære et nyt loop, et `{while}` loop! Vi fortsætter loop'et så længe udsagnet er sandt.
                    Så glem ikke at ændre værdien inde i loop'et.

                    I eksemplet, fortsætter vi indtil der er blevet givet det rigtige svar.
                    Hvis det rigtige svar ikke bliver givet, slutter loop'et aldrig!
                example_code: |
                    ```
                    svar = 0
                    {while} svar != 25
                        svar = {ask} 'Hvad er 5 gange 5?'
                    {print} 'Det er rigtigt'
                    ```
            16:
                story_text: |-
                    Vi skal lave lister på som i Python, med firkantede parenteser rundt om! Vi beholder også anførselstegn rund om hvert element som vi har lært på et tidlige niveau.
                    Du kan også bruge firkantede parenteser til at udpege et sted i en liste.
                example_code: |
                    ```
                    venner = ['Ahmed', 'Bente', 'Claus']
                    lykke_tal = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} 'Lykketallet til ' venner[i]
                        {print} 'er ' lykke_tal[i]
                    ```
            17:
                story_text: |-
                    Nu skal vi ændre indrykning en lille smule. Hver gang vi har brug for indrykning, skal vi bruge `:` på linjen før indrykningen.

                    På dette niveau kan du også bruge en ny kommando: `{elif}`. `{elif}` er en forkortelse for `{else} {if}` når du vil lave 3 (eller flere!) muligheder.
                    Se en gang!
            18:
                story_text: |-
                    Vi er nået til ægte Python kode! Det betyder at vi er nødt til at bruge parenteser til {print} og {range} fra nu af.
                    {print}('Jeg hedder ', navn)
    dice:
        name: Terninger
        default_save_name: Terninger
        description: Lav din egen terning
        levels:
            3:
                story_text: |
                    På dette niveau kan vi vælge fra en liste. På denne måde kan vi lade computeren vælge en side på en terning.
                    Se på de brætspil du har i skabet derhjemme.
                    Er der spil med en (speciel) terning? Du kan også lave sådan en med denne kode.
                    For eksempel, terningerne til spillet Earthworms med tallene 1 til 5 og en regnorm på.

                    ![Terning fra Earthworms med 1 til 5 og en regnorm på](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    muligheder {is} 1, 2, 3, 4, 5, regnorm
                    {print} muligheder {at} {random}
                    ```
                story_text_2: |
                    ### Opgave
                    Terningerne fra eksemplet ovenfor er terninger til et specifikt spil. Kan du lave en normal terning?
                    Eller en anden speciel terning fra et andet spil?
                example_code_2: |
                    ```
                    muligheder {is} _
                    ```
            4:
                story_text: |
                    På dette niveau kan vi lave sætninger med terningeværdien i en sætning, med anførselstegn selvfølgelig.
                    Denne gang er kodeeksemplet ikke helt færdigt. Kan du færdiggøre den?
            5:
                story_text: |
                    Du kan også lave en terning igen på dette niveau ved at bruge `{if}`.
                    Færdiggør kodeeksemplet så programmet siger "Du kan stoppe med at kaste" når du har slået en regnorm.

                    Men måske du gerne vil genskabe en terning fra et helt andet spil. Det er også helt fint! Så find på din egen reaktion, f.eks. 'jubii' ved en 6'er og 'ærgerligt' ved noget andet.
                example_code: |
                    ```
                    choices {is} 1, 2, 3, 4, 5, earthworm
                    throw {is} _
                    {print} 'you have' _ 'thrown'
                    {if} _ {is} earthworm {print} 'You can stop throwing.' _ {print} 'You have to hear it again!'
                    ```
            6:
                story_text: |
                    You can also make an Earthworm die again in this, but now you can also calculate how many points have been rolled.
                    You may know that the worm counts 5 points for Earthworms. Now after a roll you can immediately calculate how many points you have thrown.
                    This is the code to calculate points for one die:

                    ### Exercise
                    Can you make the code so that you get the total score for 8 dice? To do that, you have to cut and paste some lines of the code.
                example_code: |
                    ```
                    choices = 1, 2, 3, 4, 5, earthworm
                    points = 0
                    throw = choices {at} {random}
                    {print} 'you threw' throw
                    {if} throw {is} earthworm points = points + 5 {else} points = points + throw
                    {print} 'those are' points ' point'
                    ```
                example_code_2: |
                    Did you manage to calculate the score for 8 dice? That required a lot of cutting and pasting, right? We are going to make that easier in level 7!
            7:
                story_text: |
                    You can also make a dice again in level 5. With the `{repeat}` code you can easily roll a whole hand of dice.

                    ### Exercise
                    Try to finish the sample code!  **(extra)** Think of a game you know that involves a dice and program that using a `{repeat}.`
            10:
                story_text: |
                    Is everybody taking too long throwing the dice? In this level you can let Hedy throw all the dice at once!
                    Can you fill in the correct line of code on the blanks?
                example_code: |
                    ```
                    players = Ann, John, Jesse
                    choices = 1, 2, 3, 4, 5, 6
                    _
                        {print} player ' throws ' choices {at} {random}
                        {sleep}
                    ```
    dishes:
        name: Opvask?
        default_save_name: Opvask
        description: Brug computeren til at bestemme hvem der tager opvasken
        levels:
            3:
                story_text: |
                    Er i altid uenige om hvem der skal tage opvasken eller tømme kattebakken derhjemme?
                    Så kan du lade computeren vælge retfærdigt. Du kan programmere det på dette niveau!
                    Først laver du en liste med alle medlemmerne af din familie. Derefter tag fra listen med `{at} {random}`.
                example_code: |
                    ```
                    personer {is} mor, far, Emma, Sophie
                    {print} personer {at} {random}
                    ```
                story_text_2: |
                    Har du ikke lyst til at tage opvasken? Hack programmet ved at fjerne dit navn fra listen med `{remove}` `{from}` kommandoen.
            4:
                story_text: |
                    Med anførselstegn kan du lave din opvaskeplan pænere.
                    Denne gang er eksemplet ikke helt færdig.

                    Kan du færdiggøre koden ved at udfylde de tomme felter? Hvert af de tomme felter skal erstattes med et ord eller symbol.

                    Tip: Glem ikke anførselstegn!
                example_code: |
                    ```
                    personer {is} mor, far, Emma, Sophie
                    {print} _ opvasken tages af _
                    {sleep}
                    {print} personer {at} _
                    ```
            5:
                story_text: |
                    Med `{if}` kan du nu have endnu mere sjov med valg i dit program. Du kan få dit program til at reagere på et valg lavet af computeren.

                    Kan du færdigøre koden så den printer 'ærgerligt' når det er din tur og ellers 'sådan!'?
                    Glem ikke anførselstegn!
                example_code: "```\npersoner {is} mor, far, Emma, Sophie\nopvasker {is} personer {at} {random}\n{if} opvasker {is} Sophie {print} _ ærgerligt jeg skal tage opvasken _ \n{else} {print} 'heldigvis ingen opvask for ' _ ' er allerede i gang'\n```\n"
            6:
                story_text: |
                    Hvor ofte skal alle tage opvasken? Er det retfærdigt? Du kan tælle det på dette niveau.
                example_code: |
                    ```
                    personer = mor, far, Emma, Sophie
                    emma_tager_den = 0
                    opvasker = personer {at} {random}
                    {print} 'Opvaskeren er ' opvasker
                    {if} opvasker {is} Emma emma_tager_den = emma_tager_den + 1
                    {print} 'Emma tager opvasken ' emma_tager_den ' gange denne uge'
                    ```

                    Du kan nu kopiere linje 3 til 5 nogle gange (e.g. 7 gange for en hel uge) for at beregne en hel uge igen.
                    Laver du koden for hele ugen?
                story_text_2: |
                    Hvis du er ekstremt uheldig vil det forrige program måske vælge dig til at tage opvasken hele ugen! Det er ikke retfærdigt!
                    For at lave et mere retfærdigt system can du bruge `{remove}` kommandoen til at fjerne den valgte person fra listen. På den måde skal du ikke tage opvasken igen før alle har taget deres tur.

                    Mandag og tirsdag er klar til dig! Kan du tilføje resten af ugen?
                    Og... kan du finde på en løsning til når listen er tom?
                example_code_2: |
                    ```
                    personer = mor, far, Emma, Sophie
                    opvasker = personer {at} {random}
                    {print} 'Mandag tages opvasken af: ' opvasker
                    {remove} opvasker {from} personer
                    opvasker = personer {at} {random}
                    {print} 'Tirsdag tages opvasken af: ' opvasker
                    {remove} opvasker {from} personer
                    opvasker = personer {at} {random}
                    ```
            7:
                story_text: |
                    Med `{repeat}` kan du gentage stykker af kode. Du kan bruge dette til at beregne hvem der skal tage opvasken i flere dage!
                    ### Opgave
                    Brug `{repeat}` kommandoen til at beslutte hvem der skal tage opvasken en hel uge. Hver blanke felt skal udskiftes med en kommando eller et tal!
                    **(ekstra)** Kan du finde på flere opgaver i huset? Ret koden så den beslutter hvem der klarer tre husholdningsopgaver. Glem ikke at printe hvilken opgave det handler om!
                example_code: |
                    ```
                    personer = mor, far, Emma, Sophie
                    {repeat} _ _ {print} 'Opvasken tages af ' _ _ _
                    ```
            10:
                story_text: |
                    På dette niveau kan du lave et endnu bedre opvaske skema.
                example_code: |
                    ```
                    dage = mandag, tirsdag, onsdag, torsdag, fredag, lørdag, søndag
                    navne = mor, far, Emma, Sophie
                    _ dag _ dage
                        {print} navne {at} {random} ' tager opvasken på ' day
                    ```
    elif_command:
        description: elif
        levels:
            17:
                example_code: |
                    ```
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
                    ```
    for_command:
        description: for command
    fortune:
        levels:
            1:
                example_code: |
                    ```
                    {print} Hello, I'm Hedy the fortune teller!
                    {ask} Who are you?
                    {print} Let me take a look in my crystal ball
                    {print} I see... I see...
                    {echo} Your name is
                    ```
                story_text_2: |
                    ### Exercise
                    Hedy now only tells you your name. Can you expand the code so that Hedy can predict more things about you?
                    Obviously, Hedy isn't a very good fortune teller yet, as she can only repeat the answers that were given by the players!
                    Take a look in level 2 to improve your fortune teller.
            5:
                story_text: |
                    In this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!
                    By using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.
                    Check out this example to find out how.
                example_code: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    {print} 'I can predict if youll win the lottery tomorrow!'
                    person {is} {ask} 'Who are you?'
                    {if} person {is} Hedy {print} 'You will definitely win!🤩' {else} {print} 'Bad luck! Someone else will win!😭'
                    ```
            6:
                example_code: |
                    ```
                    {print} 'I am Hedy the fortune teller!'
                    {print} 'I can predict how many kids youll get when you grow up!'
                    age = {ask} 'How old are you?'
                    siblings = {ask} 'How many siblings do you have?'
                    length = {ask} 'How tall are you in centimetres?'
                    kids = length / age
                    kids = kids - siblings
                    {print} 'You will get ...'
                    {sleep}
                    {print} kids ' kids!'
                    ```

                    If the previous example wasn't silly enough for you, take a look at this one!
                    ```
                    {print} 'Im Hedy the silly fortune teller!'
                    {print} 'I will predict how smart you are!'
                    football = {ask} 'On a scale 1-10 how much do you love football?'
                    bananas = {ask} 'How many bananas did you eat this week?'
                    hygiene = {ask} 'How many times did you wash your hands today?'
                    result = bananas + hygiene
                    result = result * football
                    {print} 'You are ' result ' percent smart.'
                    ```
            7:
                story_text: |
                    In this level you can use the `{repeat}` command to make your machine tell multiple fortunes at once.
                example_code: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    {print} 'You can ask 3 questions!'
                    {repeat} 3 {times} question = {ask} 'What do you want to know?'
                    answer = yes, no, maybe
                    {repeat} 3 {times} {print} 'My crystal ball says... ' answer {at} {random}
                    ```
            8:
                story_text: |
                    In the previous levels you've learned how to use `{repeat}` to make the fortune teller answer 3 questions in a row, but we had a problem with printing the questions.
                    Now that problem is solved, because of the new way of using the `{repeat}` command.
                    In the next example you can have your fortune teller ask 3 questions and also print them!

                    ### Exercise
                    Can you fill in the `{repeat}` command correctly on the blanks?
                example_code: |
                    ```
                    {print} 'I am Hedy the fortune teller!'
                    {print} 'You can ask me 3 questions.'
                    answers = yes, no, maybe
                    _ _ _
                       question = {ask} 'What do you want to know?'
                       {print} question
                       {sleep}
                       {print} 'My crystal ball says...' answers {at} {random}
                    ```
            10:
                story_text: |
                    In this level you'll learn how to program the game MASH (mansion, apartement, shack, house). In this game you can predict for all the players at once, what their future will look like.
                example_code: |
                    ```
                    houses = mansion, apartment, shack, house
                    loves = nobody, a royal, their neighbour, their true love
                    pets = dog, cat, elephant
                    names = Jenna, Ryan, Jim
                    {for} name {in} names
                        {print} name ' lives in a ' houses {at} {random}
                        {print} name ' will marry ' loves {at} {random}
                        {print} name ' will get a ' pets {at} {random} ' as their pet.'
                        {sleep}
                    ```
            12:
                example_code: |
                    ```
                    fortunes = 'you will slip on a banana peel', _
                    {print} 'I will take a look in my crystall ball for your future.'
                    {print} 'I see... I see...'
                    {sleep}
                    {print} fortunes {at} {random}
                    ```
    functions:
        name: funktioner
        default_save_name: funktioner
        description: funktioner
        levels:
            12:
                example_code: |
                    ```
                    sides = 'left', 'right'
                    limbs = 'hand', 'foot'
                    colors = 'red', 'blue', 'green', 'yellow'

                    {define} turn
                        chosen_side = sides {at} {random}
                        chosen_limb = limbs _
                        chosen_color = colors _
                        {print} chosen_side ' ' chosen_limb ' on ' chosen_color

                    {print} 'Lets play a game of Twister!'
                    {for} i {in} {range} 1 to _
                        {call} turn
                        {sleep} 2
                    ```
            14:
                example_code: |
                    ```
                    {define} calculate_new_price {with} amount, percentage
                        percentage = percentage / 100
                        discount_amount = amount * percentage
                        return amount - discount_amount

                    old_price = {ask} 'How much is on the price tag?'
                    discount = {ask} 'What percentage is the discount?'

                    new_price = _ calculate_new_price {with} old_price, _
                    {print} 'The new price is ' new_price ' dollar'
                    ```
    haunted:
        levels:
            2:
                example_code: |
                    ```
                    monster_1 {is} 👻
                    monster_2 {is} 🤡
                    monster_3 {is} 👶
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
                example_code_2: |
                    ```
                    monster_1 {is} _
                    monster_2 {is} _
                    monster_3 {is} _
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
            3:
                story_text: |
                    In the previous levels you've made an introduction to your haunted house game, but as you might have noticed the story would always have a dreadful end.
                    In this level you can make your story more interactive by changing the outcome of the game; sometimes you'll get eaten, sometimes you'll escape!
                    Let Hedy decide randomly!
            4:
                example_code: |
                    ```
                    {print} _ Escape from the haunted house! _
                    {print} _ There are 3 doors in front of you... _
                    choice {is} {ask} _ Which door do you choose? _
                    {print} _ You picked door ... _ choice
                    monsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED
                    {print} _ You see... _
                    {sleep}
                    {print} monsters {at} {random}
                     ```
            11:
                story_text: |
                    In this level we've changed the repeat command and we've added a line to our haunted house that tells the player in which room they are.

                    ### Exercise
                    Finish the program with the correct line of code. Mind: There are 3 rooms that the player needs to survive before they win!
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player {is} alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    _
                        {if} player {is} alive
                            correct_door = doors {at} {random}
                            {print} 'Room ' i
                            {print} 'There are 3 doors in front of you...'
                            chosendoor = {ask} 'Which door do you choose?'
                            {if} chosendoor {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
    if_command:
        description: Introducing the if command
        levels:
            9:
                story_text: |
                    In this level you can also put an {if} command inside another {if} command.
    in_command:
        description: Introducing the in command
        levels:
            5:
                example_code_2: |
                    ```
                    animals is dog, cow, sheep
                    answer is ask 'What is your favorite animal?'
                    _ answer _ animals _ 'Mine too!'
                    _ _ 'My favorite animals are dogs, cows and sheep'
                    ```
    is_command:
        description: introducing is command
        levels:
            2:
                example_code_2: |
                    ```
                    yndlingsdyr {is} _
                    {print} Jeg kan godt lide yndlingsdyr
                    ```
            6:
                example_code: |
                    ```
                    navn = Hedy
                    svar = 20 + 4
                    ```
            14:
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
                    ```

                    {if} age < 13
                        {print} 'You are younger than me!'
                    {else}
                        {print} 'You are older than me!'
    maths:
        levels:
            6:
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 minus 5 is ' 5 - 5
                    {print} '5 times 5 is ' 5 * 5
                    ```
            12:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```

                    {print} 2.5 + 2.5
    parrot:
        levels:
            2:
                story_text: |
                    Create your own online pet parrot that will copy you!
                example_code: |
                    ```
                    {print} Im Hedy the parrot
                    name {is} {ask} whats your name?
                    {print} name
                    {sleep}
                    {print} squawk
                    {sleep}
                    {print} name
                    ```
                story_text_2: |
                    ### Exercise
                    You can use variables to make the parrot say more than only your name. Can you complete this code?
            3:
                story_text: |
                    Teach your parrot a new word with `{add}`.
                    ### Exercise
                    How can you make your parrot say multiple words?
                example_code: |
                    ```
                    words {is} squawk, Hedy
                    {print} Train your parrot!
                    new_word {is} {ask} Which word do you want to teach them?
                    {add} new_word {to_list} words
                    {print} 🧒 Say new_word, Hedy!
                    {print} 🦜 words {at} {random}
                    ```
    piggybank:
        levels:
            12:
                story_text: |
                    In this adventure you learn how to make a digital piggy bank.
                    Finish the code to calculate how much money you have and how long you need to save up to buy what you want!
    pressit:
        levels:
            9:
                story_text: |
                    Now that you know how to combine statements, you can create a touch type tool with `{pressed}`.

                    ### Exercise
                    Finish the code. Each time a random letter should be chosen, which you have to press. You get a point for a correct press, and and two points deduction for a wrong press.
                    **(extra)** Clear the screen after each letter, and show the user how many points they have scored.
    print_command:
        default_save_name: skriv
        levels:
            18:
                example_code_2: |
                    ```
                    temperature = 25
                    {print}('It is ', temperature, ' degrees outside')
                    ```

                    {print}('My name is ', name)
    repeat_command:
        description: repeat command
        levels:
            7:
                story_text: |
                    ## Repeat! Repeat! Repeat!
                    Level 7 adds the `{repeat}` command.  `{repeat}` can be used to execute one line of code multiple times. Like this:

                    ### Exercise
                    Play around with the repeat command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?
            9:
                story_text: |
                    Great job! You've reached another new level! In the previous level you've learned to use multiple lines of code in an {if} or {repeat} command. But you can't yet combine the two...
                    Good news! In this level you will be allowed to put an {if} inside an {if}, or inside a {repeat} command. Putting a block of code inside another block of code is called nesting.                     ``` Putting a block of code inside another block of code is called nesting.
                example_code: |
                    ```
                    answer = {ask} 'Are you ready to learn something new?'
                    {if} answer {is} yes
                        {print} 'Great! You can learn to use the repeat command in the if command!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                    {else}
                        {print} 'Maybe you should practice some more in the previous level'
    repeat_command_2:
        description: repeat command 2
        levels:
            7:
                story_text_2: |
                    Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.
                    Then, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.
    restaurant:
        levels:
            3:
                example_code: |
                    ```
                    {print} Welcome to Hedy's Random Restaurant!
                    {print} The only restaurant that will randomly choose your meal and its price for you!
                    starters {is} salad, soup, carpaccio
                    mains {is} pizza, brussels sprouts, spaghetti
                    desserts {is} brownies, ice cream, french cheeses
                    drinks {is} cola, beer, water
                    prices {is} 1 dollar, 10 dollars, 100 dollars
                    {print} You will start with: starters {at} {random}
                    {print} Then we'll serve: mains {at} {random}
                    {print} And as dessert: desserts {at} {random}
                    {print} You will get a drinks {at} {random} to drink
                    {print} That will be: prices {at} {random}
                    {print} Thank you and enjoy your meal!
                    ```
                example_code_2: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    allergies {is} {ask} Are you allergic to any falvors?
                    _
                    {print} You get a flavors {at} {random} milkshake
                    ```
            4:
                story_text: |
                    ### Exercise
                    Add the quotation marks to this code to make it work! Be careful: variables should not be in quotation marks.
            5:
                story_text: |
                    In this level the `{if}` command allows you to `{ask}` your customers questions and give different responses to the answers.
                    In the example below, you see that you can `{ask}` the customer `{if}` they want to hear the specials and Hedy can respond accordingly.
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    special {is} {ask} 'Would you like to hear our specials today?'
                    {if} special {is} yes {print} 'Todays special is chicken piri piri and rice.' {else} {print} 'No problem.'
                    food {is} {ask} 'What would you like to eat?'
                    {print} 'One ' food ', coming right up!'
                    drink {is} {ask} 'What would you like to drink with that?'
                    {if} drink {is} cola {print} 'Im sorry, we are out of cola!' {else} {print} 'Great choice!'
                    anything {is} {ask} 'Would you like anything {else}?'
                    {print} 'Let me repeat your order...'
                    {print} 'One ' food
                    {if} drink {is} cola {print} 'and...' {else} {print} 'One ' drink
                    {if} anything {is} no {print} 'Thats it!' {else} {print} 'One ' anything
                    {print} 'Thank you for your order and enjoy your meal!'
                    ```
            6:
                story_text: |
                    In this level you can use maths to calculate the total price of your customer's order, which can make your virtual restaurant more realistic.
            7:
                story_text: |
                    In this level you've learned how to use the `{repeat}` command to repeat a line of code a certain amount of times.
                    You can use that in your restaurant to `{ask}` multiple people what they'd like to eat.

                    ### Exercise
                    Can you complete the code? Hedy needs to repeat this question as many times as there are people. So if there are 5 people, the question needs to be asked 5 times.
                    **(extra)** Expand your code with more questions, for example about drinks or sauce.
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people are joining us today?'
                    ```
            9:
                story_text: |
                    In this level you can use nesting to make your restaurant more realistic and more fun!
                    For example you would ask for sauce if somebody orders fries, but you wouldn't if someone orders pizza!

                    ### Exercise
                    This is a challenge for the real brainiacs! Each line that needs indentation has been given a blank.
                    Can you figure out how much indentation each line needs in order for the code to work propperly?
                    Good luck!
                    TIP: If the customer orders pizza, Hedy shouldn't ask what sauce the costumer wants.
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people will be joining us today?'
                    {print} 'Great!'
                    price = 0
                    {repeat} people {times}
                    _ food = {ask} 'What would you like to order?'
                    _ {print} food
                    _ {if} food {is} fries
                    _ price = price + 3
                    _ sauce = {ask} 'What kind of sauce would you like with your fries?'
                    _ {if} sauce {is} no
                    _ {print} 'no sauce'
                    _ {else}
                    _ price = price + 1
                    _ {print} 'with ' sauce
                    _ {if} food {is} pizza
                    _ price = price + 4
                    {print} 'That will be ' price ' dollar'
                    {print} 'Enjoy your meal!'
                    ```
            10:
                example_code: |
                    ```
                    courses = appetizer, main course, dessert
                    {for} course {in} courses
                        food = {ask} 'What would you like to eat as your ' course '?'
                        {print} food ' will be your ' course
                    ```
                example_code_2: |
                    ```
                    _ courses = appetizer, main course, dessert
                    _ names = Timon, Onno
                    _ {for} name {in} names
                    _ {for} course {in} courses
                    _ food = {ask} name ', what would you like to eat as your ' course '?'
                    _ {print} name ' orders ' food ' as their ' course
                    ```
            11:
                story_text: |
                    We can use the `{for} i {in} {range} 1 {to} 5` to `{print}` the orders from multiple customers in an orderly manner.

                    ### Exercise
                    Can you handle another indentation challenge? Get the code to work properly by adding the right amount of indentation before each line!
                example_code: |
                    ```
                    {print} 'Welcome to Restaurant Hedy!'
                    people = {ask} 'For how many people would you like to order?'
                    {for} i {in} {range} 1 {to} people
                    _ {print} 'Order number ' i
                    _ food = {ask} 'What would you like to eat?'
                    _ {print} food
                    _ {if} food {is} fries
                    _ sauce = {ask} 'What kind of sauce would you like with that?'
                    _ {print} sauce
                    _ drinks = {ask} 'What would you like to drink?'
                    _ {print} drinks
                    price = 4 * people
                    {print} 'That will be ' price ' dollars, please!'
                    ```
            12:
                story_text: |
                    From this level on you can use decimal numbers to make you menu more realistic.

                    ### Exercise
                    Can you think of a code to give your friends and family a 15% discount?
                example_code: |
                    ```
                    price = 0
                    food = {ask} 'What would you like to order?'
                    drink = {ask} 'What would you like to drink?'
                    {if} food {is} 'hamburger'
                        price = price + 6.50
                    {if} food {is} 'pizza'
                        price = price + 5.75
                    {if} drink {is} 'water'
                        price = price + 1.20
                    {if} drink {is} 'soda'
                        price = price + 2.35
                    {print} 'That will be ' price ' dollar, please'
                    ```
            13:
                example_code: |
                    ```
                    price = 10
                    food = {ask} 'What would you like to eat?'
                    drinks = {ask} 'What would you like to drink?'
                    {if} food {is} 'sandwich' {and} drinks {is} 'juice'
                        {print} 'Thats our discount menu'
                        price = price - 3
                    {print} 'That will be ' price ' dollars'
                    ```
    rock:
        default_save_name: Rock
        levels:
            2:
                example_code: |
                    ```
                    _ {is} {ask} rock, paper, or scissors?
                    {print} I choose _
                    ```
            3:
                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} choices {at} {random}
                    ```
                story_text_2: |
                    ### Exercise
                    Now you only have one player, so can you add a second player?
                    You can even use variables to name player 1 and player 2.
                example_code_2: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} player 1 chooses... choices {at} {random}
                    {print} player 2 _
                    ```
            5:
                story_text: |
                    In this level we can determine who won.
                    For that you need the new `{if}` code.

                    Save your choice with the name of choice and the choice of computer as computer choice.
                    Then you can use `{if}` to see if they are the same or different.
                    Will you finish the code?
                example_code: |
                    ```
                    options {is} rock, paper, scissors
                    computer_choice {is} _
                    choice {is} {ask} 'What do you choose?'
                    {print} 'you chose ' _
                    {print} 'computer chose ' _
                    {if} _ {is} _ {print} 'tie!' {else} {print} 'no tie'
                    ```

                    Fill in the correct code on the blanks to see {if} it is a draw.
            9:
                story_text: |
                    In this level you can program the whole rock, paper, scissors game by nesting the `{if}` commands. Can you finish the code?
            10:
                story_text: |
                    Feeling too lazy to play the game yourself? Let Hedy play it for you!
                    You only have to fill in the names of the players.
                example_code: |
                    ```
                    choices = rock, paper, scissors
                    players = _
                    {for} player {in} players
                         {print} player ' chooses ' choices {at} {random}
                    ```
    rock_2:
        levels:
            2:
                story_text: |
                    Now that you have learned how to use the `{ask} command, you can make your rock, paper, scissors code interavtive too!

                    ### Exercise
                    Make the rock, paper, scissors code interactive by adding the `{ask}` command and a question to your rock, paper, scissors code.
                example_code: |
                    ```
                    choice is _
                    {print} I choose choice
                    ```
    secret:
        levels:
            12:
                example_code: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name {is} '_'
                        a = 'Go to the airport '
                    {else}
                        a = 'Go to the trainstation '
                    password = {ask} 'What is the password?'
                    {if} password {is} _
                        b = 'tomorrow at 02.00'
                    {else}
                        b = 'today at 10.00'
                    {print} _ _ _
                    ```
            13:
                story_text: |
                    Can you fill in the right command on the blank? Mind: The superspy has to answer BOTH questions correctly, before they get the confidential information!
    sleep_command:
        description: introducing sleep command
        levels:
            2:
                story_text: |
                    ## The sleep command
                    Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.
    songs:
        levels:
            8:
                example_code: |
                    ```
                    verse = 99
                    _ _ _
                        {print} verse ' bottles of beer on the wall'
                        {print} verse ' bottles of beer'
                        {print} 'Take one down, pass it around'
                        verse = verse - 1
                        {print} verse ' bottles of beer on the wall'
                    ```
            10:
                story_text_2: |
                    ### Exercise 2
                    Print the song Five little moneys jumping on the bed. Look up the text if you don't remember.

                    **(extra)** Print the song Old MacDonald had a farm, and make sure all animals make a different sound, using an `{if}`.
            16:
                example_code: "```\nalle_dyr = ['gris', 'hund', 'ko']\nlyde = ['øh', 'vuf', 'muh']\n{for} i {in} {range} 1 {to} 3\n    dyr = alle_dyr[i]\n    lyd = lyde[i]\n    {print} 'Jens Hansen havde en bondegård'\n    {print} 'ih ah ih ah oh!'\n    {print} 'og på den gård der var en ' dyr\n    {print} 'ih ah ih ah oh!'\n    {print} 'Der var ' lyd lyd' her'\n    {print} 'og ' lyd lyd' der'\n    {print} lyde ' her'\n    {print} lyde ' der'\n    {print} 'alle steder ' lyde lyde\n```\n\n```\nlinjer = ['Hvad skal vi gøre med den fulde sømand', 'Smid ham i brummen til han vågner', 'Han skal klynges op i masten']\n{for} linje {in} linjer\n    {for} i {in} {range} 1 {to} 3\n        {print} linje \n    {print} 'Tidligt om morgnen.'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'Hu hej, se hun sejler'\n    {print} 'Tidligt om morgnen.'\n```\n"
    songs_2:
        levels:
            12:
                example_code: |
                    ```
                    {define} twinkle
                        {print} 'Twinkle'
                        {print} '...'

                    {call} twinkle
                    {print} 'Up above the world so high'
                    {print} 'Like a diamond in the sky'
                    {call} _
                    ```
    tic:
        name: Kryds og Bolle
    tic_2:
        name: Kryds og Bolle 2
        default_save_name: KrydsBolle
    tic_3:
        name: Kryds og Bolle 3
        default_save_name: KrydsBolle
    turtle:
        name: Skildpadde
        default_save_name: Skildpadde
        description: Lav din egen tegning
        levels:
            1:
                story_text: |
                    Du kan også bruge Hedy til at tegne. Ved at kombinere hjørner og streger, kan du lave et kvadrat eller trapper!

                    Ved at bruge `{forward}` tegner du en streg fremad. Tallet bagefter bestemmer hvor langt skildpadden vil gå. `{turn} {right}` drejer en kvart omgang med uret, `{turn} {left}` drejer mod uret.

                    Hvis du vil baglæns, bruger du `{forward}` kommandoen sammen med et negativt tal. For eksempel `{forward} -100`
                story_text_2: |
                    ### Opgave
                    Dette er starten på en lille trappe. Kan du lave den med 5 trin?
            2:
                story_text: |
                    På dette niveau kan du bruge variabler. For eksempel kan du spørge hvor mange skridt skildpadden skal tage.
                example_code: |
                    ```
                    svar {is} {ask} Hvor mange skridt skal skildpadden tage?
                    {forward} svar
                    ```
                story_text_2: |
                    På niveau 1 kunne skildpadden også kun dreje til højre eller venstre. Det er en smule kedeligt!
                    På niveau 2 kan den se i alle retninger.

                    Brug 90 til at dreje en kvart omgang. Det kalder vi grader. En hel omgang er 360 grader.

                    ### Opgave
                    Kan du lave en figur med denne kode? Måske en trekant eller cirkel?
                example_code_2: |
                    ```
                    {print} Tegner figurer
                    vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    ```
            3:
                story_text: |
                    På dette niveau kan du bruge `{at} {random}` med tegneskildpadden. Et tilfældigt valg får skildpadden til at gå en ny vej hver gang.
                    Brug `{at} {random}` for at vælge et element fra en liste.
                    ### Opgave
                    Kan du lave den tilfældige sti længere ved at copy-paste linje 2 og 3?
                example_code: |
                    ```
                    vinkler {is} 10, 50, 90, 150, 250
                    {turn} vinkler {at} {random}
                    {forward} 25
                    ```
            4:
                story_text: |
                    På niveau 4 skal du bruge anførselstegn sammen med `{print}` og `{ask}`. Også når du tegner!
                example_code: |
                    ```
                    {print} _ Tegner figurer _
                    vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    ```
                story_text_2: |
                    Du kan også skifte farve på stregerne med kommandoen `{color}`. Se eksemplet.
                    Du kan også bruge kommandoen `{color} {white}` til at lave 'usynlige' streger. Du kan bruge de hvide streger til at flytte skildpadden hvor som helst på skærmen før du begynder at tegne.
            5:
                story_text: |
                    På niveau 5 kan du lave et valg med `{if}`. For eksempel mellem forskellige typer figurer.
                example_code: |
                    ```
                    {print} 'Tegner figurer'
                    figur {is} {ask} 'Vil du have en firkant eller en trekant?'
                    {if} figur {is} trekant vinkel {is} 120
                    {else} vinkel {is} 90
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    {turn} vinkel
                    {forward} 25
                    ```
                example_code_2: |
                    ```
                    direction {is} {ask} 'Do you want to go left, right, or straight ahead?'
                    if direction is left turn _
                    if direction is right turn _
                    forward 100
                    ```
            6:
                story_text: |
                    På dette niveau kan du bruge beregninger til at tegne forskellige figurer.
                    Du kan måske lært i skolen at dreje en hel omgang er 360 grader. Hvis ikke, ved du det nu!
                    Det er også derfor du bruger 90 grader til en firkant. 360 divideret med 4 er 90.
                    Nu hvor vi kan lave matematik med Hedy kan vi tegne alle de figurer vi ønsker!
                example_code: |
                    ```
                    hjørner = {ask} 'Hvor mange hjørne kunne du tænke dig?'
                    vinkel = 360 / hjørner
                    {forward} 50
                    {turn} vinkel
                    {forward} 50
                    {turn} vinkel
                    {forward} 50
                    {turn} vinkel
                    {forward} 50
                    {turn} vinkel
                    {forward} 50
                    {turn} vinkel
                    {forward} 50
                    {turn} vinkel
                    ```
            8:
                story_text: "Nu hvor vi kan gentage flere streger, kan vi lave lettere lave figurer.\nVi skal kun sætte vinklen en gang og så bruge den variabel i `{repeat}` kommandoen.\n\n### Opgave 1\nKoden i eksemplet skaber et kvadrat. Ændrer koden så den skaber en anden figur, så som en trekant eller sekskant. \n Dette kræver at du ændrer to linjer i koden.\nTip: En hel omgang er 360 grader.\n\n### Opgave 2\nLav nu en tegning der består af mindst på polygoner.\n"
                example_code: |
                    ```
                    vinkel = 90
                    {repeat} 4 {times}
                        {turn} vinkel
                        {forward} 50
                    ```
                story_text_2: |
                    Vi kan nu forbedre programmet der tegner forskellige figurer
                    Kan du regne ud hvor meget skildpadden skal dreje til højre her? Færdiggør koden og du kan tegne hvilken som helst polygon du kunne tænke dig!
                example_code_2: |
                    ```
                    kanter = {ask} 'Hvor mange kanter skal jeg tegne?'
                    vinkel = 360 / kanter
                    {repeat} kanter {times}
                        {turn} _
                        {forward} _
                    ```
            9:
                story_text: |
                    Nu hvor vi kan bruge `{repeat}` inden i en `{repeat}`, kan vi lave mere komplekse figurer.

                    ### Opgave 1
                    Denne kode skaber tre sorte trekanter og fem lyserøde firkanter.

                     **(ekstra)** Lav en figur du selv vælger bestående af mindst to forskellige former.
    turtle_draw_it:
        levels:
            10:
                example_code: |
                    Hint Nested Hexagon:
                    ```
                    distances = 100, 80, 60, 40, 20
                    {for} distance {in} distances
                    _
                    ```

                    Hint Traffic Lights:
                    ```
                    colors = red, yellow, green
                    {for} chosen_color {in} colors
                        color _
                        {repeat} _
                    ```
            12:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!
                    Hint: Bracelet designing program. Firstly, define a function **for each shape** you want to use on the bacelet. Then, add the shapes to the bacelet like this:
                    </div>
                    Bracelet Designing program <img src="https://github.com/hedyorg/hedy/assets/80678586/549d7f3a-c492-4b4a-b173-746eb3400951" width="500">
                example_code: |
                    ```
                    {define} draw_a_square
                    _

                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 180

                    {for} i {in} {range} 1 {to} 5
                        {color} gray
                        {forward} 100
                        shape = {ask} 'What kind of shape would you like next on the bracelet?'
                        chosen_color = {ask} 'In which color?'
                        {color} chosen_color
                        {if} shape = 'square'
                            {call} draw_a_square
                    ```
    while_command:
        description: while
    years:
        description: Countdown to the new year!
        levels:
            11:
                example_code: |
                    ```
                    {for} _ {in} _ 10 {to} 1
                        {print} i
                    {print} 'Happy New Year!'
                    ```
