adventures:
    default:
        name: "Introdução"
        description: "Explicação do nível"
        default_save_name: "intro"
        levels:
            1:
                story_text: |
                    No Nível 1 você pode usar os comandos `{print}`, `{ask}` e `{echo}`.
                    Digite seu código no campo de programação. Ou pressione o botão verde no bloco de código de exemplo, e o código será digitado para você!
                    Experimente o código você mesmo com o botão verde 'Executar código' abaixo do campo de programação.

                    Você pode imprimir texto na tela usando o comando `{print}`.     
                start_code: "{print} olá mundo!"
            2:
                story_text: |
                    No nível 2 aprendemos dois novos comandos: `{is}` e `{sleep}`.
                    Você pode nomear uma palavra com `{is}`. Isso é chamado de variável. Neste exemplo, criamos uma variável chamada nome e uma variável chamada idade. Você pode usar a palavra nome em qualquer lugar do seu código e ela será substituída pela Hedy, assim:

                    Desta forma você não precisa mais do comando `{echo}`!
                start_code: "{print} olá mundo!"
                example_code: "```\nnome {is} Hedy\nidade {is} 15\n{print} nome tem idade anos\n```\n"
                story_text_2: "`{print}` ainda funciona da mesma forma, mas o comando `{ask}` mudou. Você precisa usar uma variável no comando `{ask}` também. Se parece com isso:\n"
            3:
                story_text: |
                    No nível 3 você pode fazer uma lista. Você pode deixar o computador escolher algo aleatório da lista. Você faz isso com `{at} {random}`.
                start_code: "{print} olá mundo!"
            4:
                start_code: "{print} 'Olá mundo'"
                story_text: |
                    No nível 4, `{ask}` e `{print}` foram alterados.

                    Você deve colocar o texto que deseja imprimir entre aspas simples.

                    Isso é útil, porque agora você pode imprimir todas as palavras que quiser. E também as palavras que você usou para armazenar algo com `{is}`.

                    A maioria das linguagens de programação também usa aspas simples ao imprimir, então também estamos nos aproximando da programação real!
                example_code: "```\n{print} 'Você precisa usar aspas de agora em diante!'\nresposta {is} {ask} 'O que precisamos usar de agora em diante?'\n{print} 'Precisamos usar ' resposta\n```\n"
            5:
                start_code: |-
                    nome {is} {ask} 'qual o seu nome?'
                    {if} nome {is} Hedy {print} 'legal!' {else} {print} 'não tão legal'
                story_text: |
                    No nível 5 há algo novo, o `{if}`! Com o `{if}` você pode escolher entre duas opções diferentes.
                    Este código é imprime legal se você inserir Hedy como um nome e não tão legal se você digitar outra coisa.
                    `{ask}` e `{print}` ainda funcionam como no nível 4.
                example_code: |
                    ```
                    nome {is} {ask} 'qual o seu nome?'
                    {if} nome {is} Hedy {print} 'legal' {else} {print} 'não tão legal'
                    ```
            6:
                start_code: "{print} '5 vezes 5 é ' 5 * 5"
                story_text: |
                    Neste nível você aprende algo novo: agora você também pode calcular.

                    A adição é fácil, você escreve como na matemática: `5 + 5` por exemplo. A subtração também funciona bem, é `5 - 5`.

                    A multiplicação é um pouco diferente, porque não há exatamente este símbolo no seu teclado. Basta pesquisar, realmente não há!
                    É por isso que multiplicamos com o asterisco da parte de cima da tecla 8: `5 * 5`. Leia isso como "5 vezes 5" que vai ajudar você a se lembrar melhor.

                example_code: |
                    ```
                    {print} '5 mais 5 é ' 5 + 5
                    {print} '5 menos 5 é ' 5 - 5
                    {print} '5 vezes 5 é ' 5 * 5
                    ```
            7:
                start_code: "{repeat} 3 {times} {print} 'Hedy é divertida!'"
                story_text: |
                    O nível 7 adiciona o comando `{repeat}`. `{repeat}` pode ser usado para executar uma linha de código várias vezes.
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy é divertida!'
                    ```
            8:
                start_code: |-
                    {repeat} 5 {times}
                        {print} 'Olá pessoal'
                        {print} 'Isso vai ser impresso 5 vezes'
                story_text: |
                    Os comandos `{ask}` e `{print}` ainda funcionam da mesma forma, mas `{if}`, `{else}`, `{pressed}` e `{repeat}` mudaram!
                    Agora você pode executar grupos de códigos em conjunto, mas você terá que *indentar* os mesmos.
                    Isso significa colocar quatro espaços no começo da linha. O mesmo vale para quando você queira criar um bloco só com um linha.
                example_code: |
                    Veja como o comando `{repeat}` funciona agora:
                    ```
                    {repeat} 5 {times}
                        {print} 'Olá pessoal'
                        {print} 'Isso vai ser impresso 5 vezes'
                    ```
                    Veja como os comandos `{if}` e `{else}` funcionam agora:

                    ```
                    nome {is} {ask} 'Qual o seu nome?'
                    {if} nome {is} Hedy
                        {print} 'Bem-vinda Hedy'
                        {print} 'Você pode jogar no seu computador!'
                    {else}
                        {print} 'INVASOR!'
                        {print} 'Você não pode usar esse computador'
                    ```
            9:
                start_code: |-
                    {repeat} 3 {times}
                        comida = {ask} 'O que você deseja?'
                        {if} comida {is} 'pizza'
                            {print} 'excelente!'
                        {else}
                            {print} 'pizza é melhor'
                story_text: |
                    Neste nível você pode não só usar múltiplas linhas com `{if}` e `{repeat}`, mas também juntar os dois!
                    Neste exemplo você encontra um comando `{if}` dentro de um comando `{repeat}`. Também é possível fazer o contrário, e um `{if}`
                    também pode aparecer dentro de outro `{if}` e um `{repeat}` dentro de outro `{repeat}`.
                    Experimente!
                example_code: "```\n{repeat} 3 {times}\n    comida = {ask} 'O que você deseja?'\n    {if} comida {is} 'pizza'\n        {print} 'excelente!'\n    {else}\n        {print} 'pizza é melhor'\n```\n"
            10:
                start_code: |-
                    animais {is} cachorro, gato, peixe
                    {for} animal {in} animais
                      {print} 'Eu adoro ' animal
                story_text: |-
                    Neste nível vamos aprender um novo comando chamado `{for}`. Com `{for}` você pode fazer uma lista e usar todos os elementos.
                    `{for}` cria um bloco, assim como `{repeat}` e `{if}`, de modo que todas as linhas dentro do bloco precisam começar com espaços.
                example_code: "```\nanimais {is} cachorro, gato, peixe\n{for} animal {in} animais\n  {print} 'Eu adoro ' animal\n```\n"
            11:
                start_code: |-
                    {for} contador {in} {range} 1 {to} 5
                        {print} contador
                story_text: "`{print}` continua funcionando da mesma forma, mas adicionamos uma nova forma de `{for}`. Agora você pode escrever `{for} contador {in} {range} 1 {to} 5` e usar `contador` em seu programa.\nExperimente para ver o que acontece! Lembre-se de usar indentações após as instruções `{for}` e `{if}` (isso significa iniciar uma frase com quatro espaços)"
            12:
                start_code: |-
                    {print} 'números decimais agora precisam de um ponto'
                    {print} 2.5 + 2.5
                story_text: |-
                    **Números decimais**
                    Até agora, a Hedy não permitia números decimais como 1,5, mas agora permitimos isso. Observe que os computadores usam o `.` para números decimais.
                example_code: "```\n{print} 'Dois e meio mais dois e meio é...'\n{print} 2.5 + 2.5\n```\n"
            13:
                start_code: |-
                    nome = {ask} 'qual o seu nome?'
                    idade = {ask} 'qual a sua idade?'
                    {if} nome {is} 'Hedy' {and} idade {is} 2
                        {print} 'Você é realmente a Hedy!'
                story_text: "Agora vamos aprender `{and}` e `{or}`! Se você quiser verificar duas declarações, você não precisa usar dois `{if}`s, mas pode usar `{and}` e `{or}`. Se você usar `{and}`, ambas as declarações, à esquerda e à direita de `{and}` precisam ser verdadeiras. Também podemos usar `{or}`. Então, apenas uma afirmação precisa estar correta."
                example_code: "```\nnome = {ask} 'qual o seu nome?'\nidade = {ask} 'qual a sua idade?'\n{if} nome {is} 'Hedy' {and} idade {is} 2\n    {print} 'Você é a verdadeira Hedy!'\n```\n"
            14:
                start_code: |-
                    idade = {ask} 'Quantos anos você tem?'
                    {if} idade < 13
                        {print} 'Você é mais novo(a) do que eu!'
                    {else}
                        {print} 'Você é mais velho(a) do que eu!'
                story_text: "Vamos aprender mais novos itens. Você já deve conhecê-los da matemática, os `<` e `>`.\nO `<` verifica se o primeiro número é menor que o segundo, por exemplo idade `<` 12 verifica se idade é menor que 12.\nSe você quiser verificar se o primeiro número é menor ou igual ao segundo, você pode usar `<=`, por exemplo idade `<=` 11.\nO `>` verifica se o primeiro número é maior que o segundo, por exemplo pontos `>` 10 verifica se pontos é maior que 10.\nSe você quiser verificar se o primeiro número é maior ou igual ao segundo, você pode usar `>=`, por exemplo pontos `>=` 11.\nVocê usa essas comparações em um `{if}`, assim:\n"
                example_code: "```\nidade = {ask} 'Quantos anos você tem?'\n{if} idade > 12\n    {print} 'Você é mais velho(a) do que eu!'\n```\n"
            15:
                start_code: |-
                    resultado = 0
                    {while} resultado != 25
                        resultado = {ask} 'Quanto é 5 vezes 5?'
                    {print} 'Foi dada uma boa resposta'
                story_text: |-
                    Vamos aprender um novo laço, o laço `{while}`! Continuamos a repetição do laço enquanto a afirmação for verdadeira.
                    Portanto, não se esqueça de alterar o valor dentro do laço.

                    No código de exemplo, continuamos até que uma resposta correta seja dada.
                    Se a resposta correta nunca for dada, o laço nunca termina!
                example_code: "```\nresultado = 0\n{while} resultado != 25\n    resultado = {ask} 'Quanto é 5 vezes 5?'\n{print} 'Uma resposta correta foi dada'\n```\n"
            16:
                start_code: |-
                    fruta = ['maçã', 'banana', 'cereja']
                    {print} fruta
                story_text: "Vamos fazer listas do jeito Python, com colchetes ao redor das listas! Também mantemos as aspas simples em torno de cada item, como aprendemos nos níveis anteriores.\nVocê também pode usar os colchetes para indicar um lugar nas listas."
                example_code: "```\namigos = ['Ahmed', 'Ben', 'Cayden']\nnúmeros_da_sorte = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'o número da sorte de ' amigos[i]\n    {print} 'é ' números_da_sorte[i]\n```\n"
            17:
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Preparado(a) ou não, aqui vou eu!'
                story_text: "Agora vamos mudar um pouco a indentação. Toda vez que precisamos de um recuo, precisamos de `:` na linha antes do recuo.\n\nNeste nível você também pode usar um novo comando: `{elif}`. `{elif}` é a abreviação de {else} {if} e você precisa dele quando quiser fazer 3 (ou mais!) opções.\nConfira!"
            18:
                start_code: |-
                    nome = 'Hedy'
                    {print}('Meu nome é ', nome)
                story_text: |-
                    Chegamos ao código Python real! Isso significa que precisamos usar parênteses com {print} e {range} de agora em diante.

    story:
        levels:
            10:
                example_code: "```\nanimais = pássaro vermelho, ovelha negra, sapo verde, pato amarelo, criança pequena\n{print} 'urso marrom'\n{print} 'urso marrom'\n{print} 'O que você vê?'\n{for} animal {in} animais\n     {print} 'Vejo um 'animal' olhando para mim'\n     {print} animal\n     {print} animal\n     {print} 'O que você vê?'\n{print} 'Vejo todos os animais olhando para mim!'\n```\n"
                story_text: "Neste nível você pode usar o comando {for} em sua história. Desta forma, você poderia facilmente programar o livro infantil 'urso pardo, urso pardo, o que você vê'.\n"
                start_code: '# coloque o seu código aqui'
            9:
                story_text: "Neste nível você pode usar o encaixamento para colocar comandos {if}, {repeat} ou {for} dentro de outros comandos {if}, {repeat} ou {for}. Isso oferece muitas opções e realmente ajuda você a tornar sua história interativa.\n"
                example_code: "```\n{print} 'Roberta está andando no centro'\nlocal = {ask} 'Roberta está entrando em uma loja, ou ela vai para casa?'\n{if} local {is} loja\n    {print} 'Ela entra na loja.'\n    {print} 'Roberta vê um livro interessante'\n    compra = {ask} 'A Roberta vai comprar o livro?'\n    {if} compra {is} sim\n        {print} 'Roberta compra o livro e vai para casa'\n    {else}\n        {print} 'Roberta sai da loja e vai para casa'\n{else}\n    {print} 'Roberta vai para casa'\n```\n"
                start_code: '# coloque o seu código aqui'
            3:
                story_text: |
                    No nível 3 você pode tornar sua história mais divertida. Você pode usar aleatoriedade para qualquer monstro, animal ou outro obstáculo, assim:

                example_code: |
                    ```
                    animais {is} 🦔, 🐿, 🦉, 🦇
                    {print} Ouve agora o som de animais {at} {random}
                    ```
                story_text_2: |
                    O comando `{add}` também pode ser útil em sua história.

                example_code_2: |
                    ```
                    {print} Ele ouve um som
                    animais {is} 🐿, 🦔, 🦇, 🦉
                    animal {is} {ask} O que você acha que é?
                    {add} animal {to_list} animais
                    {print} era um animais {at} {random}
                    ```
                story_text_3: |
                    Este é um exemplo do comando `{remove}` em sua história
                example_code_3: |
                    ```
                    {print} A sua mochila ficou muito pesada.
                    {print} Dentro havia uma garrafa de água, uma lanterna e um tijolo.
                    mochila {is} água, lanterna, tijolo
                    lixo {is} {ask} Qual item deve ser descartado?
                    {remove} lixo {from} mochila
                    ```
                start_code: "{print} Sua história"
            1:
                story_text: "No nível 1 você pode fazer uma história com um personagem principal diferente que você mesmo insere.\n\nNa primeira linha, use `{ask}` e pergunte quem será o personagem principal da história.\n\nApós essa primeira linha, comece com `{print}` se a frase precisar ser impressa.\nVocê usa `{echo}` se quiser que seu personagem principal esteja no final da frase.\n"

                example_code: "```\n{ask} O personagem principal desta história é\n{print} O personagem principal agora vai andar pela floresta\n{echo} Ele está um pouco assustado,\n{print} Ele ouve barulhos estranhos em todos os lugares\n{print} Ele tem medo que esta seja uma floresta assombrada\n```\n"
                start_code: '{print} A sua história começa aqui'
                story_text_2: "### Exercise\nCan you make your own story in Hedy now by using `{print}` , `{ask}` and `{echo}`?\n"
            2:
                story_text: "No nível 2 você pode tornar sua história mais divertida. O nome do seu personagem principal agora pode estar em qualquer lugar dentro da frase.\n\nVocê tem que programar um pouco mais para isso. Agora você deve nomear seu personagem principal primeiro.\n\nVocê pode então colocar esse nome em qualquer lugar em uma frase.\n"
                example_code: "```\nnome {is} {ask} Qual é o nome do(a) personagem principal?\n{print} nome agora vai correr na floresta\n{print} nome está um pouco(a) assustado(a)\n{print} De repente ele(a) ouve um barulho estranho...\n{sleep}\n{print} nome está com medo de que esta seja uma floresta assombrada\n```"
                start_code: '{print} Sua história'
                story_text_2: "### Exercise\nNow it's time to add variables to your own story that you've made in the previous level.\nGo to 'My programs', look for your level 1 story adventure and copy the code. Paste the code in your input screen in this level.\n\nThis code won't work in this level, because you have not used variables yet.\nChange the `{ask}` commands and `{echo}` commands in your code to the correct form that you've learned in this level.\n\n**Extra** Add a sleep command to your code to build up tension in your story.\n"
            12:
                story_text: "Neste nível, você pode usar as aspas simples para salvar várias palavras em uma variável."
                example_code: "```\nnome = 'A Rainha da Inglaterra'\n{print} nome 'estava comendo um pedaço de bolo, quando de repente...'\n```\n"
                start_code: '# coloque o seu código aqui'
            8:
                story_text: "Neste nível você pode usar várias linhas em seus comandos {if}, desta forma você pode atualizar seu final feliz ou triste!\n"
                example_code: "```\n{print} 'OH NÃO! O T-rex está se aproximando!'\nfinal = {ask} 'Você quer um final feliz ou triste?'\n{if} final {is} feliz\n     {print} 'Bem a tempo Ricardo volta para a máquina do tempo!'\n     {print} 'Miguel digita o código e...'\n     {print} '💥ZAP!💥'\n     {print} 'Eles estão de volta na garagem'\n{else}\n     {print} 'Miguel grita VENHA RICARDO! CORRA MAIS RÁPIDO!'\n     {print} 'Mas Ricardo é muito lento...'\n     {print} 'O T-rex se aproxima e o devora em uma grande mordida!🦖'\n```\n"
                start_code: '# coloque o seu código aqui'
            7:
                story_text: "Em uma história, alguém diz a mesma palavra várias vezes. Por exemplo, quando alguém pede ajuda ou canta uma música.\nVocê pode colocar tais repetições em sua história neste nível, com `{repeat}`.\n"
                example_code: "```\n{print} 'O príncipe não parava de pedir ajuda'\n{repeat} 5 {times} {print} 'Socorro!'\n{print} 'Por que ninguém está me ajudando?'\n```\n"
                start_code: "{repeat} 5 {times} {print} 'Socorro!'"
            5:
                story_text: "Neste nível você pode programar finais diferentes, o que tornará sua história ainda mais divertida.\n\nPense em dois finais para sua história, por exemplo:\n\n- A princesa está andando pela floresta\n- Ela se depara com um monstro\n\n- Final feliz: ela pega sua espada e o monstro foge rapidamente\n- Final triste: O monstro devora a princesa\n\nVocê também pode garantir que um nome possa ser inserido novamente. Isso funciona exatamente como nos níveis anteriores. Você pode combinar isso com um `{if}`, e então você já fez um programa inteiro!\n"
                example_code: "```\nnome {is} {ask} 'Quem está andando na floresta?'\n{print} nome 'caminha pela floresta'\n{print} nome 'encontra um monstro'\nfinal {is} {ask} 'Você gostaria de um final feliz ou triste?'\n{if} final {is} feliz {print} nome 'pega a espada e o monstro foge rapidamente'\n{else} {print} 'O monstro devora' nome\n```\n"
                start_code: "{print} 'Aqui a sua história vai começar!'"
            4:
                story_text: "Você deve ter notado que ainda há um problema nos níveis anteriores. Você tentou imprimir uma frase que continha a palavra nome?\nVocê pode resolver isso neste nível. Você deve usar aspas simples para tudo que for imprimir.\n"
                example_code: "```\nnome {is} Hans\n{print} 'O nome do personagem principal é' nome\n{print} nome 'agora vai andar na floresta'\n{print} nome 'está um pouco assustado'\nanimais {is} 🦔, 🐿, 🦉, 🦇\n{print} 'Ele ouve o som de' animais {at} {random}\n{print} nome 'tem medo que esta seja uma floresta assombrada'\n```\n"
                start_code: "{print} 'Sua história será impressa aqui!'"
            15:
                story_text: "Usar o laço `{while}` pode tornar suas histórias mais interessantes. Por exemplo, você pode usar `{while} jogo {is} 'ligado'` para poder jogar até que o jogo termine.\nOu você pode usar `{while} espada {is} 'perdida'` para que o jogador não possa continuar o jogo até encontrar algo.\n"
                example_code: "```\nchaves = 'perdidas'\n{print} 'Você está no seu jardim e perdeu suas chaves.'\n{print} 'Onde você quer procurá-las?'\n{print} 'Você pode escolher: árvore, canteiro de flores, pedra, caixa postal'\n{while} chaves == 'perdidas'\n    local = {ask} 'Onde você quer procurar?'\n    {if} local == 'canteiro de flores'\n        {print} 'Aqui estão elas!'\n        chaves = 'encontradas'\n    {else}\n        {print} 'Não, elas não estão no ' local\n{print} 'Agora você pode entrar na casa!'\n```\n"
                start_code: '# coloque o seu código aqui'
            13:
                story_text: "Usando os comandos `{and}` e `{or}`, você pode encurtar suas histórias. Por exemplo, confira a história do dragão.\n"
                example_code: "```\nespada = 'perdida'\njogo = 'ligado'\n{print} 'Nossa heroína está andando pela floresta'\n{print} 'O caminho se divide em dois caminhos'\n{for} i {in} {range} 0 {to} 2\n    {if} jogo {is} 'ligado'\n        caminho = {ask} 'Qual caminho ela deve escolher?'\n        {if} caminho {is} 'esquerda' {and} espada {is} 'encontrada'\n            {print} 'Nossa heroína encontra um dragão!'\n            {print} 'Felizmente nossa heroína tem uma espada para derrotar a fera!'\n            jogo = 'acabou'\n        {if} caminho {is} 'esquerda' {and} espada {is} 'perdida'\n            {print} 'Nossa heroína encontra um dragão, mas ela não tem nenhuma arma!'\n            {print} 'Nossa heroína é derrotado pelo dragão...'\n            {print} 'Tente novamente'\n            jogo = 'acabou'\n        {if} caminho {is} 'direito' {and} espada {is} 'encontrada'\n            {print} 'Você já encontrou a espada. Não há mais nada aqui.'\n            {print} 'Ela volta'\n        {if} caminho {is} 'certo' {and} espada {is} 'perdida'\n            {print} 'Nossa heroína encontra uma espada'\n            {print} 'Isso pode ser muito útil'\n            espada = 'encontrada'\n```\n"
                start_code: '# coloque o seu código aqui'
            18:
                start_code: '# Schrijf jouw code hier'
                story_text: "We are going to print another story, but now we have to use brackets with `{print}`.\n\n### Exercise 1\nCreate a story of at least 5 sentences. You don't have to use 'name' just yet.\n"
                story_text_2: "### Exercise 2\nWe have already prepared an `{input}` for you. First, use the `name` variable in your story.\nThen add a second `{ask}` and use that variable as well.\nTip: Remember the commas in a `{print}` between text and variables!\n"
                example_code: "```\n{print}('Welcome to this story!')\n```\n"
                example_code_2: "```\nnaam = {input}(\"What's your name?\")\n{print}('Welcome to this story!')\n```\n"
        name: História
        description: História
        default_save_name: História
    parrot:
        default_save_name: Papagaio
        levels:
            1:
                story_text: "Crie seu próprio papagaio de estimação online que irá copiar você!\n"
                example_code: "```\n{print} Eu sou Hedy a papagaio\n{ask} qual é o seu nome?\n{echo}\n{echo}\n```\n"
                start_code: '{print} Eu sou Hedy a papagaio'
                story_text_2: "### Exercise\nCan you make the parrot ask a different question? Fill in the blanks in the example!\n"
                example_code_2: "```\n{print} Im Hedy the parrot\n{ask} _\n{echo}\n{echo}\n"
            2:
                story_text: "Crie seu próprio papagaio de estimação online que irá copiar você!\n"
                example_code: "```\n{print} Eu sou Hedy a papagaio\nnome {is} {ask} qual é o seu nome?\n{print} nome\n{sleep}\n{print} grasnar\n{sleep}\n{print} nome\n```\n"
                start_code: '{print} Eu sou Hedy a papagaio!'
                story_text_2: "### Exercise\nYou can use variables to make the parrot say more than only your name. Can you complete this code?\n"
            3:
                story_text: "Ensine ao seu papagaio uma nova palavra com `{add}`.\n"
                example_code: "```\npalavras {is} grasnar, Hedy\n{print} Treine seu papagaio!\nnova_palavra {is} {ask} Qual palavra você quer ensinar a ele?\n{add} nova_palavra {to_list} palavras\n{print} 🧒 Diga nova_palavra , Hedy!\n{print} 🦜 palavras {at} {random}\n```\n"
                start_code: '# coloque o seu código aqui'
            5:
                story_text: "Recompense seu papagaio se ele disser a palavra correta!\n"
                example_code: "```\npalavras {is} grasnar, Hedy\n{print} 'Treine seu papagaio!'\nnova_palavra {is} {ask} 'Qual palavra você quer ensinar a ele?'\n{add} nova_palavra {to_list} palavras\npalavra_dita {is} palavras {at} {random}\n{print} '🧒 Diga ' nova_palavra ', Hedy!'\n{print} '🦜' palavra_dita\n{if} palavra_dita {is} nova_palavra {print} '🧒 Ótimo trabalho, Hedy! 🍪'\n{else} {print} '🧒 Não, Hedy! Diga ' nova_palavra\n```\n"
                start_code: '# coloque o seu código aqui'
            4:
                story_text: "In this level we have to use quotation marks with the commands `{ask}` and `{print}`.\nCan you complete the code by adding quotation marks?\n"
                start_code: '# Write your code here'
                example_code: "```\nwords {is} squawk, Hedy\n{print} _ Train your parrot! _\nnew_word {is} {ask} _ Which word do you want to teach them? _\n{add} new_word {to_list} words\n{print} _ 🧒 Say _ new_word _, Hedy!_\n{print} _ 🦜 _ words {at} {random}\n```\n"
        name: Papagaio
        description: Crie seu próprio papagaio de estimação online que irá copiar você!
    songs:
        levels:
            7:
                example_code: "```\n{repeat} _ _ {print} 'Bebê Tubarão tututudutudu'\n{print} 'Bebê Tubarão'\n```\n\nDepois do Bebê Tubarão, você também pode programar outras músicas. Há muitas músicas com repetição.\n"
                story_text: "As músicas geralmente contêm muita repetição. Por exemplo... Bebê Tubarão! Se você canta, você continua cantando a mesma coisa:\n\nBebê tubarão tututudutudu <br>\nBebê tubarão tututudutudu <br>\nBebê tubarão tututudutudu <br>\nTubarão bebê\n\nVocê pode fazer esta música muito mais curta com um `{repeat}`! Você pode terminar o código?\n"
                start_code: "{print} 'Bebê Tubarão'"
            12:
                story_text: "Nesta música podemos tornar ainda mais fácil programar '{if} você está feliz e sabe disso, bata palmas'. Uma vez que podemos colocar todas as ações em uma variável, confira:\n"
                example_code: "```\nações = 'bater palmas', 'bater os pés', 'gritar Hurra!'\n{for} ação {in} ações\n    {for} i {in} {range} 1 {to} 2\n        {print} 'se você está feliz e sabe disso'\n        {print} ação\n    {print} 'se você está feliz e sabe disso e realmente quer demonstrar'\n    {print} 'se você está feliz e sabe disso'\n    {print} ação\n```\n"
                start_code: '# coloque o seu código aqui'
            11:
                story_text: "Neste nível você pode usar o comando `{for} i {in} {range}` para fazer músicas que usam contagem.\n"
                example_code: "```\n{for} i {in} {range} 5 {to} 1\n    {print} i ' macaquinhos pulando na cama'\n    {print} 'Um caiu e bateu a cabeça'\n    {print} 'Mamãe chamou o médico e o médico disse'\n    {if} i {is} 1\n        {print} 'COLOQUE AQUELES MACACOS LOGO NA CAMA!'\n    {else}\n        {print} 'CHEGA DE MACACOS PULANDO NA CAMA!'\n```\n"
                start_code: '# coloque o seu código aqui'
            10:
                story_text: "Neste nível, você pode facilmente fazer a música infantil 'Cinco macaquinhos'. Você pode fazer o último refrão?\nVocê também pode fazer toda a música do tubarão bebê (incluindo todos os outros tubarões da família) em apenas 6 linhas!\nOu você pode fazer o Velho McDonald com todos os diferentes animais.\n"
                example_code: "```\nmacacos = 5, 4, 3, 2\n{for} macaco {in} macacos\n    {print} macaco 'macaquinhos pulando na cama'\n    {print} 'Um caiu e bateu a cabeça'\n    {print} 'Mamãe chamou o médico e o médico disse'\n    {print} 'SEM MAIS MACACOS PULANDO NA CAMA!'\n```\n\n```\ntubarões = bebê, mamãe, papai, vovó, vovô\n{for} tubarão {in} tubarões\n    {print} tubarão 'tututututudu'\n    {print} tubarão 'tututututudu'\n    {print} tubarão 'tututututudu'\n    {print} tubarão\n```\n```\nanimais = porco, cachorro, vaca\n{for} animal {in} animais\n    {if} animal {is} porco\n        som = oink\n    {if} animal {is} cachorro\n        som = au\n    {if} animal {is} vaca\n        som = mu\n    {print} 'O velho McDonald tinha uma fazenda'\n    {print} 'I A I A O U!'\n    {print} 'e naquela fazenda ele tinha um ' animal\n    {print} 'I A I A O U!'\n    {print} 'com um ' som som ' aqui'\n    {print} 'e um ' som som ' ali'\n    {print} 'aqui um ' som\n    {print} 'lá um' som\n    {print} 'em todos os lugares um ' som som\n```\n"
                start_code: '# coloque o seu código aqui'
                example_code_2: "```\nmonkeys = 5, 4, 3, 2, 1\n```\n"
                story_text_2: "### Exercise 2\nPrint the song Five little moneys jumping on the bed. Look up the text if you don't remember.\n\n**(extra)** Print the song Old MacDonald had a farm, and make sure all animals make a different sound, using an `{if}`.\n"
            8:
                story_text: "Em um nível anterior você programou a música 'Garrafas de cerveja'. Você fez um verso e depois teve que copiar os versos 99 vezes. No nível 7 você pode repetir a música 99 vezes, apenas adicionando uma linha simples!\n"
                example_code: "```\nverso = 99\n{repeat} 99 {times}\n     {print} verso 'garrafas de cerveja na parede'\n     {print} verso 'garrafas de cerveja'\n     {print} 'Pegue uma, passe por aí'\n     verso = verso - 1\n     {print} verso 'garrafas de cerveja na parede'\n```\n"
                start_code: '# coloque o seu código aqui'
            6:
                story_text: "As músicas geralmente contêm muita repetição. Às vezes, a repetição também se baseia na contagem.\nPor exemplo, como na conhecida canção 'Garrafas de cerveja'. Você pode programar essa música com um pouco de matemática.\n"
                example_code: "```\nverso = 99\n{print} verso 'garrafas de cerveja na parede'\n{print} verso 'garrafas de cerveja'\n{print} 'Pegue uma, passe por aí'\nverso = verso - 1\n{print} verso 'garrafas de cerveja na parede'\n```\n\nAgora você pode repetir as linhas 2 a 9 quantas vezes quiser copiando as linhas.\n"
                start_code: "{print} 'Bebê tubarão'"
                story_text_2: "This children's song counts down from 5 little monkeys to 1 monkey.\nIf you copy line 2 - 7 and paste it under the the code, you can sing the whole song!\n"
                example_code_2: "```\nnumber = 6\nnumber = number - 1\nprint number ' little monkeys jumping on the bed'\nprint 'One fell off and bumped his head'\nprint 'Mama called the doctor and the doctor said'\nprint 'NO MORE MONKEYS JUMPING ON THE BED!'\nsleep\n```\n"
            16:
                story_text: "Neste nível, você pode programar uma música como Velho MacDonald ainda mais rapidamente. Você pode conectar o animal certo ao som certo simplesmente colocando-os no mesmo lugar na lista.\nO Marinheiro Bêbado também é feito rapidamente neste nível. Você só precisa de 8 linhas para a música inteira, confira!\n"
                start_code: '# coloque o seu código aqui'
                example_code: "```\nanimais = ['porco', 'cachorro', 'vaca']\nsons = ['oinc', 'au', 'mu']\n{for} i {in} {range} 1 {to} 3\n     animal = animais[i]\n     som = sons[i]\n     {print} 'O velho McDonald tinha uma fazenda'\n     {print} 'I A I A O!'\n     {print} 'e naquela fazenda ele tinha um ' animal\n     {print} 'I A I A O!'\n     {print} 'com um ' som som ' aqui'\n     {print} 'e um ' som som ' ali'\n     {print} 'aqui um ' som\n     {print} 'lá um' som\n     {print} 'em todos os lugares um ' som som\n```\n\n```\nlinhas = ['o que devemos fazer com o marinheiro bêbado', 'raspar sua barriga com uma navalha enferrujada', 'colocá-lo em um longo barco até que ele fique sóbrio']\n{for} linha {in} linhas\n    {for} i {in} {range} 1 {to} 3\n        {print} linha\n    {print} 'no início da manhã'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'e assim se levanta a âncora'\n    {print} 'no início da manhã'\n```\n"
            18:
                start_code: '# Schrijf jouw code hier'
                story_text: "In level 16 we made songs using lists. These programs however are no longer working properly in this level. The colons from level 17 and the brackets from level 18 still need to be added.\n\n### Exercise 1\nThe Drunken sailor song is given as sample code, but not yet working.\nCan you make sure everything works again? To help you, we've put _ in the places of _some_ errors.\n\n### Exercise 2\nNow also look up your Old MacDonald song from level 16, and correct it.\n"
                example_code: "```\nlines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']\n{for} line {in} lines _\n    {for} i {in} {range} 1 {to} 3 _\n        {print} _ line _\n    {print} 'early in the morning'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'way hay and up she rises'\n    {print} 'early in the morning'\n```\n"
        name: Cante uma canção!
        description: Imprima uma canção
        default_save_name: Canção
    turtle:
        levels:
            1:
                story_text: "Você também pode usar Hedy para desenhar. Ao combinar giros e linhas, você pode fazer um quadrado ou uma escada!\n\nUsando `{forward}` você desenha uma linha para frente. O número depois dele determina o quão longe a tartaruga vai andar. `{turn} {right}` gira um quarto de volta no sentido horário, `{turn} {left}` gira no sentido anti-horário.\nSe você quiser voltar, você usa o comando `{forward}` mas com um número negativo. Por exemplo, `{forward} -100`\n\nEste é o início de uma pequena escada. Você pode fazê-la ter 5 passos?\n"
                start_code: "{forward} 50\n{turn} {left}"
                example_code: "```\n{forward} 50\n{turn} {right}\n{forward} 50\n{turn} {left}\n{forward} 50\n```\n"
            2:
                story_text: "Neste nível você pode usar variáveis para tornar a tartaruga interativa. Por exemplo, você pode perguntar ao jogador quantos passos a tartaruga deve dar.\n"
                example_code: "```\nresposta {is} {ask} Quantos passos a tartaruga deve dar?\n{forward} resposta\n```\n"
                start_code: "{print} Corrida de tartaruga!\nângulo {is} 90\n{turn} ângulo\n{forward} 25"
                story_text_2: "Além disso, no nível 1 a tartaruga só podia virar para a esquerda ou para a direita. Isso é um pouco chato!\nNo nível 2, ela pode apontar o nariz em todas as direções.\n\nUse 90 para virar um quarto. Chamamos isso de graus. Uma volta completa é de 360 graus.\nVocê pode fazer uma figura com este código? Talvez um triângulo ou um círculo?\n"
                example_code_2: "```\n{print} Desenhando figuras\nângulo {is} 90\n{turn} ângulo\n{forward} 25\n{turn} ângulo\n{forward} 25\n```\n"
            3:
                story_text: "Neste nível você pode usar `{at} {random}` com a tartaruga de desenho. Uma escolha aleatória faz com que a tartaruga percorra um caminho diferente a cada vez.\nUse `{at} {random}` para escolher um valor de uma lista. Você pode copiar e colar as linhas 2 e 3 para criar um caminho aleatório mais longo.\n"
                example_code: "```\nângulos {is} 10, 50, 90, 150, 250\n{turn} ângulos {at} {random}\n{forward} 25\n```\n"
                start_code: "ângulos {is} 10, 50, 90, 150, 250\n{turn} ângulos {at} {random}\n{forward} 25"
            4:
                story_text: "No nível 4 você tem que usar aspas com `{print}` e `{ask}`. Também ao desenhar!\n"
                example_code: "```\n{print} 'Desenhando figuras'\nângulo {is} 90\n{turn} ângulo\n{forward} 25\n{turn} ângulo\n{forward} 25\n```\n"
                start_code: "{print} 'Desenhando figuras'\nângulo {is} 90\n{turn} ângulo\n{forward} 25"
                story_text_2: "You can also change the color of the lines with the command `{color}`. Check out the example.\nYou can also use the command `{color} {white}` to make 'invisible' lines. You could use these white lines to move the turtle anywhere in the screen before you start drawing.\n"
                example_code_2: "```\n{color} {white}\n{forward} -80\n{color} {green}\n{forward} 50\n{color} {yellow}\n{forward} 50\n{color} {red}\n{forward} 50\n```\n"
            5:
                story_text: "No nível 5 você pode fazer uma escolha com `{if}`. Por exemplo, entre diferentes tipos de figuras.\n"
                example_code: "```\n{print} 'Desenhando Figuras'\nfigura {is} {ask} 'Você quer um quadrado ou um triângulo?'\n{if} figura {is} triângulo ângulo {is} 120\n{else} ângulo {is} 90\n{turn} ângulo\n{forward} 25\n{turn} ângulo\n{forward} 25\n{turn} ângulo\n{forward} 25\n{turn} ângulo\n{forward} 25\n```\n"
                start_code: "{print} 'Desenhando Figuras'\nfigura {is} {ask} 'Você quer um quadrado ou um triângulo?'\n{if} figura {is} triângulo ângulo {is} 120 {else} ângulo {is} 90\n{turn} ângulo\n{forward} 25"
                example_code_2: "```\ndirection {is} {ask} 'Do you want to go left, right, or straight ahead?'\nif direction is left turn _\nif direction is right turn _\nforward 100\n```\n"
                story_text_2: "### Exercise\nFill in the correct numbers in this code to get it to work.\nAfter you've done that, you can try to add the option backwards.\n\n**Extra** Instead of using 'left' and 'right', remake the program with North, East, South and West.\nThis way you could add even more directions like Northeast and Southwest etc.\n"
            8:
                story_text: "Agora que podemos repetir várias linhas, podemos fazer figuras com mais facilidade.\nNós só temos que definir o ângulo uma vez e então usar essa variável no `{repeat}`.\n"
                example_code: "```\nângulo = 90\n{repeat} 10 {times}\n    {turn} ângulo\n    {forward} 50\n```\n"
                story_text_2: "Além disso, agora podemos melhorar o programa que desenha diferentes figuras.\nVocê consegue descobrir até onde a tartaruga tem que virar aqui? Termine o código e você pode desenhar qualquer polígono que quiser!\n"
                example_code_2: "```\nângulos = {ask} 'Quantos ângulos eu deve desenhar?'\nângulo= 360 / ângulos\n{repeat} ângulo {times}\n    {turn} _\n    {forward} _\n```\n"
                start_code: "ângulos = {ask} 'Quantos ângulos eu devo desenhar?'"
            6:
                story_text: "Neste nível você pode usar cálculos para desenhar figuras diferentes.\nVocê pode ter aprendido na escola que girar um círculo completo é de 360 graus. Se não, agora você sabe!\nÉ por isso que você também usa 90 graus para um quadrado. 360 dividido por 4 é 90.\nAgora que podemos fazer contas com a Hedy, podemos desenhar todas as figuras que quisermos!\n"
                example_code: "```\nângulos = {ask} 'Quantos ângulos você deseja?'\nângulo = 360 / ângulos\n{forward} 50\n{turn} ângulo\n{forward} 50\n{turn} ângulo\n{forward} 50\n{turn} ângulo\n{forward} 50\n{turn} ângulo\n{forward} 50\n{turn} ângulo\n{forward} 50\n{turn} ângulo\n```\n"
                start_code: "{print} 'Desenhando figuras'"
            9:
                story_text: "Now that we can use a `{repeat}` inside a `{repeat}`, we can create more complex figures.\n\n### Exercise 1\nThis code creates three black triangles, change that into five pink squares.\n\n **(extra)** Create a figure of your own choosing consisting of at least two different shapes types.\n"
                example_code: "```\n{color} {black}\n{repeat} 3 {times}\n    {repeat} 3 {times}\n        {forward} 10\n        {turn} 120\n    {color} {white}\n    {forward} 50\n    {color} {black}\n```\n"

                start_code: '# place your code here'
        name: Tartaruga
        description: Faça o seu próprio desenho
        default_save_name: Tartaruga
    dishes:
        levels:
            6:
                story_text: "Quantas vezes todo mundo vai lavar a louça? Isso é justo? Você pode contá-lo neste nível.\n"
                example_code: "\n```\npeople = mom, dad, Emma, Sophie\nemma_washes = 0\ndishwasher = people {at} {random}\n{print} 'The dishwasher is' dishwasher\n{if} dishwasher {is} Emma emma_washes = emma_washes + 1\n{print} 'Emma will do the dishes this week' emma_washes 'times'\n```\n\nNow you can copy lines 3 to 5 a few times (e.g. 7 times for a whole week) to calculate for a whole week again.\nDo you make the code for the whole week?\n"
                example_code_2: "```\npeople = mom, dad, Emma, Sophie\ndishwasher = people {at} {random}\n{print} 'Monday the dishes are done by: ' dishwasher\n{remove} dishwasher {from} people\ndishwasher = people {at} {random}\n{print} 'Tuesday the dishes are done by: ' dishwasher\n{remove} dishwasher {from} people\ndishwasher = people {at} {random}\n```\n"
                start_code: "{print} 'Who does the dishes?'"
                story_text_2: "If you are extremely unlucky the previous program might choose you to to the dishes for the whole week! That's not fair!\nTo create a fairer system you can use the `{remove}` command to remove the chosen person from the list. This way you don't have to do the dishes again untill everybody has had a turn.\n\nMonday and tuesday are ready for you! Can you add the rest of the week?\nAnd... can you come up with a solution for when your list is empty?\n"
            10:
                story_text: "In this level you could make an even better dish washing shedule.\n"
                example_code: "```\ndays = Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday\nnames = mom, dad, Emma, Sophie\n{for} day {in} days\n    {print} names {at} {random} ' does the dishes on ' day\n```\n"
                start_code: '# coloque o seu código aqui'
            7:
                story_text: "With the `{repeat}` you can repeat pieces of code. You can use this to calculate who will be washing dishes for the entire week.\n"
                example_code: "\n```\npeople = mom, dad, Emma, Sophie\n{repeat} _ _ {print} 'the dishwasher is' _\n```\n"
                start_code: "{print} 'Who does the dishes?'"
            5:
                story_text: "Com o `{if}` agora você pode se divertir mais com a escolha do programa. Você pode fazer com que seu programa responda à escolha que o computador fez.\n\nVocê pode terminar o código para que ele imprima 'muito ruim' quando for sua vez e, caso contrário, 'sim!'?\nNão se esqueça das aspas simples!\n"
                example_code: "```\npessoas {is} mãe, pai, Eva, Sofia\nlavador {is} pessoas {at} {random}\n{if} lavador {is} Sofia {print} _ pena que tenho que lavar os pratos _ {else} {print} 'felizmente sem pratos porque' _ 'já está lavando'\n```\n"
                start_code: "{print} 'Quem lava os pratos?'"
            4:
                start_code: "{print} 'Quem lava os pratos?'"
                story_text: "Com as aspas simples você pode deixar seu planejamento de lavagem de louça mais bonito.\nDesta vez, o código de exemplo não está completo.\n\nVocê pode completar o código preenchendo os espaços em branco? Cada espaço em branco deve ser substituído por uma palavra de símbolo.\n\nDica: Não se esqueça das aspas!\n"
                example_code: "```\npessoas {is} mãe, pai, Eva, Sofia\n{print} _ os pratos são limpos por _\n{sleep}\n{print} pessoas {at} _\n```\n"
            3:
                story_text: "Você sempre discorda em casa sobre quem deve lavar a louça ou trocar a caixa de areia hoje?\nEntão você pode deixar o computador escolher de forma muito justa. Você pode programar isso neste nível!\nVocê primeiro faz uma lista dos membros de sua família. Em seguida, escolha '{at} {random}' na lista.\n"
                example_code: "```\npessoas {is} mãe, pai, Eva, Sofia\n{print} pessoas {at} {random}\n```\n"
                start_code: '{print} Quem lava os pratos?'
                story_text_2: "Não sente vontade de lavar a louça sozinho? Hackeie o programa para remover seu nome da lista.\n"
        name: Pratos?
        description: Use o computador para ver quem lava os pratos (Comece no nível 2)
        default_save_name: Pratos
    dice:
        name: Dado
        levels:
            6:
                story_text: "You can also make an Earthworm die again in this, but now you can also calculate how many points have been rolled.\nYou may know that the worm counts 5 points for Earthworms. Now after a roll you can immediately calculate how many points you have thrown.\nThis is the code to calculate points for one die:\n"
                start_code: "{print} 'What will the die indicate this time?'"
                example_code: "\n```\nchoices = 1, 2, 3, 4, 5, earthworm\npoints = 0\nthrow = choices {at} {random}\n{print} 'you threw' throw\n{if} throw {is} earthworm points = points + 5 {else} points = points + throw\n{print} 'those are' points ' point'\n```\nCan you make the code so that you get the total score for 8 dice? To do that, you have to cut and paste some lines of the code.\n"
                example_code_2: "\nDid you manage to calculate the score for 8 dice? That required a lot of cutting and pasting, right? We are going to make that easier in level 7!\n"
            5:
                example_code: "\n```\nchoices {is} 1, 2, 3, 4, 5, earthworm\nthrow {is} _\n{print} 'you have' _ 'thrown'\n{if} _ {is} earthworm {print} 'You can stop throwing.' _ {print} 'You have to hear it again!'\n```\n"
                start_code: "{print} 'What will the die indicate this time?'"
                story_text: "You can also make a die again in this level using the `{if}`.\nComplete the sample code so that the code says \"You can stop throwing\" once you have thrown an earthworm.\n\nBut maybe you want to recreate a die from a completely different game. That's fine too! Then make up your own reaction. Eg 'yes' for 6 and 'pity' for something {else}.\n"
            4:
                start_code: "{print} 'What will the die indicate this time?'"
                story_text: "In this level we can make sentences with the die value in the sentence, with quotes of course.\nThis time the sample code is not quite complete. Can you finish the code?\n"
            3:
                story_text: "In this level we can choose from a list. With that we can let the computer choose one side of the die.\nTake a look at the games you have in your closet at home.\nAre there games with a (special) die? You can also copy it with this code.\nFor example, the dice of the game Earthworms with the numbers 1 to 5 and an earthworm on it.\n\n![Die of earthworms with 1 to 5 and an earthworm on it](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)\n"
                example_code: "\n```\nchoices {is} 1, 2, 3, 4, 5, earthworm\n{print} choices {at} {random}\n```\n"
                start_code: '{print} What will the die indicate this time?'
                story_text_2: "### Exercise\nThe dice in the example above are dice for a specific game. Can you make normal dice?\nOr other special dice from a different game?\n"
                example_code_2: "```\nchoices {is} _\n```\n"
            10:
                story_text: "Is everybody taking too long throwing the dice? In this level you can let Hedy throw all the dice at once!\n"
                example_code: "\n```\nplayers = Ann, John, Jesse\nchoices = 1, 2, 3, 4, 5, 6\n{for} player {in} players\n    {print} player ' throws ' choices {at} {random}\n    {sleep}\n```\n"
                start_code: '# coloque o seu código aqui'
            7:
                story_text: "You can also make a die again in level 5. With the `{repeat}` code you can easily roll a whole hand of dice.\nTry to finish the sample code! The dashes should contain multiple commands and characters.\n\nBut maybe you want to make a completely different die. Of course you can!\n"
                example_code: "\n```\nchoices = 1, 2, 3, 4, 5, earthworm\n{repeat} _ _ {print} _ _ _\n```\n"
                start_code: "{print} 'What will the die indicate this time?'"
            15:
                story_text: "In this game you have to throw 6 in as little tries as possible.\n"
                example_code: "\n```\noptions = 1, 2, 3, 4, 5, 6\n{print} 'Throw 6 as fast as you can!'\nthrown = 0\ntries = 0\n{while} thrown != 6\n    thrown = options {at} {random}\n    {print} 'You threw ' thrown\n    tries = tries + 1\n{print} 'Yes! You have thrown 6 in ' tries ' tries.'\n```\n"
                start_code: '# coloque o seu código aqui'
        description: Make your own dice
        default_save_name: Dado
    rock:
        levels:
            5:
                story_text: "In this level we can determine who won.\nFor that you need the new `{if}` code.\n\nSave your choice with the name of choice and the choice of computer as computer choice.\nThen you can use `{if}` to see {if} they are the same or different.\nWill you finish the code?\n"
                example_code: "\n```\noptions {is} rock, paper, scissors\ncomputer_choice {is} _\nchoice {is} {ask} What do you choose?\n{print} 'you chose ' _\n{print} 'computer chose ' _\n{if} _ {is} _ {print} 'tie!' {else} {print} 'no tie'\n```\n\nFill in the correct code on the blanks to see {if} it is a draw.\n"
                start_code: "{print} 'Welcome to your own rock scissors paper!'"
            4:
                story_text: "In this level we can further program rock, paper, scissors. But {if} you want to add text, you have to use quotation marks here too.\nDo you complete the code by entering the correct commands or characters on the underscores?\n"
                start_code: "{print} 'Welcome to your own rock scissors paper!'"
            1:
                story_text: "No nível 1 você pode começar com um jogo de pedra, papel e tesoura.\n\nCom `{ask}` você pode fazer uma escolha, e com `{echo}` você pode repetir essa escolha.\n"
                example_code: "```\n{print} o que você escolhe?\n{ask} escolha entre pedra, papel ou tesoura\n{echo} então sua escolha foi:\n```\nEm vez de usar palavras, você também pode usar emojis, é claro: ✊✋✌\n"
                start_code: '{print} Bem-vindo ao seu próprio papel, pedra e tesoura!'
                example_code_2: "```\n{print} what do you choose?\n{ask} choose from _\n{echo} so your choice was:\n```\n"
                story_text_2: "### Exercise\nInstead of using words, you could also use emojis: ✊✋✌\nCan you create a code using emojis?\n"
            10:
                story_text: "Feeling too lazy to play the game yourself? Let Hedy play it for you!\n"
                example_code: "\n```\nchoices = rock, paper, scissors\nplayers = Marleen, Michael\n{for} player {in} players\n     {print} player ' chooses ' choices {at} {random}\n```\n"
                start_code: '# coloque o seu código aqui'
            9:
                story_text: "In this level you can program the whole rock, paper, scissors game by nesting the {if}-commands. Can you finish the code?\n"
                example_code: "\n```\nchoices {is} rock, paper, scisscors\nyour_choice {is} {ask} 'What do you choose?'\n{print} 'You choose ' your_choice\ncomputer_choice {is} choices {at} {random}\n{print} 'The computer chooses ' computer_choice\n{if} computer_choice {is} your_choice\n    {print} 'Tie'\n{if} computer_choice {is} 'rock'\n    {if} your_choice {is} 'paper'\n        {print} 'You win!'\n    {if} your_choice {is} 'scissors'\n        {print} 'You lose!'\n```\n"
                start_code: '# coloque o seu código aqui'
            3:
                story_text: "\nIn this level we can enter lists and choose things from them.\nYou first make a list with `{is}`. Then you can let the computer choose something from the list with `{at} {random}`.\nFor example, you can let the computer pick from rock, paper and scissors.\n"
                start_code: '{print} Welcome to your own rock scissors paper!'
                example_code: "\n\n```\nchoices {is} rock, paper, scissors\n{print} choices {at} {random}\n```\n"
                story_text_2: "### Exercise\nNow you only have one player, so can you add a second player?\nYou can even use variables to name player 1 and player 2.\n"
                example_code_2: "```\nchoices {is} rock, paper, scissors\n{print} player 1 chooses... choices {at} {random}\n{print} player 2 _\n```\n"
            2:
                story_text: "In this level you can practise using the variables, so that you can make the rock, paper, scissors game in the next level!\n"
                example_code: "\n```\nchoice {is} _\n{print} I choose choice\n```\n"
                start_code: '# coloque o seu código aqui'
            15:
                story_text: "Play until you beat the computer! But first, finish the example code...\n"
                example_code: "\n```\nwon = 'no'\noptions = 'rock', 'paper', 'scissors'\n{while} won == 'no'\n    your_choice = {ask} 'What do you choose?'\n    computer_choice = options {at} {random}\n    {print} 'you chose ' your_choice\n    {print} 'the computer chose ' computer_choice\n    {if} computer_choice == your_choice\n        {print} 'Tie!'\n    {if} computer_choice == 'rock' {and} your_choice == 'scissors'\n        {print} 'You lose!'\n    {if} computer_choice == 'rock' {and} your_choice == 'paper'\n        {print} 'You win!'\n        won = 'yes'\n"
                start_code: '# coloque o seu código aqui'
            13:
                story_text: "With the `{and}` command you can shorten your rock, paper, scissors code! Check out the example code below and try to finish it.\n"
                example_code: "\n```\noptions = 'rock', 'paper', 'scissors'\nyour_choice = {ask} 'What do you choose?'\ncomputer_choice = options {at} {random}\n{print} 'You choose ' your_choice\n{print} 'The computer chooses ' computer_choice\n{if} computer_choice {is} your_choice\n    {print} 'Tie'\n{if} computer_choice {is} 'rock' {and} your_choice {is} 'paper'\n    {print} 'You win!'\n{if} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'\n    {print} 'The computer wins!'\n```\n"
                start_code: '# coloque o seu código aqui'
        name: Pedra, papel, tesoura
        description: Make your own rock, paper, scissors game
        default_save_name: Pedra
    calculator:
        levels:
            12:
                story_text: "Now you can make a calculator that works for decimal numbers.\n"
                example_code: "\n```\nnumber1 = {ask} 'What is the first number?'\nnumber2 = {ask} 'What is the second number?'\nanswer = number1 + number2\n{print} number1 ' plus ' number2 ' is ' answer\n"
                start_code: '# coloque o seu código aqui'
            10:
                story_text: "This calculator game helps you practise your tables of multiplication!\nIf you add more numbers to the list, you can practise all the multiplications.\n"
                example_code: "\n```\nnumbers = 1, 2, 3\n{for} number1 {in} numbers\n    {for} number2 {in} numbers\n        answer = {ask} 'How much is ' number2 ' times ' number1 '?'\n        correct = number1 * number2\n        {if} answer {is} correct\n            {print} 'Great job!'\n        {else}\n            {print} 'Thats wrong. The right answer is ' correct\n```\n"
                start_code: '# coloque o seu código aqui'
            9:
                story_text: "In previous levels you've learned how to make a calculator, in this level you can expand that code and make it into a little maths game. Like this...\n"
                example_code: "\n```\nscore = 0\n{repeat} 10 {times}\n    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    number1 = numbers {at} {random}\n    number2 = numbers {at} {random}\n    correct_answer = number1 * number2\n    {print} 'What is ' number1 ' times ' number2 '?'\n    answer = {ask} 'Type your answer here...'\n    {print} 'Your answer is' answer\n    {if} answer {is} correct_answer\n        score = score + 1\n{print} 'Great job! Your score is... ' score ' out of 10!'\n```\n"
                start_code: "{print} 'Welcome to this calculator!'"
            6:
                start_code: "{print} 'Welcome to this calculator!'"
                story_text: "Now that you can calculate, you can also create a program to practice maths calculations. You can make up the calculations yourself, for example:\n"
                example_code: "\n```\ncorrect_answer = 11 * 27\nanswer = {ask} 'How much is 11 times 27?'\n{if} answer {is} correct_answer {print} 'good job!'\n{else} {print} 'Wrong! It was ' correct_answer\n```\n"
                story_text_2: "You can also let the computer do random sums on its own using random.\nThis is how you choose a number of tables to practice, and from that you always get a different sum:\n"
                example_code_2: "\n```\ntables = 4, 5, 6, 8\nnumbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\ntable = tables {at} {random}\nnumber = numbers {at} {random}\ncorrect_answer = table * number\nanswer = {ask} 'how much is ' table ' times ' number '?'\n{if} answer {is} correct_answer {print} 'okay'\n{else} {print} 'mistake! it was ' correct_answer\n```\n"
                story_text_3: "You can also let the computer do random sums on its own using random.\nThis is how you choose a number of tables to practice, and from that you always get a different sum:\n"
            14:
                story_text: "In this level you can programm the game 'Guess which number'\n"
                example_code: "\n```\n{print} 'Guess which number'\nnumbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nnumber = numbers {at} {random}\ngame = 'on'\n{for} i {in} {range} 1 {to} 10\n    {if} game == 'on'\n        guess = {ask} 'Which number do you think it is?'\n        {if} guess > number\n            {print} 'Lower!'\n        {if} guess < number\n            {print} 'Higher!'\n        {if} guess == number\n            {print} 'You win!'\n            game = 'over'\n"
                start_code: '# coloque o seu código aqui'
            15:
                story_text: "You can add the `{while}` loop to the calculator game you've learned to make in a previous level.\nThis makes sure the player can't continue to the next question {if} they answer incorrectly.\n"
                example_code: "\n```\nscore = 0\n{for} i {in} {range} 0 {to} 9\n    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    number1 = numbers {at} {random}\n    number2 = numbers {at} {random}\n    correct = number1 * number2\n    answer = 0\n    {while} answer != correct\n        {print} 'How much is ' number1 ' times ' number2 '?'\n        answer = {ask} 'Fill in your answer:'\n        {print} 'Your answer is ' answer\n    {print} 'Good job!'\n{print} 'You win!'\n```\n"
                start_code: '# coloque o seu código aqui'
            11:
                story_text: "With a `{for}` you can simplify tables of multiplication practise program.\n\n### Exercise 1\nImprove the example code such that it prints a nice multiplication table: <br> \"1 times 10 is 10\", \"2 times 10 is 20\", etc.\n\n### Exercise 2\nGo back to your level 10 multiplication code, and modify it so that it uses a `{for}` and `{range}`.\n"
                example_code: "```\nnumber = 10\n{for} i {in} {range} 1 to 10\n    {print} i * number\n```\n"
                start_code: '# place your code here'
            13:
                example_code: "```\nanswer1 = {ask} 'What is 10 times 7?'\nanswer2 = {ask} 'What is 6 times 7?'\n{if} _ _ _ _ _ _ _\n    {print} _\n```\n"
                start_code: '# Schrijf jouw code hier'
                story_text: "\n### Exercise 1\nLet's make the practice program a bit harder. The player now has to answers two questions correctly. Fill out the blanks to complete the program.\n\n### Exercise 2 (extra)\nSometimes, calculations have multiple correct answers. For example, 10 can be divided by 5 and by 2. So the question 'What number divides 10?' can be answered by 2 and by 5.\nAsk for a calculation that has multiple correct answers, ask the player to answer it, and determine if it is correct using `{or}`.\nEmpty the programming field and create your own solution.\n"
        name: Calculadora
        description: Create a calculator
        default_save_name: Calculadora
    restaurant:
        name: Restaurant
        levels:
            9:
                story_text: "In this level you can use nesting to make your restaurant more realistic and more fun!\nFor example you would {ask} for sauce {if} somebody orders fries, but you wouldn't {if} someone orders pizza!\nCheck out the example, and try this at your own virtual restaurant!\n"
                example_code: "\n```\n{print} 'Welcome to Hedys restaurant!'\npeople = {ask} 'How many people will be joining us today?'\n{print} 'Great!'\nprice = 0\n{repeat} people {times}\n    food = {ask} 'What would you like to order?'\n    {print} food\n    {if} food {is} fries\n        price = price + 3\n        sauce = {ask} 'What kind of sauce would you like with your fries?'\n        {if} sauce {is} no\n            {print} 'no sauce'\n        {else}\n            price = price + 1\n            {print} 'with ' sauce\n    {if} food {is} pizza\n        price = price + 4\n{print} 'That will be ' price ' dollar'\n{print} 'Enjoy your meal!'\n```\n"
                start_code: '# coloque o seu código aqui'
            8:
                story_text: "In this level you can make your virtual restaurant more elaborate by repeating multiple lines of code. Like this:\n"
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\npeople = {ask} 'How many people will be joining us today?'\n{print} 'Great!'\n{repeat} people {times}\n    food = {ask} 'What would you like to order?'\n    {print} food\n{print} 'Thank you for ordering!'\n{print} 'Enjoy your meal!'\n```\n\n### Exercise\nOf course, this code can be expanded with more items on the menu, offering drinks, and/or multiple courses, so feel free to add as many options as you like!\n"
                start_code: '# coloque o seu código aqui'
                story_text_2: "### Exercise\nOf course, this code can be expanded with more items on the menu, offering drinks, and/or multiple courses, so feel free to add as many options as you like!\n"
            6:
                story_text: "In this level you can use maths to calculate the total price of your customer's order, which can make your virtual restaurant more realistic.\n"
                example_code: "You can make a simple restaurant code, like this:\n```\n{print} 'Welcome to Hedys restaurant'\n{print} 'Here is our menu:'\n{print} 'Our main courses are pizza, lasagne, or spaghetti'\nmain = {ask} 'Which main course would you like?'\nprice = 0\n{if} main {is} pizza price = 10\n{if} main {is} lasagne price = 12\n{if} main {is} spaghetti price = 8\n{print} 'You have ordered ' main\n{print} 'That will be ' price ' dollars, please'\n{print} 'Thank you, enjoy your meal!'\n```\n"
                start_code: '# coloque o seu código aqui'
            4:
                story_text: "In this level you have to use quotation marks when using the `{print}` command.\nCan you make your code from the previous levels work in this level too by adding the quotation marks?\n\nBe careful! In the previous levels apostrophes were allowed in the text, but in this level Hedy will confuse them for quotation marks and the code will not work!\nSo instead of typing  `{print} Today we're serving pizza` , you should type `{print} 'Today we are serving pizza'`."
                start_code: '# coloque o seu código aqui'
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\n{print} 'Today we are serving pizza or lasagna.'\nfood {is} {ask} 'What would you like to eat?'\n{print} 'Great choice! The ' food ' is my favorite!'\ntopping {is} {ask} 'Would you like meat or veggies on that?'\n{print} food ' with ' topping ' is on its way!'\ndrinks {is} {ask} 'What would you like to drink with that?'\n{print} 'Thank you for your order.'\n{print} 'Your ' food ' and ' drinks ' will be right there!'\n```\n"
            3:
                example_code_2: "```\n{print} Mystery milkshake\nflavors {is} strawberry, chocolate, vanilla\nallergies {is} {ask} Are you allergic to any falvors?\n{remove} allergies {from} flavors\n{print} You get a flavors {at} {random} milkshake\n```\n"
                story_text: "Having trouble to decide what you wanna have for dinner? You can let Hedy choose for you!\nSimply add lists of your favorite (or least favorite) meals and Hedy can randomly choose your dinner.\nYou can also have a bit of fun, by letting Hedy choose the price for your dinner as well! What will you get?\n"
                example_code: "\n```\n{print} Welcome to Hedy's Random Restaurant!\n{print} The only restaurant that will randomly choose your meal and its price for you!\nstarters {is} salad, soup, carpaccio\nmains {is} pizza, brussels sprouts, spaghetti\ndesserts {is} brownies, ice cream, french cheeses\ndrinks {is} cola, beer, water\nprices {is} 1 dollar, 10 dollars, 100 dollars\n{print} You will start with: starters {at} {random}\n{print} Then we'll serve: mains {at} {random}\n{print} And as dessert: desserts {at} {random}\n{print} You will get a drinks {at} {random} to drink\n{print} That will be: prices {at} {random}\n{print} Thank you and enjoy your meal!\n```\n"
                story_text_2: "Does your costumer have any allergies or do they dislike certain dishes? Then you can use the `{remove}`command to remove it from your menu.\n"
                start_code: '# coloque o seu código aqui'
            15:
                story_text: "With the `{while}` you can make sure your costumers can keep adding orders until they are done.\n"
                example_code: "\n```\n{print} 'Welcome at McHedy'\nmore = 'yes'\n{while} more == 'yes'\n    order = {ask} 'What would you like to order?'\n    {print} order\n    more = {ask} 'Would you like to order anything {else}?'\n{print} 'Thank you!'\n"
                start_code: '# coloque o seu código aqui'
            1:
                story_text: "  No nível 1 você pode fazer seu próprio restaurante virtual e receber os pedidos de seus convidados.\n"
                example_code: "```\n{print} Bem-vindo ao restaurante da Hedy 🍟\n{ask} O que você gostaria de pedir?\n{echo} Então você gostaria de pedir\n{print} Obrigado pelo seu pedido!\n{print} Está a caminho!\n```\n"
                start_code: '# coloque o seu código aqui'
                story_text_2: "Você consegue pensar em mais linhas para adicionar ao código do seu restaurante? Por exemplo, você pode usar {ask} para perguntar aos convidados o que eles gostariam de beber, dizer o preço ou desejar uma refeição agradável?\n"
            2:
                story_text: "In level 2 you could expand your restaurant by using variables. In level 1 Hedy could only {echo} the order once and only remember the last thing that was ordered.\nNow you can use variables and Hedy can remember both the food and the drinks!\n"
                example_code: "```\n{print} Welcome to Hedy's restaurant!\n{print} Today we're serving pizza or lasagna.\nfood {is} {ask} What would you like to eat?\n{print} Great choice! The food is my favorite!\ntopping {is} {ask} Would you like meat or veggies on that?\n{print} food with topping is on its way!\ndrinks {is} {ask} What would you like to drink with that?\n{print} Thank you for your order.\n{print} Your food and drinks will be right there!\n```\n"
                start_code: '# coloque o seu código aqui'
                story_text_2: "### Exercise\nCan you make this code more elaborate? For example by adding drinks to the order? Or...?\n"
            12:
                story_text: "From this level on you can use decimal numbers to make you menu more realistic.\n"
                example_code: "\n```\nprice = 0\nfood = {ask} 'What would you like to order?'\ndrinks = {ask} 'What would you like to drink?'\n{if} food {is} 'hamburger'\n    price = price + 6.50\n{if} food {is} 'pizza'\n    price = price + 5.75\n{if} drinks {is} 'water'\n    price = price + 1.20\n{if} drinks {is} 'soda'\n    price = price + 2.35\n{print} 'That will be ' price ' dollar, please'\n```\n"
                start_code: '# coloque o seu código aqui'
            11:
                story_text: "We can use the `{for} i {in} {range} 1 {to} 5` to {print} the orders from multiple customers in an orderly manner.\n"
                example_code: "\n```\n{print} 'Welcome to Restaurant Hedy!'\npeople = {ask} 'For how many people would you like to order?'\n{for} i {in} {range} 1 {to} people\n    {print} 'Order number ' i\n    food = {ask} 'What would you like to eat?'\n    {print} food\n    {if} food {is} fries\n        sauce = {ask} 'What kind of sauce would you like with that?'\n        {print} sauce\n    drinks = {ask} 'What would you like to drink?'\n    {print} drinks\nprice = 4 * people\n{print} 'That will be ' price ' dollars, please!'\n```\n"
                start_code: '# coloque o seu código aqui'
            10:
                example_code: "\n```\ncourses = appetizer, main course, dessert\n{for} course {in} courses\n    food = {ask} 'What would you like to eat as your ' course '?'\n    {print} food ' will be your ' course\n```\n"
                story_text_2: "\nOf course, you could also order for multiple people!\n"
                example_code_2: "```\ncourses = appetizer, main course, dessert\nnames = Timon, Onno\n{for} name {in} names\n    {for} course {in} courses\n        food = {ask} name ', what would you like to eat as your ' course '?'\n        {print} name ' orders ' food ' as their ' course\n```\n"
                story_text: "In this level you'll learn how to easily {ask} your guests' orders in a short code.\n"
                start_code: courses = appetizer, main course, dessert
            7:
                story_text: "In this level you've learned how to use the {repeat} command to repeat a line of code a certain amount of times.\nYou can use that in your restaurant to {ask} multiple people what they'd like to eat. Like this:\n\n```\n{print} 'Welcome to Hedys restaurant!'\npeople = {ask} 'How many people are joining us today?'\n{repeat} people times food = {ask} 'What would you like to eat?'\n{print} 'Thanks for your order! Its coming right up!'\n```\n"
                start_code: '# coloque o seu código aqui'
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\npeople = {ask} 'How many people are joining us today?'\n{repeat} people times food = {ask} 'What would you like to eat?'\n{print} 'Thanks for your order! Its coming right up!'\n```\n"
            5:
                story_text: "In this level the {if} command allows you to {ask} your customers questions and give different responses to the answers.\nIn the example below, you see that you can {ask} the customer {if} they want to hear the specials and Hedy can respond accordingly.\n"
                example_code: "\n```\n{print} 'Welcome to Hedys restaurant!'\nspecial {is} {ask} 'Would you like to hear our specials today?'\n{if} special {is} yes {print} 'Todays special is chicken piri piri and rice.' {else} {print} 'No problem.'\nfood {is} {ask} 'What would you like to eat?'\n{print} 'One ' food ', coming right up!'\ndrink {is} {ask} 'What would you like to drink with that?'\n{if} drink {is} cola {print} 'Im sorry, we are out of cola!' {else} {print} 'Great choice!'\nanything {is} {ask} 'Would you like anything {else}?'\n{print} 'Let me repeat your order...'\n{print} 'One ' food\n{if} drink {is} cola {print} 'and...' {else} {print} 'One ' drink\n{if} anything {is} no {print} 'Thats it!' {else} {print} 'One ' anything\n{print} 'Thank you for your order and enjoy your meal!'\n```\n\n### Exercise\nCan you think of more questions to {ask} the customers when they are ordering, and make up different responses to their answers by using the {if} command?\n"
                start_code: '# coloque o seu código aqui'
            13:
                story_text: "In this level we can use the new commands to upgrade our restaurant.\nWe use `{and}` to see {if} two things are both the case.\n"
                example_code: "```\nprice = 10\nfood = {ask} 'What would you like to eat?'\ndrinks = {ask} 'What would you like to drink?'\n{if} food {is} 'sandwich' {and} drinks {is} 'juice'\n    {print} 'Thats our discount menu'\n    price = price - 3\n{print} 'That will be ' price ' dollars'\n```\n"
                start_code: '# coloque o seu código aqui'
        description: Create your own virtual restaurant
        default_save_name: Restaurant
    fortune:
        description: Let Hedy predict the future
        levels:
            12:
                story_text: "In this level you can make your fortunes multiple words. Like in this example below:\n"
                example_code: "\n```\nfortunes = 'you will be rich', 'you will fall in love', 'you will slip on a banana peel'\n{print} 'I will take a look in my crystall ball for your future.'\n{print} 'I see... I see...'\n{sleep}\n{print} fortunes {at} {random}\n```\n"
                start_code: '# coloque o seu código aqui'
            5:
                story_text: "In this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!\nBy using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.\nCheck out this example to find out how.\n"
                example_code: "\n```\n{print} 'Im Hedy the fortune teller!'\n{print} 'I can predict {if} youll win the lottery tomorrow!'\nperson {is} {ask} 'Who are you?'\n{if} person {is} Hedy {print} 'You will definitely win!🤩' {else} {print} 'Bad luck! Someone {else} will win!😭'\n```\n"
                start_code: '# coloque o seu código aqui'
            1:
                story_text: "Você já foi a um parque de diversões e teve seu futuro previsto por uma cartomante? Ou você já jogou com uma bola oito mágica?\nEntão você provavelmente sabe que eles não podem prever seu futuro, mas ainda é divertido de jogar!\n\nNos próximos níveis, você pode aprender a criar sua própria máquina de adivinhação!\nNo nível 1 você pode começar de leve, deixando a Hedy se apresentar como uma cartomante e deixá-la repetir com {echo} as respostas dos jogadores.\nDessa forma:\n"
                example_code: "```\n{print} Olá, sou Hedy, a cartomante!\n{ask} Quem é você?\n{print} Deixe-me dar uma olhada na minha bola de cristal\n{print} eu vejo... eu vejo...\n{echo} Seu nome é\n```\n"
                start_code: '# coloque o seu código aqui'
                story_text_2: "A Hedy agora apenas diz o seu nome. Você pode expandir o código para que a Hedy possa prever mais coisas sobre você?\nObviamente, a Hedy ainda não é uma vidente muito boa, pois ela só pode repetir as respostas que foram dadas pelos jogadores!\nDê uma olhada no nível 2 para melhorar sua cartomante.\n"
            10:
                example_code: "\n```\nhouses = mansion, apartment, shack, house\nloves = nobody, a royal, their neighbour, their true love\npets = dog, cat, elephant\nnames = Jenna, Ryan, Jim\n{for} name {in} names\n    {print} name ' lives in a ' houses {at} {random}\n    {print} name ' will marry ' loves {at} {random}\n    {print} name ' will get a ' pets {at} {random} ' as their pet.'\n    {sleep}\n```\n"
                story_text: "In this level you'll learn how to program the game MASH (mansion, apartement, shack, house). In this game you can predict for all the players at once, what their future will look like.\n"
                start_code: '# coloque o seu código aqui'
            8:
                story_text: "In the previous levels you've learned how to use repeat to make the fortune teller answer 3 questions in a row, but we had a problem with printing the questions.\nNow that problem is solved, because of the new way of using the repeat command.\nIn the next example you can have your fortune teller {ask} 3 questions and also print them!\n"
                example_code: "\n```\n{print} 'I am Hedy the fortune teller!'\n{print} 'You can {ask} me 3 questions.'\nanswers = yes, no, maybe\n{repeat} 3 {times}\n   question = {ask} 'What do you want to know?'\n   {print} question\n   {sleep}\n   {print} 'My crystal ball says...' answers {at} {random}\n```\n"
                start_code: '# coloque o seu código aqui'
            7:
                story_text: "In this level you can use the `{repeat}` command to make your machine tell multiple fortunes at once.\n"
                example_code: "\n```\n{print} 'Im Hedy the fortune teller!'\n{print} 'You can {ask} 3 questions!'\n{repeat} 3 {times} question = {ask} 'What do you want to know?'\nanswer = yes, no, maybe\n{repeat} 3 {times} {print} 'My crystal ball says... ' answer {at} {random}\n```\n\n### Exercise\nAs you can see, the questions aren't printed in this example. That's because the variable `question` was changed 3 times.\nEvery time the player fills in the new answer, Hedy overwrites the previous one, so the first answer the player gave is forgotten.\nThis means you can't print all the questions this way.\n\nBy using 3 different variables instead of 1 (for example `question1` , `question2` and `question3`), you could solve the problem and print the questions.\nThis does mean that you can only use `{repeat}` for the answers, and you will have to ask and print all the questions separately.\nCan you do it?\n\nIn the upcoming levels the layout of {repeat} command will change, which enables you to repeat multiple lines at once.\n"
                start_code: '# coloque o seu código aqui'
            6:
                story_text: "In this level you can use math in your predictions as a fortune teller. This allows you to make up (silly) formulas to calculate the future.\nFor example you could calculate how rich you'll get or how many kids you will have when you grow up.\n"
                example_code: "\n```\n{print} 'I am Hedy the fortune teller!'\n{print} 'I can predict how many kids youll get when you grow up!'\nage = {ask} 'How old are you?'\nsiblings = {ask} 'How many siblings do you have?'\nlength = {ask} 'How tall are you in centimetres?'\nkids = length / age\nkids = kids - siblings\n{print} 'You will get ...'\n{sleep}\n{print} kids ' kids!'\n```\n\nIf the previous example wasn't silly enough for you, take a look at this one!\n\n```\n{print} 'Im Hedy the silly fortune teller!'\n{print} 'I will predict how smart you are!'\nfootball = {ask} 'On a scale 1-10 how much do you love football?'\nbananas = {ask} 'How many bananas did you eat this week?'\nhygiene = {ask} 'How many times did you wash your hands today?'\nresult = bananas + hygiene\nresult = result * football\n{print} 'You are ' result ' percent smart.'\n```\n"
                start_code: '# coloque o seu código aqui'
            4:
                story_text: "This level has no new functions, but allows you to practice with using the quotation marks.\nYou can remake your level 3 code, and make sure to add the quotation marks in the right places!\n\nMind that in level 3, we couldn't use the word 'question' as both the name of the variable and a normal word that could be printed.\nThe quotation marks in level 3 make this possible!\n\nImportant! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.\nMake sure to remove those apostrophes and change the spelling to Im or Whats.\n"
                example_code: "\n```\n{print} 'Im Hedy the fortune teller!'\nquestion {is} {ask} 'What do you want to know?'\n{print} 'This is your question: ' question\nanswers {is} yes, no, maybe\n{print} 'My crystal ball says...'\n{sleep} 2\n{print} answers {at} {random}\n```\n"
                start_code: '# coloque o seu código aqui'
            3:
                story_text: "In the previous levels you've created your first fortune telling machine, but Hedy couldn't really predict anything, only {echo}.\nIn this level you can use a variable and the `{at} {random}` command to really let Hedy choose an answer for you. Check out this code for instance:\n"
                example_code: "\nIn this example the player can {ask} Hedy a yes-no question and Hedy will pick a random answer for you.\n```\n{print} I’m Hedy the fortune teller!\nquestion {is} {ask} What do you want to know?\n{print} This is what you want to know: question\nanswers {is} yes, no, maybe\n{print} My crystal ball says...\n{sleep} 2\n{print} answers {at} {random}\n```\n\n### Exercises\nNow, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or '{ask} again'.\n"
                start_code: '# coloque o seu código aqui'
                story_text_2: "### Exercises\nNow, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or '{ask} again'.\n"
        name: Fortune teller
        default_save_name: Fortune Teller
    haunted:
        name: Casa mal-assombrada
        levels:
            1:
                example_code: "```\n{print} Como eu cheguei aqui?\n{print} Lembro-me de meu amigo me dizendo para entrar na antiga mansão...\n{print} e de repente tudo ficou preto.\n{print} Mas como eu acabei no chão...?\n{print} Minha cabeça dói como se eu tivesse sido atingido por um taco de beisebol!\n{print} Que som é esse?\n{print} Oh não! Eu sinto que não estou sozinho nesta casa!\n{print} Eu preciso sair daqui!\n{print} Há 3 portas na minha frente..\n{ask} Qual porta devo escolher?\n{echo} eu escolho a porta\n{print} ...?\n```\n"
                start_code: '{print} Como eu cheguei aqui?'
                story_text: "Nesta aventura você está trabalhando para fazer um jogo no qual você tem que escapar de uma casa mal-assombrada escolhendo a porta correta.\nSe você escolher a porta certa, você sobreviverá, mas senão um monstro terrível pode...\n\nNo nível 1 começamos nosso jogo de casa mal-assombrada inventando uma história assustadora e perguntando ao jogador que monstro ele verá na casa mal-assombrada.\n"
                story_text_2: "Você pode terminar a história assustadora? Ou inventar sua própria história de casa mal-assombrada?\n"
            2:
                start_code: monstro1 {is} _
                story_text: "In this haunted house you can choose your monsters with emojis. Of course you could also use words.\n\n```\nmonster1 {is} 👻\nmonster2 {is} 🤡\nmonster3 {is} 👶\n{print} You enter the haunted house.\n{print} Suddenly you see a monster1\n{print} You run into the other room, but a monster2 is waiting there for you!\n{print} Oh no! Quickly get to the kitchen.\n{print} But as you enter monster3 attacks you!\n```\n"
                example_code: "```\nmonster_1 {is} 👻\nmonster_2 {is} 🤡\nmonster_3 {is} 👶\n{print} You enter the haunted house.\n{print} Suddenly you see a monster_1\n{print} You run into the other room, but a monster_2 is waiting there for you!\n{print} Oh no! Quickly get to the kitchen.\n{print} But as you enter monster_3 attacks you!\n```\n"
                story_text_2: "### Exercise\nIn the example above the monsters are predetermined. So each time you run your code, the output is the same.\nCan you add `{ask}` commands to make the haunted house interactive and have the players choose the monsters they come across?\n"
                example_code_2: "```\nmonster_1 {is} _\nmonster_2 {is} _\nmonster_3 {is} _\n{print} You enter the haunted house.\n{print} Suddenly you see a monster_1\n{print} You run into the other room, but a monster_2 is waiting there for you!\n{print} Oh no! Quickly get to the kitchen.\n{print} But as you enter monster_3 attacks you!\n```\n"
            3:
                story_text: "In the previous levels you've made an introduction to your haunted house game, but as you might have noticed the story would always have a dreadful end.\nIn this level you can make your story more interactive by changing the outcome of the game; sometimes you'll get eaten, sometimes you'll escape!\nLet Hedy decide randomly!\n"
                start_code: '# coloque o seu código aqui'
                example_code: "```\n_ Escape from the haunted house!\n_ There are 3 doors in front of you...\n_ _ _ Which door do you choose?\n_ You picked door ... choice\nmonsters _ a zombie, a vampire, NOTHING YOUVE ESCAPED\n_ You see...\n{sleep}\n_ _ _ _\n```\n"
            4:
                story_text: "In this level you learn how to use quotation marks in your games.\nCan you make your Haunted House level 4 proof?\n"
                start_code: '# coloque o seu código aqui'
                example_code: "```\n{print} _Escape from the haunted house!_\n{print} _There are 3 doors in front of you..._\nchoice {is} {ask} _Which door do you choose?_\n{print} _You picked door ..._ choice\nmonsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED\n{print} _You see..._\n{sleep}\n{print} monsters {at} {random}\n ```\n"
            5:
                example_code: "\n```\n{print} 'Escape from the haunted house!'\n{print} 'There are 3 doors in front of you...'\ndoors {is} 1, 2, 3\nmonsters {is} werewolf, mummy, vampire, zombie\nchosen_door {is} {ask} 'Which door do you choose?'\n{print} 'You chose door...' chosen_door\n{sleep}\ncorrect_door {is} doors {at} {random}\n{if} chosen_door {is} correct_door {print} 'Great! Youve escaped!'\n{else} {print} 'Oh no! You are being eaten by a...' monsters {at} {random}\n```\n"
                story_text: "Up until this level the haunted house game always asked the player to choose a door, but as you might have noticed, they didn't really have to answer correctly.\nIf the player filled in a completely random answer, the game would still work and the player might even win (despite not picking a door).\nIn this level you can only win the game by picking the same door Hedy picked randomly.\n"
                start_code: '# coloque o seu código aqui'
            9:
                story_text: "In this level you can use nesting, which allows you to make the haunted house even more interactive!\n"
                example_code: "\n```\n{print} 'Escape from the Haunted House!'\nplayer = alive\ndoors = 1, 2, 3\nmonsters = zombie, vampire, giant spider\n{repeat} 3 {times}\n    {if} player {is} alive\n        correct_door {is} doors {at} {random}\n        {print} 'There are 3 doors in front of you...'\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} chosen_door {is} correct_door\n            {print} 'No monsters here!'\n        {else}\n            {print} 'You are eaten by a ' monsters {at} {random}\n            player = dead\n    {else}\n        {print} 'GAME OVER'\n{if} player {is} alive\n    {print} 'Great! You survived!'\n```\n### Exercise\nNow it's very hard to win this game, can you make it easier to win?\nFor example by only having 1 wrong door and 2 correct doors instead of 1 correct door en 2 wrong ones?\n"
                start_code: "{print} 'Escape from the haunted house!'"
            11:
                story_text: "In this level we've changed the repeat command and we've added a line to our haunted house that tells the player in which room they are.\n"
                example_code: "\n```\n{print} 'Escape from the Haunted House!'\nplayer {is} alive\ndoors = 1, 2, 3\nmonsters = zombie, vampire, giant spider\n{for} i {in} {range} 1 {to} 3\n    {if} player {is} alive\n        correct_door = doors {at} {random}\n        {print} 'Room ' i\n        {print} 'There are 3 doors in front of you...'\n        chosendoor = {ask} 'Which door do you choose?'\n        {if} chosendoor {is} correct_door\n            {print} 'No monsters here!'\n        {else}\n            {print} 'You are eaten by a ' monsters {at} {random}\n            player = dead\n    {else}\n        {print} 'GAME OVER'\n{if} player {is} alive\n    {print} 'Great! You survived!'\n```\n"
                start_code: "{print} 'Escape from the haunted house!'"
            14:
                story_text: "In this level you can use the `<` and `>` symbol to introduce lives to your game.\n"
                example_code: "\n```\n{print} 'Escape from the haunted house'\nlives = 3\ndoors = 1, 2, 3\nmonsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'\n{for} i {in} {range} 1 {to} 10\n    {if} lives > 0\n        good_door = doors {at} {random}\n        monster = monsters {at} {random}\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} good_door == chosen_door\n            {print} 'You have chosen the correct door'\n        {else}\n            {print} 'You see...' monster\n            {if} monster == 'a sleeping 3 headed dog'\n                {print} 'Pffieuw.... Its asleep'\n            {else}\n                {print} 'You lose one life'\n                lives = lives -1\n    {else}\n        {print} 'GAME OVER'\n```\n"
                start_code: '# coloque o seu código aqui'
            16:
                story_text: "This haunted house game uses the connection between the lists you can use in this level.\nFor example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.\nCheck out the code!\n"
                example_code: "\n```\nnumbers = [1, 2, 3]\ni = numbers[random]\nhint = ['growling', 'a cackling laugh', 'fluttering batwings']\nmonsters = ['zombie', 'witch', 'vampire']\nbad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']\ngood_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']\nweapons = ['ham', 'lighter', 'garlic']\n{print} 'You are standing in front of an old mension'\n{print} 'Something is not right here'\n{print} 'You hear ' hint[i]\n{print} 'You are going to explore it'\n{print} 'You enter the kitchen en see a lighter, a raw ham and a garlic.'\nyour_weapon = {ask} 'What do you bring with you?'\n{print} 'With your ' your_weapon ' you enter the living room'\n{print} 'There you find a ' monsters[i]\nneeded_weapon = weapons[i]\n{if} your_weapon == needed_weapon\n    {print} 'You use your ' your_weapon\n    {print} good_fate[i]\n    {print} 'YOU WIN!'\n{else}\n    {print} 'You have chosen the wrong weapon...'\n    {print} bad_fate[i]\n    {print} 'GAME OVER'\n```\n"
                start_code: '# coloque o seu código aqui'
        description: escape from the haunted house
        default_save_name: Casa mal-assombrada
    piggybank:
        name: Piggy Bank
        description: Count your pocketmoney!
        default_save_name: Piggy Bank
        levels:
            14:
                story_text: "In this level you can let Hedy tell you {if} you have saved up enough money!\n"
                example_code: "\n```\nmoney = {ask} 'How much money have you saved?'\nwish = {ask} 'How much money do you need?'\nallowance = {ask} 'How much pocket money do you get each week?'\nto_save = wish - money\nweeks = to_save / allowance\n{if} wish > money\n    {print} 'You need to save up some more!'\n    {print} 'Youll need ' weeks ' more weeks.'\n{else}\n    {print} 'Great! You have enough'\n    {print} 'Lets go shopping!'\n```\n"
                start_code: '# coloque o seu código aqui'
            12:
                story_text: "In this adventure you learn how to make a digital piggy bank, to calculate how much money you have and how long you need to save up to buy what you want!\n"
                example_code: "\n```\n{print} 'The digital piggy bank'\nwish = {ask} 'What would you like to buy?'\nprice = {ask} 'How much does that cost?'\nsaved = {ask} 'How much money have you saved already?'\nallowance = {ask} 'How much pocket money do you get per week?'\nto_save = price - saved\nweeks = to_save / allowance\n{print} 'You can buy a ' wish ' in ' weeks ' weeks.'\n"
                start_code: '# coloque o seu código aqui'
    quizmaster:
        name: Quizmaster
        description: Make your own quiz!
        default_save_name: Quizmaster
        levels:
            14:
                story_text: "In this adventure you can make your own quiz! Fill in the blanks, add more questions and enjoy your own quiz!\nYou can make a quiz about anything you like: your hobby, your favorite animal, your favorite book or anything at all!\n"
                example_code: "\n```\n{print} 'Make your own quiz'\npoints_a = 0\npoints_b = 0\n{print} 'Question'\n{print} 'Answer option A'\n{print} 'Answer option B'\nanswer = {ask} 'Which answer?'\n{if} answer == 'A'\n    points_a = points_a + 1\n{if} answer == 'B'\n    points_b = points_b + 1\n{print} 'End of the quiz!'\n{print} 'Lets see the results!'\n{if} points_a > points_b\n    {print} 'You belong to the A club'\n{if} points_b > points_a\n    {print} 'You belong to the B club'\n```\n"
                start_code: '# coloque o seu código aqui'
    language:
        name: "Língua"
        description: "Practice words in a foreign language"
        default_save_name: "Language"
        levels:
            5:
                story_text: |
                    Make your own program to practice your vocabulary in a new language.
                example_code: |
                    ```
                    {print} 'Learn French!'
                    cat {is} {ask} '🐱'
                    {if} cat {is} chat {print} 'Terrific!'
                    {else} {print} 'No, cat is chat'
                    frog {is} {ask} '🐸'
                    {if} frog {is} grenouille {print} 'Super!'
                    {else} {print} 'No, frog is grenouille'
                    ```
                start_code: "# coloque o seu código aqui"
            16:
                story_text: |
                    Make your own program to practice your vocabulary in a new language.

                example_code: |
                    ```
                    french_words = ['bonjour', 'ordinateur', 'pomme de terre']
                    translation = ['hello', 'computer', 'potato']
                    score = 0
                    {for} i {in} {range} 1 {to} 3
                        answer = {ask} 'What does ' french_words[i] ' mean?'
                        correct = translation[i]
                        {if} answer == correct
                            {print} 'Correct!'
                            score = score + 1
                        {else}
                            {print} 'Wrong, ' french_words[i] ' means ' translation[i]
                    {print} 'You gave ' score ' correct answers.'
                    ```
                start_code: "# coloque o seu código aqui"
    secret:
        name: SuperSpy
        description: Make your own spy code
        default_save_name: language
        levels:
            12:
                story_text: "In this adventure you can create your own super spy code. Encode a message that only the right agent can decipher.\nIf the enemy tries to crack the code, they will get some false info to waste their time.\n"
                example_code: "```\nname is ask 'What is your name?'\nif name is 'Agent007'\n    a is 'Go to the airport '\nelse\n    a is 'Go to the trainstation '\npassword is ask 'What is the password?'\nif password is 'TOPSECRET'\n    b is 'tomorrow at 02.00'\nelse\n    b is 'today at 10.00'\nprint a + b\n```\n"
                start_code: '# coloque o seu código aqui'
            13:
                story_text: "The code you made in the previous level can be made a lot easier in this one with the `{and}` command.\n"
                example_code: "```\nname is ask 'What is your name?'\npassword is ask 'What is your password?'\nif name is 'Agent007' and password is 'TOPSECRET'\n    print 'Go to the airport at 02.00'\nelse\n    print 'Go to the trainstation at 10.00'\n ```\n"
                start_code: '# coloque o seu código aqui'
    tic:
        levels:
            14:
                story_text: "In the previous levels you've made a tic tac toe game. Now you've learned how to use the = sign, the == sign and the != sign.\nYou can use this knowledge in your new Taic Tac Toe game, like this:\n"
                start_code: '# coloque o seu código aqui'
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game != 'over'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice == 1\n                spot_1 = sign\n            {if} choice == 2\n                spot_2 = sign\n            {if} choice == 3\n                spot_3 = sign\n            {if} choice == 4\n                spot_4 = sign\n            {if} choice == 5\n                spot_5 = sign\n            {if} choice == 6\n                spot_6 = sign\n            {if} choice == 7\n                spot_7 = sign\n            {if} choice == 8\n                spot_8 = sign\n            {if} choice == 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner == 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign == 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
            15:
                story_text: "In this level you can improve your Tic Tac Toe game with the {while} loop/ With this loop you can combine the `{if} game != 'over'` and the `{for} i {in} {range} 1 to 9` into one simple line.\nCheck it out:\n"
                start_code: '# coloque o seu código aqui'
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over'\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots\n        {remove} choice {from} open_spots\n        {if} choice == 1\n            spot_1 = sign\n        {if} choice == 2\n            spot_2 = sign\n        {if} choice == 3\n            spot_3 = sign\n        {if} choice == 4\n            spot_4 = sign\n        {if} choice == 5\n            spot_5 = sign\n        {if} choice == 6\n            spot_6 = sign\n        {if} choice == 7\n            spot_7 = sign\n        {if} choice == 8\n            spot_8 = sign\n        {if} choice == 9\n            spot_9 = sign\n    {else}\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    winner = {ask} 'Did you win?'\n    {if} winner == 'yes'\n        {print} 'Good job, player ' sign '!'\n        game = 'over'\n    {else}\n        {if} sign == 'x'\n            sign = 'o'\n        {else}\n            sign = 'x'\n```\n"
            17:
                start_code: '# coloque o seu código aqui'
                story_text: "In the previous levels the tic tac toe game had an annoying feature. After every move, you had to fill in yourself if you had won or not.\nThis made the game playable, but also quite slow. In this level we have learned the `{elif}` command, that could solve that problem.\nTo use the {elif} to let Hedy check whether or not a player has won is fun, but it also requires a fair amount of extra lines.\n\nIn the example code you see that we added the requirements to win (3 spots in a row horizontally, vertically or diagonally).\nYou can find them in line 46 to 69. You can see that each time the requirement is met (so if a player has won) the variable game is set to 'over'.\nThis means that the {while} loop will be stopped and the game ends.\n"
                example_code: "```\nsign = 'x'\nopen_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over':\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots:\n        {remove} choice {from} open_spots\n        {if} choice == 1:\n            spot_1 = sign\n        {if} choice == 2:\n            spot_2 = sign\n        {if} choice == 3:\n            spot_3 = sign\n        {if} choice == 4:\n            spot_4 = sign\n        {if} choice == 5:\n            spot_5 = sign\n        {if} choice == 6:\n            spot_6 = sign\n        {if} choice == 7:\n            spot_7 = sign\n        {if} choice == 8:\n            spot_8 = sign\n        {if} choice == 9:\n            spot_9 = sign\n    {else}:\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {else}:\n        {if} sign == 'x':\n            sign = 'o'\n        {else}:\n            sign = 'x'\n```\n"
            13:
                story_text: "In this adventure you can program a game of Tic Tac Toe. You can play with two people. Taking turns, you pick a number of the spot (1 - 9) you want to put your sign (x or o) on.\nThe first player that gets 3 in a row (horizontally, vertically or diagonally) wins!\nHave fun!\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game {is} 'on'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice {is} 1\n                spot_1 = sign\n            {if} choice {is} 2\n                spot_2 = sign\n            {if} choice {is} 3\n                spot_3 = sign\n            {if} choice {is} 4\n                spot_4 = sign\n            {if} choice {is} 5\n                spot_5 = sign\n            {if} choice {is} 6\n                spot_6 = sign\n            {if} choice {is} 7\n                spot_7 = sign\n            {if} choice {is} 8\n                spot_8 = sign\n            {if} choice {is} 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner {is} 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign {is} 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
                start_code: '# coloque o seu código aqui'
        name: Jogo da velha
        description: Jogue um Jogo da Velha!
        default_save_name: Tic
    blackjack:
        default_save_name: Blackjack
        levels:
            17:
                start_code: '# coloque o seu código aqui'
                story_text: "Blackjack is a simple game of cards in which you have to get as close to 21 points as possible. You get two cards. Each card is worth their numeral value, and the face cards (Jack, Queen and King) are worth 10 points.\nThe Ace is worth either 1 or 11 points (you can choose). The dealer, your opponent, also gets two cards.\nIf you want, you can get another card, and its points will be added to your total. The dealer can also choose to take another card.\nBut be careful not to get more than 21 points, because if you do, you lose!\nThe player who gets closest to 21, without going over it, wins!\n\nHave fun!\n"
                example_code: "```\n{print} 'BLACKJACK'\ncards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen','King', 'Ace']\npoints = 0\ndealer_points = 0\ncard_1 = cards[{random}]\ncard_2 = cards[{random}]\ncard_3 = cards [{random}]\ndealer_card_1 = cards[{random}]\ndealer_card_2 = cards[{random}]\ndealer_card_3 = cards[{random}]\n# Points for card 1\n{if} card_1 == 'Jack' {or} card_1 == 'Queen' {or} card_1 == 'King':\n    points = points + 10\n{elif} card_1 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_1\n# Points for card 2\n{if} card_2 == 'Jack' {or} card_2 == 'Queen' {or} card_2 == 'King':\n    points = points + 10\n{elif} card_2 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_2\n# Points for dealer card 1\n{if} dealer_card_1 == 'Jack' {or} dealer_card_1 == 'Queen' {or} dealer_card_1 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_1 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_1\n# Points for dealer card 2\n{if} dealer_card_2 == 'Jack' {or} dealer_card_2 == 'Queen' {or} dealer_card_2 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_2 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_2\n# Two Aces\n{if} card_1 == 'Ace' {and} card_2 == 'Ace':\n    points = 12\n{if} dealer_card_1 == 'Ace' {and} dealer_card_2 == 'Ace':\n    dealer_points = 12\n# Scoreboard\n{print} 'You have a ' card_1 ' and a ' card_2 ' (' points ' points)'\n{print} 'The dealer has a ' dealer_card_1 ' and a ' dealer_card_2 ' (' dealer_points ' points)'\n# Extra card for the player\nhit = {ask} 'Do you want an extra card?'\n{if} hit == 'yes':\n    {if} card_3 == 'Jack' {or} card_3 == 'Queen' {or} card_3 == 'King':\n        points = points + 10\n    {elif} card_3 == 'Ace':\n        {if} points > 11:\n            points = points + 11\n        {else}:\n            points = points + 1\n    {else}:\n        points = points + card_3\n    print 'You get an extra ' card_3 ' (' points ' points)'\n{else}:\n    print 'No extra cards'\n# Winner\n{if} points > 21 {or} dealer_points > points {or} dealer_points == 21:\n    {print} 'You lose'\n{elif} dealer_points < 17:\n    {print} 'The dealer takes an extra card. It is a... ' dealer_card_3\n    {if} dealer_card_3 == 'Jack' {or} dealer_card_3 == 'Queen' {or} dealer_card_3 == 'King':\n        dealer_points = dealer_points + 10\n    {elif} dealer_card_3 == 'Ace':\n        {if} dealer_points < 11:\n            dealer_points = dealer_points + 11\n        {else}:\n            dealer_points = dealer_points + 1\n    {else}:\n        dealer_points = dealer_points + dealer_card_3\n    {print} 'The dealer has ' dealer_points ' points now'\n    {if} dealer_points < 21 {and} dealer_points > points:\n        {print} 'You lose'\n    {else}:\n        {print} 'You win'\n{elif} points > dealer_points {and} points < 21:\n    {print} 'You win!'\n```\n"
        name: Blackjack
        description: Try to get as close to 21 as you can
    years:
        name: New Year's
        levels:
            11:
                start_code: '# place your code here'
                story_text: "In this level you can use the `{for} i {in} {range}` command to countdown to the New Year.\n\n### Exercise\nFill in the blanks and make the code work!\n"
                example_code: "```\nfor _ in _ 10 to 1\n    {print} i\n{print} 'Happy New Year!'\n```\n"
        description: Contagem regressiva para o Ano Novo!
        default_save_name: New Year's Countdown
    pressit:
        levels:
            5:
                example_code: "```\n{print} 'Do you want a good (g) or bad (b) ending?'\n{if} g {is} {pressed} {print} 'They lived happily ever after ❤'\n{else} {print} 'The prince was eaten by a hippopotamus 😭'\n```\n"
                story_text: "In this level there is another new keyword: `{pressed}`!\nWith `{pressed}` you can use keys on your keyboard to control what lines are used.\n\n### Exercise\nLook at the example and add one more line of code that reacts to a key press.\n"
                story_text_2: "You can also link turtle commands to keys.\n\n### Exercise\nCopy the lines a few times so you can create a larger drawing.\n"
                start_code: '# place your code here'
                example_code_2: "```\n{if} y {is} {pressed} {forward} 15\n{else} {turn} 90\n```\n"
            7:
                story_text: "Now that you have learned about `{repeat}`, we can press keys multiple times.\nYou can use it to make the turtle walk forward and turn.\n\n### Exercise\nThe code you have seen in level 5 only checks the key once. Copy the example code and add a `{repeat}` to it, so that you can press the keys many times.\nUse this code to draw something nice.\n"
                example_code: "```\n{if} x {is} {pressed} {forward} 15 {else} {turn} 90\n```\n"
                start_code: '# place your code here'
            9:
                story_text: "Now that you know how to combine statements, you can create a touch type tool with `{pressed}`.\n\n### Exercise\nFinish the code. Each time a random letter should be chosen, which you have to press. You get a point for a correct press, and and two points deduction for a wrong press.\n**(extra)** Clear the screen after each letter, and show the user how many points they have scored.\n"
                example_code: "```\npoints = 0\nletters = a, b, c, d, e\n{repeat} 10 {times}\n    letter = _ _ _\n    {print} 'Press the letter ' letter\n    {if} letter {is} {pressed}\n    _\n    _\n    _\n```\n"
                start_code: '# place your code here'
        default_save_name: Pressed
        name: Key presses
        description: Try linking a keyboard key to a command!
    repeat_command_2:
        name: "{repeat} 2"
        description: repeat command 2
        default_save_name: repeat_command_2
        levels:
            7:
                story_text: "## Repeat with other commands and with variables\nYou have practiced the `{repeat}` command in combination with the `{print}` command now, but did you know you could also use other commands with `{repeat}` ?\nIn this example code you can see that `{repeat}` can also be used with an `{ask}`, `{if}` or `{else}` command.\n"
                story_text_2: "Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.\nThen, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.\n"
                example_code: "```\n{repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'\n{if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'\n{else} {repeat} 3 {times} {print} 'You have learned something new!'\n```\n"
                example_code_2: "```\n{print} 'Yay! It is your birthday!'\nage = {ask} 'How old are you now?'\n{repeat} age {times} {print} 'Hip Hip Hurray!'\n```\n"
                start_code: "{repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'\n{if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'\n{else} {repeat} 3 {times} {print} 'You have learned something new!'"
            8:
                story_text: "### In the block or not?\nIn this level you have to think carefully which lines of code should be in the block and which shouldn't.\nFor example: If you want to sing the song *the muffin man*. You only want the line with 'the muffin man' to be repeated twice.\nThis means the last line shouldn't start with indentation as it doesn't belong to the block.\nIf you do start the last line with indentation the song will turn out wrong.\n\n## Exercise\nEach line in the example code starts with a blank. Remove the blanks and try to figure out which line need indentation and which don't to make the muffin man song.\n"
                example_code: "```\n_ {print} 'Do you know the muffin man?'\n_ {repeat} 2 {times}\n_ {print} 'The muffin man'\n_ {print} 'Do you know the muffin man, who lives on Drury Lane?'\n```\n"
                start_code: "{repeat} 3 {times}\n    {print} 'This line will be repeated...'\n    {print} 'This one too...'\n{print} 'but this one will not!'"
    rock_2:
        name: Rock, paper, scissors 2
        description: Part 2 of rock, paper, scissors
        default_save_name: rock_2
        levels:
            2:
                story_text: "Now that you have learned how to use the `{ask} command, you can make your rock, paper, scissors code interavtive too!\n\n### Exercise\nMake the rock, paper, scissors code interactive by adding the `{ask}` command and a question to your rock, paper, scissors code.\n"
                example_code: "```\nchoice is _\n{print} I choose choice\n```\n"
                start_code: "# place your code here"
    harry_potter:
        name: Harry Potter
        levels:
            10:
                start_code: '# place your code here'
                story_text: "### Exercise\nWe can also make a Harry Potter themed fortune teller. Fill in blanks such that 9 lines are printed.\n**Extra** Change the theme of the fortune teller into something else, such as your favorite book, film or tv show.\n"
                example_code: "```\nhouses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw\nsubjects = potions, defence against the dark arts, charms, transfiguration\nfears = Voldemort, spiders, failing your OWL test\nnames = Harry, Ron, Hermione\n_\n_ {print} name ' is placed in ' houses {at} {random}\n_ {print} name ' is great at ' subjects {at} {random}\n_ {print} name 's greatest fear is ' fears {at} {random}\n```\n"
        description: Harry Potter adventures
        default_save_name: Harry Potter
    print_command:
        name: print
        description: Introduction print command
        default_save_name: print
        levels:
            1:
                story_text: "## The print command\nYou can print text to the screen using the `{print}` command.\n"
                story_text_2: "### Exercise\nIn Hedy you will find exercises in every adventure. An exercise allows you to practise the new commands and concepts, and lets you give your own twist to the example codes.\nIn this exercise you will see a pink blank space. You have to fill something in the place of the blank space before the code can be ran.\n\nFill in the `{print}` command in the blank space and then add five more lines of code. Each line has to start with a `{print}` command.\nHave fun!\n"
                example_code: "```\n{print} Hi there, programmer!\n{print} Welcome to Hedy!\n```\n"
                example_code_2: "```\n_ Hello!\n```\n"
                start_code: "{print} Welcome to Hedy!\n"
            17:
                start_code: "{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Ready or not, here I come!'"
                story_text: "Now we are going to change indentation a little bit. Every time that we need an indentation, we need `:` at the line before the indentation.\n"
                example_code: "```\n{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Ready or not, here I come!'\n```\n"
            18:
                start_code: "name = 'Hedy'\n{print}('My name is ', name)"
                story_text: "We arrived at real Python code! That means we need to use parentheses with `{print}` and `{range}` from now on.\nIt also means you can use Hedy code from this level in any Python environment as long as you use the English commands. If you haven't until now, you can switch the toggle in the commands menu to do so."
                example_code: "```\n{print}('Hello!')\n{for} i {in} {range}(1, 10):\n    {print}('This is line ', i)\n```\n"
                story_text_2: If you want to print more than one item, you need to separate them by commas.
                example_code_3: "```\n{print}('My name is Hedy!')\nname = {input}('What is your name?')\n{print}('So your name is ', name)\n```\n"
                example_code_2: "```\ntemperature = 25\n{print}('It is ', temperature, ' degrees outside')\n```\n"
                story_text_3: The final change we will need to make to get Python code is changing `{ask}` into `{input}`.
    ask_command:
        name: "{ask}"
        description: Introduction ask command
        default_save_name: ask_command
        levels:
            1:
                story_text: "## The ask command\nNow that you can use the `{print}` command, you are ready to learn the next command: `{ask}`. With the `{ask}` command, you can ask a question. Check it out:\n"
                example_code: "```\n{print} Hello!\n{ask} What is your name?\n```\n"
                story_text_2: "## The echo command\nIf you want the computer to repeat the answer back to you, you can use the `{echo}` command. Mind that the answer is echoed back at the end of the sentence, so it this example after hello.\n"
                story_text_3: "### Exercise\nTry out the `{ask}` and `{echo}` commands. Firstly, fill in the blanks to make this program work.\nThen ask 2 more questions using the `{ask}` command, after each `{ask}` use an `{echo}` to print the answer on the screen.\n"
                example_code_2: "```\n{print} Hello!\n{ask} What is your name?\n{echo} hello\n```\n"
                example_code_3: "```\n_ How are you doing?\n_\n```\n"
                start_code: "{print} Hello!\n{ask} What is your name?\n{echo} hello\n"
            2:
                story_text: "## The ask command\nNow that we can use **variables** in our codes, we no longer need the `{echo}` command.\nWe can use variables to store the answers to our questions and this way we can use the answer to multiple questions in our codes.\nCheck it out:\n\nThis way your code is becoming interactive!\n"
                example_code: "```\nname {is} {ask} What is your name?\n{print} Hello name\nage {is} {ask} How old are you?\n{print} name is age years old.\n```\n"
                story_text_2: "### Exercise\nIn the previous tab you have practised with setting variables with the `{is}` command.\nYou have created at least 3 variables and used them with a print command.\nNow, instead of setting the variables we want you to make the variables interactive, like we did in our example.\n\nCopy your code from the previous tab and make the variables interactive by using `{ask}` commands.\n"
                example_code_2: "```\nfavorite_animals is ask What is your favorite animal?\nprint I like favorite_animals\n```\n"
                start_code: "name {is} {ask} What is your name?\n{print} Hello name\nage {is} {ask} How old are you?\n{print} name is age years old."
    is_command:
        name: is
        description: introducing is command
        default_save_name: is_command
        levels:
            2:
                story_text: "## Variables\nYou can name a word with `{is}`. This is called a **variable**. In this example we made a variable called name and a variable called age. You can use the word name anywhere in your code and it will be replaced by Hedy, like this:\n"
                example_code: "```\nname {is} Hedy\nage {is} 15\n{print} name is age years old\n```\n"
                story_text_2: "### Exercise\nTime to make your own variables!\nIn the example code we made an example of the variable `favorite_animals`. In line 1 the variable is set, and in line 2 we haved used the variable in a print command.\nFirstly, finish our example by filling in your favorite animal in the blanks. Then make at least 3 of these codes yourself. Pick a variable, and set the variable with the {is} command. Then use it with a {print} command, just like we did.\n"
                example_code_2: "```\nfavorite_animals is _\n{print} I like favorite_animals\n```\n"
                start_code: "name {is} Hedy\nage {is} 15\n{print} name is age years old"
            14:
                start_code: "age = {ask} 'How old are you?'\n{if} age < 13\n    {print} 'You are younger than me!'\n{else}\n    {print} 'You are older than me!'"
                story_text: "We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.\nThe `<` checks if the first number is smaller than the second, for example age `<` 12 checks if age is smaller than 12.\nIf you want to check if the first number is smaller or equal to the second, you can use `<=`, for example age `<=` 11.\nThe `>` checks if the first number is bigger than the second, for example points `>` 10 checks if points is larger than 10.\nIf you want to check if the first number is bigger or equal to the second, you can use `>=`, for example points `>=` 11.\nYou use these comparisons in an `{if}`, like this:\n"
                example_code: "```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n"
                story_text_2: "From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:\n"
                example_code_2: "```\nname = {ask} 'What is your name?'\n{if} name == 'Hedy'\n    {print} 'You are cool!'\n```\n"
                story_text_3: "You can also compare if something is *not* equal to something else using `!=` like this:\n"
                example_code_3: "```\nname = {ask} 'What is your name?'\n{if} name != 'Hedy'\n    {print} 'You are not Hedy'\n```\n"
    random_command:
        name: random
        description: introducing at random command
        default_save_name: random_command
        levels:
            3:
                story_text: "## At random\nIn this level you can make a list using the `{is}` command. You can let the computer choose a random item from that list. You do that with `{at} {random}`.\n"
                example_code: "```\nanimals {is} dogs, cats, kangaroos\n{print} animals {at} {random}\n```\n"
                story_text_2: "You can use the `{at} {random}` command in a sentence as well.\n"
                example_code_2: "```\nfood {is} sandwich, slice of pizza, salad, burrito\n{print} I am going to have a food {at} {random} for lunch.\n```\n"
                start_code: "animals {is} dog, cat, kangaroo\n{print} animals {at} {random}\n"
                story_text_3: "### Exercise\nTry out the `{at} {random}` command by making your own gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!\nCan you do it? We have already put the first lines into the example code.\n"
                example_code_3: "```\n{print} The big gameshow!\n{print} There are 3 suitcases in front of you...\nchosen {is} {ask} Which suitcase do you choose?\nprices {is} _\n_\n```\n"
            16:
                start_code: "fruit = ['apple', 'banana', 'cherry']\n{print} fruit[random]"
                story_text: "We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.\nWe use square brackets to point out a place in a list. The {at} {random} command can not be used anymore."
                example_code: "```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
    add_remove_command:
        name: add and remove
        description: introducing add to and remove from
        default_save_name: add_remove_command
        levels:
            3:
                story_text: "## Add to\nYou can add items to the list with the `{add} {to}` command. To add an item to a list you can simply type: `{add} penguin {to} animals` or you can use the `{ask}` command like in the example code.\n"
                example_code: "```\nanimals {is} dog, cat, kangaroo\nlike {is} {ask} What is your favorite animal?\n{add} like {to_list} animals\n{print} I choose animals {at} {random}\n```\n"
                story_text_2: "## Remove from\nIf you can add items to a list, of course you can also take them off. This is done with the `{remove} {from}` command.\n"
                example_code_2: "```\nanimals {is} dog, cat, kangaroo\ndislike {is} {ask} What animal do you not like?\n{remove} dislike {from} animals\n{print} I choose animals {at} {random}\n```\n"
                story_text_3: "### Exercise\nTry out the new commands in this virtual restaurant. Add the flavor the player is hpoing for to the list and remove the flavors they are allergic to.\n"
                example_code_3: "```\n{print} Mystery milkshake\nflavors {is} strawberry, chocolate, vanilla\nhope {is} {ask} What flavor are you hoping for?\n_\nallergies {is} {ask} Are you allergic to any flavors?\n_\n{print} You get a flavors {at} {random} milkshake\n```\n"
                start_code: "animals {is} dog, cat, kangaroo\nlike {is} {ask} What is your favorite animal?\n{add} like {to_list} animals\ndislike {is} {ask} What animal do you not like?\n{remove} dislike {from} animals\n{print} I choose animals {at} {random}"
    sleep_command:
        name: sleep
        description: introducing sleep command
        default_save_name: sleep_command
        levels:
            2:
                story_text: "## The sleep command\nAnother new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.\n"
                example_code: "```\n{print} My favorite colour is...\n{sleep} 2\n{print} green!\n```\n"
                start_code: "{print} My favorite colour is...\n{sleep} 2\n{print} green!"
    if_command:
        name: if else
        description: Introducing the if command
        default_save_name: if_command
        levels:
            5:
                story_text: "## If... else....\nIn level 5 there is something new, the `{if}`! With the `{if}` you can choose between two different options.\nThis code prints nice if you enter Hedy as a name, and boo! if you enter something else.\n`{ask}` and `{print}` still work like they did in level 4.\n"
                example_code: "```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'\n```\n"
                story_text_2: "Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:\n"
                example_code_2: "```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice'\n{else} {print} 'boo!'\n```\n"
                story_text_3: "### Exercise\nTry to create your own code with `{if}` and `{else}`. You can use the example code if you want.\n"
                example_code_3: "```\nanswer {is} {ask} '2 + 2 = ?'\n_ _ _ 4 _ 'Great job!'\n_ _ 'No 2 + 2 = 4'\n```\n"
                start_code: "name {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice'\n{else} {print} 'boo!'"
            8:
                start_code: "name {is} {ask} 'What is your name?'\n{if} name {is} Hedy\n    {print} 'Welcome Hedy'\n    {print} 'You can play on your computer!'\n"
                example_code: "```\nname {is} {ask} 'What is your name?'\n{if} name {is} Hedy\n    {print} 'Welcome Hedy'\n    {print} 'You can play on your computer!'\n```\n"
                story_text: "## If... Else...\nYou have learned to repeat a block of lines of code after a `{repeat}` command.\nNow you can also use indentation to make blocks after a {if} or {else} command.\nCheck out the example code.\n\n### Exercise\nAdd an {else} command to the example code. Make a block of line using indentation. You do this by starting each line with 4 spaces.\n"
    in_command:
        name: in
        description: Introducing the in command
        default_save_name: in_command
        levels:
            5:
                story_text: "## Lists\nWhen we want to check if something is in a list, we can now use the `{in}` command.\nThis code prints pretty! if you choose green or yellow, and meh otherwise.\n"
                example_code: "```\npretty_colors {is} green, yellow\nfavorite_color {is} {ask} 'What is your favorite color?'\n{if} favorite_color {in} pretty_colors {print} 'pretty!'\n{else} {print} 'meh'\n```\n"
                story_text_2: "### Exercise\nFinish the example code by filling in the blanks with commands that you've learned.\nWhen you've finished the code, try to create a code of your own and use a question that you've thought of yourself.\n"
                example_code_2: "```\nanimals is dog, cow, sheep\nanswer is ask 'What is your favorite animal?'\n_ answer _ animals _ 'Mine too!'\n_ _ 'My favorite animals are dogs, cows and sheep'\n```\n"
                start_code: "pretty_colors {is} green, yellow\nfavorite_color {is} {ask} 'What is your favorite color?'\n{if} favorite_color {in} pretty_colors {print} 'pretty!'\n{else} {print} 'meh'"
    quotation_marks:
        name: "'quotation marks'"
        description: Introduction quotation marks
        default_save_name: quotation_marks
        levels:
            4:
                story_text: "## 'Quotation marks'\nIn level 4 `{ask}` and `{print}` have changed.\nYou must put text that you want to print between quotation marks.\nThis is useful, because now you can print all the words you want. Also the words you used to store something with `{is}`.\nMost programming languages also use quotation marks when printing, so we are also getting a step closer to real programming!\n"
                story_text_2: "## Contractions\nImportant! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.\nMake sure to remove those apostrophes and change the spelling to I am or What is.\nCheck out the example code to see the wrong way of using apostrophes.\n"
                example_code: "```\n{print} 'You need to use quotation marks from now on!'\nanswer {is} {ask} 'What do we need to use from now on?'\n{print} 'We need to use ' answer\n```\n"
                example_code_2: "```\n_ This is the wrong way of using apostrophes _\n{print} 'I'm babysitting my sister's kids'\n{print} 'What's more fun than that?'\n```\n"
                start_code: "{print} 'You need to use quotation marks from now on!'\nanswer {is} {ask} 'What do we need to use from now on?'\n{print} 'We need to use ' answer"
            12:
                story_text: "**All texts need to be in quotation marks**\nFor this level on you will also have to use quotation marks when storing a text with `=`:\n"
                example_code: "```\nname = 'Hedy the Robot'\n{print} 'Hello ' name\n```\n"
                story_text_2: "**All items in lists need quotation marks too**\nLists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.\nThis allows you to save two words as 1 item on the list, for example 'Iron Man'.\n"
                example_code_2: "```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n"
                story_text_3: "**All text after `{if}` comparisons need quotation marks too**\n"
                example_code_3: "```\nname = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n"
                story_text_4: "**Numbers don't need quotation marks**\nFor numbers, you do not use quotation marks in the `=`:\n"
                example_code_4: "```\nscore = 25\n{print} 'You got ' score\n```\n"
                start_code: "name = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'"
    repeat_command:
        name: "{repeat}"
        description: repeat command
        default_save_name: repeat_command
        levels:
            7:
                story_text: "## Repeat! Repeat! Repeat!\nLevel 7 adds the `{repeat}` command.  `{repeat}` can be used to execute one line of code multiple times. Like this:\n\n### Exercise\nPlay around with the repeat command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?\n"
                example_code: "```\n{repeat} 3 {times} {print} 'Hedy is fun!'\n```\n"
                start_code: "{print} 'happy birthday to you'\n{print} 'happy birthday to you'\n{print} 'happy birthday dear Hedy'\n{print} 'happy birthday to you'\n"
            8:
                start_code: "{repeat} 5 {times}\n    {print} 'Hello everyone'\n    {print} 'This will be printed 5 times'"
                story_text: "### Repeat commands and indentation\nIn this level you can repeat multiple lines of code with only 1 repeat command.\nYou do this by making a block of lines that you want to repeat.\nThe lines in this block will need **indentation** .\nThat means putting four spaces at the beginning of each line. You will also have to indent when you just want to create a block of one line.\n"
                example_code: "```\n{repeat} 5 {times}\n    {print} 'Hello everyone'\n    {print} 'This is all repeated 5 times'\n```\n"
            9:
                start_code: "{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    {else}\n        {print} 'pizza is better'"
                story_text: "In this level you can not only use multiple lines with `{if}` and `{repeat}`, but you can also put them together!\nIn the example you see an `{if}` command within a `{repeat}` command. It is also allowed the other way around, and an `{if}` is also allowed in an `{if}` and a `{repeat}` in a `{repeat}`.\nGive it a try!\n"
                example_code: "```\n{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    {else}\n        {print} 'pizza is better'\n```\n"
    for_command:
        name: for
        description: for command
        default_save_name: for
        levels:
            10:
                start_code: "animals {is} dog, cat, blobfish\n{for} animal {in} animals\n    {print} 'I love ' animal"
                story_text: "## For\nIn this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.\n`{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with 4 spaces."
                example_code: "```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n    {print} 'I love ' animal\n```\n"
            11:
                start_code: "{for} counter {in} {range} 1 {to} 5\n    {print} counter"
                story_text: "In this level, we add a new form of the `{for}`. In earlier levels, we used `{for}` with a list, but we can also use `{for}` with numbers.\nWe do that by adding a variable name, followed by  `{in}` `{range}`. We then write the number to start at, `{to}` and the number to end at.\n\nTry the example to see what happens! In this level again, you will need to use indentations in lines below the `{for}` statements."
                example_code: "```\n{for} counter {in} {range} 1 {to} 5\n    {print} counter\n```\n"
    maths:
        name: maths
        description: Introducing maths
        default_save_name: maths
        levels:
            6:
                start_code: "{print} '5 times 5 is ' 5 * 5"
                story_text: "## 1 + 1\nIn this level you learn something new: you can now also calculate.\n\nThe plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.\n\nThe times is a bit different, because there is no times symbol on your keyboard. Just search, there really isn't!\nThat is why we multiply with the asterisk above 8: `5 * 5`. Read that as \"5 times 5\" that helps you remember it best.\n"
                example_code: "```\n{print} '5 plus 5 is ' 5 + 5\n{print} '5 minus 5 is ' 5 - 5\n{print} '5 times 5 is ' 5 * 5\n```\n"
                story_text_2: "We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:\n"
                example_code_2: "```\nname = Hedy\nanswer = 20 + 4\n```\n"
            12:
                start_code: "{print} 'decimal numbers now need to use a dot'\n{print} 2.5 + 2.5"
                story_text: "**Decimal numbers**\nSo far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers."
                example_code: "```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n"
    and_or_command:
        name: and or
        description: introducing and or
        default_save_name: and or
        levels:
            13:
                start_code: "name = {ask} 'what is your name?'\nage = {ask} 'what is your age?'\n{if} name {is} 'Hedy' {and} age {is} 2\n    {print} 'You are the real Hedy!'"
                story_text: "We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two `{if}`s but can use `{and}` and `{or}`.\n\nIf you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct."
                example_code: "```\nname = {ask} 'what is your name?'\nage = {ask} 'what is your age?'\n{if} name {is} 'Hedy' {and} age {is} 2\n    {print} 'You are the real Hedy!'\n```\n"
    while_command:
        name: while
        description: while
        default_save_name: while_command
        levels:
            15:
                start_code: "answer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'"
                story_text: "We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.\nSo don't forget to change the value in the loop.\n\nIn the example code, we continue until a correct answer has been given.\nIf the correct answer is never given, the loop never ends!"
                example_code: "```\nanswer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'\n```\n"
    elif_command:
        name: "{elif}"
        description: elif
        default_save_name: elif
        levels:
            17:
                story_text: "In this level you can also use a new command: `{elif}`. `{elif}` is short for `{else}` `{if}` and you need it when you want to make 3 (or more!) options.\nCheck it out!\n"
                example_code: "```\nprices = ['1 million dollars', 'an apple pie', 'nothing']\nyour_price = prices[{random}]\n{print} 'You win ' your_price\n{if} your_price == '1 million dollars' :\n    {print} 'Yeah! You are rich!'\n{elif} your_price == 'an apple pie' :\n    {print} 'Lovely, an apple pie!'\n{else}:\n    {print} 'Better luck next time..'\n```\n"
                start_code: "prices = ['1 million dollars', 'an apple pie', 'nothing']\nyour_price = prices[{random}]\n{print} 'You win ' your_price\n{if} your_price == '1 million dollars' :\n    {print} 'Yeah! You are rich!'\n{elif} your_price == 'an apple pie' :\n    {print} 'Lovely, an apple pie!'\n{else}:\n    {print} 'Better luck next time..'"
