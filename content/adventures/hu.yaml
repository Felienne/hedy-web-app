adventures:
    story:
        name: A t√∂rt√©net
        default_save_name: T√∂rt√©net
        description: K√©sz√≠ts egy interakt√≠v t√∂rt√©netet
        levels:
            1:
                story_text: |
                    Az 1. szinten elk√©sz√≠thetsz egy t√∂rt√©netet egy m√°sik f≈ëszerepl≈ëvel, amelyet te magad adsz meg.

                    Az els≈ë sorba √≠rt `{ask}` bek√©ri a t√∂rt√©net f≈ëszerepl≈ëj√©nek a nev√©t.

                    Az els≈ë sor ut√°n kezdd a `{print}` utas√≠t√°ssal, ha a mondatot ki kell √≠ratni.
                    Akkor haszn√°ld az `{echo}` parancsot, ha azt szeretn√©d, hogy f≈ëszerepl≈ë neve a mondat v√©g√©n legyen.
                example_code: |
                    ```
                    {ask} A t√∂rt√©net f≈ëszerepl≈ëje
                    {print} A f≈ëszerepl≈ë most az erd≈ëben fog s√©t√°lni
                    {echo} Kicsit f√©l, szeg√©ny
                    {print} ≈êr√ºlt zajokat hall minden√ºtt
                    {print} F√©l, hogy ez egy k√≠s√©rtet-j√°rta erd≈ë
                    ```
                story_text_2: |
                    Tudsz saj√°t t√∂rt√©netet √≠rni Hedy-ben a `{print}` , `{ask}` √©s `{echo}` haszn√°lat√°val?
            2:
                story_text: |+
                    A 2. szinten sz√≥rakoztat√≥bb√° teheted a t√∂rt√©netedet. F≈ë karaktered neve mostant√≥l
                    b√°rhol lehet a mondatban.

                    Ehhez egy kicsit fel kell jav√≠tanod a k√≥dodat. Most el≈ësz√∂r el kell nevezned a f≈ëszerepl≈ëdet. Olyan nevet v√°lassz, amely nem tartalmaz √©kezetes bet≈±t.

                    Ezt a nevet b√°rhol elhelyezheted a mondatban.

                example_code: |
                    ```
                    nev is ask Mi a neve a f≈ëszerepl≈ënek?
                    print nev most futni fog az erd≈ëben
                    print nev kiss√© f√©l
                    print ≈êr√ºlt zajokat hall minden√ºtt
                    print nev f√©l hogy ez egy k√≠s√©rtetj√°rta erd≈ë
                    ```
                story_text_2: |
                    ### Exercise
                    Now it's time to add variables to your own story that you've made in the previous level.
                    Go to 'My programs', look for your level 1 story adventure and copy the code. Paste the code in your input screen in this level.

                    This code won't work in this level, because you have not used variables yet.
                    Change the `{ask}` commands and `{echo}` commands in your code to the correct form that you've learned in this level.

                    **Extra** Add a sleep command to your code to build up tension in your story.
            3:
                story_text: |
                    In level 3 you can make your story more fun. Hozz√°adhatsz valami v√©letlenszer≈±t is a t√∂rt√©net√©hez. B√°rmilyen sz√∂rnyet, √°llatot vagy m√°s akad√°lyt.
                example_code: |
                    ```
                    allatok is bagoly, s√ºndiszn√≥, tatu
                    print Most hallja a allatok at random hangj√°t
                    ```
                story_text_2: |
                    The command `{add}` can also come in handy in your story. For example
                story_text_3: |
                    This is an example of the `{remove}` command in your story
            5:
                story_text: |-
                    Amit a 4. szinten megtehetsz, az m√©g sz√≥rakoztat√≥bb√° var√°zsolja t√∂rt√©netedet. A 4.
                    szinten a t√∂rt√©nethez k√ºl√∂nb√∂z≈ë v√©gz≈ëd√©seket programozhatsz.
                    Gondolj p√©ld√°ul a t√∂rt√©net k√©t k√ºl√∂nb√∂z≈ë v√©g√©re:
                    - A hercegn≈ë s√©t√°l az erd≈ën
                    - √ñsszefut egy sz√∂rnyeteggel
                    - Boldog befejez√©s: El≈ëveszi a kardj√°t, √©s a sz√∂rny gyorsan elszalad
                    - Rossz befejez√©s: A sz√∂rny megeszi a hercegn≈ët
                    Biztos√≠thatod azt is, hogy egy n√©v √∫jra be√≠rhat√≥ legyen. Ez ugyan√∫gy m≈±k√∂dik, mint a 3.
                    szinten. Kombin√°lhatod ezt egy `if`-fel, √©s akkor m√°r k√©sz√≠tett√©l is egy eg√©sz programot!
                example_code: |-
                    ```
                    nev is ask 'Ki j√°r az erd≈ëben?'
                    print nev ' s√©t√°l az erd≈ën'
                    print nev ' tal√°lkozik egy sz√∂rnnyel'
                    vege is ask ' Egy j√≥ vagy rossz v√©get szeretn√©l?'
                    if vege is j√≥ print nev ' el≈ëveszi a kardot √©s a sz√∂rny gyorsan elszalad' else print 'A sz√∂rny megeszi ' nev '-t'
                    ```
            7:
                story_text: |-
                    A t√∂rt√©netben valaki bizonyos szavakat t√∂bbsz√∂r is elmond. P√©ld√°ul, ha valaki seg√≠ts√©get k√©r vagy el√©nekel egy dalt.
                    Az ilyen ism√©tl√©st be√≠rhatod a 6. szintbe tartoz√≥ t√∂rt√©netbe a 'repeat' paranccsal.
                example_code: |-
                    ```
                    print 'A herceg folyamatosan seg√≠ts√©get k√©rt'
                    repeat 5 times print 'Seg√≠ts√©g!'
                    print 'Mi√©rt nem seg√≠t nekem senki?'
                    ```
            8:
                story_text: |
                    In this level you can use multiple lines in your {if} commands, this way you can upgrade your happy or sad ending!
                example_code: |
                    ```
                    {print} 'OH NO! The T-rex is closing in!'
                    end = {ask} 'Do you want a happy or a sad ending?'
                    {if} end {is} happy
                        {print} 'Just in time Richard jumps back into the time machine!'
                        {print} 'Michael types in the code and...'
                        {print} 'üí•ZAP!üí•'
                        {print} 'They are back in their garage'
                    {else}
                        {print} 'Michael yells COME ON RICHARD! RUN FASTER!'
                        {print} 'But Richard is too slow...'
                        {print} 'The T-rex closes in and eats him in one big bite!ü¶ñ'
                    ```
            9:
                story_text: |
                    In this level you can use nesting to put {if}, {repeat} or {for} commands inside other {if}, {repeat} or {for} commands. This gives you many options and really helps you to make your story interactive.
                example_code: |
                    ```
                    {print} 'Robin is walking downtown'
                    location = {ask} 'Is Robin going into a shop, or does she go home?'
                    {if} location {is} shop
                        {print} 'She enters the shop.'
                        {print} 'Robin sees an interesting looking book'
                        book = {ask} 'Does Robin buy the book?'
                        {if} book {is} yes
                            {print} 'Robin buys the book and goes home'
                        {else}
                            {print} 'Robin leaves the shop and goes home'
                    {else}
                        {print} 'Robin goes home'
                    ```
            10:
                story_text: |
                    In this level you can use the {for} command in your story. In this way you could easily program the children's book 'brown bear, brown bear, what do you see'.
                example_code: |
                    ```
                    animals = red bird, black sheep, green frog, yellow duck, little child
                    {print} 'brown bear'
                    {print} 'brown bear'
                    {print} 'What do you see?'
                    {for} animal {in} animals
                        {print} 'I see a ' animal ' looking at me'
                        {print} animal
                        {print} animal
                        {print} 'What do you see?'
                    {print} 'I see all the animals looking at me!'
                    ```
            12:
                story_text: |
                    In this level you can use the quotation marks to save multiple words in a variable.
                example_code: |
                    ```
                    name = 'The Queen of England'
                    {print} name ' was eating a piece of cake, when suddenly...'
                    ```
            13:
                story_text: |
                    By using the `{and}` and `{or}` commands, you can shorten your stories. For example, check out the dragon story.
                example_code: |
                    ```
                    sword = 'lost'
                    game = 'on'
                    {print} 'Our hero is walking through the forest'
                    {print} 'The path splits two ways'
                    {for} i {in} {range} 0 {to} 2
                        {if} game {is} 'on'
                            path = {ask} 'Which path should she choose?'
                            {if} path {is} 'left' {and} sword {is} 'found'
                                {print} 'Our hero comes across a dragon!'
                                {print} 'Luckily our hero has a sword to defeat the beast!'
                                game = 'over'
                            {if} path {is} 'left' {and} sword {is} 'lost'
                                {print} 'Our hero finds a dragon, but she doesnt have any weapons!'
                                {print} 'Our hero is beaten by the dragon...'
                                {print} 'Try again'
                                game = 'over'
                            {if} path {is} 'right' {and} sword {is} 'found'
                                {print} 'You have already found the sword. There is nothing left here.'
                                {print} 'She walks back'
                            {if} path {is} 'right' {and} sword {is} 'lost'
                                {print} 'Our hero finds a sword'
                                {print} 'This could come in very handy'
                                sword = 'found'
                    ```
            15:
                example_code: |
                    ```
                    keys = 'lost'
                    {print} 'You are standing in your garden and you have lost your keys.'
                    {print} 'Where do you want to look for them?'
                    {print} 'You can choose: tree, flowerbed, rock, postbox'
                    {while} keys == 'lost'
                        location = {ask} 'Where do you want to look?'
                        {if} location == 'flowerbed'
                            {print} 'Here they are!'
                            keys = 'found'
                        {else}
                            {print} 'Nope they are not at the ' location
                    {print} 'Now you can enter the house!'
    add_remove_command:
        name: '{add} {to} & {remove} {from}'
        description: introducing add to and remove from
        levels:
            3:
                story_text: |
                    ## Add to
                    You can add items to the list with the `{add} {to_list}` command. To add an item to a list you can simply type: `{add} penguin {to} animals` or you can use the `{ask}` command like in the example code.
                story_text_3: |
                    ### Exercise
                    Try out the new commands in this virtual restaurant. Add the flavor the player is hpoing for to the list and remove the flavors they are allergic to.
    and_or_command:
        description: introducing and or
    ask_command:
        description: Introduction ask command
        levels:
            1:
                story_text_2: |
                    ## The echo command
                    If you want the computer to repeat the answer, you can use the `{echo}` command. The answer will then be echoed back at the end of the sentence, so in this example after hello.
    calculator:
        name: Sz√°mol√≥g√©p
        default_save_name: Sz√°mol√≥g√©p
        description: K√©sz√≠ts sz√°mol√≥g√©pet
        levels:
            6:
                story_text: |-
                    Most, hogy tudsz sz√°molni, l√©trehozhatsz egy programot is a matematikai sz√°m√≠t√°sok gyakorl√°s√°hoz. A sz√°m√≠t√°sokat magad is elk√©sz√≠theted, p√©ld√°ul:
                    Azt is enged√©lyezheted, hogy a sz√°m√≠t√≥g√©p v√©letlenszer≈± sz√°m√≠t√°sokat v√©gezzen v√©letlensz√°mok haszn√°lat√°val.

                    √çgy v√°lassz ki p√°r t√°bl√°zatot a gyakorl√°shoz, √©s ett≈ël mindig m√°s eredm√©nyt kapsz
                example_code: |-
                    ```
                    jo_valasz = 11 * 27
                    valasz = ask 'Mennyi 11 √©s 27 szorzata?'
                    if valasz is jo_valasz print 'nagyszer≈±!'
                    else print 'Nem j√≥! Ennyi: ' jo_valasz
                    ```
                story_text_2: |
                    You can also let the computer do random calculations on its own using {random}.
                example_code_2: |-
                    ```
                    tablazat = 4, 5, 6, 8
                    szamok = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    tabla = tablazat at random
                    szam = szamok at random
                    jo_valasz = tabla * szam
                    valasz = ask 'Mennyi ' tabla ' √©s ' szam ' szorzata?'
                    if valasz is jo_valasz print 'rendben'
                    else print 'hiba! ennyi: ' jo_valasz
                    ```
                story_text_3: |
                    You can also let the computer do random calculations on its own using {random}.
                example_code_3: |
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number_1 = _
                    number_2 = _
                    correct_answer = number_1 * number_2
                    given_answer = 'What is ' number_1 ' times ' number_2 '?'
                    {if} _
                    {else} _
            9:
                story_text: A 6. szinten megtanultad a sz√°mol√≥g√©p k√©sz√≠t√©s√©t, a 7. szinten kib≈ëv√≠theted ezt a k√≥dot, √©s egy kis matematikai j√°t√©kot k√©sz√≠thetsz bel≈ële. Mint ez...
                example_code: |-
                    ```
                    pontszam = 0
                    repeat 10 times
                        szamok = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        szam1 = szamok at random
                        szam2 = szamok at random
                        helyesvalasz = szam1 * szam2
                        print 'Mennyi ' szam1 ' * ' szam2 '?'
                        valasz = ask 'G√©peld ide a v√°laszodat...'
                        print 'A v√°laszod: ' valasz
                        if valasz is helyesvalasz
                            pontszam = pontszam + 1
                    print 'Sz√©p munka! A pontsz√°mod... ' pontszam ' a 10-b≈ël!'
                    ```
            11:
                example_code: |
                    ```
                    number = 10
                    {for} i {in} {range} 1 to 10
                        {print} i * number
                    ```
            12:
                story_text: |
                    Now you can make a calculator that works for decimal numbers.
                example_code: |
                    ```
                    number1 = {ask} 'What is the first number?'
                    number2 = {ask} 'What is the second number?'
                    answer = number1 + number2
                    {print} number1 ' plus ' number2 ' is ' answer
            14:
                example_code: |
                    ```
                    {define} calculate_mean_grade
                        total = 0
                        {for} i {in} {range} 1 {to} 4
                            grade = {ask} _
                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
                    ```

                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
    clear_command:
        description: clear command
    debugging:
        levels:
            3:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    movie_choices {is} dracula, fast and furious, home alone, barbie
                    chosen_movie {is} movies {at} {random}
                    {print} Tonight we will watch chosen _movies
                    like {ask} Do you like that movie?
                    {print} Tomorrow we will watch something else.
                    {add} chosen_movie {to} movie_choices
                    {print} Tomorrow we will watch tomorrows_movie
                    tomorrows_movie {is} movie_choices {at} {random}
                    I'll go get the popcorn! {print}
                    ```
            7:
                story_text: |-
                    ### Exercise
                    Surprise! This program looks more like an output than a code. And yet, we don't want you to just add `{print}` commands in front of each line.
                    Fix this program to turn it into the nursery rhyme 'Brother John (Fr√®re Jaques)' by using the {repeat} command of course!
            8:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to Manicures and Pedicures by Hedy'
                    bodypart = {ask} 'Are you getting your fingernails or toenails done today? Or both?'
                    {if} bodyparts {is} both
                            {print} That will be $25'
                            price = 25
                        {else}
                            {print} That will be $18'
                            price = 18
                    color = {ask} What color would you like?
                    sparkles = {ask} 'Would you like some sparkles with that?'
                    {if} sparkles {is} yes
                        {print} 'We charge $3 extra for that'
                    price = price + 3
                    {else} {print} 'No sparkles' {print} 'So no extra charge'
                    {sleep} 5
                    {print} 'All done! That will be $' price ' please!'
                    {print} 'Thank you! Byebye!'
                    ```
            9:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to our sandwich shop'
                    amount 'How many sandwiches would you like to buy?'
                    {repeat} amount {times}
                    {ask} {is} {ask} 'What kind or bread would you like your sandwich to be?'
                    types_of_bread {is} white, wheat, rye, garlic, gluten free
                    {if} chosen_bread in types_of_bread
                    {print} 'Lovely!'
                    {else}
                    'I'm sorry we don't sell that'
                    topping {is} {ask} 'What kind of topping would you like?'
                    sauce {is} {ask} 'What kind of sauce would you like?'
                    {print} One chosen_bread with topping and sauce.
                    price = amount * 6
                    {print} 'That will be 'price dollar' please'
                    ```

                    price = amount * 6
                    {print} 'That will be 'price dollar' please'
            10:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    names = Muad Hasan Samira Noura
                    activities = fly a kite, go swimming, go hiking, catch tan in the sun
                    {for} name {is} names
                    {print} At the beach name loves to activity at random
                    ```
            11:
                story_text: |-
                    ### Exercise
                    Debug this calender program. The output of this program is supposed to look like a list of dates.
                    For example:

                    ```
                    Hedy calender
                    Here are all the days of November
                    November 1
                    November 2
                    November 3
                    ```
                    And so on.

                    Mind that you have to test your code extra carefully for the month February, because the amount of days in this month changes in leap years.
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    print 'Hedy calender'
                    months_with_31 days = January, March, May, July, September, October, December
                    months_with_30_days = April, June, August, November
                    month = ask 'Which month would you like to see?'
                    if month in months_with_31_days
                        days = 31
                        if month in months_with30_days
                            days = 30
                    if month = February
                        leap_years = 2020, 2024, 2028, 2036, 2040, 2044, 2028
                        year = ask 'What year is it?'
                    if year in leap_years
                        days = 29
                    else
                        days = 28

                    print 'Here are all the days of ' moth
                    for i in range 1 to days
                        print month i
                    ```
            12:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define greet
                    greetings = 'Hello', 'Hi there', 'Goodevening'
                        print greetings at random

                    define take_order
                        food = ask 'What would you like to eat?'
                        print 'One food'
                        drink = 'What would you like to drink?'
                        print 'One ' drink
                        more = ask 'Would you like anything else?'
                            if more is 'no'
                        print 'Alright'
                            else
                            print 'And ' more
                    print 'Thank you'

                    print 'Welcome to our restaurant'
                    people = ask 'How many people are in your party tonight?'
                    for i in range 0 to people
                        call greet_costumer
                    ```
            13:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    defin movie_recommendation with name
                        action_movies == 'Die Hard', 'Fast and Furious', 'Inglorious Bastards'
                        romance_movies = 'Love Actually', 'The Notebook', 'Titanic'
                        comedy_movies = 'Mr Bean' 'Barbie''Deadpool'
                        kids_movies = 'Minions', 'Paddington', 'Encanto'
                        if name is 'Camila' or name is 'Manuel'
                            recommended_movie = kids_movie at random
                        if name is 'Pedro' or 'Gabriella'
                                mood = ask 'What you in the mood for?'
                            if mood is 'action'
                                recommended_movie = comedy_movies at random
                            if mood is 'romance'
                                recommended_movie = romance_movies
                        if mood is 'comedy'
                                recommended_movie = comedy_movies at random

                    print 'I would recommend ' recommended_movie ' for ' name

                    name = ask 'Who is watching?'
                    recommendation = ask 'Would you like a recommendation?'
                    if recommendaion is 'yes'
                    print movie_recommendation with name
                    else
                    print 'No problem!'
                    ```
            14:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define calculate_heartbeat
                        print 'Press your fingertips gently against the side of your neck'
                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
                    ```

                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
            15:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    names = 'Tanya', 'Romy', 'Kayla', 'Aldrin', 'Ali'
                    verbs='walking', 'skipping', 'cycling', 'driving', 'running'
                    locations = 'on a mountaintop', 'in the supermarket', 'to the swimming pool'
                    hiding_spots = 'behind a tree', under a table', in a box'
                    sounds = 'a trumpet', 'a car crash', 'thunder'
                    causes_of_noise = 'a television', 'a kid with firecrackers', 'a magic elephant', 'a dream'

                    chosen_ name = names at random
                    chosen_verb = verbs at random
                    chosen_location = 'locations at random'
                    chosen_sounds = noises at random
                    chosen_spot = hiding_spots random
                    chosen_causes = causes_of_noise at random

                    print chosen_name ' was ' chosen_verb ' ' chosen_location
                    print 'when they suddenly heard a sound like ' sounds at random
                    print chosen_name ' looked around, but they couldn't discover where the noise came from'
                    print chosen_name ' hid ' chosen_spot'
                    print 'They tried to look around, but couldn't see anything from there'
                    hidden = 'yes'
                    while hidden = 'yes'
                        print chosen_name 'still didn't see anything'
                    answer = ask 'does ' chosen_name ' move from their hiding spot?'
                        if answer = 'yes'
                            hidden == 'no'
                    print 'chosen_name moved from' chosen_spot
                    print 'And then they saw it was just' chosen_cause
                    print chosen_name 'laughed and went on with their day'
                    print The End
                    ```
            16:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    country = ['The Netherlands', 'Poland', 'Turkey', 'Zimbabwe', 'Thailand', 'Brasil', 'Peru', 'Australia', 'India', 'Romania' ]
                    capitals = 'Amsterdam', 'Warshaw' 'Istanbul', 'Harare', 'Bangkok', 'Brasilia', 'Lima', 'Canberra', 'New Delhi', 'Bucharest'
                    score = 0
                    for i in range 0 to 10
                        answer = ask 'What's the capital of ' countries[i]
                        correct = capital[i]
                        if answer = correct
                            print 'Correct!'
                        score = score + 1
                        else
                            print 'Wrong,' capitals[i] 'in the capital of' countries[i]
                        print 'You scored ' score ' out of 10'

                    ```
            17:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define food_order
                        toppings = ask 'pepperoni, tuna, veggie or cheese?'
                        size = ask 'big, medium or small?'
                        number_of_pizza = ask 'How many these pizzas would you like?'

                        print 'YOU ORDERED'
                        print number_of_pizzas ' size  ' topping ' pizza'

                    define drinks_order
                        drink = ask 'water, coke, icetea, lemonade or coffee?'
                        number_of_drinks = ask 'How many of these drinks would you like?'

                        print 'YOU ORDERED'
                        print number_of_drinks ' ' drink

                    'Welcome to Hedy pizza'
                    more_food = ask 'Would you like to order a pizza?'
                    while more_food = 'yes'
                        return food_order
                        more_food = ask 'Would you like to order a pizza?'
                    more_drinks = ask 'Would you like to order some drinks?'
                    while more_drinks == 'yes'
                        call drink_order
                        more_drinks == ask 'Would you like to order more drinks?'


                    print 'Thanks for ordering!'
                    ```
            18:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    for i in range 1 to 3
                        animal = animals[i]
                        sound = sounds[i]
                        print 'Old MacDonald had a farm'
                        print 'E I E I O!'
                        print 'and on that farm he had a ' animal
                        print 'E I E I O!'
                        print 'with a ' sound sound ' here'
                        print 'and a ' sound sound ' there'
                        print 'here a ' sound
                        print 'there a ' sound
                        print 'everywhere a ' sound sound
                    ```
    default:
        name: Bevezet≈ë
        description: Szint magyar√°zat
        levels:
            1:
                story_text: "Az els≈ë szinten a `{print}`, `{ask}` √©s `{echo}` parancsokat haszn√°lhatod.\n√çrd a k√≥dodat a programoz√°si ablakba, vagy nyomd meg a gombot a p√©lda programok mellett, hogy bem√°sold!\nPr√≥b√°ld ki a k√≥dot a z√∂ld 'K√≥d futtat√°sa' gomb megnyom√°s√°val a programoz√°si ablak alatt!\n\nSz√∂veget √≠rhatsz a k√©perny≈ëre a `{print}` paranccsal.     \n"
            3:
                story_text: |
                    A 3. szinten k√©sz√≠thetsz list√°t is. K√©rheted a sz√°m√≠t√≥g√©pet, hogy v√©letlenszer≈±en v√°lasszon valamit a list√°b√≥l. Ezt a `{at} {random}` paranccsal teheted meg.
            4:
                story_text: |
                    A 4. szinten a `{ask}` √©s a `{print}` m√°shogy m≈±k√∂dik.
                    Amit ki akarsz √≠ratni, id√©z≈ëjelbe kell tenned.
                    Ez hasznos, mert most m√°r mindent ki√≠rathatsz, amit csak akarsz, azokat a szavakat is, amiket arra haszn√°lt√°l, hogy elt√°rolj valamit az `{is}` paranccsal.
                    A legt√∂bb programoz√°si nyelv id√©z≈ëjelet haszn√°l a ki√≠rat√°shoz, √≠gy egy kicsit k√∂zelebb ker√ºl√ºnk az igazi programoz√°shoz!
                example_code: |
                    ```
                    {print} "Mostant√≥l id√©z≈ëjeleket kell haszn√°lni!"
                    v√°lasz {is} {ask} "Miket kell mostant√≥l haszn√°lni?"
                    {print} v√°lasz " kell haszn√°lni."
                    ```
            5:
                story_text: |
                    Az 5. szinten √∫jdons√°g k√∂vetkezik, a `{if}`! A `{if}` paranccsal k√©t lehet≈ës√©g k√∂z√ºl v√°laszthatsz.
                    Ez a k√≥d ki√≠rja, hogy klassz, ha a Hedy nevet adod meg n√©vk√©nt, √©s f√∫jt, ha valami m√°st √≠rsz be.
                    A `{ask}` √©s `{print}` ugyan√∫gy m≈±k√∂dnek, mint a 4. szinten.
                example_code: |
                    ```
                    n√©v {is} {ask} "Hogy h√≠vnak?"
                    {if} n√©v {is} Hedy {print} "klassz" {else} {print} "f√∫j!"
                    ```
            6:
                story_text: |
                    Ezen a szinten √∫j dolgot tanulunk: sz√°molni.

                    Az √∂sszead√°s k√∂nny≈±, ugyan√∫gy √≠rod, mint a matekban: `5 + 5`. A kivon√°s is j√≥l m≈±k√∂dik, √≠gy √≠rjuk: `5 - 5`.

                    A szorz√°s egy kicsit k√ºl√∂nb√∂zik, ugyanis nincs szorz√°sjel a billenty≈±zeten. N√©zd meg, t√©nyleg nincs!
                    Ez√©rt haszn√°ljuk a csillagot: `5 * 5`. Olvasd ezt "5-sz√∂r 5"-nek, √≠gy k√∂nnyen megjegyzed.
                example_code: |
                    ```
                    {print} "5 plusz 5 egyenl≈ë " 5 + 5
                    {print} "5 m√≠nusz 5 egyenl≈ë " 5 - 5
                    {print} "5-sz√∂r 5 egyenl≈ë " 5 * 5
                    ```
            7:
                story_text: |
                    A 7. szinten bemutatkozik az `{repeat}` parancs. Ezzel egy sort t√∂bbsz√∂r v√©grehajthatsz.
                example_code: |
                    ```
                    {repeat} 3 {times} {print} "A Hedy sz√≥rakoztat√≥!"
                    ```
            8:
                story_text: |
                    A `{ask}` √©s a `{print}` m√©g mindig √∫gy m≈±k√∂dik, ahogyan ismered. De a `{if}`, `{else}` √©s az `{repeat}` utas√≠t√°sok megv√°ltoztak!
                    Most k√ºl√∂nb√∂z≈ë utas√≠t√°sok egy csoportj√°t futtathatod egyszerre, de beh√∫z√°ssal tagolnod kell a k√≥dot.
                    Ez azt jelenti, hogy n√©gy sz√≥k√∂zt kell tenn√ºnk a sor elej√©re. Ez akkor is √©rv√©nyes, ha csak egy soros blokkot akarsz l√©trehozni.
                example_code: |
                    √çgy m≈±k√∂dik mostant√≥l az `{repeat}` parancs:
                    ```
                    {repeat} 5 {times}
                        {print} "Sziasztok"
                        {print} "Ez 5-sz√∂r ism√©tl≈ëdik"
                    ```
                    √çgy m≈±k√∂dik mostant√≥l a `{if}` √©s az `{else}` parancs:

                    ```
                    n√©v {is} {ask} "Hogy h√≠vnak?"
                    {if} n√©v {is} Hedy
                        {print} "Szia Hedy!"
                        {print} "J√°tszhatsz a sz√°m√≠t√≥g√©ppel."
                    {else}
                        {print} "BEHATOL√ì!"
                        {print} "Nem haszn√°lhatod ezt a g√©pet!"
                    ```

                        {print} "Sziasztok"
                        {print} "Ez 5-sz√∂r lett ki√≠rva"
            9:
                story_text: |
                    Ezen a szinten m√°r nemcsak t√∂bb soros `{if}` √©s `{repeat}` parancsokat haszn√°lhatsz, hanem egym√°sba is teheted ≈ëket.
                    A p√©ld√°ban egy `{if}` van egy `{repeat}` parancson bel√ºl. Ford√≠tva is lehet csin√°lni, √©s m√©g `{if}` is lehet `{if}` `{if}` parancsba √°gyazva, vagy `{repeat}` `{repeat}`-be.
                    Pr√≥b√°ld ki!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        √©tel = {ask} "Mit k√©rsz?"
                        {if} √©tel {is} pizza
                            {print} "fincsi!"
                        {else}
                            {print} "a pizza finomabb"
                    ```

                        √©tel = {ask} "Mit k√©rsz?"
                        {if} √©tel {is} pizza
                            {print} "fincsi!"
                        {else}
                            {print} "a pizza finomabb"
            10:
                story_text: |-
                    Ezen a szinten √∫j parancsot mutatunk be, a `{for}`-t. A `{for}` seg√≠ts√©g√©vel egy lista minden elem√©t haszn√°lhatod.
                    A `{for}` is l√©trehoz egy blokkot, pont √∫gy, ahogy az `{repeat}` √©s `{if}`, ez√©rt az √∂sszes sort a blokkban sz√≥k√∂z√∂kkel kell kezdeni.
                example_code: |
                    ```
                    √°llatok {is} kutya, cica, g√∂mbhal
                    {for} √°llat {in} √°llatok
                      {print} 'Sz√©p ' √°llat
                    ```
            12:
                story_text: |-
                    **Tizedes t√∂rtek**
                    Eg√©szen eddig a Hedy nem kezelte a t√∂rt sz√°mokat, mint az 1,5. Figyelj, hogy a sz√°m√≠t√≥g√©pek `.` haszn√°lnak, √≠gy: 1.5
                example_code: |
                    ```
                    {print} 'K√©t √©s f√©l plusz k√©t f√©l egyenl≈ë...'
                    {print} 2.5 + 2.5
                    ```

                    {print} 2.5 + 2.5
            13:
                story_text: Most megtanuljuk az `{and}` √©s `{or}` kifejez√©sek haszn√°lat√°t! Ha k√©t √°ll√≠t√°st szeretn√©l ellen≈ërizni, akkor nem kell kett≈ë {if} parancsot haszn√°lnod, haszn√°lhatod az `{and}` √©s `{or}` parancsokat. Ha az `{and}` parancsot haszn√°lod, akkor az `{and}` bal √©s jobb oldal√°n mindk√©t √°ll√≠t√°snak igaznak kell lennie. `{or}` eset√©n csak egy √°ll√≠t√°snak kell helyesnek lennie.
                example_code: |
                    ```
                    n√©v = {ask} "Hogy h√≠vnak?"
                    kor = {ask} "H√°ny √©ves vagy?"
                    {if} n√©v {is} "Hedy" {and} kor {is} 2
                        {print} "Te vagy az igazi Hedy!"
                    ```
            14:
                story_text: |
                    Tov√°bbi √∫j elemeket fogunk megtanulni! Lehet, hogy m√°r a matematik√°b√≥l ismered ezeket a jeleket, a `<` √©s a `>`.
                    A `<` ellen≈ërzi, hogy az els≈ë sz√°m kisebb-e, mint a m√°sodik, p√©ld√°ul kor `<` 12 megmondja, hogy a kor kisebb-e, mint 12.
                    Ha arra vagy k√≠v√°ncsi, hogy az els≈ë sz√°m kisebb vagy egyenl≈ë-e a m√°sodikkal, a `<=` jelet haszn√°ld, p√©ld√°ul kor `<=` 11.
                    A `>` ellen≈ërzi, hogy az els≈ë sz√°m nagyobb-e, mint a m√°sodik, p√©ld√°ul pontsz√°m `>` 10 megmondja, hogy a pontsz√°m nagyobb-e, mint 10.
                    Ha arra vagy k√≠v√°ncsi, hogy az els≈ë sz√°m nagyobb vagy egyenl≈ë-e a m√°sodikkal, a `>=` jelet haszn√°ld, p√©ld√°ul pontsz√°m `<=` 11.
                    Ezeket az √∂sszehasonl√≠t√°sokat `{if}` parancsok ut√°n haszn√°lhatod, √≠gy:
                example_code: |
                    ```
                    kor = {ask} "H√°ny √©ves vagy?"
                    {if} kor > 12
                        {print} "Id≈ësebb vagy n√°lam!"
                    ```
            15:
                story_text: |-
                    Tanulni fogunk egy √∫j ciklust, az `{while}` ciklust! Addig folytatjuk a ciklust, am√≠g az √°ll√≠t√°s igaz!
                    Sz√≥val ne felejtsd el m√≥dos√≠tani a ciklusban szerepl≈ë √©rt√©ket!

                    A p√©ldak√≥dban addig megy√ºnk, am√≠g meg nem kapjuk a helyes v√°laszt.
                    Ha soha nem kapjuk meg a megold√°st, akkor a ciklus soha nem √©r v√©get!
                example_code: |
                    ```
                    v√°lasz = 0
                    {while} v√°lasz != 25
                        v√°lasz = {ask} "Mennyi 5-sz√∂r 5?"
                    {print} "Ez a helyes v√°lasz"
                    ```

                        v√°lasz = {ask} "Mennyi 5-sz√∂r 5?"
                    {print} "Ez a helyes v√°lasz"
            16:
                story_text: |-
                    List√°kat fogunk k√©sz√≠teni Python m√≥dra, sz√∂gletes z√°r√≥jelekkel! Megtartjuk az id√©z≈ëjeleket az elemek k√∂r√ºl, ahogy az el≈ëz≈ë szinteken tanultuk, √©s az eg√©sz list√°t sz√∂gletes z√°r√≥jelek k√∂z√© foglaljuk.
                    A sz√∂gletes z√°r√≥jeleket arra is haszn√°lhatod, hogy kiv√°laszd a lista elem√©t egy adott helyen.
                example_code: |
                    ```
                    bar√°tok = ["Alad√°r", "Bl√∂ki", "MZ/X"]
                    szerencs√©s_sz√°mok = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} bar√°tok[i] " szerencs√©s sz√°ma"
                        {print} "egyenl≈ë " szerencs√©s_sz√°mok[i]
                    ```
            17:
                story_text: |-
                    Most egy kicsit meg fogjuk v√°ltoztatni a beh√∫z√°st. Minden alkalommal, amikor beh√∫z√°st haszn√°lunk, az el≈ëz≈ë sor v√©g√©re`:` jelet tesz√ºnk.

                    Ezen a szinten egy √∫j parancsot is haszn√°lhatsz: `{elif}`. Az `{elif}` az `{else} {if}` r√∂vid√≠t√©se, √©s sz√ºks√©ged lesz r√°, ha 3 (vagy t√∂bb!) alternat√≠v√°t szeretn√©l haszn√°lni.
                    Pr√≥b√°ld ki!
            18:
                story_text: El√©rt√ºnk az igazi Python k√≥dhoz! Ez azt jelenti, hogy z√°r√≥jeleket kell haszn√°lnunk a {print} √©s {range} eset√©ben.
    dice:
        name: K√©sz√≠tsd el a saj√°t kock√°dat
        default_save_name: Kocka
        description: K√©sz√≠tsd el a saj√°t kock√°dat
        levels:
            3:
                story_text: |-
                    A 2. szinten v√°laszthatunk egy list√°b√≥l. Ezzel hagyhatjuk, hogy a sz√°m√≠t√≥g√©p v√°lassza ki
                    a kocka egyik oldal√°t.
                    Vess egy pillant√°st azokra a j√°t√©kokra, amelyek otthon vannak a szekr√©nyedben.
                    Vannak (speci√°lis) kock√°val j√°tszott j√°t√©kok? Ezzel a k√≥ddal m√°solhatod is.
                    P√©ld√°ul a Giliszta j√°t√©k kock√°ja a 1‚Äì5-ig sz√°mokkal √©s egy giliszt√°val.
                    ! [Giliszta j√°t√©k kock√°ja a 1‚Äì5-ig sz√°mokkal √©s egy giliszt√°val]
                    V√©letlen√ºl megpr√≥b√°lt√°l olyan mondatot megfogalmazni, amely tartalmazza a
                    dob√°sokat?
                    P√©ld√°ul. `print V√°lasztottam a dobasok k√∂z√ºl`. Pr√≥b√°ld ki, ha m√©g nem tetted meg.
                    Ez nem m≈±k√∂dik megfelel≈ëen! Azt√°n megkapod: Az [1, 2, 3, 4, 5, f√∂ldigiliszta] k√∂z√ºl
                    v√°lasztottam. Ezt meg tudod majd oldani a 3. szinten.
                example_code: |-
                    ```
                    dobasok is 1, 2, 3, 4, 5, giliszta
                    print dobasok at random
                    ```
            4:
                story_text: |-
                    A 3. szinten mondatokat k√©sz√≠thet√ºnk a v√°ltoz√≥ √©rt√©k√©vel, term√©szetesen id√©z≈ëjelekkel.
                    Ez√∫ttal a minta k√≥d nem eg√©szen teljes. Be tudod fejezni a k√≥dot?
            5:
                story_text: |-
                    Ism√©t k√©sz√≠thetsz egy kock√°t a 4. szinten az `if` haszn√°lat√°val.
                    T√∂ltsd ki a mintak√≥dot √∫gy, hogy a k√≥d azt mondja: "Meg√°ll√≠thatod a dob√°st", miut√°n
                    f√∂ldigiliszt√°t dobt√°l.
                    De lehet, hogy √∫jra l√©tre akarsz hozni egy kock√°t egy teljesen m√°s j√°t√©kb√≥l. Ez is
                    rendben van! Ezut√°n √°ll√≠tsd be a saj√°t reakci√≥j√°t. Pl. ‚ÄûIgen‚Äù 6-ra √©s ‚Äûk√°r‚Äù valami m√°sra.
                example_code: |-
                    ```
                    dobasok is 1, 2, 3, 4, 5, giliszta
                    dobas _
                    print 'Te' _ 'dobt√°l'
                    if _ is giliszta print 'Meg√°llhatsz.' _ print 'Dobj √∫jra!'
                    ```
            6:
                story_text: |-
                    Azt is megteheted, hogy √∫jra egy giliszta kock√°t csin√°lsz a 6. szinten, de most kisz√°m√≠thatod azt is, hogy h√°ny pontot dobt√°l.

                    Lehet, hogy tudod, hogy a giliszta 5 pontot sz√°m√≠t a j√°t√©kban. Most egy dob√°s ut√°n azonnal kisz√°m√≠thatod, h√°ny pontot dobott.

                    Ez az a k√≥d, amely kisz√°m√≠tja a pontokat egy dob√°shoz:

                    √Åt tudod alak√≠tani a k√≥dot, hogy megkapd a 8 kockadob√°s √∂sszpontsz√°m√°t? Ehhez ki kell v√°gnod √©s be kell illesztened a k√≥d egyes sorait.


                    Siker√ºlt kisz√°molni a 8 kocka pontsz√°m√°t? Ehhez sok v√°g√°s √©s beilleszt√©s kellett, igaz? Ezt megk√∂nny√≠tj√ºk a 7. szinten!
                example_code: |-
                    ```
                    dobasok = 1, 2, 3, 4, 5, giliszta
                    pontok = 0
                    dobas = dobasok at random
                    print 'a dob√°sod' dobas
                    if dobas is giliszta pontok = pontok + 5 else pontok = pontok + dobas
                    print 'Pontok:' pontok
                    ```
                example_code_2: |
                    Did you manage to calculate the score for 8 dice? That required a lot of cutting and pasting, right? We are going to make that easier in level 7!
            7:
                story_text: |-
                    Az 5. szinten ism√©t k√©sz√≠thetsz kock√°t . A `repeat` k√≥ddal k√∂nnyed√©n dobhatsz egy
                    csom√≥ dob√≥kock√°t.
                    Pr√≥b√°ld meg befejezni a mintak√≥dot! A k√∂t≈ëjeleknek t√∂bb parancsot √©s karaktert
                    kell tartalmazniuk.
                    De tal√°n teljesen m√°s kock√°t akarsz k√©sz√≠teni. Term√©szetesen lehet!
                example_code: |-
                    ```
                    dob√°sok is 1, 2, 3, 4, 5, giliszta
                    repeat _ _ print _ _
                    ```
            10:
                story_text: |
                    Is everybody taking too long throwing the dice? In this level you can let Hedy throw all the dice at once!
                example_code: |
                    ```
                    players = Ann, John, Jesse
                    choices = 1, 2, 3, 4, 5, 6
                    {for} player {in} players
                        {print} player ' throws ' choices {at} {random}
                        {sleep}
                    ```
    dishes:
        name: Ki mosogat?
        default_save_name: mosogat
        description: Haszn√°ld a sz√°m√≠t√≥g√©pet, hogy l√°sd, ki mosogat (Kezdd a 2. szinten)
        levels:
            3:
                story_text: |-
                    Otthon √°ltal√°ban nem √©rtesz egyet abban, hogy kinek kell ma mosogatnia vagy kicser√©lnie az alomdobozt?

                    Ezut√°n hagyhatod, hogy a sz√°m√≠t√≥g√©p nagyon tisztess√©gesen v√°lasszon. Ezt beprogramozhatod a 2. szinten!

                    El≈ësz√∂r √°ll√≠tsd √∂ssze a csal√°dja tagjainak list√°j√°t. Ezut√°n v√°laszd az 'at random' lehet≈ës√©get a list√°b√≥l.


                    V√©letlen√ºl megpr√≥b√°lt√°l olyan mondatot alkotni, amely az emberek sz√≥t tartalmazta?

                    Pl. `print Ezek k√∂z√ºl az emberek k√∂z√ºl v√°lasztottam`. Pr√≥b√°ld ki, ha m√©g nem tetted meg.

                    Ez nem m≈±k√∂dik megfelel≈ëen! Azt√°n megkapod: [apu, anya, Edit, Gizi] k√∂z√ºl v√°lasztottam. Ezt meg tudod majd oldani a 3. szinten.
                example_code: |-
                    ```
                    emberek is anya, apa, Edit, Gizi
                    print emberek at random
                    ```
                story_text_2: |
                    Don't feel like doing the dishes yourself? Hack the program to remove your name from the list.
            4:
                story_text: |
                    Az id√©z≈ëjelek seg√≠ts√©g√©vel szebb√© teheted a mosogat√°s tervez√©s√©t.
                    Ez√∫ttal a minta k√≥d nem eg√©szen teljes.
                    Ki tudod eg√©sz√≠teni a k√≥dot a helyes parancsok vagy karakterek pontokra t√∂rt√©n≈ë be√≠r√°s√°val?
                    Minden √ºres helyet egy paranccsal kell kicser√©lni.
                    Tipp: Ne felejtsd el az id√©z≈ëjeleket.
                example_code: |-
                    ```
                    emberek is anya, apa, Edit, Gizi
                    print _ ≈ë mosogat: _
                    print emberek at _
                    ```
            5:
                story_text: |-
                    Az `if` seg√≠ts√©g√©vel most sz√≥rakoztat√≥bb√° teheted a v√°laszt√°st a programban.
                    Megk√©rheted a programot, hogy v√°laszoljon a sz√°m√≠t√≥g√©p v√°laszt√°s√°ra.
                    Befejezheted a k√≥dot √∫gy, hogy ‚Äût√∫l rosszul‚Äù √≠rja ki, amikor rajtad a sor, √©s egy√©bk√©nt
                    ‚Äûigen!‚Äù?
                    Ne felejtsd el az id√©zeteket!
                example_code: |-
                    ```
                    emberek is anya, apa, Edit, Gizi
                    mosogato is emberek at random
                    if mosogato is Gizi print _ sajnos mosogatnom kell _ else print 'szerencs√©re nem √©n,
                    mert' _ 'm√°r mosogat'
                    ```
            6:
                story_text: |-
                    Ki milyen gyakran mosogat? Ez igazs√°gos? Ezt megsz√°molhatod a 5. szinten.

                    Most n√©h√°nyszor √°tm√°solhatod a 3‚Äì5-√∂s sorokat (pl. az eg√©sz h√©tre 7-szer), hogy ism√©t egy eg√©sz h√©tre sz√°moljon.
                    Elk√©sz√≠ted az eg√©sz h√©t k√≥dj√°t?

                    Most sokat kell m√°solnod √©s beillesztened, igaz? Ezt a 7. szinten jav√≠tjuk.
                    Ezen a szinten a v√©ge a mosogat√≥ kalandnak! De m√©g mindig sok kaland van m√°s szinteken, p√©ld√°ul egy sz√°mol√≥g√©ppel, egy interakt√≠v t√∂rt√©nettel √©s egy bonyolultabb j√°t√©kkal.
                example_code: |-
                    ```
                    emberek = anya, apa, Edit, Gizi
                    edit_mosogat = 0
                    mosogato = emberek at random
                    print 'A mosogat√≥' mosogato
                    if mosogato is Edit edit_mosogat = edit_mosogat + 1
                    print 'Edit ezen a h√©ten' edit_mosogat 'alkalommal mosogatott'
                    ```
                story_text_2: |
                    If you are extremely unlucky the previous program might choose you to to the dishes for the whole week! That's not fair!
                    To create a fairer system you can use the `{remove}` command to remove the chosen person from the list. This way you don't have to do the dishes again untill everybody has had a turn.

                    Monday and tuesday are ready for you! Can you add the rest of the week?
                    And... can you come up with a solution for when your list is empty?
                example_code_2: |
                    ```
                    people = mom, dad, Emma, Sophie
                    dishwasher = people {at} {random}
                    {print} 'Monday the dishes are done by: ' dishwasher
                    {remove} dishwasher {from} people
                    dishwasher = people {at} {random}
                    {print} 'Tuesday the dishes are done by: ' dishwasher
                    {remove} dishwasher {from} people
                    dishwasher = people {at} {random}
                    ```
            7:
                story_text: |-
                    Az `repeat` seg√≠ts√©g√©vel megism√©telheted a k√≥dr√©szleteket. Ennek seg√≠ts√©g√©vel
                    kisz√°m√≠thatod, hogy kik fogj mosogatni az eg√©sz h√©ten.
                example_code: |-
                    ```
                    emberek is anya, apa, Edit, Gizi
                    repeat _ _ print 'a mosogat√≥:' _
                    ```
            10:
                story_text: |
                    In this level you could make an even better dish washing shedule.
    elif_command:
        description: elif
        levels:
            17:
                example_code: |
                    ```
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
                    ```
    for_command:
        description: for command
        levels:
            11:
                story_text: |-
                    In this level, we add a new form of the `{for}`. In earlier levels, we used `{for}` with a list, but we can also use `{for}` with numbers.
                    We do that by adding a variable name, followed by  `{in}` `{range}`. We then write the number to start at, `{to}` and the number to end at.
                    Try the example to see what happens! In this level again, you will need to use indentations in lines below the `{for}` statements.
    fortune:
        name: J√≥sn≈ë
        default_save_name: J√≥sn≈ë
        description: Hadd j√≥solja meg Hedy a j√∂v≈ët
        levels:
            1:
                story_text: |-
                    Volt√°l m√°r fesztiv√°lon, √©s egy j√≥sn≈ë megj√≥solta a j√∂v≈ëdet? Vagy j√°tszott√°l m√°r var√°zslatos nyolc labd√°val?
                    Akkor val√≥sz√≠n≈±leg tudod, hogy nem igaz√°n tudj√°k megj√≥solni a j√∂v≈ëdet, de ett≈ël m√©g sz√≥rakoztat√≥ j√°tszani!

                    A k√∂vetkez≈ë szinteken megtanulhatod, hogyan kell saj√°t j√≥sn≈ët l√©trehozni!
                    Az 1. szinten k√∂nnyen kezdheted, ha hagyod, hogy Hedy j√≥sn≈ëk√©nt mutatkozzon be, √©s hagyja, hogy visszhangozza a j√°t√©kosok v√°laszait.
                    Mint ez:
                example_code: |
                    ```
                    print Szia, Hedy, a j√≥sn≈ë vagyok!
                    ask Ki vagy te?
                    print Hadd n√©zzek bele a krist√°lyg√∂mb√∂mbe
                    print L√°tom... L√°tom...
                    echo A neved
                    ```
                    Hedy most csak a nevedet mondja meg. Ki tudod b≈ëv√≠teni a k√≥dot, hogy Hedy t√∂bb dolgot meg tudjon j√≥solni r√≥lad?

                    Nyilv√°nval√≥, hogy Hedy m√©g nem t√∫l j√≥ j√≥sn≈ë, hiszen csak meg tudja ism√©telni a j√°t√©kosok √°ltal adott v√°laszokat!
                    Vess egy pillant√°st a 2. szintre, hogy fejleszd a j√≥sn≈ëdet.
                story_text_2: |
                    ### Exercise
                    Hedy now only tells you your name. Can you expand the code so that Hedy can predict more things about you?
                    Obviously, Hedy isn't a very good fortune teller yet, as she can only repeat the answers that were given by the players!
                    Take a look in level 2 to improve your fortune teller.
            3:
                story_text: |-
                    Az 1. szinten megalkottad els≈ë j√≥sl√°sg√©pedet, de Hedy nem tudott igaz√°n megj√≥solni semmit, csak visszhangot.
                    A 2. szinten haszn√°lhatsz egy v√°ltoz√≥t √©s az `at random`  parancsot, hogy val√≥ban engedd, hogy Hedy v√°laszoljon Neked. N√©zd meg p√©ld√°ul ezt a k√≥dot:

                    Most Hedy csak igennel, nemmel vagy tal√°n v√°laszolhat. Adhatsz Hedynek t√∂bb v√°laszlehet≈ës√©get, p√©ld√°ul ‚Äûhat√°rozottan‚Äù vagy ‚Äûk√©rdezz √∫jra‚Äù
                example_code: |-
                    Ebben a p√©ld√°ban a j√°t√©kos igen-nem k√©rd√©st tehet fel Hedynek, √©s Hedy v√©letlenszer≈± v√°laszt ad.
                    ```
                    print Szia Hedy a j√≥sn≈ë vagyok!
                    kerdes is ask Mit akarsz tudni?
                    print Ez az amit tudni akarsz: kerdes
                    valasz is igen, nem, talan
                    print A krist√°lyg√∂mb√∂m azt mondja... valasz at random
                    ```
                story_text_2: |
                    ### Exercises
                    Now, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or '{ask} again'.
            5:
                story_text: |-
                    A 4. szinten megtanulod (titokban) az es√©lyeket a magad jav√°ra billenteni a j√≥sn≈ë haszn√°lata sor√°n!
                    Az `if` √©s `else` haszn√°lat√°val bebiztos√≠thatod, hogy mindig j√≥ szerencs√©t kapj, m√≠g m√°sok nem.
                    Tekintsd meg ezt a p√©ld√°t, hogy megtudd, hogyan.


                    Cser√©ld le Hedyt a saj√°t nevedre az utols√≥ sorban, √©s Hedy mindig azt j√≥solja, hogy te nyersz a lott√≥n, m√°sok nem!
                    Term√©szetesen ez gyanakv√°st kelthet a t√∂bbi j√°t√©kossal szemben ... Ennek elker√ºl√©se √©rdek√©ben gondoskodhatsz arr√≥l, hogy Hedy minden alkalommal m√°s v√°laszokat adjon a k√≥d futtat√°sakor.
                    De term√©szetesen neked tov√°bbra is pozit√≠v v√°laszt ad, a t√∂bbi j√°t√©kosnak pedig negat√≠v v√°laszt.

                    Ezeb az elven k√ºl√∂nf√©le programokat lehet k√©sz√≠teni, csak l√©gy kreat√≠v! P√©ld√°ul l√©trehozhatsz egy olyan g√©pet, amely megj√≥solja, hogy kedvenc sportcsapatod legy≈ëzi az √∂sszes versenyt√°rsat!
                    Vagy elk√©sz√≠theted H√≥feh√©rke var√°zslatos t√ºkr√©t a falon, hogy elmondd mindenkinek, hogy te vagy a legbecs√ºletesebb!
                    Hagyd, hogy a fant√°zi√°d v√©gezze a munk√°dat!
                example_code: |
                    ```
                    print 'Szia, Hedy, a j√≥sn≈ë vagyok'
                    print 'Meg tudom j√≥solni, nyersz-e a lott√≥n holnap!'
                    szemely is ask 'Ki vagy te?'
                    if szemely is Hedy print 'Bizonyosan nyerni fogsz!' else print 'Balszerencse! Valaki m√°s nyer!'
                    ```
            6:
                story_text: |-
                    A 5. szinten j√∂vend≈ëmond√≥k√©nt haszn√°lhatod a matematik√°t el≈ërejelz√©seidben. Ez lehet≈ëv√© teszi (buta) k√©pletek kital√°l√°s√°t a j√∂v≈ë kisz√°m√≠t√°s√°hoz.
                    P√©ld√°ul kisz√°m√≠thatod, hogy milyen gazdag leszel, vagy h√°ny gyermeked lesz, ha feln≈ësz.
                example_code: |
                    ```
                    print 'Hedy, a j√≥sn≈ë vagyok!'
                    print 'Meg tudom j√≥solni, h√°ny gyermeked lesz, ha feln≈ësz!'
                    kor is ask 'H√°ny √©ves vagy?'
                    testver is ask 'H√°ny testv√©red van?'
                    magassag is ask 'H√°ny cm magas vagy?'
                    gyerekek is magassag / kor
                    gyerekek is gyerekek - testver
                    print 'Neked ...'
                    print gyerekek ' gyereked lesz!'
                    ```

                    Ha az el≈ëz≈ë p√©lda nem volt el√©g buta a sz√°modra, akkor n√©zd meg ezt!

                    ```
                    print 'Hedy vagyok a buta j√≥sn≈ë!'
                    print 'Meg tudom j√≥solni, milyen okos vagy!'
                    foci is ask '1-10-es sk√°l√°s mennyire szereted a focit?'
                    banan is ask 'H√°ny ban√°nt ett√©l a h√©ten?'
                    higienia is ask 'H√°nyszor mostad meg a kezed ma?'
                    eredmeny is banan + higienia
                    eredmeny is eredmeny * foci
                    print 'Te ' eredmeny ' sz√°zal√©k okos vagy.'
                    ```
            7:
                story_text: |-
                    Az 6. szinten a `repeat` paranccsal be√°ll√≠thatod, hogy a g√©p egyszerre t√∂bb j√≥slatot mondjon.

                    Amint l√°thatod, a k√©rd√©sek ebben a p√©ld√°ban nincsenek ki√≠ratva. Ennek az az oka, hogy a `k√©rd√©s` v√°ltoz√≥t h√°romszor m√≥dosult.
                    Valah√°nyszor a j√°t√©kos kit√∂lti az √∫j v√°laszt, Hedy fel√ºl√≠rja az el≈ëz≈ët, √≠gy a j√°t√©kos els≈ë v√°lasz√°t elfelejti.
                    Ez azt jelenti, hogy √≠gy nem tudja ki√≠ratni az √∂sszes k√©rd√©st.

                    Ha 1 helyett 3 k√ºl√∂nb√∂z≈ë v√°ltoz√≥t haszn√°lsz (p√©ld√°ul `kerdes1`,` kerdes2` √©s `kerdes3`), megoldhatod a probl√©m√°t, √©s ki√≠rathatod a k√©rd√©seket.
                    Ez azt jelenti, hogy a v√°laszokn√°l csak az "repeat" utas√≠t√°st kell haszn√°lnod, √©s az √∂sszes k√©rd√©st k√ºl√∂n kell feltenned √©s ki kell √≠ratnod.
                    Meg tudod csin√°lni?

                    A 7. szinten az ism√©tl√©s parancs elrendez√©se megv√°ltozik, ami lehet≈ëv√© teszi t√∂bb sor ism√©tl√©s√©t egyszerre.
                example_code: |
                    ```
                    print 'Hedy, a j√≥sn≈ë vagyok!'
                    print 'Feltehetsz 3 k√©rd√©st!'
                    repeat 3 times kerdes is ask 'Mit akarsz tudni?'
                    valasz is igen, nem, talan
                    repeat 3 times print 'A krist√°lyg√∂mb√∂m azt mondja... ' valasz at random
                    ```
            8:
                story_text: |-
                    Az 5. szinten megtanultad, hogyan kell haszn√°lni az ism√©tl√©st, hogy a j√≥sn≈ë 3 k√©rd√©sre v√°laszoljon egym√°s ut√°n, de probl√©m√°nk ad√≥dott a k√©rd√©sek ki√≠rat√°s√°val.
                    A 7. szinten ez a probl√©ma megold√≥dott az ism√©tl√©s parancs √∫j m√≥dj√°nak k√∂sz√∂nhet≈ëen.
                    A k√∂vetkez≈ë p√©ld√°ban a j√≥sn≈ë 3 k√©rd√©st tehet fel, √©s ki√≠rathatja ≈ëket!
                example_code: |
                    ```
                    print 'Hedy a j√≥sn≈ë vagyok!'
                    print 'Feltehetsz 3 k√©rd√©st.'
                    valasz is igen, nem, tal√°n
                    repeat 3 times
                        kerdes is ask 'Mit akarsz tudni?'
                        print kerdes
                        print 'A krist√°lyg√∂mb√∂m azt mondja...' valasz at random
                    ```
            10:
                story_text: |
                    In this level you'll learn how to program the game MASH (mansion, apartement, shack, house). In this game you can predict for all the players at once, what their future will look like.
                example_code: |
                    ```
                    houses = mansion, apartment, shack, house
                    loves = nobody, a royal, their neighbour, their true love
                    pets = dog, cat, elephant
                    names = Jenna, Ryan, Jim
                    {for} name {in} names
                        {print} name ' lives in a ' houses {at} {random}
                        {print} name ' will marry ' loves {at} {random}
                        {print} name ' will get a ' pets {at} {random} ' as their pet.'
                        {sleep}
                    ```
            12:
                story_text: |
                    In this level you can make your fortunes multiple words. Like in this example below:
                example_code: |
                    ```
                    fortunes = 'you will be rich', 'you will fall in love', 'you will slip on a banana peel'
                    {print} 'I will take a look in my crystall ball for your future.'
                    {print} 'I see... I see...'
                    {sleep}
                    {print} fortunes {at} {random}
                    ```
    functions:
        levels:
            12:
                example_code: |
                    ```
                    sides = 'left', 'right'
                    limbs = 'hand', 'foot'
                    colors = 'red', 'blue', 'green', 'yellow'

                    {define} turn
                        chosen_side = sides {at} {random}
                        chosen_limb = limbs _
                        chosen_color = colors _
                        {print} chosen_side ' ' chosen_limb ' on ' chosen_color

                    {print} 'Lets play a game of Twister!'
                    {for} i {in} {range} 1 to _
                        {call} turn
                        {sleep} 2
                    ```
            13:
                story_text: |
                    Now that you've learned how to use functions, you'll learn how to use a function with an argument.
                    An **argument** is a variable that is used within a function. It is not used outside the function.

                    For example in this code we've programmed the first verse of the song 'My Bonnie is over the ocean'.
                    In this example code the argument `place` is used. Place is a variable that is only used in the function, so an argument.
                    To use `place` we have programmed the line `define song with place`.
                    When the function is called, computer will replace the argument `place`, with the piece of text after `call song with`.

                    ### Exercise
                    The next verse of this song goes:

                    Last night as I lay on my pillow
                    Last night as I lay on my bed
                    Last night as I lay on my pillow
                    I dreamed that my Bonnie is dead

                    Can you program this verse in the same way as the example?
            14:
                example_code: |
                    ```
                    {define} calculate_new_price {with} amount, percentage
                        percentage = percentage / 100
                        discount_amount = amount * percentage
                        return amount - discount_amount

                    old_price = {ask} 'How much is on the price tag?'
                    discount = {ask} 'What percentage is the discount?'

                    new_price = _ calculate_new_price {with} old_price, _
                    {print} 'The new price is ' new_price ' dollar'
                    ```
    haunted:
        name: K√≠s√©rteth√°z
        default_save_name: K√≠s√©rteth√°z
        description: menek√ºl√©s a k√≠s√©rtetj√°rta h√°zb√≥l
        levels:
            1:
                story_text: |-
                    Ebben a kalandban egy olyan j√°t√©k l√©trehoz√°s√°n dolgozol, amelyben a megfelel≈ë ajt√≥ kiv√°laszt√°s√°val menek√ºln√∂d kell egy k√≠s√©rtetj√°rta h√°zb√≥l.
                    Ha a megfelel≈ë ajt√≥t v√°lasztod, t√∫l√©led, de ha nem, egy rettenetes sz√∂rnyeteg ...

                    Az 1. szinten elkezdj√ºk a k√≠s√©rtetj√°rta h√°z j√°t√©kunkat egy ijeszt≈ë t√∂rt√©net kital√°l√°s√°val, √©s megk√©rdezz√ºk a j√°t√©kost, hogy milyen sz√∂rnyet l√°tnak a k√≠s√©rtetj√°rta h√°zban.
                example_code: |
                    ```
                    print Hogyan ker√ºltem ide?
                    print Eml√©kszem, a bar√°tom azt mondta, menjek be a r√©gi kast√©lyba ...
                    print √©s hirtelen minden els√∂t√©t√ºlt.
                    print De hogy ker√ºletem a padl√≥ra...?
                    print √©s fejem √∫gy f√°j, mintha egy baseball √ºt≈ëvel √ºt√∂tt√©k volna meg!
                    print Mi ez a hang?
                    print √ì, nem! √ögy √©rzem, nem vagyok egyed√ºl ebben a h√°zban!
                    print El kell mennem innen!
                    print H√°rom ajt√≥ van el≈ëttem ...
                    ask Melyik ajt√≥t v√°lasszam?
                    echo Az ajt√≥, amit v√°lasztok
                    print ...?
                    ```
                    Be tudod fejezni az ijeszt≈ë t√∂rt√©netet? Vagy kital√°lsz egy saj√°t k√≠s√©rtet√°z t√∂rt√©netet?
                story_text_2: |
                    ### Exercise
                    Can you finish the scary story? Or make up your own haunted house story?
            2:
                example_code: |
                    ```
                    monster_1 {is} üëª
                    monster_2 {is} ü§°
                    monster_3 {is} üë∂
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
                example_code_2: |
                    ```
                    monster_1 {is} _
                    monster_2 {is} _
                    monster_3 {is} _
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
            3:
                story_text: |-
                    Az 1. szinten bemutatkozt√°l a k√≠s√©rteth√°z j√°t√©kodnak, de ahogy √©szrevetted, a t√∂rt√©netnek mindig rettenetes v√©ge lesz.
                    A 2. szinten interakt√≠vabb√° teheted a t√∂rt√©netet a j√°t√©k kimenetel√©nek megv√°ltoztat√°s√°val; n√©ha megesznek, n√©ha megmenek√ºlsz!
                    Hadd d√∂nts√∂n Hedy v√©letlenszer≈±en!


                    Ez a t√∂rt√©net meglehet≈ësen egyszer≈±, tal√°n egy kicsit √©rdekesebb√© teheted egy izgalmasabb t√∂rt√©net hozz√°ad√°s√°val.
                    Tov√°bb√° nagyon korl√°tozott eredm√©nyeket √©rhetsz el, csak 3 lehet≈ës√©g van arra, hogy mi van az ajt√≥k m√∂g√∂tt. Tal√°n m√©g t√∂bb sz√∂rnyetegre gondolhatsz, amelyet felvehetsz a list√°ba!

                    V√©gezet√ºl szeretn√©nk egy kih√≠v√°st k√ºldeni Neked,  hogy v√°ltoztasd meg ezt a j√°t√©kot olyan j√°t√©km≈±sorr√° (mint amilyenek a t√©v√©ben vannak), ahol a j√°t√©kosok ajt√≥t vagy b≈ër√∂nd√∂t v√°lasztanak, √©s valamelyik nagy d√≠jat tartalmaz!
                    Meg tudod csin√°lni?
            4:
                story_text: |-
                    A 3. szinten megtanulod haszn√°lni az id√©z≈ëjeleket a j√°t√©kaidban.
                    √Åt tudod alak√≠tani a kis√©rteth√°z j√°t√©kot √∫gy, hogy megfeleljen a 3. szintnek?
                example_code: |
                    ```
                    {print} _Escape from the haunted house!_
                    {print} _There are 3 doors in front of you..._
                    choice {is} {ask} _Which door do you choose?_
                    {print} _You picked door ..._ choice
                    monsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED
                    {print} _You see..._
                    {sleep}
                    {print} monsters {at} {random}
                     ```
            5:
                story_text: |-
                    Eddig a szintig a k√≠s√©rtetj√°rta h√°z j√°t√©k mindig arra k√©rte a j√°t√©kost, hogy v√°lasszon egy ajt√≥t, de ahogy √©szrevett√©tek, nem igaz√°n kellett helyesen v√°laszolniuk.
                    Abban az esetben, ha a j√°t√©kos teljesen v√©letlenszer≈± v√°laszt adott, a j√°t√©k tov√°bbra is m≈±k√∂dne, √©s a j√°t√©kos ak√°r nyerhet is (annak ellen√©re, hogy nem v√°lasztott ajt√≥t).
                    A 4. szinten csak akkor nyerheti meg a j√°t√©kot, ha ugyanazt az ajt√≥t v√°lasztja, amelyet Hedy v√©letlenszer≈±en v√°lasztott ki.
                example_code: |
                    ```
                    print 'Szabadulj ki a k√≠s√©rteth√°zb√≥l!'
                    print 'H√°rom ajt√≥ van el≈ëtted...'
                    ajtok is 1,2,3
                    szornyek is verfarkas, mumia, vampir, zombi
                    valasztottajto is ask 'Melyik ajt√≥t v√°lasztod?'
                    print 'Az ajt√≥, amit v√°lasztott√°l...' valasztottajto
                    helyesajto is ajtok at random
                    if valasztottajto is helyesajto print 'Nagyszer≈±! Kiszabadult√°l!'
                    else print 'Jaj ne! Megevett a ...' szornyek at random
                    ```
            9:
                story_text: |
                    In this level you can use nesting, which allows you to make the haunted house even more interactive!
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player = alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    {repeat} 3 {times}
                        {if} player {is} alive
                            correct_door {is} doors {at} {random}
                            {print} 'There are 3 doors in front of you...'
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} chosen_door {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
                    ### Exercise
                    Now it's very hard to win this game, can you make it easier to win?
                    For example by only having 1 wrong door and 2 correct doors instead of 1 correct door en 2 wrong ones?
            11:
                story_text: A 8. szinten megv√°ltoztattuk az ism√©tl√©s parancsot, √©s hozz√°adtunk egy sort a k√≠s√©rtetj√°rta h√°zunkhoz, amely megmondja a j√°t√©kosnak, hogy melyik szob√°ban vannak.
                example_code: |
                    ```
                    print 'Szabadulj ki a k√≠s√©rteth√°zb√≥l'
                    jatekos is elo
                    ajtok is 1, 2, 3
                    szornyek is  vampir, zombi, oriaspok
                    for i in range 1 to 3
                        if jatekos is elo
                            helyesajto is ajtok at random
                            print 'H√°rom ajt√≥ van el≈ëtted...'
                            valasztottajto is ask 'Melyik ajt√≥t v√°lasztod?'
                            if valasztottajto is helyesajto
                                print 'Itt nincs sz√∂rny!'
                            else
                                print 'Megevett a(z) ' szornyek at random
                                jatekos is halott
                        else
                            print 'GAME OVER'
                    if jatekos is elo
                        print 'Nagyszer≈±! T√∫l√©lted!'
                    ```
    if_command:
        description: Introducing the if command
        levels:
            9:
                story_text: |
                    In this level you can also put an {if} command inside another {if} command.
    in_command:
        description: Introducing the in command
        levels:
            5:
                example_code_2: |
                    ```
                    animals is dog, cow, sheep
                    answer is ask 'What is your favorite animal?'
                    _ answer _ animals _ 'Mine too!'
                    _ _ 'My favorite animals are dogs, cows and sheep'
                    ```
    is_command:
        description: introducing is command
        levels:
            2:
                story_text_2: |
                    ### Exercise
                    Time to make your own variables!
                    In the example code we made an example of the variable `favorite_animal`. In line 1 the variable is set, and in line 2 we haved used the variable in a print command.
                    Firstly, finish our example by filling in your favorite animal on the blank. Then make at least 3 of these codes yourself. Pick a variable, and set the variable with the {is} command. Then use it with a {print} command, just like we did.
            14:
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
                    ```

                    {if} age < 13
                        {print} 'You are younger than me!'
                    {else}
                        {print} 'You are older than me!'
    language:
        levels:
            5:
                story_text: |
                    Make your own program to practice your vocabulary in a new language.
    maths:
        levels:
            6:
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 minus 5 is ' 5 - 5
                    {print} '5 times 5 is ' 5 * 5
                    ```
            12:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```

                    {print} 2.5 + 2.5
    music:
        levels:
            6:
                story_text: "Instead of playing notes, you can also play numbers now. Simply type `{play} 1` for the lowest note, `{play} 70` for the highest note, or anything in between.\n\n### Exercise\n This calls for musical maths! Try out the example code a couple of times with different starting numbers. \nThen, see if you can compose a song using the numbers.\n"
    parrot:
        levels:
            1:
                story_text_2: |
                    ### Exercise
                    Can you make the parrot ask a different question? Fill in the blanks in the example!
            2:
                story_text: |
                    Create your own online pet parrot that will copy you!
                example_code: |
                    ```
                    {print} Im Hedy the parrot
                    name {is} {ask} whats your name?
                    {print} name
                    {sleep}
                    {print} squawk
                    {sleep}
                    {print} name
                    ```
                story_text_2: |
                    ### Exercise
                    You can use variables to make the parrot say more than only your name. Can you complete this code?
            3:
                story_text: |
                    Teach your parrot a new word with `{add}`.
                example_code: |
                    ```
                    words {is} squawk, Hedy
                    {print} Train your parrot!
                    new_word {is} {ask} Which word do you want to teach them?
                    {add} new_word {to_list} words
                    {print} üßí Say new_word , Hedy!
                    {print} ü¶ú words {at} {random}
                    ```
            4:
                story_text: |
                    In this level we have to use quotation marks with the commands `{ask}` and `{print}`.
                    Can you complete the code by adding quotation marks?
            5:
                story_text: |
                    Reward your parrot {if} it says the correct word!
                example_code: |
                    ```
                    words {is} squawk, Hedy
                    {print} 'Train your parrot!'
                    new_word {is} {ask} 'Which word do you want to teach them?'
                    {add} new_word {to_list} words
                    said_word {is} words {at} {random}
                    {print} 'üßí Say ' new_word ', Hedy!'
                    {print} 'ü¶ú ' said_word
                    {if} said_word {is} new_word {print} 'üßí Great job, Hedy! üç™'
                    {else} {print} 'üßí No, Hedy! Say ' new_word
                    ```
    piggybank:
        levels:
            12:
                story_text: |
                    In this adventure you learn how to make a digital piggy bank, to calculate how much money you have and how long you need to save up to buy what you want!
                example_code: |
                    ```
                    {print} 'The digital piggy bank'
                    wish = {ask} 'What would you like to buy?'
                    price = {ask} 'How much does that cost?'
                    saved = {ask} 'How much money have you saved already?'
                    allowance = {ask} 'How much pocket money do you get per week?'
                    to_save = price - saved
                    weeks = to_save / allowance
                    {print} 'You can buy a ' wish ' in ' weeks ' weeks.'
            14:
                example_code: |
                    ```
                    _ calculate_budget with wish, money, allowance
                        to_save = wish - money
                        weeks = to_save / allowance
                        {if} wish _ money
                            {print} 'You need to save up some more!'
                            {print} 'Youll need ' weeks ' more weeks.'
                        {else}
                            {print} 'Great! You have enough'
                            {print} 'Lets go shopping!'

                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'

                    {call} calculate_budget with _, _, _
                    ```
    pressit:
        levels:
            9:
                story_text: |
                    Now that you know how to combine statements, you can create a touch type tool with `{pressed}`.

                    ### Exercise
                    Finish the code. Each time a random letter should be chosen, which you have to press. You get a point for a correct press, and and two points deduction for a wrong press.
                    **(extra)** Clear the screen after each letter, and show the user how many points they have scored.
    print_command:
        levels:
            18:
                example_code_2: |
                    ```
                    temperature = 25
                    {print}('It is ', temperature, ' degrees outside')
                    ```

                    {print}('My name is ', name)
    random_command:
        levels:
            16:
                story_text: |-
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    We use square brackets to point out a place in a list. For example: `friends[1]` is the first name on the list of friends, as you can see in the first part of the example code. The second part of the example code shows you that we can also match 2 lists using the variable i.
    repeat_command:
        description: repeat command
        levels:
            7:
                story_text: |
                    ## Repeat! Repeat! Repeat!
                    Level 7 adds the `{repeat}` command.  `{repeat}` can be used to execute one line of code multiple times. Like this:

                    ### Exercise
                    Play around with the repeat command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?
            9:
                story_text: |
                    Great job! You've reached another new level! In the previous level you've learned to use multiple lines of code in an {if} or {repeat} command. But you can't yet combine the two...
                    Good news! In this level you will be allowed to put an {if} inside an {if}, or inside a {repeat} command. Putting a block of code inside another block of code is called nesting.                     ``` Putting a block of code inside another block of code is called nesting.
                example_code: |
                    ```
                    answer = {ask} 'Are you ready to learn something new?'
                    {if} answer {is} yes
                        {print} 'Great! You can learn to use the repeat command in the if command!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                    {else}
                        {print} 'Maybe you should practice some more in the previous level'
    repeat_command_2:
        description: repeat command 2
        levels:
            7:
                story_text_2: |
                    Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.
                    Then, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.
    restaurant:
        name: √âtterem
        default_save_name: √âtterem
        description: K√©sz√≠ts virtu√°lis √©ttermet
        levels:
            1:
                story_text: |-
                    Az 1. szinten elk√©sz√≠theted saj√°t virtu√°lis √©ttermedet √©s fogadhatod vend√©gei megrendel√©seit.

                    Tudn√°l m√©g egy sort felvenni az √©ttermi k√≥dodba? Megk√©rdezheted p√©ld√°ul a vend√©geket, hogy mit szeretn√©nek inni, megmondod-e nekik az √°rat, vagy k√≠v√°nsz-e nekik j√≥ √©tv√°gyat?
                story_text_2: |
                    ### Exercise
                    Can you think of more lines to add to your restaurant code? For example, can you {ask} the guests what they'd like to drink, tell them the price, or wish them a pleasant meal?
                example_code_2: |-
                    ```
                    print √údv√∂zl√ºnk a Hedy √©tteremben
                    ask Mit rendelsz?
                    echo Sz√≥val ezt szeretn√©d megrendelni
                    print K√∂sz√∂nj√ºk a rendel√©sedet!
                    print M√°r √∫ton van!
                    ```
            2:
                story_text: |-
                    A 2. szinten v√°ltoz√≥k seg√≠ts√©g√©vel b≈ëv√≠theted √©ttermedet. Az 1. szinten Hedy csak egyszer tudta visszhangozni a sorrendet, √©s csak az utols√≥ dologra eml√©kezett, amit rendeltek.
                    Most m√°r haszn√°lhatsz v√°ltoz√≥kat, √©s Hedy eml√©kszik mind az √©telekre, mind az italokra!
                example_code: |-
                    ```
                    print √údv√∂zl√ºnk a Hedy √©tteremben!
                    print Ma pizz√°t vagy lasagnat szolg√°lunk fel.
                    etel is ask Mit szeretn√©l enni?
                    print J√≥ v√°laszt√°s! A etel a kedvencem!
                    feltet is ask 'Szeretn√©l r√° h√∫st vagy z√∂lds√©get?'
                    print etel rajta feltet √∫ton van!
                    ital is ask 'Mit szeretn√©l inni?'
                    print K√∂sz√∂nj√ºk a rendel√©sedet.
                    print A etel √©s ital mindj√°rt itt lesz!
                    ```
                story_text_2: |
                    ### Exercise
                    Can you make this code more elaborate? For example by adding drinks to the order? Or...?
            3:
                story_text: |-
                    Nehezen tudod eld√∂nteni, mit szeretn√©l vacsor√°zni? Engedheted, hogy Hedy v√°lasszon neked!
                    Egyszer≈±en add hozz√° kedvenc (vagy legkev√©sb√© kedvenc) √©teleidnek list√°j√°t, √©s Hedy v√©letlenszer≈±en v√°laszthatja ki a vacsor√°dat.
                    Sz√≥rakozhatsz egy kicsit, ha hagyod, hogy Hedy megv√°lassza a vacsora √°r√°t is! Mit fogsz kapni?
                example_code: |
                    ```
                    print √údv√∂z√∂lj√ºk a Hedy's Random √©tteremben!
                    print Az egyetlen √©tterem amely v√©letlenszer≈±en kiv√°lasztja az √©tkez√©st √©s annak √°r√°t az √ñn sz√°m√°ra!
                    eloetelek is sal√°ta, leves, sajt
                    foetel is pizza, kelbimb√≥, spagetti
                    desszertek is brownie, fagylalt, francia sajtok
                    ital is k√≥la, s√∂r, v√≠z
                    arak is 1000 forint, 2000 forint, 3000 forint
                    print A k√∂vetkez≈ëvel indul: eloetelek at random
                    print Ezut√°n kiszolg√°ljuk: foetel at random
                    print √âs desszertk√©nt: desszertek at random
                    print Igyon egy italt
                    print Ez lesz: arak at random
                    print K√∂sz√∂n√∂m √©s √©lvezze az √©tkez√©st!
                    ```
                story_text_2: |
                    Does your costumer have any allergies or do they dislike certain dishes? Then you can use the `{remove}`command to remove it from your menu.
                example_code_2: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    allergies {is} {ask} Are you allergic to any falvors?
                    {remove} allergies {from} flavors
                    {print} You get a flavors {at} {random} milkshake
                    ```
            4:
                story_text: |
                    ### Exercise
                    Add the quotation marks to this code to make it work! Be careful: variables should not be in quotation marks.
                    Then, use the `{clear}` command to only show one line at a time in your output screen.

                    ### Exercise 2
                    Go back to the previous level and copy your restaurant code. Make the code work in this level by adding quotation marks in the right spots and add some `{clear}` commands.
                example_code: |-
                    ```
                    _ Add the quotation marks to this code _
                    print √údv√∂zl√ºnk a Hedy √âtteremben!
                    print Ma pizz√°t vagy lasagnat szolg√°lunk fel.
                    etel is ask Mit szeretn√©l enni?
                    print J√≥ v√°laszt√°s! A(z)  etel  nekem is kedvencem!
                    feltet is ask 'Szeretn√©l h√∫s vagy z√∂lds√©get r√°?
                    print etel  , rajta a(z)  feltet  m√°r √∫ton van!
                    ital is ask Mit szeretn√©l inni hozz√°?
                    print K√∂sz√∂nj√ºk a rendel√©sedet.
                    print 'A(z)  etel  √©s a(z)  ital  mindj√°rt itt lesz!
                    ```
            5:
                story_text: |-
                    A 4. szinten az if parancs lehet≈ëv√© teszi, hogy k√©rd√©seket tegy√©l fel √ºgyfeleidnek, √©s k√ºl√∂nb√∂z≈ë m√≥don felelj a v√°laszaikra.
                    Az al√°bbi p√©ld√°ban l√°thatod, hogy megk√©rdezheted az √ºgyfeledet, hogy szeretn√©-e hallani a k√ºl√∂nlegess√©geket, √©s Hedy ennek megfelel≈ëen v√°laszolhat.
                example_code: |
                    ```
                    print '√údv√∂zl√ºnk a Hedy √âtteremben!'
                    kulonleges is ask 'Szeretn√©l hallani ma a k√ºl√∂nlegess√©geinkr≈ël?'
                    if kulonleges is igen print 'Mai k√ºl√∂nlegess√©g√ºnk piri piri csirke √©s rizs.' else print 'Nem probl√©ma.'
                    etel is ask 'Mit szeretn√©l enni?'
                    print 'Egy ' etel', mindj√°rt j√∂n!'
                    ital is ask 'Mit szeretn√©l inni hozz√°?'
                    if ital is k√≥la print 'Sajn√°lom a k√≥la kifogyott!' else print 'J√≥ v√°laszt√°s!!'
                    mas is ask 'Szeretn√©l valami m√°st?'
                    print 'Hadd ism√©teljem el a rendel√©sedet...'
                    print 'Egy ' etel
                    if ital is k√≥la print '√©s...' else print 'Egy ' ital
                    if mas is nem print 'Ez minden!' else print 'Egy  ' mas
                    print 'K√∂sz√∂nj√ºk a rendel√©sedet, j√≥ √©tv√°gyat !'
                    ```

                    Tudn√°l m√©g t√∂bb k√©rd√©st feltenni az √ºgyfeleknek, amikor rendelnek, √©s k√ºl√∂nb√∂z≈ë  m√≥don felelni a v√°laszaikra az if paranccsal?
            6:
                story_text: |-
                    A 6. szinten matematikai sz√°m√≠t√°sokkal kisz√°m√≠thatod az √ºgyfelek megrendel√©s√©nek teljes √°r√°t, ami re√°lisabb√° teheti a virtu√°lis √©ttermet.

                    K√©sz√≠thetsz egyszer≈± √©ttermi k√≥dot, p√©ld√°ul.
                example_code: |
                    ```
                    print '√údv√∂zl√ºnk a Hedy √âtteremben'
                    print 'Ez a men√ºnk:'
                    print 'F≈ë √©teleink: pizza, lasagne vagy spagetti'
                    foetel is ask 'Melyik f≈ë√©telt szeretn√©d?'
                    ar is 0
                    if foetel is pizza ar is 1000
                    if foetel is lasagne ar is 1200
                    if foetel is spagetti ar is 800
                    print 'Ezt rendelted: ' foetel
                    print 'Ez ' ar ' forint lesz, k√©rem'
                    print 'K√∂sz√∂n√∂m, j√≥ √©tv√°gyat!'
                    ```

                    De m√©g sok mindent hozz√°adhatsz a virtu√°lis √©ttermedhez, p√©ld√°ul t√∂bb tanfolyamot.

                    Ebben a p√©ld√°ban h√°rom tanfolyam l√©tezik, amelyek t√∂bb k√≥dot √©s tov√°bbi kieg√©sz√≠t√©seket ig√©nyelnek az √°r kisz√°m√≠t√°sakor.

                    Hozz√°adhatsz m√©g sok mindent a virtu√°lis √©ttermedhez, p√©ld√°ul:
                    - k√©rdezd meg, h√°ny ember j√∂n, √©s szorozd meg az √°rat ezzel az √©rt√©kkel
                    - felveszel egy m√°sik √©telt?
                    - kedvezm√©nyt adsz az embereknek, amikor (titkos) kuponk√≥dot adnak meg?
                    - adsz hozz√° gyermekmen√ºt?
                    - gondolsz m√°s sz√≥rakoztat√≥ dolgokra?
            7:
                story_text: |-
                    Az 6. szinten megtanultad, hogyan haszn√°lhatod az ism√©tl√©s parancsot egy k√≥dsor megism√©tl√©s√©re bizonyos sz√°m√∫ alkalommal.
                    Ezt haszn√°lhatod √©ttermedben, hogy megk√©rdezz t√∂bb embert, hogy mit szeretn√©nek enni. Mint ez:


                    Az 5. szinten t√∂bb embert is megk√©rdezhetsz, hogy mit szeretn√©nek enni, de nem lehet minden egyes rendel√©st k√ºl√∂n ki√≠ratni, mert csak egy k√≥dsort ism√©telhetsz meg.
                    A 7. szinten megtanulhatod, hogyan kell t√∂bb sor k√≥dot egyszerre megism√©telni, ami lehet≈ëv√© teszi t√∂bb rendel√©s k√©r√©s√©t √©s ki√≠rat√°s√°t is!
                example_code: |-
                    ```
                    print '√údv√∂zl√ºnk a Hedy √©tteremben!'
                    emberek is ask 'H√°ny ember j√∂n ma?'
                    repeat emberek times food is ask 'Mit szeretn√©l ennit?'
                    print 'K√∂sz√∂nj√ºk megrendel√©sedet! Mindj√°rt j√∂n!'
                    ```
            9:
                story_text: |-
                    A 7. szinten t√∂bb sor k√≥d megism√©tl√©s√©vel bonyolultabb√° teheted virtu√°lis √©ttermedet. Mint ez:

                    Term√©szetesen ez a k√≥d b≈ëv√≠thet≈ë a men√º tov√°bbi elemeivel, italokkal √©s/vagy t√∂bb fog√°ssal, √≠gy nyugodtan adj hozz√° annyi lehet≈ës√©get, amennyit csak akarsz!
                example_code: |-
                    ```
                    print '√údv√∂zl√ºnk a Hedy √©tteremben!'
                    emberek is ask 'H√°ny ember j√∂n ma??'
                    print 'Nagyszer≈±!'
                    print 'A mai men√º pizza vagy sal√°ta'
                    ar is 0
                    repeat emberek times
                        etel is ask 'Mit szeretn√©l rendelni?'
                        print etel
                        if etel is pizza
                            ar is ar + 1000
                        else
                            ar is ar + 800
                    print 'K√∂sz√∂nj√ºk rendel√©sedet!'
                    print 'Ez ' ar ' forint lesz'
                    print 'K√∂sz√∂n√∂m, j√≥ √©tv√°gyat!!'
                    ```
            10:
                story_text: |
                    In this level you'll learn how to easily {ask} your guests' orders in a short code.
                example_code: |
                    ```
                    courses = appetizer, main course, dessert
                    {for} course {in} courses
                        food = {ask} 'What would you like to eat as your ' course '?'
                        {print} food ' will be your ' course
                    ```
                story_text_2: |
                    Of course, you could also order for multiple people!
                example_code_2: |
                    ```
                    courses = appetizer, main course, dessert
                    names = Timon, Onno
                    {for} name {in} names
                        {for} course {in} courses
                            food = {ask} name ', what would you like to eat as your ' course '?'
                            {print} name ' orders ' food ' as their ' course
                    ```
            11:
                story_text: Az "for i in 1 in 5" tartom√°nyban haszn√°lhatjuk a t√∂bb v√°s√°rl√≥ megrendel√©seinek rendezett ki√≠rat√°s√°ra.
                example_code: |
                    ```
                    print '√údv√∂zl√ºnk a Hedyn√©l!'
                    emberek is ask 'H√°ny ember sz√°m√°ra rendelsz?'
                    for i in range 1 to emberek
                        print 'Rendel√©ssz√°m ' i
                        etel is ask 'Mit szeretn√©l enni?'
                        print etel
                        if etel is s√ºltkrumpli
                            szosz is ask 'Milyen sz√≥szt szeretn√©l hozz√°?'
                            print szosz
                        ital is ask 'Mit szeretn√©l inni?'
                        print ital
                    ar is 400 * emberek
                    print 'Ez ' ar ' forint lesz, k√©rem'
                    ```
            12:
                story_text: |
                    From this level on you can use decimal numbers to make you menu more realistic.
                example_code: |
                    ```
                    price = 0
                    food = {ask} 'What would you like to order?'
                    drink = {ask} 'What would you like to drink?'
                    {if} food {is} 'hamburger'
                        price = price + 6.50
                    {if} food {is} 'pizza'
                        price = price + 5.75
                    {if} drink {is} 'water'
                        price = price + 1.20
                    {if} drink {is} 'soda'
                        price = price + 2.35
                    {print} 'That will be ' price ' dollar, please'
                    ```
            13:
                story_text: |
                    In this level we can use the new commands to upgrade our restaurant.
                    We use `{and}` to see {if} two things are both the case.
                example_code: |
                    ```
                    price = 10
                    food = {ask} 'What would you like to eat?'
                    drinks = {ask} 'What would you like to drink?'
                    {if} food {is} 'sandwich' {and} drinks {is} 'juice'
                        {print} 'Thats our discount menu'
                        price = price - 3
                    {print} 'That will be ' price ' dollars'
                    ```
    rock:
        name: K≈ë, pap√≠r, oll√≥
        default_save_name: K≈ë
        description: K√©sz√≠ts saj√°t k≈ë, pap√≠r, oll√≥ j√°t√©kot
        levels:
            1:
                story_text: |-
                    Az 1. szinten kezdhetsz egy k≈ë, pap√≠r, oll√≥ j√°t√©kkal.

                    A `ask` utas√≠t√°ssal v√°laszthatsz, √©s az` echo'-val megism√©telheted ezt a v√°laszt√°st.

                    Az ism√©tl√©s term√©szetesen kiss√© unalmas, mert a sz√°m√≠t√≥g√©p nem v√°laszt semmit. Ezt k√©s≈ëbb mi magunk is elk√©sz√≠tj√ºk.
                example_code: |-
                    ```
                    print Mit v√°lasztott√°l?
                    ask V√°lassz k≈ë, pap√≠r √©s oll√≥ k√∂z√ºl
                    echo ez volt a v√°laszt√°sod:
                    ```
            2:
                story_text: |
                    In this level you can practise using the variables, so that you can make the rock, paper, scissors game in the next level!
                example_code: |
                    ```
                    choice {is} _
                    {print} I choose choice
                    ```
            3:
                story_text: |
                    A 2. szinten list√°kat √≠rhatunk be, √©s v√°laszthatunk bel≈ël√ºk dolgokat.
                    El≈ësz√∂r k√©sz√≠ts egy list√°t az `is` seg√≠ts√©g√©vel. Ezut√°n hagyhatod, hogy a sz√°m√≠t√≥g√©p a `at
                    random` seg√≠ts√©g√©vel v√°lasszon ki valamit a list√°b√≥l.
                    P√©ld√°ul megengedheted, hogy a sz√°m√≠t√≥g√©p k≈ë, pap√≠r √©s oll√≥ k√∂z√ºl v√°logasson.

                    √öjra haszn√°lhatod a `ask'-t a 2. szinten. Ki√≠rathatod sz√°m√≠t√≥g√©p a v√°laszt√°s√°t?
                    Vigy√°zz, a `ask` most m√°sk√©pp m≈±k√∂dik, mint az 1. szinten. El≈ëtte el kell nevezni.

                    V√©letlen√ºl megpr√≥b√°lt√°l olyan mondatot megfogalmazni, amely tartalmazza a valasztas
                    v√°ltoz√≥t?
                    P√©ld√°ul. ```print Az eny√©m: valasztas```. Pr√≥b√°ld ki, ha m√©g nem tetted meg.
                    Ez nem m≈±k√∂dik megfelel≈ëen! Azt√°n megkapod: a [k≈ë, pap√≠r, oll√≥] k√∂z√ºl v√°lasztottam.
                    Ezt meg tudod majd oldani a 3. szinten.
                example_code: |-
                    ```
                    valasztas is k≈ë, pap√≠r, oll√≥
                    print valasztas at random
                    ```
                story_text_2: |
                    ### Exercise
                    Now you only have one player, so can you add a second player?
                    You can even use variables to name player 1 and player 2.
                example_code_2: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} player 1 chooses... choices {at} {random}
                    {print} player 2 _
                    ```
            5:
                story_text: |-
                    A 4. szinten meghat√°rozhatjuk, hogy ki nyert.
                    Ehhez sz√ºks√©ged van az √∫j `if` k√≥dra.

                    Mentsd el a a sz√°m√≠t√≥g√©p v√°laszt√°s√°t egy tetsz≈ëleges n√©vvel.
                    Ezut√°n haszn√°lhatod az `if' utas√≠t√°st, hogy l√°sd, azonosak-e vagy k√ºl√∂nb√∂znek-e.
                    Befejezed a k√≥dot?

                    El≈ësz√∂r t√∂ltsd ki a helyes k√≥dot a pontok hely√©n, √©s n√©zd meg, hogy d√∂ntetlen-e.
                example_code: |-
                    ```
                    lehetoseg is k≈ë, pap√≠r, oll√≥
                    szamitogepe is _
                    valaszt is ask Mit v√°lasztasz?
                    print 'ezt v√°lasztottad: ' _
                    print 'a sz√°m√≠t√≥g√©p v√°laszt√°sa: ' _
                    if _ is _ print 'd√∂ntetlen!' else print 'nem d√∂ntetlen'
                    if valaszt is k≈ë and szamitogepe is pap√≠r print 'sz√°m√≠t√≥g√©p nyert'
                    ```
            9:
                story_text: |
                    In this level you can program the whole rock, paper, scissors game by nesting the {if}-commands. Can you finish the code?
                example_code: |
                    ```
                    choices = rock, paper, scissors
                    your_choice = {ask} 'What do you choose?'
                    {print} 'You choose ' your_choice
                    computer_choice = choices {at} {random}
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} rock
                        {if} your_choice {is} paper
                            {print} 'You win!'
                        {if} your_choice {is} scissors
                            {print} 'You lose!'
                    # finish this code
                    ```
            10:
                story_text: |
                    Feeling too lazy to play the game yourself? Let Hedy play it for you!
                example_code: |
                    ```
                    choices = rock, paper, scissors
                    players = Marleen, Michael
                    {for} player {in} players
                         {print} player ' chooses ' choices {at} {random}
                    ```
            13:
                story_text: |
                    With the `{and}` command you can shorten your rock, paper, scissors code! Check out the example code below and try to finish it.
                example_code: |
                    ```
                    options = 'rock', 'paper', 'scissors'
                    your_choice = {ask} 'What do you choose?'
                    computer_choice = options {at} {random}
                    {print} 'You choose ' your_choice
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'paper'
                        {print} 'You win!'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'
                        {print} 'The computer wins!'
                    ```
            15:
                example_code: |
                    ```
                    won = 'no'
                    options = 'rock', 'paper', 'scissors'
                    {while} won == 'no'
                        your_choice = {ask} 'What do you choose?'
                        computer_choice = options {at} {random}
                        {print} 'you chose ' your_choice
                        {print} 'the computer chose ' computer_choice
                        {if} computer_choice == your_choice
                            {print} 'Tie!'
                        {if} computer_choice == 'rock' {and} your_choice == 'scissors'
                            {print} 'You lose!'
                        {if} computer_choice == 'rock' {and} your_choice == 'paper'
                            {print} 'You win!'
                            won = 'yes'
    rock_2:
        levels:
            2:
                story_text: |
                    Now that you have learned how to use the `{ask} command, you can make your rock, paper, scissors code interavtive too!

                    ### Exercise
                    Make the rock, paper, scissors code interactive by adding the `{ask}` command and a question to your rock, paper, scissors code.
                example_code: |
                    ```
                    choice is _
                    {print} I choose choice
                    ```
    secret:
        default_save_name: language
        levels:
            12:
                story_text: |
                    In this adventure you can create your own super spy code. Encode a message that only the right agent can decipher.
                    If the enemy tries to crack the code, they will get some false info to waste their time.
                example_code: |
                    ```
                    name {is} {ask} 'What is your name?'
                    {if} name {is} '_'
                        a {is} 'Go to the airport '
                    {else}
                        a {is} 'Go to the trainstation '
                    password {is} {ask} 'What is the password?'
                    {if} password {is} _
                        b {is} 'tomorrow at 02.00'
                    {else}
                        b {is} 'today at 10.00'
                    {print} _ _ _
                    ```
            13:
                story_text: |
                    The code you made in the previous level can be made a lot easier in this one with the `{and}` command.
    sleep_command:
        description: introducing sleep command
        levels:
            2:
                story_text: |
                    ## The sleep command
                    Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.
    songs:
        name: √ânekelj egy dalt!
        default_save_name: Dal
        description: Dal ki√≠rat√°sa
        levels:
            6:
                story_text: |-
                    A dalok gyakran sok ism√©tl√©st tartalmaznak. N√©ha az ism√©tl√©s alapja a sz√°ml√°l√°s is.
                    P√©ld√°ul a j√≥l ismert dalban ‚Äû√ºveg s√∂r‚Äù. Programozhatod azt a dalt egy kis matekkal.

                    Most megism√©telheted a 2‚Äì9. Sort, ah√°nyszor csak akarod, a sorok m√°sol√°s√°val.

                    # El≈ëretekintve
                    Az 5. szinten megtanultunk 1 sort megism√©telni az `repeat` sz√≥val, √≠gy:

                    * repeat 3 times print 'Baby Shark Tutududududu'

                    De ahogyan ebben a leck√©ben l√°tni fogod, n√©ha t√∂bb sort is meg akarsz egy√ºtt ism√©telni. Ezt meg lehet tenni v√°g√°ssal √©s beilleszt√©ssel, de ez sok munka. A 7. szinten megtanulod, hogyan kell ezt k√∂nnyebben megtenni.
                example_code: |-
                    ```
                    verssor = 99
                    print verssor ' √ºveg s√∂r a falon'
                    print verssor ' √ºveg s√∂r'
                    print 'Vegy√©l egyet, add tov√°bb'
                    verssor = verssor - 1
                    print verssor ' √ºveg s√∂r a falon'
                    ```
                example_code_2: |
                    ```
                    number = 6
                    number = number - 1
                    print number ' little monkeys jumping on the bed'
                    print 'One fell off and bumped his head'
                    print 'Mama called the doctor and the doctor said'
                    print 'NO MORE MONKEYS JUMPING ON THE BED!'
                    sleep
                    ```
            7:
                story_text: |-
                    A dalok gyakran sok ism√©tl√©st tartalmaznak. P√©ld√°ul... Baby Shark! Ha el√©nekled, ugyanazt √©nekled folyamatosan:

                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark

                    ezt a dalt sokkal r√∂videbb√© teheted egy `repeat` utas√≠t√°ssal! Be tudod fejezni a k√≥dot?

                    A Baby Shark ut√°n term√©szetesen m√°s dalokat is programozhat. Sok dal van ism√©tl√©ssel.
                example_code: |-
                    ```
                    repeat _ _ print 'Baby Shark tututudutudu'
                    print 'Baby Shark'
                    ```
            8:
                story_text: A 6. szinten a "√úveg s√∂r" dalt programoztad. Egy verset alkott√°l, majd 99 -szer kellett lem√°solnod a verssorokat. A 7. szinten 99 alkalommal ism√©telheted meg a dalt, csak egy egyszer≈± sor hozz√°ad√°s√°val!
                example_code: |
                    ```
                    verssor = 99
                    print verssor ' √ºveg s√∂r a falon'
                    print verssor ' √ºveg s√∂r'
                    print 'Vegy√©l egyet, add tov√°bb'
                    verssor = verssor - 1
                    print verssor '√ºveg s√∂r a falon'
                    ```
            10:
                story_text: |
                    In this level you can easily make the childrens' song 'Five little monkeys'. Can you make the last chorus?
                    You can also make the whole baby shark song (including all the other sharks in the family) in only 6 lines!
                    Or you can make Old MacDonald with all the different animals.
                example_code: |
                    ```
                    monkeys = 5, 4, 3, 2
                    {for} monkey {in} monkeys
                        {print} monkey ' little monkeys jumping on the bed'
                        {print} 'One fell off and bumped his head'
                        {print} 'Mama called the doctor and the doctor said'
                        {print} 'NO MORE MONKEYS JUMPING ON THE BED!'
                    ```

                    ```
                    sharks = baby, mommy, daddy, grandma, grandpa
                    {for} shark {in} sharks
                        {print} shark 'tututututudu'
                        {print} shark 'tututututudu'
                        {print} shark 'tututututudu'
                        {print} shark
                    ```
                    ```
                    animals = pig, dog, cow
                    {for} animal {in} animals
                        {if} animal {is} pig
                            sound = oink
                        {if} animal {is} dog
                            sound = woof
                        {if} animal {is} cow
                            sound = moo
                        {print} 'Old MacDonald had a farm'
                        {print} 'E I E I O!'
                        {print} 'and on that farm he had a ' animal
                        {print} 'E I E I O!'
                        {print} 'with a ' sound sound ' here'
                        {print} 'and a ' sound sound ' there'
                        {print} 'here a ' sound
                        {print} 'there a ' sound
                        {print} 'everywhere a ' sound sound
                    ```
                story_text_2: |
                    ### Exercise 2
                    Print the song Five little moneys jumping on the bed. Look up the text if you don't remember.

                    **(extra)** Print the song Old MacDonald had a farm, and make sure all animals make a different sound, using an `{if}`.
            11:
                story_text: |
                    In this level you can use the `{for} i {in} {range}` command to make songs that use counting.
                example_code: |
                    ```
                    {for} i {in} {range} 5 {to} 1
                        {print} i ' little monkeys jumping on the bed'
                        {print} 'One fell off and bumped his head'
                        {print} 'Mama called the doctor and the doctor said'
                        {if} i {is} 1
                            {print} 'PUT THOSE MONKEYS RIGHT TO BED!'
                        {else}
                            {print} 'NO MORE MONKEYS JUMPING ON THE BED!'
                    ```
            12:
                story_text: |
                    In this song we can make it even easier to program '{if} you're happy and you know it, clap your hands'. Because we can put all of the actions in a variable, check it out:
                example_code: |
                    ```
                    actions = 'clap your hands', 'stomp your feet', 'shout Hurray!'
                    {for} action {in} actions
                        {for} i {in} {range} 1 {to} 2
                            {print} '{if} youre happy and you know it'
                            {print} action
                        {print} '{if} youre happy and you know it and you really want to show it'
                        {print} '{if} youre happy and you know it'
                        {print} action
                    ```
    songs_2:
        levels:
            12:
                example_code: |
                    ```
                    {define} twinkle
                        {print} 'Twinkle'
                        {print} '...'

                    {call} twinkle
                    {print} 'Up above the world so high'
                    {print} 'Like a diamond in the sky'
                    {call} _
                    ```
    turtle:
        name: Tekn≈ës
        default_save_name: tekn≈ës
        description: K√©sz√≠ts saj√°t rajzot
        levels:
            1:
                story_text: |-
                    Az 1. szinten Hedy seg√≠ts√©g√©vel rajzolhatsz is. A fordulatok √©s vonalak kombin√°l√°s√°val n√©gyzetet vagy l√©pcs≈ët k√©sz√≠thetsz!

                    Az "el≈ëre" seg√≠ts√©g√©vel h√∫zhatsz egy vonalat el≈ëre. A m√∂g√∂tte l√©v≈ë sz√°m hat√°rozza meg, hogy a tekn≈ës mennyit fog gyalogolni. "jobbra fordul" negyed fordulatot forgat az √≥ramutat√≥ j√°r√°s√°val megegyez≈ë ir√°nyba, "balra fordul" az √≥ramutat√≥ j√°r√°s√°val ellent√©tes ir√°nyba fordul
                story_text_2: |
                    ### Exercise
                    Ez egy kis l√©pcs≈ë kezdete. El tudod √©rni az 5 l√©p√©st?
            2:
                story_text: |-
                    Az 1. szinten a tekn≈ës csak balra vagy jobbra tudott fordulni. Ez egy kicsit unalmas!
                    A 2. szinten minden ir√°nyba tudja mutatni az orr√°t.

                    Haszn√°ld a 90-et a negyed fordulathoz. Ezeket fokoknak h√≠vjuk. A teljes fordulat 360 fok.
                    Tudsz √°br√°t k√©sz√≠teni ezzel a k√≥ddal? Tal√°n egy h√°romsz√∂g vagy egy k√∂r?
                example_code: |
                    ```
                    print √Åbr√°k rajzol√°sa
                    angle is 90
                    turn angle
                    forward 25
                    turn angle
                    forward 25
                    ```
                story_text_2: |
                    Also, in level 1 the turtle could only turn left or right. That is a bit boring!
                    In level 2 he can point his nose in all directions.

                    Use 90 to turn a quarter. We call this degrees. A full turn is 360 degrees.
                    Can you make a figure with this code? Maybe a triangle or a circle?
                example_code_2: |
                    ```
                    {print} Drawing figures
                    angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
            3:
                story_text: |-
                    Iin level 3 you can use use `random` with the drawing turtle. A random choice makes the turtle walk a different path each time.
                    Use `at random` to choose a value from a list. You can copy and paste lines 2 and 3 so create a longer random path.
                example_code: |-
                    ```
                    angles is 10, 50, 90, 150, 250
                    turn angles at random
                    forward 25
                    ```
            4:
                story_text: A 3. szinten id√©z≈ëjeleket kell haszn√°lni a "print" √©s az "ask" sz√∂veggel. A tekn≈ës haszn√°lata k√∂zben is
                example_code: |
                    ```
                    print 'Tekn≈ës verseny'
                    irany is ask 'H√°ny fokot forduljon?'
                    turn irany
                    tavolsag is ask 'Milyen messze menjen?'
                    forward tavolsag
                    ```
            5:
                story_text: A 4. szinten v√°laszt√°st hozhatsz l√©tre az `if` utas√≠t√°ssal. P√©ld√°ul v√°laszthatsz k√ºl√∂nb√∂z≈ë t√≠pus√∫ alakzatok k√∂z√∂tt.
                example_code: |-
                    ```
                    print '√Åbr√°k rajzol√°sa'
                    alakzat is ask 'N√©gyzetet vagy h√°romsz√∂get akarsz rajzolni?'
                    if alakzat is h√°romsz√∂g szog is 120 else szog is 90
                    turn szog
                    forward 25
                    turn szog
                    forward 25
                    turn szog
                    forward 25
                    turn szog
                    forward 25
                    ```
                example_code_2: |
                    ```
                    direction {is} {ask} 'Do you want to go left, right, or straight ahead?'
                    if direction is left turn _
                    if direction is right turn _
                    forward 100
                    ```
            6:
                story_text: |-
                    Az 5. szinten sz√°m√≠t√°sok seg√≠ts√©g√©vel k√ºl√∂nb√∂z≈ë alakzatokat rajzolhatsz.
                    Lehet, hogy az iskol√°ban m√°r tanultad, hogy a teljes k√∂r fordulata 360 fokos. Ha nem, most m√°r tudod!
                    Ez√©rt is haszn√°lsz 90 fokot egy n√©gyzethez. 360 osztva 4 -gyel 90.
                    Most, hogy tudunk matematik√°zni Hedyvel, megrajzolhatjuk az √∂sszes k√≠v√°nt alakzatot!
                example_code: |-
                    ```
                    szogek is ask 'H√°ny sz√∂get akarsz?'
                    szog is 360 / szogek
                    forward 50
                    turn szog
                    forward 50
                    turn szog
                    forward 50
                    turn szog
                    forward 50
                    turn szog
                    forward 50
                    turn szog
                    forward 50
                    turn szog
                    ```
            8:
                story_text: |-
                    Most, hogy t√∂bb sort megism√©telhet√ºnk, k√∂nnyebben k√©sz√≠thet√ºnk alakzatokat.
                    Csak egyszer kell be√°ll√≠tani a sz√∂get, majd ezt a v√°ltoz√≥t haszn√°lni a `repeat` utas√≠t√°ssal.


                    Tov√°bb√° jav√≠thatjuk azt a programot, amely k√ºl√∂nb√∂z≈ë alakzatokat rajzol.
                    Kital√°lod, mennyit kell itt fordulnia a tekn≈ësnek? Fejezd be a k√≥dot, √©s rajzolhatsz tetsz≈ëleges soksz√∂get!
                example_code: |-
                    ```
                    szog is 90
                    repeat 10 times
                        turn szog
                        forward 50
                    ```
                story_text_2: |
                    Also, we can now improve the program that draws different figures.
                    Can you figure out how far the turtle has to turn here? Finish the code and you can draw any polygon you'd like!
                example_code_2: "```\nszogek = {ask} 'How many angles should I draw?'\nszog = 360 / szogek \n{repeat} szogek {times}\n    {turn} _\n    {forward} _\n```\n"
            9:
                story_text: |
                    Now that we can use a `{repeat}` inside a `{repeat}`, we can create more complex figures.

                    ### Exercise 1
                    This code creates three black triangles, change that into five pink squares.

                     **(extra)** Create a figure of your own choosing consisting of at least two different shapes types.
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                     **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
    turtle_draw_it:
        levels:
            9:
                example_code: |
                    Hint for the nested squares:
                    ```
                    colors = red, blue, orange, yellow, pink, purple, green, brown, black
                    distance = 120
                    repeat 5 times
                    _
                    ```
                    Hint for the flags:
                    ```
                    country = ask 'which country would you like to see the flag of?'
                    if country is 'the Netherlands'
                        color_1 = red
                        color_2 = white
                        color_3 = blue
                    ```
            10:
                example_code: |
                    Hint Nested Hexagon:
                    ```
                    distances = 100, 80, 60, 40, 20
                    {for} distance {in} distances
                    _
                    ```

                    Hint Traffic Lights:
                    ```
                    colors = red, yellow, green
                    {for} chosen_color {in} colors
                        color _
                        {repeat} _
                    ```
            12:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!
                    Hint: Bracelet designing program. Firstly, define a function **for each shape** you want to use on the bacelet. Then, add the shapes to the bacelet like this:
                    </div>
                    Bracelet Designing program <img src="https://github.com/hedyorg/hedy/assets/80678586/549d7f3a-c492-4b4a-b173-746eb3400951" width="500">
                example_code: |
                    ```
                    {define} draw_a_square
                    _

                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 180

                    {for} i {in} {range} 1 {to} 5
                        {color} gray
                        {forward} 100
                        shape = {ask} 'What kind of shape would you like next on the bracelet?'
                        chosen_color = {ask} 'In which color?'
                        {color} chosen_color
                        {if} shape = 'square'
                            {call} draw_a_square
                    ```
    while_command:
        description: while
    years:
        description: Countdown to the new year!
        levels:
            11:
                story_text: |
                    In this level you can use the `{for} i {in} {range}` command to countdown to the New Year.

                    ### Exercise
                    Fill in the blanks and make the code work!
                example_code: |
                    ```
                    for _ in _ 10 to 1
                        {print} i
                    {print} 'Happy New Year!'
                    ```
