adventures:
    default:
        name: "Bevezető"
        description: "Szint magyarázat"
        default_save_name: "intro"
        levels:
            1:
                story_text: |
                    Az első szinten a `{print}`, `{ask}` és `{echo}` parancsokat használhatod.
                    Írd a kódodat a programozási ablakba, vagy nyomd meg a gombot a példa programok mellett, hogy bemásold!
                    Próbáld ki a kódot a zöld 'Kód futtatása' gomb megnyomásával a programozási ablak alatt!

                    Szöveget írhatsz a képernyőre a `{print}` paranccsal.     
                start_code: "{print} Helló világ!"
            2:
                story_text: |
                    A 2. szinten két új parancsot tanulunk: `{is}` és `{sleep}`.
                    Nevet adhatsz egy szónak az `{is}` paranccsal. Ezt a nevet változónak nevezzük. Ebben a példában létrehoztunk két változót, az egyik neve név, a másiké kor. Bárhol használhatod a név szót a kódodban, és a Hedy kicseréli, valahogy így:

                    Így már nincs szükség az `{echo}` parancsra.
                start_code: "{print} Helló világ!"
                example_code: "```\nnév {is} Hedy\nkor {is} 15\n{print} név ma lesz kor éves\n```\n"
                story_text_2: "A `{print}` ugyanúgy működik, de a `{ask}` parancs megváltozott. Használnod kell egy változót a `{ask}` paranccsal is. Így néz ki:\n"
            3:
                story_text: |
                    A 3. szinten készíthetsz listát is. Kérheted a számítógépet, hogy véletlenszerűen válasszon valamit a listából. Ezt a `{at} {random}` paranccsal teheted meg.
                start_code: "{print} Helló világ!"
            4:
                start_code: "{print} 'Helló világ'"
                story_text: |
                    A 4. szinten a `{ask}` és a `{print}` máshogy működik.
                    Amit ki akarsz íratni, idézőjelbe kell tenned.
                    Ez hasznos, mert most már mindent kiírathatsz, amit csak akarsz, azokat a szavakat is, amiket arra használtál, hogy eltárolj valamit az `{is}` paranccsal.
                    A legtöbb programozási nyelv idézőjelet használ a kiíratáshoz, így egy kicsit közelebb kerülünk az igazi programozáshoz!
                example_code: "```\n{print} \"Mostantól idézőjeleket kell használni!\"\nválasz {is} {ask} \"Miket kell mostantól használni?\"\n{print} válasz \" kell használni.\"\n```\n"
            5:
                start_code: |-
                    név {is} {ask} "Hogy hívnak?"
                    {if} név {is} Hedy {print} "klassz!" {else} {print} "ajaj"
                story_text: |
                    Az 5. szinten újdonság következik, a `{if}`! A `{if}` paranccsal két lehetőség közül választhatsz.
                    Ez a kód kiírja, hogy klassz, ha a Hedy nevet adod meg névként, és fújt, ha valami mást írsz be.
                    A `{ask}` és `{print}` ugyanúgy működnek, mint a 4. szinten.
                example_code: "```\nnév {is} {ask} \"Hogy hívnak?\"\n{if} név {is} Hedy {print} \"klassz\" {else} {print} \"fúj!\"\n```\n"
            6:
                start_code: "{print} \"5-ször 5 az \" 5 * 5"
                story_text: |
                    Ezen a szinten új dolgot tanulunk: számolni.

                    Az összeadás könnyű, ugyanúgy írod, mint a matekban: `5 + 5`. A kivonás is jól működik, így írjuk: `5 - 5`.

                    A szorzás egy kicsit különbözik, ugyanis nincs szorzásjel a billentyűzeten. Nézd meg, tényleg nincs!
                    Ezért használjuk a csillagot: `5 * 5`. Olvasd ezt "5-ször 5"-nek, így könnyen megjegyzed.
                example_code: |
                    ```
                    {print} "5 plusz 5 egyenlő " 5 + 5
                    {print} "5 mínusz 5 egyenlő " 5 - 5
                    {print} "5-ször 5 egyenlő " 5 * 5
                    ```
            7:
                start_code: "{repeat} 3 {times} {print} \"A Hedy szórakoztató!\""
                story_text: |
                    A 7. szinten bemutatkozik az `{repeat}` parancs. Ezzel egy sort többször végrehajthatsz.
                example_code: "```\n{repeat} 3 {times} {print} \"A Hedy szórakoztató!\"\n```\n"
            8:
                start_code: |-
                    {repeat} 5 {times}
                        {print} "Sziasztok"
                        {print} "Ez 5-ször lett kiírva"
                story_text: |
                    A `{ask}` és a `{print}` még mindig úgy működik, ahogyan ismered. De a `{if}`, `{else}` és az `{repeat}` utasítások megváltoztak!
                    Most különböző utasítások egy csoportját futtathatod egyszerre, de behúzással tagolnod kell a kódot.
                    Ez azt jelenti, hogy négy szóközt kell tennünk a sor elejére. Ez akkor is érvényes, ha csak egy soros blokkot akarsz létrehozni.
                example_code: "Így működik mostantól az `{repeat}` parancs:\n```\n{repeat} 5 {times}\n    {print} \"Sziasztok\"\n    {print} \"Ez 5-ször ismétlődik\"\n```\nÍgy működik mostantól a `{if}` és az `{else}` parancs:\n\n```\nnév {is} {ask} \"Hogy hívnak?\"\n{if} név {is} Hedy\n    {print} \"Szia Hedy!\"\n    {print} \"Játszhatsz a számítógéppel.\"\n{else}\n    {print} \"BEHATOLÓ!\"\n    {print} \"Nem használhatod ezt a gépet!\"\n```\n"
            9:
                start_code: |-
                    {repeat} 3 {times}
                        étel = {ask} "Mit kérsz?"
                        {if} étel {is} pizza
                            {print} "fincsi!"
                        {else}
                            {print} "a pizza finomabb"
                story_text: |
                    Ezen a szinten már nemcsak több soros `{if}` és `{repeat}` parancsokat használhatsz, hanem egymásba is teheted őket.
                    A példában egy `{if}` van egy `{repeat}` parancson belül. Fordítva is lehet csinálni, és még `{if}` is lehet `{if}` `{if}` parancsba ágyazva, vagy `{repeat}` `{repeat}`-be.
                    Próbáld ki!
                example_code: "```\n{repeat} 3 {times}\n    étel = {ask} \"Mit kérsz?\"\n    {if} étel {is} pizza\n        {print} \"fincsi!\"\n    {else}\n        {print} \"a pizza finomabb\"\n```\n"
            10:
                start_code: |-
                    állatok {is} kutya, cica, gömbhal
                    {for} állat {in} állatok
                      {print} 'Szép ' állat
                story_text: |-
                    Ezen a szinten új parancsot mutatunk be, a `{for}`-t. A `{for}` segítségével egy lista minden elemét használhatod.
                    A `{for}` is létrehoz egy blokkot, pont úgy, ahogy az `{repeat}` és `{if}`, ezért az összes sort a blokkban szóközökkel kell kezdeni.
                example_code: |
                    ```
                    állatok {is} kutya, cica, gömbhal
                    {for} állat {in} állatok
                      {print} 'Szép ' állat
                    ```
            11:
                start_code: |-
                    {for} számláló {in} {range} 1 {to} 10
                        {print} számláló
                story_text: "A `{print}` ugyanúgy működik, mint eddig, de a `{for}` parancsot egy új formával egészítjük ki. Ahelyett, hogy `{repeat} 5 {times}` írhatod azt, hogy `{for} számláló {in} {range} 1 {to} 5` és alatta használhatod, `számláló`t.\nPróbáld ki, és nézd meg, mi történik! Ne felejts el behúzásokat használni a `{for}` és `{if}` utasítások után. (Ez azt jelenti, hogy egy sort négy szóközzel kell kezdened.)"
            12:
                start_code: |-
                    {print} 'a tizedes törtek pontot használnak'
                    {print} 2.5 + 2.5
                story_text: |-
                    **Tizedes törtek**
                    Egészen eddig a Hedy nem kezelte a tört számokat, mint az 1,5. Figyelj, hogy a számítógépek `.` használnak, így: 1.5
                example_code: |
                    ```
                    {print} 'Két és fél plusz két fél egyenlő...'
                    {print} 2.5 + 2.5
                    ```
            13:
                start_code: |-
                    név = {ask} "Hogy hívnak?"
                    kor = {ask} "Hány éves vagy?"
                    {if} név {is} "Hedy" {and} kor {is} 2
                        {print} "Te vagy az igazi Hedy!"
                story_text: |-
                    Most megtanuljuk az `{and}` és `{or}` kifejezések használatát! Ha két állítást szeretnél ellenőrizni, akkor nem kell kettő {if} parancsot használnod, használhatod az `{and}` és `{or}` parancsokat. Ha az `{and}` parancsot használod, akkor az `{and}` bal és jobb oldalán mindkét állításnak igaznak kell lennie. `{or}` esetén csak egy állításnak kell helyesnek lennie.
                example_code: "```\nnév = {ask} \"Hogy hívnak?\"\nkor = {ask} \"Hány éves vagy?\"\n{if} név {is} \"Hedy\" {and} kor {is} 2\n    {print} \"Te vagy az igazi Hedy!\"\n```\n"
            14:
                start_code: |-
                    kor = {ask} "Hány éves vagy?"
                    {if} kor < 13
                        {print} "Fiatalabb vagy nálam!"
                    {else}
                        {print} "Idősebb vagy nálam!"
                story_text: |
                    További új elemeket fogunk megtanulni! Lehet, hogy már a matematikából ismered ezeket a jeleket, a `<` és a `>`.
                    A `<` ellenőrzi, hogy az első szám kisebb-e, mint a második, például kor `<` 12 megmondja, hogy a kor kisebb-e, mint 12.
                    Ha arra vagy kíváncsi, hogy az első szám kisebb vagy egyenlő-e a másodikkal, a `<=` jelet használd, például kor `<=` 11.
                    A `>` ellenőrzi, hogy az első szám nagyobb-e, mint a második, például pontszám `>` 10 megmondja, hogy a pontszám nagyobb-e, mint 10.
                    Ha arra vagy kíváncsi, hogy az első szám nagyobb vagy egyenlő-e a másodikkal, a `>=` jelet használd, például pontszám `<=` 11.
                    Ezeket az összehasonlításokat `{if}` parancsok után használhatod, így:
                example_code: "```\nkor = {ask} \"Hány éves vagy?\"\n{if} kor > 12\n    {print} \"Idősebb vagy nálam!\"\n```\n"
            15:
                start_code: |-
                    válasz = 0
                    {while} válasz != 25
                        válasz = {ask} "Mennyi 5-ször 5?"
                    {print} "Ez a helyes válasz"
                story_text: |-
                    Tanulni fogunk egy új ciklust, az `{while}` ciklust! Addig folytatjuk a ciklust, amíg az állítás igaz!
                    Szóval ne felejtsd el módosítani a ciklusban szereplő értéket!

                    A példakódban addig megyünk, amíg meg nem kapjuk a helyes választ.
                    Ha soha nem kapjuk meg a megoldást, akkor a ciklus soha nem ér véget!
                example_code: "```\nválasz = 0\n{while} válasz != 25\n    válasz = {ask} \"Mennyi 5-ször 5?\"\n{print} \"Ez a helyes válasz\"\n```\n"
            16:
                start_code: |-
                    gyümölcs = ['alma', 'banán', 'cseresznye']
                    {print} gyümölcs
                story_text: "Listákat fogunk készíteni Python módra, szögletes zárójelekkel! Megtartjuk az idézőjeleket az elemek körül, ahogy az előző szinteken tanultuk, és az egész listát szögletes zárójelek közé foglaljuk.\nA szögletes zárójeleket arra is használhatod, hogy kiválaszd a lista elemét egy adott helyen."
                example_code: "```\nbarátok = [\"Aladár\", \"Blöki\", \"MZ/X\"]\nszerencsés_számok = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} barátok[i] \" szerencsés száma\"\n    {print} \"egyenlő \" szerencsés_számok[i]\n```\n"
            17:
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} "Aki bújt, aki nem, megyek!"
                story_text: "Most egy kicsit meg fogjuk változtatni a behúzást. Minden alkalommal, amikor behúzást használunk, az előző sor végére`:` jelet teszünk.\n\nEzen a szinten egy új parancsot is használhatsz: `{elif}`. Az `{elif}` az {else} {if} rövidítése, és szükséged lesz rá, ha 3 (vagy több!) alternatívát szeretnél használni.\nPróbáld ki!"
            18:
                start_code: |-
                    név = "Hedy"
                    {print}("A nevem ", név)
                story_text: |-
                    Elértünk az igazi Python kódhoz! Ez azt jelenti, hogy zárójeleket kell használnunk a {print} és {range} esetében.

    story:
        name: A történet
        default_save_name: Történet
        description: Készíts egy interaktív történetet
        levels:
            1:
                story_text: |
                    Az 1. szinten elkészíthetsz egy történetet egy másik főszereplővel, amelyet te magad adsz meg.

                    Az első sorba írt `{ask}` bekéri a történet főszereplőjének a nevét.

                    Az első sor után kezdd a `{print}` utasítással, ha a mondatot ki kell íratni.
                    Akkor használd az `{echo}` parancsot, ha azt szeretnéd, hogy főszereplő neve a mondat végén legyen.

                example_code: |
                    ```
                    {ask} A történet főszereplője
                    {print} A főszereplő most az erdőben fog sétálni
                    {echo} Kicsit fél, szegény
                    {print} Őrült zajokat hall mindenütt
                    {print} Fél, hogy ez egy kísértet-járta erdő
                    ```
                start_code: '{print} A történeted itt kezdődik'
                story_text_2: "Tudsz saját történetet írni Hedy-ben a `{print}` , `{ask}` és `{echo}` használatával?\n"
            2:
                start_code: print A te történeted
                story_text: |+
                    A 2. szinten szórakoztatóbbá teheted a történetedet. Fő karaktered neve mostantól
                    bárhol lehet a mondatban.

                    Ehhez egy kicsit fel kell javítanod a kódodat. Most először el kell nevezned a főszereplődet. Olyan nevet válassz, amely nem tartalmaz ékezetes betűt.

                    Ezt a nevet bárhol elhelyezheted a mondatban.

                example_code: |
                    ```
                    nev is ask Mi a neve a főszereplőnek?
                    print nev most futni fog az erdőben
                    print nev kissé fél
                    print Őrült zajokat hall mindenütt
                    print nev fél hogy ez egy kísértetjárta erdő
                    ```

                story_text_2: "### Exercise\nNow it's time to add variables to your own story that you've made in the previous level.\nGo to 'My programs', look for your level 1 story adventure and copy the code. Paste the code in your input screen in this level.\n\nThis code won't work in this level, because you have not used variables yet.\nChange the `{ask}` commands and `{echo}` commands in your code to the correct form that you've learned in this level.\n\n**Extra** Add a sleep command to your code to build up tension in your story.\n"
            7:
                story_text: |-
                    A történetben valaki bizonyos szavakat többször is elmond. Például, ha valaki segítséget kér vagy elénekel egy dalt.
                    Az ilyen ismétlést beírhatod a 6. szintbe tartozó történetbe a 'repeat' paranccsal.
                start_code: repeat 5 times print 'Segítség!'
                example_code: |-
                    ```
                    print 'A herceg folyamatosan segítséget kért'
                    repeat 5 times print 'Segítség!'
                    print 'Miért nem segít nekem senki?'
                    ```
            5:
                story_text: |-
                    Amit a 4. szinten megtehetsz, az még szórakoztatóbbá varázsolja történetedet. A 4.
                    szinten a történethez különböző végződéseket programozhatsz.
                    Gondolj például a történet két különböző végére:
                    - A hercegnő sétál az erdőn
                    - Összefut egy szörnyeteggel
                    - Boldog befejezés: Előveszi a kardját, és a szörny gyorsan elszalad
                    - Rossz befejezés: A szörny megeszi a hercegnőt
                    Biztosíthatod azt is, hogy egy név újra beírható legyen. Ez ugyanúgy működik, mint a 3.
                    szinten. Kombinálhatod ezt egy `if`-fel, és akkor már készítettél is egy egész programot!
                start_code: print 'Itt lesz hamarosan a történeted!'
                example_code: |-
                    ```
                    nev is ask 'Ki jár az erdőben?'
                    print nev ' sétál az erdőn'
                    print nev ' találkozik egy szörnnyel'
                    vege is ask ' Egy jó vagy rossz véget szeretnél?'
                    if vege is jó print nev ' előveszi a kardot és a szörny gyorsan elszalad' else print 'A szörny megeszi ' nev '-t'
                    ```
            4:
                start_code: print 'A történeted ide lesz írva!'
                story_text: |-
                    Lehet, hogy észrevetted, hogy még mindig van hiba a 2. szinten.
                    Véletlenül megpróbáltál olyan mondatot készíteni, amely tartalmazza a nev szót?
                    Ezt meg tudod oldani a 3. szinten.

                    Idézőjeleket kell használnod minden kiíratáshoz.
                example_code: |
                    ```
                    nev is Jancsi
                    print 'A fő karakter neve ' nev
                    print nev ' most az erdőben jár'
                    print nev ' egy kicsit fél'
                    allatok is bagoly, sündisznó, páncélos
                    print 'Hallja a következő állat hangját: ' allatok at random
                    print nev ' fél, hogy ez egy kísértetjárta erdő'
                    ```
            3:
                start_code: print A te történeted
                story_text: |

                    Hozzáadhatsz valami véletlenszerűt is a történetéhez. Bármilyen szörnyet, állatot vagy
                    más akadályt.

                example_code: |
                    ```
                    allatok is bagoly, sündisznó, tatu
                    print Most hallja a allatok at random hangját
                    ```
                story_text_2: |
                    The command `{add}` can also come in handy in your story. For example

                example_code_2: |

                    {print} He hears a sound
                    animals {is} 🐿, 🦔, 🦇, 🦉
                    animal {is} {ask} What do you think it is?
                    {add} animal {to_list} animals
                    {print} it was a animals {at} {random}
                    ```
                story_text_3: |
                    This is an example of the `{remove}` command in your story
                example_code_3: |
                    ```
                    {print} His backpack got way too heavy.
                    {print} Inside were a bottle of water, a flashlight and a brick.
                    bag {is} water, flashlight, brick
                    dump {is} {ask} Which item should he dump?
                    {remove} dump {from} bag
                    ```
            8:
                story_text: "In this level you can use multiple lines in your {if} commands, this way you can upgrade your happy or sad ending!\n"
                example_code: "```\n{print} 'OH NO! The T-rex is closing in!'\nend = {ask} 'Do you want a happy or a sad ending?'\n{if} end {is} happy\n    {print} 'Just in time Richard jumps back into the time machine!'\n    {print} 'Michael types in the code and...'\n    {print} '💥ZAP!💥'\n    {print} 'They are back in their garage'\n{else}\n    {print} 'Michael yells COME ON RICHARD! RUN FASTER!'\n    {print} 'But Richard is too slow...'\n    {print} 'The T-rex closes in and eats him in one big bite!🦖'\n```\n"
                start_code: '# place your code here'
            12:
                story_text: "In this level you can use the quotation marks to save multiple words in a variable.\n"
                example_code: "```\nname = 'The Queen of England'\n{print} name ' was eating a piece of cake, when suddenly...'\n```\n"
                start_code: '# place your code here'
            9:
                example_code: "```\n{print} 'Robin is walking downtown'\nlocation = {ask} 'Is Robin going into a shop, or does she go home?'\n{if} location {is} shop\n    {print} 'She enters the shop.'\n    {print} 'Robin sees an interesting looking book'\n    book = {ask} 'Does Robin buy the book?'\n    {if} book {is} yes\n        {print} 'Robin buys the book and goes home'\n    {else}\n        {print} 'Robin leaves the shop and goes home'\n{else}\n    {print} 'Robin goes home'\n```\n"
                story_text: "In this level you can use nesting to put {if}, {repeat} or {for} commands inside other {if}, {repeat} or {for} commands. This gives you many options and really helps you to make your story interactive.\n"
                start_code: '# place your code here'
            15:
                example_code: "```\nkeys = 'lost'\n{print} 'You are standing in your garden and you have lost your keys.'\n{print} 'Where do you want to look for them?'\n{print} 'You can choose: tree, flowerbed, rock, postbox'\n{while} keys == 'lost'\n    location = {ask} 'Where do you want to look?'\n    {if} location == 'flowerbed'\n        {print} 'Here they are!'\n        keys = 'found'\n    {else}\n        {print} 'Nope they are not at the ' location\n{print} 'Now you can enter the house!'\n"
                story_text: "Using the `{while}` loop can make your stories more interesting. For example, you can use `{while} game {is} 'on'` so you can play until the game is over.\nOr you can use `{while} sword {is} 'lost'` so the player can't continu the game until they have found something.\n"
                start_code: '# place your code here'
            10:
                story_text: "In this level you can use the {for} command in your story. In this way you could easily program the children's book 'brown bear, brown bear, what do you see'.\n"
                example_code: "```\nanimals = red bird, black sheep, green frog, yellow duck, little child\n{print} 'brown bear'\n{print} 'brown bear'\n{print} 'What do you see?'\n{for} animal {in} animals\n    {print} 'I see a ' animal ' looking at me'\n    {print} animal\n    {print} animal\n    {print} 'What do you see?'\n{print} 'I see all the animals looking at me!'\n```\n"
                start_code: '# place your code here'
            13:
                story_text: "By using the `{and}` and `{or}` commands, you can shorten your stories. For example, check out the dragon story.\n"
                example_code: "```\nsword = 'lost'\ngame = 'on'\n{print} 'Our hero is walking through the forest'\n{print} 'The path splits two ways'\n{for} i {in} {range} 0 {to} 2\n    {if} game {is} 'on'\n        path = {ask} 'Which path should she choose?'\n        {if} path {is} 'left' {and} sword {is} 'found'\n            {print} 'Our hero comes across a dragon!'\n            {print} 'Luckily our hero has a sword to defeat the beast!'\n            game = 'over'\n        {if} path {is} 'left' {and} sword {is} 'lost'\n            {print} 'Our hero finds a dragon, but she doesnt have any weapons!'\n            {print} 'Our hero is beaten by the dragon...'\n            {print} 'Try again'\n            game = 'over'\n        {if} path {is} 'right' {and} sword {is} 'found'\n            {print} 'You have already found the sword. There is nothing left here.'\n            {print} 'She walks back'\n        {if} path {is} 'right' {and} sword {is} 'lost'\n            {print} 'Our hero finds a sword'\n            {print} 'This could come in very handy'\n            sword = 'found'\n```\n"
                start_code: '# place your code here'
            18:
                example_code: "```\n{print}('Welcome to this story!')\n```\n"
                story_text: "We are going to print another story, but now we have to use brackets with `{print}`.\n\n### Exercise 1\nCreate a story of at least 5 sentences. You don't have to use 'name' just yet.\n"
                story_text_2: "### Exercise 2\nWe have already prepared an `{input}` for you. First, use the `name` variable in your story.\nThen add a second `{ask}` and use that variable as well.\nTip: Remember the commas in a `{print}` between text and variables!\n"
                example_code_2: "```\nnaam = {input}(\"What's your name?\")\n{print}('Welcome to this story!')\n```\n"
                start_code: '# Schrijf jouw code hier'
    songs:
        name: Énekelj egy dalt!
        default_save_name: Dal
        description: Dal kiíratása
        levels:
            8:
                start_code: print 'Üveg sör'
                story_text: |-
                    A 6. szinten a "Üveg sör" dalt programoztad. Egy verset alkottál, majd 99 -szer kellett lemásolnod a verssorokat. A 7. szinten 99 alkalommal ismételheted meg a dalt, csak egy egyszerű sor hozzáadásával!

                example_code: |
                    ```
                    verssor = 99
                    print verssor ' üveg sör a falon'
                    print verssor ' üveg sör'
                    print 'Vegyél egyet, add tovább'
                    verssor = verssor - 1
                    print verssor 'üveg sör a falon'
                    ```
            7:
                start_code: print 'Baby Shark'
                story_text: |-
                    A dalok gyakran sok ismétlést tartalmaznak. Például... Baby Shark! Ha elénekled, ugyanazt énekled folyamatosan:

                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark

                    ezt a dalt sokkal rövidebbé teheted egy `repeat` utasítással! Be tudod fejezni a kódot?

                    A Baby Shark után természetesen más dalokat is programozhat. Sok dal van ismétléssel.
                example_code: |-
                    ```
                    repeat _ _ print 'Baby Shark tututudutudu'
                    print 'Baby Shark'
                    ```
            6:
                start_code: print 'Baby shark'
                story_text: |-
                    A dalok gyakran sok ismétlést tartalmaznak. Néha az ismétlés alapja a számlálás is.
                    Például a jól ismert dalban „üveg sör”. Programozhatod azt a dalt egy kis matekkal.

                    Most megismételheted a 2–9. Sort, ahányszor csak akarod, a sorok másolásával.

                    # Előretekintve
                    Az 5. szinten megtanultunk 1 sort megismételni az `repeat` szóval, így:

                    * repeat 3 times print 'Baby Shark Tutududududu'

                    De ahogyan ebben a leckében látni fogod, néha több sort is meg akarsz együtt ismételni. Ezt meg lehet tenni vágással és beillesztéssel, de ez sok munka. A 7. szinten megtanulod, hogyan kell ezt könnyebben megtenni.
                example_code: |-
                    ```
                    verssor = 99
                    print verssor ' üveg sör a falon'
                    print verssor ' üveg sör'
                    print 'Vegyél egyet, add tovább'
                    verssor = verssor - 1
                    print verssor ' üveg sör a falon'
                    ```

                story_text_2: "This children's song counts down from 5 little monkeys to 1 monkey.\nIf you copy line 2 - 7 and paste it under the the code, you can sing the whole song!\n"
                example_code_2: "```\nnumber = 6\nnumber = number - 1\nprint number ' little monkeys jumping on the bed'\nprint 'One fell off and bumped his head'\nprint 'Mama called the doctor and the doctor said'\nprint 'NO MORE MONKEYS JUMPING ON THE BED!'\nsleep\n```\n"
            12:
                story_text: "In this song we can make it even easier to program '{if} you're happy and you know it, clap your hands'. Because we can put all of the actions in a variable, check it out:\n"
                example_code: "```\nactions = 'clap your hands', 'stomp your feet', 'shout Hurray!'\n{for} action {in} actions\n    {for} i {in} {range} 1 {to} 2\n        {print} '{if} youre happy and you know it'\n        {print} action\n    {print} '{if} youre happy and you know it and you really want to show it'\n    {print} '{if} youre happy and you know it'\n    {print} action\n```\n"
                start_code: '# place your code here'
            11:
                story_text: "In this level you can use the `{for} i {in} {range}` command to make songs that use counting.\n"
                example_code: "```\n{for} i {in} {range} 5 {to} 1\n    {print} i ' little monkeys jumping on the bed'\n    {print} 'One fell off and bumped his head'\n    {print} 'Mama called the doctor and the doctor said'\n    {if} i {is} 1\n        {print} 'PUT THOSE MONKEYS RIGHT TO BED!'\n    {else}\n        {print} 'NO MORE MONKEYS JUMPING ON THE BED!'\n```\n"
                start_code: '# place your code here'
            10:
                example_code: "```\nmonkeys = 5, 4, 3, 2\n{for} monkey {in} monkeys\n    {print} monkey ' little monkeys jumping on the bed'\n    {print} 'One fell off and bumped his head'\n    {print} 'Mama called the doctor and the doctor said'\n    {print} 'NO MORE MONKEYS JUMPING ON THE BED!'\n```\n\n```\nsharks = baby, mommy, daddy, grandma, grandpa\n{for} shark {in} sharks\n    {print} shark 'tututututudu'\n    {print} shark 'tututututudu'\n    {print} shark 'tututututudu'\n    {print} shark\n```\n```\nanimals = pig, dog, cow\n{for} animal {in} animals\n    {if} animal {is} pig\n        sound = oink\n    {if} animal {is} dog\n        sound = woof\n    {if} animal {is} cow\n        sound = moo\n    {print} 'Old McDonald had a farm'\n    {print} 'E I E I O!'\n    {print} 'and on that farm he had a ' animal\n    {print} 'E I E I O!'\n    {print} 'with a ' sound sound ' here'\n    {print} 'and a ' sound sound ' there'\n    {print} 'here a ' sound\n    {print} 'there a ' sound\n    {print} 'everywhere a ' sound sound\n```\n"
                story_text: "In this level you can easily make the childrens' song 'Five little monkeys'. Can you make the last chorus?\nYou can also make the whole baby shark song (including all the other sharks in the family) in only 6 lines!\nOr you can make Old McDonald with all the different animals.\n"
                start_code: '# place your code here'
                example_code_2: "```\nmonkeys = 5, 4, 3, 2, 1\n```\n"
                story_text_2: "### Exercise 2\nPrint the song Five little moneys jumping on the bed. Look up the text if you don't remember.\n\n**(extra)** Print the song Old MacDonald had a farm, and make sure all animals make a different sound, using an `{if}`.\n"
            16:
                story_text: |
                    In this level, you can program a song like OldMacDonald even more quickly. You can connect the right animal to the right sound by simply putting them in the same place in the list.
                    The Drunken Sailor is also quickly made in this level. You only need 8 lines for the entire song, check it out!
                example_code: |
                    ```
                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    {for} i {in} {range} 1 {to} 3
                        animal = animals[i]
                        sound = sounds[i]
                        {print} 'Old McDonald had a farm'
                        {print} 'E I E I O!'
                        {print} 'and on that farm he had a ' animal
                        {print} 'E I E I O!'
                        {print} 'with a ' sound sound ' here'
                        {print} 'and a ' sound sound ' there'
                        {print} 'here a ' sound
                        {print} 'there a ' sound
                        {print} 'everywhere a ' sound sound
                    ```

                    ```
                    lines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} line {in} lines
                        {for} i {in} {range} 1 {to} 3
                            {print} line
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
                start_code: "# place your code here"
            18:
                start_code: '# Schrijf jouw code hier'
                story_text: "In level 16 we made songs using lists. These programs however are no longer working properly in this level. The colons from level 17 and the brackets from level 18 still need to be added.\n\n### Exercise 1\nThe Drunken sailor song is given as sample code, but not yet working.\nCan you make sure everything works again? To help you, we've put _ in the places of _some_ errors.\n\n### Exercise 2\nNow also look up your Old MacDonald song from level 16, and correct it.\n"
                example_code: "```\nlines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']\n{for} line {in} lines _\n    {for} i {in} {range} 1 {to} 3 _\n        {print} _ line _\n    {print} 'early in the morning'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'way hay and up she rises'\n    {print} 'early in the morning'\n```\n"
    dishes:
        name: Ki mosogat?
        default_save_name: mosogat
        description: Használd a számítógépet, hogy lásd, ki mosogat (Kezdd a 2. szinten)
        levels:
            7:
                start_code: print 'Ki mosogat?'
                story_text: |-
                    Az `repeat` segítségével megismételheted a kódrészleteket. Ennek segítségével
                    kiszámíthatod, hogy kik fogj mosogatni az egész héten.
                example_code: |-
                    ```
                    emberek is anya, apa, Edit, Gizi
                    repeat _ _ print 'a mosogató:' _
                    ```
            6:
                start_code: print 'Ki mosogat?'
                story_text: |-
                    Ki milyen gyakran mosogat? Ez igazságos? Ezt megszámolhatod a 5. szinten.

                    Most néhányszor átmásolhatod a 3–5-ös sorokat (pl. az egész hétre 7-szer), hogy ismét egy egész hétre számoljon.
                    Elkészíted az egész hét kódját?

                    Most sokat kell másolnod és beillesztened, igaz? Ezt a 7. szinten javítjuk.
                    Ezen a szinten a vége a mosogató kalandnak! De még mindig sok kaland van más szinteken, például egy számológéppel, egy interaktív történettel és egy bonyolultabb játékkal.
                example_code: |-
                    ```
                    emberek = anya, apa, Edit, Gizi
                    edit_mosogat = 0
                    mosogato = emberek at random
                    print 'A mosogató' mosogato
                    if mosogato is Edit edit_mosogat = edit_mosogat + 1
                    print 'Edit ezen a héten' edit_mosogat 'alkalommal mosogatott'
                    ```
                story_text_2: "If you are extremely unlucky the previous program might choose you to to the dishes for the whole week! That's not fair!\nTo create a fairer system you can use the `{remove}` command to remove the chosen person from the list. This way you don't have to do the dishes again untill everybody has had a turn.\n\nMonday and tuesday are ready for you! Can you add the rest of the week?\nAnd... can you come up with a solution for when your list is empty?\n"
                example_code_2: "```\npeople = mom, dad, Emma, Sophie\ndishwasher = people {at} {random}\n{print} 'Monday the dishes are done by: ' dishwasher\n{remove} dishwasher {from} people\ndishwasher = people {at} {random}\n{print} 'Tuesday the dishes are done by: ' dishwasher\n{remove} dishwasher {from} people\ndishwasher = people {at} {random}\n```\n"
            5:
                start_code: print 'Ki mosogat?'
                story_text: |-
                    Az `if` segítségével most szórakoztatóbbá teheted a választást a programban.
                    Megkérheted a programot, hogy válaszoljon a számítógép választására.
                    Befejezheted a kódot úgy, hogy „túl rosszul” írja ki, amikor rajtad a sor, és egyébként
                    „igen!”?
                    Ne felejtsd el az idézeteket!
                example_code: |-
                    ```
                    emberek is anya, apa, Edit, Gizi
                    mosogato is emberek at random
                    if mosogato is Gizi print _ sajnos mosogatnom kell _ else print 'szerencsére nem én,
                    mert' _ 'már mosogat'
                    ```
            4:
                start_code: print 'Ki mosogat?'
                story_text: |-

                    Az idézőjelek segítségével szebbé teheted a mosogatás tervezését.
                    Ezúttal a minta kód nem egészen teljes.
                    Ki tudod egészíteni a kódot a helyes parancsok vagy karakterek pontokra történő
                    beírásával?
                    Minden üres helyet egy paranccsal kell kicserélni.
                    Tipp: Ne felejtsd el az idézőjeleket.
                example_code: |-
                    ```
                    emberek is anya, apa, Edit, Gizi
                    print _ ő mosogat: _
                    print emberek at _
                    ```
            3:
                start_code: |-
                    print Ki mosogat?
                story_text: |-
                    Otthon általában nem értesz egyet abban, hogy kinek kell ma mosogatnia vagy kicserélnie az alomdobozt?

                    Ezután hagyhatod, hogy a számítógép nagyon tisztességesen válasszon. Ezt beprogramozhatod a 2. szinten!

                    Először állítsd össze a családja tagjainak listáját. Ezután válaszd az 'at random' lehetőséget a listából.


                    Véletlenül megpróbáltál olyan mondatot alkotni, amely az emberek szót tartalmazta?

                    Pl. `print Ezek közül az emberek közül választottam`. Próbáld ki, ha még nem tetted meg.

                    Ez nem működik megfelelően! Aztán megkapod: [apu, anya, Edit, Gizi] közül választottam. Ezt meg tudod majd oldani a 3. szinten.
                example_code: |-
                    ```
                    emberek is anya, apa, Edit, Gizi
                    print emberek at random
                    ```
                story_text_2: "Don't feel like doing the dishes yourself? Hack the program to remove your name from the list.\n"
            10:
                story_text: "In this level you could make an even better dish washing shedule.\n"
                example_code: "```\ndays = Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday\nnames = mom, dad, Emma, Sophie\n{for} day {in} days\n    {print} names {at} {random} ' does the dishes on ' day\n```\n"
                start_code: '# place your code here'
    dice:
        description: Készítsd el a saját kockádat
        name: Készítsd el a saját kockádat
        default_save_name: Kocka
        levels:
            7:
                story_text: |-
                    Az 5. szinten ismét készíthetsz kockát . A `repeat` kóddal könnyedén dobhatsz egy
                    csomó dobókockát.
                    Próbáld meg befejezni a mintakódot! A kötőjeleknek több parancsot és karaktert
                    kell tartalmazniuk.
                    De talán teljesen más kockát akarsz készíteni. Természetesen lehet!
                start_code: print 'Mit dobunk ezúttal?'
                example_code: |-
                    ```
                    dobások is 1, 2, 3, 4, 5, giliszta
                    repeat _ _ print _ _
                    ```
            6:
                story_text: |-
                    Azt is megteheted, hogy újra egy giliszta kockát csinálsz a 6. szinten, de most kiszámíthatod azt is, hogy hány pontot dobtál.

                    Lehet, hogy tudod, hogy a giliszta 5 pontot számít a játékban. Most egy dobás után azonnal kiszámíthatod, hány pontot dobott.

                    Ez az a kód, amely kiszámítja a pontokat egy dobáshoz:

                    Át tudod alakítani a kódot, hogy megkapd a 8 kockadobás összpontszámát? Ehhez ki kell vágnod és be kell illesztened a kód egyes sorait.


                    Sikerült kiszámolni a 8 kocka pontszámát? Ehhez sok vágás és beillesztés kellett, igaz? Ezt megkönnyítjük a 7. szinten!
                start_code: print 'Mit dobunk ezúttal?'
                example_code: |-
                    ```
                    dobasok = 1, 2, 3, 4, 5, giliszta
                    pontok = 0
                    dobas = dobasok at random
                    print 'a dobásod' dobas
                    if dobas is giliszta pontok = pontok + 5 else pontok = pontok + dobas
                    print 'Pontok:' pontok
                    ```
                example_code_2: "\nDid you manage to calculate the score for 8 dice? That required a lot of cutting and pasting, right? We are going to make that easier in level 7!\n"
            5:
                story_text: |-
                    Ismét készíthetsz egy kockát a 4. szinten az `if` használatával.
                    Töltsd ki a mintakódot úgy, hogy a kód azt mondja: "Megállíthatod a dobást", miután
                    földigilisztát dobtál.
                    De lehet, hogy újra létre akarsz hozni egy kockát egy teljesen más játékból. Ez is
                    rendben van! Ezután állítsd be a saját reakcióját. Pl. „Igen” 6-ra és „kár” valami másra.
                start_code: print 'Mit dobunk ezúttal?'
                example_code: |-
                    ```
                    dobasok is 1, 2, 3, 4, 5, giliszta
                    dobas _
                    print 'Te' _ 'dobtál'
                    if _ is giliszta print 'Megállhatsz.' _ print 'Dobj újra!'
                    ```
            4:
                story_text: |-
                    A 3. szinten mondatokat készíthetünk a változó értékével, természetesen idézőjelekkel.
                    Ezúttal a minta kód nem egészen teljes. Be tudod fejezni a kódot?
                start_code: print 'Mit dobunk ezúttal?'
            3:
                start_code: print Mit dobunk ezúttal?
                story_text: |-
                    A 2. szinten választhatunk egy listából. Ezzel hagyhatjuk, hogy a számítógép válassza ki
                    a kocka egyik oldalát.
                    Vess egy pillantást azokra a játékokra, amelyek otthon vannak a szekrényedben.
                    Vannak (speciális) kockával játszott játékok? Ezzel a kóddal másolhatod is.
                    Például a Giliszta játék kockája a 1–5-ig számokkal és egy gilisztával.
                    ! [Giliszta játék kockája a 1–5-ig számokkal és egy gilisztával]
                    Véletlenül megpróbáltál olyan mondatot megfogalmazni, amely tartalmazza a
                    dobásokat?
                    Például. `print Választottam a dobasok közül`. Próbáld ki, ha még nem tetted meg.
                    Ez nem működik megfelelően! Aztán megkapod: Az [1, 2, 3, 4, 5, földigiliszta] közül
                    választottam. Ezt meg tudod majd oldani a 3. szinten.
                example_code: |-
                    ```
                    dobasok is 1, 2, 3, 4, 5, giliszta
                    print dobasok at random
                    ```
                example_code_2: "```\nchoices {is} _\n```\n"
                story_text_2: "### Exercise\nThe dice in the example above are dice for a specific game. Can you make normal dice?\nOr other special dice from a different game?\n"
            10:
                story_text: "Is everybody taking too long throwing the dice? In this level you can let Hedy throw all the dice at once!\n"
                example_code: "```\nplayers = Ann, John, Jesse\nchoices = 1, 2, 3, 4, 5, 6\n{for} player {in} players\n    {print} player ' throws ' choices {at} {random}\n    {sleep}\n```\n"
                start_code: '# place your code here'
            15:
                story_text: "In this game you have to throw 6 in as little tries as possible.\n"
                example_code: "```\noptions = 1, 2, 3, 4, 5, 6\n{print} 'Throw 6 as fast as you can!'\nthrown = 0\ntries = 0\n{while} thrown != 6\n    thrown = options {at} {random}\n    {print} 'You threw ' thrown\n    tries = tries + 1\n{print} 'Yes! You have thrown 6 in ' tries ' tries.'\n```\n"
                start_code: '# place your code here'
    rock:
        description: Készíts saját kő, papír, olló játékot
        default_save_name: Kő
        name: Kő, papír, olló
        levels:
            1:
                start_code: print Üdvözlünk saját kő, papír olló játékodon!
                story_text: |-
                    Az 1. szinten kezdhetsz egy kő, papír, olló játékkal.

                    A `ask` utasítással választhatsz, és az` echo'-val megismételheted ezt a választást.

                    Az ismétlés természetesen kissé unalmas, mert a számítógép nem választ semmit. Ezt később mi magunk is elkészítjük.
                example_code: |-
                    ```
                    print Mit választottál?
                    ask Válassz kő, papír és olló közül
                    echo ez volt a választásod:
                    ```
                story_text_2: "### Exercise\nInstead of using words, you could also use emojis: ✊✋✌\nCan you create a code using emojis?\n"
                example_code_2: "```\n{print} what do you choose?\n{ask} choose from _\n{echo} so your choice was:\n```\n"
            5:
                start_code: print 'Üdvözlünk saját kő, papír olló játékodon!'
                story_text: |-
                    A 4. szinten meghatározhatjuk, hogy ki nyert.
                    Ehhez szükséged van az új `if` kódra.

                    Mentsd el a a számítógép választását egy tetszőleges névvel.
                    Ezután használhatod az `if' utasítást, hogy lásd, azonosak-e vagy különböznek-e.
                    Befejezed a kódot?

                    Először töltsd ki a helyes kódot a pontok helyén, és nézd meg, hogy döntetlen-e.

                example_code: |-
                    ```
                    lehetoseg is kő, papír, olló
                    szamitogepe is _
                    valaszt is ask Mit választasz?
                    print 'ezt választottad: ' _
                    print 'a számítógép választása: ' _
                    if _ is _ print 'döntetlen!' else print 'nem döntetlen'
                    if valaszt is kő and szamitogepe is papír print 'számítógép nyert'
                    ```
            4:
                start_code: print 'Üdvözlünk saját kő, papír olló játékodon!'
                story_text: |
                    A 3. szinten tovább programozhatunk kő, papírt, ollót. De ha szöveget szeretnél
                    hozzáadni, akkor itt is idézőjeleket kell használnod.
                    Egészítsd ki a kódot úgy, hogy a helyes parancsokat vagy karaktereket írd be a
                    aláhúzásokra?
            3:
                story_text: |
                    A 2. szinten listákat írhatunk be, és választhatunk belőlük dolgokat.
                    Először készíts egy listát az `is` segítségével. Ezután hagyhatod, hogy a számítógép a `at
                    random` segítségével válasszon ki valamit a listából.
                    Például megengedheted, hogy a számítógép kő, papír és olló közül válogasson.

                    Újra használhatod a `ask'-t a 2. szinten. Kiírathatod számítógép a választását?
                    Vigyázz, a `ask` most másképp működik, mint az 1. szinten. Előtte el kell nevezni.

                    Véletlenül megpróbáltál olyan mondatot megfogalmazni, amely tartalmazza a valasztas
                    változót?
                    Például. ```print Az enyém: valasztas```. Próbáld ki, ha még nem tetted meg.
                    Ez nem működik megfelelően! Aztán megkapod: a [kő, papír, olló] közül választottam.
                    Ezt meg tudod majd oldani a 3. szinten.
                start_code: print Üdvözlünk saját kő papír olló játékodon!
                example_code: |-
                    ```
                    valasztas is kő, papír, olló
                    print valasztas at random
                    ```
                example_code_2: "```\nchoices {is} rock, paper, scissors\n{print} player 1 chooses... choices {at} {random}\n{print} player 2 _\n```\n"
                story_text_2: "### Exercise\nNow you only have one player, so can you add a second player?\nYou can even use variables to name player 1 and player 2.\n"
            10:
                story_text: "Feeling too lazy to play the game yourself? Let Hedy play it for you!\n"
                example_code: "```\nchoices = rock, paper, scissors\nplayers = Marleen, Michael\n{for} player {in} players\n     {print} player ' chooses ' choices {at} {random}\n```\n"
                start_code: '# place your code here'
            9:
                example_code: "```\nchoices {is} rock, paper, scisscors\nyour_choice {is} {ask} 'What do you choose?'\n{print} 'You choose ' your_choice\ncomputer_choice {is} choices {at} {random}\n{print} 'The computer chooses ' computer_choice\n{if} computer_choice {is} your_choice\n    {print} 'Tie'\n{if} computer_choice {is} 'rock'\n    {if} your_choice {is} 'paper'\n        {print} 'You win!'\n    {if} your_choice {is} 'scissors'\n        {print} 'You lose!'\n```\n"
                story_text: "In this level you can program the whole rock, paper, scissors game by nesting the {if}-commands. Can you finish the code?\n"
                start_code: '# place your code here'
            2:
                story_text: "In this level you can practise using the variables, so that you can make the rock, paper, scissors game in the next level!\n"
                example_code: "```\nchoice {is} _\n{print} I choose choice\n```\n"
                start_code: '# place your code here'
            15:
                story_text: "Play until you beat the computer! But first, finish the example code...\n"
                example_code: "```\nwon = 'no'\noptions = 'rock', 'paper', 'scissors'\n{while} won == 'no'\n    your_choice = {ask} 'What do you choose?'\n    computer_choice = options {at} {random}\n    {print} 'you chose ' your_choice\n    {print} 'the computer chose ' computer_choice\n    {if} computer_choice == your_choice\n        {print} 'Tie!'\n    {if} computer_choice == 'rock' {and} your_choice == 'scissors'\n        {print} 'You lose!'\n    {if} computer_choice == 'rock' {and} your_choice == 'paper'\n        {print} 'You win!'\n        won = 'yes'\n"
                start_code: '# place your code here'
            13:
                example_code: "```\noptions = 'rock', 'paper', 'scissors'\nyour_choice = {ask} 'What do you choose?'\ncomputer_choice = options {at} {random}\n{print} 'You choose ' your_choice\n{print} 'The computer chooses ' computer_choice\n{if} computer_choice {is} your_choice\n    {print} 'Tie'\n{if} computer_choice {is} 'rock' {and} your_choice {is} 'paper'\n    {print} 'You win!'\n{if} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'\n    {print} 'The computer wins!'\n```\n"
                story_text: "With the `{and}` command you can shorten your rock, paper, scissors code! Check out the example code below and try to finish it.\n"
                start_code: '# place your code here'
    calculator:
        name: Számológép
        description: Készíts számológépet
        default_save_name: Számológép
        levels:
            9:
                story_text: |-
                    A 6. szinten megtanultad a számológép készítését, a 7. szinten kibővítheted ezt a kódot, és egy kis matematikai játékot készíthetsz belőle. Mint ez...

                start_code: print 'Üdvözölünk a számológépnél!'
                example_code: |-
                    ```
                    pontszam = 0
                    repeat 10 times
                        szamok = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        szam1 = szamok at random
                        szam2 = szamok at random
                        helyesvalasz = szam1 * szam2
                        print 'Mennyi ' szam1 ' * ' szam2 '?'
                        valasz = ask 'Gépeld ide a válaszodat...'
                        print 'A válaszod: ' valasz
                        if valasz is helyesvalasz
                            pontszam = pontszam + 1
                    print 'Szép munka! A pontszámod... ' pontszam ' a 10-ből!'
                    ```
            6:
                story_text: |-
                    Most, hogy tudsz számolni, létrehozhatsz egy programot is a matematikai számítások gyakorlásához. A számításokat magad is elkészítheted, például:
                    Azt is engedélyezheted, hogy a számítógép véletlenszerű számításokat végezzen véletlenszámok használatával.

                    Így válassz ki pár táblázatot a gyakorláshoz, és ettől mindig más eredményt kapsz
                start_code: print 'Üdvözlünk a számológépnél!'
                example_code_2: |-
                    ```
                    tablazat = 4, 5, 6, 8
                    szamok = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    tabla = tablazat at random
                    szam = szamok at random
                    jo_valasz = tabla * szam
                    valasz = ask 'Mennyi ' tabla ' és ' szam ' szorzata?'
                    if valasz is jo_valasz print 'rendben'
                    else print 'hiba! ennyi: ' jo_valasz
                    ```
                story_text_2: "You can also let the computer do random sums on its own using random.\nThis is how you choose a number of tables to practice, and from that you always get a different sum:\n"
                example_code: |-
                    ```
                    jo_valasz = 11 * 27
                    valasz = ask 'Mennyi 11 és 27 szorzata?'
                    if valasz is jo_valasz print 'nagyszerű!'
                    else print 'Nem jó! Ennyi: ' jo_valasz
                    ```
                story_text_3: "You can also let the computer do random sums on its own using random.\nThis is how you choose a number of tables to practice, and from that you always get a different sum:\n"
            14:
                story_text: "In this level you can programm the game 'Guess which number'\n"
                example_code: "```\n{print} 'Guess which number'\nnumbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nnumber = numbers {at} {random}\ngame = 'on'\n{for} i {in} {range} 1 {to} 10\n    {if} game == 'on'\n        guess = {ask} 'Which number do you think it is?'\n        {if} guess > number\n            {print} 'Lower!'\n        {if} guess < number\n            {print} 'Higher!'\n        {if} guess == number\n            {print} 'You win!'\n            game = 'over'\n"
                start_code: '# place your code here'
            12:
                story_text: "Now you can make a calculator that works for decimal numbers.\n"
                example_code: "```\nnumber1 = {ask} 'What is the first number?'\nnumber2 = {ask} 'What is the second number?'\nanswer = number1 + number2\n{print} number1 ' plus ' number2 ' is ' answer\n"
                start_code: '# place your code here'
            10:
                story_text: "This calculator game helps you practise your tables of multiplication!\nIf you add more numbers to the list, you can practise all the multiplications.\n"
                example_code: "```\nnumbers = 1, 2, 3\n{for} number1 {in} numbers\n    {for} number2 {in} numbers\n        answer = {ask} 'How much is ' number2 ' times ' number1 '?'\n        correct = number1 * number2\n        {if} answer {is} correct\n            {print} 'Great job!'\n        {else}\n            {print} 'Thats wrong. The right answer is ' correct\n```\n"
                start_code: '# place your code here'
            15:
                example_code: "```\nscore = 0\n{for} i {in} {range} 0 {to} 9\n    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    number1 = numbers {at} {random}\n    number2 = numbers {at} {random}\n    correct = number1 * number2\n    answer = 0\n    {while} answer != correct\n        {print} 'How much is ' number1 ' times ' number2 '?'\n        answer = {ask} 'Fill in your answer:'\n        {print} 'Your answer is ' answer\n    {print} 'Good job!'\n{print} 'You win!'\n```\n"
                story_text: "You can add the `{while}` loop to the calculator game you've learned to make in a previous level.\nThis makes sure the player can't continue to the next question {if} they answer incorrectly.\n"
                start_code: '# place your code here'
            11:
                story_text: "With a `{for}` you can simplify tables of multiplication practise program.\n\n### Exercise 1\nImprove the example code such that it prints a nice multiplication table: <br> \"1 times 10 is 10\", \"2 times 10 is 20\", etc.\n\n### Exercise 2\nGo back to your level 10 multiplication code, and modify it so that it uses a `{for}` and `{range}`.\n"
                example_code: "```\nnumber = 10\n{for} i {in} {range} 1 to 10\n    {print} i * number\n```\n"
                start_code: '# place your code here'
            13:
                example_code: "```\nanswer1 = {ask} 'What is 10 times 7?'\nanswer2 = {ask} 'What is 6 times 7?'\n{if} _ _ _ _ _ _ _\n    {print} _\n```\n"
                story_text: "\n### Exercise 1\nLet's make the practice program a bit harder. The player now has to answers two questions correctly. Fill out the blanks to complete the program.\n\n### Exercise 2 (extra)\nSometimes, calculations have multiple correct answers. For example, 10 can be divided by 5 and by 2. So the question 'What number divides 10?' can be answered by 2 and by 5.\nAsk for a calculation that has multiple correct answers, ask the player to answer it, and determine if it is correct using `{or}`.\nEmpty the programming field and create your own solution.\n"
                start_code: '# Schrijf jouw code hier'
    restaurant:
        name: Étterem
        default_save_name: Étterem
        description: Készíts virtuális éttermet
        levels:
            1:
                start_code: '# place your code here'
                story_text: |-
                    Az 1. szinten elkészítheted saját virtuális éttermedet és fogadhatod vendégei megrendeléseit.

                    Tudnál még egy sort felvenni az éttermi kódodba? Megkérdezheted például a vendégeket, hogy mit szeretnének inni, megmondod-e nekik az árat, vagy kívánsz-e nekik jó étvágyat?
                example_code: |-
                    ```
                    print Üdvözlünk a Hedy étteremben
                    ask Mit rendelsz?
                    echo Szóval ezt szeretnéd megrendelni
                    print Köszönjük a rendelésedet!
                    print Már úton van!
                    ```
                story_text_2: "### Exercise\nCan you think of more lines to add to your restaurant code? For example, can you {ask} the guests what they'd like to drink, tell them the price, or wish them a pleasant meal?\n"
            2:
                start_code: '# place your code here'
                story_text: |-
                    A 2. szinten változók segítségével bővítheted éttermedet. Az 1. szinten Hedy csak egyszer tudta visszhangozni a sorrendet, és csak az utolsó dologra emlékezett, amit rendeltek.
                    Most már használhatsz változókat, és Hedy emlékszik mind az ételekre, mind az italokra!
                example_code: |-
                    ```
                    print Üdvözlünk a Hedy étteremben!
                    print Ma pizzát vagy lasagnat szolgálunk fel.
                    etel is ask Mit szeretnél enni?
                    print Jó választás! A etel a kedvencem!
                    feltet is ask 'Szeretnél rá húst vagy zöldséget?'
                    print etel rajta feltet úton van!
                    ital is ask 'Mit szeretnél inni?'
                    print Köszönjük a rendelésedet.
                    print A etel és ital mindjárt itt lesz!
                    ```


                story_text_2: "### Exercise\nCan you make this code more elaborate? For example by adding drinks to the order? Or...?\n"
            11:
                start_code: print 'Üdvözlünk a Hedy étteremben!'
                story_text: |-
                    Az "for i in 1 in 5" tartományban használhatjuk a több vásárló megrendeléseinek rendezett kiíratására.

                example_code: |
                    ```
                    print 'Üdvözlünk a Hedynél!'
                    emberek is ask 'Hány ember számára rendelsz?'
                    for i in range 1 to emberek
                        print 'Rendelésszám ' i
                        etel is ask 'Mit szeretnél enni?'
                        print etel
                        if etel is sültkrumpli
                            szosz is ask 'Milyen szószt szeretnél hozzá?'
                            print szosz
                        ital is ask 'Mit szeretnél inni?'
                        print ital
                    ar is 400 * emberek
                    print 'Ez ' ar ' forint lesz, kérem'
                    ```
            9:
                start_code: print 'Üdvözlünk a Hedy étteremben!'
                story_text: |-
                    A 7. szinten több sor kód megismétlésével bonyolultabbá teheted virtuális éttermedet. Mint ez:

                    Természetesen ez a kód bővíthető a menü további elemeivel, italokkal és/vagy több fogással, így nyugodtan adj hozzá annyi lehetőséget, amennyit csak akarsz!
                example_code: |-
                    ```
                    print 'Üdvözlünk a Hedy étteremben!'
                    emberek is ask 'Hány ember jön ma??'
                    print 'Nagyszerű!'
                    print 'A mai menü pizza vagy saláta'
                    ar is 0
                    repeat emberek times
                        etel is ask 'Mit szeretnél rendelni?'
                        print etel
                        if etel is pizza
                            ar is ar + 1000
                        else
                            ar is ar + 800
                    print 'Köszönjük rendelésedet!'
                    print 'Ez ' ar ' forint lesz'
                    print 'Köszönöm, jó étvágyat!!'
                    ```

            7:
                start_code: print 'Üdvözlünk a Hedy étteremben!'
                story_text: |-
                    Az 6. szinten megtanultad, hogyan használhatod az ismétlés parancsot egy kódsor megismétlésére bizonyos számú alkalommal.
                    Ezt használhatod éttermedben, hogy megkérdezz több embert, hogy mit szeretnének enni. Mint ez:


                    Az 5. szinten több embert is megkérdezhetsz, hogy mit szeretnének enni, de nem lehet minden egyes rendelést külön kiíratni, mert csak egy kódsort ismételhetsz meg.
                    A 7. szinten megtanulhatod, hogyan kell több sor kódot egyszerre megismételni, ami lehetővé teszi több rendelés kérését és kiíratását is!
                example_code: |-
                    ```
                    print 'Üdvözlünk a Hedy étteremben!'
                    emberek is ask 'Hány ember jön ma?'
                    repeat emberek times food is ask 'Mit szeretnél ennit?'
                    print 'Köszönjük megrendelésedet! Mindjárt jön!'
                    ```
            6:
                start_code: '# place your code here'
                story_text: |-
                    A 6. szinten matematikai számításokkal kiszámíthatod az ügyfelek megrendelésének teljes árát, ami reálisabbá teheti a virtuális éttermet.

                    Készíthetsz egyszerű éttermi kódot, például.
                example_code: |
                    ```
                    print 'Üdvözlünk a Hedy Étteremben'
                    print 'Ez a menünk:'
                    print 'Fő ételeink: pizza, lasagne vagy spagetti'
                    foetel is ask 'Melyik főételt szeretnéd?'
                    ar is 0
                    if foetel is pizza ar is 1000
                    if foetel is lasagne ar is 1200
                    if foetel is spagetti ar is 800
                    print 'Ezt rendelted: ' foetel
                    print 'Ez ' ar ' forint lesz, kérem'
                    print 'Köszönöm, jó étvágyat!'
                    ```

                    De még sok mindent hozzáadhatsz a virtuális éttermedhez, például több tanfolyamot.

                    Ebben a példában három tanfolyam létezik, amelyek több kódot és további kiegészítéseket igényelnek az ár kiszámításakor.

                    Hozzáadhatsz még sok mindent a virtuális éttermedhez, például:
                    - kérdezd meg, hány ember jön, és szorozd meg az árat ezzel az értékkel
                    - felveszel egy másik ételt?
                    - kedvezményt adsz az embereknek, amikor (titkos) kuponkódot adnak meg?
                    - adsz hozzá gyermekmenüt?
                    - gondolsz más szórakoztató dolgokra?
            5:
                start_code: '# place your code here'
                story_text: |-
                    A 4. szinten az if parancs lehetővé teszi, hogy kérdéseket tegyél fel ügyfeleidnek, és különböző módon felelj a válaszaikra.
                    Az alábbi példában láthatod, hogy megkérdezheted az ügyfeledet, hogy szeretné-e hallani a különlegességeket, és Hedy ennek megfelelően válaszolhat.

                example_code: |
                    ```
                    print 'Üdvözlünk a Hedy Étteremben!'
                    kulonleges is ask 'Szeretnél hallani ma a különlegességeinkről?'
                    if kulonleges is igen print 'Mai különlegességünk piri piri csirke és rizs.' else print 'Nem probléma.'
                    etel is ask 'Mit szeretnél enni?'
                    print 'Egy ' etel', mindjárt jön!'
                    ital is ask 'Mit szeretnél inni hozzá?'
                    if ital is kóla print 'Sajnálom a kóla kifogyott!' else print 'Jó választás!!'
                    mas is ask 'Szeretnél valami mást?'
                    print 'Hadd ismételjem el a rendelésedet...'
                    print 'Egy ' etel
                    if ital is kóla print 'és...' else print 'Egy ' ital
                    if mas is nem print 'Ez minden!' else print 'Egy  ' mas
                    print 'Köszönjük a rendelésedet, jó étvágyat !'
                    ```

                    Tudnál még több kérdést feltenni az ügyfeleknek, amikor rendelnek, és különböző  módon felelni a válaszaikra az if paranccsal?
            4:
                start_code: '# place your code here'
                story_text: |-
                    A 3. szinten idézőjeleket fogunk alkalmazni, amikor a `print` parancsot használjuk.
                    Tudod-e idézőjelek hozzáadásával működtetni a 2. szintű kódodat a 3. szinten?

                    Légy óvatos! A 2. szinten aposztrófokat engedélyeztek a szövegben, de a 3. szinten Hedy összetéveszti őket idézőjelekkel, és a kód nem fog működni!
                    Tehát ahelyett, hogy beírnád a `print ma pizzát szolgálunk fel` kifejezést, írd be a `print` 
                     ma pizzát szolgálunk fel` parancsot.

                example_code: |-
                    ```
                    print 'Üdvözlünk a Hedy Étteremben!'
                    print 'Ma pizzát vagy lasagnat szolgálunk fel.'
                    etel is ask 'Mit szeretnél enni?'
                    print 'Jó választás! A(z) ' etel ' nekem is kedvencem!'
                    feltet is ask 'Szeretnél hús vagy zöldséget rá?'
                    print etel ' , rajta a(z) ' feltet ' már úton van!'
                    ital is ask 'Mit szeretnél inni hozzá?'
                    print 'Köszönjük a rendelésedet.'
                    print 'A(z) ' etel ' és a(z) ' ital ' mindjárt itt lesz!'
                    ```
            3:
                start_code: '# place your code here'
                story_text: |-
                    Nehezen tudod eldönteni, mit szeretnél vacsorázni? Engedheted, hogy Hedy válasszon neked!
                    Egyszerűen add hozzá kedvenc (vagy legkevésbé kedvenc) ételeidnek listáját, és Hedy véletlenszerűen választhatja ki a vacsorádat.
                    Szórakozhatsz egy kicsit, ha hagyod, hogy Hedy megválassza a vacsora árát is! Mit fogsz kapni?


                example_code: |-

                    ```
                    print Üdvözöljük a Hedy's Random étteremben!
                    print Az egyetlen étterem amely véletlenszerűen kiválasztja az étkezést és annak árát az Ön számára!
                    eloetelek is saláta, leves, sajt
                    foetel is pizza, kelbimbó, spagetti
                    desszertek is brownie, fagylalt, francia sajtok
                    ital is kóla, sör, víz
                    arak is 1000 forint, 2000 forint, 3000 forint
                    print A következővel indul: eloetelek at random
                    print Ezután kiszolgáljuk: foetel at random
                    print És desszertként: desszertek at random
                    print Igyon egy italt
                    print Ez lesz: arak at random
                    print Köszönöm és élvezze az étkezést!
                    ```
                story_text_2: "Does your costumer have any allergies or do they dislike certain dishes? Then you can use the `{remove}`command to remove it from your menu.\n"
                example_code_2: "```\n{print} Mystery milkshake\nflavors {is} strawberry, chocolate, vanilla\nallergies {is} {ask} Are you allergic to any falvors?\n{remove} allergies {from} flavors\n{print} You get a flavors {at} {random} milkshake\n```\n"
            15:
                example_code: "```\n{print} 'Welcome at McHedy'\nmore = 'yes'\n{while} more == 'yes'\n    order = {ask} 'What would you like to order?'\n    {print} order\n    more = {ask} 'Would you like to order anything {else}?'\n{print} 'Thank you!'\n"
                story_text: "With the `{while}` you can make sure your costumers can keep adding orders until they are done.\n"
                start_code: '# place your code here'
            12:
                story_text: "From this level on you can use decimal numbers to make you menu more realistic.\n"
                example_code: "```\nprice = 0\nfood = {ask} 'What would you like to order?'\ndrink = {ask} 'What would you like to drink?'\n{if} food {is} 'hamburger'\n    price = price + 6.50\n{if} food {is} 'pizza'\n    price = price + 5.75\n{if} drink {is} 'water'\n    price = price + 1.20\n{if} drink {is} 'soda'\n    price = price + 2.35\n{print} 'That will be ' price ' dollar, please'\n```\n"
                start_code: '# place your code here'
            10:
                story_text: "In this level you'll learn how to easily {ask} your guests' orders in a short code.\n"
                story_text_2: "Of course, you could also order for multiple people!\n"
                example_code_2: "```\ncourses = appetizer, main course, dessert\nnames = Timon, Onno\n{for} name {in} names\n    {for} course {in} courses\n        food = {ask} name ', what would you like to eat as your ' course '?'\n        {print} name ' orders ' food ' as their ' course\n```\n"
                start_code: courses = appetizer, main course, dessert
                example_code: "```\ncourses = appetizer, main course, dessert\n{for} course {in} courses\n    food = {ask} 'What would you like to eat as your ' course '?'\n    {print} food ' will be your ' course\n```\n"
            8:
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\npeople = {ask} 'How many people will be joining us today?'\n{print} 'Great!'\n{repeat} people {times}\n    food = {ask} 'What would you like to order?'\n    {print} food\n{print} 'Thank you for ordering!'\n{print} 'Enjoy your meal!'\n```\n\n### Exercise\nOf course, this code can be expanded with more items on the menu, offering drinks, and/or multiple courses, so feel free to add as many options as you like!\n"
                story_text: "In this level you can make your virtual restaurant more elaborate by repeating multiple lines of code. Like this:\n"
                start_code: '# place your code here'
                story_text_2: "### Exercise\nOf course, this code can be expanded with more items on the menu, offering drinks, and/or multiple courses, so feel free to add as many options as you like!\n"
            13:
                story_text: "In this level we can use the new commands to upgrade our restaurant.\nWe use `{and}` to see {if} two things are both the case.\n"
                example_code: "```\nprice = 10\nfood = {ask} 'What would you like to eat?'\ndrinks = {ask} 'What would you like to drink?'\n{if} food {is} 'sandwich' {and} drinks {is} 'juice'\n    {print} 'Thats our discount menu'\n    price = price - 3\n{print} 'That will be ' price ' dollars'\n```\n"
                start_code: '# place your code here'
    turtle:
        name: Teknős
        description: Készíts saját rajzot
        default_save_name: teknős
        levels:
            1:
                story_text: |-
                    Az 1. szinten Hedy segítségével rajzolhatsz is. A fordulatok és vonalak kombinálásával négyzetet vagy lépcsőt készíthetsz!

                    Az "előre" segítségével húzhatsz egy vonalat előre. A mögötte lévő szám határozza meg, hogy a teknős mennyit fog gyalogolni. "jobbra fordul" negyed fordulatot forgat az óramutató járásával megegyező irányba, "balra fordul" az óramutató járásával ellentétes irányba fordul

                    Ez egy kis lépcső kezdete. El tudod érni az 5 lépést?

                example_code: |
                    ```
                    forward 50
                    turn left
                    forward 50
                    turn right
                    ```
                start_code: |-
                    forward 50
                    turn left
            2:
                story_text: |-
                    Az 1. szinten a teknős csak balra vagy jobbra tudott fordulni. Ez egy kicsit unalmas!
                    A 2. szinten minden irányba tudja mutatni az orrát.

                    Használd a 90-et a negyed fordulathoz. Ezeket fokoknak hívjuk. A teljes fordulat 360 fok.
                    Tudsz ábrát készíteni ezzel a kóddal? Talán egy háromszög vagy egy kör?

                example_code: |
                    ```
                    print Ábrák rajzolása
                    angle is 90
                    turn angle
                    forward 25
                    turn angle
                    forward 25
                    ```

                start_code: |-
                    print Turtle race!
                    angle is 90
                    turn angle
                    forward 25
                story_text_2: "Also, in level 1 the turtle could only turn left or right. That is a bit boring!\nIn level 2 he can point his nose in all directions.\n\nUse 90 to turn a quarter. We call this degrees. A full turn is 360 degrees.\nCan you make a figure with this code? Maybe a triangle or a circle?\n"
                example_code_2: "```\n{print} Drawing figures\nangle {is} 90\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n```\n"
            8:
                story_text: |-
                    Most, hogy több sort megismételhetünk, könnyebben készíthetünk alakzatokat.
                    Csak egyszer kell beállítani a szöget, majd ezt a változót használni a `repeat` utasítással.


                    Továbbá javíthatjuk azt a programot, amely különböző alakzatokat rajzol.
                    Kitalálod, mennyit kell itt fordulnia a teknősnek? Fejezd be a kódot, és rajzolhatsz tetszőleges sokszöget!

                start_code: szogek is ask 'Hány szöget kell rajzolnom?'
                story_text_2: "Also, we can now improve the program that draws different figures.\nCan you figure out how far the turtle has to turn here? Finish the code and you can draw any polygon you'd like!\n"
                example_code: |-
                    ```
                    szog is 90
                    repeat 10 times
                        turn szog
                        forward 50
                    ```
                example_code_2: |-
                    ```
                    szogek is ask 'How many angles should I draw?'
                    szog is 360 / szogek
                    repeat szog times
                        turn _
                        forward_
                    ```
            6:
                story_text: |-
                    Az 5. szinten számítások segítségével különböző alakzatokat rajzolhatsz.
                    Lehet, hogy az iskolában már tanultad, hogy a teljes kör fordulata 360 fokos. Ha nem, most már tudod!
                    Ezért is használsz 90 fokot egy négyzethez. 360 osztva 4 -gyel 90.
                    Most, hogy tudunk matematikázni Hedyvel, megrajzolhatjuk az összes kívánt alakzatot!
                start_code: print 'Alakzatok rajzolása'
                example_code: |-
                    ```
                    szogek is ask 'Hány szöget akarsz?'
                    szog is 360 / szogek
                    forward 50
                    turn szog
                    forward 50
                    turn szog
                    forward 50
                    turn szog
                    forward 50
                    turn szog
                    forward 50
                    turn szog
                    forward 50
                    turn szog
                    ```
            5:
                story_text: |-
                    A 4. szinten választást hozhatsz létre az `if` utasítással. Például választhatsz különböző típusú alakzatok között.


                start_code: |
                    print 'Alakzatok rajzolása'
                    alakzat is ask 'Négyzetet vagy háromszöget akarsz rajzolni?'
                    if alakzat is háromszög szog is 120 else szog is 90
                    turn szog
                    forward 25
                example_code: |-
                    ```
                    print 'Ábrák rajzolása'
                    alakzat is ask 'Négyzetet vagy háromszöget akarsz rajzolni?'
                    if alakzat is háromszög szog is 120 else szog is 90
                    turn szog
                    forward 25
                    turn szog
                    forward 25
                    turn szog
                    forward 25
                    turn szog
                    forward 25
                    ```
                story_text_2: "### Exercise\nFill in the correct numbers in this code to get it to work.\nAfter you've done that, you can try to add the option backwards.\n\n**Extra** Instead of using 'left' and 'right', remake the program with North, East, South and West.\nThis way you could add even more directions like Northeast and Southwest etc.\n"
                example_code_2: "```\ndirection {is} {ask} 'Do you want to go left, right, or straight ahead?'\nif direction is left turn _\nif direction is right turn _\nforward 100\n```\n"
            4:
                story_text: |-
                    A 3. szinten idézőjeleket kell használni a "print" és az "ask" szöveggel. A teknős használata közben is

                example_code: |
                    ```
                    print 'Teknős verseny'
                    irany is ask 'Hány fokot forduljon?'
                    turn irany
                    tavolsag is ask 'Milyen messze menjen?'
                    forward tavolsag
                    ```
                start_code: |-
                    print 'Teknős verseny'
                    irany is ask 'Hány fokot forduljon?'
                    turn irany
                    tavolsag is ask 'Milyen messze menjen?'
                    forward tavolsag
                story_text_2: "You can also change the color of the lines with the command `{color}`. Check out the example.\nYou can also use the command `{color} {white}` to make 'invisible' lines. You could use these white lines to move the turtle anywhere in the screen before you start drawing.\n"
                example_code_2: "```\n{color} {white}\n{forward} -80\n{color} {green}\n{forward} 50\n{color} {yellow}\n{forward} 50\n{color} {red}\n{forward} 50\n```\n"
            3:
                story_text: |-
                    Iin level 3 you can use use `random` with the drawing turtle. A random choice makes the turtle walk a different path each time.
                    Use `at random` to choose a value from a list. You can copy and paste lines 2 and 3 so create a longer random path.

                start_code: |-
                    angles is 10, 50, 90, 150, 250
                    turn angles at random
                    forward 25
                example_code: |-
                    ```
                    angles is 10, 50, 90, 150, 250
                    turn angles at random
                    forward 25
                    ```
            9:
                story_text: "Now that we can use a `{repeat}` inside a `{repeat}`, we can create more complex figures.\n\n### Exercise 1\nThis code creates three black triangles, change that into five pink squares.\n\n **(extra)** Create a figure of your own choosing consisting of at least two different shapes types.\n"
                example_code: "```\n{color} {black}\n{repeat} 3 {times}\n    {repeat} 3 {times}\n        {forward} 10\n        {turn} 120\n    {color} {white}\n    {forward} 50\n    {color} {black}\n```\n"

                start_code: '# place your code here'
    fortune:
        name: Jósnő
        description: Hadd jósolja meg Hedy a jövőt
        default_save_name: Jósnő
        levels:
            1:
                start_code: print Szia, Hedy, a jósnő vagyok!
                story_text: |-
                    Voltál már fesztiválon, és egy jósnő megjósolta a jövődet? Vagy játszottál már varázslatos nyolc labdával?
                    Akkor valószínűleg tudod, hogy nem igazán tudják megjósolni a jövődet, de ettől még szórakoztató játszani!

                    A következő szinteken megtanulhatod, hogyan kell saját jósnőt létrehozni!
                    Az 1. szinten könnyen kezdheted, ha hagyod, hogy Hedy jósnőként mutatkozzon be, és hagyja, hogy visszhangozza a játékosok válaszait.
                    Mint ez:

                example_code: |
                    ```
                    print Szia, Hedy, a jósnő vagyok!
                    ask Ki vagy te?
                    print Hadd nézzek bele a kristálygömbömbe
                    print Látom... Látom...
                    echo A neved
                    ```
                    Hedy most csak a nevedet mondja meg. Ki tudod bővíteni a kódot, hogy Hedy több dolgot meg tudjon jósolni rólad?

                    Nyilvánvaló, hogy Hedy még nem túl jó jósnő, hiszen csak meg tudja ismételni a játékosok által adott válaszokat!
                    Vess egy pillantást a 2. szintre, hogy fejleszd a jósnődet.
                story_text_2: "### Exercise\nHedy now only tells you your name. Can you expand the code so that Hedy can predict more things about you?\nObviously, Hedy isn't a very good fortune teller yet, as she can only repeat the answers that were given by the players!\nTake a look in level 2 to improve your fortune teller.\n"
            8:
                start_code: |-
                    print 'Hedy a jósnő vagyok!'
                    print 'Feltehetsz 3 kérdést.'
                story_text: |-
                    Az 5. szinten megtanultad, hogyan kell használni az ismétlést, hogy a jósnő 3 kérdésre válaszoljon egymás után, de problémánk adódott a kérdések kiíratásával.
                    A 7. szinten ez a probléma megoldódott az ismétlés parancs új módjának köszönhetően.
                    A következő példában a jósnő 3 kérdést tehet fel, és kiírathatja őket!

                example_code: |-

                    ```
                    print 'Hedy a jósnő vagyok!'
                    print 'Feltehetsz 3 kérdést.'
                    valasz is igen, nem, talán
                    repeat 3 times
                       kerdes is ask 'Mit akarsz tudni?'
                       print kerdes
                       print 'A kristálygömböm azt mondja...' valasz at random
                    ```
            7:
                story_text: |-
                    Az 6. szinten a `repeat` paranccsal beállíthatod, hogy a gép egyszerre több jóslatot mondjon.

                    Amint láthatod, a kérdések ebben a példában nincsenek kiíratva. Ennek az az oka, hogy a `kérdés` változót háromszor módosult.
                    Valahányszor a játékos kitölti az új választ, Hedy felülírja az előzőt, így a játékos első válaszát elfelejti.
                    Ez azt jelenti, hogy így nem tudja kiíratni az összes kérdést.

                    Ha 1 helyett 3 különböző változót használsz (például `kerdes1`,` kerdes2` és `kerdes3`), megoldhatod a problémát, és kiírathatod a kérdéseket.
                    Ez azt jelenti, hogy a válaszoknál csak az "repeat" utasítást kell használnod, és az összes kérdést külön kell feltenned és ki kell íratnod.
                    Meg tudod csinálni?

                    A 7. szinten az ismétlés parancs elrendezése megváltozik, ami lehetővé teszi több sor ismétlését egyszerre.
                start_code: |-
                    print 'Hedy, a jósnő vagyok!'
                    print 'Feltehetsz 3 kérdést!'
                example_code: |-

                    ```
                    print 'Hedy, a jósnő vagyok!'
                    print 'Feltehetsz 3 kérdést!'
                    repeat 3 times kerdes is ask 'Mit akarsz tudni?'
                    valasz is igen, nem, talan
                    repeat 3 times print 'A kristálygömböm azt mondja... ' valasz at random
                    ```
            6:
                story_text: |-
                    A 5. szinten jövendőmondóként használhatod a matematikát előrejelzéseidben. Ez lehetővé teszi (buta) képletek kitalálását a jövő kiszámításához.
                    Például kiszámíthatod, hogy milyen gazdag leszel, vagy hány gyermeked lesz, ha felnősz.

                start_code: |-
                    print 'Hedy, a jósnő vagyok!'
                    print 'Meg tudom jósolni, hány gyermeked lesz, ha felnősz!'
                example_code: |-

                    ```
                    print 'Hedy, a jósnő vagyok!'
                    print 'Meg tudom jósolni, hány gyermeked lesz, ha felnősz!'
                    kor is ask 'Hány éves vagy?'
                    testver is ask 'Hány testvéred van?'
                    magassag is ask 'Hány cm magas vagy?'
                    gyerekek is magassag / kor
                    gyerekek is gyerekek - testver
                    print 'Neked ...'
                    print gyerekek ' gyereked lesz!'
                    ```

                    Ha az előző példa nem volt elég buta a számodra, akkor nézd meg ezt!

                    ```
                    print 'Hedy vagyok a buta jósnő!'
                    print 'Meg tudom jósolni, milyen okos vagy!'
                    foci is ask '1-10-es skálás mennyire szereted a focit?'
                    banan is ask 'Hány banánt ettél a héten?'
                    higienia is ask 'Hányszor mostad meg a kezed ma?'
                    eredmeny is banan + higienia
                    eredmeny is eredmeny * foci
                    print 'Te ' eredmeny ' százalék okos vagy.'
                    ```
            5:
                story_text: |-
                    A 4. szinten megtanulod (titokban) az esélyeket a magad javára billenteni a jósnő használata során!
                    Az `if` és `else` használatával bebiztosíthatod, hogy mindig jó szerencsét kapj, míg mások nem.
                    Tekintsd meg ezt a példát, hogy megtudd, hogyan.


                    Cseréld le Hedyt a saját nevedre az utolsó sorban, és Hedy mindig azt jósolja, hogy te nyersz a lottón, mások nem!
                    Természetesen ez gyanakvást kelthet a többi játékossal szemben ... Ennek elkerülése érdekében gondoskodhatsz arról, hogy Hedy minden alkalommal más válaszokat adjon a kód futtatásakor.
                    De természetesen neked továbbra is pozitív választ ad, a többi játékosnak pedig negatív választ.

                    Ezeb az elven különféle programokat lehet készíteni, csak légy kreatív! Például létrehozhatsz egy olyan gépet, amely megjósolja, hogy kedvenc sportcsapatod legyőzi az összes versenytársat!
                    Vagy elkészítheted Hófehérke varázslatos tükrét a falon, hogy elmondd mindenkinek, hogy te vagy a legbecsületesebb!
                    Hagyd, hogy a fantáziád végezze a munkádat!
                start_code: print 'Szia, Hedy, a jósnő vagyok!'
                example_code: |-

                    ```
                    print 'Szia, Hedy, a jósnő vagyok'
                    print 'Meg tudom jósolni, nyersz-e a lottón holnap!'
                    szemely is ask 'Ki vagy te?'
                    if szemely is Hedy print 'Bizonyosan nyerni fogsz!' else print 'Balszerencse! Valaki más nyer!'
                    ```
            4:
                start_code: print 'Szia, Hedy, a jósnő vagyok!'
                story_text: |-
                    A 3. szint nem tartalmaz új funkciókat, de lehetővé teszi az idézőjelek használatának gyakorlását.
                    Újra elkészítheted a 2. szintű kódot, és ügyelj arra, hogy az idézőjeleket a megfelelő helyre írd!

                    Ne feledd, hogy a 2. szinten nem használhattuk a „kerdes” szót a változó nevének és egy normál kiíratható szónak sem.
                    A 3. szintű idézőjelek lehetővé teszik ezt!

                    Fontos! Ne feledd, hogy most, amikor idézőjeleket használunk, Hedy összezavarodik, amikor az aposztrófot más szövegösszefüggésben használod.

                example_code: |-

                    ```
                    print 'Szia, Hedy, a jósnő vagyok!'
                    kerdes is ask 'Mit akarsz tudni?'
                    print 'Ez az amit tudni akarsz: ' kerdes
                    valasz is igen, nem, talan
                    print 'A kristálygömböm azt mondja... ' valasz at random
                    ```
            3:
                start_code: print Szia Hedy a jósnő vagyok!
                story_text: |-
                    Az 1. szinten megalkottad első jóslásgépedet, de Hedy nem tudott igazán megjósolni semmit, csak visszhangot.
                    A 2. szinten használhatsz egy változót és az `at random`  parancsot, hogy valóban engedd, hogy Hedy válaszoljon Neked. Nézd meg például ezt a kódot:

                    Most Hedy csak igennel, nemmel vagy talán válaszolhat. Adhatsz Hedynek több válaszlehetőséget, például „határozottan” vagy „kérdezz újra”
                example_code: |-
                    Ebben a példában a játékos igen-nem kérdést tehet fel Hedynek, és Hedy véletlenszerű választ ad.
                    ```
                    print Szia Hedy a jósnő vagyok!
                    kerdes is ask Mit akarsz tudni?
                    print Ez az amit tudni akarsz: kerdes
                    valasz is igen, nem, talan
                    print A kristálygömböm azt mondja... valasz at random
                    ```
                story_text_2: "### Exercises\nNow, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or '{ask} again'.\n"
            12:
                story_text: "In this level you can make your fortunes multiple words. Like in this example below:\n"
                example_code: "```\nfortunes = 'you will be rich', 'you will fall in love', 'you will slip on a banana peel'\n{print} 'I will take a look in my crystall ball for your future.'\n{print} 'I see... I see...'\n{sleep}\n{print} fortunes {at} {random}\n```\n"
                start_code: '# place your code here'
            10:
                story_text: "In this level you'll learn how to program the game MASH (mansion, apartement, shack, house). In this game you can predict for all the players at once, what their future will look like.\n"
                example_code: "```\nhouses = mansion, apartment, shack, house\nloves = nobody, a royal, their neighbour, their true love\npets = dog, cat, elephant\nnames = Jenna, Ryan, Jim\n{for} name {in} names\n    {print} name ' lives in a ' houses {at} {random}\n    {print} name ' will marry ' loves {at} {random}\n    {print} name ' will get a ' pets {at} {random} ' as their pet.'\n    {sleep}\n```\n"
                start_code: '# place your code here'
    haunted:
        name: Kísértetház
        description: menekülés a kísértetjárta házból
        default_save_name: Kísértetház
        levels:
            1:
                story_text: |-
                    Ebben a kalandban egy olyan játék létrehozásán dolgozol, amelyben a megfelelő ajtó kiválasztásával menekülnöd kell egy kísértetjárta házból.
                    Ha a megfelelő ajtót választod, túléled, de ha nem, egy rettenetes szörnyeteg ...

                    Az 1. szinten elkezdjük a kísértetjárta ház játékunkat egy ijesztő történet kitalálásával, és megkérdezzük a játékost, hogy milyen szörnyet látnak a kísértetjárta házban.

                example_code: |
                    ```
                    print Hogyan kerültem ide?
                    print Emlékszem, a barátom azt mondta, menjek be a régi kastélyba ...
                    print és hirtelen minden elsötétült.
                    print De hogy kerületem a padlóra...?
                    print és fejem úgy fáj, mintha egy baseball ütővel ütötték volna meg!
                    print Mi ez a hang?
                    print Ó, nem! Úgy érzem, nem vagyok egyedül ebben a házban!
                    print El kell mennem innen!
                    print Három ajtó van előttem ...
                    ask Melyik ajtót válasszam?
                    echo Az ajtó, amit választok
                    print ...?
                    ```
                    Be tudod fejezni az ijesztő történetet? Vagy kitalálsz egy saját kísértetáz történetet?
                start_code: print Hogy kerültem ide?
                story_text_2: "### Exercise\nCan you finish the scary story? Or make up your own haunted house story?\n"
            11:
                story_text: |-
                    A 8. szinten megváltoztattuk az ismétlés parancsot, és hozzáadtunk egy sort a kísértetjárta házunkhoz, amely megmondja a játékosnak, hogy melyik szobában vannak.


                start_code: print 'Szabadulj ki a kísértetházból'
                example_code: |-

                    ```
                    print 'Szabadulj ki a kísértetházból'
                    jatekos is elo
                    ajtok is 1, 2, 3
                    szornyek is  vampir, zombi, oriaspok
                    for i in range 1 to 3
                        if jatekos is elo
                            helyesajto is ajtok at random
                            print 'Három ajtó van előtted...'
                            valasztottajto is ask 'Melyik ajtót választod?'
                            if valasztottajto is helyesajto
                                print 'Itt nincs szörny!'
                            else
                                print 'Megevett a(z) ' szornyek at random
                                jatekos is halott
                        else
                            print 'GAME OVER'
                    if jatekos is elo
                        print 'Nagyszerű! Túlélted!'
                    ```
            5:
                story_text: |-
                    Eddig a szintig a kísértetjárta ház játék mindig arra kérte a játékost, hogy válasszon egy ajtót, de ahogy észrevettétek, nem igazán kellett helyesen válaszolniuk.
                    Abban az esetben, ha a játékos teljesen véletlenszerű választ adott, a játék továbbra is működne, és a játékos akár nyerhet is (annak ellenére, hogy nem választott ajtót).
                    A 4. szinten csak akkor nyerheti meg a játékot, ha ugyanazt az ajtót választja, amelyet Hedy véletlenszerűen választott ki.

                example_code: |
                    ```
                    print 'Szabadulj ki a kísértetházból!'
                    print 'Három ajtó van előtted...'
                    ajtok is 1,2,3
                    szornyek is verfarkas, mumia, vampir, zombi
                    valasztottajto is ask 'Melyik ajtót választod?'
                    print 'Az ajtó, amit választottál...' valasztottajto
                    helyesajto is ajtok at random
                    if valasztottajto is helyesajto print 'Nagyszerű! Kiszabadultál!'
                    else print 'Jaj ne! Megevett a ...' szornyek at random
                    ```
                start_code: print 'Szabadulj ki a kísértetházból'
            4:
                story_text: |-
                    A 3. szinten megtanulod használni az idézőjeleket a játékaidban.
                    Át tudod alakítani a kisértetház játékot úgy, hogy megfeleljen a 3. szintnek?
                start_code: print 'Szabadulj ki a kísértetházból'
                example_code: "```\n{print} _Escape from the haunted house!_\n{print} _There are 3 doors in front of you..._\nchoice {is} {ask} _Which door do you choose?_\n{print} _You picked door ..._ choice\nmonsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED\n{print} _You see..._\n{sleep}\n{print} monsters {at} {random}\n ```\n"
            3:
                story_text: |-
                    Az 1. szinten bemutatkoztál a kísértetház játékodnak, de ahogy észrevetted, a történetnek mindig rettenetes vége lesz.
                    A 2. szinten interaktívabbá teheted a történetet a játék kimenetelének megváltoztatásával; néha megesznek, néha megmenekülsz!
                    Hadd döntsön Hedy véletlenszerűen!


                    Ez a történet meglehetősen egyszerű, talán egy kicsit érdekesebbé teheted egy izgalmasabb történet hozzáadásával.
                    Továbbá nagyon korlátozott eredményeket érhetsz el, csak 3 lehetőség van arra, hogy mi van az ajtók mögött. Talán még több szörnyetegre gondolhatsz, amelyet felvehetsz a listába!

                    Végezetül szeretnénk egy kihívást küldeni Neked,  hogy változtasd meg ezt a játékot olyan játékműsorrá (mint amilyenek a tévében vannak), ahol a játékosok ajtót vagy bőröndöt választanak, és valamelyik nagy díjat tartalmaz!
                    Meg tudod csinálni?
                start_code: print 'Szabadulj ki a kísértetházból'
                example_code: "```\n_ Escape from the haunted house!\n_ There are 3 doors in front of you...\n_ _ _ Which door do you choose?\n_ You picked door ... choice\nmonsters _ a zombie, a vampire, NOTHING YOUVE ESCAPED\n_ You see...\n{sleep}\n_ _ _ _\n```\n"
            14:
                story_text: "In this level you can use the `<` and `>` symbol to introduce lives to your game.\n"
                example_code: "```\n{print} 'Escape from the haunted house'\nlives = 3\ndoors = 1, 2, 3\nmonsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'\n{for} i {in} {range} 1 {to} 10\n    {if} lives > 0\n        good_door = doors {at} {random}\n        monster = monsters {at} {random}\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} good_door == chosen_door\n            {print} 'You have chosen the correct door'\n        {else}\n            {print} 'You see...' monster\n            {if} monster == 'a sleeping 3 headed dog'\n                {print} 'Pffieuw.... Its asleep'\n            {else}\n                {print} 'You lose one life'\n                lives = lives -1\n    {else}\n        {print} 'GAME OVER'\n```\n"
                start_code: '# place your code here'
            9:
                story_text: "In this level you can use nesting, which allows you to make the haunted house even more interactive!\n"
                start_code: "{print} 'Escape from the haunted house!'"
                example_code: "```\n{print} 'Escape from the Haunted House!'\nplayer = alive\ndoors = 1, 2, 3\nmonsters = zombie, vampire, giant spider\n{repeat} 3 {times}\n    {if} player {is} alive\n        correct_door {is} doors {at} {random}\n        {print} 'There are 3 doors in front of you...'\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} chosen_door {is} correct_door\n            {print} 'No monsters here!'\n        {else}\n            {print} 'You are eaten by a ' monsters {at} {random}\n            player = dead\n    {else}\n        {print} 'GAME OVER'\n{if} player {is} alive\n    {print} 'Great! You survived!'\n```\n### Exercise\nNow it's very hard to win this game, can you make it easier to win?\nFor example by only having 1 wrong door and 2 correct doors instead of 1 correct door en 2 wrong ones?\n"
            16:
                story_text: "This haunted house game uses the connection between the lists you can use in this level.\nFor example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.\nCheck out the code!\n"
                example_code: "```\nnumbers = [1, 2, 3]\ni = numbers[random]\nhint = ['growling', 'a cackling laugh', 'fluttering batwings']\nmonsters = ['zombie', 'witch', 'vampire']\nbad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']\ngood_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']\nweapons = ['ham', 'lighter', 'garlic']\n{print} 'You are standing in front of an old mension'\n{print} 'Something is not right here'\n{print} 'You hear ' hint[i]\n{print} 'You are going to explore it'\n{print} 'You enter the kitchen en see a lighter, a raw ham and a garlic.'\nyour_weapon = {ask} 'What do you bring with you?'\n{print} 'With your ' your_weapon ' you enter the living room'\n{print} 'There you find a ' monsters[i]\nneeded_weapon = weapons[i]\n{if} your_weapon == needed_weapon\n    {print} 'You use your ' your_weapon\n    {print} good_fate[i]\n    {print} 'YOU WIN!'\n{else}\n    {print} 'You have chosen the wrong weapon...'\n    {print} bad_fate[i]\n    {print} 'GAME OVER'\n```\n"
                start_code: '# place your code here'
            2:
                story_text: |
                    In this haunted house you can choose your monsters with emojis. Of course you could also use words.
                example_code: |
                    ```
                    monster_1 {is} 👻
                    monster_2 {is} 🤡
                    monster_3 {is} 👶
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
                start_code: "monster1 {is} _"
                story_text_2: "### Exercise\nIn the example above the monsters are predetermined. So each time you run your code, the output is the same.\nCan you add `{ask}` commands to make the haunted house interactive and have the players choose the monsters they come across?\n"
                example_code_2: "```\nmonster_1 {is} _\nmonster_2 {is} _\nmonster_3 {is} _\n{print} You enter the haunted house.\n{print} Suddenly you see a monster_1\n{print} You run into the other room, but a monster_2 is waiting there for you!\n{print} Oh no! Quickly get to the kitchen.\n{print} But as you enter monster_3 attacks you!\n```\n"
    parrot:
        name: Parrot
        levels:
            2:
                story_text: "Create your own online pet parrot that will copy you!\n"
                example_code: "```\n{print} Im Hedy the parrot\nname {is} {ask} whats your name?\n{print} name\n{sleep}\n{print} squawk\n{sleep}\n{print} name\n```\n"
                start_code: '{print} Im Hedy the parrot!'
                story_text_2: "### Exercise\nYou can use variables to make the parrot say more than only your name. Can you complete this code?\n"
            1:
                story_text: "Create your own online pet parrot that will copy you!\n"
                example_code: "```\n{print} Im Hedy the parrot\n{ask} whats your name?\n{echo}\n{echo}\n```\n"
                start_code: '{print} Im Hedy the parrot'
                example_code_2: "```\n{print} Im Hedy the parrot\n{ask} _\n{echo}\n{echo}\n"
                story_text_2: "### Exercise\nCan you make the parrot ask a different question? Fill in the blanks in the example!\n"
            3:
                example_code: "```\nwords {is} squawk, Hedy\n{print} Train your parrot!\nnew_word {is} {ask} Which word do you want to teach them?\n{add} new_word {to_list} words\n{print} 🧒 Say new_word , Hedy!\n{print} 🦜 words {at} {random}\n```\n"
                story_text: "Teach your parrot a new word with `{add}`.\n"
                start_code: '# place your code here'
            5:
                story_text: "Reward your parrot {if} it says the correct word!\n"
                example_code: "```\nwords {is} squawk, Hedy\n{print} 'Train your parrot!'\nnew_word {is} {ask} 'Which word do you want to teach them?'\n{add} new_word {to_list} words\nsaid_word {is} words {at} {random}\n{print} '🧒 Say ' new_word ', Hedy!'\n{print} '🦜 ' said_word\n{if} said_word {is} new_word {print} '🧒 Great job, Hedy! 🍪'\n{else} {print} '🧒 No, Hedy! Say ' new_word\n```\n"
                start_code: '# place your code here'
            4:
                story_text: "In this level we have to use quotation marks with the commands `{ask}` and `{print}`.\nCan you complete the code by adding quotation marks?\n"
                start_code: '# Write your code here'
                example_code: "```\nwords {is} squawk, Hedy\n{print} _ Train your parrot! _\nnew_word {is} {ask} _ Which word do you want to teach them? _\n{add} new_word {to_list} words\n{print} _ 🧒 Say _ new_word _, Hedy!_\n{print} _ 🦜 _ words {at} {random}\n```\n"
        description: Create your own online pet parrot that will copy you!
        default_save_name: Parrot
    piggybank:
        name: Piggy Bank
        description: Count your pocketmoney!
        levels:
            14:
                story_text: "In this level you can let Hedy tell you {if} you have saved up enough money!\n"
                example_code: "```\nmoney = {ask} 'How much money have you saved?'\nwish = {ask} 'How much money do you need?'\nallowance = {ask} 'How much pocket money do you get each week?'\nto_save = wish - money\nweeks = to_save / allowance\n{if} wish > money\n    {print} 'You need to save up some more!'\n    {print} 'Youll need ' weeks ' more weeks.'\n{else}\n    {print} 'Great! You have enough'\n    {print} 'Lets go shopping!'\n```\n"
                start_code: '# place your code here'
            12:
                story_text: "In this adventure you learn how to make a digital piggy bank, to calculate how much money you have and how long you need to save up to buy what you want!\n"
                example_code: "```\n{print} 'The digital piggy bank'\nwish = {ask} 'What would you like to buy?'\nprice = {ask} 'How much does that cost?'\nsaved = {ask} 'How much money have you saved already?'\nallowance = {ask} 'How much pocket money do you get per week?'\nto_save = price - saved\nweeks = to_save / allowance\n{print} 'You can buy a ' wish ' in ' weeks ' weeks.'\n"
                start_code: '# place your code here'
        default_save_name: Piggy Bank
    quizmaster:
        description: Make your own quiz!
        default_save_name: Quizmaster
        name: Quizmaster
        levels:
            14:
                story_text: "In this adventure you can make your own quiz! Fill in the blanks, add more questions and enjoy your own quiz!\nYou can make a quiz about anything you like: your hobby, your favorite animal, your favorite book or anything at all!\n"
                example_code: "```\n{print} 'Make your own quiz'\npoints_a = 0\npoints_b = 0\n{print} 'Question'\n{print} 'Answer option A'\n{print} 'Answer option B'\nanswer = {ask} 'Which answer?'\n{if} answer == 'A'\n    points_a = points_a + 1\n{if} answer == 'B'\n    points_b = points_b + 1\n{print} 'End of the quiz!'\n{print} 'Lets see the results!'\n{if} points_a > points_b\n    {print} 'You belong to the A club'\n{if} points_b > points_a\n    {print} 'You belong to the B club'\n```\n"
                start_code: '# place your code here'
    language:
        name: "Language"
        description: "Practice words in a foreign language"
        default_save_name: "Language"
        levels:
            5:
                story_text: |
                    Make your own program to practice your vocabulary in a new language.
                example_code: |
                    ```
                    {print} 'Learn French!'
                    cat {is} {ask} '🐱'
                    {if} cat {is} chat {print} 'Terrific!'
                    {else} {print} 'No, cat is chat'
                    frog {is} {ask} '🐸'
                    {if} frog {is} grenouille {print} 'Super!'
                    {else} {print} 'No, frog is grenouille'
                    ```
                start_code: "# place your code here"
            16:
                story_text: |
                    Make your own program to practice your vocabulary in a new language.

                example_code: |
                    ```
                    french_words = ['bonjour', 'ordinateur', 'pomme de terre']
                    translation = ['hello', 'computer', 'potato']
                    score = 0
                    {for} i {in} {range} 1 {to} 3
                        answer = {ask} 'What does ' french_words[i] ' mean?'
                        correct = translation[i]
                        {if} answer == correct
                            {print} 'Correct!'
                            score = score + 1
                        {else}
                            {print} 'Wrong, ' french_words[i] ' means ' translation[i]
                    {print} 'You gave ' score ' correct answers.'
                    ```
                start_code: "# place your code here"
    secret:
        default_save_name: language
        levels:
            12:
                story_text: "In this adventure you can create your own super spy code. Encode a message that only the right agent can decipher.\nIf the enemy tries to crack the code, they will get some false info to waste their time.\n"
                example_code: "```\nname is ask 'What is your name?'\nif name is 'Agent007'\n    a is 'Go to the airport '\nelse\n    a is 'Go to the trainstation '\npassword is ask 'What is the password?'\nif password is 'TOPSECRET'\n    b is 'tomorrow at 02.00'\nelse\n    b is 'today at 10.00'\nprint a + b\n```\n"
                start_code: '# place your code here'
            13:
                story_text: "The code you made in the previous level can be made a lot easier in this one with the `{and}` command.\n"
                example_code: "```\nname is ask 'What is your name?'\npassword is ask 'What is your password?'\nif name is 'Agent007' and password is 'TOPSECRET'\n    print 'Go to the airport at 02.00'\nelse\n    print 'Go to the trainstation at 10.00'\n ```\n"
                start_code: '# place your code here'
        name: SuperSpy
        description: Make your own spy code
    tic:
        name: Tic Tac Toe
        description: Play a game of Tic Tac Toe!
        levels:
            13:
                start_code: '# place your code here'
                story_text: "In this adventure you can program a game of Tic Tac Toe. You can play with two people. Taking turns, you pick a number of the spot (1 - 9) you want to put your sign (x or o) on.\nThe first player that gets 3 in a row (horizontally, vertically or diagonally) wins!\nHave fun!\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game {is} 'on'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice {is} 1\n                spot_1 = sign\n            {if} choice {is} 2\n                spot_2 = sign\n            {if} choice {is} 3\n                spot_3 = sign\n            {if} choice {is} 4\n                spot_4 = sign\n            {if} choice {is} 5\n                spot_5 = sign\n            {if} choice {is} 6\n                spot_6 = sign\n            {if} choice {is} 7\n                spot_7 = sign\n            {if} choice {is} 8\n                spot_8 = sign\n            {if} choice {is} 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner {is} 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign {is} 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
            14:
                start_code: '# place your code here'
                story_text: "In the previous levels you've made a tic tac toe game. Now you've learned how to use the = sign, the == sign and the != sign.\nYou can use this knowledge in your new Taic Tac Toe game, like this:\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game != 'over'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice == 1\n                spot_1 = sign\n            {if} choice == 2\n                spot_2 = sign\n            {if} choice == 3\n                spot_3 = sign\n            {if} choice == 4\n                spot_4 = sign\n            {if} choice == 5\n                spot_5 = sign\n            {if} choice == 6\n                spot_6 = sign\n            {if} choice == 7\n                spot_7 = sign\n            {if} choice == 8\n                spot_8 = sign\n            {if} choice == 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner == 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign == 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
            15:
                start_code: '# place your code here'
                story_text: "In this level you can improve your Tic Tac Toe game with the {while} loop/ With this loop you can combine the `{if} game != 'over'` and the `{for} i {in} {range} 1 to 9` into one simple line.\nCheck it out:\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over'\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots\n        {remove} choice {from} open_spots\n        {if} choice == 1\n            spot_1 = sign\n        {if} choice == 2\n            spot_2 = sign\n        {if} choice == 3\n            spot_3 = sign\n        {if} choice == 4\n            spot_4 = sign\n        {if} choice == 5\n            spot_5 = sign\n        {if} choice == 6\n            spot_6 = sign\n        {if} choice == 7\n            spot_7 = sign\n        {if} choice == 8\n            spot_8 = sign\n        {if} choice == 9\n            spot_9 = sign\n    {else}\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    winner = {ask} 'Did you win?'\n    {if} winner == 'yes'\n        {print} 'Good job, player ' sign '!'\n        game = 'over'\n    {else}\n        {if} sign == 'x'\n            sign = 'o'\n        {else}\n            sign = 'x'\n```\n"
            17:
                example_code: "```\nsign = 'x'\nopen_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over':\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots:\n        {remove} choice {from} open_spots\n        {if} choice == 1:\n            spot_1 = sign\n        {if} choice == 2:\n            spot_2 = sign\n        {if} choice == 3:\n            spot_3 = sign\n        {if} choice == 4:\n            spot_4 = sign\n        {if} choice == 5:\n            spot_5 = sign\n        {if} choice == 6:\n            spot_6 = sign\n        {if} choice == 7:\n            spot_7 = sign\n        {if} choice == 8:\n            spot_8 = sign\n        {if} choice == 9:\n            spot_9 = sign\n    {else}:\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {else}:\n        {if} sign == 'x':\n            sign = 'o'\n        {else}:\n            sign = 'x'\n```\n"
                start_code: '# place your code here'
                story_text: "In the previous levels the tic tac toe game had an annoying feature. After every move, you had to fill in yourself if you had won or not.\nThis made the game playable, but also quite slow. In this level we have learned the `{elif}` command, that could solve that problem.\nTo use the {elif} to let Hedy check whether or not a player has won is fun, but it also requires a fair amount of extra lines.\n\nIn the example code you see that we added the requirements to win (3 spots in a row horizontally, vertically or diagonally).\nYou can find them in line 46 to 69. You can see that each time the requirement is met (so if a player has won) the variable game is set to 'over'.\nThis means that the {while} loop will be stopped and the game ends.\n"
        default_save_name: Tic
    blackjack:
        name: Blackjack
        description: Try to get as close to 21 as you can
        levels:
            17:
                start_code: '# place your code here'
                story_text: "Blackjack is a simple game of cards in which you have to get as close to 21 points as possible. You get two cards. Each card is worth their numeral value, and the face cards (Jack, Queen and King) are worth 10 points.\nThe Ace is worth either 1 or 11 points (you can choose). The dealer, your opponent, also gets two cards.\nIf you want, you can get another card, and its points will be added to your total. The dealer can also choose to take another card.\nBut be careful not to get more than 21 points, because if you do, you lose!\nThe player who gets closest to 21, without going over it, wins!\n\nHave fun!\n"
                example_code: "```\n{print} 'BLACKJACK'\ncards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen','King', 'Ace']\npoints = 0\ndealer_points = 0\ncard_1 = cards[{random}]\ncard_2 = cards[{random}]\ncard_3 = cards [{random}]\ndealer_card_1 = cards[{random}]\ndealer_card_2 = cards[{random}]\ndealer_card_3 = cards[{random}]\n# Points for card 1\n{if} card_1 == 'Jack' {or} card_1 == 'Queen' {or} card_1 == 'King':\n    points = points + 10\n{elif} card_1 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_1\n# Points for card 2\n{if} card_2 == 'Jack' {or} card_2 == 'Queen' {or} card_2 == 'King':\n    points = points + 10\n{elif} card_2 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_2\n# Points for dealer card 1\n{if} dealer_card_1 == 'Jack' {or} dealer_card_1 == 'Queen' {or} dealer_card_1 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_1 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_1\n# Points for dealer card 2\n{if} dealer_card_2 == 'Jack' {or} dealer_card_2 == 'Queen' {or} dealer_card_2 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_2 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_2\n# Two Aces\n{if} card_1 == 'Ace' {and} card_2 == 'Ace':\n    points = 12\n{if} dealer_card_1 == 'Ace' {and} dealer_card_2 == 'Ace':\n    dealer_points = 12\n# Scoreboard\n{print} 'You have a ' card_1 ' and a ' card_2 ' (' points ' points)'\n{print} 'The dealer has a ' dealer_card_1 ' and a ' dealer_card_2 ' (' dealer_points ' points)'\n# Extra card for the player\nhit = {ask} 'Do you want an extra card?'\n{if} hit == 'yes':\n    {if} card_3 == 'Jack' {or} card_3 == 'Queen' {or} card_3 == 'King':\n        points = points + 10\n    {elif} card_3 == 'Ace':\n        {if} points > 11:\n            points = points + 11\n        {else}:\n            points = points + 1\n    {else}:\n        points = points + card_3\n    print 'You get an extra ' card_3 ' (' points ' points)'\n{else}:\n    print 'No extra cards'\n# Winner\n{if} points > 21 {or} dealer_points > points {or} dealer_points == 21:\n    {print} 'You lose'\n{elif} dealer_points < 17:\n    {print} 'The dealer takes an extra card. It is a... ' dealer_card_3\n    {if} dealer_card_3 == 'Jack' {or} dealer_card_3 == 'Queen' {or} dealer_card_3 == 'King':\n        dealer_points = dealer_points + 10\n    {elif} dealer_card_3 == 'Ace':\n        {if} dealer_points < 11:\n            dealer_points = dealer_points + 11\n        {else}:\n            dealer_points = dealer_points + 1\n    {else}:\n        dealer_points = dealer_points + dealer_card_3\n    {print} 'The dealer has ' dealer_points ' points now'\n    {if} dealer_points < 21 {and} dealer_points > points:\n        {print} 'You lose'\n    {else}:\n        {print} 'You win'\n{elif} points > dealer_points {and} points < 21:\n    {print} 'You win!'\n```\n"
        default_save_name: Blackjack
    years:
        name: New Year's
        levels:
            11:
                example_code: "```\nfor _ in _ 10 to 1\n    {print} i\n{print} 'Happy New Year!'\n```\n"
                story_text: "In this level you can use the `{for} i {in} {range}` command to countdown to the New Year.\n\n### Exercise\nFill in the blanks and make the code work!\n"
                start_code: '# place your code here'
        description: Countdown to the new year!
        default_save_name: New Year's Countdown
    pressit:
        levels:
            5:
                story_text_2: "You can also link turtle commands to keys.\n\n### Exercise\nCopy the lines a few times so you can create a larger drawing.\n"
                story_text: "In this level there is another new keyword: `{pressed}`!\nWith `{pressed}` you can use keys on your keyboard to control what lines are used.\n\n### Exercise\nLook at the example and add one more line of code that reacts to a key press.\n"
                start_code: '# place your code here'
                example_code: "```\n{print} 'Do you want a good (g) or bad (b) ending?'\n{if} g {is} {pressed} {print} 'They lived happily ever after ❤'\n{else} {print} 'The prince was eaten by a hippopotamus 😭'\n```\n"
                example_code_2: "```\n{if} y {is} {pressed} {forward} 15\n{else} {turn} 90\n```\n"
            7:
                example_code: "```\n{if} x {is} {pressed} {forward} 15 {else} {turn} 90\n```\n"
                story_text: "Now that you have learned about `{repeat}`, we can press keys multiple times.\nYou can use it to make the turtle walk forward and turn.\n\n### Exercise\nThe code you have seen in level 5 only checks the key once. Copy the example code and add a `{repeat}` to it, so that you can press the keys many times.\nUse this code to draw something nice.\n"
                start_code: '# place your code here'
            9:
                story_text: "Now that you know how to combine statements, you can create a touch type tool with `{pressed}`.\n\n### Exercise\nFinish the code. Each time a random letter should be chosen, which you have to press. You get a point for a correct press, and and two points deduction for a wrong press.\n**(extra)** Clear the screen after each letter, and show the user how many points they have scored.\n"
                example_code: "```\npoints = 0\nletters = a, b, c, d, e\n{repeat} 10 {times}\n    letter = _ _ _\n    {print} 'Press the letter ' letter\n    {if} letter {is} {pressed}\n    _\n    _\n    _\n```\n"
                start_code: '# place your code here'
        name: Key presses
        description: Try linking a keyboard key to a command!
        default_save_name: Pressed
    print_command:
        name: print
        description: Introduction print command
        default_save_name: print
        levels:
            1:
                story_text: "## The print command\nYou can print text to the screen using the `{print}` command.\n"
                story_text_2: "### Exercise\nIn Hedy you will find exercises in every adventure. An exercise allows you to practise the new commands and concepts, and lets you give your own twist to the example codes.\nIn this exercise you will see a pink blank space. You have to fill something in the place of the blank space before the code can be ran.\n\nFill in the `{print}` command in the blank space and then add five more lines of code. Each line has to start with a `{print}` command.\nHave fun!\n"
                example_code: "```\n{print} Hi there, programmer!\n{print} Welcome to Hedy!\n```\n"
                example_code_2: "```\n_ Hello!\n```\n"
                start_code: "{print} Welcome to Hedy!\n"
            17:
                start_code: "{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Ready or not, here I come!'"
                story_text: "Now we are going to change indentation a little bit. Every time that we need an indentation, we need `:` at the line before the indentation.\n"
                example_code: "```\n{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Ready or not, here I come!'\n```\n"
            18:
                start_code: "name = 'Hedy'\n{print}('My name is ', name)"
                story_text: "We arrived at real Python code! That means we need to use parentheses with `{print}` and `{range}` from now on.\nIt also means you can use Hedy code from this level in any Python environment as long as you use the English commands. If you haven't until now, you can switch the toggle in the commands menu to do so."
                example_code: "```\n{print}('Hello!')\n{for} i {in} {range}(1, 10):\n    {print}('This is line ', i)\n```\n"
                story_text_2: If you want to print more than one item, you need to separate them by commas.
                example_code_2: "```\ntemperature = 25\n{print}('It is ', temperature, ' degrees outside')\n```\n"
                story_text_3: The final change we will need to make to get Python code is changing `{ask}` into `{input}`.
                example_code_3: "```\n{print}('My name is Hedy!')\nname = {input}('What is your name?')\n{print}('So your name is ', name)\n```\n"
    random_command:
        levels:
            16:
                start_code: "fruit = ['apple', 'banana', 'cherry']\n{print} fruit[random]"
                story_text: "We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.\nWe use square brackets to point out a place in a list. The {at} {random} command can not be used anymore."
                example_code: "```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
            3:
                story_text: "## At random\nIn this level you can make a list using the `{is}` command. You can let the computer choose a random item from that list. You do that with `{at} {random}`.\n"
                example_code: "```\nanimals {is} dogs, cats, kangaroos\n{print} animals {at} {random}\n```\n"
                story_text_2: "You can use the `{at} {random}` command in a sentence as well.\n"
                example_code_2: "```\nfood {is} sandwich, slice of pizza, salad, burrito\n{print} I am going to have a food {at} {random} for lunch.\n```\n"
                start_code: "animals {is} dog, cat, kangaroo\n{print} animals {at} {random}\n"
                story_text_3: "### Exercise\nTry out the `{at} {random}` command by making your own gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!\nCan you do it? We have already put the first lines into the example code.\n"
                example_code_3: "```\n{print} The big gameshow!\n{print} There are 3 suitcases in front of you...\nchosen {is} {ask} Which suitcase do you choose?\nprices {is} _\n_\n```\n"
        name: random
        description: introducing at random command
        default_save_name: random_command
    sleep_command:
        name: sleep
        description: introducing sleep command
        default_save_name: sleep_command
        levels:
            2:
                story_text: "## The sleep command\nAnother new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.\n"
                example_code: "```\n{print} My favorite colour is...\n{sleep} 2\n{print} green!\n```\n"
                start_code: "{print} My favorite colour is...\n{sleep} 2\n{print} green!"
    if_command:
        levels:
            8:
                story_text: "## If... Else...\nYou have learned to repeat a block of lines of code after a `{repeat}` command.\nNow you can also use indentation to make blocks after a {if} or {else} command.\nCheck out the example code.\n\n### Exercise\nAdd an {else} command to the example code. Make a block of line using indentation. You do this by starting each line with 4 spaces.\n"
                start_code: "name {is} {ask} 'What is your name?'\n{if} name {is} Hedy\n    {print} 'Welcome Hedy'\n    {print} 'You can play on your computer!'\n"
                example_code: "```\nname {is} {ask} 'What is your name?'\n{if} name {is} Hedy\n    {print} 'Welcome Hedy'\n    {print} 'You can play on your computer!'\n```\n"
            5:
                story_text: "## If... else....\nIn level 5 there is something new, the `{if}`! With the `{if}` you can choose between two different options.\nThis code prints nice if you enter Hedy as a name, and boo! if you enter something else.\n`{ask}` and `{print}` still work like they did in level 4.\n"
                story_text_2: "Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:\n"
                example_code_2: "```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice'\n{else} {print} 'boo!'\n```\n"
                story_text_3: "### Exercise\nTry to create your own code with `{if}` and `{else}`. You can use the example code if you want.\n"
                example_code_3: "```\nanswer {is} {ask} '2 + 2 = ?'\n_ _ _ 4 _ 'Great job!'\n_ _ 'No 2 + 2 = 4'\n```\n"
                example_code: "```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'\n```\n"
                start_code: "name {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice'\n{else} {print} 'boo!'"
        default_save_name: if_command
        name: if else
        description: Introducing the if command
    quotation_marks:
        levels:
            12:
                story_text: "**All texts need to be in quotation marks**\nFor this level on you will also have to use quotation marks when storing a text with `=`:\n"
                example_code: "```\nname = 'Hedy the Robot'\n{print} 'Hello ' name\n```\n"
                story_text_2: "**All items in lists need quotation marks too**\nLists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.\nThis allows you to save two words as 1 item on the list, for example 'Iron Man'.\n"
                example_code_2: "```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n"
                story_text_3: "**All text after `{if}` comparisons need quotation marks too**\n"
                example_code_3: "```\nname = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n"
                story_text_4: "**Numbers don't need quotation marks**\nFor numbers, you do not use quotation marks in the `=`:\n"
                example_code_4: "```\nscore = 25\n{print} 'You got ' score\n```\n"
                start_code: "name = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'"
            4:
                story_text_2: "## Contractions\nImportant! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.\nMake sure to remove those apostrophes and change the spelling to I am or What is.\nCheck out the example code to see the wrong way of using apostrophes.\n"
                example_code: "```\n{print} 'You need to use quotation marks from now on!'\nanswer {is} {ask} 'What do we need to use from now on?'\n{print} 'We need to use ' answer\n```\n"
                story_text: "## 'Quotation marks'\nIn level 4 `{ask}` and `{print}` have changed.\nYou must put text that you want to print between quotation marks.\nThis is useful, because now you can print all the words you want. Also the words you used to store something with `{is}`.\nMost programming languages also use quotation marks when printing, so we are also getting a step closer to real programming!\n"
                example_code_2: "```\n_ This is the wrong way of using apostrophes _\n{print} 'I'm babysitting my sister's kids'\n{print} 'What's more fun than that?'\n```\n"
                start_code: "{print} 'You need to use quotation marks from now on!'\nanswer {is} {ask} 'What do we need to use from now on?'\n{print} 'We need to use ' answer"
        name: "'quotation marks'"
        description: Introduction quotation marks
        default_save_name: quotation_marks
    repeat_command:
        name: Repeat
        default_save_name: repeat_command
        description: repeat command
        levels:
            8:
                example_code: "```\n{repeat} 5 {times}\n    {print} 'Hello everyone'\n    {print} 'This is all repeated 5 times'\n```\n"
                start_code: "{repeat} 5 {times}\n    {print} 'Hello everyone'\n    {print} 'This will be printed 5 times'"
                story_text: "### Repeat commands and indentation\nIn this level you can repeat multiple lines of code with only 1 repeat command.\nYou do this by making a block of lines that you want to repeat.\nThe lines in this block will need **indentation** .\nThat means putting four spaces at the beginning of each line. You will also have to indent when you just want to create a block of one line.\n"
            7:
                story_text: "## Repeat! Repeat! Repeat!\nLevel 7 adds the `{repeat}` command.  `{repeat}` can be used to execute one line of code multiple times. Like this:\n\n### Exercise\nPlay around with the repeat command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?\n"
                example_code: "```\n{repeat} 3 {times} {print} 'Hedy is fun!'\n```\n"
                start_code: "{print} 'happy birthday to you'\n{print} 'happy birthday to you'\n{print} 'happy birthday dear Hedy'\n{print} 'happy birthday to you'\n"
            9:
                example_code: "```\n{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    {else}\n        {print} 'pizza is better'\n```\n"
                start_code: "{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    {else}\n        {print} 'pizza is better'"
                story_text: "In this level you can not only use multiple lines with `{if}` and `{repeat}`, but you can also put them together!\nIn the example you see an `{if}` command within a `{repeat}` command. It is also allowed the other way around, and an `{if}` is also allowed in an `{if}` and a `{repeat}` in a `{repeat}`.\nGive it a try!\n"
    repeat_command_2:
        name: Repeat 2
        levels:
            8:
                example_code: "```\n_ {print} 'Do you know the muffin man?'\n_ {repeat} 2 {times}\n_ {print} 'The muffin man'\n_ {print} 'Do you know the muffin man, who lives on Drury Lane?'\n```\n"
                start_code: "{repeat} 3 {times}\n    {print} 'This line will be repeated...'\n    {print} 'This one too...'\n{print} 'but this one will not!'"
                story_text: "### In the block or not?\nIn this level you have to think carefully which lines of code should be in the block and which shouldn't.\nFor example: If you want to sing the song *the muffin man*. You only want the line with 'the muffin man' to be repeated twice.\nThis means the last line shouldn't start with indentation as it doesn't belong to the block.\nIf you do start the last line with indentation the song will turn out wrong.\n\n## Exercise\nEach line in the example code starts with a blank. Remove the blanks and try to figure out which line need indentation and which don't to make the muffin man song.\n"
            7:
                story_text: "## Repeat with other commands and with variables\nYou have practiced the `{repeat}` command in combination with the `{print}` command now, but did you know you could also use other commands with `{repeat}` ?\nIn this example code you can see that `{repeat}` can also be used with an `{ask}`, `{if}` or `{else}` command.\n"
                start_code: "{repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'\n{if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'\n{else} {repeat} 3 {times} {print} 'You have learned something new!'"
                story_text_2: "Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.\nThen, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.\n"
                example_code: "```\n{repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'\n{if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'\n{else} {repeat} 3 {times} {print} 'You have learned something new!'\n```\n"
                example_code_2: "```\n{print} 'Yay! It is your birthday!'\nage = {ask} 'How old are you now?'\n{repeat} age {times} {print} 'Hip Hip Hurray!'\n```\n"
        description: repeat command 2
        default_save_name: repeat_command_2
    for_command:
        name: for
        description: for command
        default_save_name: for
        levels:
            10:
                start_code: "animals {is} dog, cat, blobfish\n{for} animal {in} animals\n    {print} 'I love ' animal"
                story_text: "## For\nIn this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.\n`{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with 4 spaces."
                example_code: "```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n    {print} 'I love ' animal\n```\n"
            11:
                example_code: "```\n{for} counter {in} {range} 1 {to} 5\n    {print} counter\n```\n"
                start_code: "{for} counter {in} {range} 1 {to} 5\n    {print} counter"
                story_text: "In this level, we add a new form of the `{for}`. In earlier levels, we used `{for}` with a list, but we can also use `{for}` with numbers.\nWe do that by adding a variable name, followed by  `{in}` `{range}`. We then write the number to start at, `{to}` and the number to end at.\n\nTry the example to see what happens! In this level again, you will need to use indentations in lines below the `{for}` statements."
    maths:
        levels:
            6:
                start_code: "{print} '5 times 5 is ' 5 * 5"
                example_code_2: "```\nname = Hedy\nanswer = 20 + 4\n```\n"
                example_code: "```\n{print} '5 plus 5 is ' 5 + 5\n{print} '5 minus 5 is ' 5 - 5\n{print} '5 times 5 is ' 5 * 5\n```\n"
                story_text_2: "We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:\n"
                story_text: "## 1 + 1\nIn this level you learn something new: you can now also calculate.\n\nThe plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.\n\nThe times is a bit different, because there is no times symbol on your keyboard. Just search, there really isn't!\nThat is why we multiply with the asterisk above 8: `5 * 5`. Read that as \"5 times 5\" that helps you remember it best.\n"
            12:
                start_code: "{print} 'decimal numbers now need to use a dot'\n{print} 2.5 + 2.5"
                story_text: "**Decimal numbers**\nSo far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers."
                example_code: "```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n"
        name: maths
        description: Introducing maths
        default_save_name: maths
    and_or_command:
        levels:
            13:
                example_code: "```\nname = {ask} 'what is your name?'\nage = {ask} 'what is your age?'\n{if} name {is} 'Hedy' {and} age {is} 2\n    {print} 'You are the real Hedy!'\n```\n"
                start_code: "name = {ask} 'what is your name?'\nage = {ask} 'what is your age?'\n{if} name {is} 'Hedy' {and} age {is} 2\n    {print} 'You are the real Hedy!'"
                story_text: "We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two `{if}`s but can use `{and}` and `{or}`.\n\nIf you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct."
        name: and or
        description: introducing and or
        default_save_name: and or
    rock_2:
        name: Rock, paper, scissors 2
        description: Part 2 of rock, paper, scissors
        default_save_name: rock_2
        levels:
            2:
                story_text: "Now that you have learned how to use the `{ask} command, you can make your rock, paper, scissors code interavtive too!\n\n### Exercise\nMake the rock, paper, scissors code interactive by adding the `{ask}` command and a question to your rock, paper, scissors code.\n"
                example_code: "```\nchoice is _\n{print} I choose choice\n```\n"
                start_code: "# place your code here"
    harry_potter:
        name: Harry Potter
        levels:
            10:
                story_text: "### Exercise\nWe can also make a Harry Potter themed fortune teller. Fill in blanks such that 9 lines are printed.\n**Extra** Change the theme of the fortune teller into something else, such as your favorite book, film or tv show.\n"
                start_code: '# place your code here'
                example_code: "```\nhouses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw\nsubjects = potions, defence against the dark arts, charms, transfiguration\nfears = Voldemort, spiders, failing your OWL test\nnames = Harry, Ron, Hermione\n_\n_ {print} name ' is placed in ' houses {at} {random}\n_ {print} name ' is great at ' subjects {at} {random}\n_ {print} name 's greatest fear is ' fears {at} {random}\n```\n"
        description: Harry Potter adventures
        default_save_name: Harry Potter
    ask_command:
        name: "{ask}"
        description: Introduction ask command
        default_save_name: ask_command
        levels:
            1:
                story_text: "## The ask command\nNow that you can use the `{print}` command, you are ready to learn the next command: `{ask}`. With the `{ask}` command, you can ask a question. Check it out:\n"
                example_code: "```\n{print} Hello!\n{ask} What is your name?\n```\n"
                story_text_2: "## The echo command\nIf you want the computer to repeat the answer back to you, you can use the `{echo}` command. Mind that the answer is echoed back at the end of the sentence, so it this example after hello.\n"
                story_text_3: "### Exercise\nTry out the `{ask}` and `{echo}` commands. Firstly, fill in the blanks to make this program work.\nThen ask 2 more questions using the `{ask}` command, after each `{ask}` use an `{echo}` to print the answer on the screen.\n"
                example_code_2: "```\n{print} Hello!\n{ask} What is your name?\n{echo} hello\n```\n"
                example_code_3: "```\n_ How are you doing?\n_\n```\n"
                start_code: "{print} Hello!\n{ask} What is your name?\n{echo} hello\n"
            2:
                story_text: "## The ask command\nNow that we can use **variables** in our codes, we no longer need the `{echo}` command.\nWe can use variables to store the answers to our questions and this way we can use the answer to multiple questions in our codes.\nCheck it out:\n\nThis way your code is becoming interactive!\n"
                example_code: "```\nname {is} {ask} What is your name?\n{print} Hello name\nage {is} {ask} How old are you?\n{print} name is age years old.\n```\n"
                story_text_2: "### Exercise\nIn the previous tab you have practised with setting variables with the `{is}` command.\nYou have created at least 3 variables and used them with a print command.\nNow, instead of setting the variables we want you to make the variables interactive, like we did in our example.\n\nCopy your code from the previous tab and make the variables interactive by using `{ask}` commands.\n"
                example_code_2: "```\nfavorite_animals is ask What is your favorite animal?\nprint I like favorite_animals\n```\n"
                start_code: "name {is} {ask} What is your name?\n{print} Hello name\nage {is} {ask} How old are you?\n{print} name is age years old."
    is_command:
        name: is
        description: introducing is command
        default_save_name: is_command
        levels:
            2:
                story_text: "## Variables\nYou can name a word with `{is}`. This is called a **variable**. In this example we made a variable called name and a variable called age. You can use the word name anywhere in your code and it will be replaced by Hedy, like this:\n"
                example_code: "```\nname {is} Hedy\nage {is} 15\n{print} name is age years old\n```\n"
                story_text_2: "### Exercise\nTime to make your own variables!\nIn the example code we made an example of the variable `favorite_animals`. In line 1 the variable is set, and in line 2 we haved used the variable in a print command.\nFirstly, finish our example by filling in your favorite animal in the blanks. Then make at least 3 of these codes yourself. Pick a variable, and set the variable with the {is} command. Then use it with a {print} command, just like we did.\n"
                example_code_2: "```\nfavorite_animals is _\n{print} I like favorite_animals\n```\n"
                start_code: "name {is} Hedy\nage {is} 15\n{print} name is age years old"
            14:
                start_code: "age = {ask} 'How old are you?'\n{if} age < 13\n    {print} 'You are younger than me!'\n{else}\n    {print} 'You are older than me!'"
                story_text: "We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.\nThe `<` checks if the first number is smaller than the second, for example age `<` 12 checks if age is smaller than 12.\nIf you want to check if the first number is smaller or equal to the second, you can use `<=`, for example age `<=` 11.\nThe `>` checks if the first number is bigger than the second, for example points `>` 10 checks if points is larger than 10.\nIf you want to check if the first number is bigger or equal to the second, you can use `>=`, for example points `>=` 11.\nYou use these comparisons in an `{if}`, like this:\n"
                example_code: "```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n"
                story_text_2: "From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:\n"
                example_code_2: "```\nname = {ask} 'What is your name?'\n{if} name == 'Hedy'\n    {print} 'You are cool!'\n```\n"
                story_text_3: "You can also compare if something is *not* equal to something else using `!=` like this:\n"
                example_code_3: "```\nname = {ask} 'What is your name?'\n{if} name != 'Hedy'\n    {print} 'You are not Hedy'\n```\n"
    add_remove_command:
        name: add and remove
        description: introducing add to and remove from
        default_save_name: add_remove_command
        levels:
            3:
                story_text: "## Add to\nYou can add items to the list with the `{add} {to}` command. To add an item to a list you can simply type: `{add} penguin {to} animals` or you can use the `{ask}` command like in the example code.\n"
                example_code: "```\nanimals {is} dog, cat, kangaroo\nlike {is} {ask} What is your favorite animal?\n{add} like {to_list} animals\n{print} I choose animals {at} {random}\n```\n"
                story_text_2: "## Remove from\nIf you can add items to a list, of course you can also take them off. This is done with the `{remove} {from}` command.\n"
                example_code_2: "```\nanimals {is} dog, cat, kangaroo\ndislike {is} {ask} What animal do you not like?\n{remove} dislike {from} animals\n{print} I choose animals {at} {random}\n```\n"
                example_code_3: "```\n{print} Mystery milkshake\nflavors {is} strawberry, chocolate, vanilla\nhope {is} {ask} What flavor are you hoping for?\n_\nallergies {is} {ask} Are you allergic to any flavors?\n_\n{print} You get a flavors {at} {random} milkshake\n```\n"
                start_code: "animals {is} dog, cat, kangaroo\nlike {is} {ask} What is your favorite animal?\n{add} like {to_list} animals\ndislike {is} {ask} What animal do you not like?\n{remove} dislike {from} animals\n{print} I choose animals {at} {random}"
                story_text_3: "### Exercise\nTry out the new commands in this virtual restaurant. Add the flavor the player is hpoing for to the list and remove the flavors they are allergic to.\n"
    in_command:
        levels:
            5:
                example_code: "```\npretty_colors {is} green, yellow\nfavorite_color {is} {ask} 'What is your favorite color?'\n{if} favorite_color {in} pretty_colors {print} 'pretty!'\n{else} {print} 'meh'\n```\n"
                story_text: "## Lists\nWhen we want to check if something is in a list, we can now use the `{in}` command.\nThis code prints pretty! if you choose green or yellow, and meh otherwise.\n"
                example_code_2: "```\nanimals is dog, cow, sheep\nanswer is ask 'What is your favorite animal?'\n_ answer _ animals _ 'Mine too!'\n_ _ 'My favorite animals are dogs, cows and sheep'\n```\n"
                start_code: "pretty_colors {is} green, yellow\nfavorite_color {is} {ask} 'What is your favorite color?'\n{if} favorite_color {in} pretty_colors {print} 'pretty!'\n{else} {print} 'meh'"
                story_text_2: "### Exercise\nFinish the example code by filling in the blanks with commands that you've learned.\nWhen you've finished the code, try to create a code of your own and use a question that you've thought of yourself.\n"
        name: in
        description: Introducing the in command
        default_save_name: in_command
    while_command:
        description: while
        default_save_name: while_command
        name: while
        levels:
            15:
                start_code: "answer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'"
                example_code: "```\nanswer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'\n```\n"
                story_text: "We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.\nSo don't forget to change the value in the loop.\n\nIn the example code, we continue until a correct answer has been given.\nIf the correct answer is never given, the loop never ends!"
    elif_command:
        name: elif
        description: elif
        default_save_name: elif
        levels:
            17:
                story_text: "In this level you can also use a new command: `{elif}`. `{elif}` is short for `{else}` `{if}` and you need it when you want to make 3 (or more!) options.\nCheck it out!\n"
                example_code: "```\nprices = ['1 million dollars', 'an apple pie', 'nothing']\nyour_price = prices[{random}]\n{print} 'You win ' your_price\n{if} your_price == '1 million dollars' :\n    {print} 'Yeah! You are rich!'\n{elif} your_price == 'an apple pie' :\n    {print} 'Lovely, an apple pie!'\n{else}:\n    {print} 'Better luck next time..'\n```\n"
                start_code: "prices = ['1 million dollars', 'an apple pie', 'nothing']\nyour_price = prices[{random}]\n{print} 'You win ' your_price\n{if} your_price == '1 million dollars' :\n    {print} 'Yeah! You are rich!'\n{elif} your_price == 'an apple pie' :\n    {print} 'Lovely, an apple pie!'\n{else}:\n    {print} 'Better luck next time..'"
