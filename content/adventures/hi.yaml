adventures:
    story:
        levels:
            4:
                example_code: |
                    ## рдЙрджрд╛рд╣рд░рдг рд╣реЗрдбреА рдХреЛрдб

                    ```
                    рдирд╛рдо {is} рд╣рдВрд╕
                    {print} 'рдореБрдЦреНрдп рдкрд╛рддреНрд░ рдХрд╛ рдирд╛рдо рд╣реИ' рдирд╛рдо
                    {print} рдирд╛рдо 'рдЕрдм рдЬрдВрдЧрд▓ рдореЗрдВ рдЪрд▓рдиреЗ рд╡рд╛рд▓рд╛ рд╣реИ'
                    {print} рдирд╛рдо 'рдереЛрдбрд╝рд╛ рдбрд░рд╛ рд╣реБрдЖ рд╣реИ'
                    рдЬрд╛рдирд╡рд░ {is} ЁЯжФ, ЁЯР┐, ЁЯжЙ, ЁЯжЗ
                    {print} 'рд╡рд╣ рдПрдХ рдЬрд╛рдирд╡рд░ рдХреА рдЖрд╡рд╛рдЬ рд╕реБрдирддрд╛ рд╣реИ рдЬреЛ рд╣реИ' рдЬрд╛рдирд╡рд░ {at} {random}
                    {print} рдирд╛рдо 'рдбрд░рддрд╛ рд╣реИ рдпрд╣ рдПрдХ рдкреНрд░реЗрддрд╡рд╛рдзрд┐рдд рдЬрдВрдЧрд▓ рд╣реИ'
                    ```
                start_code: "{print} 'рдЖрдкрдХреА рдХрд╣рд╛рдиреА рдпрд╣рд╛рдВ рдЫрдкреА рд╣реЛрдЧреА!'"
                story_text: |
                    ## рдХрд╣рд╛рдиреА
                    рдЖрдкрдиреЗ рджреЗрдЦрд╛ рд╣реЛрдЧрд╛ рдХрд┐ рдкрд┐рдЫрд▓реЗ рд╕реНрддрд░реЛрдВ рдореЗрдВ рдЕрднреА рднреА рдПрдХ рд╕рдорд╕реНрдпрд╛ рд╣реИред рдХреНрдпрд╛ рдЖрдкрдиреЗ рдЙрд╕ рд╡рд╛рдХреНрдп рдХреЛ рдкреНрд░рд┐рдВрдЯ рдХрд░рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд┐рдпрд╛ рдЬрд┐рд╕рдореЗрдВ рд╢рдмреНрдж рдХрд╛ рдирд╛рдо рдерд╛?
                    рдЖрдк рдЗрд╕реЗ рдЗрд╕ рд╕реНрддрд░ рдкрд░ рд╣рд▓ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред рдЖрдк рдЬреЛ рдХреБрдЫ рднреА рдкреНрд░рд┐рдВрдЯ рдХрд░рдиреЗ рдЬрд╛ рд░рд╣реЗ рд╣реИрдВ, рдЙрд╕рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдЙрджреНрдзрд░рдг рдЪрд┐рд╣реНрдиреЛрдВ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдирд╛ рдЪрд╛рд╣рд┐рдПред
            3:
                story_text: |
                    ## рдХрд╣рд╛рдиреА
                    рд╕реНрддрд░ 3 рдореЗрдВ рдЖрдк рдЕрдкрдиреА рдХрд╣рд╛рдиреА рдХреЛ рдФрд░ рдордЬреЗрджрд╛рд░ рдмрдирд╛ рд╕рдХрддреЗ рд╣реИрдВред рдЖрдк рдЗрд╕ рддрд░рд╣ рдХрд┐рд╕реА рднреА рд░рд╛рдХреНрд╖рд╕, рдЬрд╛рдирд╡рд░ рдпрд╛ рдЕрдиреНрдп рдмрд╛рдзрд╛ рдХреЗ рд▓рд┐рдП рдпрд╛рджреГрдЪреНрдЫрд┐рдХрддрд╛ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ:

                example_code: |
                    ## рдЙрджрд╛рд╣рд░рдг рд╣реЗрдбреА рдХреЛрдб

                    ```
                    рдЬрд╛рдирд╡рд░ {is} ЁЯжФ, ЁЯР┐, ЁЯжЙ, ЁЯжЗ
                    {print} рд╡рд╣ рдЕрдм рдПрдХ рдЬрд╛рдирд╡рд░ рдХреА рдЖрд╡рд╛рдЬ рд╕реБрдирддрд╛ рд╣реИ {at} {random}
                    ```
                story_text_2: |
                    рдЖрджреЗрд╢ `{add}` рднреА рдЖрдкрдХреА рдХрд╣рд╛рдиреА рдореЗрдВ рдХрд╛рдо рдЖ рд╕рдХрддрд╛ рд╣реИред рдЙрджрд╛рд╣рд░рдг рдХреЗ рд▓рд┐рдП

                example_code_2: |-
                    ## рдЙрджрд╛рд╣рд░рдг рд╣реЗрдбреА рдХреЛрдб

                    ```
                    {print} рд╡рд╣ рдПрдХ рдЖрд╡рд╛рдЬ рд╕реБрдирддрд╛ рд╣реИ
                    рдЬрд╛рдирд╡рд░реЛрдВ {is}ЁЯР┐, ЁЯжФ, ЁЯжЗ, ЁЯжЙ
                    рдЬрд╛рдирд╡рд░ {is} {ask} рдЖрдкрдХреЛ рдХреНрдпрд╛ рд▓рдЧрддрд╛ рд╣реИ рдХрд┐ рдпрд╣ рдХреНрдпрд╛ рд╣реИ?
                    {add} рдЬрд╛рдирд╡рд░ {to_list} рдЬрд╛рдирд╡рд░реЛрдВ
                    {print} рдпрд╣ рдПрдХ рдерд╛ рдЬрд╛рдирд╡рд░реЛрдВ {at} {random}
                    ```
                story_text_3: |-
                    рдпрд╣ рдЖрдкрдХреА рдХрд╣рд╛рдиреА рдореЗрдВ `{remove}` рдЖрджреЗрд╢ рдХрд╛ рдПрдХ рдЙрджрд╛рд╣рд░рдг рд╣реИ
                example_code_3: |
                    ## рдЙрджрд╛рд╣рд░рдг рд╣реЗрдбреА рдХреЛрдб

                    ```
                    {print} рдЙрдирдХрд╛ рдмреИрдЧ рдмрд╣реБрдд рднрд╛рд░реА рд╣реЛ рдЧрдпрд╛ рдерд╛ред
                    {print} рдЕрдВрджрд░ рдкрд╛рдиреА рдХреА рдПрдХ рдмреЛрддрд▓, рдПрдХ рдЯреЙрд░реНрдЪ рдФрд░ рдПрдХ рдИрдВрдЯ рдереАред
                    рдмреИрдЧ {is} рдкрд╛рдиреА, рдЯреЙрд░реНрдЪ, рдИрдВрдЯ
                    рдбрдВрдк {is} {ask} рдЙрд╕реЗ рдХреМрди рд╕реА рд╡рд╕реНрддреБ рдЧрд┐рд░рд╛рдирд╛ рдЪрд╛рд╣рд┐рдП?
                    {remove} рдбрдВрдк {from} рдмреИрдЧ
                    ```
                start_code: "{print} рдЖрдкрдХреА рдХрд╣рд╛рдиреА"
            1:
                story_text: |-
                    ## рдПрдХ рдХрд╣рд╛рдиреА рдмрдирд╛рдУ
                    рд╕реНрддрд░ 1 рдореЗрдВ рдЖрдк рдПрдХ рдЕрд▓рдЧ рдореБрдЦреНрдп рдкрд╛рддреНрд░ рдХреЗ рд╕рд╛рде рдПрдХ рдХрд╣рд╛рдиреА рдмрдирд╛ рд╕рдХрддреЗ рд╣реИрдВ рдЬрд┐рд╕реЗ рдЖрдк рд╕реНрд╡рдпрдВ рджрд░реНрдЬ рдХрд░рддреЗ рд╣реИрдВред

                    рдкрд╣рд▓реА рдкрдВрдХреНрддрд┐ рдХреЗ рд░реВрдк рдореЗрдВ, рдЗрд╕ рдХреЛрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ:

                    ```
                    {ask} рдЖрдкрдХреА рдХрд╣рд╛рдиреА рдХрд╛ рд╕рд┐рддрд╛рд░рд╛ рдХреМрди рд╣реИ?
                    ```
                    рдЙрд╕ рдкрд╣рд▓реА рдкрдВрдХреНрддрд┐ рдХреЗ рдмрд╛рдж, `{print}` {if} рд╕реЗ рд╢реБрд░реВ рдХрд░реЗрдВ, рд╡рд╛рдХреНрдп рдХреЛ рдореБрджреНрд░рд┐рдд рдХрд░рдиреЗ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реИред
                    рдЖрдк `{echo}` {if} рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рддреЗ рд╣реИрдВ, рдЖрдк рдЪрд╛рд╣рддреЗ рд╣реИрдВ рдХрд┐ рдЖрдкрдХрд╛ рдореБрдЦреНрдп рдЪрд░рд┐рддреНрд░ рд╡рд╛рдХреНрдп рдХреЗ рдЕрдВрдд рдореЗрдВ рд╣реЛред
                example_code: |
                    ## рдЙрджрд╛рд╣рд░рдг рд╣реЗрдбреА рдХреЛрдб


                    ```
                    {ask} рдЗрд╕ рдХрд╣рд╛рдиреА рдХрд╛ рдореБрдЦреНрдп рдкрд╛рддреНрд░ рд╣реИ
                    {print} рдореБрдЦреНрдп рдкрд╛рддреНрд░ рдЕрдм рдЬрдВрдЧрд▓ рдореЗрдВ рдЪрд▓рдиреЗ рд╡рд╛рд▓рд╛ рд╣реИ
                    {echo} рд╡рд╣ рдереЛрдбрд╝рд╛ рдбрд░рд╛ рд╣реБрдЖ рд╣реИ,
                    {print} рд╡рд╣ рд╣рд░ рдЬрдЧрд╣ рдХреНрд╖реАрдг рд╢реЛрд░ рд╕реБрдирддрд╛ рд╣реИ
                    {print} рдЙрд╕реЗ рдбрд░ рд╣реИ рдХрд┐ рдпрд╣ рдПрдХ рдкреНрд░реЗрддрд╡рд╛рдзрд┐рдд рдЬрдВрдЧрд▓ рд╣реИ
                    ```
                start_code: '{print} рдЖрдкрдХреА рдХрд╣рд╛рдиреА рдпрд╣рд╛рдВ рд╕реЗ рд╢реБрд░реВ рд╣реЛрддреА рд╣реИ'
            2:
                story_text: |-
                    ## рдХрд╣рд╛рдиреА
                    рд╕реНрддрд░ 2 рдореЗрдВ рдЖрдк рдЕрдкрдиреА рдХрд╣рд╛рдиреА рдХреЛ рдФрд░ рдордЬреЗрджрд╛рд░ рдмрдирд╛ рд╕рдХрддреЗ рд╣реИрдВред рдЖрдкрдХреЗ рдореБрдЦреНрдп рдкрд╛рддреНрд░ рдХрд╛ рдирд╛рдо рдЕрдм рд╡рд╛рдХреНрдп рдореЗрдВ рдХрд╣реАрдВ рднреА рд╣реЛ рд╕рдХрддрд╛ рд╣реИред

                    рдЗрд╕рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдереЛрдбрд╝рд╛ рдЕрддрд┐рд░рд┐рдХреНрдд рдкреНрд░реЛрдЧреНрд░рд╛рдо рдХрд░рдирд╛ рд╣реЛрдЧрд╛ред рдЕрдм рдЖрдкрдХреЛ рдкрд╣рд▓реЗ рдЕрдкрдиреЗ рдореБрдЦреНрдп рдкрд╛рддреНрд░ рдХрд╛ рдирд╛рдо рдмрддрд╛рдирд╛ рд╣реЛрдЧрд╛ред

                    рдлрд┐рд░ рдЖрдк рдЙрд╕ рдирд╛рдо рдХреЛ рд╡рд╛рдХреНрдп рдореЗрдВ рдХрд╣реАрдВ рднреА рд░рдЦ рд╕рдХрддреЗ рд╣реИрдВред
                example_code: |
                    ## рдЙрджрд╛рд╣рд░рдг рд╣реЗрдбреА рдХреЛрдб


                    ```
                    рдирд╛рдо {is} {ask} рдореБрдЦреНрдп рдкрд╛рддреНрд░ рдХрд╛ рдирд╛рдо рдХреНрдпрд╛ рд╣реИ?
                    {print} рдирд╛рдо рдЕрдм рдЬрдВрдЧрд▓ рдореЗрдВ рдЪрд▓рдиреЗ рд╡рд╛рд▓рд╛ рд╣реИ
                    {print} рдирд╛рдо рдереЛрдбрд╝рд╛ рдбрд░рд╛ рд╣реБрдЖ рд╣реИ
                    {print} рдЕрдЪрд╛рдирдХ рдЙрд╕реЗ рдПрдХ рдХреНрд╖реАрдг рд╢реЛрд░ рд╕реБрдирд╛рдИ рджреЗрддрд╛ рд╣реИ...
                    {sleep}
                    {print} рдирд╛рдо рдбрд░рддрд╛ рд╣реИ рдпрд╣ рдПрдХ рдкреНрд░реЗрддрд╡рд╛рдзрд┐рдд рдЬрдВрдЧрд▓ рд╣реИ
                    ```
                start_code: '{print} рдЖрдкрдХреА рдХрд╣рд╛рдиреА'
            12:
                story_text: |-
                    ## рдХрд╣рд╛рдиреА
                    рдЗрд╕ рд╕реНрддрд░ рдореЗрдВ рдЖрдк рдПрдХ рдЪрд░ рдореЗрдВ рдХрдИ рд╢рдмреНрджреЛрдВ рдХреЛ рд╕рд╣реЗрдЬрдиреЗ рдХреЗ рд▓рд┐рдП рдЙрджреНрдзрд░рдг рдЪрд┐рд╣реНрдиреЛрдВ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред
                example_code: |
                    ## рдЙрджрд╛рд╣рд░рдг рд╣реЗрдбреА рдХреЛрдб


                    ```
                    рдирд╛рдо = 'рдЗрдВрдЧреНрд▓реИрдВрдб рдХреА рд░рд╛рдиреА'
                    {print} рдирд╛рдо 'рдХреЗрдХ рдХрд╛ рдЯреБрдХрдбрд╝рд╛ рдЦрд╛ рд░рд╣рд╛ рдерд╛, рдЬрдм рдЕрдЪрд╛рдирдХ...'
                    ```
                start_code: '#рдЕрдкрдирд╛ рдХреЛрдб рдпрд╣рд╛рдВ рдбрд╛рд▓реЗрдВ'
            10:
                story_text: |
                    ## рдХрд╣рд╛рдиреА
                    рдЗрд╕ рд╕реНрддрд░ рдореЗрдВ рдЖрдк рдЕрдкрдиреА рдХрд╣рд╛рдиреА рдореЗрдВ {for} рдЖрджреЗрд╢ рдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред рдЗрд╕ рддрд░рд╣ рдЖрдк рдЖрд╕рд╛рдиреА рд╕реЗ рдмрдЪреНрдЪреЛрдВ рдХреА рдХрд┐рддрд╛рдм 'рднреВрд░рд╛ рднрд╛рд▓реВ, рднреВрд░рд╛ рднрд╛рд▓реВ, рдЖрдк рдХреНрдпрд╛ рджреЗрдЦрддреЗ рд╣реИрдВ' рдХреЛ рдкреНрд░реЛрдЧреНрд░рд╛рдо рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред
                example_code: |-
                    ## рдЙрджрд╛рд╣рд░рдг рд╣реЗрдбреА рдХреЛрдб

                    ```
                    рдЬрд╛рдирд╡рд░ = рд▓рд╛рд▓ рдкрдХреНрд╖реА, рдХрд╛рд▓реА рднреЗрдбрд╝, рд╣рд░рд╛ рдореЗрдВрдврдХ, рдкреАрд▓реА рдмрддреНрддрдЦ, рдЫреЛрдЯрд╛ рдмрдЪреНрдЪрд╛
                    {print} 'рднреВрд░рд╛ рднрд╛рд▓реВ'
                    {print} 'рднреВрд░рд╛ рднрд╛рд▓реВ'
                    {print} 'рдЖрдк рдХреНрдпрд╛ рджреЗрдЦрддреЗ рд╣реИрдВ?'
                    {for} рдЬрд╛рдирд╡рд░ {in} рдЬрд╛рдирд╡рд░
                        {print} 'рдореБрдЭреЗ рдПрдХ 'рдЬрд╛рдирд╡рд░' рджрд┐рдЦрд╛рдИ рджреЗ рд░рд╣рд╛ рд╣реИ рдЬреЛ рдореБрдЭреЗ рджреЗрдЦ рд░рд╣рд╛ рд╣реИ'
                        {print} рдЬрд╛рдирд╡рд░
                        {print} рдЬрд╛рдирд╡рд░
                        {print} 'рдЖрдк рдХреНрдпрд╛ рджреЗрдЦрддреЗ рд╣реИрдВ?'
                    {print} 'рдореИрдВ рджреЗрдЦ рд░рд╣рд╛ рд╣реВрдВ рдХрд┐ рд╕рднреА рдЬрд╛рдирд╡рд░ рдореБрдЭреЗ рджреЗрдЦ рд░рд╣реЗ рд╣реИрдВ!'
                    ```
                start_code: '#рдЕрдкрдирд╛ рдХреЛрдб рдпрд╣рд╛рдВ рдбрд╛рд▓реЗрдВ'
            9:
                story_text: |
                    ## рдХрд╣рд╛рдиреА
                    рдЗрд╕ рд╕реНрддрд░ рдкрд░ рдЖрдк рдЕрдиреНрдп {if}, {repeat} рдпрд╛ {for} рдЖрджреЗрд╢ рдХреЗ рдЕрдВрджрд░ {if}, {repeat} рдпрд╛ {for} рдЖрджреЗрд╢ рдбрд╛рд▓рдиреЗ рдХреЗ рд▓рд┐рдП рдиреЗрд╕реНрдЯрд┐рдВрдЧ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред рдпрд╣ рдЖрдкрдХреЛ рдХрдИ рд╡рд┐рдХрд▓реНрдк рджреЗрддрд╛ рд╣реИ рдФрд░ рд╡рд╛рд╕реНрддрд╡ рдореЗрдВ рдЖрдкрдХреА рдХрд╣рд╛рдиреА рдХреЛ рдкрд░рд╕реНрдкрд░ рд╕рдВрд╡рд╛рджрд╛рддреНрдордХ рдмрдирд╛рдиреЗ рдореЗрдВ рдЖрдкрдХреА рдорджрдж рдХрд░рддрд╛ рд╣реИред
                example_code: |-
                    ## рдЙрджрд╛рд╣рд░рдг рд╣реЗрдбреА рдХреЛрдб
                    ```
                    {print} 'рд░реЙрдмрд┐рди рд╢рд╣рд░ рдореЗрдВ рдШреВрдо рд░рд╣рд╛ рд╣реИ'
                    рд╕реНрдерд╛рди = {ask} 'рдХреНрдпрд╛ рд░реЙрдмрд┐рди рдПрдХ рджреБрдХрд╛рди рдореЗрдВ рдЬрд╛ рд░рд╣рд╛ рд╣реИ, рдпрд╛ рд╡рд╣ рдШрд░ рдЬрд╛рддреА рд╣реИ?'
                    {if} рд╕реНрдерд╛рди {is} рджреБрдХрд╛рди
                        {print} 'рд╡рд╣ рджреБрдХрд╛рди рдореЗрдВ рдкреНрд░рд╡реЗрд╢ рдХрд░рддреА рд╣реИред'
                        {print} 'рд░реЙрдмрд┐рди рдПрдХ рджрд┐рд▓рдЪрд╕реНрдк рджрд┐рдЦрдиреЗ рд╡рд╛рд▓реА рдХрд┐рддрд╛рдм рджреЗрдЦрддрд╛ рд╣реИ'
                        рдХрд┐рддрд╛рдм = {ask} 'рдХреНрдпрд╛ рд░реЙрдмрд┐рди рдХрд┐рддрд╛рдм рдЦрд░реАрджрддрд╛ рд╣реИ?'
                        {if} рдХрд┐рддрд╛рдм {is} рд╣рд╛рдВ
                            {print} 'рд░реЙрдмрд┐рди рдХрд┐рддрд╛рдм рдЦрд░реАрджрддрд╛ рд╣реИ рдФрд░ рдШрд░ рдЬрд╛рддрд╛ рд╣реИ'
                        {else}
                            {print} 'рд░реЙрдмрд┐рди рджреБрдХрд╛рди рдЫреЛрдбрд╝рдХрд░ рдШрд░ рдЪрд▓рд╛ рдЬрд╛рддрд╛ рд╣реИ'
                    {else}
                        {print} 'рд░реЙрдмрд┐рди рдШрд░ рдЬрд╛рддрд╛ рд╣реИ'
                    ```
                story_text_2: |
                    рдКрдкрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рдЙрджрд╛рд╣рд░рдг рдмрд╣реБрдд рд╕реАрдзрд╛ рд╣реИ, рд▓реЗрдХрд┐рди рдиреЗрд╕реНрдЯрд┐рдВрдЧ рдХреЗ рд╕рд╛рде рдЖрдк рд╡рд╛рд╕реНрддрд╡ рдореЗрдВ рдЕрдкрдиреЗ рдХреЛрдб рдХреЛ рд╡рд┐рд╕реНрддреГрдд рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ рдФрд░ рдЕрдкрдиреА рдХрд╣рд╛рдиреА рдХреЛ рдПрдХ рд╡рд╛рд╕реНрддрд╡рд┐рдХ рдЦреЗрд▓ рдореЗрдВ рдмрджрд▓ рд╕рдХрддреЗ рд╣реИрдВред рдЗрд╕ рдЙрджрд╛рд╣рд░рдг рдХреЛ рджреЗрдЦреЗрдВ!
                example_code_2: |-
                    ## рд╡рд┐рд╕реНрддреГрдд рдХреЛрдб
                    ```
                    рддрд▓рд╡рд╛рд░ = рдЦреЛрдпрд╛
                    рдЦреЗрд▓ = рдЪрд╛рд▓реВ
                    {print} 'рд╣рдорд╛рд░рд╛ рд╣реАрд░реЛ рдЬрдВрдЧрд▓ рдореЗрдВ рдШреВрдо рд░рд╣рд╛ рд╣реИ'
                    {print} 'рд░рд╛рд╕реНрддрд╛ рджреЛ рд╣рд┐рд╕реНрд╕реЛрдВ рдореЗрдВ рдмрдВрдЯ рдЬрд╛рддрд╛ рд╣реИ'
                    {repeat} 2 {times}
                        {if} рдЦреЗрд▓ {is} рдЪрд╛рд▓реВ
                            рдкрде = {ask} 'рдЙрд╕реЗ рдХреМрди рд╕рд╛ рд░рд╛рд╕реНрддрд╛ рдЪреБрдирдирд╛ рдЪрд╛рд╣рд┐рдП?'
                            {if} рдкрде {is} рдмрд╛рдПрдВ
                                {if} рддрд▓рд╡рд╛рд░ {is} рдкрд╛рдпрд╛
                                    {print} 'рд╣рдорд╛рд░рд╛ рд╣реАрд░реЛ рдПрдХ рдбреНрд░реИрдЧрди рд╕реЗ рдорд┐рд▓рддрд╛ рд╣реИ!'
                                    {print} 'рд╕реМрднрд╛рдЧреНрдп рд╕реЗ рд╣рдорд╛рд░реЗ рдирд╛рдпрдХ рдХреЗ рдкрд╛рд╕ рдЬрд╛рдирд╡рд░ рдХреЛ рд╣рд░рд╛рдиреЗ рдХреЗ рд▓рд┐рдП рддрд▓рд╡рд╛рд░ рд╣реИ!'
                                    рдЦреЗрд▓ = рдЦрддреНрдо
                                {else}
                                    {print} 'рд╣рдорд╛рд░реЗ рдирд╛рдпрдХ рдХреЛ рдПрдХ рдЕрдЬрдЧрд░ рдорд┐рд▓ рдЧрдпрд╛ рд╣реИ, рд▓реЗрдХрд┐рди рдЙрд╕рдХреЗ рдкрд╛рд╕ рдХреЛрдИ рд╣рдерд┐рдпрд╛рд░ рдирд╣реАрдВ рд╣реИ!'
                                    {print} 'рд╣рдорд╛рд░реЗ рд╣реАрд░реЛ рдХреЛ рдбреНрд░реИрдЧрди рдиреЗ рдкреАрдЯрд╛ рд╣реИ...'
                                    {print} 'рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ'
                                    рдЦреЗрд▓ = рдЦрддреНрдо
                            {if} рдкрде {is} рджрд╛рдВрдП
                                {if} рддрд▓рд╡рд╛рд░ {is} рдЦреЛрдпрд╛
                                    {print} 'рд╣рдорд╛рд░реЗ рдирд╛рдпрдХ рдХреЛ рддрд▓рд╡рд╛рд░ рдорд┐рд▓ рдЧрдИ'
                                    {print} 'рдпрд╣ рдмрд╣реБрдд рдХрд╛рдо рдЖ рд╕рдХрддрд╛ рд╣реИ'
                                    рддрд▓рд╡рд╛рд░ = рдкрд╛рдпрд╛
                                {else}
                                    {print} 'рдЖрдкрдХреЛ рддрд▓рд╡рд╛рд░ рдкрд╣рд▓реЗ рд╣реА рдорд┐рд▓ рдЧрдИ рд╣реИред рдпрд╣рд╛рдБ рдХреБрдЫ рдирд╣реАрдВ рдмрдЪрд╛ рд╣реИред'
                                    {print} 'рд╡рд╣ рд╡рд╛рдкрд╕ рдЪрд▓рддреА рд╣реИ'
                    ```
                start_code: '#рдЕрдкрдирд╛ рдХреЛрдб рдпрд╣рд╛рдВ рдбрд╛рд▓реЗрдВ'
            8:
                story_text: |
                    ## рдХрд╣рд╛рдиреА
                    рдЗрд╕ рд╕реНрддрд░ рдореЗрдВ рдЖрдк рдЕрдкрдиреЗ {if} рдЖрджреЗрд╢ рдореЗрдВ рдХрдИ рдкрдВрдХреНрддрд┐рдпреЛрдВ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ, рдЗрд╕ рддрд░рд╣ рдЖрдк рдЕрдкрдиреЗ рд╕реБрдЦрдж рдпрд╛ рджреБрдЦрдж рдЕрдВрдд рдХреЛ рдЙрдиреНрдирдпрди рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ!
                example_code: |
                    ## рдЙрджрд╛рд╣рд░рдг рд╣реЗрдбреА рдХреЛрдб

                    ```
                    {print} 'рдЕрд░реЗ рдирд╣реАрдВ! рдЯреА-рд░реЗрдХреНрд╕ рдмрдВрдж рд╣реЛ рд░рд╣рд╛ рд╣реИ!'
                    рдЕрдВрдд = {ask} 'рдХреНрдпрд╛ рдЖрдк рд╕реБрдЦрдж рдпрд╛ рджреБрдЦрдж рдЕрдВрдд рдЪрд╛рд╣рддреЗ рд╣реИрдВ?'
                    {if} рдЕрдВрдд {is} рд╕реБрдЦрдж
                        {print} 'рдареАрдХ рд╕рдордп рдкрд░ рд░рд┐рдЪрд░реНрдб рдЯрд╛рдЗрдо рдорд╢реАрди рдореЗрдВ рд╡рд╛рдкрд╕ рдХреВрджрддрд╛ рд╣реИ!'
                        {print} 'рдорд╛рдЗрдХрд▓ рдХреЛрдб рдЯрд╛рдЗрдк рдХрд░рддрд╛ рд╣реИ рдФрд░...'
                        {print} 'рдЬрд╝реИрдк!ЁЯТе'
                        {print} 'рд╡реЗ рдЕрдкрдиреЗ рдЧреИрд░реЗрдЬ рдореЗрдВ рд╡рд╛рдкрд╕ рдЖ рдЧрдП рд╣реИрдВ'
                    {else}
                        {print} 'рдорд╛рдЗрдХрд▓ рдЪрд┐рд▓реНрд▓рд╛рддрд╛ рд╣реИ рдХрдо рдСрди рд░рд┐рдЪрд░реНрдб! рддреЗрдЬреА рд╕реЗ рднрд╛рдЧрдирд╛!'
                        {print} 'рд▓реЗрдХрд┐рди рд░рд┐рдЪрд░реНрдб рдмрд╣реБрдд рдзреАрдорд╛ рд╣реИ...'
                        {print} 'рдЯреА-рд░реЗрдХреНрд╕ рдмрдВрдж рд╣реЛ рдЬрд╛рддрд╛ рд╣реИ рдФрд░ рдЙрд╕реЗ рдПрдХ рдмрдбрд╝реЗ рджрдВрд╢ рдореЗрдВ рдЦрд╛ рдЬрд╛рддрд╛ рд╣реИ!ЁЯжЦ'
                    ```
                start_code: '#рдЕрдкрдирд╛ рдХреЛрдб рдпрд╣рд╛рдВ рдбрд╛рд▓реЗрдВ'
            7:
                example_code: |-
                    ## рдЙрджрд╛рд╣рд░рдг рд╣реЗрдбреА рдХреЛрдб

                    ```
                    {print} 'рд░рд╛рдЬрдХреБрдорд╛рд░ рдорджрдж рдХреЗ рд▓рд┐рдП рдкреБрдХрд╛рд░рддрд╛ рд░рд╣рд╛'
                    {repeat} 5 {times} {print} 'рд╕рд╣рд╛рдпрддрд╛!'
                    {print} 'рдХреЛрдИ рдореЗрд░реА рдорджрдж рдХреНрдпреЛрдВ рдирд╣реАрдВ рдХрд░ рд░рд╣рд╛ рд╣реИ?'
                    ```
                story_text: |
                    ## рдХрд╣рд╛рдиреА
                    рдПрдХ рдХрд╣рд╛рдиреА рдореЗрдВ, рдХреЛрдИ рдХрдИ рдмрд╛рд░ рд╢рдмреНрдж рдХрд╣рддрд╛ рд╣реИред рдЙрджрд╛рд╣рд░рдг рдХреЗ рд▓рд┐рдП, рдЬрдм рдХреЛрдИ рдорджрдж рдХреЗ рд▓рд┐рдП рдкреБрдХрд╛рд░рддрд╛ рд╣реИ рдпрд╛ рдЧрд╛рдирд╛ рдЧрд╛рддрд╛ рд╣реИред
                    рдЖрдк рдЕрдкрдиреА рдХрд╣рд╛рдиреА рдореЗрдВ рдЗрд╕ рд╕реНрддрд░ рдкрд░ `{repeat}` рдХреЗ рд╕рд╛рде рдЗрд╕ рддрд░рд╣ рдХреЗ рджреЛрд╣рд░рд╛рд╡ рдбрд╛рд▓ рд╕рдХрддреЗ рд╣реИрдВред
                start_code: "{repeat} 5 {times} {print} 'рд╕рд╣рд╛рдпрддрд╛!'"
            5:
                story_text: |
                    ## рдХрд╣рд╛рдиреА
                    рдЗрд╕ рд╕реНрддрд░ рдкрд░ рдЖрдк рдЕрд▓рдЧ-рдЕрд▓рдЧ рдЕрдВрдд рдХреЛ рдкреНрд░реЛрдЧреНрд░рд╛рдо рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ, рдЬреЛ рдЖрдкрдХреА рдХрд╣рд╛рдиреА рдХреЛ рдФрд░ рднреА рдордЬреЗрджрд╛рд░ рдмрдирд╛ рджреЗрдЧрд╛ред

                    рдЙрджрд╛рд╣рд░рдг рдХреЗ рд▓рд┐рдП, рдЕрдкрдиреА рдХрд╣рд╛рдиреА рдХреЗ рджреЛ рдЕрдВрдд рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд╕реЛрдЪреЗрдВ:

                    - рд░рд╛рдЬрдХреБрдорд╛рд░реА рдЬрдВрдЧрд▓ рд╕реЗ рдШреВрдо рд░рд╣реА рд╣реИ
                    - рдЙрд╕рдХрд╛ рд╕рд╛рдордирд╛ рдПрдХ рд░рд╛рдХреНрд╖рд╕ рд╕реЗ рд╣реЛрддрд╛ рд╣реИ

                    - рд╕реБрдЦрдж рдЕрдВрдд: рд╡рд╣ рдЕрдкрдиреА рддрд▓рд╡рд╛рд░ рд▓реЗрддреА рд╣реИ рдФрд░ рд░рд╛рдХреНрд╖рд╕ рдЬрд▓реНрджреА рд╕реЗ рднрд╛рдЧ рдЬрд╛рддрд╛ рд╣реИ
                    - рдмреБрд░рд╛ рдЕрдВрдд: рд░рд╛рдХреНрд╖рд╕ рд░рд╛рдЬрдХреБрдорд╛рд░реА рдХреЛ рдЦрд╛ рдЬрд╛рддрд╛ рд╣реИ

                    рдЖрдк рдпрд╣ рднреА рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ рдХрд┐ рдПрдХ рдирд╛рдо рдлрд┐рд░ рд╕реЗ рджрд░реНрдЬ рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИред рдпрд╣ рдкрд┐рдЫрд▓реЗ рд╕реНрддрд░реЛрдВ рдХреА рддрд░рд╣ рд╣реА рдХрд╛рдо рдХрд░рддрд╛ рд╣реИред рдЖрдк рдЗрд╕реЗ рдПрдХ `{if}` рдХреЗ рд╕рд╛рде рдЬреЛрдбрд╝ рд╕рдХрддреЗ рд╣реИрдВ, рдФрд░ рдлрд┐рд░ рдЖрдк рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рдПрдХ рдкреВрд░рд╛ рдкреНрд░реЛрдЧреНрд░рд╛рдо рдмрдирд╛ рдЪреБрдХреЗ рд╣реИрдВ!
                example_code: |-
                    ## рдЙрджрд╛рд╣рд░рдг рд╣реЗрдбреА рдХреЛрдб

                    ```
                    рдирд╛рдо {is} {ask} 'рдЬрдВрдЧрд▓ рдореЗрдВ рдХреМрди рдЪрд▓ рд░рд╣рд╛ рд╣реИ?'
                    {print} рдирд╛рдо 'рдЬрдВрдЧрд▓ рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рдЪрд▓рддрд╛ рд╣реИ'
                    {print} рдирд╛рдо 'рдПрдХ рд░рд╛рдХреНрд╖рд╕ рдХрд╛ рд╕рд╛рдордирд╛ рдХрд░рддрд╛ рд╣реИ'
                    рдЕрдВрдд {is} {ask} 'рдХреНрдпрд╛ рдЖрдк рдПрдХ рдЕрдЪреНрдЫрд╛ рдпрд╛ рдмреБрд░рд╛ рдЕрдВрдд рдЪрд╛рд╣рддреЗ рд╣реИрдВ?'
                    {if} рдЕрдВрдд {is} рдЕрдЪреНрдЫрд╛ {print} рдирд╛рдо 'рддрд▓рд╡рд╛рд░ рд▓реЗрддрд╛ рд╣реИ рдФрд░ рд░рд╛рдХреНрд╖рд╕ рдЬрд▓реНрджреА рд╕реЗ рднрд╛рдЧ рдЬрд╛рддрд╛ рд╣реИ'
                    {else} {print} 'рд░рд╛рдХреНрд╖рд╕ рдЦрд╛рддрд╛ рд╣реИ' рдирд╛рдо
                    ```
                start_code: "{print} 'рдпрд╣рд╛рдБ рдЖрдкрдХреА рдХрд╣рд╛рдиреА рд╢реБрд░реВ рд╣реЛрдЧреА!'"
            15:
                story_text: |
                    ## рдХрд╣рд╛рдиреА
                    `{while}` рд▓реВрдк рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдирд╛ рдЖрдкрдХреА рдХрд╣рд╛рдирд┐рдпреЛрдВ рдХреЛ рдФрд░ рджрд┐рд▓рдЪрд╕реНрдк рдмрдирд╛ рд╕рдХрддрд╛ рд╣реИред рдЙрджрд╛рд╣рд░рдг рдХреЗ рд▓рд┐рдП, рдЖрдк `{while} рдЦреЗрд▓ {is} 'рдЪрд╛рд▓реВ'' рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ рддрд╛рдХрд┐ рдЖрдк рдЦреЗрд▓ рдЦрддреНрдо рд╣реЛрдиреЗ рддрдХ рдЦреЗрд▓ рд╕рдХреЗрдВред
                    рдпрд╛ рдЖрдк '{while} рддрд▓рд╡рд╛рд░ {is} 'рдЦреЛрдпрд╛'' рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ рддрд╛рдХрд┐ рдЦрд┐рд▓рд╛рдбрд╝реА рддрдм рддрдХ рдЦреЗрд▓ рдЬрд╛рд░реА рди рд░рдЦ рд╕рдХреЗ рдЬрдм рддрдХ рдХрд┐ рдЙрдиреНрд╣реЗрдВ рдХреБрдЫ рди рдорд┐рд▓ рдЬрд╛рдПред
                example_code: |-
                    ## рдЙрджрд╛рд╣рд░рдг рд╣реЗрдбреА рдХреЛрдб

                    ```
                    рдЪрд╛рдмрд┐рдпрд╛рдБ = 'рдЦреЛрдпрд╛'
                    {print} 'рдЖрдк рдЕрдкрдиреЗ рдмрдЧреАрдЪреЗ рдореЗрдВ рдЦрдбрд╝реЗ рд╣реИрдВ рдФрд░ рдЖрдкрдиреЗ рдЕрдкрдиреА рдЪрд╛рдмрд┐рдпрд╛рдВ рдЦреЛ рджреА рд╣реИрдВред'
                    {print} 'рдЖрдк рдЙрдиреНрд╣реЗрдВ рдХрд╣рд╛рдВ рдЦреЛрдЬрдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?'
                    {print} 'рдЖрдк рдЪреБрди рд╕рдХрддреЗ рд╣реИрдВ: рдкреЗрдбрд╝, рдлреВрд▓реЛрдВ рдХрд╛ рдмрд┐рд╕реНрддрд░, рдЪрдЯреНрдЯрд╛рди, рдкреЛрд╕реНрдЯрдмреЙрдХреНрд╕'
                    {while} рдЪрд╛рдмрд┐рдпрд╛рдБ == 'рдЦреЛрдпрд╛'
                        рд╕реНрдерд╛рди = {ask} 'рдЖрдк рдХрд╣рд╛рдБ рджреЗрдЦрдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?'
                        {if} рд╕реНрдерд╛рди == 'рдлреВрд▓реЛрдВ рдХрд╛ рдмрд┐рд╕реНрддрд░'
                            {print} 'рдпреЗ рд░рд╣реЗ!'
                            рдЪрд╛рдмрд┐рдпрд╛рдБ = 'рдорд┐рд▓рд╛'
                        {else}
                            {print} 'рдирд╣реАрдВ, рд╡реЗ ' рд╕реНрдерд╛рди ' рдкрд░ рдирд╣реАрдВ рд╣реИрдВ'
                    {print} 'рдЕрдм рдЖрдк рдШрд░ рдореЗрдВ рдкреНрд░рд╡реЗрд╢ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ!'
                    ```
                start_code: '#рдЕрдкрдирд╛ рдХреЛрдб рдпрд╣рд╛рдВ рдбрд╛рд▓реЗрдВ'
            13:
                story_text: |
                    ## рдХрд╣рд╛рдиреА
                    `{and}` рдФрд░ `{or}` рдЖрджреЗрд╢ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ, рдЖрдк рдЕрдкрдиреА рдХрд╣рд╛рдирд┐рдпреЛрдВ рдХреЛ рдЫреЛрдЯрд╛ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред рдЙрджрд╛рд╣рд░рдг рдХреЗ рд▓рд┐рдП, рдбреНрд░реИрдЧрди рдХрд╣рд╛рдиреА рджреЗрдЦреЗрдВред
                example_code: |-
                    ## рдЙрджрд╛рд╣рд░рдг рд╣реЗрдбреА рдХреЛрдб

                    ```
                    рддрд▓рд╡рд╛рд░ = 'рдЦреЛрдпрд╛'
                    рдЦреЗрд▓ = 'рдЪрд╛рд▓реВ'
                    {print} 'рд╣рдорд╛рд░рд╛ рд╣реАрд░реЛ рдЬрдВрдЧрд▓ рдореЗрдВ рдШреВрдо рд░рд╣рд╛ рд╣реИ'
                    {print} 'рд░рд╛рд╕реНрддрд╛ рджреЛ рд╣рд┐рд╕реНрд╕реЛрдВ рдореЗрдВ рдмрдВрдЯ рдЬрд╛рддрд╛ рд╣реИ'
                    {for} рдЗ {in} {range} 0 {to} 2
                        {if} рдЦреЗрд▓ {is} 'рдЪрд╛рд▓реВ'
                            рдкрде = {ask} 'рдЙрд╕реЗ рдХреМрди рд╕рд╛ рд░рд╛рд╕реНрддрд╛ рдЪреБрдирдирд╛ рдЪрд╛рд╣рд┐рдП?'
                            {if} рдкрде {is} 'рдмрд╛рдПрдВ' {and} рддрд▓рд╡рд╛рд░ {is} 'рдорд┐рд▓рд╛'
                                {print} 'рд╣рдорд╛рд░рд╛ рд╣реАрд░реЛ рдПрдХ рдбреНрд░реИрдЧрди рд╕реЗ рдорд┐рд▓рддрд╛ рд╣реИ!'
                                {print} 'рд╕реМрднрд╛рдЧреНрдп рд╕реЗ рд╣рдорд╛рд░реЗ рдирд╛рдпрдХ рдХреЗ рдкрд╛рд╕ рдЬрд╛рдирд╡рд░ рдХреЛ рд╣рд░рд╛рдиреЗ рдХреЗ рд▓рд┐рдП рддрд▓рд╡рд╛рд░ рд╣реИ!'
                                рдЦреЗрд▓ = 'рдЦрддреНрдо'
                            {if} рдкрде {is} 'рдмрд╛рдПрдВ' {and} рддрд▓рд╡рд╛рд░ {is} 'рдЦреЛрдпрд╛'
                                {print} 'рд╣рдорд╛рд░реЗ рдирд╛рдпрдХ рдХреЛ рдПрдХ рдЕрдЬрдЧрд░ рдорд┐рд▓ рдЧрдпрд╛ рд╣реИ, рд▓реЗрдХрд┐рди рдЙрд╕рдХреЗ рдкрд╛рд╕ рдХреЛрдИ рд╣рдерд┐рдпрд╛рд░ рдирд╣реАрдВ рд╣реИ!'
                                {print} 'рд╣рдорд╛рд░реЗ рд╣реАрд░реЛ рдХреЛ рдбреНрд░реИрдЧрди рдиреЗ рдкреАрдЯрд╛ рд╣реИ...'
                                {print} 'рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ'
                                рдЦреЗрд▓ = 'рдЦрддреНрдо'
                            {if} рдкрде {is} 'рджрд╛рдПрдВ' {and} рддрд▓рд╡рд╛рд░ {is} 'рдорд┐рд▓рд╛'
                                {print} 'рдЖрдкрдХреЛ рддрд▓рд╡рд╛рд░ рдкрд╣рд▓реЗ рд╣реА рдорд┐рд▓ рдЧрдИ рд╣реИред рдпрд╣рд╛рдБ рдХреБрдЫ рдирд╣реАрдВ рдмрдЪрд╛ рд╣реИред'
                                {print} 'рд╡рд╣ рд╡рд╛рдкрд╕ рдЪрд▓рддреА рд╣реИ'
                            {if} рдкрде {is} 'рджрд╛рдПрдВ' {and} рддрд▓рд╡рд╛рд░ {is} 'рдЦреЛрдпрд╛'
                                {print} 'рд╣рдорд╛рд░реЗ рдирд╛рдпрдХ рдХреЛ рддрд▓рд╡рд╛рд░ рдорд┐рд▓ рдЧрдИ'
                                {print} 'рдпрд╣ рдмрд╣реБрдд рдХрд╛рдо рдЖ рд╕рдХрддрд╛ рд╣реИ'
                                рддрд▓рд╡рд╛рд░ = 'рдорд┐рд▓рд╛'
                    ```
                start_code: '#рдЕрдкрдирд╛ рдХреЛрдб рдпрд╣рд╛рдВ рдбрд╛рд▓реЗрдВ'
        name: рдХрд╣рд╛рдиреА
        description: рдХрд╣рд╛рдиреА
        image: рдХрд╣рд╛рдиреА.png
        default_save_name: рдХрд╣рд╛рдиреА
    turtle:
        levels:
            2:
                start_code: |
                    {print} Turtle race!
                    hoek {is} 90
                    {turn} hoek
                    {forward} 25
                story_text: |
                    In level 1 the turtle could only turn left or right. That is a bit boring!
                    In level 2 he can point his nose in all directions.

                    Use 90 to turn a quarter. We call this degrees. A full turn is 360 degrees.
                    Can you make a figure with this code? Maybe a triangle or a circle?
                example_code: |
                    ## Example Hedy code


                    ```
                    {print} Drawing figures
                    angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
            3:
                start_code: |
                    angles {is} 10, 50, 90, 150, 250
                    {turn} angles {at} {random}
                    {forward} 25
                example_code: |
                    ## Example Hedy code


                    ```
                    angles {is} 10, 50, 90, 150, 250
                    {turn} angles {at} {random}
                    {forward} 25
                    ```
                story_text: |
                    ## Searching turtle
                    In this level you can use use `{random}` with the drawing turtle. A random choice makes the turtle walk a different path each time.
                    Use `{at} {random}` to choose a value from a list. You can copy and paste lines 2 and 3 to create a longer random path.
            4:
                story_text: |
                    ## Let's draw
                    In level 4 you have to use quotation marks with `{print}` and `{ask}`. Also when drawing!
                example_code: |
                    ## Example Hedy code

                    ```
                    {print} 'Drawing figures'
                    angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
                start_code: |
                    {print} 'Drawing figures'
                    angle {is} 90
                    {turn} angle
                    {forward} 25
            5:
                story_text: |
                    ## Let's draw
                    In level 5 you can make a choice with `{if}`. For example between different types of figures.
                example_code: |
                    ## Example Hedy code

                    ```
                    {print} 'Drawing Figures'
                    figure {is} {ask} 'Do you want a square or a triangle?'
                    {if} figure {is} triangle angle {is} 120
                    {else} angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
                start_code: |
                    {print} 'Drawing Figures'
                    figure {is} {ask} 'Do you want a square or a triangle?'
                    {if} figure {is} triangle angle {is} 120 {else} angle {is} 90
                    {turn} angle
                    {forward} 25
            1:
                story_text: |
                    ## Let's draw
                    In level 1 you can also use Hedy to draw. By combining turns and lines, you can make a square or a stair!

                    Using `{forward}` you draw a line forwards. The number behind it determines how far the turtle will walk. `{turn} right` turns a quarter turn in clockwise direction, `{turn} left` turns counter clockwise.

                    This is the start of a little staircase. Can you make it have 5 steps?
                example_code: |
                    ## Example Hedy code

                    ```
                    {turn} right
                    {forward} 50
                    {turn} left
                    {forward} 50
                    ```
                start_code: |-
                    {forward} 50
                    {turn} left
            8:
                story_text: |
                    ## Let's draw
                    Now that we can repeat several lines, we can make figures more easily.
                    We only have to set the angle once and then use that variable in the `{repeat}`.
                example_code: |
                    ## Example Hedy code

                    ```
                    angle = 90
                    {repeat} 10 {times}
                        {turn} angle
                        {forward} 50
                    ```
                story_text_2: |
                    ## Interaction
                    Also, we can now improve the program that draws different figures.
                    Can you figure out how far the turtle has to turn here? Finish the code and you can draw any polygon you'd like!
                example_code_2: |
                    ## Example Hedy code

                    ```
                    angles = {ask} 'How many angles should I draw?'
                    angle = 360 / angles
                    {repeat} angle {times}
                        {turn} _
                        {forward} _
                    ```
                start_code: |
                    hoeken = {ask} 'How many angles should I draw?'
            7:
                example_code: |
                    ## Example Hedy code

                    ```
                    {print} 'Draw figures'
                    {repeat} 3 {times} {forward} 10
                    ```
                start_code: |
                    {print} 'Draw figures'
                    {repeat} 3 {times} {forward} 10
                story_text: |
                    ## Let's draw
                    In this level you can repeat one line of code with `{repeat}`.
            6:
                example_code: |
                    ## Example Hedy code

                    ```
                    angles = {ask} 'How many angles do you want?'
                    angle = 360 / angles
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    ```
                start_code: |
                    {print} 'Drawing figures'
                story_text: |
                    ## Let's draw
                    In this level you can use calculations to draw different figures.
                    You may have learned in school that turning a full circle is 360 degrees. If not, now you know!
                    That's why you also use 90 degrees for a square. 360 divided by 4 is 90.
                    Now that we can do math with Hedy, we can draw all the figures we want!
        name: Turtle
        description: Make your own drawing
        image: turtle.gif
        default_save_name: turtle
    dishes:
        name: Dishes?
        levels:
            10:
                example_code: |
                    ## Example Hedy code
                    ```
                    days = Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
                    names = mom, dad, Emma, Sophie
                    {for} day {in} days
                        {print} names {at} {random} ' does the dishes on ' day
                    ```
                story_text: |
                    ## Dishwashing
                    In this level you could make an even better dish washing shedule.
                start_code: '# place your code here'
            7:
                story_text: |
                    ## Dishwashing
                    With the `{repeat}` you can repeat pieces of code. You can use this to calculate who will be washing dishes for the entire week.
                start_code: "{print} 'Who does the dishes?'"
                example_code: |
                    ## Example Hedy code

                    ```
                    people = mom, dad, Emma, Sophie
                    {repeat} _ _ {print} 'the dishwasher is' _
                    ```
            6:
                example_code: |
                    ## Example Hedy code

                    ```
                    people = mom, dad, Emma, Sophie
                    emma_washes = 0
                    dishwasher = people {at} {random}
                    {print} 'The dishwasher is' dishwasher
                    {if} dishwasher {is} Emma emma_washes = emma_washes + 1
                    {print} 'Emma will do the dishes this week' emma_washes 'times'
                    ```

                    Now you can copy lines 3 to 5 a few times (e.g. 7 times for a whole week) to calculate for a whole week again.
                    Do you make the code for the whole week?
                story_text: |
                    ## Dishwashing
                    How often is everyone going to do the dishes? Is that fair? You can count it in this level.
                story_text_2: |
                    ## Make it fair
                    If you are extremely unlucky the previous program might choose you to to the dishes for the whole week! That's not fair!
                    To create a fairer system you can use the `{remove}` command to remove the chosen person from the list. This way you don't have to do the dishes again untill everybody has had a turn.

                    Monday and tuesday are ready for you! Can you add the rest of the week?
                    And... can you come up with a solution for when your list is empty?
                example_code_2: |
                    ```
                    people = mom, dad, Emma, Sophie
                    dishwasher = people {at} {random}
                    {print} 'Monday the dishes are done by: ' dishwasher
                    {remove} dishwasher {from} people
                    dishwasher = people {at} {random}
                    {print} 'Tuesday the dishes are done by: ' dishwasher
                    {remove} dishwasher {from} people
                    dishwasher = people {at} {random}
                    ```
                start_code: "{print} 'Who does the dishes?'"
            5:
                story_text: |
                    ## Dishwashing
                    With the `{if}` you can now have more fun with choice in the program. You can have your program respond to the choice that the computer has made.

                    Can you finish the code so that it prints 'too bad' when it is your turn and otherwise 'yes!'?
                    Don't forget the quotes!
                example_code: |
                    ## Example Hedy code

                    ```
                    people {is} mom, dad, Emma, Sophie
                    dishwasher {is} people {at} {random}
                    {if} dishwasher {is} Sophie {print} _ too bad I have to do the dishes _ {else} {print} 'luckily no dishes because' _ 'is already washing up'
                    ```
                start_code: "{print} 'Who does the dishes?'"
            4:
                story_text: |
                    ## Dishwashing
                    With quotation marks you can make your dishwashing planning more beautiful.
                    This time the sample code is not quite complete.

                    Can you complete the code by filling the blanks? Every blank must be replaced with one word of symbol.

                    Tip: Don't forget the quotation marks!
                example_code: |
                    ## Example Hedy code

                    ```
                    people {is} mom, dad, Emma, Sophie
                    {print} _ the dishes are done by _
                    {sleep}
                    {print} people {at} _
                    ```
                start_code: "{print} 'Who does the dishes?'"
            3:
                story_text: |
                    ## Dishwashing
                    Do you always disagree at home about who should wash the dishes or change the litter box today?
                    Then you can let the computer choose very fairly. You can program that in this level!
                    You first make a list of the members of your family. Then choose '{at} {random}' from the list.
                example_code: |
                    ## Example Hedy code

                    ```
                    people {is} mom, dad, Emma, Sophie
                    {print} people {at} {random}
                    ```
                    ## Hack the dishwashing program!
                    Don't feel like doing the dishes yourself? Hack the program to remove your name from the list.

                    ```
                    people {is} mom, dad, Emma, Sophie
                    your_name {is} {ask} Who are you?
                    {remove} your_name {from} people
                    {print} people {at} {random} does the dishes
                    ```
                start_code: '{print} Who does the dishes?'
                story_text_2: "## Hack the dishwashing program!\nDon't feel like doing the dishes yourself? Hack the program to remove your name from the list.\n"
                example_code_2: "```\npeople {is} mom, dad, Emma, Sophie\nyour_name {is} {ask} Who are you?\n{remove} your_name {from} people\n{print} people {at} {random} does the dishes\n```\n"
        image: dishes.png
        default_save_name: Dishes
        description: Use the computer to see who does the dishes (Start at level 2)
    dice:
        levels:
            5:
                story_text: |
                    ## Dice
                    You can also make a die again in this level using the `{if}`.
                    Complete the sample code so that the code says "You can stop throwing" once you have thrown an earthworm.

                    But maybe you want to recreate a die from a completely different game. That's fine too! Then make up your own reaction. Eg 'yes' for 6 and 'pity' for something {else}.
                start_code: "{print} 'What will the die indicate this time?'"
                example_code: |
                    ## Example Hedy code

                    ```
                    choices {is} 1, 2, 3, 4, 5, earthworm
                    throw {is} _
                    {print} 'you have' _ 'thrown'
                    {if} _ {is} earthworm {print} 'You can stop throwing.' _ {print} 'You have to hear it again!'
                    ```
            4:
                story_text: |
                    ## Dice
                    In this level we can make sentences with the die value in the sentence, with quotes of course.
                    This time the sample code is not quite complete. Can you finish the code?
                example_code: |
                    ## Example Hedy code

                    ```
                    choices {is} 1, 2, 3, 4, 5, earthworm
                    {print} _ you threw _
                    {print} _ _ _ <- here you have to program the choice
                    ```
                start_code: "{print} 'What will the die indicate this time?'"
            3:
                story_text: |
                    ## Dice
                    In this level we can choose from a list. With that we can let the computer choose one side of the die.
                    Take a look at the games you have in your closet at home.
                    Are there games with a (special) die? You can also copy it with this code.
                    For example, the dice of the game Earthworms with the numbers 1 to 5 and an earthworm on it.

                    ![Die of earthworms with 1 to 5 and an earthworm on it](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/content/img/dobbelsteen.jpeg)
                example_code: |
                    ## Example Hedy code

                    ```
                    choices {is} 1, 2, 3, 4, 5, earthworm
                    {print} choices {at} {random}
                    ```
                start_code: '{print} What will the die indicate this time?'
            10:
                story_text: |
                    ## Dice
                    Is everybody taking too long throwing the dice? In this level you can let Hedy throw all the dice at once!
                example_code: |
                    ## Example Hedy code

                    ```
                    players = Ann, John, Jesse
                    choices = 1, 2, 3, 4, 5, 6
                    {for} player {in} players
                        {print} player ' throws ' choices {at} {random}
                        {sleep}
                    ```
                start_code: '# place your code here'
            7:
                story_text: |
                    ## Dice
                    You can also make a die again in level 5. With the `{repeat}` code you can easily roll a whole hand of dice.
                    Try to finish the sample code! The dashes should contain multiple commands and characters.

                    But maybe you want to make a completely different die. Of course you can!
                example_code: |
                    ## Example Hedy code

                    ```
                    choices = 1, 2, 3, 4, 5, earthworm
                    {repeat} _ _ {print} _ _ _
                    ```
                start_code: "{print} 'What will the die indicate this time?'"
            6:
                story_text: |
                    ## Dice
                    You can also make an Earthworm die again in this, but now you can also calculate how many points have been rolled.
                    You may know that the worm counts 5 points for Earthworms. Now after a roll you can immediately calculate how many points you have thrown.
                    This is the code to calculate points for one die:
                example_code: |
                    ## Example Hedy code

                    ```
                    choices = 1, 2, 3, 4, 5, earthworm
                    points = 0
                    throw = choices {at} {random}
                    {print} 'you threw' throw
                    {if} throw {is} earthworm points = points + 5 {else} points = points + throw
                    {print} 'those are' points ' point'
                    ```
                    Can you make the code so that you get the total score for 8 dice? To do that, you have to cut and paste some lines of the code.
                example_code_2: |
                    ## Looking forward

                    Did you manage to calculate the score for 8 dice? That required a lot of cutting and pasting, right? We are going to make that easier in level 7!
                start_code: "{print} 'What will the die indicate this time?'"
            15:
                story_text: |
                    ## Dice
                    In this game you have to throw 6 in as little tries as possible.
                example_code: |
                    ## Example Hedy code

                    ```
                    options = 1, 2, 3, 4, 5, 6
                    {print} 'Throw 6 as fast as you can!'
                    thrown = 0
                    tries = 0
                    {while} thrown != 6
                        thrown = options {at} {random}
                        {print} 'You threw ' thrown
                        tries = tries + 1
                    {print} 'Yes! You have thrown 6 in ' tries ' tries.'
                    ```
                start_code: '# place your code here'
        name: Dice
        description: Make your own dice
        image: dice.png
        default_save_name: Dice
    rock:
        default_save_name: Rock
        levels:
            1:
                story_text: |
                    ## Rock, paper, scissors
                    In level 1 you can start with a rock, paper, scissors  game.

                    With `{ask}` you can make a choice, and with `{echo}` you can repeat that choice.
                example_code: |
                    ## Example Hedy code


                    ```
                    {print} what do you choose?
                    {ask} choose {from} rock, paper or scissors
                    {echo} so your choice was:
                    ```
                    Instead of using words, you could also use emojis of course: тЬКтЬЛтЬМ
                start_code: '{print} Welcome to your own rock scissors paper!'
            10:
                story_text: |
                    ## Rock, Paper, Scissors
                    Feeling too lazy to play the game yourself? Let Hedy play it for you!
                example_code: |
                    ## Example Hedy code

                    ```
                    choices = rock, paper, scissors
                    players = Marleen, Michael
                    {for} player {in} players
                         {print} player ' chooses ' choices {at} {random}
                    ```
                start_code: '# place your code here'
            9:
                example_code: |
                    ## Example Hedy code

                    ```
                    choices {is} rock, paper, scisscors
                    your_choice {is} {ask} 'What do you choose?'
                    {print} 'You choose ' your_choice
                    computer_choice {is} choices {at} {random}
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} 'rock'
                        {if} your_choice {is} 'paper'
                            {print} 'You win!'
                        {if} your_choice {is} 'scissors'
                            {print} 'You lose!'
                    ```
                story_text: |
                    ## Rock, paper, scissors
                    In this level you can program the whole rock, paper, scissors game by nesting the {if}-commands. Can you finish the code?
                start_code: '# place your code here'
            5:
                story_text: |
                    ## Rock, paper, scissors
                    In this level we can determine who won.
                    For that you need the new `{if}` code.

                    Save your choice with the name of choice and the choice of computer as computer choice.
                    Then you can use `{if}` to see {if} they are the same or different.
                    Will you finish the code?
                example_code: |
                    ## Example Hedy code

                    ```
                    options {is} rock, paper, scissors
                    computer_choice {is} _
                    choice {is} {ask} What do you choose?
                    {print} 'you chose ' _
                    {print} 'computer chose ' _
                    {if} _ {is} _ {print} 'tie!' {else} {print} 'no tie'
                    ```

                    Fill in the correct code on the blanks to see {if} it is a draw.
                start_code: "{print} 'Welcome to your own rock scissors paper!'"
            4:
                story_text: |
                    ## Rock, paper, scissors
                    In this level we can further program rock, paper, scissors. But {if} you want to add text, you have to use quotation marks here too.
                    Do you complete the code by entering the correct commands or characters on the underscores?
                example_code: |
                    ## Example Hedy code

                    ```
                    choices {is} rock, paper, scissors
                    {print} _ The computer chose: _ _ {at} _
                    ```
                start_code: "{print} 'Welcome to your own rock scissors paper!'"
            3:
                story_text: |
                    ## Rock, paper, scissors

                    In this level we can enter lists and choose things from them.
                    You first make a list with `{is}`. Then you can let the computer choose something from the list with `{at} {random}`.
                    For example, you can let the computer pick from rock, paper and scissors.
                start_code: '{print} Welcome to your own rock scissors paper!'
                example_code: |
                    ## Example Hedy code


                    ```
                    choices {is} rock, paper, scissors
                    {print} choices {at} {random}
                    ```
            2:
                story_text: |
                    ## Rock, paper, scissors
                    In this level you can practise using the variables, so that you can make the rock, paper, scissors game in the next level!
                example_code: |
                    ## Example Hedy code

                    ```
                    choice {is} _
                    {print} I choose choice
                    ```
                start_code: '# place your code here'
            15:
                story_text: |
                    ## Rock, Paper, Scissors
                    Play until you beat the computer! But first, finish the example code...
                example_code: |
                    ## Example Hedy code

                    ```
                    won = 'no'
                    options = 'rock', 'paper', 'scissors'
                    {while} won == 'no'
                        your_choice = {ask} 'What do you choose?'
                        computer_choice = options {at} {random}
                        {print} 'you chose ' your_choice
                        {print} 'the computer chose ' computer_choice
                        {if} computer_choice == your_choice
                            {print} 'Tie!'
                        {if} computer_choice == 'rock' {and} your_choice == 'scissors'
                            {print} 'You lose!'
                        {if} computer_choice == 'rock' {and} your_choice == 'paper'
                            {print} 'You win!'
                            won = 'yes'
                start_code: '# place your code here'
            13:
                story_text: |
                    ## Rock, paper, scissors
                    With the `{and}` command you can shorten your rock, paper, scissors code! Check out the example code below and try to finish it.
                example_code: |
                    ## Example Hedy code

                    ```
                    options = 'rock', 'paper', 'scissors'
                    your_choice = {ask} 'What do you choose?'
                    computer_choice = options {at} {random}
                    {print} 'You choose ' your_choice
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'paper'
                        {print} 'You win!'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'
                        {print} 'The computer wins!'
                    ```
                start_code: '# place your code here'
        name: Rock, paper, scissors
        description: Make your own rock, paper, scissors game
        image: rock.png
    calculator:
        levels:
            9:
                start_code: "{print} 'Welcome to this calculator!'"
                story_text: |
                    ## Calculator
                    In previous levels you've learned how to make a calculator, in this level you can expand that code and make it into a little maths game. Like this...
                example_code: |
                    ## Example Hedy code

                    ```
                    score = 0
                    {repeat} 10 {times}
                        numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number1 = numbers {at} {random}
                        number2 = numbers {at} {random}
                        correct_answer = number1 * number2
                        {print} 'What is ' number1 ' times ' number2 '?'
                        answer = {ask} 'Type your answer here...'
                        {print} 'Your answer is' answer
                        {if} answer {is} correct_answer
                            score = score + 1
                    {print} 'Great job! Your score is... ' score ' out of 10!'
                    ```
            6:
                start_code: "{print} 'Welcome to this calculator!'"
                story_text: |
                    ## Calculator
                    Now that you can calculate, you can also create a program to practice maths calculations. You can make up the calculations yourself, for example:
                example_code: |
                    ## Example Hedy code

                    ```
                    correct_answer = 11 * 27
                    answer = {ask} 'How much is 11 times 27?'
                    {if} answer {is} correct_answer {print} 'good job!'
                    {else} {print} 'Wrong! It was ' correct_answer
                    ```
                story_text_2: |
                    ## Random numbers
                    You can also let the computer do random sums on its own using random.
                    This is how you choose a number of tables to practice, and from that you always get a different sum:
                example_code_2: |
                    ## Example Hedy code

                    ```
                    tables = 4, 5, 6, 8
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    table = tables {at} {random}
                    number = numbers {at} {random}
                    correct_answer = table * number
                    answer = {ask} 'how much is ' table ' times ' number '?'
                    {if} answer {is} correct_answer {print} 'okay'
                    {else} {print} 'mistake! it was ' correct_answer
                    ```
            14:
                story_text: |
                    ## Guess which number
                    In this level you can programm the game 'Guess which number'
                example_code: |
                    ## Example Hedy code

                    ```
                    {print} 'Guess which number'
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number = numbers {at} {random}
                    game = 'on'
                    {for} i {in} {range} 1 {to} 10
                        {if} game == 'on'
                            guess = {ask} 'Which number do you think it is?'
                            {if} guess > number
                                {print} 'Lower!'
                            {if} guess < number
                                {print} 'Higher!'
                            {if} guess == number
                                {print} 'You win!'
                                game = 'over'
                start_code: '# place your code here'
            12:
                story_text: |
                    ## Calculator
                    Now you can make a calculator that works for decimal numbers.
                example_code: |
                    ## Example Hedy code

                    ```
                    number1 = {ask} 'What is the first number?'
                    number2 = {ask} 'What is the second number?'
                    answer = number1 + number2
                    {print} number1 ' plus ' number2 ' is ' answer
                start_code: '# place your code here'
            10:
                story_text: |
                    ## Calculator
                    This calculator game helps you practise your tables of multiplication!
                    If you add more numbers to the list, you can practise all the multiplications.
                example_code: |
                    ## Example Hedy code

                    ```
                    numbers = 1, 2, 3
                    {for} number1 {in} numbers
                        {for} number2 {in} numbers
                            answer = {ask} 'How much is ' number2 ' times ' number1 '?'
                            correct = number1 * number2
                            {if} answer {is} correct
                                {print} 'Great job!'
                            {else}
                                {print} 'Thats wrong. The right answer is ' correct
                    ```
                start_code: '# place your code here'
            15:
                story_text: |
                    ## Calculator
                    You can add the `{while}` loop to the calculator game you've learned to make in a previous level.
                    This makes sure the player can't continue to the next question {if} they answer incorrectly.
                example_code: |
                    ## Example Hedy code

                    ```
                    score = 0
                    {for} i {in} {range} 0 {to} 9
                        numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number1 = numbers {at} {random}
                        number2 = numbers {at} {random}
                        correct = number1 * number2
                        answer = 0
                        {while} answer != correct
                            {print} 'How much is ' number1 ' times ' number2 '?'
                            answer = {ask} 'Fill in your answer:'
                            {print} 'Your answer is ' answer
                        {print} 'Good job!'
                    {print} 'You win!'
                    ```
                start_code: '# place your code here'
        name: Calculator
        description: Create a calculator
        image: calculator.png
        default_save_name: Calculator
    restaurant:
        levels:
            10:
                story_text: |
                    ## Restaurant
                    In this level you'll learn how to easily {ask} your guests' orders in a short code.
                example_code: |
                    ## Example Hedy code

                    ```
                    courses = appetizer, main course, dessert
                    {for} course {in} courses
                        food = {ask} 'What would you like to eat as your ' course '?'
                        {print} food ' will be your ' course
                    ```
                story_text_2: |
                    ## Example Hedy code

                    Of course, you could also order for multiple people!
                example_code_2: |
                    ```
                    courses = appetizer, main course, dessert
                    names = Timon, Onno
                    {for} name {in} names
                        {for} course {in} courses
                            food = {ask} name ', what would you like to eat as your ' course '?'
                            {print} name ' orders ' food ' as their ' course
                    ```
                start_code: courses = appetizer, main course, dessert
            15:
                story_text: |
                    ## Restaurant
                    With the `{while}` you can make sure your costumers can keep adding orders until they are done.
                example_code: |
                    ## Example Hedy code

                    ```
                    {print} 'Welcome at McHedy'
                    more = 'yes'
                    {while} more == 'yes'
                        order = {ask} 'What would you like to order?'
                        {print} order
                        more = {ask} 'Would you like to order anything {else}?'
                    {print} 'Thank you!'
                start_code: '# place your code here'
            1:
                story_text: |
                    ## Restaurant
                     In level 1 you can make your own virtual restaurant and take your guests' orders.
                example_code: |
                    ## Example Hedy code

                      ```
                     {print} Welcome to Hedy's restaurant ЁЯНЯ
                     {ask} What would you like to order?
                     {echo} So you would like to order
                     {print} Thanks you for your order!
                     {print} It's on its way!
                     ```

                    ## Challenge
                    Can you think of more lines to add to your restaurant code? For example, can you {ask} the guests what they'd like to drink, tell them the price, or wish them a pleasant meal?
                start_code: '# place your code here'
                story_text_2: "## Challenge\nCan you think of more lines to add to your restaurant code? For example, can you {ask} the guests what they'd like to drink, tell them the price, or wish them a pleasant meal?\n"
            2:
                story_text: |
                    ## Restaurant
                    In level 2 you could expand your restaurant by using variables. In level 1 Hedy could only {echo} the order once and only remember the last thing that was ordered.
                    Now you can use variables and Hedy can remember both the food and the drinks!
                example_code: |
                    ## Example Hedy Code
                    ```
                    {print} Welcome to Hedy's restaurant!
                    {print} Today we're serving pizza or lasagna.
                    food {is} {ask} What would you like to eat?
                    {print} Great choice! The food is my favorite!
                    topping {is} {ask} Would you like meat or veggies on that?
                    {print} food with topping is on its way!
                    drinks {is} {ask} What would you like to drink with that?
                    {print} Thank you for your order.
                    {print} Your food and drinks will be right there!
                    ```
                start_code: '# place your code here'
            12:
                story_text: |
                    ## Restaurant
                    From this level on you can use decimal numbers to make you menu more realistic.
                example_code: |
                    ## Example Hedy code

                    ```
                    price = 0
                    food = {ask} 'What would you like to order?'
                    drinks = {ask} 'What would you like to drink?'
                    {if} food {is} 'hamburger'
                        price = price + 6.50
                    {if} food {is} 'pizza'
                        price = price + 5.75
                    {if} drinks {is} 'water'
                        price = price + 1.20
                    {if} drink {is} 'soda'
                        price = price + 2.35
                    {print} 'That will be ' price ' dollar, please'
                    ```
                start_code: '# place your code here'
            11:
                story_text: |
                    ## Restaurant
                    We can use the `{for} i {in} {range} 1 {to} 5` to {print} the orders from multiple customers in an orderly manner.
                example_code: |
                    ## Example Hedy code

                    ```
                    {print} 'Welcome to Restaurant Hedy!'
                    people = {ask} 'For how many people would you like to order?'
                    {for} i {in} {range} 1 {to} people
                        {print} 'Order number ' i
                        food = {ask} 'What would you like to eat?'
                        {print} food
                        {if} food {is} fries
                            sauce = {ask} 'What kind of sauce would you like with that?'
                            {print} sauce
                        drinks = {ask} 'What would you like to drink?'
                        {print} drinks
                    price = 4 * people
                    {print} 'That will be ' price ' dollars, please!'
                    ```
                start_code: '# place your code here'
            9:
                story_text: |
                    ## Restaurant
                    In this level you can use nesting to make your restaurant more realistic and more fun!
                    For example you would {ask} for sauce {if} somebody orders fries, but you wouldn't {if} someone orders pizza!
                    Check out the example, and try this at your own virtual restaurant!
                example_code: |
                    ## Example Hedy code

                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people will be joining us today?'
                    {print} 'Great!'
                    price = 0
                    {repeat} people {times}
                        food = {ask} 'What would you like to order?'
                        {print} food
                        {if} food {is} fries
                            price = price + 3
                            sauce = {ask} 'What kind of sauce would you like with your fries?'
                            {if} sauce {is} no
                                {print} 'no sauce'
                            {else}
                                price = price + 1
                                {print} 'with ' sauce
                        {if} food {is} pizza
                            price = price + 4
                    {print} 'That will be ' price ' dollar'
                    {print} 'Enjoy your meal!'
                    ```
                start_code: '# place your code here'
            8:
                story_text: |
                    ## Restaurant
                    In this level you can make your virtual restaurant more elaborate by repeating multiple lines of code. Like this:
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people will be joining us today?'
                    {print} 'Great!'
                    {repeat} people {times}
                        food = {ask} 'What would you like to order?'
                        {print} food
                    {print} 'Thank you for ordering!'
                    {print} 'Enjoy your meal!'
                    ```

                    ## Challenge
                    Of course, this code can be expanded with more items on the menu, offering drinks, and/or multiple courses, so feel free to add as many options as you like!
                start_code: '# place your code here'
                story_text_2: "## Challenge\nOf course, this code can be expanded with more items on the menu, offering drinks, and/or multiple courses, so feel free to add as many options as you like!\n"
            7:
                story_text: |
                    ## Restaurant
                    In this level you've learned how to use the {repeat} command to repeat a line of code a certain amount of times.
                    You can use that in your restaurant to {ask} multiple people what they'd like to eat. Like this:

                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people are joining us today?'
                    {repeat} people times food = {ask} 'What would you like to eat?'
                    {print} 'Thanks for your order! Its coming right up!'
                    ```
                start_code: '# place your code here'
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\npeople = {ask} 'How many people are joining us today?'\n{repeat} people times food = {ask} 'What would you like to eat?'\n{print} 'Thanks for your order! Its coming right up!'\n```\n"
            6:
                story_text: |
                    ## Restaurant
                    In this level you can use maths to calculate the total price of your customer's order, which can make your virtual restaurant more realistic.
                example_code: |
                    ## Example Hedy code (Simple)
                    You can make a simple restaurant code, like this:
                    ```
                    {print} 'Welcome to Hedys restaurant'
                    {print} 'Here is our menu:'
                    {print} 'Our main courses are pizza, lasagne, or spaghetti'
                    main = {ask} 'Which main course would you like?'
                    price = 0
                    {if} main {is} pizza price = 10
                    {if} main {is} lasagne price = 12
                    {if} main {is} spaghetti price = 8
                    {print} 'You have ordered ' main
                    {print} 'That will be ' price ' dollars, please'
                    {print} 'Thank you, enjoy your meal!'
                    ```
                story_text_2: |
                    But you can also add many more things to your virtual restaurant, for example more courses.
                example_code_2: |
                    ## Example Hedy code(Elaborate)
                    In this example there are three courses, which requires more code and more additions in calculating the price.
                    ```
                    {print} 'Welcome to Hedys restaurant'
                    {print} 'Here is our menu:'
                    {print} 'Our starters are salad, soup, or carpaccio'
                    {print} 'Our main courses are pizza, lasagne, or spaghetti'
                    {print} 'Our desserts are brownie, icecream, or milkshake'
                    starter = {ask} 'Which starter would you like to have?'
                    main = {ask} 'Which main course would you like?'
                    dessert = {ask} 'Which dessert do you pick?'
                    price = 0
                    {if} starter {is} soup price = price + 6 {else} price = price + 7
                    {if} main {is} pizza price = price + 10
                    {if} main {is} lasagne price = price + 12
                    {if} main {is} spaghetti price = price + 8
                    {if} dessert {is} brownie price = price + 7
                    {if} dessert {is} icecream price = price + 5
                    {if} dessert {is} milkshake price = price + 4
                    {print} 'You have ordered ' starter ' , ' main ' and ' dessert
                    {print} 'That will be ' price ' dollars, please'
                    {print} 'Thank you, enjoy your meal!'
                    ```
                    ## Challenge
                    You can add many more things to your virtual restaurant. For example, can you...
                    - {ask} how many people are coming and multiply the price by that amount?
                    - add another course?
                    - give people a discount when they enter a (secret) couponcode?
                    - add a children's menu?
                    - think of other fun things to add?
                start_code: '# place your code here'
            5:
                story_text: |
                    ## Restaurant
                    In this level the {if} command allows you to {ask} your customers questions and give different responses to the answers.
                    In the example below, you see that you can {ask} the customer {if} they want to hear the specials and Hedy can respond accordingly.
                example_code: |
                    ## Example Hedy code

                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    special {is} {ask} 'Would you like to hear our specials today?'
                    {if} special {is} yes {print} 'Todays special is chicken piri piri and rice.' {else} {print} 'No problem.'
                    food {is} {ask} 'What would you like to eat?'
                    {print} 'One ' food ', coming right up!'
                    drink {is} {ask} 'What would you like to drink with that?'
                    {if} drink {is} cola {print} 'Im sorry, we are out of cola!' {else} {print} 'Great choice!'
                    anything {is} {ask} 'Would you like anything {else}?'
                    {print} 'Let me repeat your order...'
                    {print} 'One ' food
                    {if} drink {is} cola {print} 'and...' {else} {print} 'One ' drink
                    {if} anything {is} no {print} 'Thats it!' {else} {print} 'One ' anything
                    {print} 'Thank you for your order and enjoy your meal!'
                    ```

                    ## Challenge
                    Can you think of more questions to {ask} the customers when they are ordering, and make up different responses to their answers by using the {if} command?
                start_code: '# place your code here'
                story_text_2: "## Challenge\nCan you think of more questions to {ask} the customers when they are ordering, and make up different responses to their answers by using the {if} command?\n"
            4:
                story_text: |
                    ## Restaurant
                    In thsi level you have to use quotation marks when using the `{print}` command.
                    Can you make your code from the previous levels work in this level too by adding the quotation marks?

                    Be careful! In the previous levels apostrophes were allowed in the text, but in this level Hedy will confuse them for quotation marks and the code will not work!
                    So instead of typing  `{print} Today we're serving pizza` , you should type `{print} 'Today we are serving pizza'`

                    ## Example Hedy Restaurant
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    {print} 'Today we are serving pizza or lasagna.'
                    food {is} {ask} 'What would you like to eat?'
                    {print} 'Great choice! The ' food ' is my favorite!'
                    topping {is} {ask} 'Would you like meat or veggies on that?'
                    {print} food ' with ' topping ' is on its way!'
                    drinks {is} {ask} 'What would you like to drink with that?'
                    {print} 'Thank you for your order.'
                    {print} 'Your ' food ' and ' drinks ' will be right there!'
                    ```
                start_code: '# place your code here'
                example_code: "## Example Hedy Restaurant\n```\n{print} 'Welcome to Hedys restaurant!'\n{print} 'Today we are serving pizza or lasagna.'\nfood {is} {ask} 'What would you like to eat?'\n{print} 'Great choice! The ' food ' is my favorite!'\ntopping {is} {ask} 'Would you like meat or veggies on that?'\n{print} food ' with ' topping ' is on its way!'\ndrinks {is} {ask} 'What would you like to drink with that?'\n{print} 'Thank you for your order.'\n{print} 'Your ' food ' and ' drinks ' will be right there!'\n```\n"
            3:
                story_text: |
                    ## Random Restaurant
                    Having trouble to decide what you wanna have for dinner? You can let Hedy choose for you!
                    Simply add lists of your favorite (or least favorite) meals and Hedy can randomly choose your dinner.
                    You can also have a bit of fun, by letting Hedy choose the price for your dinner as well! What will you get?
                example_code: |
                    ## Example Hedy code

                    ```
                    {print} Welcome to Hedy's Random Restaurant!
                    {print} The only restaurant that will randomly choose your meal and its price for you!
                    starters {is} salad, soup, carpaccio
                    mains {is} pizza, brussels sprouts, spaghetti
                    desserts {is} brownies, ice cream, french cheeses
                    drinks {is} cola, beer, water
                    prices {is} 1 dollar, 10 dollars, 100 dollars
                    {print} You will start with: starters {at} {random}
                    {print} Then we'll serve: mains {at} {random}
                    {print} And as dessert: desserts {at} {random}
                    {print} You will get a drinks {at} {random} to drink
                    {print} That will be: prices {at} {random}
                    {print} Thank you and enjoy your meal!
                    ```
                story_text_2: |
                    ## Allergies
                    Does your costumer have any allergies or do they dislike certain dishes? Then you can use the `{remove}`command to remove it from your menu.
                example_code_2: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    allergies {is} {ask} Are you allergic to any falvors?
                    {remove} allergies {from} flavors
                    {print} You get a flavors {at} {random} milkshake
                    ```
                start_code: '# place your code here'
            13:
                story_text: |
                    ## Restaurant
                    In this level we can use the new commands to upgrade our restaurant.
                    We use `{and}` to see {if} two things are both the case.
                example_code: |
                    ## Example Hedy code
                    ```
                    price = 10
                    food = {ask} 'What would you like to eat?'
                    drinks = {ask} 'What would you like to drink?'
                    {if} food {is} 'sandwich' {and} drinks {is} 'juice'
                        {print} 'Thats our discount menu'
                        price = price - 3
                    {print} 'That will be ' price ' dollars'
                    ```
                story_text_2: |
                    We use `{or}` to see {if} one our of two things is the case.
                example_code_2: |
                    ## Example Hedy code
                    ```
                    drinks = {ask} 'What would you like to drink?'
                    {if} drinks {is} 'water' {or} drinks {is} 'juice'
                        {print} 'Thats a healthy choice'
                    ```
                start_code: '# place your code here'
        name: Restaurant
        description: Create your own virtual restaurant
        image: restaurant.png
        default_save_name: Restaurant
    fortune:
        levels:
            8:
                story_text: |
                    ## Fortune Teller
                    In the previous levels you've learned how to use repeat to make the fortune teller answer 3 questions in a row, but we had a problem with printing the questions.
                    Now that problem is solved, because of the new way of using the repeat command.
                    In the next example you can have your fortune teller {ask} 3 questions and also print them!
                example_code: |
                    ## Example Hedy code

                    ```
                    {print} 'I am Hedy the fortune teller!'
                    {print} 'You can {ask} me 3 questions.'
                    answers = yes, no, maybe
                    {repeat} 3 {times}
                       question = {ask} 'What do you want to know?'
                       {print} question
                       {sleep}
                       {print} 'My crystal ball says...' answers {at} {random}
                    ```
                start_code: '# place your code here'
            1:
                story_text: |
                    ## Fortune Teller
                    Have you ever been to a carnival and had your future predicted by a fortune teller? Or have you ever played with a magic eight ball?
                    Then you probably know that they can't really predict your future, but it's still fun to play!

                    In the upcoming levels you can learn how to create your own fortune telling machine!
                    In level 1 you can start off easy by letting Hedy introduce herself as a fortune teller and let her {echo} the players' answers.
                    Like this:
                example_code: |
                    ## Example Hedy code

                    ```
                    {print} Hello, I'm Hedy the fortune teller!
                    {ask} Who are you?
                    {print} Let me take a look in my crystal ball
                    {print} I see... I see...
                    {echo} Your name is
                    ```

                    ## Challenge
                    Hedy now only tells you your name. Can you expand the code so that Hedy can predict more things about you?

                    Obviously, Hedy isn't a very good fortune teller yet, as she can only repeat the answers that were given by the players!
                    Take a look in level 2 to improve your fortune teller.
                start_code: '# place your code here'
                story_text_2: "## Challenge\nHedy now only tells you your name. Can you expand the code so that Hedy can predict more things about you?\nObviously, Hedy isn't a very good fortune teller yet, as she can only repeat the answers that were given by the players!\nTake a look in level 2 to improve your fortune teller.\n"
            12:
                story_text: |
                    ## Fortune Teller
                    In this level you can make your fortunes multiple words. Like in this example below:
                example_code: |
                    ## Example Hedy code

                    ```
                    fortunes = 'you will be rich', 'you will fall in love', 'you will slip on a banana peel'
                    {print} 'I will take a look in my crystall ball for your future.'
                    {print} 'I see... I see...'
                    {sleep}
                    {print} fortunes {at} {random}
                    ```
                start_code: '# place your code here'
            10:
                example_code: |
                    ## Example Hedy code

                    ```
                    houses = mansion, apartment, shack, house
                    loves = nobody, a royal, their neighbour, their true love
                    pets = dog, cat, elephant
                    names = Jenna, Ryan, Jim
                    {for} name {in} names
                        {print} name ' lives in a ' houses {at} {random}
                        {print} name ' will marry ' loves {at} {random}
                        {print} name ' will get a ' pets {at} {random} ' as their pet.'
                        {sleep}
                    ```
                story_text_2: We can also make a Harry Potter themed fortune teller.
                story_text: |
                    ## Fortune Teller
                    In this level you'll learn how to program the game MASH (mansion, apartement, shack, house). In this game you can predict for all the players at once, what their future will look like.
                example_code_2: |
                    ## Example Hedy code
                    ```
                    houses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    subjects = potions, defence against the dark arts, charms, transfiguration
                    fears = Voldemort, spiders, failing your OWL test
                    names = Harry, Ron, Hermione
                    {for} name in names
                        {print} name ' is placed in ' houses {at} {random}
                        {print} name ' is great at ' subjects {at} {random}
                        {print} name 's greatest fear is ' fears {at} {random}
                    ```
                start_code: '# place your code here'
            7:
                story_text: |
                    ## Fortune Teller
                    In this level you can use the `{repeat}` command to make your machine tell multiple fortunes at once.
                example_code: |
                    ## Example Hedy code

                    ```
                    {print} 'Im Hedy the fortune teller!'
                    {print} 'You can {ask} 3 questions!'
                    {repeat} 3 {times} question = {ask} 'What do you want to know?'
                    answer = yes, no, maybe
                    {repeat} 3 {times} {print} 'My crystal ball says... ' answer {at} {random}
                    ```

                    ## Challenge
                    As you can see, the questions aren't printed in this example. That's because the variable `question` was changed 3 times.
                    Every time the player fills in the new answer, Hedy overwrites the previous one, so the first answer the player gave is forgotten.
                    This means you can't print all the questions this way.

                    By using 3 different variables instead of 1 (for example `question1` , `question2` and `question3`), you could solve the problem and print the questions.
                    This does mean that you can only use `{repeat}` for the answers, and you will have to ask and print all the questions separately.
                    Can you do it?

                    In the upcoming levels the layout of {repeat} command will change, which enables you to repeat multiple lines at once.
                start_code: '# place your code here'
                story_text_2: "## Challenge\nAs you can see, the questions aren't printed in this example. That's because the variable `question` was changed 3 times.\nEvery time the player fills in the new answer, Hedy overwrites the previous one, so the first answer the player gave is forgotten.\nThis means you can't print all the questions this way.\n\nBy using 3 different variables instead of 1 (for example `question_1` , `question_2` and `question_3`), you could solve the problem and print the questions.\nThis does mean that you can only use `{repeat}` for the answers, and you will have to ask and print all the questions separately.\nCan you do it?\n\nIn the upcoming levels the layout of {repeat} command will change, which enables you to repeat multiple lines at once.\n"
            5:
                story_text: |
                    ## Fortune Teller
                    In thsi level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!
                    By using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.
                    Check out this example to find out how.
                example_code: |
                    ## Example Hedy code

                    ```
                    {print} 'Im Hedy the fortune teller!'
                    {print} 'I can predict {if} youll win the lottery tomorrow!'
                    person {is} {ask} 'Who are you?'
                    {if} person {is} Hedy {print} 'You will definitely win!ЁЯдй' {else} {print} 'Bad luck! Someone {else} will win!ЁЯШн'
                    ```
                story_text_2: |
                    Replace Hedy with your own name in the last line, and Hedy will always predict that you will win the lottery and others won't!
                    Of course this might raise some suspicion with the other players... To avoid that, you can make sure that Hedy does give different answers every time you run the code.
                    But of course, still gives you a positive answer and the other players a negative one.
                example_code_2: |
                    ## Example Hedy code
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    {print} 'I can predict {if} you will win the lottery tomorrow!'
                    person {is} {ask} 'Who are you?'
                    goodanswer {is} Hurray! You win!, You will definitely win!, We have a winner!
                    badanswer {is} Bad luck! Try again!, Another person will win, You lose!
                    {if} person {is} Hedy {print} goodanswer {at} {random} {else} {print} badanswer {at} {random}
                    ```

                    ## Challenges
                    This concept can be used to make may different programs, just be creative! For example you could create a machine that predicts that your favorite sports team will beat all the competitors!
                    Or you could make  Snow White's magic mirror on the wall, to tell everyone you are the fairest of them all!
                    Let your imagination do the work!
                start_code: '# place your code here'
                story_text_3: "## Challenges\nThis concept can be used to make may different programs, just be creative! For example you could create a machine that predicts that your favorite sports team will beat all the competitors!\nOr you could make  Snow White's magic mirror on the wall, to tell everyone you are the fairest of them all!\nLet your imagination do the work!\n"
            6:
                story_text: |
                    ## Fortune Teller
                    In this level you can use math in your predictions as a fortune teller. This allows you to make up (silly) formulas to calculate the future.
                    For example you could calculate how rich you'll get or how many kids you will have when you grow up.
                example_code: |
                    ## Example Hedy code

                    ```
                    {print} 'I am Hedy the fortune teller!'
                    {print} 'I can predict how many kids youll get when you grow up!'
                    age = {ask} 'How old are you?'
                    siblings = {ask} 'How many siblings do you have?'
                    length = {ask} 'How tall are you in centimetres?'
                    kids = length / age
                    kids = kids - siblings
                    {print} 'You will get ...'
                    {sleep}
                    {print} kids ' kids!'
                    ```

                    ## Example Silly Fortune Teller
                    If the previous example wasn't silly enough for you, take a look at this one!

                    ```
                    {print} 'Im Hedy the silly fortune teller!'
                    {print} 'I will predict how smart you are!'
                    football = {ask} 'On a scale 1-10 how much do you love football?'
                    bananas = {ask} 'How many bananas did you eat this week?'
                    hygiene = {ask} 'How many times did you wash your hands today?'
                    result = bananas + hygiene
                    result = result * football
                    {print} 'You are ' result ' percent smart.'
                    ```
                start_code: '# place your code here'
            4:
                story_text: |
                    ## Fortune Teller
                    This level has no new functions, but allows you to practice with using the quotation marks.
                    You can remake your level 3 code, and make sure to add the quotation marks in the right places!

                    Mind that in level 3, we couldn't use the word 'question' as both the name of the variable and a normal word that could be printed.
                    The quotation marks in level 3 make this possible!

                    Important! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.
                    Make sure to remove those apostrophes and change the spelling to Im or Whats.
                example_code: |
                    ## Example Hedy code

                    ```
                    {print} 'Im Hedy the fortune teller!'
                    question {is} {ask} 'What do you want to know?'
                    {print} 'This is your question: ' question
                    answers {is} yes, no, maybe
                    {print} 'My crystal ball says...'
                    {sleep} 2
                    {print} answers {at} {random}
                    ```
                start_code: '# place your code here'
            3:
                story_text: |
                    ## Fortune Teller
                    In the previous levels you've created your first fortune telling machine, but Hedy couldn't really predict anything, only {echo}.
                    In this level you can use a variable and the `{at} {random}` command to really let Hedy choose an answer for you. Check out this code for instance:
                example_code: |
                    ## Example Hedy code

                    In this example the player can {ask} Hedy a yes-no question and Hedy will pick a random answer for you.
                    ```
                    {print} IтАЩm Hedy the fortune teller!
                    question {is} {ask} What do you want to know?
                    {print} This is what you want to know: question
                    answers {is} yes, no, maybe
                    {print} My crystal ball says...
                    {sleep} 2
                    {print} answers {at} {random}
                    ```

                    ## Challenges
                    Now, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or '{ask} again'.
                start_code: '# place your code here'
                story_text_2: "## Challenges\nNow, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or '{ask} again'.\n"
        name: Fortune teller
        description: Let Hedy predict the future
        image: fortuneteller.png
        default_save_name: Fortune Teller
    piggybank:
        levels:
            12:
                example_code: |
                    ## Example Hedy code

                    ```
                    {print} 'The digital piggy bank'
                    wish = {ask} 'What would you like to buy?'
                    price = {ask} 'How much does that cost?'
                    saved = {ask} 'How much money have you saved already?'
                    allowance = {ask} 'How much pocket money do you get per week?'
                    to_save = price - saved
                    weeks = to_save / allowance
                    {print} 'You can buy a ' wish ' in ' weeks ' weeks.'
                story_text: |
                    ## Piggy Bank
                    In this adventure you learn how to make a digital piggy bank, to calculate how much money you have and how long you need to save up to buy what you want!
                start_code: '# place your code here'
            14:
                story_text: |
                    ## Piggybank
                    In this level you can let Hedy tell you {if} you have saved up enough money!
                example_code: |
                    ## Example Hedy code

                    ```
                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'
                    to_save = wish - money
                    weeks = to_save / allowance
                    {if} wish > money
                        {print} 'You need to save up some more!'
                        {print} 'Youll need ' weeks ' more weeks.'
                    {else}
                        {print} 'Great! You have enough'
                        {print} 'Lets go shopping!'
                    ```
                start_code: '# place your code here'
        name: Piggy Bank
        description: Count your pocketmoney!
        image: piggy.png
        default_save_name: Piggy Bank
    quizmaster:
        name: Quizmaster
        description: Make your own quiz!
        image: quizmaster.png
        default_save_name: Quizmaster
        levels:
            14:
                story_text: |
                    ## Make your own quiz
                    In this adventure you can make your own quiz! Fill in the blanks, add more questions and enjoy your own quiz!
                    You can make a quiz about anything you like: your hobby, your favorite animal, your favorite book or anything at all!
                example_code: |
                    ## Example Hedy code

                    ```
                    {print} 'Make your own quiz'
                    points_a = 0
                    points_b = 0
                    {print} 'Question'
                    {print} 'Answer option A'
                    {print} 'Answer option B'
                    answer = {ask} 'Which answer?'
                    {if} answer == 'A'
                        points_a = points_a + 1
                    {if} answer == 'B'
                        points_b = points_b + 1
                    {print} 'End of the quiz!'
                    {print} 'Lets see the results!'
                    {if} points_a > points_b
                        {print} 'You belong to the A club'
                    {if} points_b > points_a
                        {print} 'You belong to the B club'
                    ```
                start_code: '# place your code here'
    language:
        default_save_name: language
        name: Language
        description: Practice words in a foreign language
        image: languages.png
        levels:
            5:
                story_text: |
                    ## Learn a new language
                    Make your own program to practice your vocabulary in a new language.

                    ## Example Hedy code
                    ```
                    {print} 'Learn French!'
                    cat {is} {ask} 'ЁЯР▒'
                    {if} cat {is} chat {print} 'Terrific!'
                    {else} {print} 'No, cat is chat'
                    frog {is} {ask} 'ЁЯР╕'
                    {if} frog {is} grenouille {print} 'Super!'
                    {else} {print} 'No, frog is grenouille'
                    ```
                start_code: '# place your code here'
                example_code: "## Example Hedy code\n```\n{print} 'Learn French!'\ncat {is} {ask} '\U0001F431'\n{if} cat {is} chat {print} 'Terrific!'\n{else} {print} 'No, cat is chat'\nfrog {is} {ask} '\U0001F438'\n{if} frog {is} grenouille {print} 'Super!'\n{else} {print} 'No, frog is grenouille'\n```\n"
            16:
                story_text: |
                    ## Learn a new language
                    Make your own program to practice your vocabulary in a new language.
                example_code: |
                    ## Example Hedy code

                    ```
                    french_words = ['bonjour', 'ordinateur', 'pomme de terre']
                    translation = ['hello', 'computer', 'potato']
                    score = 0
                    {for} i {in} {range} 1 {to} 3
                        answer = {ask} 'What does ' french_words[i] ' mean?'
                        correct = translation[i]
                        {if} answer == correct
                            {print} 'Correct!'
                            score = score + 1
                        {else}
                            {print} 'Wrong, ' french_words[i] ' means ' translation[i]
                    {print} 'You gave ' score ' correct answers.'
                    ```
                start_code: '# place your code here'
    next:
        levels:
            5:
                start_code: "{print} 'On to the next level!'"
                story_text: |
                    ## What's next?
                    Now you've reached the end of this level, so you have learned `{ask}` and `{if}`. For example you can {ask} guests what they would like to eat.
                    What you can't yet do though, is calculate the price for everyone's dinner.

                    The next level makes it possible to use addition, subtraction and multiplication in your programs. This way you can calculate the prices in your restaurant, but you could also add a secret code to give your friends and family a discount.
                    Another option in the next level is programming your own maths game, for your little brother or sister to practice their multiplications.
                    Go see for yourself in the next level!
                    ```
                    {print} 'Welcome at McHedy'
                    order {is} {ask} 'What would you like to eat?'
                    {print} 'You would like ' order
                    {if} order {is} hamburger price {is} 5
                    {if} order {is} fries price {is} 2
                    drinks {is} {ask} 'What would you like to drink?'
                    {print} 'You would like ' drinks
                    {print} 'That will be ' price ' dollars for your ' order ' please'
                    {print} 'The drinks are free in this level because Hedy cant calculate the price yet...'
                    ```
                example_code: "## Free drinks!\n```\n{print} 'Welcome at McHedy'\norder {is} {ask} 'What would you like to eat?'\n{print} 'You would like ' order\n{if} order {is} hamburger price {is} 5\n{if} order {is} fries price {is} 2\ndrinks {is} {ask} 'What would you like to drink?'\n{print} 'You would like ' drinks\n{print} 'That will be ' price ' dollars for your ' order ' please'\n{print} 'The drinks are free in this level because Hedy cant calculate the price yet...'\n```\n"
            13:
                start_code: "{print} 'Lets go to the next level!'"
                story_text: |
                    ## What's next?
                    With the program below you can calulate {if} you've passed a subject at school (so, a grade of six or higher).
                    You can see this code is extremely inefficient, du to the very long code in line 5.
                    All the different grades from 1 to 5 had to be programmed seperately. Lucky for you, in the next level you'll learn how to do this without this extremely long code!
                    ```
                    first_grade = {ask} 'What score did you get on your first test?'
                    second_grade = {ask} 'What score did you get on your second test?'
                    added {is} first_grade + second_grade
                    mean_grade {is} added / 2
                    {if} mean_grade = 1 {or} mean_grade = 2 {or} mean_grade = 3 {or} mean_grade = 4 {or} mean_grade = 5
                        {print} 'Oh no! You have failed the subject...'
                    {else}
                        {print} 'Great! You have passed the subject!'
                    ```
                example_code: "## Example Hedy Code\n```\nfirst_grade = {ask} 'What score did you get on your first test?'\nsecond_grade = {ask} 'What score did you get on your second test?'\nadded {is} first_grade + second_grade\nmean_grade {is} added / 2\n{if} mean_grade = 1 {or} mean_grade = 2 {or} mean_grade = 3 {or} mean_grade = 4 {or} mean_grade = 5\n    {print} 'Oh no! You have failed the subject...'\n{else}\n    {print} 'Great! You have passed the subject!'\n```\n"
            14:
                start_code: "{print} 'Lets go to the next level!'"
                story_text: |
                    ## What's next?
                    In this game below a code has been made to make sure the player can play on as long as he/she wants...
                    But the code is ineffective and way too long. Also, what {if} the player wants to play 101 games instead of 100?
                    You can't play to infinity?
                    In the next level you will learn a command that makes all of this a lot easier!
                    ```
                    game {is} 'on'
                    {for} i {in} {range} 1 {to} 100
                        {if} game {is} 'on'
                            answer = {ask} 'Do you want to continue?'
                            {if} answer {is} 'no'
                                game {is} 'over'
                            {if} answer {is} 'yes'
                                {print} 'Ok we will continue'
                    ```
                example_code: "## Example Hedy Code\n```\ngame {is} 'on'\n{for} i {in} {range} 1 {to} 100\n    {if} game {is} 'on'\n        answer = {ask} 'Do you want to continue?'\n        {if} answer {is} 'no'\n            game {is} 'over'\n        {if} answer {is} 'yes'\n            {print} 'Ok we will continue'\n```\n"
            1:
                start_code: "{print} Let's go!"
                story_text: |
                    ## What's next?
                    Congratulations! You've reached the end of level 1. Hopefully you've already made some awesome codes, but Hedy has a lot more to discover. 

                    In the first level you might've notice that the `{echo}` command can only save one bit of information at a time. 
                    For example in the restaurant adventure, you could {echo} what the costumer wanted to eat, or what they wanted to drink, but not both in one sentence. 

                    ```
                    {print} Welcome at Hedy's
                    {ask} What would you like to eat?
                    {echo} So you want 
                    {ask} what would you like to drink?
                    {echo} So you want 
                    ```
                    If the player types a hamburger and coke, you can't say `so you would like a hamburger and coke`, but you have to make two separate line. 
                    Also, the `{echo}` command only echoes the word at the end of the sentence. So you can't say `your hamburger is coming right up!`.

                    That changes in level 2. In level 2 you'll learn to work with variables, that allow you to save multiple pieces of information and print them in any place you want.
                    Besides, you'll learn how to work with the `{at} {random}` command, that you can use to make games. 
                    So let's go to the next level!
                story_text_2: "If the player types a hamburger and coke, you can't say `so you would like a hamburger and coke`, but you have to make two separate line. \nAlso, the `{echo}` command only echoes the word at the end of the sentence. So you can't say `your hamburger is coming right up!`.\n\nThat changes in level 2. In level 2 you'll learn to work with variables, that allow you to save multiple pieces of information and print them in any place you want.\nBesides, you'll learn how to work with the `{at} {random}` command, that you can use to make games. \nSo let's go to the next level!\n"
                example_code: "## Example code\n```\n{print} Welcome at Hedy's\n{ask} What would you like to eat?\n{echo} So you want \n{ask} what would you like to drink?\n{echo} So you want \n```\n"
            2:
                story_text: |
                    ## What's next?
                    In this level you've learned what a variable is and how you can use it to make your adventures more interactive.
                    But... that's not the only thing you can do with variables! You can also use variables to make lists.
                    And you can even let Hedy pick a random word out of a list, which allows you to make real games!
                    Take a quick look at the next level!
                start_code: "{print} Let's go to the next level!"
            4:
                story_text: |
                    ## What's next?
                    In the previous levels you've already learned to use `{at} {random}` which made your games different every time you ran the code.
                    But it's not really interactive, the player doesn't have any influence on what happens in the game.

                    In the next level you'll learn the `{if}` command, that allows you to give different responses in your program. This way you can program a secret password for your computer for example.
                    So let's take a peak!

                    ```
                    password {is} {ask} 'What is the correct password?'
                    ```
                start_code: "{print} 'Lets go to the next level!'"
            3:
                story_text: |
                    ## What's next?
                    In this level you've been practising with variables, but maybe you've come across this mistake.

                    Try to run this code:
                    ```
                    name {is} Sophie
                    {print} My name is name
                    ```
                    Of course you wanted to print `My name is Sophie` but Hedy prints `My Sophie is Sophie`. 
                    In the next level this problem is fixed by using quotation marks.
                start_code: "{print} Let's go to the next level!"
            6:
                start_code: "{print} 'On to the next level!'"
                story_text: |
                    ## What's next?
                     Great job! You've reached the end of this level, which means you have practiced with `{if}` and `{else}`. You have probably noticed that your codes are getting longer and longer.
                     For example {if} you want to program 'Happy Birthday'

                     ```
                     {print} 'happy birthday to you'
                     {print} 'happy birthday to you'
                     {print} 'happy birthday dear Hedy'
                     {print} 'happy birthday to you'

                     ```
                     That's a lot of code for mainly the same words over and over again. Luckily in the next level has a solution with the `{repeat}` command, that allows you to repeat a line of code multiple times.
                example_code: "## Example Hedy Code\n ```\n {print} 'happy birthday to you'\n {print} 'happy birthday to you'\n {print} 'happy birthday dear Hedy'\n {print} 'happy birthday to you'\n ```\n"
            7:
                start_code: "{print} 'Lets go to the next level!'"
                story_text: |
                    ## What's next?
                    Now you've learned how to repeat one single line of code. This comes in handy, but it's not always enough. Sometimes you want to repeat multiple lines at once.
                    the next level allows you to group a couple of lines of code, and repeat that little group of lines all at once!

                    ```
                    {repeat} 5 {times} {print} 'In the next level you can repeat multiple lines of code at once!'
                    ```
                example_code: "## Example Hedy Code\n```\n{repeat} 5 {times} {print} 'In the next level you can repeat multiple lines of code at once!'\n```\n"
            8:
                start_code: "{print} 'Lets go to the next level!'"
                story_text: |
                    ## What's next?
                    Great job! You've reached the end of another level! In this level you've learned to use multiple lines of code in an {if} or {repeat} command. But you can't yet combine the two...
                    Good news! In the next level you will be allowed to put an {if} inside an {if}, or inside a {repeat} command.

                    For example:
                    ```
                    answer = {ask} 'Would you like to go to teh next level?'
                    {if} answer {is} 'yes'
                        {print} 'Great! You can use the {repeat} commando in the {if} command!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                    {else}
                        {print} 'Okay, you can stay here for a little longer!'
                    ```
                    In this code Hedy will still say 'Your drink is on its way' even {if} you didn't even want to drink something! In the next level this will be fixed!
                example_code: "## Example Hedy Code\n```\nanswer = {ask} 'Would you like to go to the next level?'\n{if} answer {is} yes\n    {print} 'Great! You can use the {repeat} commando in the {if} command!'\n    {print} 'Hooray!'\n    {print} 'Hooray!'\n    {print} 'Hooray!'\n{else}\n    {print} 'Okay, you can stay here for a little longer!'\n```\n"
            9:
                story_text: |
                    ## What's next?
                    You're doing great! In this level we still face a small problem. You have learned to repeat lines, but what {if} you'd want to slightly change the line.
                    For example {if} you want to sing the song '{if} you're happy and you knwo it'

                    It would look like this:
                    ```
                    {repeat} 2 {times}
                        {print} '{if} youre happy and you know it clap your hands'
                    {print} '{if} youre happy and you know it and you really want to show it'
                    {print} '{if} youre happy and you know it clap your hands'
                    ```

                    If you'd also want the next verse 'stomp your feet', and the next one, and the next one, you'd have to change the code completely.
                    In the next level you'll learn the `{for}` command, which allows you to make a list of actions and repeat the code with another action each time!
                    Please take a look!
                start_code: "{print} 'Lets go to the next level!'"
                example_code: "## Example Hedy Code\n```\n{repeat} 2 {times}\n    {print} '{if} youre happy and you know it clap your hands'\n{print} '{if} youre happy and you know it and you really want to show it'\n{print} '{if} youre happy and you know it clap your hands'\n```\n"
            10:
                story_text: |
                    ## What's next?
                    You have reached the end of this level, you're doing great! You are about to go to the next level. In the higher levels, Hedy is focussing more and more on teaching you the programming language Python.
                    In Python there is no `{repeat}` command, but there is a command that works like {repeat}. Are you curious to find out how to say `{repeat}` in Python language? Quickly go on to find out!
                start_code: "{print} 'Lets go to the next level!'"
            11:
                start_code: "{print} 'Lets go to the next level!'"
                story_text: |
                    ## What's next?
                    Maybe you have tried using decimal numbers in your restaurant adventure. If you did, you probably noticed that Hedy didn't understand them yet and always rounded off.
                    From the next level on you can use decimal numbers.

                    Another cool feauture in the next level is that you can use mulitiple words in a variable.
                    For intance, you could already do this...
                    ```
                    name = {ask} 'Who is your favorite cartoon character?'
                    {print} 'I love watching ' name
                    ```
                    But you couldn't use multiple words in a variable like the example below. This program does not work yet in this level!
                    ```
                    show = SpongeBob SquarePants
                    {print} show 'is my favorite show!'
                    ```
                    Go to the next level to make this code work!
                example_code: "```\nname = {ask} 'Who is your favorite cartoon character?'\n{print} 'I love watching ' name\n```\nBut you couldn't use multiple words in a variable like the example below. This program does not work yet in this level!\n```\nshow = SpongeBob SquarePants\n{print} show 'is my favorite show!'\n```\nGo to the next level to make this code work!\n"
            12:
                start_code: "{print} 'Lets go to the next level!'"
                story_text: |
                    ## What's next?
                    In the previous levels you learned how to put two `{if}`commands inside each other. This works fine, but it does give you very long and unhandy codes like this one:
                    ```
                    username {is} {ask} 'What is your username?'
                    password {is} {ask} 'What is your password?'
                    {if} username {is} 'Hedy'
                        {if} password {is} 'secret'
                            {print} 'Welcome Hedy!'
                        {else}
                            {print} 'Access denied'
                    {else}
                        {print} 'Access denied!'
                    ```
                    In this system you have to give both the correct username and the correct password.
                    In the next level you will learn the `{and}` command that will make this code a ot shorter and more understandable!
                    Check it out!
                example_code: "## Example Hedy code\n```\nusername {is} {ask} 'What is your username?'\npassword {is} {ask} 'What is your password?'\n{if} username {is} 'Hedy'\n    {if} password {is} 'secret'\n        {print} 'Welcome Hedy!'\n    {else}\n        {print} 'Access denied'\n{else}\n    {print} 'Access denied!'\n```\n"
            15:
                story_text: |
                    ## What's next?
                    In the next level we will grow a bit more towards real Python code. thon code. You will also learn how to match two lists together.
                    This way you can program a code in which the correct animal is matched to the right sound.
                    Because the two codes below... Are obviously nonsense!
                    ```
                    animals = 'chicken', 'horse', 'cow'
                    sounds = 'cluck', 'neigh', 'moo'
                    {for} animal {in} animals
                        {print} 'A ' animal ' says ' sounds {at} {random}
                    ```
                    You could also try to make it work this way, but....
                    ```
                    animals = 'chicken', 'horse', 'cow'
                    sounds = 'cluck', 'neigh', 'moo'
                    {for} animal {in} animals
                        {for} sound {in} sounds
                            {print} 'A ' animal ' says ' sound
                    ```
                start_code: "{print} 'Lets go to the next level!'"
                example_code: "```\nanimals = 'chicken', 'horse', 'cow'\nsounds = 'cluck', 'neigh', 'moo'\n{for} animal {in} animals\n    {print} 'A ' animal ' says ' sounds {at} {random}\n```\nYou could also try to make it work this way, but....\n```\nanimals = 'chicken', 'horse', 'cow'\nsounds = 'cluck', 'neigh', 'moo'\n{for} animal {in} animals\n    {for} sound {in} sounds\n        {print} 'A ' animal ' says ' sound\n```\n"
            16:
                story_text: |
                    ## What's next?
                    In the next level it's time for a new command. You might have noticed in the previous levels that `{if}` and `{else}` sometimes aren't enough.
                    For example in this code:
                    ```
                    {print} 'What is for dinner tonight?'
                    options = ['pizza', 'broccoli', 'green beans']
                    chosen = options {at} {random}
                    {if} chosen = pizza
                        {print} 'Yummy! Pizza!'
                    {else}
                        {print} 'Yikes...'
                    ```
                    In this code it would be great to have 2x an `{else}` so you could have one option for the broccoli and one for the green beans. The next level comes with the new command `{elif}` that makes this possible!
                    So check out the next level now!
                start_code: "{print} 'Lets go to the next level!'"
                example_code: "## Example Hedy code\n```\n{print} 'What is for dinner tonight?'\noptions = ['pizza', 'broccoli', 'green beans']\nchosen = options {at} {random}\n{if} chosen = 'pizza'\n    {print} 'Yummy! Pizza!'\n{else}\n    {print} 'Yikes...'\n```\n"
                story_text_2: In this code it would be great to have 2x an `{else}` so you could have one option for the broccoli and one for the green beans. The next level comes with the new command `{elif}` that makes this possible! So check out the next level now!
            17:
                story_text: |
                    ## What's next?
                    In the next level you will learn a real Python way to use `{print}`.
                start_code: "{print} 'Lets go to the next level!'"
            18:
                story_text: |
                    ## What's next?
                    Congratulations! You have reached the last level of Hedy! But no worries, we are working very hard to create more levels and new adventures. So please come back later to check out the newest levels!
                start_code: "{print} ('Great job!!!')"
        name: What's next?
        description: What's Next?
        default_save_name: next
        image: ' '
    end:
        levels:
            5:
                story_text: |
                    ## End
                    This is the end of the level! Take the quiz now to test your knowledge.
                start_code: '# place your code here'
            6:
                story_text: |
                    ## End
                    This is the end of the level! Take the quiz now to test your knowledge.
                start_code: '# place your code here'
            7:
                story_text: |
                    ## End
                    This is the end of the level! Take the quiz now to test your knowledge.
                start_code: '# place your code here'
            8:
                story_text: |
                    ## End
                    This is the end of the level! Take the quiz now to test your knowledge.
                start_code: '# place your code here'
            9:
                story_text: |
                    ## End
                    This is the end of the level! Take the quiz now to test your knowledge.
                start_code: '# place your code here'
            1:
                story_text: |
                    ## End
                    This is the end of the level! Take the quiz now to test your knowledge.
                start_code: '# place your code here'
            2:
                story_text: |
                    ## End
                    This is the end of the level! Take the quiz now to test your knowledge.
                start_code: '# place your code here'
            3:
                story_text: |
                    ## End
                    This is the end of the level! Take the quiz now to test your knowledge.
                start_code: '# place your code here'
            4:
                story_text: |
                    ## End
                    This is the end of the level! Take the quiz now to test your knowledge.
                start_code: '# place your code here'
        name: End
        description: Test your Hedy knowledge
        image: ' '
        default_save_name: ' '
    parrot:
        name: рддреЛрддрд╛
        description: рдЕрдкрдирд╛ рдЦреБрдж рдХрд╛ рдСрдирд▓рд╛рдЗрди рдкрд╛рд▓рддреВ рддреЛрддрд╛ рдмрдирд╛рдПрдВ рдЬреЛ рдЖрдкрдХреА рдирдХрд▓ рдХрд░реЗрдЧрд╛!
        image: рдХрд╣рд╛рдиреА.png
        default_save_name: рддреЛрддрд╛
        levels:
            1:
                story_text: |
                    ## Parrot
                    Create your own online pet parrot that will copy you!
                example_code: |
                    ## Example Hedy code

                    ```
                    {print} Im Hedy the parrot
                    {ask} whats your name?
                    {echo}
                    {echo}
                    ```
                start_code: '{print} Im Hedy the parrot'
            3:
                story_text: |
                    ## Parrot
                    Teach your parrot a new word with `{add}`.
                example_code: |
                    ## Example Hedy code

                    ```
                    words {is} squawk, Hedy
                    {print} Train your parrot!
                    new_word {is} {ask} Which word do you want to teach them?
                    {add} new_word {to_list} words
                    {print} ЁЯзТ Say new_word , Hedy!
                    {print} ЁЯжЬ words {at} {random}
                    ```
                start_code: '# place your code here'
            5:
                story_text: |
                    ## Parrot
                    Reward your parrot {if} it says the correct word!
                example_code: |
                    ## Example Hedy code

                    ```
                    words {is} squawk, Hedy
                    {print} 'Train your parrot!'
                    new_word {is} {ask} 'Which word do you want to teach them?'
                    {add} new_word {to_list} words
                    said_word {is} words {at} {random}
                    {print} 'ЁЯзТ Say ' new_word ', Hedy!'
                    {print} 'ЁЯжЬ ' said_word
                    {if} said_word {is} new_word {print} 'ЁЯзТ Great job, Hedy! ЁЯНк'
                    {else} {print} 'ЁЯзТ No, Hedy! Say ' new_word
                    ```
                start_code: '# place your code here'
            2:
                story_text: |
                    ## Parrot
                    Create your own online pet parrot that will copy you!
                example_code: |
                    ## Example Hedy code

                    ```
                    {print} Im Hedy the parrot
                    name {is} {ask} whats your name?
                    {print} name
                    {sleep}
                    {print} squawk
                    {sleep}
                    {print} name
                    ```
                start_code: '{print} Im Hedy the parrot!'
    songs:
        name: Sing a song!
        description: Print a song
        levels:
            12:
                example_code: |
                    ## Example Hedy code

                    ```
                    actions = 'clap your hands', 'stomp your feet', 'shout Hurray!'
                    {for} action {in} actions
                        {for} i {in} {range} 1 {to} 2
                            {print} '{if} youre happy and you know it'
                            {print} action
                        {print} '{if} youre happy and you know it and you really want to show it'
                        {print} '{if} youre happy and you know it'
                        {print} action
                    ```
                story_text: |
                    ## Sing a song!
                    In this song we can make it even easier to program '{if} you're happy and you know it, clap your hands'. Because we can put all of the actions in a variable, check it out:
                start_code: '# place your code here'
            11:
                story_text: |
                    ## Songs
                    In this level you can use the `{for} i {in} {range}` command to make songs that use counting.
                example_code: |
                    ## 5 little monkeys
                    ```
                    {for} i {in} {range} 5 {to} 1
                        {print} i ' little monkeys jumping on the bed'
                        {print} 'One fell off and bumped his head'
                        {print} 'Mama called the doctor and the doctor said'
                        {if} i {is} 1
                            {print} 'PUT THOSE MONKEYS RIGHT TO BED!'
                        {else}
                            {print} 'NO MORE MONKEYS JUMPING ON THE BED!'
                    ```
                start_code: '# place your code here'
            10:
                story_text: |
                    ## Songs
                    In this level you can easily make the childrens' song 'Five little monkeys'. Can you make the last chorus?
                    You can also make the whole baby shark song (including all the other sharks in the family) in only 6 lines!
                    Or you can make Old McDonald with all the different animals.
                example_code: |
                    ## 5 Little Monkeys Jumping on the bed
                    ```
                    monkeys = 5, 4, 3, 2
                    {for} monkey {in} monkeys
                        {print} monkey ' little monkeys jumping on the bed'
                        {print} 'One fell off and bumped his head'
                        {print} 'Mama called the doctor and the doctor said'
                        {print} 'NO MORE MONKEYS JUMPING ON THE BED!'
                    ```

                    ## Baby Shark
                    ```
                    sharks = baby, mommy, daddy, grandma, grandpa
                    {for} shark {in} sharks
                        {print} shark 'tututututudu'
                        {print} shark 'tututututudu'
                        {print} shark 'tututututudu'
                        {print} shark
                    ```
                    ## Old McDonald
                    ```
                    animals = pig, dog, cow
                    {for} animal {in} animals
                        {if} animal {is} pig
                            sound = oink
                        {if} animal {is} dog
                            sound = woof
                        {if} animal {is} cow
                            sound = moo
                        {print} 'Old McDonald had a farm'
                        {print} 'E I E I O!'
                        {print} 'and on that farm he had a ' animal
                        {print} 'E I E I O!'
                        {print} 'with a ' sound sound ' here'
                        {print} 'and a ' sound sound ' there'
                        {print} 'here a ' sound
                        {print} 'there a ' sound
                        {print} 'everywhere a ' sound sound
                    ```
                start_code: '# place your code here'
            8:
                story_text: |
                    ## Songs
                    In a previous level you've programmed the song 'Bottles of beer'. You made one verse and then had to copy the verses 99 times. In level 7 you can repeat the song 99 times, just by adding one simple line!
                example_code: |
                    ## Example Hedy code

                    ```
                    verse = 99
                    {repeat} 99 {times}
                        {print} verse ' bottles of beer on the wall'
                        {print} verse ' bottles of beer'
                        {print} 'Take one down, pass it around'
                        verse = verse - 1
                        {print} verse ' bottles of beer on the wall'
                    ```
                start_code: '# place your code here'
            7:
                example_code: |
                    ## Example Hedy code

                    ```
                    {repeat} _ _ {print} 'Baby Shark tututudutudu'
                    {print} 'Baby Shark'
                    ```

                    After Baby Shark you can of course also program other songs. There are many songs with repetition.
                start_code: "{print} 'Baby Shark'"
                story_text: |
                    ## Songs
                    Songs often contain a lot of repetition. For example... Baby Shark! If you sing it, you keep singing the same thing:

                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark

                    You can make this song much shorter with a `{repeat}`! Can you finish the code?
            6:
                example_code: |
                    ## Example Hedy code

                    ```
                    verse = 99
                    {print} verse ' bottles of beer on the wall'
                    {print} verse ' bottles of beer'
                    {print} 'Take one down, pass it around'
                    verse = verse - 1
                    {print} verse ' bottles of beer on the wall'
                    ```

                    You can now repeat lines 2 to 9 as many times as you want by copying the lines.
                story_text: |
                    ## Songs
                    Songs often contain a lot of repetition. Sometimes the repetition is also based on counting.
                    For example, in the well-known song 'Bottles of beer'. You can program that song with a little math.
                start_code: "{print} 'Baby shark'"
            16:
                story_text: |
                    ## Sing a song!
                    In this level, you can program a song like OldMacDonald even more quickly. You can connect the right animal to the right sound by simply putting them in the same place in the list.
                    The Drunken Sailor is also quickly made in this level. You only need 8 lines for the entire song, check it out!

                    ## Old MacDonald
                    ```
                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    {for} i {in} {range} 1 {to} 3
                        animal = animals[i]
                        sound = sounds[i]
                        {print} 'Old McDonald had a farm'
                        {print} 'E I E I O!'
                        {print} 'and on that farm he had a ' animal
                        {print} 'E I E I O!'
                        {print} 'with a ' sound sound ' here'
                        {print} 'and a ' sound sound ' there'
                        {print} 'here a ' sound
                        {print} 'there a ' sound
                        {print} 'everywhere a ' sound sound
                    ```

                    ## Drunken Sailor
                    ```
                    lines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} line {in} lines
                        {for} i {in} {range} 1 {to} 3
                            {print} line
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
                start_code: '# place your code here'
                example_code: "## Old MacDonald\n```\nanimals = ['pig', 'dog', 'cow']\nsounds = ['oink', 'woof', 'moo']\n{for} i {in} {range} 1 {to} 3\n    animal = animals[i]\n    sound = sounds[i]\n    {print} 'Old McDonald had a farm'\n    {print} 'E I E I O!'\n    {print} 'and on that farm he had a ' animal\n    {print} 'E I E I O!'\n    {print} 'with a ' sound sound ' here'\n    {print} 'and a ' sound sound ' there'\n    {print} 'here a ' sound\n    {print} 'there a ' sound\n    {print} 'everywhere a ' sound sound\n```\n\n## Drunken Sailor\n```\nlines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']\n{for} line {in} lines\n    {for} i {in} {range} 1 {to} 3\n        {print} line\n    {print} 'early in the morning'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'way hay and up she rises'\n    {print} 'early in the morning'\n```\n"
        image: songs.png
        default_save_name: Song
    haunted:
        name: Haunted House
        description: escape from the haunted house
        image: hauntedhouse.gif
        default_save_name: Haunted House
        levels:
            1:
                story_text: |
                    ## Haunted house
                    In this adventure you are working towards making a game in which you have to escape from a haunted house by picking the correct door.
                    If you pick the right door you'll survive, but {if} not a terrible monster might...

                    In level 1 we start our haunted house game by making up a scary story and {ask} the player what monster they'll see in the haunted house.
                start_code: '{print} How did I get here?'
                example_code: |
                    ## Example Hedy code


                    ```
                    {print} How did I get here?
                    {print} I remember my friend telling me to go into the old mansion...
                    {print} and suddenly everything went black.
                    {print} But how did I end up on the floor...?
                    {print} My head hurts like Ive been hit by a baseball bat!
                    {print} What's that sound?
                    {print} Oh no! I feel like Im not alone in this house!
                    {print} I need to get out of here!
                    {print} There are 3 doors in front of me..
                    {ask} Which door should i pick?
                    {echo} I choose door
                    {print} ...?
                    ```

                    ## Challenge
                    Can you finish the scary story? Or make up your own haunted house story?
                story_text_2: "## Challenge\nCan you finish the scary story? Or make up your own haunted house story?\n"
            2:
                story_text: |
                    ## Haunted House
                    In this haunted house you can choose your monsters with emojis. Of course you could also use words.

                    ## Example Hedy Code
                    ```
                    monster1 {is} ЁЯС╗
                    monster2 {is} ЁЯдб
                    monster3 {is} ЁЯС╢
                    {print} You enter the hounted house.
                    {print} Suddenly you see a monster1
                    {print} You run into the other room, but a monster2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster3 attacks you!
                    ```
                start_code: monster1 {is} _
                example_code: "## Example Hedy Code\n```\nmonster_1 {is} \U0001F47B\nmonster_2 {is} \U0001F921\nmonster_3 {is} \U0001F476\n{print} You enter the haunted house.\n{print} Suddenly you see a monster_1\n{print} You run into the other room, but a monster_2 is waiting there for you!\n{print} Oh no! Quickly get to the kitchen.\n{print} But as you enter monster_3 attacks you!\n```\n"
            14:
                story_text: |
                    ## Haunted House
                    In this level you can use the `<` and `>` symbol to introduce lives to your game.
                example_code: |
                    ## Example Hedy code

                    ```
                    {print} 'Escape from the haunted house'
                    lives = 3
                    doors = 1, 2, 3
                    monsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives > 0
                            good_door = doors {at} {random}
                            monster = monsters {at} {random}
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} good_door == chosen_door
                                {print} 'You have chosen the correct door'
                            {else}
                                {print} 'You see...' monster
                                {if} monster == 'a sleeping 3 headed dog'
                                    {print} 'Pffieuw.... Its asleep'
                                {else}
                                    {print} 'You lose one life'
                                    lives = lives -1
                        {else}
                            {print} 'GAME OVER'
                    ```
                start_code: '# place your code here'
            11:
                story_text: |
                    ## Haunted House
                    In this level we've changed the repeat command and we've added a line to our haunted house that tells the player in which room they are.
                example_code: |
                    ## Example Hedy code

                    ```
                    {print} 'Escape from the Haunted House!'
                    player {is} alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    {for} i {in} {range} 1 {to} 3
                        {if} player {is} alive
                            correct_door = doors {at} {random}
                            {print} 'Room ' i
                            {print} 'There are 3 doors in front of you...'
                            chosendoor = {ask} 'Which door do you choose?'
                            {if} chosendoor {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
                start_code: "{print} 'Escape from the haunted house!'"
            9:
                story_text: |
                    ## Haunted House
                    In this level you can use nesting, which allows you to make the haunted house even more interactive!
                example_code: |
                    ## Example Hedy code

                    ```
                    {print} 'Escape from the Haunted House!'
                    player = alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    {repeat} 3 {times}
                        {if} player {is} alive
                            correct_door {is} doors {at} {random}
                            {print} 'There are 3 doors in front of you...'
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} chosen_door {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
                    ## Challenge
                    Now it's very hard to win this game, can you make it easier to win?
                    For example by only having 1 wrong door and 2 correct doors instead of 1 correct door en 2 wrong ones?
                start_code: "{print} 'Escape from the haunted house!'"
            5:
                story_text: |
                    ## Haunted House
                    Up until this level the haunted house game always asked the player to choose a door, but as you might have noticed, they didn't really have to answer correctly.
                    If the player filled in a completely random answer, the game would still work and the player might even win (despite not picking a door).
                    In this level you can only win the game by picking the same door Hedy picked randomly.
                example_code: |
                    ## Example Hedy code

                    ```
                    {print} 'Escape from the haunted house!'
                    {print} 'There are 3 doors in front of you...'
                    doors {is} 1, 2, 3
                    monsters {is} werewolf, mummy, vampire, zombie
                    chosen_door {is} {ask} 'Which door do you choose?'
                    {print} 'You chose door...' chosen_door
                    {sleep}
                    correct_door {is} doors {at} {random}
                    {if} chosen_door {is} correct_door {print} 'Great! Youve escaped!'
                    {else} {print} 'Oh no! You are being eaten by a...' monsters {at} {random}
                    ```
                start_code: '# place your code here'
            4:
                story_text: |
                    ## Haunted house
                    In this level you learn how to use quotation marks in your games.
                    Can you make your Haunted House level 4 proof?
                start_code: '# place your code here'
                example_code: "```\n{print} _Escape from the haunted house!_\n{print} _There are 3 doors in front of you..._\nchoice {is} {ask} _Which door do you choose?_\n{print} _You picked door ..._ choice\nmonsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED\n{print} _You see..._\n{sleep}\n{print} monsters {at} {random}\n ```\n"
            3:
                story_text: |
                    ## Haunted house game
                    In the previous levels you've made an introduction to your haunted house game, but as you might have noticed the story would always have a dreadful end.
                    In this level you can make your story more interactive by changing the outcome of the game; sometimes you'll get eaten, sometimes you'll escape!
                    Let Hedy decide randomly!
                example_code: |
                    ## Example Hedy code

                    ```
                    {print} Escape from the haunted house!
                    {print} There are 3 doors in front of you...
                    choice {is} {ask} Which door do you choose?
                    {print} You picked door ... choice
                    monsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED
                    {print} You see...
                    {sleep}
                    {print} monsters {at} {random}
                    ```

                    ## Challenge
                    This story is pretty straight {forward}, maybe you can spook it up a bit by adding a more exciting story.
                    Also you have very limited outcomes right now, there are only 3 options of what's behind the doors. Maybe you can think of more monsters to add to the list!

                    ## Change the game into a tv gameshow!
                    Lastly, we'd like to challenge you to change this game into a gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!
                    Can you do it?
                start_code: '# place your code here'
                story_text_2: "## Challenge\nThis story is pretty straight {forward}, maybe you can spook it up a bit by adding a more exciting story.\nAlso you have very limited outcomes right now, there are only 3 options of what's behind the doors. Maybe you can think of more monsters to add to the list!\n\n## Change the game into a tv gameshow!\nLastly, we'd like to challenge you to change this game into a gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!\nCan you do it?\n"
            16:
                story_text: |
                    ## Haunted House Game
                    This haunted house game uses the connection between the lists you can use in this level.
                    For example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.
                    Check out the code!
                example_code: |
                    ## Example Hedy code

                    ```
                    numbers = [1, 2, 3]
                    i = numbers[random]
                    hint = ['growling', 'a cackling laugh', 'fluttering batwings']
                    monsters = ['zombie', 'witch', 'vampire']
                    bad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']
                    good_fate = ['You throw the ham. The zombie is distracted and starts etaing it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']
                    weapons = ['ham', 'lighter', 'garlic']
                    {print} 'You are standing in front of an old mension'
                    {print} 'Something is not right here'
                    {print} 'You hear ' hint[i]
                    {print} 'You are going to explore it'
                    {print} 'You enter the kitchen en see a lighter, a raw ham and a garlic.'
                    your_weapon = {ask} 'What do you bring with you?'
                    {print} 'With your ' your_weapon ' you enter the living room'
                    {print} 'There you find a ' monsters[i]
                    needed_weapon = weapons[i]
                    {if} your_weapon == needed_weapon
                        {print} 'You use your ' your_weapon
                        {print} good_fate[i]
                        {print} 'YOU WIN!'
                    {else}
                        {print} 'You have chosen the wrong weapon...'
                        {print} bad_fate[i]
                        {print} 'GAME OVER'
                    ```
                start_code: '# place your code here'
    secret:
        description: Make your own spy code
        image: story.png
        default_save_name: language
        levels:
            12:
                story_text: "## Make a secret code like a super spy\nIn this adventure you can create your own super spy code. Encode a message that only the right agent can decipher.\nIf the enemy tries to crack the code, they will get some false info to waste their time.\n"
                example_code: "## Example Hedy code\n```\nname is ask 'What is your name?'\nif name is 'Agent007'\n    a is 'Go to the airport '\nelse\n    a is 'Go to the trainstation '\npassword is ask 'What is the password?'\nif password is 'TOPSECRET'\n    b is 'tomorrow at 02.00'\nelse\n    b is 'today at 10.00'\nprint a + b\n```\n"
                start_code: '## place your code here'
            13:
                story_text: "## Superspy\nThe code you made in the previous level can be made a lot easier in this one with the `{and}` command.\n"
                example_code: "## Example Hedy code\n```\nname is ask 'What is your name?'\npassword is ask 'What is your password?'\nif name is 'Agent007' and password is 'TOPSECRET'\n    print 'Go to the airport at 02.00'\nelse\n    print 'Go to the trainstation at 10.00'\n ```\n"
                start_code: '## place your code here'
        name: SuperSpy
    money:
        default_save_name: money
        levels:
            5:
                start_code: "{print} 'Welcome to The Price is right!'"
                story_text: "## The price is right\nIn this level you can create your own virtual version of the televisionshow 'The price is right'.\nIn this show the contestants have to guess the price of a product correctly to win it.\n\n## Challenge\nThe example code only gives away one price. Can you add more prices to win?\n"
                example_code: "## Example Hedy code\n```\n{print} 'Welcome to The Price Is Right!'\n{print} 'Im your host, Hedy.'\n{print} 'Our first price tonight is a skateboard!'\nprice {is} 30\n{print} 'Your options are 5 euros, 15 euros or 30 euros'\nguess {is} {ask} 'How much do you guess it costs?'\n{if} guess {is} price {print} 'Great job! You won the skateboard!'\n{else} {print} 'No! You lose! The actual price was... ' price\n```\n"
            6:
                start_code: "{print} 'The digital piggy bank'"
                story_text: "## Piggybank\nIn this level you can create your own digital Piggy Bank.\nYou can see how much money you've saved and vcalculate how long it will take you to save up for anything you'd like to buy.\nTry it out!\n\n## Challenge\nCan you think of extra features you could add to your digital piggy bank?\n"
                example_code: "## Example Hedy code\n```\n{print} 'The digital piggy bank'\nwish = {ask} 'What would you like to buy?'\nprice = {ask} 'How much does that cost?'\nsaved = {ask} 'How much money have you saved already?'\nallowance = {ask} 'How much pocket money do you get per week?'\nto_save = price - saved\nweeks = to_save / allowance\n{print} 'You can buy a ' wish ' in ' weeks ' weeks.'\n\n```\n"
            1:
                story_text: "## Sing a song about money\nUse the `{print}` command to print line in the output screen.\n\nDo you want to hear Hedy sing it? Use the read-aloud function beneath the 'run code' button.\n\nPlay the song and listen to 'Mo money, mo problems' by the notorious B.I.G.\n\n## Challenge\nDo you know any other songs about money that you can let Hedy sing?\n\nThis adventure was co-created with Aflatoun.\n"
                example_code: "## Example Hedy code\n```\n{print} I don't know what they want from me\n{print} It's like the more money we come across\n{print} The more problems we see\n{print} I don't know what they want from me\n{print} It's like the more money we come across\n{print} The more problems we see\n```\n"
                start_code: '{print} Mo money Mo problems'
            2:
                story_text: "## Make your own virtual shop\nIn this adventure you can create your own virtual shop. The example codes gives an easy example, but we bet that you could make your shop more interesting.\n\n## Challenge\nTurn the example code into your own virtual shop. What kind of shop would you like to own?\nHow much money will you charge your costumers? What can you do to make your shop more appealing?\n"
                example_code: "## Example Hedy code\n```\nprice {is} 3\n{print} Welcome to my shop\nproduct {is} {ask} What would you like to buy?\n{print} You would like to buy a product\n{print} That will be price euro please\n{print} Thank you! Bye!\n```\n"
                start_code: '{print} Welcome to my shop'
            3:
                story_text: "## Make smart choices\nIn this level you are faced with some financial dilemmas. You can make a list of products and a list of prices.\nHedy will randomly pick a product and a price and ask you if you think that's a smart choice to buy!\n\n## Challenge\nMake your own list of products and prices and play the game with your friends. Would they buy the same products as you?\nWho is the smartest spender?\n"
                example_code: "## Example Hedy code\n```\nprice {is} 1 euro, 10 euros, 100 euros, 1 million euros\nproduct {is} skateboard, banana, race car, dog\n\nprint Would you buy...\n{print} a product {at} {random} for price {at} {random}\nanswer {is} {ask} Would you buy it?\n```\n"
                start_code: '{print} Make smart choices!'
            4:
                story_text: "## Make your own virtual restaurant\nAfter opening your own shop in level 2, it's time to open a restaurant! Check out the example.\nPlease note that from this level on the print and ask command require quotation marks.\n\n## Challenge\nMake the restaurant your own. Maybe you'd pefer to have a sandwich shop, or a fastfood drive-through or a icecream parlor?\nYou can make anything you want with our example as inspiration!\n"
                example_code: "## Example Hedy code\n```\n{print} 'Welcome to Hedys restaurant!'\n{print} 'Today we are serving pizza or lasagna.'\nfood {is} {ask} 'What would you like to eat?'\n{print} 'Great choice! The ' food ' is my favorite!'\ndrinks {is} {ask} 'What would you like to drink with that?'\n{print} 'Thank you for your order.'\nprice {is} 20 euros\n{print} 'That will be ' price\npayment {is} {ask} 'Would you like to pay cash or card?'\n{print} 'No problem!'\n{print} 'Your ' food ' and ' drinks ' are on their way!'\n```\n"
                start_code: "{print} 'Welcome to Hedys restaurant!'"
        name: Money Week
        description: Aflatoun
        image: piggybank.png
title: рд╣реИрдбреА рдПрдбрд╡реЗрдВрдЪрд░реНрд╕!
subtitle: рдЖрдк рдЕрдкрдиреЗ рдЬреАрд╡рди рдХреЛ рдЖрд╕рд╛рди рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдХрд╣рд╛рдиреА, рдЦреЗрд▓ рдпрд╛ рдХреБрдЫ рдмрдирд╛рдХрд░ рд╣реИрдбреА рд╕реАрдЦ рд╕рдХрддреЗ рд╣реИрдВ
