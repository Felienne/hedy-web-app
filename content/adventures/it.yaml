adventures:
    story:
        name: Storia
        default_save_name: Storia
        description: Storia
        levels:
            1:
                story_text: |
                    Nel livello 1 puoi creare una storia con un personaggio principale diverso che inserisci tu stesso.

                    Nella prima riga, usa `{ask}` e chiedi chi sar√† il personaggio principale della storia.

                    Dopo la prima riga, inizia con `{print}`  se la frase deve essere stampata.
                    Usa `{echo}`  se vuoi che il tuo personaggio principale sia alla fine della frase.
                example_code: |
                    ```
                    {ask} Il personaggio principale di questa storia √®
                    {print} Il personaggio principale ora camminer√† nella foresta
                    {echo} √à un po' spaventato,
                    {print} Sente rumori terrificanti ovunque
                    {print} Ha paura che questa sia una foresta infestata
                    ```
                story_text_2: |
                    ### Esercizio
                    Ora crea la tua storia di almeno 6 righe di codice.
                    Questa storia non pu√≤ essere uguale al codice di esempio.
                    Utilizza almeno un comando `{ask}` e un comando `{echo}`.
                    Puoi farlo su qualsiasi argomento che ti piace.
                    Se non riesci a pensare a un argomento, usa una delle nostre scelte: andare al cinema, una partita sportiva o una giornata allo zoo.
            2:
                story_text: |
                    Nel livello 2 puoi rendere la tua storia pi√π divertente. Il nome del tuo personaggio principale ora pu√≤ essere ovunque nella frase.

                    Devi programmare un po' di pi√π per quello. Ora devi prima nominare il tuo personaggio principale.

                    Puoi quindi inserire quel nome ovunque in una frase.
                story_text_2: |
                    ### Esercizio
                    Ora √® il momento di aggiungere variabili alla tua storia che hai creato nel livello precedente.
                    Vai su 'I miei programmi', cerca la tua avventura storia di livello 1 e copia il codice. Incolla il codice nella schermata di input in questo livello.

                    Questo codice non funzioner√† in questo livello perch√© non hai ancora utilizzato le variabili.
                    Modifica i comandi `{ask}` e `{echo}` nel tuo codice nella forma corretta che hai imparato in questo livello.

                    **Extra** Aggiungi un comando `{sleep}` al tuo codice per aumentare la tensione nella tua storia.
            3:
                story_text: |
                    Nel livello 3 puoi rendere la tua storia pi√π divertente. Puoi usare la casualit√† per qualsiasi mostro, animale o ostacolo, in questo modo:
                story_text_3: |
                    Questo √® un esempio del comando `{remove}` nella tua storia

                    ### Esercizio
                    Copia la tua storia dai livelli precedenti a questo livello.
                    In questo livello hai imparato 3 nuovi comandi `{at} {random}`, `{add} {to_list}` e `{remove} {from}`.
                    Aggiungi nuove righe di codice alla tua storia, in modo che tutti i nuovi comandi siano presenti almeno una volta nella tua storia.
            4:
                story_text: |
                    ### Esercizio
                    Copia il codice di esempio e completalo aggiungendo virgolette sugli spazi vuoti nelle righe 1 e 2.
                    Gli spazi nelle righe 3 e 4 non devono essere sostituiti da virgolette, ma da un comando `{sleep}` e un comando `{clear}`. Puoi farlo funzionare?

                    ### Esercizio 2
                    Torna al livello precedente e copia il codice della storia. Fai funzionare il codice in questo livello aggiungendo virgolette nei punti giusti.
                    Attenzione: le variabili nella tua storia dovrebbero essere fuori dalle virgolette. Proprio come la seconda riga del codice di esempio. In quella riga il nome della variabile viene inserito fuori dalle virgolette.
                example_code: |
                    ```
                    nome {is}{ask} _ Come ti chiami? _
                    {print} _ Il personaggio principale si chiama _ nome
                    _
                    _
                    {print} nome _ ora camminer√† nel bosco _
                    {print} nome _ √® un po' spaventato _
                    animali {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} _ Sente il suono di _ animali {at} {random}
                    {print} nome _ ha paura che questa sia una foresta infestata _
                    ```
            5:
                story_text: |
                    In questo livello puoi programmare diversi finali, che renderanno la tua storia ancora pi√π divertente.
                    Nel codice di esempio puoi vedere come realizzare 2 finali diversi.

                    ### Esercizio 1
                    Scrivi un nuovo racconto di almeno 6 righe di codice su un argomento di tua scelta.
                    Nessuna ispirazione? Scegli uno di questi argomenti: un supereroe, una noiosa giornata scolastica, bloccato su un'isola deserta.

                    Ora dai al giocatore la possibilit√† di scegliere una fine felice o cattiva, proprio come nel codice di esempio.
                    Programma entrambi i finali.

                    ### Esercizio 2
                    Copia la storia che hai creato nella tua avventura narrativa nei livelli precedenti.
                    Trova un modo per aggiungere almeno 2 comandi `{if}` e `{else}` alla tua storia.
                    Questo pu√≤ avere un finale felice o brutto, ma puoi anche provare a trovare altri modi per incorporare i comandi.
                example_code: |
                    ```
                    nome {is} {ask} 'Chi sta camminando nella foresta?'
                    {print} nome 'cammina nella foresta'
                    {print} nome 'incontra un mostro'
                    fine {is} {ask} 'Vuoi un lieto fine o un brutto finale?'
                    {if} fine {is} lieto {print} nome 'prende la spada e il mostro scappa velocemente'
                    {else} {print} 'Il mostro mangia' nome
                    ```
            7:
                story_text: |
                    In una storia, qualcuno dice le parole pi√π volte. Ad esempio, quando qualcuno chiede aiuto o canta una canzone.
                    Puoi inserire tali ripetizioni nella tua storia, in questo livello con `{repeat}`.

                    ### Esercizio
                    Aggiungi ripetizione alla tua storia. Torna ai programmi salvati, scegli il programma della storia dal livello precedente e
                    trova una riga contenente `{print}` e ripetila!
            8:
                story_text: |
                    In questo livello puoi utilizzare pi√π righe nei comandi `{if}`, in questo modo puoi migliorare il tuo lieto fine o il tuo triste finale!

                    ### Esercizio 1
                    Il codice di esempio mostra due finali diversi; uno in cui i personaggi saltano in una macchina del tempo e uno in cui no.
                    Completa gli spazi vuoti con almeno una frase per conclusione.
                    **Extra** Rendi la storia pi√π lunga. Cosa succede nella storia? Puoi anche aggiungere un secondo `{ask}` con diverse opzioni.

                    ### Esercizio 2
                    Torna ai tuoi programmi salvati, scegli il tuo programma storia dal livello 5. Ora scrivi un finale bello e uno brutto di almeno tre righe ciascuno!
                example_code: |
                    ```
                    {print} 'OH NO! Il T-rex si sta avvicinando!'
                    end = {ask} 'Vuoi un finale felice o triste?'
                    {if} la fine {is} felice
                        {print} 'Appena in tempo Richard torna nella macchina del tempo!'
                        {print} _
                    {else}
                        {print} 'Oh no! Richard √® troppo lento...'
                        {print}_
                    ```
            9:
                story_text: |
                    In questo livello puoi utilizzare i comandi `{if}` e `{repeat}` all'interno di altri comandi `{if}` e `{repeat}`.
                    Questo ti offre molte opzioni e ti aiuta davvero a rendere la tua storia interattiva.

                    ### Esercizio 1
                    Completa il codice in modo che `{if}` funzioni correttamente.

                    ### Esercizio 2
                    Aggiungi un `{if}` e un `{else}` per la parte della storia in cui anche Robin torna a casa.

                    ### Esercizio 3
                    Torna alla tua storia di livello 8 e usa almeno due `{if}` all'interno di un altro `{if}`.
                example_code: |
                    ```
                    {print} "Robin sta camminando in centro"
                    location = {ask} 'Robin entra in un negozio o torna a casa?'
                    {if} luogo {is} negozio
                        {print} 'Lei entra nel negozio.'
                        {print} 'Robin vede un libro dall'aspetto interessante'
                        book = {ask} 'Robin compra il libro?'
                        {if}prenota{is} s√¨
                        _ {print} 'Robin compra il libro e torna a casa'
                        _{else}
                        _ {print} 'Robin esce dal negozio e torna a casa'
                    {else}
                        {print} 'Robin va a casa'
                    ```
            10:
                story_text: |
                    In questo livello puoi usare il comando {for} nella tua storia. In questo modo potrete facilmente programmare il libro per bambini 'Orso bruno, Orso bruno, cosa vedi'.

                    ### Esercizio

                    Guarda <a href="https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf"> la storia</a> se non la conosci e assicurati che sia stampato come nel libro.
                example_code: |
                    ```
                    animali = _ , _ , _
                    {print} 'Orso bruno, orso bruno'
                    {print} 'Cosa vedi?'
                    ```
            12:
                story_text: |-
                    In questo livello saranno necessarie le virgolette per salvare pi√π parole in una variabile.

                    ### Esercizio

                    Trova una storia da un livello precedente, qualsiasi livello √® ok. Ora assicurati che le virgolette siano aggiunte nei posti giusti.
            13:
                story_text: |
                    Utilizzando i comandi `{and}` e `{or}` puoi rendere le tue storie pi√π versatili. Puoi porre due domande e rispondere alla combinazione di risposte.

                    ### Esercizio 1
                    Guarda il codice di esempio e finiscilo. Quindi aggiungi almeno altri 2 codici `{if}` con `{and}` o `{or}`.

                    ### Esercizio 2
                    Trova una storia di un livello precedente e aggiungi un `{and}` o `{or}`.
                example_code: |
                    ```
                    {print} 'Il nostro eroe sta camminando attraverso la foresta'
                    {print} 'Il percorso si divide in due parti'
                    path = {ask} 'Quale percorso dovrebbe scegliere?'
                    arma = {ask} 'Che arma estrae?'
                    {if} percorso {is} 'sinistra' {and} arma {is} 'spada'
                        _
                    ```
            18:
                example_code: |
                    ```
                    {print}('Benvenuti in questa storia!')
                    ```
                story_text_2: |
                    ### Esercizio 2
                    Abbiamo gi√† preparato un `{input}` per te. Innanzitutto, utilizza la variabile `name` nella tua storia.
                    Quindi aggiungi un secondo `{ask}` e usa anche quella variabile.
                    Suggerimento: ricorda le virgole in `{print}` tra testo e variabili!
                example_code_2: |
                    ```
                    naam = {input}("Come ti chiami?")
                    {print}('Benvenuti in questa storia!')
                    ```
    add_remove_command:
        default_save_name: aggiungi_rimuovi_comando
        description: introducendo {add}¬†{to_list} e {remove}¬†{from}
        levels:
            3:
                story_text: |
                    ## Aggiungere a
                    Puoi aggiungere elementi all'elenco con il comando `{add} {to_list}`. Per aggiungere un elemento a una lista puoi semplicemente digitare: `{add} penguin {to_list} animals` oppure puoi usare il comando `{ask}` come nel codice di esempio.
                example_code: |
                    ```
                    animali {is} cane, gatto, canguro
                    like {is} {ask} Qual √® il tuo animale preferito?
                    {add} mi piace {to_list} animali
                    {print} Scelgo gli animali {at} {random}
                    ```
                story_text_2: |
                    ## Rimuovere da
                    Se puoi aggiungere elementi a un elenco, ovviamente puoi anche rimuoverli. Questo viene fatto con il comando `{remove} {from}`.
                example_code_2: |
                    ```
                    animali {is} cane, gatto, canguro
                    non_mi_piace {is} {ask} Quale animale non ti piace?
                    {remove} non_mi_piace {from} animali
                    {print} Scelgo gli animali {at} {random}
                    ```
                story_text_3: |
                    ### Esercizio
                    Prova i nuovi comandi in questo ristorante virtuale. Aggiungi il gusto che il giocatore desidera alla lista e rimuovi i sapori ai quali √® allergico.
                example_code_3: |
                    ```
                    {print} Milkshake misterioso
                    Sapori {is} fragola, cioccolato, vaniglia
                    Speranza {is} {ask} Quale gusto speri di avere?
                    _
                    Allergie {is} {ask} Hai qualche allergia ai sapori?
                    _
                    {print} Ottieni un milkshake con il sapore di {at} {random}
                    ```
    and_or_command:
        default_save_name: e o
        description: Introducendo {and} e {or}
        levels:
            13:
                story_text: |-
                    Ora impareremo `{and}` e `{or}`! Se vuoi controllare due istruzioni, non devi usare due `{if}` ma puoi usare `{and}` e `{or}`.

                    Se usi `{and}`, entrambe le affermazioni, a sinistra e a destra di `{and}` devono essere vere. Possiamo anche usare `{or}`. Allora solo una affermazione deve essere corretta.
                example_code: |
                    ```
                    nome = {ask} 'come ti chiami?'
                    et√† = {ask} 'qual √® la tua et√†?'
                    {if} nome {is} 'Hedy' {and} et√† {is} 2
                        {print} 'Tu sei la vera Hedy!'
                    ```
    ask_command:
        description: Introduzione comando {ask}
        levels:
            1:
                story_text: |
                    ## Il comando per chiedere
                    Ora che sai usare il comando `{print}`, sei pronto per imparare il prossimo comando: `{ask}`. Con il comando `{ask}`, puoi fare una domanda. Controlla:
                example_code: |
                    ```
                    {print} Ciao!
                    {ask} Come ti chiami?
                    ```
                story_text_2: |
                    ## The  `{echo}` command
                    If you want the computer to repeat the answer, you can use the `{echo}` command. The answer will then be echoed back at the end of the sentence, so in this example after hello.
                example_code_2: |
                    ```
                    {print} Ciao!
                    {ask} Come ti chiami?
                    {echo} ciao
                    ```
                story_text_3: |
                    ### Esercizio
                    Prova i comandi `{ask}` e `{echo}` . Prima di tutto, riempi i campi vuoti per far funzionare il programna.
                    Quindi, formula 2 altre domande utilizzando il comando `{ask}` e, dopo ciascun `{ask}`, utilizza  `{echo}` per far visualizzare a schermo la risposta.
                example_code_3: |
                    ```
                    _ Come va?
                    _
                    ```
            2:
                story_text: |
                    ## Il comando chiedi
                    Ora che possiamo utilizzare le **variabili** nei nostri codici, non abbiamo pi√π bisogno del comando `{echo}`.
                    Possiamo utilizzare le variabili per memorizzare le risposte alle nostre domande e in questo modo possiamo utilizzare la risposta a pi√π domande nei nostri codici.
                    Controlla:

                    In questo modo il tuo codice diventa interattivo!
                example_code: |
                    ```
                    name {is} {ask} Come ti chiami?
                    {print} Ciao name
                    age {is} {ask} Quanti anni hai?
                    {print} name ha age anni.
                    ```
                story_text_2: |
                    ### Esercizio
                    Nella scheda precedente ti sei esercitato a impostare le variabili con il comando `{is}`.
                    Hai creato almeno 3 variabili e le hai utilizzate con un comando print.
                    Ora, invece di impostare le variabili, vogliamo che tu renda le variabili interattive, come abbiamo fatto nel nostro esempio.

                    Copia il codice dalla scheda precedente e rendi interattive le variabili utilizzando i comandi `{ask}`.
                example_code_2: |
                    ```
                    animale_preferito {is} {ask} Qual √® il tuo animale preferito?
                    {print} Mi piacciono gli animale_preferito
                    ```
    blackjack:
        name: Jack nero
        default_save_name: Jack nero
        description: Cerca di avvicinarti il pi√π possibile a 21
        levels:
            17:
                story_text: |
                    Il Blackjack √® un semplice gioco di carte in cui devi avvicinarti il pi√π possibile a 21 punti. Ottieni due carte. Ogni carta vale il suo valore numerico e le figure (Fante, Regina e Re) valgono 10 punti.
                    L'asso vale 1 o 11 punti (puoi scegliere). Anche il dealer, il tuo avversario, riceve due carte.
                    Se lo desideri, puoi ottenere un'altra carta e i suoi punti verranno aggiunti al tuo totale. Il dealer pu√≤ anche scegliere di prendere un'altra carta.
                    Ma fai attenzione a non ottenere pi√π di 21 punti, perch√© se lo fai, perdi!
                    Vince il giocatore che si avvicina di pi√π al 21, senza superarlo!

                    ### Exercise
                    In this adventure we code the first part of our Blackjack game. We'll create a function to calculate how many points a card is worth.

                    ***Set the variables***
                    Start by making a list of all the cards, from 2 to Ace. Next make a list of the face cards, so Jack, Queen and King. Then pick a random card from the list of cards to be card_1.

                    ***Create a function to calculate the points***
                    Create a function that calculates how many points a card is worth.
                    All the face cards are worth 10 points, the Ace is worth 11 and all the other cards are worth their numeral.
                    Return the variable `points` at the end of the function.

                    ***Test the function***
                    Test if your function is working properly. Finish the first print command by filling in which card you've drawn. Then finish the second line by calling the function with card_1.
                    Run the code a couple of times. Are you happy with the results? Great! Then you can remove the testing part and move on the the next tab!
    calculator:
        name: Calcolatore
        default_save_name: Calcolatrice
        description: Crea una calcolatrice
        levels:
            6:
                story_text: |
                    Now that you can calculate, you can also create a program to practice maths calculations. You can make up the calculations yourself, for example:
                example_code: |
                    ```
                    numero_1 = {ask} 'Compila il primo numero:'
                    numero_2 = {ask} 'Compila il secondo numero:'
                    risposta_corretta = numero_1 * numero_2
                    {print} numero_1 ' volte ' numero_2 ' √® 'risposta_corretta
                    ```
                story_text_2: |
                    ### Esercizio
                    La calcolatrice qui sopra calcoler√† la risposta per te, ma puoi anche creare un programma per testare le tue abilit√† matematiche, come questo:
                    Compila gli spazi vuoti per completarlo!
                example_code_2: |
                    ```
                    risposta_corretta = 11 * 27
                    risposta = {ask} 'Quanto fa 11 per 27?'
                    {if} risposta {is} _ {print} 'bel lavoro!'
                    {else} {print} 'Sbagliato! Era ' _
                    ```
                story_text_3: |
                    **Extra** Puoi anche lasciare che il computer esegua prodotti casuali da solo utilizzando `{random}`.
            9:
                story_text: |
                    Nel livello 6 hai creato una calcolatrice, in questo livello puoi espandere quel codice in modo che ponga pi√π domande.

                    ### Esercizio 1
                    Riesci a finire la riga 10 per far funzionare il programma?

                    ### Esercizio 2
                    Dai un feedback al giocatore quando inserisce una risposta giusta o sbagliata. Per raggiungere questo obiettivo, espandi il tuo programma con un `{else}`.
                example_code: |
                    ```
                    punteggio = 0
                    {repeat} 10 {times}
                        numeri = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        numero1 = numeri {at} {random}
                        numero2 = numeri {at} {random}
                        risposta_corretta = numero1 * numero2
                        {print} 'Quanto fa ' numero1 ' per ' numero2 '?'
                        risposta = {ask} 'Digita la tua risposta qui...'
                        {print} 'La tua risposta √®' risposta
                        {if}_{is}_
                            punteggio = punteggio + 1
                    {print} 'Ottimo lavoro! Il tuo punteggio √®... 'punteggio' su 10!'
                    ```
            10:
                story_text: |
                    Questo gioco di calcolatrice ti aiuta a praticare le tue tabelline!
                    ### Esercizio
                    Puoi aggiungere pi√π numeri all'elenco, cos√¨ da poter esercitarti con le tabelline fino al 10?
                example_code: |
                    ```
                    numeri = 1, 2, 3
                    {for} numero1 {in} numeri
                        {for} numero2 {in} numeri
                            risposta = {ask} 'Quanto fa 'numero2' per 'numero1'?'
                            corretto = numero1 * numero2
                            {if} risposta {is} corretta
                                {print} 'Ottimo lavoro!'
                            {else}
                                {print} 'Questo √® sbagliato. La risposta giusta √® ' corretto
                    ```
            12:
                story_text: |
                    In questo livello puoi creare una calcolatrice che funzioni con i numeri decimali.

                    ### Esercizio 1
                    Compila gli spazi vuoti per completare la calcolatrice. Ricordarsi di utilizzare un punto e non una virgola per i numeri decimali.

                    ### Esercizio 2
                    Crea un nuovo programma di esercitazione di matematica, ma ora usa i numeri decimali.
                    Crea una lista di numeri, scegline due per multipli e lascia che sia il giocatore a rispondere.
                    E ovviamente devi convalidare la risposta! **Extra** Aumenta la difficolt√† aggiungendo vite: un giocatore perde una vita per una risposta sbagliata e dopo tre risposte sbagliate il gioco finisce.
                example_code: |
                    ```
                    numero1 = {ask} 'Qual √® il primo numero?'
                    numero2 = {ask} 'Qual √® il secondo numero?'
                    risposta = _
                    {print} numero1' pi√π 'numero2' √® '_
                    ```
            14:
                example_code: |
                    ```
                    {define} calculate_mean_grade
                        total = 0
                        {for} i {in} {range} 1 {to} 4
                            grade = {ask} _
                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
                    ```

                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
            15:
                story_text: |
                    Puoi aggiungere il ciclo `{while}` al gioco della calcolatrice che hai imparato a realizzare nel livello precedente.
                    Ci√≤ garantisce che il giocatore non possa continuare con la domanda successiva se risponde in modo errato.

                    ### Exercise
                    Add the `{while}` loop in the function, ask the player what number_1 times number_2 is and print their answer.
                    Then `{call}` the function.
    clear_command:
        description: clear command
        levels:
            4:
                example_code: |
                    ```
                    {print} '3'
                    {clear}
                    {print} '2'
                    {clear}
                    {print} '1'
                    {clear}
                    {print} 'wait for it...'
                    {sleep} 3
                    {clear}
                    {print} 'SORPRESA'
                    ```
    debugging:
        levels:
            3:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    movie_choices {is} dracula, fast and furious, home alone, barbie
                    chosen_movie {is} movies {at} {random}
                    {print} Tonight we will watch chosen _movies
                    like {ask} Do you like that movie?
                    {print} Tomorrow we will watch something else.
                    {add} chosen_movie {to} movie_choices
                    {print} Tomorrow we will watch tomorrows_movie
                    tomorrows_movie {is} movie_choices {at} {random}
                    I'll go get the popcorn! {print}
                    ```
            7:
                story_text: |-
                    ### Exercise
                    Surprise! This program looks more like an output than a code. And yet, we don't want you to just add `{print}` commands in front of each line.
                    Fix this program to turn it into the nursery rhyme 'Brother John (Fr√®re Jaques)' by using the {repeat} command of course!
            9:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to our sandwich shop'
                    amount 'How many sandwiches would you like to buy?'
                    {repeat} amount {times}
                    {ask} {is} {ask} 'What kind or bread would you like your sandwich to be?'
                    types_of_bread {is} white, wheat, rye, garlic, gluten free
                    {if} chosen_bread in types_of_bread
                    {print} 'Lovely!'
                    {else}
                    'I'm sorry we don't sell that'
                    topping {is} {ask} 'What kind of topping would you like?'
                    sauce {is} {ask} 'What kind of sauce would you like?'
                    {print} One chosen_bread with topping and sauce.
                    price = amount * 6
                    {print} 'That will be 'price dollar' please'
                    ```
                    price = amount * 6
                    {print} 'That will be 'price dollar' please'
            11:
                story_text: |-
                    ### Exercise
                    Debug this calender program. The output of this program is supposed to look like a list of dates.
                    For example:

                    ```
                    Hedy calender
                    Here are all the days of November
                    November 1
                    November 2
                    November 3
                    ```
                    And so on.

                    Mind that you have to test your code extra carefully for the month February, because the amount of days in this month changes in leap years.
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    print 'Hedy calender'
                    months_with_31 days = January, March, May, July, September, October, December
                    months_with_30_days = April, June, August, November
                    month = ask 'Which month would you like to see?'
                    if month in months_with_31_days
                        days = 31
                        if month in months_with30_days
                            days = 30
                    if month = February
                        leap_years = 2020, 2024, 2028, 2036, 2040, 2044, 2028
                        year = ask 'What year is it?'
                    if year in leap_years
                        days = 29
                    else
                        days = 28

                    print 'Here are all the days of ' moth
                    for i in range 1 to days
                        print month i
                    ```
            12:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define greet
                    greetings = 'Hello', 'Hi there', 'Goodevening'
                        print greetings at random

                    define take_order
                        food = ask 'What would you like to eat?'
                        print 'One food'
                        drink = 'What would you like to drink?'
                        print 'One ' drink
                        more = ask 'Would you like anything else?'
                            if more is 'no'
                        print 'Alright'
                            else
                            print 'And ' more
                    print 'Thank you'

                    print 'Welcome to our restaurant'
                    people = ask 'How many people are in your party tonight?'
                    for i in range 0 to people
                        call greet_costumer
                    ```
            13:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    defin movie_recommendation with name
                        action_movies == 'Die Hard', 'Fast and Furious', 'Inglorious Bastards'
                        romance_movies = 'Love Actually', 'The Notebook', 'Titanic'
                        comedy_movies = 'Mr Bean' 'Barbie''Deadpool'
                        kids_movies = 'Minions', 'Paddington', 'Encanto'
                        if name is 'Camila' or name is 'Manuel'
                            recommended_movie = kids_movie at random
                        if name is 'Pedro' or 'Gabriella'
                                mood = ask 'What you in the mood for?'
                            if mood is 'action'
                                recommended_movie = comedy_movies at random
                            if mood is 'romance'
                                recommended_movie = romance_movies
                        if mood is 'comedy'
                                recommended_movie = comedy_movies at random

                    print 'I would recommend ' recommended_movie ' for ' name

                    name = ask 'Who is watching?'
                    recommendation = ask 'Would you like a recommendation?'
                    if recommendaion is 'yes'
                    print movie_recommendation with name
                    else
                    print 'No problem!'
                    ```
            14:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define calculate_heartbeat
                        print 'Press your fingertips gently against the side of your neck'
                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
                    ```

                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
            15:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    names = 'Tanya', 'Romy', 'Kayla', 'Aldrin', 'Ali'
                    verbs='walking', 'skipping', 'cycling', 'driving', 'running'
                    locations = 'on a mountaintop', 'in the supermarket', 'to the swimming pool'
                    hiding_spots = 'behind a tree', under a table', in a box'
                    sounds = 'a trumpet', 'a car crash', 'thunder'
                    causes_of_noise = 'a television', 'a kid with firecrackers', 'a magic elephant', 'a dream'

                    chosen_ name = names at random
                    chosen_verb = verbs at random
                    chosen_location = 'locations at random'
                    chosen_sounds = noises at random
                    chosen_spot = hiding_spots random
                    chosen_causes = causes_of_noise at random

                    print chosen_name ' was ' chosen_verb ' ' chosen_location
                    print 'when they suddenly heard a sound like ' sounds at random
                    print chosen_name ' looked around, but they couldn't discover where the noise came from'
                    print chosen_name ' hid ' chosen_spot'
                    print 'They tried to look around, but couldn't see anything from there'
                    hidden = 'yes'
                    while hidden = 'yes'
                        print chosen_name 'still didn't see anything'
                    answer = ask 'does ' chosen_name ' move from their hiding spot?'
                        if answer = 'yes'
                            hidden == 'no'
                    print 'chosen_name moved from' chosen_spot
                    print 'And then they saw it was just' chosen_cause
                    print chosen_name 'laughed and went on with their day'
                    print The End
                    ```
            16:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    country = ['The Netherlands', 'Poland', 'Turkey', 'Zimbabwe', 'Thailand', 'Brasil', 'Peru', 'Australia', 'India', 'Romania' ]
                    capitals = 'Amsterdam', 'Warshaw' 'Istanbul', 'Harare', 'Bangkok', 'Brasilia', 'Lima', 'Canberra', 'New Delhi', 'Bucharest'
                    score = 0
                    for i in range 0 to 10
                        answer = ask 'What's the capital of ' countries[i]
                        correct = capital[i]
                        if answer = correct
                            print 'Correct!'
                        score = score + 1
                        else
                            print 'Wrong,' capitals[i] 'in the capital of' countries[i]
                        print 'You scored ' score ' out of 10'

                    ```
            17:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define food_order
                        toppings = ask 'pepperoni, tuna, veggie or cheese?'
                        size = ask 'big, medium or small?'
                        number_of_pizza = ask 'How many these pizzas would you like?'

                        print 'YOU ORDERED'
                        print number_of_pizzas ' size  ' topping ' pizza'

                    define drinks_order
                        drink = ask 'water, coke, icetea, lemonade or coffee?'
                        number_of_drinks = ask 'How many of these drinks would you like?'

                        print 'YOU ORDERED'
                        print number_of_drinks ' ' drink

                    'Welcome to Hedy pizza'
                    more_food = ask 'Would you like to order a pizza?'
                    while more_food = 'yes'
                        return food_order
                        more_food = ask 'Would you like to order a pizza?'
                    more_drinks = ask 'Would you like to order some drinks?'
                    while more_drinks == 'yes'
                        call drink_order
                        more_drinks == ask 'Would you like to order more drinks?'


                    print 'Thanks for ordering!'
                    ```
            18:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    for i in range 1 to 3
                        animal = animals[i]
                        sound = sounds[i]
                        print 'Old MacDonald had a farm'
                        print 'E I E I O!'
                        print 'and on that farm he had a ' animal
                        print 'E I E I O!'
                        print 'with a ' sound sound ' here'
                        print 'and a ' sound sound ' there'
                        print 'here a ' sound
                        print 'there a ' sound
                        print 'everywhere a ' sound sound
                    ```
    default:
        name: Introduzione
        description: Spiegazione del livello
        levels:
            1:
                story_text: |
                    Benvenuto a Hedy! Nel Livello 1 puoi iniziare stampando un testo.

                    Prova tu stesso il codice! Il pulsante giallo copia il codice di esempio nel campo di programmazione.
                    Quindi premere il pulsante verde "Esegui codice" sotto il campo di programmazione per eseguire il codice.

                    Pronto? Quindi vai alla scheda successiva per scoprire come creare i tuoi codici!
                example_code: |
                    ```
                    {print} Ciao Mondo!
                    ```
            2:
                story_text: |
                    Congratulazioni! Hai raggiunto il livello 2. Spero che tu abbia gi√† creato dei codici fantastici!
                    Nel primo livello potresti aver notato che il comando `{echo}` pu√≤ salvare solo un bit di informazione alla volta.
                    Ad esempio, nell'avventura del ristorante, potresti ripetere ci√≤ che il cliente voleva mangiare o ci√≤ che voleva bere, ma non entrambi in una frase.
                    Ci√≤ cambia nel livello 2. Nel livello 2 imparerai a lavorare con le variabili, che ti consentono di salvare pi√π informazioni e stamparle dove preferisci.
                    Quindi passiamo alla scheda successiva!
                example_code: |
                    **Avvertimento! Questo codice non funziona!**
                    In Hedy i comandi cambieranno a volte. `{echo}` ad esempio funziona solo nel livello 1. In questo livello imparerai un modo migliore per riprodurre le risposte.
                    ```
                    {print} Benvenuto da Hedy
                    {ask} Cosa vorresti mangiare?
                    {echo} Quindi vuoi
                    {ask} cosa vorresti bere?
                    {echo} Quindi vuoi
                    ```
            3:
                story_text: |
                    Nel livello precedente hai imparato cos'√® una variabile e come puoi usarla per rendere le tue avventure pi√π interattive.
                    Ma... non √® l'unica cosa che puoi fare con le variabili! Puoi anche utilizzare le variabili per creare elenchi.
                    E puoi anche lasciare che Hedy scelga una parola a caso da un elenco, cos√¨ potrai creare veri e propri giochi!
                    Dai una rapida occhiata alla scheda successiva!
            4:
                story_text: |
                    Nei livelli precedenti ti sei esercitato con le variabili, ma potresti aver riscontrato questo problema.
                    Potresti aver provato a eseguire un codice come questo:

                    Ovviamente volevi stampare

                    "Mi chiamo Sophie".

                    ma Hedy stampa

                    "La mia Sophie √® Sophie".

                    In questo livello questo problema viene risolto utilizzando le virgolette.
                example_code: |
                    ```
                    nome {is} Sophie
                    {print} Il mio nome √® nome
                    ```
            5:
                story_text: |
                    Nei livelli precedenti hai gi√† imparato a usare `{at} {random}` che rendeva i tuoi giochi diversi ogni volta che eseguivi il codice.
                    Ma non √® realmente interattivo, il giocatore non ha alcuna influenza su ci√≤ che accade nel gioco.

                    In questo livello imparerai il comando `{if}`, che ti permette di dare risposte diverse nel tuo programma. In questo modo puoi programmare ad esempio una password segreta per il tuo computer.
                    Quindi passiamo alla scheda successiva per il nuovo comando!
                example_code: |
                    ```
                    password {is} {ask} 'Qual √® la password corretta?'
                    ```
            6:
                story_text: |
                    Nel livello precedente ti sei esercitato con `{ask}` e `{if}`. Ad esempio puoi chiedere agli ospiti cosa vorrebbero mangiare.
                    Quello che per√≤ non puoi ancora fare √® calcolare il prezzo della cena per tutti.

                    Il livello successivo rende possibile utilizzare addizioni, sottrazioni e moltiplicazioni nei tuoi programmi. In questo modo potrai calcolare i prezzi del tuo ristorante, ma potrai anche aggiungere un codice segreto per concedere uno sconto ai tuoi amici e familiari.
                    Un'altra opzione nel livello successivo √® programmare il tuo gioco di matematica, affinch√© il tuo fratellino o la tua sorellina possano esercitarsi con le moltiplicazioni.
                    Vai a vedere di persona!
                example_code: |
                    ```
                    prezzo_cibo {is} 0
                    drink_price {is} 0
                    prezzo_totale {is} 0
                    {print} 'Benvenuti a McHedy'
                    ordina {is} {chiedi} 'Cosa vorresti mangiare?'
                    {if} ordina {is} hamburger food_price {is} 5
                    {if} ordina {is} patatine fritte food_price {is} 2
                    bere {is} {ask} 'Cosa vorresti bere?'
                    {if} drink {√®} acqua drink_price {is} 0
                    {else} drink_price {is} 3
                    prezzo_totale {is} prezzo_cibo + prezzo_bevanda
                    {print} "Saranno ' total_price ' dollari, per favore"
                    ```
            7:
                story_text: |
                    Ottimo lavoro! Hai raggiunto il livello successivo, il che significa che ti sei esercitato con `{if}`e `{else}`. Probabilmente hai notato che i tuoi codici diventano sempre pi√π lunghi.
                    Ad esempio se si desidera programmare 'Buon Compleanno'.

                    Si tratta di un sacco di codice che contiene principalmente le stesse parole pi√π e pi√π volte. Fortunatamente nella scheda successiva imparerai una soluzione con il comando `{repeat}`, che ti consente di ripetere una riga di codice pi√π volte.
                example_code: |
                    ```
                    {print} 'buon compleanno a te'
                    {print} 'buon compleanno a te'
                    {stampa} 'buon compleanno cara Hedy'
                    {print} 'buon compleanno a te'
                    ```
            8:
                story_text: |
                    `{ask}` e `{print}` funzionano ancora come prima. Ma `{if}`, `{else}`, {pressed} e `{repeat}` sono cambiati!
                    Ora puoi raggruppare pi√π righe insieme, ma dovrai *indentare* il codice.
                    Questo significa inserire quattro spazi all'inizio della riga. Devi indentare anche se vuoi creare un blocco con una sola riga.
                example_code: |
                    Il comando `{repeat}` ora funziona in questo modo:
                    ```
                    {repeat} 5 {times}
                        {print} 'Ciao a tutti'
                        {print} 'Tutto questo viene ripetuto 5 volte'
                    ```
                    Mentre i comandi `{if}` e `{else}` ora funzionano in questo modo:

                    ```
                    nome {is} {ask} 'Come ti chiami?'
                    {if} nome {is} Hedy
                        {print} 'Ciao Hedy'
                        {print} 'Puoi giocare sul tuo computer!'
                    {else}
                        {print} 'INTRUSO!'
                        {print} 'Non puoi usare questo computer!'
                    ```
            10:
                story_text: |
                    This calculator game helps you practise your tables of multiplication!
                    ### Exercise
                    Fill in the blanks. We want this program to ask the player these questions:
                    ```
                    How much is 1 times 1?
                    How much is 1 times 2?
                    How much is 1 times 3?
                    How much is 2 times 1?
                    How much is 2 times 2?
                    How much is 2 times 3?
                    How much is 3 times 1?
                    How much is 3 times 2?
                    How much is 3 times 3?
                    _
                    ```
                example_code: |
                    ```
                    numbers = 1, 2, 3
                    {for} _
                        {for} _
                            answer = {ask} _
                            correct = number_1 * number_2
                            {if} answer {is} correct
                                {print} 'Great job!'
                            {else}
                                {print} 'That is wrong. The right answer is ' correct
                    ```
            12:
                story_text: |
                    Forse hai provato a utilizzare i numeri decimali nella tua avventura al ristorante. Se lo hai fatto, probabilmente avrai notato che Hedy non li capiva ancora e completava sempre.
                    Da questo livello in poi √® possibile utilizzare i numeri decimali.
                example_code: |
                    ```
                    {print} 'Two and a half plus two and a half is...'
                    {print} 2.5 + 2.5
                    ```

                    {print} 2.5 + 2.5
            13:
                story_text: |
                    Nei livelli precedenti hai imparato come inserire due comandi `{if}`uno dentro l'altro. Funziona bene, ma ti d√† codici molto lunghi e scomodi come questo:

                    In questo sistema devi fornire sia il nome utente corretto che la password corretta.
                    In questo livello imparerai il comando `{and}` che render√† questo codice molto pi√π breve e comprensibile!
                    Controlla!
                example_code: |
                    ```
                    name = {ask} 'what is your name?'
                    age = {ask} 'what is your age?'
                    {if} name {is} 'Hedy' {and} age {is} 2
                        {print} 'You are the real Hedy!'
                    ```
            14:
                story_text: |
                    Ora impareremo come usare dei nuovi elementi. Potresti gi√† conoscerli dalla matematica, il `<` e il `>`.
                    Il `<` controlla se il primo numero √® pi√π piccolo del secondo, per esempio et√† `<` 12 controlla se l'et√† √® minore di 12.
                    Se vuoi controllare se il primo numero √® pi√π piccolo o uguale al secondo, puoi usare il `<=`, per esempio et√† `<=` 11.
                    Il `>` controlla se il primo numero √® pi√π grande del secondo, per esempio punteggio `>` 10 controlla se il punteggio √® maggiore di 10.
                    Se vuoi controllare se il primo numero √® pi√π grande o uguale al secondo, puoi usare il `>=`, per esempio punteggio `>=` 11.
                    Questi confronti si usano dentro il comando `{if}`, in questo modo:
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```

                    {if} age < 13
                        {print} 'You are younger than me!'
                    {else}
                        {print} 'You are older than me!'
            15:
                story_text: |
                    In questo gioco qui sotto √® stato creato un codice per assicurarsi che il giocatore possa giocare per tutto il tempo che desidera...
                    Ma il codice √® inefficace e troppo lungo. Inoltre, cosa succede se il giocatore vuole giocare a 101 giochi invece di 100?
                    Non puoi giocare all'infinito?
                    In questo livello imparerai un comando che render√† tutto questo molto pi√π semplice!
                example_code: |
                    ```
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
                    ```
            16:
                story_text: |
                    In questo livello progrediremo un po' di pi√π verso il vero codice Python. Imparerai anche come abbinare due elenchi insieme.
                    In questo modo puoi programmare un codice in cui l'animale corretto √® abbinato al suono giusto.
                    Perch√© i due codici qui sotto... Evidentemente non hanno senso!
                example_code: |-
                    ```
                    animali = 'pollo', 'cavallo', 'mucca'
                    suoni = 'cluck', 'neigh', 'moo'
                    {for} animale {in} animali
                        {print} 'Un ' animale ' dice ' suona {at} {random}
                    ```
                    Potresti anche provare a farlo funzionare in questo modo, ma...
                    ```
                    animali = 'pollo', 'cavallo', 'mucca'
                    suoni = 'cluck', 'neigh', 'moo'
                    {for} animale {in} animali
                        {for} suono {in} suoni
                            {print} 'Un 'animale' dice 'suono
                    ```
                    Nota: questi codici non funzioneranno in questo modo in questo livello. Vai alla scheda successiva per vedere quali parti devi correggere.
            17:
                story_text: |
                    Ora cambieremo leggermente il rientro. Ogni volta che abbiamo bisogno di un rientro, abbiamo bisogno di `:` nella riga prima del rientro.

                    In questo livello puoi anche utilizzare un nuovo comando: `{elif}`. `{elif}` √® l'abbreviazione di `{else} {if}` e ti serve quando vuoi fare 3 (o pi√π!) opzioni.
                    Controlla!
            18:
                story_text: |
                    Congratulazioni! Hai raggiunto l'ultimo livello di Hedy! Il codice che hai creato qui pu√≤ essere copiato in ambienti Python reali come replit o PyCharm e puoi continuare ad imparare l√¨!
                    Tieni presente tuttavia che Python pu√≤ leggere solo comandi inglesi, quindi se hai utilizzato altre lingue, ora dovrai passare all'inglese.

                    {print}('Mi chiamo ', nome)
    dice:
        levels:
            3:
                example_code: |
                    ```
                    choices {is} 1, 2, 3, 4, 5, earthworm
                    {print} choices {at} {random}
                    ```
            4:
                story_text: |
                    In questo livello puoi anche creare dadi. Ma questa volta puoi provarlo tu stesso, senza un codice di esempio!

                    ### Esercizio
                    Crea i tuoi dadi in questo livello.
                    Suggerimento: se non hai idea di come realizzare i dadi. Dai un'occhiata ai tuoi dadi del livello precedente, ma non dimenticare di aggiungere le virgolette.
            5:
                story_text: |
                    Aggiungeremo i comandi `{if}` e `{else}` ai nostri dadi!

                    ### Esercizio
                    Completa il codice di esempio in modo che il codice indichi "Puoi smettere di lanciare" una volta lanciato un lombrico. Dovrebbe essere scritto "Devi lanciare di nuovo" se hai lanciato qualcos'altro.
                    **Extra** Forse vuoi ricreare un dado di un gioco completamente diverso. Va bene anche quello! Quindi inventa la tua reazione, ad es. "s√¨" per 6 e "peccato" per qualcos'altro.
                example_code: |
                    ```
                    choices {is} 1, 2, 3, 4, 5, earthworm
                    throw {is} _
                    {print} 'you have' _ 'thrown'
                    {if} _ {is} earthworm {print} 'You can stop throwing.' _ {print} 'You have to hear it again!'
                    ```
            6:
                story_text: |
                    In questo modo puoi anche far morire di nuovo un lombrico, ma ora puoi anche calcolare quanti punti sono stati ottenuti.
                    Potresti sapere che il verme conta 5 punti per i lombrichi. Ora dopo un lancio puoi immediatamente calcolare quanti punti hai lanciato.
                    Questo √® il codice per calcolare i punti per un dado:

                    ### Esercizio
                    Puoi creare il codice in modo da ottenere il punteggio totale per 8 dadi? Per fare ci√≤, devi tagliare e incollare alcune righe del codice.
                example_code: |
                    ```
                    choices = 1, 2, 3, 4, 5, earthworm
                    points = 0
                    throw = choices {at} {random}
                    {print} 'you threw' throw
                    {if} throw {is} earthworm points = points + 5 {else} points = points + throw
                    {print} 'those are' points ' point'
                    ```
                    Can you make the code so that you get the total score for 8 dice? To do that, you have to cut and paste some lines of the code.
                example_code_2: |
                    Did you manage to calculate the score for 8 dice? That required a lot of cutting and pasting, right? We are going to make that easier in level 7!
            7:
                story_text: |
                    You can also make a die again in level 5. With the `{repeat}` code you can easily roll a whole hand of dice.
                    Try to finish the sample code! The dashes should contain multiple commands and characters.

                    But maybe you want to make a completely different die. Of course you can!
                example_code: |
                    ```
                    choices = 1, 2, 3, 4, 5, earthworm
                    {repeat} _ _ {print} _ _ _
                    ```
            10:
                story_text: |
                    Is everybody taking too long throwing the dice? In this level you can let Hedy throw all the dice at once!
                example_code: |
                    ```
                    players = Ann, John, Jesse
                    choices = 1, 2, 3, 4, 5, 6
                    {for} player {in} players
                        {print} player ' throws ' choices {at} {random}
                        {sleep}
                    ```
    dishes:
        name: Piatti?
        default_save_name: Piatti
        description: Use the computer to see who does the dishes (Start at level 2)
        levels:
            3:
                story_text: |
                    A casa sei sempre in disaccordo su chi dovrebbe lavare i piatti o cambiare la lettiera oggi?
                    Quindi puoi lasciare che sia il computer a scegliere in modo molto equo. Puoi programmarlo in questo livello!
                example_code: |
                    ```
                    people {is} mom, dad, Emma, Sophie
                    {print} people {at} {random}
                    ```
                story_text_2: |
                    ### Esercizio
                    Crea la tua versione del programma per lavastoviglie. Per prima cosa fai un elenco dei membri della tua famiglia.
                    Quindi pensa a un'attivit√† che deve essere eseguita e lascia che sia il computer a decidere chi deve eseguirla con il comando `{at} {random}`.

                    **Extra** Non hai voglia di lavare i piatti da solo? Hackera il programma rimuovendo il tuo nome dall'elenco con il comando `{remove}` `{from}`.
            4:
                story_text: |
                    Con le virgolette puoi migliorare ulteriormente il tuo programma di lavaggio.

                    ### Esercizio
                    Innanzitutto, inserisci i simboli o i comandi corretti negli spazi vuoti per far funzionare questo programma di esempio.
                    L'hai preso? Grande! Ora copia il tuo codice dal livello precedente e fallo funzionare in questo livello aggiungendo virgolette nei punti giusti.
            5:
                story_text: |
                    Con `{if}` ora puoi divertirti di pi√π con la scelta nel programma. Puoi fare in modo che il tuo programma risponda alla scelta fatta dal computer.
                    ### Esercizio
                    Puoi completare il codice in modo che venga stampato "peccato" quando tocca a te e altrimenti "s√¨!"?
                    Non dimenticare le virgolette!
                example_code: |
                    ```
                    people {is} mom, dad, Emma, Sophie
                    dishwasher {is} people {at} {random}
                    {if} dishwasher {is} Sophie {print} _ too bad I have to do the dishes _ {else} {print} 'luckily no dishes because' _ 'is already washing up'
                    ```
            6:
                story_text_2: |
                    If you are extremely unlucky the previous program might choose you to to the dishes for the whole week! That's not fair!
                    To create a fairer system you can use the `{remove}` command to remove the chosen person from the list. This way you don't have to do the dishes again untill everybody has had a turn.

                    Monday and tuesday are ready for you! Can you add the rest of the week?
                    And... can you come up with a solution for when your list is empty?
                example_code_2: |
                    ```
                    people = mom, dad, Emma, Sophie
                    dishwasher = people {at} {random}
                    {print} 'Monday the dishes are done by: ' dishwasher
                    {remove} dishwasher {from} people
                    dishwasher = people {at} {random}
                    {print} 'Tuesday the dishes are done by: ' dishwasher
                    {remove} dishwasher {from} people
                    dishwasher = people {at} {random}
                    ```
            7:
                story_text: |
                    With the `{repeat}` you can repeat pieces of code. You can use this to calculate who will be washing dishes for the entire week.
                example_code: |
                    ```
                    people = mom, dad, Emma, Sophie
                    {repeat} _ _ {print} 'the dishwasher is' _
                    ```
            10:
                story_text: |
                    In this level you could make an even better dish washing shedule.
    elif_command:
        description: elif
        levels:
            17:
                example_code: |
                    ```
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
                    ```
    for_command:
        description: for command
        levels:
            11:
                story_text: |-
                    In questo livello aggiungiamo una nuova forma di `{for}`. Nei livelli precedenti usavamo `{for}` con un elenco, ma possiamo anche usare `{for}` con i numeri.
                    Lo facciamo aggiungendo un nome di variabile, seguito da `{in}` `{range}`. Scriviamo quindi il numero da cui iniziare, `{to}`e il numero da cui terminare.

                    Prova l'esempio per vedere cosa succede! Anche in questo livello, dovrai utilizzare i rientri nelle righe sotto le istruzioni `{for}`.
    fortune:
        name: Indovino
        levels:
            1:
                story_text: |
                    Siete mai stati a un carnevale e vi siete fatti predire il futuro da un'indovino? O hai mai giocato con una palla otto magica?
                    Allora probabilmente saprai che non possono davvero predire il tuo futuro, ma √® comunque divertente giocarci!

                    Nei prossimi livelli potrai imparare a creare la tua macchina per predire il futuro!
                    Nel livello 1 puoi iniziare in modo semplice lasciando che Hedy si presenti come un'indovino e lasci che `{echo}` le risposte dei giocatori.
                    Come questo:
                example_code: |
                    ```
                    {print} Hello, I'm Hedy the fortune teller!
                    {ask} Who are you?
                    {print} Let me take a look in my crystal ball
                    {print} I see... I see...
                    {echo} Your name is
                    ```
                story_text_2: |
                    Hedy now only tells you your name. Can you expand the code so that Hedy can predict more things about you?
                    Obviously, Hedy isn't a very good fortune teller yet, as she can only repeat the answers that were given by the players!
                    Take a look in level 2 to improve your fortune teller.
            3:
                story_text: |
                    In the previous levels you've created your first fortune telling machine, but Hedy couldn't really predict anything, only {echo}.
                    In this level you can use a variable and the `{at} {random}` command to really let Hedy choose an answer for you. Check out this code for instance:
                story_text_2: |
                    Now, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or '{ask} again'.
            4:
                example_code: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    question {is} {ask} 'What do you want to know?'
                    {print} 'This is your question: ' question
                    answers {is} yes, no, maybe
                    {print} 'My crystal ball says...'
                    {sleep} 2
                    {print} answers {at} {random}
                    ```
            5:
                story_text: |
                    In this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!
                    By using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.
                    Check out this example to find out how.
                example_code: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    {print} 'I can predict {if} youll win the lottery tomorrow!'
                    person {is} {ask} 'Who are you?'
                    {if} person {is} Hedy {print} 'You will definitely win!ü§©' {else} {print} 'Bad luck! Someone {else} will win!üò≠'
                    ```
            6:
                story_text: |
                    In this level you can use math in your predictions as a fortune teller. This allows you to make up (silly) formulas to calculate the future.
                    For example you could calculate how rich you'll get or how many kids you will have when you grow up.
                example_code: |
                    ```
                    {print} 'I am Hedy the fortune teller!'
                    {print} 'I can predict how many kids youll get when you grow up!'
                    age = {ask} 'How old are you?'
                    siblings = {ask} 'How many siblings do you have?'
                    length = {ask} 'How tall are you in centimetres?'
                    kids = length / age
                    kids = kids - siblings
                    {print} 'You will get ...'
                    {sleep}
                    {print} kids ' kids!'
                    ```

                    If the previous example wasn't silly enough for you, take a look at this one!

                    ```
                    {print} 'Im Hedy the silly fortune teller!'
                    {print} 'I will predict how smart you are!'
                    football = {ask} 'On a scale 1-10 how much do you love football?'
                    bananas = {ask} 'How many bananas did you eat this week?'
                    hygiene = {ask} 'How many times did you wash your hands today?'
                    result = bananas + hygiene
                    result = result * football
                    {print} 'You are ' result ' percent smart.'
                    ```
            7:
                story_text: |
                    In this level you can use the `{repeat}` command to make your machine tell multiple fortunes at once.
                example_code: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    {print} 'You can {ask} 3 questions!'
                    {repeat} 3 {times} question = {ask} 'What do you want to know?'
                    answer = yes, no, maybe
                    {repeat} 3 {times} {print} 'My crystal ball says... ' answer {at} {random}
                    ```
            8:
                story_text: |
                    In the previous levels you've learned how to use repeat to make the fortune teller answer 3 questions in a row, but we had a problem with printing the questions.
                    Now that problem is solved, because of the new way of using the repeat command.
                    In the next example you can have your fortune teller {ask} 3 questions and also print them!
                example_code: |
                    ```
                    {print} 'I am Hedy the fortune teller!'
                    {print} 'You can {ask} me 3 questions.'
                    answers = yes, no, maybe
                    {repeat} 3 {times}
                       question = {ask} 'What do you want to know?'
                       {print} question
                       {sleep}
                       {print} 'My crystal ball says...' answers {at} {random}
                    ```
            10:
                story_text: |
                    In this level you'll learn how to program the game MASH (mansion, apartement, shack, house). In this game you can predict for all the players at once, what their future will look like.
                example_code: |
                    ```
                    houses = mansion, apartment, shack, house
                    loves = nobody, a royal, their neighbour, their true love
                    pets = dog, cat, elephant
                    names = Jenna, Ryan, Jim
                    {for} name {in} names
                        {print} name ' lives in a ' houses {at} {random}
                        {print} name ' will marry ' loves {at} {random}
                        {print} name ' will get a ' pets {at} {random} ' as their pet.'
                        {sleep}
                    ```
            12:
                story_text: |-
                    Dal livello 12 in poi, dovrai usare le virgolette anche negli elenchi, prima e dopo ogni elemento.

                    ### Esercizio
                    Aggiungi due previsioni all'elenco
                example_code: |
                    ```
                    fortunes = 'you will be rich', 'you will fall in love', 'you will slip on a banana peel'
                    {print} 'I will take a look in my crystall ball for your future.'
                    {print} 'I see... I see...'
                    {sleep}
                    {print} fortunes {at} {random}
                    ```
    functions:
        levels:
            12:
                example_code: |
                    ```
                    sides = 'left', 'right'
                    limbs = 'hand', 'foot'
                    colors = 'red', 'blue', 'green', 'yellow'

                    {define} turn
                        chosen_side = sides {at} {random}
                        chosen_limb = limbs _
                        chosen_color = colors _
                        {print} chosen_side ' ' chosen_limb ' on ' chosen_color

                    {print} 'Lets play a game of Twister!'
                    {for} i {in} {range} 1 to _
                        {call} turn
                        {sleep} 2
                    ```
            13:
                story_text: |
                    Now that you've learned how to use functions, you'll learn how to use a function with an argument.
                    An **argument** is a variable that is used within a function. It is not used outside the function.

                    For example in this code we've programmed the first verse of the song 'My Bonnie is over the ocean'.
                    In this example code the argument `place` is used. Place is a variable that is only used in the function, so an argument.
                    To use `place` we have programmed the line `define song with place`.
                    When the function is called, computer will replace the argument `place`, with the piece of text after `call song with`.

                    ### Exercise
                    The next verse of this song goes:

                    Last night as I lay on my pillow
                    Last night as I lay on my bed
                    Last night as I lay on my pillow
                    I dreamed that my Bonnie is dead

                    Can you program this verse in the same way as the example?
            14:
                example_code: |
                    ```
                    {define} calculate_new_price {with} amount, percentage
                        percentage = percentage / 100
                        discount_amount = amount * percentage
                        return amount - discount_amount

                    old_price = {ask} 'How much is on the price tag?'
                    discount = {ask} 'What percentage is the discount?'

                    new_price = _ calculate_new_price {with} old_price, _
                    {print} 'The new price is ' new_price ' dollar'
                    ```
    haunted:
        name: Casa stregata
        default_save_name: Casa stregata
        description: Scappa dalla casa stregata
        levels:
            1:
                story_text: |
                    In this adventure you are working towards making a game in which you have to escape from a haunted house by picking the correct door.
                    If you pick the right door you'll survive, but {if} not a terrible monster might...

                    In level 1 we start our haunted house game by making up a scary story and {ask} the player what monster they'll see in the haunted house.
                story_text_2: |
                    Can you finish the scary story? Or make up your own haunted house story?
            2:
                example_code: |
                    ```
                    monster_1 {is} üëª
                    monster_2 {is} ü§°
                    monster_3 {is} üë∂
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
                example_code_2: |
                    ```
                    monster_1 {is} _
                    monster_2 {is} _
                    monster_3 {is} _
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
            3:
                story_text: |
                    In the previous levels you've made an introduction to your haunted house game, but as you might have noticed the story would always have a dreadful end.
                    In this level you can make your story more interactive by changing the outcome of the game; sometimes you'll get eaten, sometimes you'll escape!
                    Let Hedy decide randomly!
            4:
                story_text: |
                    In this level you learn how to use quotation marks in your games.
                    Can you make your Haunted House level 4 proof?
                example_code: |
                    ```
                    {print} _Escape from the haunted house!_
                    {print} _There are 3 doors in front of you..._
                    choice {is} {ask} _Which door do you choose?_
                    {print} _You picked door ..._ choice
                    monsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED
                    {print} _You see..._
                    {sleep}
                    {print} monsters {at} {random}
                     ```
            5:
                story_text: |
                    Up until this level the haunted house game always asked the player to choose a door, but as you might have noticed, they didn't really have to answer correctly.
                    If the player filled in a completely random answer, the game would still work and the player might even win (despite not picking a door).
                    In this level you can only win the game by picking the same door Hedy picked randomly.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house!'
                    {print} 'There are 3 doors in front of you...'
                    doors {is} 1, 2, 3
                    monsters {is} werewolf, mummy, vampire, zombie
                    chosen_door {is} {ask} 'Which door do you choose?'
                    {print} 'You chose door...' chosen_door
                    {sleep}
                    correct_door {is} doors {at} {random}
                    {if} chosen_door {is} correct_door {print} 'Great! Youve escaped!'
                    {else} {print} 'Oh no! You are being eaten by a...' monsters {at} {random}
                    ```
            9:
                story_text: |
                    In this level you can use nesting, which allows you to make the haunted house even more interactive!

                    Now it's very hard to win this game, can you make it easier to win?
                    For example by only having 1 wrong door and 2 correct doors instead of 1 correct door and 2 wrong ones?
            11:
                story_text: |
                    In this level we've changed the repeat command and we've added a line to our haunted house that tells the player in which room they are.
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player {is} alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    {for} i {in} {range} 1 {to} 3
                        {if} player {is} alive
                            correct_door = doors {at} {random}
                            {print} 'Room ' i
                            {print} 'There are 3 doors in front of you...'
                            chosendoor = {ask} 'Which door do you choose?'
                            {if} chosendoor {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
    if_command:
        description: Introducing the if command
        levels:
            9:
                story_text: |
                    In this level you can also put an {if} command inside another {if} command.
    in_command:
        description: Introducing the in command
        levels:
            5:
                example_code_2: |
                    ```
                    animals is dog, cow, sheep
                    answer is ask 'What is your favorite animal?'
                    _ answer _ animals _ 'Mine too!'
                    _ _ 'My favorite animals are dogs, cows and sheep'
                    ```
    is_command:
        description: introducing is command
        levels:
            2:
                story_text_2: |
                    ### Exercise
                    Time to make your own variables!
                    In the example code we made an example of the variable `favorite_animal`. In line 1 the variable is set, and in line 2 we haved used the variable in a print command.
                    Firstly, finish our example by filling in your favorite animal on the blank. Then make at least 3 of these codes yourself. Pick a variable, and set the variable with the {is} command. Then use it with a {print} command, just like we did.
            14:
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
                    ```

                    {if} age < 13
                        {print} 'You are younger than me!'
                    {else}
                        {print} 'You are older than me!'
    language:
        name: Lingua
        levels:
            5:
                story_text: |
                    Make your own program to practice your vocabulary in a new language.
    maths:
        levels:
            6:
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 minus 5 is ' 5 - 5
                    {print} '5 times 5 is ' 5 * 5
                    ```
            12:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```

                    {print} 2.5 + 2.5
    music:
        levels:
            6:
                story_text: "Instead of playing notes, you can also play numbers now. Simply type `{play} 1` for the lowest note, `{play} 70` for the highest note, or anything in between.\n\n### Exercise\n This calls for musical maths! Try out the example code a couple of times with different starting numbers. \nThen, see if you can compose a song using the numbers.\n"
    parrot:
        name: Pappagallo
        default_save_name: Pappagallo
        description: Crea il tuo amico pappagallo che ripeter√† ci√≤ che dici!
        levels:
            1:
                story_text: |
                    Crea il tuo amico pappagallo che ripeter√† ci√≤ che dici!
                example_code: |
                    ```
                    {print} Sono Hedy il pappagallo
                    {ask} Come ti chiami?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Esercizio
                    Copia il codice di esempio nel tuo schermo di input clickando sul pulsante giallo.
                    Fai in modo che il pappagallo faccia un'altra domanda. Riempi gli spazi bianchi nell'esempio!
                    **Extra** Puoi anche fare in modo che il pappagallo faccia molte domande. Scrivi qualche riga in pi√π sotto al tuo codice.
                example_code_2: |
                    ```
                    {print} Sono Hedy il pappagallo
                    {ask} _
                    {echo}
                    {echo}
            2:
                story_text: |
                    Crea il tuo amico pappagallo che ripeter√† ci√≤ che dici!
                example_code: |
                    ```
                    {print} Sono Hedy il pappagallo
                    nome {is} {ask} come ti chiami?
                    {print} nome
                    {sleep}
                    {print} craaa!
                    {sleep}
                    {print} nome
                    ```
                story_text_2: |
                    ### Exercise
                    You can use variables to make the parrot say more than only your name. Can you complete this code?
            3:
                story_text: |
                    Insegna al tuo pappagallo una nuova parola con `{add}`.
                example_code: |
                    ```
                    parole {is} craaa, Hedy
                    {print} Addestra il tuo pappagallo!
                    parola_nuova {is} {ask} Che parola vuoi insegnargli?
                    {add} parola_nuova {to_list} parole
                    {print} üßí Dii parola_nuova , Hedy!
                    {print} ü¶ú parole {at} {random}
                    ```
            4:
                story_text: |
                    In this level we have to use quotation marks with the commands `{ask}` and `{print}`.
                    Can you complete the code by adding quotation marks?
            5:
                story_text: |
                    Premia il tuo pappagallo se ({if}) dice la parola giusta.
                example_code: |
                    ```
                    le parole {is} stridono, Hedy
                    {print} 'Addestra il tuo pappagallo!'
                    nuovo_record {is} {ask} 'Quale parola vuoi insegnargli?'
                    {add} nuova_parola {to_list} parole
                    detta_parola {is} parole {at}{random}
                    {print} 'üßí D√¨ 'nuova_parola', Hedy!'
                    {print} '   ' ha detto_parola
                    _ detto_parola {is} nuova_parola _ 'üßí Ottimo lavoro, Hedy! üç™'
                    _ _ 'üßí No, Hedy! Pronuncia "nuova_parola".
                    ```
    piggybank:
        levels:
            12:
                story_text: |
                    In this adventure you learn how to make a digital piggy bank, to calculate how much money you have and how long you need to save up to buy what you want!
                example_code: |
                    ```
                    {print} 'The digital piggy bank'
                    wish = {ask} 'What would you like to buy?'
                    price = {ask} 'How much does that cost?'
                    saved = {ask} 'How much money have you saved already?'
                    allowance = {ask} 'How much pocket money do you get per week?'
                    to_save = price - saved
                    weeks = to_save / allowance
                    {print} 'You can buy a ' wish ' in ' weeks ' weeks.'
                    ```
            14:
                example_code: |
                    ```
                    _ calculate_budget with wish, money, allowance
                        to_save = wish - money
                        weeks = to_save / allowance
                        {if} wish _ money
                            {print} 'You need to save up some more!'
                            {print} 'Youll need ' weeks ' more weeks.'
                        {else}
                            {print} 'Great! You have enough'
                            {print} 'Lets go shopping!'

                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'

                    {call} calculate_budget with _, _, _
                    ```
    pressit:
        levels:
            9:
                story_text: |
                    Now that you know how to combine statements, you can create a touch type tool with `{pressed}`.

                    ### Exercise
                    Finish the code. Each time a random letter should be chosen, which you have to press. You get a point for a correct press, and and two points deduction for a wrong press.
                    **(extra)** Clear the screen after each letter, and show the user how many points they have scored.
    print_command:
        levels:
            1:
                story_text: |
                    ## Il comando `{print}`
                    Puoi scrivere del testo sullo schermo usando il comando `{print}`.
                story_text_2: |
                    ### Esercizio
                    In Hedy troverai esercizi in ogni avventura. Un esercizio ti permettere di fare pratica con i nuovi comandi e concetti, e ti consente di dare il tuo tocco personalizzato al codice di esempio.
                    In questo esercizio vedrai uno spazio bianco rosa. Devi scrivere qualcosa al posto dello spazio rosa prima che il codice possa essere avviato.

                    Riempi il comando `{print}` nello spazio bianco e aggiungi cinque linee di codice aggiuntive. Ogni linea di codice deve iniziare con un comando `{print}`.
                    Buon divertimento!
            18:
                example_code_2: |
                    ```
                    temperature = 25
                    {print}('It is ', temperature, ' degrees outside')
                    ```

                    {print}('My name is ', name)
    quizmaster:
        description: Crea il tuo quiz!
    random_command:
        levels:
            16:
                story_text: |-
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    We use square brackets to point out a place in a list. For example: `friends[1]` is the first name on the list of friends, as you can see in the first part of the example code. The second part of the example code shows you that we can also match 2 lists using the variable i.
    repeat_command:
        description: repeat command
        levels:
            7:
                story_text: |
                    ## Repeat! Repeat! Repeat!
                    Level 7 adds the `{repeat}` command.  `{repeat}` can be used to execute one line of code multiple times. Like this:

                    ### Exercise
                    Play around with the repeat command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?
            9:
                story_text: |
                    Great job! You've reached another new level! In the previous level you've learned to use multiple lines of code in an {if} or {repeat} command. But you can't yet combine the two...
                    Good news! In this level you will be allowed to put an {if} inside an {if}, or inside a {repeat} command. Putting a block of code inside another block of code is called nesting.                     ``` Putting a block of code inside another block of code is called nesting.
                example_code: |
                    ```
                    answer = {ask} 'Are you ready to learn something new?'
                    {if} answer {is} yes
                        {print} 'Great! You can learn to use the repeat command in the if command!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                    {else}
                        {print} 'Maybe you should practice some more in the previous level'
    repeat_command_2:
        description: repeat command 2
        levels:
            7:
                story_text_2: |
                    Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.
                    Then, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.
    restaurant:
        default_save_name: Ristorante
        description: Crea il tuo ristorante virtuale
        levels:
            1:
                story_text_2: |
                    Can you think of more lines to add to your restaurant code? For example, can you {ask} the guests what they'd like to drink, tell them the price, or wish them a pleasant meal?
                example_code_2: |
                    ```
                    {print} Welcome to Hedy's restaurant üçü
                    {ask} What would you like to order?
                    {echo} So you would like to order
                    {print} Thanks you for your order!
                    {print} It's on its way!
                    ```
            2:
                story_text: |
                    In level 2 you could expand your restaurant by using variables. In level 1 Hedy could only {echo} the order once and only remember the last thing that was ordered.
                    Now you can use variables and Hedy can remember both the food and the drinks!
                example_code: |
                    ```
                    {print} Welcome to Hedy's restaurant!
                    {print} Today we're serving pizza or lasagna.
                    food {is} {ask} What would you like to eat?
                    {print} Great choice! The food is my favorite!
                    topping {is} {ask} Would you like meat or veggies on that?
                    {print} food with topping is on its way!
                    drinks {is} {ask} What would you like to drink with that?
                    {print} Thank you for your order.
                    {print} Your food and drinks will be right there!
                    ```
                story_text_2: |
                    ### Exercise
                    Can you make this code more elaborate? For example by adding drinks to the order? Or...?
            3:
                example_code: |
                    ```
                    {print} Welcome to Hedy's Random Restaurant!
                    {print} The only restaurant that will randomly choose your meal and its price for you!
                    starters {is} salad, soup, carpaccio
                    mains {is} pizza, brussels sprouts, spaghetti
                    desserts {is} brownies, ice cream, french cheeses
                    drinks {is} cola, beer, water
                    prices {is} 1 dollar, 10 dollars, 100 dollars
                    {print} You will start with: starters {at} {random}
                    {print} Then we'll serve: mains {at} {random}
                    {print} And as dessert: desserts {at} {random}
                    {print} You will get a drinks {at} {random} to drink
                    {print} That will be: prices {at} {random}
                    {print} Thank you and enjoy your meal!
                    ```
                story_text_2: |
                    Does your costumer have any allergies or do they dislike certain dishes? Then you can use the `{remove}`command to remove it from your menu.
                example_code_2: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    allergies {is} {ask} Are you allergic to any falvors?
                    {remove} allergies {from} flavors
                    {print} You get a flavors {at} {random} milkshake
                    ```
            4:
                story_text: |
                    ### Exercise
                    Add the quotation marks to this code to make it work! Be careful: variables should not be in quotation marks.
                    Then, use the `{clear}` command to only show one line at a time in your output screen.

                    ### Exercise 2
                    Go back to the previous level and copy your restaurant code. Make the code work in this level by adding quotation marks in the right spots and add some `{clear}` commands.
            5:
                story_text: |
                    In this level the {if} command allows you to {ask} your customers questions and give different responses to the answers.
                    In the example below, you see that you can {ask} the customer {if} they want to hear the specials and Hedy can respond accordingly.
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    special {is} {ask} 'Would you like to hear our specials today?'
                    {if} special {is} yes {print} 'Todays special is chicken piri piri and rice.' {else} {print} 'No problem.'
                    food {is} {ask} 'What would you like to eat?'
                    {print} 'One ' food ', coming right up!'
                    drink {is} {ask} 'What would you like to drink with that?'
                    {if} drink {is} cola {print} 'Im sorry, we are out of cola!' {else} {print} 'Great choice!'
                    anything {is} {ask} 'Would you like anything {else}?'
                    {print} 'Let me repeat your order...'
                    {print} 'One ' food
                    {if} drink {is} cola {print} 'and...' {else} {print} 'One ' drink
                    {if} anything {is} no {print} 'Thats it!' {else} {print} 'One ' anything
                    {print} 'Thank you for your order and enjoy your meal!'
                    ```
            6:
                story_text: |
                    In this level you can use maths to calculate the total price of your customer's order, which can make your virtual restaurant more realistic.
            7:
                story_text: |
                    In this level you've learned how to use the {repeat} command to repeat a line of code a certain amount of times.
                    You can use that in your restaurant to {ask} multiple people what they'd like to eat. Like this:
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people are joining us today?'
                    {repeat} people times food = {ask} 'What would you like to eat?'
                    {print} 'Thanks for your order! Its coming right up!'
                    ```
            9:
                story_text: |
                    In this level you can use nesting to make your restaurant more realistic and more fun!
                    For example you would {ask} for sauce {if} somebody orders fries, but you wouldn't {if} someone orders pizza!
                    Check out the example, and try this at your own virtual restaurant!
                example_code: |
                    ```
                    {print} 'Benvenuti al Ristorante Chez Hedy!'
                    persone = {ask} 'Quante persone si uniranno a noi oggi?'
                    {print} 'Fantastico!'
                    prezzo = 0
                    {repeat} persone {times}
                    _ cibo = {ask} 'Cosa vorresti ordinare?'
                    _ {print} cibo
                    _ {if} il cibo {is} patatine fritte
                    _ prezzo = prezzo + 3
                    _ salsa = {ask} 'Che tipo di salsa vorresti con le tue patatine?'
                    _ {if} salsa {is} no
                    _ {print} 'senza salsa'
                    _ {else}
                    _ prezzo = prezzo + 1
                    _ {print} 'con' salsa
                    _  {if}il cibo {is} pizza
                    _ prezzo = prezzo + 4
                    {print} 'Sar√† il 'prezzo' in dollari'
                    {print} 'Buon appetito!'
                    ```
            10:
                story_text: |
                    In this level you'll learn how to easily {ask} your guests' orders in a short code.
                example_code: |
                    ```
                    courses = appetizer, main course, dessert
                    {for} course {in} courses
                        food = {ask} 'What would you like to eat as your ' course '?'
                        {print} food ' will be your ' course
                    ```
                example_code_2: |
                    ```
                    courses = appetizer, main course, dessert
                    names = Timon, Onno
                    {for} name {in} names
                        {for} course {in} courses
                            food = {ask} name ', what would you like to eat as your ' course '?'
                            {print} name ' orders ' food ' as their ' course
                    ```
            11:
                story_text: |
                    We can use the `{for} i {in} {range} 1 {to} 5` to {print} the orders from multiple customers in an orderly manner.
                example_code: |
                    ```
                    {print} 'Benvenuti al Ristorante Hedy!'
                    persone = {ask} 'Per quante persone vorresti ordinare?'
                    {print} 'Quindi vuoi ordinare per ' persone ' persone.'
                    {print} "Andiamo!"
                    ```
            12:
                story_text: |
                    Da questo livello in poi puoi usare i numeri decimali per rendere il tuo menu pi√π realistico.
                example_code: |
                    ```
                    price = 0
                    food = {ask} 'What would you like to order?'
                    drink = {ask} 'What would you like to drink?'
                    {if} food {is} 'hamburger'
                        price = price + 6.50
                    {if} food {is} 'pizza'
                        price = price + 5.75
                    {if} drink {is} 'water'
                        price = price + 1.20
                    {if} drink {is} 'soda'
                        price = price + 2.35
                    {print} 'That will be ' price ' dollar, please'
                    ```
            13:
                story_text: |
                    In this level we can use the new commands to upgrade our restaurant.
                    We use `{and}` to see {if} two things are both the case.
                example_code: |
                    ```
                    price = 10
                    food = {ask} 'What would you like to eat?'
                    drinks = {ask} 'What would you like to drink?'
                    {if} food {is} 'sandwich' {and} drinks {is} 'juice'
                        {print} 'Thats our discount menu'
                        price = price - 3
                    {print} 'That will be ' price ' dollars'
                    ```
    rock:
        name: Sasso, carta, forbice
        default_save_name: Rock
        levels:
            1:
                example_code: |
                    ```
                    {print} what do you choose?
                    {ask} choose from rock, paper or scissors
                    {echo} so your choice was:
                    ```
                    Instead of using words, you could also use emojis of course: ‚úä‚úã‚úå
            2:
                story_text: |
                    In this level you can practise using the variables, so that you can make the rock, paper, scissors game in the next level!
                example_code: |-
                    ```
                    la scelta {is} rock
                    {print} Scelgo _
                    ```
            3:
                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} choices {at} {random}
                    ```
                story_text_2: |
                    ### Exercise
                    Now you only have one player, so can you add a second player?
                    You can even use variables to name player 1 and player 2.
                example_code_2: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} player 1 chooses... choices {at} {random}
                    {print} player 2 _
                    ```
            5:
                story_text: |
                    In this level we can determine who won.
                    For that you need the new `{if}` code.

                    Save your choice with the name of choice and the choice of computer as computer choice.
                    Then you can use `{if}` to see {if} they are the same or different.
                    Will you finish the code?
                example_code: |
                    ```
                    options {is} rock, paper, scissors
                    computer_choice {is} _
                    choice {is} {ask} 'What do you choose?'
                    {print} 'you chose ' _
                    {print} 'computer chose ' _
                    {if} _ {is} _ {print} 'tie!' {else} {print} 'no tie'
                    ```

                    Fill in the correct code on the blanks to see {if} it is a draw.
            9:
                story_text: |
                    In this level you can program the whole rock, paper, scissors game by nesting the {if}-commands. Can you finish the code?
                example_code: |
                    ```
                    choices = rock, paper, scissors
                    your_choice = {ask} 'What do you choose?'
                    {print} 'You choose ' your_choice
                    computer_choice = choices {at} {random}
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} rock
                        {if} your_choice {is} paper
                            {print} 'You win!'
                        {if} your_choice {is} scissors
                            {print} 'You lose!'
                    # finish this code
                    ```
            10:
                story_text: |
                    Feeling too lazy to play the game yourself? Let Hedy play it for you!
                example_code: |
                    ```
                    choices = rock, paper, scissors
                    players = Marleen, Michael
                    {for} player {in} players
                         {print} player ' chooses ' choices {at} {random}
                    ```
            13:
                story_text: |
                    With the `{and}` command you can shorten your rock, paper, scissors code! Check out the example code below and try to finish it.
                example_code: |
                    ```
                    options = 'rock', 'paper', 'scissors'
                    your_choice = {ask} 'What do you choose?'
                    computer_choice = options {at} {random}
                    {print} 'You choose ' your_choice
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'paper'
                        {print} 'You win!'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'
                        {print} 'The computer wins!'
                    ```
            15:
                example_code: |
                    ```
                    won = 'no'
                    options = 'rock', 'paper', 'scissors'
                    {while} won == 'no'
                        your_choice = {ask} 'What do you choose?'
                        computer_choice = options {at} {random}
                        {print} 'you chose ' your_choice
                        {print} 'the computer chose ' computer_choice
                        {if} computer_choice == your_choice
                            {print} 'Tie!'
                        {if} computer_choice == 'rock' {and} your_choice == 'scissors'
                            {print} 'You lose!'
                        {if} computer_choice == 'rock' {and} your_choice == 'paper'
                            {print} 'You win!'
                            won = 'yes'
                    ```
    rock_2:
        levels:
            2:
                story_text: |
                    Now that you have learned how to use the `{ask} command, you can make your rock, paper, scissors code interavtive too!

                    ### Exercise
                    Make the rock, paper, scissors code interactive by adding the `{ask}` command and a question to your rock, paper, scissors code.
                example_code: |
                    ```
                    choice is _
                    {print} I choose choice
                    ```
    secret:
        levels:
            12:
                story_text: |
                    In this adventure you can create your own super spy code. Encode a message that only the right agent can decipher.
                    If the enemy tries to crack the code, they will get some false info to waste their time.
                example_code: |
                    ```
                    name {is} {ask} 'What is your name?'
                    {if} name {is} '_'
                        a {is} 'Go to the airport '
                    {else}
                        a {is} 'Go to the trainstation '
                    password {is} {ask} 'What is the password?'
                    {if} password {is} _
                        b {is} 'tomorrow at 02.00'
                    {else}
                        b {is} 'today at 10.00'
                    {print} _ _ _
                    ```
            13:
                story_text: |
                    The code you made in the previous level can be made a lot easier in this one with the `{and}` command.
    sleep_command:
        description: introducing sleep command
        levels:
            2:
                story_text: |
                    ## The sleep command
                    Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.
    songs:
        name: Canta una canzone!
        levels:
            6:
                story_text: |
                    Songs often contain a lot of repetition. Sometimes the repetition is also based on counting.
                    For example, in the well-known song 'Bottles of beer'. You can program that song with a little math.
                example_code: |
                    ```
                    verse = 99
                    {print} verse ' bottles of beer on the wall'
                    {print} verse ' bottles of beer'
                    {print} 'Take one down, pass it around'
                    verse = verse - 1
                    {print} verse ' bottles of beer on the wall'
                    ```

                    You can now repeat lines 2 to 9 as many times as you want by copying the lines.
                example_code_2: |
                    ```
                    number = 6
                    number = number - 1
                    print number ' little monkeys jumping on the bed'
                    print 'One fell off and bumped his head'
                    print 'Mama called the doctor and the doctor said'
                    print 'NO MORE MONKEYS JUMPING ON THE BED!'
                    sleep
                    ```
            7:
                story_text: |
                    Songs often contain a lot of repetition. For example... Baby Shark! If you sing it, you keep singing the same thing:

                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark

                    You can make this song much shorter with a `{repeat}`! Can you finish the code?
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Baby Shark tututudutudu'
                    {print} 'Baby Shark'
                    ```

                    After Baby Shark you can of course also program other songs. There are many songs with repetition.
            8:
                story_text: |
                    In a previous level you've programmed the song 'Bottles of beer'. You made one verse and then had to copy the verses 99 times. In level 7 you can repeat the song 99 times, just by adding one simple line!
                example_code: |
                    ```
                    verso = 99
                    _ 99 {times}
                    {print} versetto 'bottiglie di birra sul muro'
                    {print} versetto 'bottiglie di birra'
                    {print} 'Prendine uno e passalo in giro'
                    verso = verso - 1
                    {print} versetto 'bottiglie di birra sul muro'
                    ```
            10:
                story_text: |
                    In this level you can easily make the childrens' song 'Five little monkeys'. Can you make the last chorus?
                    You can also make the whole baby shark song (including all the other sharks in the family) in only 6 lines!
                    Or you can make Old MacDonald with all the different animals.
                example_code: |
                    ```
                    famiglia = bambino, mamma, pap√†, nonna, nonno
                    _ _ _ _
                      {print}_
                    ```
                story_text_2: |
                    ### Exercise 2
                    Print the song Five little moneys jumping on the bed. Look up the text if you don't remember.

                    **(extra)** Print the song Old MacDonald had a farm, and make sure all animals make a different sound, using an `{if}`.
            11:
                story_text: |
                    In this level you can use the `{for} i {in} {range}` command to make songs that use counting.
                example_code: |
                    ```
                    {for} i {in} {range} 5 {to} 1
                        {print} i ' little monkeys jumping on the bed'
                        {print} 'One fell off and bumped his head'
                        {print} 'Mama called the doctor and the doctor said'
                        {if} i {is} 1
                            {print} 'PUT THOSE MONKEYS RIGHT TO BED!'
                        {else}
                            {print} 'NO MORE MONKEYS JUMPING ON THE BED!'
                    ```
    songs_2:
        levels:
            12:
                example_code: |
                    ```
                    {define} twinkle
                        {print} 'Twinkle'
                        {print} '...'

                    {call} twinkle
                    {print} 'Up above the world so high'
                    {print} 'Like a diamond in the sky'
                    {call} _
                    ```
    turtle:
        default_save_name: Tartaruga
        levels:
            1:
                story_text: |
                    You can also use Hedy to draw. By combining turns and lines, you can make a square or stairs!

                    Using `{forward}` you draw a line forwards. The number behind it determines how far the turtle will walk. `{turn} {right}` turns a quarter turn in clockwise direction, `{turn} {left}` turns counter clockwise.
                    If you want to go backwards, you use the `{forward}` command but with a negative number. So for example `{forward} -100`
            3:
                story_text: |
                    In questo livello puoi usare `{at} {random}` con la tartaruga che disegna. Una scelta casuale fa s√¨ che la tartaruga percorra ogni volta un percorso diverso.
                    Utilizza `{at} {random}` per scegliere un valore da un elenco.
                    ### Esercizio
                    Puoi copiare e incollare le righe 2 e 3 per creare un percorso casuale pi√π lungo?
            4:
                example_code: |
                    ```
                    {print} 'Drawing figures'
                    angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
            5:
                example_code_2: |
                    ```
                    direction {is} {ask} 'Do you want to go left, right, or straight ahead?'
                    if direction is left turn _
                    if direction is right turn _
                    forward 100
                    ```
            8:
                story_text: |
                    Now that we can repeat several lines, we can make figures more easily.
                    We only have to set the angle once and then use that variable in the `{repeat}`.
                example_code: |
                    ```
                    angle = 90
                    {repeat} 10 {times}
                        {turn} angle
                        {forward} 50
                    ```
                story_text_2: |
                    Also, we can now improve the program that draws different figures.
                    Can you figure out how far the turtle has to turn here? Finish the code and you can draw any polygon you'd like!
            9:
                story_text: |
                    Now that we can use a `{repeat}` inside a `{repeat}`, we can create more complex figures.

                    ### Exercise 1
                    This code creates three black triangles, change that into five pink squares.

                     **(extra)** Create a figure of your own choosing consisting of at least two different shapes types.
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                     **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
    turtle_draw_it:
        levels:
            9:
                example_code: |
                    Hint for the nested squares:
                    ```
                    colors = red, blue, orange, yellow, pink, purple, green, brown, black
                    distance = 120
                    repeat 5 times
                    _
                    ```
                    Hint for the flags:
                    ```
                    country = ask 'which country would you like to see the flag of?'
                    if country is 'the Netherlands'
                        color_1 = red
                        color_2 = white
                        color_3 = blue
                    ```
            10:
                example_code: |
                    Hint Nested Hexagon:
                    ```
                    distances = 100, 80, 60, 40, 20
                    {for} distance {in} distances
                    _
                    ```

                    Hint Traffic Lights:
                    ```
                    colors = red, yellow, green
                    {for} chosen_color {in} colors
                        color _
                        {repeat} _
                    ```
            12:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!
                    Hint: Bracelet designing program. Firstly, define a function **for each shape** you want to use on the bacelet. Then, add the shapes to the bacelet like this:
                    </div>
                    Bracelet Designing program <img src="https://github.com/hedyorg/hedy/assets/80678586/549d7f3a-c492-4b4a-b173-746eb3400951" width="500">
                example_code: |
                    ```
                    {define} draw_a_square
                    _

                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 180

                    {for} i {in} {range} 1 {to} 5
                        {color} gray
                        {forward} 100
                        shape = {ask} 'What kind of shape would you like next on the bracelet?'
                        chosen_color = {ask} 'In which color?'
                        {color} chosen_color
                        {if} shape = 'square'
                            {call} draw_a_square
                    ```
    while_command:
        description: while
        levels:
            15:
                story_text: "Stiamo per imparare un nuovo loop, il `{while}` loop!Continuiamo il ciclo finch√© la condizione √® vera. \nQuindi, non dimenticare di modificare il valore nel loop.\n\nNel codice di esempio, continuiamo fino a quando non viene fornita una risposta corretta.\n Se la risposta corretta non viene mai fornita, il loop non termina mai!"
                example_code: |
                    ```
                    risposta = 0
                    {while} risposta != 25
                        risposta = {ask} 'Quanto fa 5 per 5?'
                    {print} 'La risposta √© corretta'
                    ```
    years:
        name: Anno nuovo
        default_save_name: Conto alla rovescia per il nuovo anno
        description: Conto alla rovescia per il nuovo anno!
        levels:
            11:
                story_text: |
                    In this level you can use the `{for} i {in} {range}` command to countdown to the New Year.

                    ### Exercise
                    Fill in the blanks and make the code work!
                example_code: |
                    ```
                    for _ in _ 10 to 1
                        {print} i
                    {print} 'Happy New Year!'
                    ```
