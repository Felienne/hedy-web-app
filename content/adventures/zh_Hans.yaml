adventures:
    story:
        name: 故事
        default_save_name: 故事
        description: 故事
        levels:
            1:
                story_text: |
                    在第1级中你可以自己添加角色创作一个有不同主角的故事动画。

                    在第一行，使用`{ask}`，问谁是故事的主角。

                    在这第一行之后，如果需要打印这个句子，就用`{print}`开始这个句子。
                    如果你想让你的主角的名字出现在句子的末尾，你可以用`{echo}`。
                example_code: |
                    ```
                    {ask} 这个故事的主人公是（谁）
                    {print}主人公现在要到森林里去散步
                    {echo} 他有点害怕，
                    {print} 他听到到处都有疯狂的声音
                    {print} 他害怕这是一片闹鬼的森林
                    ```
                story_text_2: |
                    ### 练习
                    现在创建至少有6行代码的你自己的故事。
                    这个故事不能与示例代码相同。
                    至少要使用一个`{ask}`和一个`{echo}`命令。
                    你可以把它写成任何你喜欢的主题。
                    如果你想不出来，可以使用我们的给你的选择：看电影、体育比赛或动物园的一天。
            2:
                story_text: |
                    在第2关，你可以让你的故事更有趣些。你的主人公的名字可以放在句子里的任何位置了。

                    为此你确实需要多写一点代码。你需要先给主人公一个名字。

                    然后就可以把名字放在句子里的任何位置。
                example_code: |-
                    ```
                    名字 {is} {ask} 主角的名字是什么？
                    {print} 名字 现在要去森林里散步了
                    {print} 名字 有点害怕
                    {print} 突然，他听到一个疯狂的声音……
                    {sleep}
                    {print} 名字 害怕这个森林里面闹鬼
                    ```
                story_text_2: |
                    ###练习
                    现在是时候将变量添加到你在前一个关卡中创造的故事中了。
                    转到“我的程序”，寻找你的1级故事冒险并复制代码。将代码粘贴到这个关卡的输入屏幕上。
                    这段代码在本关不会起作用，因为你还没有使用变量。
                    把你代码中的`{ask}`命令和`{echo}`命令改成你在本关学到的正确形式。

                    **另外**在你的代码中添加一个`{sleep}`命令，在你的故事中建立起紧张感。
            3:
                story_text: |
                    在第3关，你可以让你的故事更有趣些。你可以随机选择怪物、动物或者其它障碍，比如：
                example_code: |
                    ```
                    动物们 {is} 🦔, 🐿, 🦉, 🦇
                    {print} 他现在听到了一个的声音 动物们 {at} {random}
                    ```
                story_text_2: |
                    你的故事也用得上`{add}`命令。
                example_code_2: |
                    ```
                    {print} 他听到一个声音
                    动物们 {is} 🐿，🦔，🦇，🦉
                    某动物 {is} {ask} 你觉得它是什么？
                    {add} 某动物 {to_list} 动物们
                    {print} 它 是 动物们 {at} {random}
                    ```
                story_text_3: |
                    这是一个在故事里使用`{remove}`命令的例子

                    ### 练习
                    将你在前几级的故事复制到这一级。
                    在此级中，你已经学会了3个新命令`{at} {random}` , `{add} {to}` 和 `{remove} {from}`.
                    在你的故事中添加新的代码行，让所有的新命令在你的故事中至少出现一次。
                example_code_3: |
                    ```
                    {print} 他的背包太重了。
                    {print} 包里有一瓶水，一个手电筒和一块砖。
                    包 {is} 水, 手电筒, 砖
                    扔掉的 {is} {ask} 他应该扔掉哪个东西？
                    {remove} 扔掉的 {from} 包
                    ```
            4:
                story_text: "你可能注意到了，在之前的级别里还有个问题。你有没有试过打印含有“名字”这个词的句子？即：`{print}` 我的名字是名字。\n 在这一级里你可以解决这个问题。你必须给所有需要打印的东西加上引号。\n\n### 练习1\n复制示例代码并通过添加引号来使其正常工作。 \n\n ### 练习 2 \n返回到上一个级别并复制故事代码。通过在正确的位置添加引号，使代码在此级别中正常工作。 \n注意：你自己故事中的变量应该在引号之外。就像范例代码的第二行一样。在该行中，变量名称放在引号之外。\n"
                example_code: "```\n名字 {is} {ask}_你的名字是什么? _\n{print}     _ 主人公的名字是_名字 \n {print} 名字     _正准备走进树林_\n{print} 名字 _有点害怕'\n动物们 {is} 🦔, 🐿, 🦉, 🦇\n{print} _他听到了一个_ 动物们{at} {random} 的声音\n{print} 名字_担心这片森林闹鬼_\n```\n"
            5:
                story_text: |
                    在此级别中，你可以设计不同的结局，这将使你的故事更加有趣。
                    在范例代码中，你可以看到如何设计两个不同的结局。

                    ### 练习1
                    请选择一个主题然后用至少6行代码写一个新的小故事。
                    没有灵感？可以从这些主题中选一个：超级英雄、无聊的学校生活、搁浅在荒岛上。

                    现在给玩家一个机会选择故事的结局，可以是好的结局也可以是坏的结局，就像范例代码中的那样。
                    对这两种结局进行编程。

                    ### 练习2
                    复制你在前几级自己的冒险活动-故事中创建的故事。
                    想办法给你的故事添加至少2个`{if}` 和`{else}` 命令。
                    这可以是一个好的或坏的结局，但你也可以尝试用其他的方式来加入这些命令。
                example_code: |
                    ```
                    名字 {is} {ask} '谁在森林里行走？'
                    {print} 名字 '走在森林里'
                    {print} 名字 '遇到了一头怪物'
                    结局 {is} {ask} '你想看好结局还是坏结局？'
                    {if} 结局 {is} 好 {print} 名字 '拔出了剑，怪物立即逃跑了'
                    {else} {print} '怪物吃掉了' 名字
                    ```
            7:
                story_text: "在故事里，有人会重复同一个词好几次。比如，当有人在呼救或者唱歌。\n在这一级，你可以通过`{repeat}`在故事中加入这种重复。\n \n### 练习 \n在你自己的故事中加入重复的内容。返回你保存的程序中，选择第6级的故事程序，找到一个包含`{print}` 的行，然后重复它！\n"
                example_code: |
                    ```
                    {print} '王子不断地呼救'
                    {repeat} 5 {times} {print} '救命啊！'
                    {print} '为什么没有人来救我？'
                    ```
            8:
                story_text: "在这一级中，你可以在你的{if} 条件语句中使用多行，这样你就可以升级你的好的或坏的结局！\n\n### 练习1\n代码范例中显示了两种不同的结局；一种是主人公跳上时光机，另一种是没有跳上时光机。\n 每个结局都至少需要用一个句子完成空格。 \n**（额外的）**使故事更长。故事中会发生什么？您还可以添加具有不同选项的第二个 `{ask}`\n \n### 练习2\n返回你保存的程序中，从第5级选择你的故事程序。现在写一个好的和一个坏的结局，每个结局至少有三行长! \n"
                example_code: |
                    ```
                    {print} '哦，不！霸王龙来了！'
                    结局 = {ask} '你想要好结局还是坏结局？'
                    {if} 结局 {is} 好
                        {print} '理查德在千钧一发之际跳回了时光机里！'
                        {print} _
                    {else}
                        {print} '哦，不！理查德太慢了……'
                        {print} _
                    ```
            9:
                story_text: "在这一级，你可以通过嵌套，在一个 `{if}`和`{repeat}` 语句里包含其它 `{if}`和`{repeat}`语句。\n 这让你有了很多选择，极大地提高了故事地互动性。\n\n### 练习1 \n完成代码，使`{if}` 能正常工作。 \n\n### 练习2 \n 为故事中罗宾也回家的部分添加一个`{if}` 和`{else}`语句 。 \n\n### 练习3 \n回到你第8级的故事中，在另一个`{if}` 条件语句里面至少使用两个`{if}`条件语句。\n"
                example_code: |
                    ```
                    {print} '罗宾来到了市区'
                    地点 = {ask} '罗宾是要去商店还是回家？'
                    {if} 地点 {is} 商店
                        {print} '她走进了商店。'
                        {print} '罗宾发现了一本有趣的书'
                        书 = {ask} '罗宾买了这本书吗？'
                        {if} 书 {is} 是
                        {print}_ '罗宾买了这本书，回家了'
                         _{else}
                        _{print} '罗宾离开商店，回家了'
                    {else}
                        {print} '罗宾回了家'
                    ```
            10:
                story_text: "在这一级，你可以在你的故事里使用 {for} 命令。这样很容易就能写出儿童书里的“棕熊，棕熊，你看到了什么”的故事。\n\n ### 练习\n\n请看\n<a \nhref=\"https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf\"> the story</a> 如果你不知道这个故事，请确保它是按照书中的内容打印的。\n"
                example_code: "```\n动物们 = _ , _ , _ \n{print} '棕熊，棕熊 '\n{print} '你看到了什么？'\n```\n"
            12:
                story_text: 在此级别中，您可以使用引号将多个单词保存在一个变量中。
                example_code: |
                    ```
                    名字 = '英国女王'
                    {print} 名字'正在吃一块蛋糕，突然......'
                    ```
            13:
                story_text: "通过使用`{and}`和`{or}`命令，你可以把故事写得更短。比如这个龙的故事。\n\n### 练习 \n你能像这样制作你自己的迷你冒险游戏吗？\n"
                example_code: |
                    ```
                    {print} “我们的英雄正在穿过森林”
                    {print} “路径分两路”
                    path= {ask} “她应该选择哪条路径？”
                    武器={ask} “她画的是什么武器？”
                    {if} 路径 {is} “左” {and} 武器 {is} “剑”
                        _
                    ```
            15:
                story_text: |
                    运用`{while}`循环能让你的故事更有趣。比如，用`{while} game == 'on'`可以让游戏一直进行到结束为止。
                    或者用`{while} sword == 'lost'`来要求玩家必须先找到剑，才能继续游戏。

                    ### Exercise
                    The example code shows you how to use the `{while}` loop in a story. Now **think of your own scenario** in which the player has to find something before they can continue.
                example_code: |
                    ```
                    钥匙 = '丢失'
                    {print} '你站在你的花园里，你的钥匙丢了。'
                    {print} '你想去哪里找它们？'
                    {print} '你可以选择：树、花坛、石头、邮筒'
                    {while} 钥匙 == '丢失'
                        位置 = {ask} '你想去哪里找？'
                        {if} 位置 == '花坛'
                            {print} '它们在这里！'
                            钥匙 = '找到'
                        {else}
                            {print} '没有，他们不在'位置
                    {print} '现在你可以进入房子了！'
                    ```
            18:
                story_text: |
                    We are going to print another story, but now we have to use brackets with `{print}`.

                    ### Exercise 1
                    Create a story of at least 5 sentences. You don't have to use 'name' just yet.
                example_code: |
                    ```
                    {print}('欢迎来到这个故事！')
                    ```
                story_text_2: |
                    ### 练习 2
                    我们已经为您准备了一个 `{input}`。 首先，在您的故事中使用 `name` 变量。
                    然后，请添加第二个 `{ask}` 并使用该变量。
                    提示：记得文本和变量之间 `{print}` 中的逗号！
                example_code_2: |
                    ```
                    naam = {input}("你叫什么名字？")
                    {print}('欢迎来到这个故事！')
                    ```
    add_remove_command:
        name: '{add} {to} & {remove} {from}'
        default_save_name: 添加_删除_命令
        description: 简介 添加和删除
        levels:
            3:
                story_text: |
                    ## 添加到
                    您可以使用“{add} {to}”令将项目添加到列表中。要将项目添加到列表中，您只需键入：“{add} 企鹅 {to} 动物”或者您可以使用“{ask}”命令，如示例代码所示。
                example_code: |
                    ```
                    动物 {is} 狗， 猫， 袋鼠
                    像 {is} {ask} 你最喜欢的动物是什么？
                    {add} 像 {to_list} 动物
                    {print} 我选择 动物 {at} {random}
                    ```
                story_text_2: |
                    ## 从...移除
                    如果你可以将项目添加到列表中，当然你也可以将其删除。可以使用 `{remove} {from}` 指令.
                example_code_2: |
                    ```
                    动物们 {is} 狗, 猫, 袋鼠
                    不喜欢 {is} {ask} 你不喜欢什么动物？
                    {remove} 不喜欢 {from} 动物们
                    {print} 我选择 动物们 {at} {random}
                    ```
                story_text_3: |
                    ### 锻炼
                    在这个虚拟餐厅中尝试新命令。将玩家想要的口味添加到列表中，并删除他们过敏的口味。
                example_code_3: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    hope {is} {ask} What flavor are you hoping for?
                    _
                    allergies {is} {ask} Are you allergic to any flavors?
                    _
                    {print} You get a flavors {at} {random} milkshake
                    ```

                    喜欢 {is} {ask} 你最喜欢的动物是什么？
                    {add} 喜欢 {to_list} 动物们
                    不喜欢 {is} {ask} 你不喜欢什么动物?
                    {remove} 不喜欢 {from} 动物们
                    {print} 动物们 {at} {random}
    and_or_command:
        name: '{and} & {or}'
        default_save_name: 以及或者
        description: 介绍以及或是
        levels:
            13:
                story_text: |-
                    我们现在要了解 `{and}`和 `{or}`!如果你想查两个语句, 你不用使用`{if}`s 但可以使用 `{and}` 和`{or}`.

                    如果你用 `{and}`, 两种陈述, `{and}` 连接的左右两种陈述必须都是真的。 我们也可以使用 `{or}`. 那么只需要一种陈述是对的。
                example_code: |
                    ```
                    名字 = {ask} '你叫什么名字?'
                    年龄 = {ask} '你多少岁了?'
                    {if} 名字 {is} '海蒂' {and} 年龄 {is} 2
                        {print} '你就是真的海蒂!'
                    ```
    ask_command:
        name: '{ask}'
        default_save_name: 要求命令
        description: 询问命令
        levels:
            1:
                story_text: |
                    ## 提问命令
                    现在你可以用 `{print}`来命令, 你准备好学习新指令: `{ask}`. 用 `{ask}` 来指令, 你可以提一个问题. 试试吧:
                example_code: |
                    ```
                    {print} 你好!
                    {ask}你叫什么名字?
                    ```
                story_text_2: |
                    ##  `{echo}` 指令
                    如果想让计算机将结果重复一遍，你可以使用 `{echo}` 命令。答案将在程序末尾输出，因此在本例中，结果将在 hello 之后输出。
                example_code_2: |
                    ```
                    {print} 你好!
                    {ask} 你叫什么名字?
                    {echo} 你好
                    ```
                story_text_3: |
                    ### 练习
                    尝试使用`{ask}`和 `{echo}` 命令，首先，完成填空以使该程序成功运行。
                    然后使用`{ask}`命令再问 2 个问题，在每个`{ask}`之后使用`{echo}`在屏幕上打印答案。
                example_code_3: |
                    ```
                    _ 你好吗?
                    _
                    ```
            2:
                story_text: |
                    ## 询问指令
                    现在我们可以在代码中使用**变量**，我们可以不再使用`{echo}`命令。
                    我们可以使用变量来保存问题的答案，这样我们就可以在代码中使用多个问题的答案。
                    一探究竟：
                    这样你的代码就变得具有交互性了！
                example_code: |
                    ```
                    名字 {is} {ask} 你叫什么名字?
                    {print} 你好名字
                    年龄 {is} {ask} 你多大了?
                    {print} 名字是年龄.
                    ```
                story_text_2: |
                    ### Exercise
                    在前面的选项中你需要操作很多带 `{is}` 的指令.
                    你需要创造至少3种不同的变量指令并用 print command运行.
                    现在，我们希望你创造像我们的例子里一样可以交互的变量，而不是设置变量.

                    从前页复制你的代码，通过使用 `{ask}` 让变量交互运行.
                example_code_2: |
                    ```
                    favorite_animals {is} {ask} 你喜欢什么 动物?
                    {print} 我喜欢 favorite_animals
                    ```
            18:
                story_text: The final change we will need to make to get Python code is changing `{ask}` into `{input}`.
                example_code: |
                    ```
                    {print}('My name is Hedy!')
                    name = {input}('What is your name?')
                    {print}('So your name is ', name)
                    ```
    blackjack:
        name: 黑杰克
        default_save_name: 黑杰克
        description: 尽可能地接近21
        levels:
            17:
                story_text: |
                    Blackjack is a simple game of cards in which you have to get as close to 21 points as possible. You get two cards. Each card is worth their numeral value, and the face cards (Jack, Queen and King) are worth 10 points.
                    The Ace is worth either 1 or 11 points (you can choose). The dealer, your opponent, also gets two cards.
                    If you want, you can get another card, and its points will be added to your total. The dealer can also choose to take another card.
                    But be careful not to get more than 21 points, because if you do, you lose!
                    The player who gets closest to 21, without going over it, wins!

                    Have fun!
                example_code: "```\n{print} 'BLACKJACK'\ncards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen','King', 'Ace']\npoints = 0\ndealer_points = 0\ncard_1 = cards[{random}]\ncard_2 = cards[{random}]\ncard_3 = cards [{random}]\ndealer_card_1 = cards[{random}]\ndealer_card_2 = cards[{random}]\ndealer_card_3 = cards[{random}]\n# 卡片 1 的点数\n{if} card_1 == 'Jack' {or} card_1 == 'Queen' {or} card_1 == 'King':\n    points = points + 10\n{elif} card_1 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_1\n# 卡片 2 的点数\n{if} card_2 == 'Jack' {or} card_2 == 'Queen' {or} card_2 == 'King':\n    points = points + 10\n{elif} card_2 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_2\n# 庄家第1张牌\n{if} dealer_card_1 == 'Jack' {or} dealer_card_1 == 'Queen' {or} dealer_card_1 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_1 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_1\n# 庄家第2张牌\n{if} dealer_card_2 == 'Jack' {or} dealer_card_2 == 'Queen' {or} dealer_card_2 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_2 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_2\n# 两张 Aces\n{if} card_1 == 'Ace' {and} card_2 == 'Ace':\n    points = 12\n{if} dealer_card_1 == 'Ace' {and} dealer_card_2 == 'Ace':\n    dealer_points = 12\n# Scoreboard\n{print} '你有张 ' card_1 ' 以及 ' card_2 ' (' points ' points)'\n{print} '庄家有张 ' dealer_card_1 ' 以及 ' dealer_card_2 ' (' dealer_points ' points)'\n# 玩家追加牌\nhit = {ask} '你想追加牌嘛?'\n{if} hit == 'yes':\n    {if} card_3 == 'Jack' {or} card_3 == 'Queen' {or} card_3 == 'King':\n        points = points + 10\n    {elif} card_3 == 'Ace':\n        {if} points > 11:\n            points = points + 11\n        {else}:\n            points = points + 1\n    {else}:\n        points = points + card_3\n    {print} '你追加了一张 ' card_3 ' (' points ' points)'\n{else}:\n    {print} '不追加牌'\n# 获胜者\n{if} points > 21 {or} dealer_points > points {or} dealer_points == 21:\n    {print} '你输了'\n{elif} dealer_points < 17:\n    {print} '庄家要牌.它是... ' dealer_card_3\n    {if} dealer_card_3 == 'Jack' {or} dealer_card_3 == 'Queen' {or} dealer_card_3 == 'King':\n        dealer_points = dealer_points + 10\n    {elif} dealer_card_3 == 'Ace':\n        {if} dealer_points < 11:\n            dealer_points = dealer_points + 11\n        {else}:\n            dealer_points = dealer_points + 1\n    {else}:\n        dealer_points = dealer_points + dealer_card_3\n    {print} '现在打印庄家有 ' dealer_points \n    {if} dealer_points < 21 {and} dealer_points > points:\n        {print} '你输了'\n    {else}:\n        {print} '你赢了!'\n{elif} points > dealer_points {and} points < 21:\n    {print} '你赢了!'\n```\n"
    calculator:
        name: 计算器
        default_save_name: 计算器
        description: 创建一个计算器
        levels:
            6:
                story_text: |
                    现在你可以做数学了，你可以自己做一个计算器！
                example_code: |
                    ```
                    数一 {is} {ask} '填写第一个数字：'
                    数二 {is} {ask} '填写第二个数字：'
                    正确答案 = 数一 * 数二
                    {print} 数一 ' 乘以 ' 数二 ' 是 ' 正确答案
                    ```
                story_text_2: |
                    ### 练习
                    上面的计算器会为你计算出答案，但你也可以编写一个程序来测试你自己的运算能力，如下所示：
                    填空使其完整！
                example_code_2: |
                    ```
                    正确答案 = 11 * 27
                    答案 = {ask} '11乘以27是多少？'
                    {if} 答案 {is} _ {print} '做得好！'
                    {else} {print} '错了！是' _
                    ```
                story_text_3: |
                    **额外** 您还可以使用“{random}”让计算机自行生成随机产品。
                example_code_3: |-
                    ```
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number_1 = _
                    number_2 = _
                    correct_answer = number_1 * number_2
                    given_answer = {ask} '什么是 ' number_1 ' 乘以 ' number_2 '?'
                    {if} _
                    {else} _
                    ```
            9:
                story_text: |
                    在第 6 级中，您编写了一个计算器程序，在此级别中，您可以扩展该程序来提出多个问题。

                    ### 练习 1
                    你能完成第 10 行以使程序工作吗？

                    ### 练习 2
                    输入正确或错误的答案时对玩家给出反馈。为此，请使用 `{else}` 来扩展程序。
                example_code: |
                    ```
                    分数 = 0
                    {repeat} 10 {times}
                        一组数 = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        数一 = 一组数 {at} {random}
                        数二 = 一组数 {at} {random}
                        正确答案 = 数一 * 数二
                        {print} 数一 '乘以' 数二 '是多少？'
                        答案 = {ask} '在这里输入你的答案……'
                        {print} '你的答案是' 答案
                        {if} _ {is} _
                            分数 = 分数 + 1
                    {print} '做得好！你的分数是' 分数 '分，满分是10分！'
                    ```
            10:
                story_text: |
                    这个计算器游戏帮助您练习你的乘法口诀表！ 
                    ### 练习
                    你能在列表中加入更多的数字，这样你就可以练习乘法表直到10？
                example_code: |
                    ```
                    数字 = 1, 2, 3
                    {for} 数一 {in} 数字
                        {for} 数二 {in} 数字
                            答案 = {ask} 数一 '乘以' 数二 '是多少？'
                            正确答案 = 数一 * 数二
                            {if} 答案 {is} 正确答案
                                {print} '做得好！'
                            {else}
                                {print} '回答错误。正确答案是' 正确答案
                    ```
            11:
                story_text: |
                    使用 `{for}`你可以简化乘法运算表的程序。

                    ### 练习 1
                    改进范例代码，使其打印出一个漂亮的乘法表：<br> “1 乘以 10 是 10”、“2 乘以 10 是 20”等。

                    ### 练习 2
                    返回到你在 10 级完成的乘法运算表程序，并使用 `{for}` 和 `{range}`对其进行修改。
                example_code: |
                    ```
                    数字 = 10
                    {for} i {in} {range} 1 {to} 10
                        {print} i * 数字
                    ```
            12:
                story_text: |
                    在本关，你可以编写一个可以计算小数的计算器。

                    ###练习1
                    填空完成计算。注意小数点使用句号而不是逗号。

                    ###练习2
                    创建一个新的数学运行程序，但现在要使用小数。
                    创建一组数据，选择两个数字相乘让玩家回答。
                    当然你有准确的答案！**Extra**通过增加生命增加难度：玩家回答错误一次失去一条命，三次回答错误后游戏结束。
                example_code: |
                    ```
                    number1 = {ask} '第一个数字是什么？'
                    number2 = {ask} '第二个数字是多少？'
                    answer =_
                    {print} number1 ' 加 ' number2 ' 是 ' _
                    ```
            13:
                story_text: |
                    ### 练习1
                    来让这个练习程序难一点吧 .操作者现在需要正确地回答两个问题.请填写空格以完成程序.

                    ### 额外的练习2
                    有时候, 计算有多个正确答案.例如，10可以被5和2整除.那么问题'什么数能整除10?'可以用2和5来回答.
                    要求一个有多个正确答案的计算,让操作者回答它, 并确定其是否使用正确 `{or}`.
                    清空编程字段并且创造你自己的解决方案.
                example_code: |
                    ```
                    answer1 = {ask} '10 乘以 7 是多少？'
                    answer2 = {ask} '6 乘以 7 是多少？'
                    {if} _ _ _ _ _ _ _
                         {print} _
                    ```
            14:
                story_text: |
                    In this adventure you will build a calculator that calculates your mean grade for you. If you get your calculator to work, you can move on to the next adventure, which allows you to add two extra features.

                    ### Exercise 1
                    Fill in the blanks to get the calculator to work.
                    * Start with the fourth line, add a question to figure out what grade the student got.
                    * In the fifth line you'll want to calculate the total of all grades, so the total = total + grade.
                    * Then we get to set the return value. We want to return the mean, so the total devided by the amount of tests (4).
                    * Lastly we finish the code by calling the function in line 8.

                    Did you get it? Awesome! Would you like to add even more to your calculator? **This adventure continues in the next tab!**
                example_code: |
                    ```
                    {define} calculate_mean_grade
                        total = 0
                        {for} i {in} {range} 1 {to} 4
                            grade = {ask} _
                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
                    ```

                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
            15:
                story_text: |
                    您可以添加 `{while}` 循环到您已经在上一级中学过的计算器游戏中去。 
                    这可以确保{if}玩家在没有回答正确的情况下不能回答下一个问题。

                    ### Exercise
                    Add the `{while}` loop in the function, ask the player what number_1 times number_2 is and print their answer.
                    Then `{call}` the function.
                example_code: |
                    ```
                    {define} new_question
                        numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number_1 = numbers {at} {random}
                        number_2 = numbers {at} {random}
                        correct = number_1 * number_2
                        answer = 0
                        _
                        _
                        _
                        {print} 'Well done!'

                    {print} 'Give 10 correct answers to win!'
                    {for} i {in} {range} 1 {to} 10
                        _
                    {print} 'You win!'
                    ```
    calculator_2:
        name: Calculator 2
        default_save_name: Calculator 2
        description: Calculator 2
        levels:
            14:
                story_text: |
                    ### Exercise 2
                    **This is the second part of this adventure.** The adventure starts in the previous tab.
                    Of course, you don't always want to calculate the mean of 4 tests. You might want to calculate the mean of 10 tests or only 2...
                    We can fix this problem by adding the argument and variable 'amount_of_tests'.
                    * Start a new line on line 3. Set the amount_of_tests argument by asking the student how many tests they have made.
                    * Change the 4 in line 4 to the new argument amount_of_tests.
                    * Lastly, change the 4 in line 6 to amount_of_tests

                    Try out your new program. Does it work?

                    ### Exercise 3
                    Did you want to make your program even better? Great! In the previous program you could only calculate the mean grade of 1 subject, but it would be better if you could calculate the mean grade for all subjects you want!
                    We won't tell you how to do it, but we will give you one tip: Start your code in line 1 with: define calculate_mean_grade with subject.
                example_code: |
                    ```
                    # Use your own code from the previous adventure.
                    ```
    clear_command:
        name: '{clear}'
        default_save_name: clear_command
        description: clear 指令
        levels:
            4:
                story_text: |
                    是时候发出新命令了！ 使用`{clear}`，您可以清除输出屏幕上的所有文本。 这样您就可以防止屏幕上的文字过多。
                    谨防！ 如果您使用`{clear}`命令，请记住在其上方使用`{sleep}`。 否则 海蒂 会清空你的屏幕，而不给你时间阅读！
                example_code: |
                    ```
                    {print} '3'
                    {sleep}
                    {clear}
                    {print} '2'
                    {sleep}
                    {clear}
                    {print} '1'
                    {sleep}
                    {clear}
                    {print} '惊喜!'
                    ```
    debugging:
        name: 调试
        default_save_name: 调试
        description: 调试 adventure
        levels:
            1:
                story_text: |-
                    欢迎来到调试冒险。 调试代码意味着消除代码中的错误。
                    这意味着在这些调试冒险中，我们将向您展示尚未运行的代码。
                    你必须找出问题所在并纠正错误。

                    ### 练习
                    调试这段代码。 祝你好运！
                example_code: |
                    **警告！ 这段代码需要调试！**
                    ```
                    {print} 我喜欢编程
                    你也喜欢编程吗？
                    {echo}
                    {print} 你的爱好是什么？
                    {echo} 你的爱好是
                    ```

                    你也喜欢编程吗？
                    {echo}
                    {print} 你的爱好是什么？
                    {echo} 你的爱好是
            2:
                story_text: |-
                    欢迎来到调试冒险。 调试代码意味着消除代码中的错误。
                    这意味着在这些调试冒险中，我们将为您提供尚未运行的代码。
                    你必须找出问题所在并纠正错误。

                    ### 练习
                    调试这段代码。 祝你好运！
                example_code: |
                    **警告！ 这段代码需要调试！**
                    ```
                    目的地{ask} 假期你要去哪里？
                    {print} 飞往目的地的航班于下午 3 点起飞。
                    {ask} 你托运行李了吗？
                    {echo}
                    {print} 让我为您打印您的登机牌。
                    {sleep}
                    干得好！ 旅行愉快！
                    ```
            3:
                story_text: |-
                    欢迎来到调试冒险。 调试代码意味着消除代码中的错误。
                    这意味着在这些调试冒险中，我们将为您提供尚未运行的代码。
                    你必须找出问题所在并纠正错误。

                    ### 练习
                    调试这段代码。 祝你好运！
                example_code: |
                    **警告！ 这段代码需要调试！**
                    ````
                    movie_choices {is} 德古拉、速度与激情、独自在家、芭比娃娃
                    selected_movie {is} 部电影 {at} {random}
                    {print} 今晚我们将观看选定的_电影
                    就像{ask}你喜欢那部电影吗？
                    {print} 明天我们会看别的东西。
                    {add} selected_movie {to} movie_choices
                    {print} 明天我们看Todays_movie
                    futures_movie {is} movie_choices {at} {random}
                    我去买爆米花！ {print}
                    ````
            4:
                story_text: |-
                    ### 练习
                    调试这段代码。 祝你好运！
                example_code: |
                    **警告！ 这段代码需要调试！**
                    ```
                    {print} '欢迎来到在线图书馆！
                    {ask}你喜欢什么类型的书？
                    {print} 你喜欢类型
                    作者{is} {ask}“你最喜欢的作家是谁？”
                    {print} '作者是你最喜欢的作者'
                    {print} 嗯...我想你应该尝试...书籍{at} {random}
                    ```
            5:
                story_text: |-
                    ### 练习
                    调试这段代码。 祝你好运！
                example_code: |
                    **警告！ 这段代码需要调试！**
                    ````
                    {print} 欢迎来到海蒂泳池！
                    class {is} {ask} '你今天来参加课程吗？'
                    {if} 类 yes
                         {print}'太棒了！ 你正在加入一个班级！
                         {print} {else} '您将不会参加课程'
                    discount {is} {ask} '您有折扣码吗？'
                    {if} discount {is} yes
                    discount_answer {is} {ask} '您的折扣代码是什么？'
                    discount_codes = Senior4231, Student8786, NewMember6709
                    {if}discount_answer {is} {in}discount_codes
                         {print} '那将是 3,50 美元'
                             {else} '该代码无效'
                    {else}“那将是 5,50 美元”
                    {print} '祝你游得愉快！'
                    ````
            6:
                story_text: |-
                    ### 练习
                    调试这段代码。 祝你好运！
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Vending machine'
                    chosen_product = {ask} 'Please select a product'
                    1_dollar_products = coke orange juice water
                    2_dollar_products = chocolate, cookie, museli bar
                    3dollar_prodcuts = potato chips, beef jerky, banana bread
                    {if} chosen {is} {in} 1_dollar_products
                    price = 1
                    {if} chosen_product {is} 2_dollar_products
                    price = 2
                    {else} chosen_product {in} 3_dollar_products
                    price = 3
                    amount_of_products = '{ask} How many of ' chosen_product would you like to have?'
                    total = price + amount_of_product
                    {print} 'That will be $' price 'please'
                    ```

                    total = price + amount_of_product
                    {print} 'That will be $' price 'please'
            7:
                story_text: |-
                    ### 练习
                    惊喜！ 该程序看起来更像是输出而不是代码。 然而，我们不希望您只在每行前面添加`{print}`命令。
                    当然，使用 {repeat} 命令修复此程序，将其变成童谣“Brother John (Frère Jacques)”！
                example_code: |
                    **警告！ 这段代码需要调试！**
                    ```
                    你在睡觉？
                    约翰弟兄！
                    晨钟已敲响！
                    叮、当、当！
                    ```
            8:
                story_text: |-
                    ### 练习
                    调试这段代码。 祝你好运！
                example_code: |-
                    **警告！ 这段代码需要调试！**
                    ````
                    {print}“欢迎来到 Hedy 的美甲和足疗”
                    bodypart = {ask} '你今天修指甲或脚趾甲了吗？ 或两者？'
                    {if} 身体部位 {is} 两者
                             {print} 那将是 25 美元'
                             价格=25
                         {else}
                             {print} 那将是 18 美元'
                             价格=18
                    color = {ask} 你想要什么颜色？
                    Sparkles = {ask} '你想要一些闪闪发光的东西吗？'
                    {if} 闪闪发光 {is} 是
                         {print} '我们为此额外收取 3 美元'
                    price = price +3
                    {else} {print} '没有闪光' {print} '所以没有额外费用'
                    {sleep} 5
                    {print} '全部完成！ 那将是$'价格'拜托！'
                    {print}'谢谢！ 再见！'
                    ````
            9:
                story_text: |-
                    ### 练习
                    调试这段代码。 祝你好运！
                example_code: |
                    **警告！ 这段代码需要调试！**
                    ````
                    {print} '欢迎来到我们的三明治店'
                    amount “您想买多少个三明治？”
                    {repeat}amoumt{times}
                    {ask} {is} {ask} '您想要什么类型的三明治或面包？'
                    types_of_bread {is} 白面包、小麦面包、黑麦面包、大蒜面包、无麸质面包
                    {if} 在 types_of_bread 中选择了_bread
                    {print}“可爱！”
                    {else}
                    “抱歉我们不卖那个”
                    topping {is} {ask} '您想要什么类型的配料？'
                    sauce{is} {ask}“您想要什么类型的酱？”
                    {print} 一份choice_bread，配上配料和酱汁。
                    price =amount*6
                    {print} '这将是'价格美元''
                    ````

                    amount “您想买多少个三明治？”
                    {repeat}amount{times}
                    {ask} {is} {ask} '您想要什么类型的三明治或面包？'
                    types_of_bread {is} 白面包、小麦面包、黑麦面包、大蒜面包、无麸质面包
                    {if} chosen_bread 在 types_of_bread 中
                    {print}“可爱！”
                    {else}
                    “抱歉我们不卖那个”
                    topping {is} {ask} '您想要什么类型的配料？'
                    sauce{is} {ask}“您想要什么类型的酱？”
                    {print} 一份choice_bread，配上配料和酱汁。
                    price =amount*6
                    {print} '这将是'价格美元''
            10:
                story_text: |-
                    ### 练习
                    调试这段代码。 祝你好运！
                example_code: |
                    **警告！ 这段代码需要调试！**
                    ```
                    names = 穆阿德·哈桑·萨米拉·努拉
                    activities = 放风筝、游泳、徒步旅行、晒太阳
                    {for} name {is} names
                    {print} 在海滩上，名字喜欢活动 {at} {random}
                    ```
            11:
                story_text: |-
                    ### 练习
                    调试这个日历程序。 该程序的输出应该看起来像一个日期列表。
                    例如：

                    ````
                    海蒂日历
                    这是11月的所有日子
                    11 月 1 日
                    11 月 2 日
                    11 月 3 日
                    ````
                    等等。

                    请注意，您必须特别仔细地测试二月份的代码，因为这个月的天数在闰年中会发生变化。
                example_code: |
                    **警告！ 这段代码需要调试！**
                    ````
                    print '海蒂日历'
                    months_with_31_days = 一月、三月、五月、七月、九月、十月、十二月
                    months_with_30_days = 四月、六月、八月、十一月
                    months = 问“您想查看哪个月份？”
                    if month in months_with_31_days
                         days = 31
                         if months in months_with30_days
                             days= 30
                    if month = 二月
                         leap_years = 2020, 2024, 2028, 2036, 2040, 2044, 2028
                         year = ask “现在是哪一年？”
                    if year in leap_years
                         days = 29
                    else
                         days=28

                    print '这是 各' 月'的所有日子'
                    for i in 1 range 1 to days
                         print month i
                    ````

                    months_with_31_days = 一月、三月、五月、七月、九月、十月、十二月
                    months_with_30_days = 四月、六月、八月、十一月
                    months = 问“您想查看哪个月份？”
                    if month in months_with_31_days
                         days = 31
                         if months in months_with30_days
                             days= 30
                    if month = 二月
                         leap_years = 2020, 2024, 2028, 2036, 2040, 2044, 2028
                         year = ask “现在是哪一年？”
                    if year in leap_years
                         days = 29
                    else
                         days=28

                    print '这是 各' 月'的所有日子'
                    for i in 1 range 1 to days
                         print month i
            12:
                story_text: |-
                    ### 练习
                    调试这段代码。 祝你好运！
                example_code: |
                    **警告！ 这段代码需要调试！**
                    ```
                    define greet
                    greetings = '你好', '嗨', '晚上好'
                        print greetings at random

                    define take_order
                        food = ask '你想吃什么?'
                        print '哪种食物'
                        drink = '你想喝什么?'
                        print '哪种 ' drink
                        more = ask '你还想要点别的吗?'
                            if more is '不'
                        print '好吧'
                            else
                            print '还有 ' more
                    print '多谢'

                    print '欢迎来到我们的餐厅'
                    people = ask '今晚你们聚会中有多少人?'
                    for i in range 0 to people
                        call greet_costumer
                    ```
            13:
                story_text: |-
                    ### 练习
                    调试这段代码。 祝你好运！
                example_code: |
                    **警告！ 这段代码需要调试！**
                    ```
                    defin movie_recommendation with name
                         action_movies ==“虎胆龙威”、“速度与激情”、“无耻混蛋”
                         romance_movies =“真爱至上”、“恋恋笔记本”、“泰坦尼克号”
                         comedy_movies = '憨豆先生' '芭比' '死侍'
                         kids_movies = '小黄人', '帕丁顿熊', 'Encanto'
                         if name is “Camila” or name is “Manuel”
                             recommended_movie = kids_movie at random
                         if name is “Pedro” or “Gabriella”
                                 mood=ask '现在心情如何？'
                              if mood is  '行动'
                                 recommended_movie = comedy_movies at random
                             if mood is '浪漫'
                                 recommended_movie = romance_movies
                          if mood is '喜剧'
                                 recommended_movie = comedy_movies

                    print '我会推荐 'recommend_movie' 作为 'name

                    name = ask “谁来观看？”
                    recommendation = ask “您想要推荐吗？”
                    if recommendaion is “是”
                    print movie_recommendation with name
                    else
                    print “没问题！”
                    ```

                         action_movies ==“虎胆龙威”、“速度与激情”、“无耻混蛋”
                         romance_movies =“真爱至上”、“恋恋笔记本”、“泰坦尼克号”
                         comedy_movies = '憨豆先生' '芭比' '死侍'
                         kids_movies = '小黄人', '帕丁顿熊', 'Encanto'
                         if name is “Camila” or name is “Manuel”
                             recommended_movie = kids_movie at random
                         if name is “Pedro” or “Gabriella”
                                 mood=ask '现在心情如何？'
                              if mood is  '行动'
                                 recommended_movie = comedy_movies at random
                             if mood is '浪漫'
                                 recommended_movie = romance_movies
                          if mood is '喜剧'
                                 recommended_movie = comedy_movies

                    print '我会推荐 'recommend_movie' 作为 'name

                    name = ask “谁来观看？”
                    recommendation = ask “您想要推荐吗？”
                    if recommendaion is “是”
                    print movie_recommendation with name
                    else
                    print “没问题！”
            14:
                story_text: |-
                    ### 练习
                    调试这段代码。 祝你好运！
                example_code: |
                    **警告！ 这段代码需要调试！**
                    ```
                    define calculate_heartbeat
                        print '将指尖轻轻按在脖子一侧'
                        print '(就在你的下巴线下方)'
                        print '记录 15 秒内你感觉到的节拍数'
                        beats == ask '15 秒内您感觉有多少节拍?'
                        heartbeat = beats*4
                        print '你的心跳是' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print '你的心跳看起来不错'
                        else
                            if heartbeat > 60
                                print '你的心跳似乎太低了'
                            if heartbeat < 100
                                print '你的心跳似乎太高了'
                            print '您可能需要联系医疗专家'

                    measure_heartbeat = ask '你想测量你的心跳吗?'
                    if measure_heartbeat = '是'
                        call measure_heartbeat
                    else
                        '没问题'
                    ```

                        print '(就在你的下巴线下方)'
                        print '记录 15 秒内你感觉到的节拍数'
                        beats == ask '15 秒内您感觉有多少节拍?'
                        heartbeat = beats*4
                        print '你的心跳是' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print '你的心跳看起来不错'
                        else
                            if heartbeat > 60
                                print '你的心跳似乎太低了'
                            if heartbeat < 100
                                print '你的心跳似乎太高了'
                            print '您可能需要联系医疗专家'

                    measure_heartbeat = ask '你想测量你的心跳吗?'
                    if measure_heartbeat = '是'
                        call measure_heartbeat
                    else
                        '没问题'
            15:
                story_text: |-
                    ### 练习
                    调试这个随机的儿童故事。 祝你好运！
                example_code: |
                    **警告！ 这段代码需要调试！**
                    ```
                    names = '坦尼娅'、'罗米'、'凯拉'、'奥尔德林'、'阿里'
                    verbs='步行'、'跳跃'、'骑自行车'、'驾驶'、'跑步'
                    locations = '在山顶上', '在超市里', '到游泳池'
                    hiding_spots = '树后面'、桌子下'、盒子里'
                    声音 = '喇叭声', '车祸', '雷声'
                    causes_of_noise = '电视', '放鞭炮的孩子', '神奇大象', '梦'

                    chosen_ name = names at random
                    chosen_verb = verbs at random
                    chosen_location = '随机位置'
                    chosen_sounds = noises at random
                    chosen_spot = hiding_spots random
                    chosen_causes = causes_of_noise at random

                    print chosen_name ' 是 ' chosen_verb ' ' chosen_location
                    print '当他们突然随机听到类似' sounds at random
                    print chosen_name ' 环顾四周，但他们无法发现噪音来自哪里'
                    print chosen_name ' 躲 ' chosen_spot'
                    print '们试图环顾四周，但从那里看不到任何东西'
                    hidden = '是'
                    while hidden = '是'
                        print chosen_name '仍然没有看到任何东西'
                    answer = ask '是否 ' chosen_name ' 从他们的藏身之处移动?'
                        if answer = '是'
                            hidden == '否'
                    print 'chosen_name 移自' chosen_spot
                    print '然后他们发现这只是' chosen_cause
                    print chosen_name '笑着继续他们的一天'
                    print 结束
                    ```
            16:
                story_text: |-
                    ### 练习
                    调试这段代码。 祝你好运！
                    提示: 确保您最终只能看到一次分数。
                example_code: |
                    **警告！ 这段代码需要调试！**
                    ```
                    country = ['荷兰'，'波兰'，'土耳其'，'津巴布韦'，'泰国'，'巴西'，'秘鲁'，'澳大利亚'，'印度'，'罗马尼亚']
                    capitals = '阿姆斯特丹'、'华沙'、'伊斯坦布尔'、'哈拉雷'、'曼谷'、'巴西利亚'、'利马'、'堪培拉'、'新德里'、'布加勒斯特'
                    score = 0
                    for i in range 0 to 1
                         answer = ask “国家/地区的首都是多少”[i]
                         correct =capital[i]
                         if answer = correct
                             print“ Correct！”
                         score = score + 1
                         else
                             print '错误，' capitals[i] '是' states[i] 的首都
                         print '你得分 ' score ' 满分 10 分'

                    ```
            17:
                story_text: |-
                    ### 练习
                    调试这段代码。 祝你好运！
                example_code: |
                    **警告！ 这段代码需要调试!**
                    ```
                    define food_order
                        toppings = ask '意大利辣香肠、金枪鱼、蔬菜还是奶酪？'
                        size = ask '大、中还是小?'
                        number_of_pizza = ask '您想要多少个披萨？'

                        print '您订购了'
                        print number_of_pizzas ' size  ' topping ' pizza'

                    define drinks_order
                        drink = ask '水、可乐、冰茶、柠檬水还是咖啡?'
                        number_of_drinks = ask '您想要多少这些饮料？'

                        print '您订购了'
                        print number_of_drinks ' ' drink

                    '欢迎来到海蒂披萨'
                    more_food = ask '您想订一份披萨吗？'
                    while more_food = '是'
                        return food_order
                        more_food = ask '您想订一份披萨吗？'
                    more_drinks = ask '您想点一些饮料吗？'
                    while more_drinks == '是'
                        call drink_order
                        more_drinks == ask '您想订购更多饮料吗？'


                    print '感谢订购！'
                    ```
            18:
                story_text: |-
                    ### 练习
                    从第 16 级开始调试这个 Old MacDonald 程序。祝你好运！
                example_code: "**警告！ 这段代码需要调试！**\n```\nanimals = ['pig', 'dog', 'cow']\nsounds = ['oink', 'woof', 'moo']\nfor i in range 1 to 3\n    animal = animals[i]\n    sound = sounds[i]\n    print '老麦当劳有一个农场'\n    print 'E I E I O!'\n    print '在那个农场他有一只' animal\n    print 'E I E I O!'\n    print '这里有‘sound sound\n    print '以及那也有' sound sound \n    print '这里有 ' sound\n    print '那也有 ' sound\n    print '到处有 ' sound sound\n```\n"
    default:
        name: 介绍
        default_save_name: 介绍
        description: 级别说明
        levels:
            1:
                story_text: "在第1级，你可以使用命令`{print}`、`{ask}`和`{echo}`。\n在编程栏里面输入你的代码。或者按下代码范例框里面的绿色按钮，它会为你输入代码!\n 你可以用左边编程栏下方绿色的 “运行程序” 按钮测试你的代码。\n\n你可以使用`{print}`命令将文本打印到屏幕上。     \n"
            2:
                story_text: |
                    恭喜！ 您已达到第 2 级。希望您已经编写了一些很棒的代码！
                    在第一级中，您可能已经注意到 `{echo}`命令一次只能保存一位信息。
                    例如，在餐厅冒险中，您可以回应顾客想吃什么或他们想喝什么，但不能在一句话中同时回应两者。
                example_code: |
                    **警告！ 此代码不起作用！**
                    在 Hedy 中，命令有时会发生变化。 例如，`{echo}` 仅适用于级别 1。在本级别中，您将学习一种更好的方法来回显答案。
                    ```
                    {print} 欢迎来到 Hedy's
                    {ask}你想吃什么？
                    {echo}所以你想要
                    {ask}你想喝什么？
                    {echo}所以你想要
                    ```
                story_text_2: |
                    如果玩家输入汉堡包和可乐，您不能说“所以您想要汉堡包和可乐”，但您必须创建两条单独的行。
                    此外，`{echo}`命令仅回显句子末尾的单词。 所以你不能说“你的汉堡包马上就来了！”。

                    这在第 2 级中发生了变化。在第 2 级中，您将学习如何使用变量，它允许您保存多条信息并将其打印在您想要的任何位置。
                    那么让我们转到下一个选项卡！
            3:
                story_text: |
                    在上一关中，您已经了解了变量是什么以及如何使用它来使您的冒险更具互动性。
                    但是...这并不是您可以使用变量做的唯一事情！ 您还可以使用变量来创建列表。
                    您甚至可以让 Hedy 从列表中随机选择一个单词，这样您就可以制作真正的游戏！
                    快速浏览下一个选项卡！
            4:
                story_text: |
                    在前面的级别中，您一直在练习变量，但您可能遇到过这个问题。
                    您可能尝试过运行如下代码：

                    当然你想打印

                    `My name is Sophie`

                    但海蒂打印

                    `My Sophie is Sophie`.

                    在此级别中，此问题通过使用引号得到解决。
                example_code: |
                    ````
                    名字{is}苏菲
                    {print} 我的名字是名字
                    ````
            5:
                story_text: |
                    在前面的级别中，您已经学会了使用`{at} {random}`，这使得您每次运行代码时的游戏都不同。
                    但它并不是真正的互动，玩家对游戏中发生的事情没有任何影响。

                    在本级别中，您将学习`{if}`命令，它允许您在程序中给出不同的响应。 例如，您可以通过这种方式为您的计算机设置一个秘密密码。
                    因此，让我们转到下一个选项卡以获取新命令！
                example_code: |
                    ````
                    密码 {is} {ask} '正确的密码是什么？'
                    ````
            6:
                story_text: |
                    在上一级别中，您已经练习了`{ask}`和`{if}`。 例如，您可以询问客人想吃什么。
                    但您还不能做的是计算每个人晚餐的价格。

                    下一级别使您可以在程序中使用加法、减法和乘法。 通过这种方式，您可以计算餐厅的价格，但您也可以添加密码，为您的朋友和家人提供折扣。
                    下一级别的另一个选择是编写您自己的数学游戏，供您的弟弟或妹妹练习乘法。
                    你自己去看看吧！
                example_code: |
                    ```
                    food_price {is} 0
                    drink_price {is} 0
                    total_price {is} 0
                    {print}“欢迎来到麦克海蒂”
                    order {is} {ask} '你想吃什么？'
                    {if} order {is} 汉堡包 food_price {is} 5
                    {if} order{is} 薯条 food_price {is} 2
                    drink{is} {ask}“你想喝什么？”
                    {if} drink {is} 水 drink_price {is} 0
                    {else} drink_price{is} 3
                    total_price {is} food_price + drink_price
                    {print} '请付'total_price'美元'
                    ```
            7:
                story_text: |
                    做得好！ 您已经达到了下一个级别，这意味着您已经练习了`{if}`和`{else}`。 您可能已经注意到您的代码变得越来越长。
                    例如，如果您想编程“生日快乐”。

                    这是大量的代码，主要是一遍又一遍地重复相同的单词。 幸运的是，在下一个选项卡中，您将学习使用`{repeat}`命令的解决方案，该解决方案允许您多次重复一行代码。
                example_code: |
                    ```
                    {print} '祝你生日快乐'
                    {print} '祝你生日快乐'
                    {print} '亲爱的海蒂，生日快乐'
                    {print} '祝你生日快乐'
                    ```
            8:
                story_text: |
                    现在您已经学会了如何重复一行代码。 这很有用，但并不总是足够的。 有时您想一次重复多行。
                    此级别允许您对几行代码进行分组，并一次重复这一小组代码！
                example_code: |
                    ````
                    {repeat} 5 {times} {print} '在下一个选项卡中，您可以一次重复多行代码！'
                    ````
            9:
                story_text: |
                    做得好！ 您已达到另一个新水平！ 在上一级别中，您学习了如何在 {if} 或 {repeat} 命令中使用多行代码。 但你还不能将两者结合起来......
                    好消息！ 在此级别中，您将被允许将 {if} 放入 {if} 或 {repeat} 命令内。
                example_code: |
                    ````
                    answer = {ask} '你准备好学习新东西了吗？'
                    {if} answer {is} 是
                         {print}'太棒了！ 您可以学习在 if 命令中使用重复命令！
                         {print}“万岁！”
                         {print}“万岁！”
                         {print}“万岁！”
                    {else}
                         {print} '也许你应该在上一关多练习一下'
            10:
                story_text: |
                    你做得很好！ 在前面的关卡中，我们仍然面临一个小问题。 您已经学会了重复台词，但如果您想稍微更改台词怎么办？
                    例如，如果您想唱“如果您快乐并且您知道”这首歌。 它看起来像这样：

                    如果您还想要下一节“跺脚”，下一节，再下一节，您就必须完全更改代码。
                    在本级别中，您将学习`{for}`命令，它允许您创建操作列表并每次使用另一个操作重复代码！
                    请看一下！
                example_code: |
                    ````
                    {repeat} 2 {times}
                         {print}'如果您开心，并且知道它会鼓掌您的手'
                    {print} '如果你很高兴并且你知道这一点并且你真的想表现出来'
                    {print} '如果你高兴并且知道的话，请拍手'
                    ````
            11:
                story_text: |
                    你已经达到11级了，你做得很好！ 在更高级别中, 海蒂 越来越专注于教您编程语言 Python。
                    Python 中没有`{repeat}`命令，但有一个类似于 {repeat} 的命令。 您是否想知道如何用 Python 语言表达`{repeat}`？ 赶紧去了解一下吧！
            12:
                story_text: |
                    也许您在餐厅冒险中尝试过使用十进制数字。 如果你这样做了，你可能会注意到海蒂还不明白它们并且总是四舍五入。
                    从这个级别开始，您可以使用十进制数字。
                example_code: |
                    ```
                    {print} 2.5 + 2.5
                    ```
            13:
                story_text: |
                    在前面的级别中，您学习了如何将两个`{if}`命令彼此放在一起。 这工作得很好，但它确实会给你带来非常长且不方便的代码，如下所示：

                    在此系统中，您必须提供正确的用户名和密码。
                    在本级别中，您将学习`{and}`命令，这将使此代码变得更短且更易于理解！
                    一探究竟！
                example_code: |
                    ```
                    username = {ask} '您的用户名是什么？'
                    password = {ask} '你的密码是什么？'
                    {if} username {is} 'Hedy'
                         {if} password {is} '秘密'
                             {print}“欢迎海蒂！”
                         {else}
                             {print} '访问被拒绝'
                    {else}
                         {print} '访问被拒绝！'
                    ```
                    ```
                    年龄 = {ask} '你的年龄是多少？ '
                    {if} 名字 {is} '海蒂' {and} 年龄 {is} 2
                        {print} '你才是真正的海蒂！'
                    ```
            14:
                story_text: |
                    使用以下程序，您可以计算出您在学校的主题（因此，六个或更高的等级）。
                    由于第5行中的很长代码，您可以看到此代码效率极低。
                    从1到5的所有不同等级都必须单独编程。 幸运的是，在这个级别上，您将学习如何在没有这个非常长的代码的情况下完成此操作！
                example_code: |
                    ```
                    first_grade = {ask}'您在第一次测试中获得了什么分数？”
                    second_grade = {ask}'您在第二个测试中获得了什么分数？”
                    added= first_grade + second_grade
                    mean_grade =添加 / 2
                    {if} mean_grade = 1 {or} nee_grade = 2 {or} mean_grade = 3 {or} mean_grade = 4 {or} mean_grade = 5
                         {print}'哦，不！ 你让主题失败了...'
                    {else}
                         {print}'太棒了！ 你已经通过了这个主题！
                    ```
            15:
                story_text: "我们将要学习一个新的循环, 就是`{while}` 循环！只要语句为真/有效，我们就不停的执行循环语句！\n所以别忘了改变循环语句中的变量值。\n \n因此在范例代码中，我们一直不停的执行循环语句直到一个正确的答案被给出。 \n如果正确答案一直没有被给出, 这个循环语句就不会结束!"
                example_code: |
                    ```
                    game=“开”
                    {for} i {in} {range} 1 {to} 100
                         {if} game == '开'
                             answer = {ask} '你想继续吗？'
                             {if} answer == '不'
                                 game='结束'
                             {if} answer == '是'
                                 {print} '好的，我们继续'
                    ```
            16:
                story_text: |
                    在这个级别中，我们将更加接近真正的 Python 代码。 您还将学习如何将两个列表匹配在一起。
                    通过这种方式，您可以编写一个代码，将正确的动物与正确的声音相匹配。
                    因为下面的两段代码……显然是废话！
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    {print} friends[1] ' is the first friend on the list.'
                    {print} friends[2] ' is the second friend on the list.'
                    {print} friends[3] ' is the third friend on the list.'
                    #now we will match 2 lists using the variable i
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} friends[i] 's lucky number is ' lucky_numbers[i]
                    ```
            17:
                story_text: |
                    现在我们要稍微改变一下缩进。 每次我们需要缩进时，我们都需要在缩进之前的行添加`:`。

                    在此级别中，您还可以使用新命令：`{elif}`。 `{elif}` 是 {else} {if} 的缩写，当您想要创建 3 个（或更多！）选项时需要它。
                    一探究竟！
            18:
                story_text: |
                    恭喜！ 您已到达 Hedy 的最后一关！ 您在此处创建的代码可以复制到真实的 Python 环境（例如 replit 或 PyCharm），并且您可以在那里继续学习！
                    但请注意，Python 只能读取英文命令，因此如果您一直在使用其他语言，则现在需要切换到英文。
    dice:
        name: 骰子
        default_save_name: 骰子
        description: 制作你自己的骰子
        levels:
            3:
                story_text: |
                    在这一级我们可以从列表中选择。通过这种方式，我们能让电脑选择骰子哪一面朝上。
                    看看你家里柜子里的游戏。
                    有没有用骰子玩的游戏？你也可以用这段代码来复制它。
                    比如，蚯蚓游戏用的骰子上印着1到5和一条蚯蚓。

                    ![蚯蚓游戏的骰子，有1到5和一条蚯蚓](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    选项{is} 1, 2, 3, 4, 5, 蚯蚓
                    {print} 你把 _ {at} {random} 扔了！
                    ```
                story_text_2: |
                    ### 练习
                    上面的例子中的骰子是一种特定游戏的骰子。你能制作普通的骰子吗？
                    或者其他不同游戏的特殊骰子？
                example_code_2: |
                    ```
                    选择 {is} _
                    ```
            4:
                story_text: |
                    在这一级，我们可以用骰子的点数来造句，当然要用引号。
                    这次的示例代码没有全部完成。你能把代码补全吗？
            5:
                story_text: |
                    在这一级，你可以用`{if}`再制作一个骰子。
                    补全示例代码，让它在你投出蚯蚓的时候说“你不用再投了”。

                    不过也许你想要重新搞一个别的游戏里的完全不同的骰子。那也没关系！你只要做出对应的回应，比如在投出6的时候说“好”，投出其他的时候说“可惜”。
                example_code: |
                    ```
                    choices {is} 1, 2, 3, 4, 5, 蚯蚓
                    throw {is}选择{at} {random}
                    {print} '你已经抛出' throw
                    _ throw {is} 蚯蚓 {print} '你可以停止投掷了。'
                    _ {print} '你必须再扔一次！'
                    ```
            6:
                story_text: |
                    你也可以让一条蚯蚓再次死亡，但现在你还可以计算已经滚动了多少点。
                    你可能知道，蠕虫对于蚯蚓来说算5分。 现在，投掷后您可以立即计算出您投掷了多少分。
                    这是计算一个骰子点数的代码：

                    ### 练习
                    你能编写代码以便得到 8 个骰子的总分吗？ 为此，您必须复制并粘贴一些代码行。
                example_code: |
                    ```
                    choices = 1, 2, 3, 4, 5, earthworm
                    points = 0
                    throw = choices {at} {random}
                    {print} 'you threw ' throw
                    {if} throw {is} earthworm points = points + 5 {else} points = points + throw
                    {print} 'those are ' points ' points'
                    ```
                example_code_2: |
                    你能算出 8 个骰子的分数吗？ 这需要大量的复制和粘贴，对吗？ 我们将在第 7 级中让这一切变得更容易！
            7:
                story_text: |
                    您还可以在此级别再次掷骰子。 使用`{repeat}`代码，您可以轻松掷整手骰子。

                    ### 练习
                    尝试完成示例代码！ **额外** 想象一个您知道的游戏，其中涉及使用“{repeat}”的骰子和程序。
                example_code: |
                    ```
                    选项 = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
            10:
                story_text: |
                    ### 练习
                    每个人都花太长时间掷骰子吗？ 在这个关卡中，你可以让 Hedy 一次性扔出所有骰子！
                    将名字更改为您朋友或家人的名字，然后完成代码，以便他们各自滚动。
                example_code: |
                    ```
                    玩家们 = 安, 约翰, 杰西
                    选项 = 1, 2, 3, 4, 5, 6
                    _ _ _ _
                        {print} 玩家 '投出了' 选项 {at} {random}
                        {sleep}
                    ```
            15:
                story_text: |
                    ### Exercise
                    In this level you can create a little game in which you'll have to throw 6 as fast as possible.
                    We have started the code, it's up to you to get the game to work!

                    Firstly, add a `{while}` loop that checks if 6 has been thrown or not.
                    As long as you haven't thrown 6 already, throw the dice on a random number.
                    Print what the player has thrown.
                    Add a try to the amount of tries
                    Wait a second before you throw again, or - in case you've thrown a 6 - before the game ends.
                example_code: |
                    ```
                    options = 1, 2, 3, 4, 5, 6
                    {print} 'Throw 6 as fast as you can!'
                    thrown = 0
                    tries = 0
                    _
                    _
                    _
                    _
                    _
                    {print} 'Yes! You have thrown 6 in ' tries ' tries.'
                    ```
    dishes:
        name: 洗碗？
        default_save_name: 洗碗
        description: 用电脑决定谁来洗碗
        levels:
            3:
                story_text: |
                    你家里是不是总是争论让谁来洗碗或者换猫砂盆？
                    那么你可以让电脑来做出公平的决定。你在这一级可以写出这个程序！
                example_code: |
                    ```
                    人们 {is} 妈妈， 爸爸， 艾玛， 苏菲
                    {print} 人们 {at} {random}来收拾碗筷。
                    ```
                story_text_2: |
                    ### 练习
                    制作你自己版本的洗碗机程序。首先列出你的家庭成员名单。
                    然后想一个需要完成的任务，让计算机用`{at} {random}`命令决定谁来做这个任务。

                    **额外的**不想洗碗？用`{remove}` `{from}` 命令将你的名字从名单上删除，从而破解程序。
            4:
                story_text: |
                    使用引号，可以使你的洗碗程序更加出色。

                    ### 练习
                    首先，在空白处填写正确的符号或命令，以使此示例程序正常工作。
                    你明白了吗？太好了！现在从上一个级别复制你自己的代码，并通过在正确的位置添加引号使其在此级别中正常工作。
                example_code: |
                    ```
                    人们 {is} 妈妈, 爸爸, 艾玛, 索菲
                    {print} _ 洗碗的人是 _
                    {sleep}
                    {print} 人们 {at} _
                    ```
            5:
                story_text: |
                    你可以用`{if}`给程序加入选项，来让它更有趣。你可以让你的程序对电脑做出的选择进行回应。

                    你能不能完成这段代码，让它在选中你的时候打印“太糟了”，其它情况下打印“好！”？
                    别忘了引号！
                example_code: |
                    ```
                    人们 {is} 妈妈, 爸爸, 艾玛, 索菲
                    洗碗的 {is} 人们 {at} {random}
                    _洗碗的 {is} 索菲 {print} _ 太糟了，轮到我洗碗 _
                    _{print} '运气真好，' _ '把碗洗了'
                    ```
            6:
                story_text: |
                    每个人洗了多少次碗？是否公平？在这一级你可以进行统计。
                example_code: |
                    ```
                    人们 = 妈妈, 爸爸, 艾玛, 索菲
                    艾玛洗碗 = 0
                    洗碗的 = 人们 {at} {random}
                    {print} '洗碗的人是' 洗碗的
                    {if} 洗碗的 {is} 艾玛 艾玛洗碗 = 艾玛洗碗 + 1
                    {print} '艾玛这周要洗' 艾玛洗碗 '次碗'
                    ```

                    现在你需要将第3到第5行复制几次（比如，复制7次表示一周）来计算一整周。
                    你能写出一整周用的代码吗？
                story_text_2: |
                    如果你运气极差，之前的节目可能会选择你洗一整周的碗！ 这不公平！
                    要创建更公平的系统，您可以使用`{remove}`命令从列表中删除所选人员。 这样，在每个人都轮到之前，您就不必再洗碗了。

                    周一和周二已经为你准备好了！ 你能添加本周剩下的时间吗？
                    而且……当你的列表为空时，你能想出一个解决方案吗？
                example_code_2: |
                    ```
                    人们 = 妈妈, 爸爸, 艾玛, 索菲
                    洗碗的 = 人们 {at} {random}
                    {print} '周一洗碗的是：' 洗碗的
                    {remove} 洗碗的 {from} 人们
                    洗碗的 = 人们 {at} {random}
                    {print} '周二洗碗的是：' 洗碗的
                    {remove} 洗碗的 {from} 人们
                    洗碗的 = 人们 {at} {random}
                    ```
            7:
                story_text: |
                    使用`{repeat}`您可以重复代码片段。 您可以使用它来计算谁将在多天内洗碗！
                    ### 练习
                    使用`{repeat}`命令来决定整个星期谁需要洗碗。 每一个空格都需要填写一个命令或数字！
                    **额外** 你能想到家里还有其他任务吗？ 调整代码，使其决定三项家务。 不要忘记打印它所涉及的任务！
                example_code: |
                    ```
                    人 = 妈妈, 爸爸, 艾玛, 索菲
                    {repeat} _ _ {print} '洗碗工作将由' _ _ _完成
                    ```
            10:
                story_text: |
                    在这个级别中，您可以轻松地制定整周的日程安排！

                    ### 练习
                    添加第二个琐事，例如吸尘或整理，并确保整个星期也将其划分。
                    <br> **额外** 该计划不公平，你可能会运气不好，整个星期都在洗漱。 怎样才能让这个计划更加公平呢？
                example_code: |
                    ```
                    日期们 = 周一, 周二, 周三, 周四, 周五, 周六, 周日
                    名字们 = 妈妈, 爸爸, 艾玛, 索菲
                    {for} 日期 {in} 日期们
                        {print} 名字们 {at} {random} '负责在' 日期 '洗碗'
                    ```
    elif_command:
        name: '{elif}'
        default_save_name: elif
        description: elif
        levels:
            17:
                story_text: |
                    In this level you can also use a new command: `{elif}`. `{elif}` is a combination of the keywords `{else}` and `{if}` and you need it when you want to make 3 (or more!) options.
                    Check it out!
                example_code: |
                    ```
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
                    ```
    for_command:
        name: '{for}'
        default_save_name: for
        description: for 指令
        levels:
            10:
                story_text: |-
                    ## For
                    在这个级别中，我们学习一个名为`{for}`的新代码。 使用`{for}`，您可以创建一个列表并使用所有元素。
                    `{for}` 创建一个块，就像 `{repeat}` 和 `{if}` 一样，因此块中的所有行都需要以 4 个空格开头。
                example_code: |
                    ```
                    animals = dog, cat, blobfish
                    {for} animal {in} animals
                        {print} 'I love ' animal
                    ```
            11:
                story_text: |-
                    在本关中，我们增加了一种新的`{for}`形式。在前面的关卡中，我们将`{for}`用于列表，我们也可以将`{for}`用于数字。
                    我们通过添加一个变量名，在其后面接着`{in}``{range}`。然后我们写上数字来开始，`{to}`来作为数字的终点。

                    尝试这个例子，看看会发生什么! 在这一关卡中，你将需要在`{for}`语句下面的行中使用缩进。
                example_code: |
                    ```
                    {for} counter {in} {range} 1 {to} 10
                        {print} counter
                    {print} 'Ready or not. Here I come!'
                    ```
            17:
                story_text: |
                    Now we are going to change indentation a little bit. Every time that we need an indentation, we need `:` at the line before the indentation.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Ready or not, here I come!'
                    ```
    fortune:
        name: 算命
        default_save_name: 算命
        description: 让海蒂帮你算命
        levels:
            1:
                story_text: |
                    你有没有在天桥下让算命的给你算过命？或者有没有抽过签？
                    那你想必也知道，它们并不能真正预言你的未来。但是它们玩起来仍然很有趣！

                    在接下来的几级中，你会学到如何制作你自己的算命机器！
                    在第1级，一开始可以简单一些，只让海蒂介绍自己会算命，然后用{echo}命令让它复述玩家的回答。
                    像这样：
                example_code: |
                    ```
                    _你好，我是海蒂半仙！
                    _你叫什么？
                    _让我掐指算一算
                    _ 赵钱孙李……
                    _你的名字叫
                    ```
                story_text_2: |
                    ### 练习
                    将示例代码复制到你的输入屏幕上，并填入空白处，使代码生效。
                    **另外**改变代码，让魔法师不仅能算出你的名字，还能算出你的年龄、你最喜欢的运动队或其他关于你的事情。
            3:
                story_text: |
                    在上一级，你创造了你的第一台算命机器，但海蒂不会算任何东西，只会“{echo}”。
                    在这一级，你可以用变量和`{at} {random}`命令来真正让海蒂为你选择一个答案。比如看看这段代码：
                example_code: |
                    ```
                    {print} 我是海蒂半仙！
                    问题 {is} {ask} 你想算什么？
                    {print} 你想算：问题
                    回答 {is} 是, 否, 有可能
                    {print} 让我算一卦……
                    {sleep} 2
                    {print} 回答 {at} {random}
                    ```
                story_text_2: |
                    ### 练习
                    现在，海蒂 只能回答是、否或也许。 你能给 Hedy 更多的答案选项吗，比如“肯定”或“再问一次”。
            4:
                story_text: |
                    此级别没有新功能，但允许您练习使用引号。
                    您可以重新制定3级代码，并确保在正确的位置添加报价标记！

                    请注意，在第3级中，我们无法将“问题”一词用作变量的名称，也可以将可以打印的正常单词用作。
                    第4级中的引号使得这是可能的！

                    ### 练习
                    我们从此示例代码中删除了所有引号，您可以在所有正确的位置添加它们吗？

                    ### 练习2
                    返回到上一个级别，然后复制您的财富柜员代码。 通过在正确的位置中添加引号，使代码在此级别中起作用。
                example_code: |
                    ```
                    _ 在这段代码中添加引号 _
                    {print} 我是海蒂算命仙!
                    问题 {is} {ask} 你想知道什么？
                    {print} 这是你的问题：问题
                    答案 {is} 是、不是、也许
                    {print} 让我掐指算一算...
                    {sleep} 2
                    {print} 答案 {at} {random}
                    ```
            5:
                story_text: |
                    ### 练习
                    在示例代码中，您会看到如何制定算命柜员程序，使您可以对自己有利的赔率提高赔率。 这个作弊计划总是告诉您您将赢得彩票，但您的朋友将永远不会赢。

                    用它来制作你自己的程序，发挥创意！ 例如，您可以创建一个代码来预测：
                    *您最喜欢的运动队将击败所有竞争对手！
                    * 您最喜欢的电影将被选为电影之夜！
                    * 您将赢得您最喜欢的演出的门票！
                    * 你是他们当中最美丽的，就像白雪公主的魔镜一样。
                    让您的想象力发挥作用！

                    您的程序必须存在至少 10 行代码，并且需要至少有一个`{if}`和`{else}`命令。
                example_code: |
                    ```
                    friends {is} Jordan, Lucy, Dave
                    {print} 'I can predict if you will win the lottery tomorrow!'
                    person {is} {ask} 'Who are you?'
                    good_answer {is} Hurray! You win!, You will definitely win!, We have a winner!
                    bad_answer {is} Bad luck! Try again!, Another person will win, You lose!
                    {if} person {in} friends {print} good_answer {at} {random}
                    {else} {print} bad_answer {at} {random}
                    ```
            6:
                story_text: |
                    在本级中，作为一个算命仙你可以用数学帮你算命。这使你可以编造（傻傻的）公式来算命。
                    例如，你可以算出你将来会变得多么有钱，或者你以后会有多少个孩子。



                    ### 练习
                    你能自己设计一个（傻傻的）算命机器吗？
                example_code: |
                    ```
                    {print} 'I am Hedy the fortune teller!'
                    {print} 'I can predict how many kids youll get when you grow up!'
                    age = {ask} 'How old are you?'
                    siblings = {ask} 'How many siblings do you have?'
                    length = {ask} 'How tall are you in centimetres?'
                    kids = length / age
                    kids = kids - siblings
                    {print} 'You will get ...'
                    {sleep}
                    {print} kids ' kids!'
                    ```
            7:
                story_text: |
                    ### 练习
                    完成这个程序，它会告诉你你喜欢的人是否也爱你。
                example_code: |
                    ```
                    {print} '我是海蒂算命仙！'
                    {print} '你可以问3个问题！'
                    {repeat} 3 {times} 问题 ={ask} '你想知道什么？'
                    回答=是，否，有可能
                    {repeat} 3 {times} {print} '我掐指一算...' 回答 {at} {random}
                    ```
            8:
                story_text: |
                    在前几级中，你已经学会了如何使用一行`{repeat}`命令 ，让算命仙连续回答3个问题，但我们在打印问题时遇到了问题。
                    现在这个问题已解决了，因为有了`{repeat}` 命令的新的使用方法。
                    在下一个例子中，你可以让你的算命仙问3个问题并且还可以打印出来!

                    ### 练习
                    你能在空白处填写正确的命令吗？
                example_code: |
                    ```
                    {print} '我是海蒂算命仙！'
                    {print} '你可以问我三个问题。
                    答案=是、否、有可能
                    _ _ _
                       问题 ={ask} '你想知道什么？
                       {print} 问题
                       {sleep}
                       {print} '我掐指一算...' 答案 {at} {random}
                    ```
            10:
                story_text: |
                    在此级中，你将学习如何为MASH（豪宅、公寓、棚屋、别墅）游戏编程。在这个游戏中，你可以一次为所有玩家预测他们的未来的住宅是什么样子的。

                    ### 练习1
                    在列表中添加两个名字，并观察当你运行这个程序时程序的输出的结果有什么变化。
                example_code: |
                    ```
                    房屋 = 豪宅、公寓、棚屋、别墅
                    喜欢 = 无人，皇室，邻居，真爱
                    宠物 = 狗、猫、大象
                    名字们 = 珍娜、瑞安、吉姆
                    {for} 名字 {in} 名字们
                        {print} 名字 ' 住在 ' 房屋 {at} {random}
                        {print} 名字 ' 将会和 ' 喜欢 {at} {random} '结婚'
                        {print} 名字 ' 将得到一个 ' 宠物 {at} {random} ' 作为他们的宠物。'
                        {sleep}
                    ```
            12:
                story_text: |
                    在这个关卡中，你可以用多个字来算命。你可以将不同的命运加入列表中吗？
                example_code: |
                    ```
                    命运 = '你会在香蕉皮上滑倒', _
                    {print} '我将在我的水晶球里看一下你的未来。
                    {print}'我看到... 我看到了......'
                    {sleep}
                    {print} 命运 {at} {random}
                    ```
    functions:
        name: functions
        default_save_name: functions
        description: functions
        levels:
            12:
                story_text: |
                    In this level you'll learn how to use **functions**. A function is a block of code you can easily use multiple times. Using functions helps us organize pieces of code that we can use again and again.
                    To create a function, use `{define}` and give the function a name. Then put all the lines you want in the function in a indented block under the `{define}` line.
                    Leave one empty line in your code to make it look nice and neat. Great job! You have created a function!

                    Now, whenever we need that block of code, we just use <code>{call}</code> with the function's name to call it up! We don't have to type that block of code again.

                    Check out this example code of a game of Twister. The function 'turn' contains a block of code that chooses which limb should go where.

                    ### Exercise
                    Finish this code by setting the 2 variables chosen_limb and chosen_color.
                    Then, choose how many times you want to call the function to give the twister spinner a spin.

                    ### Exercise 2
                    Improve your code by adding a variable called 'people'. Use the variable to give all the players their own command in the game.
                    For example: 'Ahmed, right hand on green' or 'Jessica, left foot on yellow'.
                example_code: |
                    ```
                    sides = 'left', 'right'
                    limbs = 'hand', 'foot'
                    colors = 'red', 'blue', 'green', 'yellow'

                    {define} turn
                        chosen_side = sides {at} {random}
                        chosen_limb = limbs _
                        chosen_color = colors _
                        {print} chosen_side ' ' chosen_limb ' on ' chosen_color

                    {print} 'Lets play a game of Twister!'
                    {for} i {in} {range} 1 to _
                        {call} turn
                        {sleep} 2
                    ```
            13:
                story_text: |
                    Now that you've learned how to use functions, you'll learn how to use a function with an argument.
                    An **argument** is a variable that is used within a function. It is not used outside the function.

                    For example in this code we've programmed the first verse of the song 'My Bonnie is over the ocean'.
                    In this example code the argument `place` is used. Place is a variable that is only used in the function, so an argument.
                    To use `place` we have programmed the line `define song with place`.
                    When the function is called, computer will replace the argument `place`, with the piece of text after `call song with`.

                    ### Exercise
                    The next verse of this song goes:

                    Last night as I lay on my pillow
                    Last night as I lay on my bed
                    Last night as I lay on my pillow
                    I dreamed that my Bonnie is dead

                    Can you program this verse in the same way as the example?
                example_code: |
                    ```
                    {define} song {with} place
                        {print} 'My Bonnie is over the ' place

                    {call} song {with} 'ocean'
                    {call} song {with} 'sea'
                    {call} song {with} 'ocean'
                    ```
            14:
                story_text: |
                    In the previous levels you have learned to create functions and use arguments with them. Another great use of a function is to let it calculate something for you.
                    You can give the function a calculation and it will give you the answer of the calculation. This answer is called a **return value**.

                    For example, in this code the function calculate_new_price will calculate the new price of any item. It will give you the new price as a return value.

                    ### Exercise
                    Finish this code. We have already made the variable new_price for you, you only need to set it.
                    You should finish the line of code by calling the function that calculates the new price.
                example_code: |
                    ```
                    {define} calculate_new_price {with} amount, percentage
                        percentage = percentage / 100
                        discount_amount = amount * percentage
                        return amount - discount_amount

                    old_price = {ask} 'How much is on the price tag?'
                    discount = {ask} 'What percentage is the discount?'

                    new_price = _ calculate_new_price {with} old_price, _
                    {print} 'The new price is ' new_price ' dollar'
                    ```
    guess_my_number:
        name: Guess my number
        default_save_name: guess my number
        description: guess my number
        levels:
            14:
                story_text: |
                    In this level you can program the game 'Guess my number'

                    ### Exercise
                    Fill in the correct symbols on the blanks to get the game to work.
                example_code: |
                    ```
                    {print} 'Guess my number'
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number = numbers {at} {random}
                    game = 'on'
                    {for} i {in} {range} 1 {to} 10
                        {if} game == 'on'
                            guess = {ask} 'Which number do you think it is?'
                            {if} guess _ number
                                {print} 'Lower!'
                            {if} guess _ number
                                {print} 'Higher!'
                            {if} guess _ number
                                {print} 'You win!'
                                game = 'over'
                    ```
    harry_potter:
        name: 哈利·波特
        default_save_name: 哈利·波特
        description: 哈利·波特 探险
        levels:
            10:
                story_text: |
                    ### 练习
                    我们还可以制作一个哈利波特主题的算命师。 填写空白，以便打印 9 行。
                    **额外** 将算命师的主题更改为其他内容，例如您最喜欢的书籍、电影或电视节目。
                example_code: |
                    ```
                    houses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    subjects = potions, defence against the dark arts, charms, transfiguration
                    fears = Voldemort, spiders, failing your OWL test
                    names = Harry, Ron, Hermione
                    _
                    _ {print} name ' is placed in ' houses {at} {random}
                    _ {print} name ' is great at ' subjects {at} {random}
                    _ {print} name 's greatest fear is ' fears {at} {random}
                    ```
    haunted:
        name: 鬼屋
        default_save_name: 鬼屋
        description: 逃离鬼屋
        levels:
            1:
                story_text: |
                    在这个冒险中，你正在努力制作一个游戏，你必须通过挑选正确的门来逃离鬼屋。
                    如果你选对了门，你就能活下来，但如果没有，一个可怕的怪物可能会...

                    在第一关中，我们通过编造一个可怕的故事来开始我们的鬼屋游戏，并问玩家在鬼屋中会看到什么怪物。
                example_code: |
                    ```
                    {print} How did I get here?
                    {print} I remember my friend telling me to go into the old mansion...
                    {print} and suddenly everything went black.
                    {print} But how did I end up on the floor...?
                    {print} My head hurts like Ive been hit by a baseball bat!
                    {print} What's that sound?
                    {print} Oh no! I feel like Im not alone in this house!
                    {print} I need to get out of here!
                    {print} There are 3 doors in front of me..
                    {ask} Which door should i pick?
                    {echo} I choose door
                    {print} ...?
                    ```
                story_text_2: |
                    ### 练习
                    点击黄色按钮，将范例代码复制到你的输入屏。
                    现在通过添加至少5行代码来完成这个故事。
                    记住，每行代码都要以`{print}` 命令开始。
            2:
                story_text: |
                    在这个鬼屋里，你既可以用表情符号也可以用文字选择你会遇到的怪物。
                example_code: |
                    ```
                    怪物_1 {is} 👻
                    怪物_2 {is} 🤡
                    怪物_3 {is} 👶
                    {print} 你进入了鬼屋。
                    {print} 突然你看到怪物_1
                    {print} 你跑进另一个房间，但怪物_2正在那里等着你！
                    {print} 哦，不! 赶紧到厨房去。
                    {print} 但当你进入厨房时，怪物_3攻击了你!
                    ```
                story_text_2: |
                    ### 练习
                    在上面的例子中，怪物是预先设定好的。所以每次运行你的代码时，输出都是一样的。
                    你能不能添加`{ask}`命令来使鬼屋变得互动，让玩家选择他们遇到的怪物？
                example_code_2: |
                    ```
                    怪物_1 {is} _
                    怪物_2 {is} _
                    怪物_3 {is} _
                    {print}你进入了鬼屋。
                    {print} 突然你看到了怪物_1
                    {print} 你跑进了另一个房间，但是怪物_2在那里等着你！
                    {print} 哦不！快往厨房跑。
                    {print} 但是当你进入厨房后怪物_3攻击了你！
                    ```
            3:
                story_text: |
                    在前面的级别中，你已经对你的鬼屋游戏做了介绍，但你可能已经注意到，故事总会有一个可怕的结局。
                    在这一级中，你可以通过改变游戏的结局来使你的故事更具互动性；有时你会被吃掉，有时你会逃脱！
                    让海蒂随机决定吧。
                example_code: |
                    ```
                    _ Escape from the haunted house!
                    _ There are 3 doors in front of you...
                    _ _ _ Which door do you choose?
                    _ You picked door ... choice
                    monsters _ a zombie, a vampire, NOTHING YOUVE ESCAPED
                    _ You see...
                    {sleep}
                    _ _ _ _
                    ```
            4:
                story_text: |
                    ##鬼屋
                    在此级别中，你要学习如何在游戏中使用引号。
                    你能证明你玩 "鬼屋 "冒险活动的水平达到4级了吗？
                example_code: |
                    ```
                    _给这段代码加上引号_
                    {print} 逃离鬼屋！
                    {print} _在你面前有三扇门...
                    选项{is} {ask} 你选择那扇门？
                    {print} 你选择的门 ...选项
                    怪物们{is}僵尸，吸血鬼，什么都没有你已经逃出来了
                    {print} 你看见...
                    {sleep}
                    {print} 怪物们{at} {random}
                     ```
            5:
                story_text: |
                    在这一关之前，鬼屋游戏总是要求玩家选择一扇门，但你可能已经注意到了，他们并不是真的要正确回答。
                    如果玩家填写了一个完全随机的答案，游戏仍然可以进行，玩家甚至可能会赢（尽管没有选到门）。
                    在这一关中，你只能通过选择海蒂随机挑选的那扇门来赢得游戏。

                    ### 练习
                    你能找到缺少的4个词来完成代码吗？
                example_code: |
                    ```
                    {print} '逃离鬼屋！'
                    {print} '在你面前有三扇门...'
                    门 {is} 1, 2, 3
                    怪物{is} 狼人，木乃伊，吸血鬼，僵尸
                    选择的门{is} {ask}‘你选择哪扇门？’
                    {print} ‘你选了门...'选择的门
                    {sleep}
                    正确的门{is} 门{at} {random}
                    _ _ _ _ {print} ‘干得漂亮！你成功逃出去了！’
                    {else} {print} ‘哦 不！你要被一个...'怪物 {at} {random}'吃掉了
                    ```
            9:
                story_text: |
                    在这一关中，你可以使用嵌套，这可以让你的鬼屋变得更有互动性!

                    ### 练习
                    现在要赢得这个游戏非常困难，你能让它更容易赢得吗？
                    如何改变你的代码，使它只有一个错误的门和两个正确的门，而不是一个正确的门和两个错误的门？
                    提示：这意味着将变量 正确的门 改为 错误的门 ，并切换`{if}`和`{else}`代码。
                    当然，你也可以改变故事，使其成为你自己的故事。改变怪物，或者把它变成一个你在那里可以得到一份礼物的快乐游戏节目！
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player = alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    {repeat} 3 {times}
                        {if} player {is} alive
                            correct_door {is} doors {at} {random}
                            {print} 'There are 3 doors in front of you...'
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} chosen_door {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
            11:
                story_text: |
                    在这个关卡中，我们改变了`{for}`命令，所以我们可以告诉玩家他们在哪里。

                    ### 练习1
                    完成这个程序，让玩家知道他们在哪个房间里。

                    ### 练习2
                    通过以下步骤使程序成为一个冒险。

                    1. 制定一个选择清单（比如：战斗或逃跑）。
                    2. 确保玩家可以用`{ask}`来选择一个选项
                    3. 答案是否正确？那么他们可以进入下一个怪物。他们给出了错误的答案吗？用`{print}`让玩家知道。

                    **（另外）**如果你做了一个错误的选择，一个怪物仍然会被显示出来！你怎么能改变这种情况？
                example_code: |
                    ```
                    {print} '逃离鬼屋！'
                    怪物 = 僵尸, 吸血鬼, 大蜘蛛
                    _
                        {print} '房间' i
                        怪物 = 怪物们 {at} {random}
                    ```
            14:
                story_text: |
                    ### Exercise
                    In this level you can use the `<` and `>` symbol to introduce lives to your game.
                    Make sure the player loses a life when they come across the wrong monster and that the game stops if you have no lives left.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house'
                    lives = 3
                    doors = 1, 2, 3
                    monsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives _
                            good_door = doors {at} {random}
                            monster = monsters {at} {random}
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} good_door == chosen_door
                                {print} 'You have chosen the correct door'
                            {else}
                                {print} 'You see...' monster
                                {if} monster == 'a sleeping 3 headed dog'
                                    {print} 'Pffieuw.... Its asleep'
                                {else}
                                    {print} 'You lose one life'
                                    lives = _
                        {else}
                            {print} 'GAME OVER'
                    ```
            16:
                story_text: |
                    ### Exercise
                    This haunted house game uses the connection between the lists you can use in this level.
                    For example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.
                    Check out the code and fill in  `weapons[i]`, `monsters[i]` , `bad_fate[i]`, `good_fate[i]`, `hint[i]` on the correct blanks to get the code to work!
                example_code: |
                    ```
                    numbers = [1, 2, 3]
                    i = numbers[{random}]
                    hint = ['growling', 'a cackling laugh', 'fluttering batwings']
                    monsters = ['zombie', 'witch', 'vampire']
                    bad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']
                    good_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']
                    weapons = ['ham', 'lighter', 'garlic']
                    {print} 'You are standing in front of an old mansion'
                    {print} 'Something is not right here'
                    {print} 'You hear ' _
                    {print} 'You are going to explore it'
                    {print} 'You enter the kitchen and see a lighter, a raw ham and a garlic.'
                    your_weapon = {ask} 'What do you bring with you?'
                    {print} 'With your ' your_weapon ' you enter the living room'
                    {print} 'There you find a ' _
                    needed_weapon = _
                    {if} your_weapon == needed_weapon
                        {print} 'You use your ' your_weapon
                        {print} _
                        {print} 'YOU WIN!'
                    {else}
                        {print} 'You have chosen the wrong weapon...'
                        {print} _
                        {print} 'GAME OVER'
                    ```
    hotel:
        name: hotel
        default_save_name: hotel
        description: hotel
        levels:
            13:
                story_text: |
                    In the previous adventure you have learned how to use an argument in a function, and you've learned how to combine it with an {ask}.
                    You might have wondered why you would use functions, because the functions in the example were only one line of code.
                    Now we will show you what a bigger function looks like and we will use multiple agruments now as well. You'll see how much better it is to use a function once the function gets bigger.
                    Here is an example of a function with arguments combined with {ask} commands.
                example_code: |
                    ```
                    {define} welcome_message {with} title, last_name, country, room_number
                        {print} 'Welcome to Hotel Hedy, ' title ' ' last_name
                        nice_trip {is} {ask} 'Did you have a nice trip from, ' country '?'
                        {if} nice_trip {is} 'yes'
                            {print} 'Lovely!'
                        {else}
                            {print} 'Sorry to hear that.'
                            {print} 'Hopefully you can take a nice rest in you room.'
                        {print} 'Your room number is ' room_number

                    {print} 'Hello. Please fill in your information to check in.'
                    title = {ask} 'What is your title (mr, mrs, ms, dr, etc.)?'
                    name = {ask} 'What is you last name?'
                    homecountry = {ask} 'What country do you come from?'

                    {call} welcome_message {with} title, name, homecountry, 105
                    ```

                    title = {ask} 'What is your title (mr, mrs, ms, dr, etc.)?'
                    name = {ask} 'What is you last name?'
                    homecountry = {ask} 'What country do you come from?'

                    {call} welcome_message {with} title, name, homecountry, 105
    if_command:
        name: '{if} & {else}'
        default_save_name: if_command
        description: Introducing the if command
        levels:
            5:
                story_text: |
                    ## If... else....
                    In level 5 there is something new, the `{if}`! With the `{if}` you can choose between two different options.
                    This code prints nice if you enter Hedy as a name, and boo! if you enter something else.
                    `{ask}` and `{print}` still work like they did in level 4.
                example_code: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'
                    ```
                story_text_2: |
                    Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:
                example_code_2: |
                    ```
                    name {is} {ask} 'what is your name?'
                    {if} name {is} Hedy {print} 'nice'
                    {else} {print} 'boo!'
                    ```
                story_text_3: |
                    ### Exercise
                    Try to create your own code with `{if}` and `{else}`. You can use the example code if you want.
                example_code_3: |
                    ```
                    answer {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ 'Great job!'
                    _ _ 'No 2 + 2 = 4'
                    ```
            8:
                story_text: |
                    ## If... Else...
                    You have learned to repeat a block of lines of code after a `{repeat}` command.
                    Now you can also use indentation to make blocks after a {if} or {else} command.
                    Check out the example code.

                    ### Exercise
                    Add an {else} command to the example code. Make a block of line using indentation. You do this by starting each line with 4 spaces.
                example_code: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name {is} Hedy
                        {print} 'Welcome Hedy'
                        {print} 'You can play on your computer!'
                    ```
            9:
                story_text: |
                    In this level you can also put an {if} command inside another {if} command.
                example_code: |
                    ```
                    continue = {ask} 'Do you want to continue?'
                    {if} continue = yes
                        sure = {ask} 'Are you sure?'
                        {if} sure {is} yes
                            {print} 'We will continue'
                        {else}
                            {print} 'You are not sure'
                    {else}
                        {print} 'You do not want to continue'
                    ```
    in_command:
        name: '{in}'
        default_save_name: in_command
        description: Introducing the in command
        levels:
            5:
                story_text: |
                    ## Lists
                    When we want to check if something is in a list, we can now use the `{in}` command.
                    This code prints pretty! if you choose green or yellow, and meh otherwise.
                example_code: |
                    ```
                    pretty_colors {is} green, yellow
                    favorite_color {is} {ask} 'What is your favorite color?'
                    {if} favorite_color {in} pretty_colors {print} 'pretty!'
                    {else} {print} 'meh'
                    ```
                story_text_2: |
                    ### Exercise
                    Finish the example code by filling in the blanks with commands that you've learned.
                    When you've finished the code, try to create a code of your own and use a question that you've thought of yourself.
                example_code_2: |
                    ```
                    animals is dog, cow, sheep
                    answer is ask 'What is your favorite animal?'
                    _ answer _ animals _ 'Mine too!'
                    _ _ 'My favorite animals are dogs, cows and sheep'
                    ```
    is_command:
        name: '{is}'
        default_save_name: is_command
        description: introducing is command
        levels:
            2:
                story_text: |
                    ## Variables
                    You can name a word with `{is}`. This is called a **variable**. In this example we made a variable called name and a variable called age. You can use the word name anywhere in your code and it will be replaced by Hedy, like this:
                example_code: |
                    ```
                    name {is} Hedy
                    age {is} 15
                    {print} name is age years old
                    ```
                story_text_2: |
                    ### Exercise
                    Time to make your own variables!
                    In the example code we made an example of the variable `favorite_animals`. In line 1 the variable is set, and in line 2 we haved used the variable in a print command.
                    Firstly, finish our example by filling in your favorite animal in the blanks. Then make at least 3 of these codes yourself. Pick a variable, and set the variable with the {is} command. Then use it with a {print} command, just like we did.
                example_code_2: |
                    ```
                    favorite_animals is _
                    {print} I like favorite_animals
                    ```
            6:
                story_text: |
                    We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:
                example_code: |
                    ```
                    name = Hedy
                    answer = 20 + 4
                    ```

                    answer = 20 + 4
            14:
                story_text: |
                    We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.
                    The `<` checks if the first number is smaller than the second, for example age `<` 12 checks if age is smaller than 12.
                    If you want to check if the first number is smaller or equal to the second, you can use `<=`, for example age `<=` 11.
                    The `>` checks if the first number is bigger than the second, for example points `>` 10 checks if points is larger than 10.
                    If you want to check if the first number is bigger or equal to the second, you can use `>=`, for example points `>=` 11.
                    You use these comparisons in an `{if}`, like this:
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```
                story_text_2: |
                    From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:
                example_code_2: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name == 'Hedy'
                        {print} 'You are cool!'
                    ```
                story_text_3: |
                    You can also compare if something is *not* equal to something else using `!=` like this:
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
                    ```

                    {if} age < 13
                        {print} 'You are younger than me!'
                    {else}
                        {print} 'You are older than me!'
    language:
        name: Language
        default_save_name: language
        description: Practice words in a foreign language
        levels:
            5:
                story_text: |
                    编写你自己的程序来练习新语言的词汇。
                example_code: |
                    ```
                    {print} 'Learn French!'
                    cat {is} {ask} '🐱'
                    {if} cat {is} chat {print} 'Terrific!'
                    {else} {print} 'No, cat is chat'
                    frog {is} {ask} '🐸'
                    {if} frog {is} grenouille {print} 'Super!'
                    {else} {print} 'No, frog is grenouille'
                    ```
            16:
                story_text: |
                    ### Exercise
                    Take a look at the example code. This is a program to practise French vocabulary. Now make your own program to practice your vocabulary in a new language.
                    If you don't know any other languages, you can use Google translate or you can use emojis and your native language.
                example_code: |
                    ```
                    french_words = ['bonjour', 'ordinateur', 'pomme de terre']
                    translation = ['hello', 'computer', 'potato']
                    score = 0
                    {for} i {in} {range} 1 {to} 3
                        answer = {ask} 'What does ' french_words[i] ' mean?'
                        correct = translation[i]
                        {if} answer == correct
                            {print} 'Correct!'
                            score = score + 1
                        {else}
                            {print} 'Wrong, ' french_words[i] ' means ' translation[i]
                    {print} 'You gave ' score ' correct answers.'
                    ```
    maths:
        name: maths
        default_save_name: maths
        description: Introducing maths
        levels:
            6:
                story_text: |
                    ## 1 + 1
                    In this level you learn something new: you can now also calculate.

                    The plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.

                    The times is a bit different, because there is no times symbol on your keyboard. Just search, there really isn't!
                    That is why we multiply with the asterisk above 8: `5 * 5`. Read that as "5 times 5" that helps you remember it best.
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 minus 5 is ' 5 - 5
                    {print} '5 times 5 is ' 5 * 5
                    ```
            12:
                story_text: |-
                    **Decimal numbers**
                    So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.
                example_code: |
                    ```
                    {print} 'Two and a half plus two and a half is...'
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |-
                    **Maths with words**
                    In this level you can also do addition with words like this:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```

                    {print} 2.5 + 2.5
    parrot:
        name: 鹦鹉
        default_save_name: 鹦鹉
        description: 创造属于你的在线宠物鹦鹉，它会学你说话！
        levels:
            1:
                story_text: |
                    创造属于你的在线宠物鹦鹉，它会学你说话！
                example_code: |
                    ```
                    {print} Im 海蒂 the parrot
                    {ask} whats your name?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### 练习
                    点击黄色按钮，将代码范例复制到你的输入屏幕。
                    让鹦鹉问一个不同的问题。填入例子中的空白处!
                    **额外的**你也可以让鹦鹉问多个问题。在你自己的代码下面再键入几行代码。
                example_code_2: |
                    ```
                    {print} 我是鹦鹉海蒂
                    {ask} _
                    {echo}
                    {echo}

                    {ask}你的名字是什么？
                    {echo}
                    {echo}
            2:
                story_text: |
                    创造属于你的在线宠物鹦鹉，它会学你说话！
                example_code: |
                    ```
                    {print} 我是鹦鹉海蒂
                    名字 {is} {ask} 你的名字叫什么？
                    {print} 名字
                    {sleep}
                    {print} 叽叽喳喳
                    {sleep}
                    {print} 名字
                    ```
                story_text_2: |
                    ### 练习
                    你可以使用变量来使鹦鹉说的不仅仅是你的名字。你能完成这段代码吗？
            3:
                story_text: "用`{add}`教你的鹦鹉一个新词。\n### 练习 \n你如何让你的鹦鹉说多个词？\n"
                example_code: |
                    ```
                    词汇表 {is} 叽叽喳喳, 海蒂
                    {print} 训练你的鹦鹉！
                    新词 {is} {ask} 你想让他们学哪个词？
                    {add} 新词 {to_list} 词汇表
                    {print} 🧒 新词，说 新词！
                    {print} 🦜 词汇表 {at} {random}
                    ```
            4:
                story_text: "在这一级中，我们必须在`{ask}` 和`{print}` 的命令中使用引号。\n### 练习 \n在空白处填上引号，完成代码。\n"
                example_code: |
                    ```
                    词汇表 {is} 叽叽喳喳, 海蒂
                    {print} _ 训练你的鹦鹉！ _
                    新词 {is} {ask} _ 你想让他们学哪个词？ _
                    {add} 新词 {to_list} 词汇表
                    {print} _ 🧒 Say _ 新词 _, 海蒂 _
                    {print} _ 🦜 _ 词汇表 {at} {random}
                    ```
            5:
                story_text: |
                    如果你的鹦鹉说出了正确的词，给它一些奖励！
                    通过填写4个缺失的命令来完成代码。
                example_code: |
                    ```
                    词汇表 {is} 叽叽喳喳, 海蒂
                    {print} '训练你的鹦鹉！'
                    新词 {is} {ask} '你想让他们学哪个词？'
                    {add} 新词 {to_list} 词汇表
                    说了的词 {is} 词汇表 {at} {random}
                    {print} '🧒 海蒂，说' 新词 '！'
                    {print} '🦜 ' 说了的词
                    _说了的词 {is} 新词 _ '🧒 干得好！海蒂！🍪'
                    _ _'🧒 不对，海蒂！说' 新词
                    ```
    piggybank:
        name: 小猪银行
        default_save_name: 小猪银行
        description: 数数你的零花钱吧！
        levels:
            12:
                story_text: |
                    在这个冒险活动中，你将学习如何制作一个电子版本的小猪银行。
                    完成代码来计算出你有多少钱，以及你需要存多久的钱才能买到你想要的东西！
                example_code: |
                    ```
                    {print} '数字存钱罐'
                    愿望 = {ask} '你想买什么？'
                    价格 = {ask} '这要花多少钱？'
                    存款 = {ask} '你已经存了多少钱？'
                    零花钱 = {ask} '你每周有多少零花钱？'
                    需要_再存 = 价格 - 存款
                    周数 = 需要_再存/ 零花钱
                    {print} '你可以在'周数'周内买一个'愿望'。'
                    ```
            14:
                story_text: |
                    ### Exercise
                    In this level you can let Hedy tell you if you have saved up enough money!
                    Finish this code by filling in the blanks!
                example_code: |
                    ```
                    _ calculate_budget with wish, money, allowance
                        to_save = wish - money
                        weeks = to_save / allowance
                        {if} wish _ money
                            {print} 'You need to save up some more!'
                            {print} 'Youll need ' weeks ' more weeks.'
                        {else}
                            {print} 'Great! You have enough'
                            {print} 'Lets go shopping!'

                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'

                    {call} calculate_budget with _, _, _
                    ```
    pressit:
        name: 按键
        default_save_name: 按下
        description: 试试把键盘键和命令联系起来吧！
        levels:
            5:
                story_text: |
                    In this level there is another new keyword: `{pressed}`!
                    With `{pressed}` you can use keys on your keyboard to control what lines are used.

                    ### Exercise
                    Look at the example and add one more line of code that reacts to a key press.
                example_code: |
                    ```
                    {print} '你想要好 (g) 还是坏 (b) 结局？'
                    {if} g {is} {pressed} {print} '从此以后，他们幸福地生活在一起了 ❤'
                    {else} {print} '王子被河马给吃了😭'
                    ```
                story_text_2: |
                    You can also link turtle commands to keys.

                    ### Exercise
                    Copy the lines a few times so you can create a larger drawing.
                example_code_2: |
                    ```
                    {if} y {is} {pressed} {forward} 15
                    {else} {turn} 90
                    ```
            7:
                story_text: |
                    现在你已经了解了`{repeat}` ，我们可以多次按下按键!你可以用它来使海龟向前走和转弯。

                    ### 练习
                    这个例子的代码只检查一次按键。改变代码，使你可以多次按下按键，并使用使用代码画出美丽的图案。
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
            9:
                story_text: "现在你知道了如何组合不同的语句，你可以用`{pressed}`创建一个触摸式工具。 \n\n### 练习\n完成这段代码。每一次都随机选择一个字母，你必须按下对应的按键。按对了可以得一分，按错了扣两分。\n"
                example_code: "```\n积分们 = 0\n字母们 = a, b, c, d, e\n{repeat} 10{times}\n    字母 = _ _ _ \n    {print} '按下字母' 字母\n    {if} 字母{is} {pressed}\n    _\n    _\n    _\n```\n"
    print_command:
        name: '{print}'
        default_save_name: print
        description: Introduction print command
        levels:
            1:
                story_text: |
                    ## The print command
                    You can print text to the screen using the `{print}` command.
                example_code: |
                    ```
                    {print} Hi there, programmer!
                    {print} Welcome to Hedy!
                    ```
                story_text_2: |
                    ### Exercise
                    In Hedy you will find exercises in every adventure. An exercise allows you to practise the new commands and concepts, and lets you give your own twist to the example codes.
                    In this exercise you will see a pink blank space. You have to fill something in the place of the blank space before the code can be ran.

                    Fill in the `{print}` command in the blank space and then add five more lines of code. Each line has to start with a `{print}` command.
                    Have fun!
                example_code_2: |
                    ```
                    _ Hello!
                    ```
            18:
                story_text: |-
                    We arrived at real Python code! That means we need to use parentheses with `{print}` and `{range}` from now on.
                    It also means you can use Hedy code from this level in any Python environment as long as you use the English commands. If you haven't until now, you can switch the toggle in the commands menu to do so.
                example_code: |
                    ```
                    {print}('Hello!')
                    {for} i {in} {range}(1, 10):
                        {print}('This is line ', i)
                    ```
                story_text_2: If you want to print more than one item, you need to separate them by commas.
                example_code_2: |
                    ```
                    temperature = 25
                    {print}('It is ', temperature, ' degrees outside')
                    ```

                    {print}('My name is ', name)
    quizmaster:
        name: 测验人员
        default_save_name: 测验人员
        description: 制定专属于你自己的测验！
        levels:
            14:
                story_text: |
                    ### Exercise
                    In this adventure you can make your own quiz! Fill in the blanks, add more questions and enjoy your own quiz!
                    You can make a quiz about anything you like: your hobby, your favorite animal, your favorite book or anything at all!
                example_code: |
                    ```
                    {print} 'Make your own quiz'
                    points_a = 0
                    points_b = 0
                    {print} 'Question'
                    {print} 'Answer option A'
                    {print} 'Answer option B'
                    answer = {ask} 'Which answer?'
                    {if} answer == 'A'
                        points_a = points_a + 1
                    {if} answer == 'B'
                        points_b = points_b + 1
                    {print} 'End of the quiz!'
                    {print} 'Lets see the results!'
                    {if} points_a > points_b
                        {print} 'You belong to the A club'
                    {if} points_b > points_a
                        {print} 'You belong to the B club'
                    ```
    quotation_marks:
        name: '''quotation marks'''
        default_save_name: quotation_marks
        description: Introduction quotation marks
        levels:
            4:
                story_text: |
                    ## 'Quotation marks'
                    In level 4 `{ask}` and `{print}` have changed.
                    You must put text that you want to print between quotation marks.
                    This is useful, because now you can print all the words you want. Also the words you used to store something with `{is}`.
                    Most programming languages also use quotation marks when printing, so we are also getting a step closer to real programming!
                example_code: |
                    ```
                    {print} 'You need to use quotation marks from now on!'
                    answer {is} {ask} 'What do we need to use from now on?'
                    {print} 'We need to use ' answer
                    ```
                story_text_2: |
                    ## Contractions
                    Important! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.
                    Make sure to remove those apostrophes and change the spelling to I am or What is.
                    Check out the example code to see the wrong way of using apostrophes.
                example_code_2: |
                    ```
                    _ This is the wrong way of using apostrophes _
                    {print} 'I'm babysitting my sister's kids'
                    {print} 'What's more fun than that?'
                    ```
            12:
                story_text: |
                    **All texts need to be in quotation marks**
                    For this level on you will also have to use quotation marks when storing a text with `=`:
                example_code: |
                    ```
                    name = 'Hedy the Robot'
                    {print} 'Hello ' name
                    ```
                story_text_2: |
                    **All items in lists need quotation marks too**
                    Lists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.
                    This allows you to save two words as 1 item on the list, for example 'Iron Man'.
                example_code_2: |
                    ```
                    superheroes = 'Spiderman', 'Batman', 'Iron Man'
                    {print} superheroes {at} {random}
                    ```
                story_text_3: |
                    **All text after `{if}` comparisons need quotation marks too**
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy the Robot'
                        {print} 'Hi there!'
                    ```
                story_text_4: |
                    **Numbers don't need quotation marks**
                    For numbers, you do not use quotation marks in the `=`:
                example_code_4: |
                    ```
                    score = 25
                    {print} 'You got ' score
                    ```
    random_command:
        name: '{random}'
        default_save_name: random_command
        description: introducing at random command
        levels:
            3:
                story_text: |
                    ## At random
                    In this level you can make a list using the `{is}` command. You can let the computer choose a random item from that list. You do that with `{at} {random}`.
                example_code: |
                    ```
                    animals {is} dogs, cats, kangaroos
                    {print} animals {at} {random}
                    ```
                story_text_2: |
                    You can use the `{at} {random}` command in a sentence as well.
                example_code_2: |
                    ```
                    food {is} sandwich, slice of pizza, salad, burrito
                    {print} I am going to have a food {at} {random} for lunch.
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the `{at} {random}` command by making your own gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!
                    Can you do it? We have already put the first lines into the example code.
                example_code_3: |
                    ```
                    {print} The big gameshow!
                    {print} There are 3 suitcases in front of you...
                    chosen {is} {ask} Which suitcase do you choose?
                    prices {is} _
                    _
                    ```
            16:
                story_text: |-
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    We use square brackets to point out a place in a list. For example: `friends[1]` is the first name on the list of friends, as you can see in the first part of the example code. The second part of the example code shows you that we can also match 2 lists using the variable i.
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    {print} friends[1] ' is the first friend on the list.'
                    {print} friends[2] ' is the second friend on the list.'
                    {print} friends[3] ' is the third friend on the list.'
                    #now we will match 2 lists using the variable i
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} friends[i] 's lucky number is ' lucky_numbers[i]
                    ```
                story_text_2: |-
                    Now that you've learned to use the brackets in lists, you can also start using the {at} {random} command in the Python way!
                    You simply type the name of your list with `[random]` behind it!
                example_code_2: |-
                    ```
                    fruit = ['apple', 'banana', 'cherry']
                    {print} fruit[random]
                    ```
    repeat_command:
        name: '{repeat}'
        default_save_name: repeat_command
        description: repeat command
        levels:
            7:
                story_text: |
                    ## Repeat! Repeat! Repeat!
                    Level 7 adds the `{repeat}` command.  `{repeat}` can be used to execute one line of code multiple times. Like this:

                    ### Exercise
                    Play around with the repeat command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy is fun!'
                    ```
            8:
                story_text: |
                    ### Repeat commands and indentation
                    In this level you can repeat multiple lines of code with only 1 repeat command.
                    You do this by making a block of lines that you want to repeat.
                    The lines in this block will need **indentation** .
                    That means putting four spaces at the beginning of each line. You will also have to indent when you just want to create a block of one line.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Hello everyone'
                        {print} 'This is all repeated 5 times'
                    ```
            9:
                story_text: |
                    In this level you can not only use multiple lines with `{if}` and `{repeat}`, but you can also put them together!
                    In the example you see an `{if}` command within a `{repeat}` command. It is also allowed the other way around, and an `{if}` is also allowed in an `{if}` and a `{repeat}` in a `{repeat}`.
                    Give it a try!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        food = {ask} 'What do you want?'
                        {if} food {is} pizza
                            {print} 'nice!'
                        {else}
                            {print} 'pizza is better'
                    ```
    repeat_command_2:
        name: '{repeat} 2'
        default_save_name: repeat_command_2
        description: repeat command 2
        levels:
            7:
                story_text: |
                    ## Repeat with other commands and with variables
                    You have practiced the `{repeat}` command in combination with the `{print}` command now, but did you know you could also use other commands with `{repeat}` ?
                    In this example code you can see that `{repeat}` can also be used with an `{ask}`, `{if}` or `{else}` command.
                example_code: |
                    ```
                    {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                    {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                    {else} {repeat} 3 {times} {print} 'You have learned something new!'
                    ```
                story_text_2: |
                    Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.
                    Then, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.
                example_code_2: |
                    ```
                    {print} 'Yay! It is your birthday!'
                    age = {ask} 'How old are you now?'
                    {repeat} age {times} {print} 'Hip Hip Hurray!'
                    ```
            8:
                story_text: |
                    ### In the block or not?
                    In this level you have to think carefully which lines of code should be in the block and which shouldn't.
                    For example: If you want to sing the song *the muffin man*. You only want the line with 'the muffin man' to be repeated twice.
                    This means the last line shouldn't start with indentation as it doesn't belong to the block.
                    If you do start the last line with indentation the song will turn out wrong.

                    ### Exercise
                    Each line in the example code starts with a blank. Remove the blanks and try to figure out which line need indentation and which don't to make the muffin man song.
                example_code: |
                    ```
                    _ {print} 'Do you know the muffin man?'
                    _ {repeat} 2 {times}
                    _ {print} 'The muffin man'
                    _ {print} 'Do you know the muffin man, who lives on Drury Lane?'
                    ```
    restaurant:
        name: 餐厅
        default_save_name: 餐厅
        description: 创建你自己的虚拟餐厅
        levels:
            1:
                story_text: |
                    在第一关中您可以编写一个你自己的虚拟餐厅并接受客人的点单。
                example_code: |
                    ```
                    {print} 欢迎来到海蒂餐厅 🍟
                    _ 你想点什么？
                    {echo} 你想点
                    {print} 谢谢你的点单！
                    {print} 已经在做了！
                    ```
                story_text_2: |
                    ### 练习
                    单击黄色按钮，将示例代码复制到输入框。
                    首先，在空白处填写正确的命令，使代码正常工作。
                    然后在餐厅程序中至少再添加 4 行代码。
                    询问顾客他们想喝什么，并询问他们是否愿意用现金或信用卡支付。
                    最后，想出一个与顾客说再见的好方法。
            2:
                story_text: |
                    在第 2 关你可以使用变量来扩展你的餐厅。在第 1 关 海蒂只能 {echo} 订单一次，并记住最后一个点的东西。
                    现在你可以使用变量来让海蒂同时记住食物和饮料！
                example_code: |
                    ```
                    {print} 欢迎来到海蒂餐厅！
                    {print} 今天我们提供披萨和千层面。
                    食物 {is} {ask} 您想吃什么？
                    {print} 选得好！这是我最爱的食物！
                    配料 {is} {ask} 您想要加肉的还是蔬菜的？
                    {print} 加了 配料 的 食物 已经在做了！
                    ```
                story_text_2: |
                    ### 练习
                    将你自己的餐厅程序从上一级复制到下面的输入框。
                    通过替换“{ask}”和“{echo}”命令并使用变量来修复代码，就像您在此级中学到的那样。

                    现在你的程序又可以运行了，是时候添加更多内容了。
                    请看代码范例的最后一行：“{print} 带有配料的食物正在路上！
                    在这一行中，2 个变量被用于创建订单概要。
                    现在让你的顾客添加食物和饮料的订单概要。

                    **另外** 现在你已经学会了如何使用变量，你可以根据需要在一行中使用任意数量的变量。你能在你的代码中添加更多变量，比如堂食或外卖，现金或银行卡支付，要或不要吸管等？
            3:
                story_text: |
                    在选择晚饭吃什么时选择困难了吗？你可以让海蒂帮你选！
                    只要将你最喜欢（或者最不喜欢）的食物加入列表，海蒂就可以随机帮你选择晚饭。
                    你也可以让海蒂帮你选择晚饭的价格，来获得更多乐趣！你会得到什么？
                example_code: |
                    ```
                    套餐 {is} 意大利面, 抱子甘蓝, 汉堡包
                    {print} 今晚有 套餐 {at} {random} ！
                    价格 {is} 1 欧元、10 欧元、100 欧元
                    {print} 餐费是 价格 {at} {random} 。
                    ```
                story_text_2: "### 练习\n现在制作你自己版本的随机菜单。\n自己制作一份包含前菜、主菜、甜点、饮料和价格的菜单。 \n然后使用 `{print}` 和 `{at} {random}` 命令告诉顾客今晚菜单的内容。\n"
                example_code_2: |
                    ```
                    {print}欢迎来到你自己的随机餐厅！
                    前菜 {is} _
                    主菜 {is} _
                    甜点 {is} _
                    饮料 {is} _
                    价格 {is} _
                    _
                    ```
            4:
                story_text: |
                    在此级别中，使用 `{print}` 或 `{ask}` 命令时必须使用引号。

                    ### 练习
                    在此代码中添加引号以使其正常工作！请注意：变量不应用引号引起来。
                example_code: |
                    ```
                    _ 在这段代码中添加引号 _
                    {print} '欢迎来到海蒂餐厅！'
                    {print} '今天我们提供披萨和千层面。'
                    食物 {is} {ask} '您想吃什么？'
                    {print} '选得好！这是我最爱的食物！'
                    配料 {is} {ask} '您想要加肉的还是蔬菜的？'
                    {print} '加了' 配料 '的' 食物 '已经在做了！'
                    饮料 {is} {ask} '您想喝点什么？'
                    {print} '谢谢您的点单。'
                    {print} '您的' 食物 '和' 饮料 '马上就来！'
                    ```
            5:
                story_text: |
                    在这一级，你可以用`{if}`命令向顾客`{ask}`，并对其回答做出不同的回应。

                    在下面的例子里，你能看到你可以`{ask}`顾客`{if}`想让你介绍今天的特价菜，海蒂会根据回答做出相应的回应。
                example_code: |
                    ```
                    {print} '欢迎来到海蒂餐厅！'
                    推荐 {is} {ask} '您想了解我们今天的特色菜吗？'
                    {if} 特色菜 {is} 好的 {print} '今天的特色菜是霹雳辣椒烤鸡' {else} {print} '没关系.'
                    食物 {is} {ask} '您想吃什么？'
                    {print} '一份' 食物 '，马上就来！'
                    饮料 {is} {ask} '您想配点什么喝的？'
                    {if} 饮料 {is} 可乐 {print} '对不起，可乐卖完了！' {else} {print} '选得好！'
                    别的 {is} {ask} '您还想要别的吗？'
                    {print} '我复述一下您的点单'
                    {print} '一份' 食物
                    {if} 饮料 {is} 可乐 {print} '以及……' {else} {print} '一杯' 饮料
                    {if} 别的 {is} 不用 {print} '就是这些' {else} {print} '一份' 别的
                    {print} '谢谢您的点单。祝您用餐愉快！'
                    ```
            6:
                story_text: |
                    在这一关，你可以用数学计算客人的订单总价，这会让你的虚拟餐厅更真实。
                example_code: |
                    你可以写一段简单的餐厅代码，像这样：
                    ```
                    {print} '欢迎来到海蒂餐厅'
                    {print} '这是我们的菜单：'
                    {print} '我们的主菜有披萨、千层面、意面'
                    主菜 = {ask} '您想要哪道主菜？'
                    价格 = 0
                    {if} 主菜 {is} 披萨 价格 = 10
                    {if} 主菜 {is} 千层面 价格 = 12
                    {if} 主菜 {is} 意面 价格 = 8
                    {print} '您点了' 主菜
                    {print} '请付' 价格 '元'
                    {print} '谢谢，祝您用餐愉快！'
                    ```
            7:
                story_text: |
                    在本关中，你已经学会了如何使用`{repeat}`命令来重复一行代码一定的次数。
                    你可以在你的餐厅中使用这个命令来 `{ask}` 多人想吃什么。

                    ### 练习
                    你能完成这段代码吗？有多少人海蒂就需要重复这个问题多少次。因此，如果有5个人，这个问题需要问5次。
                    **(另外)**用更多的问题来扩展你的代码，例如和饮料或酱汁有关的。
                example_code: |
                    ```
                    {print} '欢迎来到海蒂餐厅！'
                    人数 = {ask} '今天来了多少人？'
                    ```
            8:
                story_text: |
                    在这一关，你可以通过重复多行代码，让你的虚拟餐厅更加细化。像这样：
                example_code: |
                    ```
                    {print} '欢迎来到海蒂餐厅！'
                    人数 = {ask} '今天来了多少人？'
                    {print} '好！'
                    {repeat} 人数 {times}
                        食物 = {ask} '您想点什么？'
                        {print} 食物
                    {print} '谢谢您的点单！'
                    {print} '祝您用餐愉快！'
                    ```
                story_text_2: |
                    ### 练习
                    这个代码可以用菜单上的更多项目来扩展，例如，提供饮料，和、或多道菜或甜点。至少增加一个项目。
                    **(另外)** 添加更多的项目，只要你喜欢，有多少选择都可以!
            9:
                story_text: "在这一级，你可以用嵌套让你的餐厅更真实更有趣！\n\n### 练习 \n范例代码中删除了缩进。 \n你能算出每行需要多少缩进才能使代码正常工作吗？ \n如果顾客点了披萨，海蒂不应该问顾客想要哪种蘸酱。 \n\n**（另外）** 餐厅不会准备所有的蘸酱。列出一个可用的蘸酱的清单，并在每个订单中回复是否有存货。 <br> \n**（另外）** 披萨有配料。询问顾客他们想要哪一种配料。<br>   \n**（另外）** 顾客想喝一杯饮料吗？也问问他们！ <br>                    \n"
                example_code: |
                    ```
                    {print} '欢迎来到海蒂餐厅！'
                    人数 = {ask} '今天来了多少人？'
                    {print} '好！'
                    价格 = 0
                    {repeat} 人数 {times}
                        食物 = {ask} '您想点什么？'
                        {print} 食物
                        {if} 食物 {is} 薯条
                            价格 = 价格 + 3
                            蘸酱= {ask} '您的薯条要配什么酱？'
                            {if} 蘸酱 {is} 不要
                                {print} '不要酱'
                            {else}
                                价格 = 价格 + 1
                                {print} '配' 蘸酱
                        {if} 食物 {is} 披萨
                            价格 = 价格 + 4
                    {print} '一共' 价格 '元'
                    {print} '祝您用餐愉快！'
                    ```
            10:
                story_text: |
                    在本级别中，你将学习如何轻松地询问不同课程的订单。

                    ### 练习1
                    完成代码，在空白处加一个`{ask}`，这样顾客就会被问到每道菜想吃什么。
                example_code: |
                    ```
                    全餐 = 前菜, 主菜, 甜点
                    {for} 餐品 {in} 全餐
                        {print} '你的上菜顺序是 ' 餐品 '?'
                        _
                        _
                    ```
                story_text_2: |
                    ### 练习
                    当然，你也可以帮多个人点单！
                    您能否在每一行之前添加正确数量的缩进以使代码正常工作？
                    提示：有些行根本不需要任何缩进。
                example_code_2: |
                    ```
                    全餐 = 前菜, 主菜, 甜点
                    客人们 = 丁满, 彭彭
                    {for} 客人 {in} 客人们
                        {for} 餐品 {in} 全餐
                            食物 = {ask} 客人 '，你想要吃什么' 餐品 '？'
                            {print} 客人 '点了' 食物 '作为' 餐品
                    ```
            11:
                story_text: "我们可以用`{for}`和`{range}`来按顺序打印多个客人的订单。\n\n### 练习 \n完成餐厅的代码，这样就可以按顺序询问多个客人的订单了。每次都按顺序打印订单：'订单1'，'订单2'，等等。 \n你不确定如何去做吗？请看一下你的第8级代码吧。\n\n **（另外）**在第9级中，餐厅也使用了价格。你也可以在这里添加价格！\n"
                example_code: |
                    ```
                    {print} '欢迎来到海蒂餐厅！'
                    人数 = {ask} '你想为多少人点单？'
                    {print} '所以你想为'人数'人下单。'
                    {print} '我们走吧！'
                    ```
            12:
                story_text: |
                    从这一层开始，你可以使用小数点后的数字来使你的菜单更加真实。

                    ### 练习
                    你能构思出一个代码来给你的朋友和家人提供15%的折扣吗？
                example_code: |
                    ```
                    价格 = 0
                    食物 = {ask} '您要点什么？'
                    饮料 = {ask} '您想喝什么？'
                    {if} 食物 {is} '汉堡包'
                        价格 = 价格 + 6.50
                    {if} 食物 {is} '披萨'
                        价格 = 价格 + 5.75
                    {if} 饮料 {is} '水'
                        价格 = 价格 + 1.20
                    {if} 饮料 {is} '苏打水'
                        价格 = 价格 + 2.35
                    {print} '请付' 价格 '元'
                    ```
            13:
                story_text: "在这一级，我们可以用新的命令来升级我们的餐厅。\n我们用`{and}`来判断 {if} 命令中的两个条件是否同时成立。\n \n ### 练习 \n在右边的空白处填写`{and}`和`{or}` 。\n"
                example_code: "```\n价格 = 10\n食物 = {ask} '您想吃什么？'\n饮料们 = {ask} '您想喝什么？'\n{if}食物 {is} '三明治'_ 饮料们 {is} '果汁'\n          {print} '这是我们的优惠套餐'\n          价格 = 价格 - 3\n{if}饮料们{is} '果汁' _饮料们{is} '矿泉水'。 \n          {print} '你的选择真健康！\n {print} '一共' 价格 '元'\n```\n"
            15:
                story_text: |
                    通过`{while}`命令，你可以确保你的客人能不断追加点单，直到点完。
                    ### Exercise
                    Correctly add the `{while}` command to this code.
                example_code: |
                    ```
                    {print} '欢迎来到麦海蒂快餐店'
                    还有 = '是'
                    _
                        点单 = {ask} '您要点什么？'
                        {print} 点单
                        还有 = {ask} '您还要点别的吗？'
                    {print} '谢谢惠顾！'
                    ```
    rock:
        name: 石头剪刀布
        default_save_name: 石头
        description: 制作你自己的石头剪刀布游戏
        levels:
            1:
                story_text: |
                    在第1级，你可以开始一个石头剪刀布游戏。

                    你可以用`{ask}`做出选择，然后用`{echo}`复述这个选择。
                example_code: |
                    ```
                    {print} 你选哪一个？
                    {ask} 从石头、剪刀和布中选一个
                    {echo} 所以你选的是：
                    ```
                story_text_2: |
                    ### 挑战
                    你可以不使用文字，而是使用表情符号。✊✋✌
                    你能用表情符号创造一个代码吗？
                example_code_2: |
                    ```
                    {print} 你选择什么？
                    {ask} 从_中选择
                    {echo} 所以你的选择是：
                    ```
            2:
                story_text: |
                    在这一级，你可以练习使用变量，这样你就能在下一级中完成石头剪刀布游戏！
                example_code: |
                    ```
                    _ {is} {ask} 石头、剪刀还是布？
                    {print}我选择 _
                    ```
            3:
                story_text: |
                    在这一级，我们可以输入列表并从列表中选择。
                    你要先用`{is}`制作一个列表。然后你可以用`{at} {random}`让电脑从列表里选一个。
                    例如，你可以让电脑选择石头、剪刀或布。
                example_code: |
                    ```
                    选择 {is} 石头，剪刀，布
                    {print} 选择 {at} {random}
                    ```
                story_text_2: |
                    复制示例代码并填入空白处，在这个游戏中增加一个额外的玩家。

                    **另外**现在的玩家只被称为玩家1和玩家2。你能不能添加询问命令（当然要有变量）来询问玩家的名字？
                    这样你就可以创建这样的输出，例如：李华选......纸
                example_code_2: |
                    ```
                    选择 {is} 石头、布、剪子
                    {print} 玩家1选择...在选项中 {at} {random}
                    {print} 玩家2 _
                    ```
            4:
                story_text: |
                    在这一级，我们可以进一步对石头剪刀布游戏编程。但是如果你想要添加文字，你同样需要使用引号。
                    ### 练习
                    复制上一级的代码并在每个`{print}` 或`{ask}` 命令后使用引号使其正常工作。
            5:
                story_text: |
                    在这一级，我们可以判定谁赢了。
                    为此你需要使用新的`{if}`命令。

                    将你的选择保存下来，并把电脑的选择也保存下来。
                    然后你用`{if}`来判断他们是否相同。
                    你能完成这段代码吗？
                example_code: |
                    ```
                    选项 {is} 石头，剪刀，布
                    电脑选择 {is} _
                    你选择 {is} {ask} 你选什么？
                    {print} '你选了' _
                    {print} '电脑选了' _
                    {if} _ {is} _ {print} '平局！' {else} {print} '不是平局'
                    ```

                    在空白处填上正确的代码，来判断{if}这是平局。
            9:
                story_text: |
                    在这一级，你可以用嵌套的`{if}`命令来编程石头剪刀布。你能完成这段代码吗？

                     ### 练习
                    你能完成代码吗？程序必须能判断赢家以及对应的组合是什么。

                     **（另外）** 想玩多玩几个游戏吗？拓展代码，以便您可以多玩几个回合。您甚至可以使用 `{ask}` 询问用户他们想玩多少回合。
                example_code: |
                    ```
                    选项 = 石头，剪刀，布
                    你选择 = {ask} '你选择什么？'
                    {print} '你选择了' 你选择
                    计算机选择 = 选项 {at} {random}
                    {print} '计算机选择了' 计算机选择
                    {if} 计算机选择 {is} 你选择
                        {print} '平手'
                    {if} 计算机选择 {is} 石头
                        {if} 你选择 {is} 布
                            {print} '你赢了！'
                        {if} 你选择 {is} 剪刀
                            {print} '你输了！'
                    # 完成这段代码
                    ```
            10:
                story_text: |
                    你觉得自己太懒了，不想自己玩游戏？让海蒂帮你玩吧!
                    你只需要填上玩家的名字，他们就会得到一个随机的选择。

                    ### 练习1
                    完成程序，填上名字的清单。

                    ### 练习2
                    增加一个电脑玩家，与每个玩家一起选择。

                    **(另外)**回到你的代码中，决定每一轮谁赢：计算机或被点名的人。
                example_code: |
                    ```
                    选项 = 石头，剪刀，布
                    玩家们 =  _
                    {for} 玩家 {in} 玩家们
                         {print} 玩家 '选择' 选项 {at} {random}
                    ```
            13:
                story_text: |
                    你可以用`{and}`命令缩短你的石头剪刀布代码！阅读下面的示例代码，并尝试完成它。
                example_code: |
                    ```
                    选项 = '石头', '剪刀', '布'
                    你的_选择 = {ask} '你选什么？'
                    电脑_选择= 选项 {at} {random}
                    {print} '你选了' 你的_选择
                    {print} '电脑选了' 电脑_选择
                    {if} 电脑_选择 {is} 你的_选择
                        {print} '平局'
                    {if} 电脑_选择 {is} '石头' {and} 你的_选择 {is} '布'
                        {print} '你赢了！'
                    {if} 电脑_选择 {is} '石头' {and} 你的_选择 {is} '剪刀'
                        {print} '电脑赢了！'
                    _
                    ```
            15:
                story_text: |
                    玩到你打败电脑为止！但首先，你要补全示例代码……
                example_code: |
                    ```
                    赢 = '否'
                    选项 = '石头', '剪刀', '布'
                    {while} 赢 == '否'
                        你的_选择 = {ask} '你选择了什么？'
                        计算机_选择 = 选项 {at} {random}
                        {print} '你选择了 ' 你的_选择
                        {print} '计算机选择了' 计算机_选择
                        {if} 计算机_选择 == 你的_选择
                            {print} '平手！'
                        {if} 计算机_选择 == '石头' {and} 你的_选择 == '剪刀'
                            {print} '你输了！'
                        {if} 计算机_选择 == '石头' {and} 你的_选择 == '布'
                            {print} '你赢了！'
                            赢 = '是'
                    _
                    ```
    rock_2:
        name: Rock, paper, scissors 2
        default_save_name: rock_2
        description: Part 2 of rock, paper, scissors
        levels:
            2:
                story_text: |
                    Now that you have learned how to use the `{ask} command, you can make your rock, paper, scissors code interavtive too!

                    ### Exercise
                    Make the rock, paper, scissors code interactive by adding the `{ask}` command and a question to your rock, paper, scissors code.
                example_code: |
                    ```
                    choice is _
                    {print} I choose choice
                    ```
    secret:
        name: 超级间谍
        default_save_name: 超级间谍
        description: 编写你自己的间谍代码
        levels:
            12:
                story_text: |
                    在这个冒险活动中，你可以编写出你自己的超级间谍代码。编码一个只有合适的特工才能破译的信息。
                    如果敌人试图破解代码，他们会得到一些虚假的信息来浪费他们的时间。

                    ### 练习
                    为你的超级间谍编写你自己的秘密代码。你能让它由更多的变量组成吗？
                example_code: |
                    ```
                    名字 = {ask} '你的名字是什么？'
                    {if} 名字 {is} '特工007'
                        a = '去机场'
                    {else}
                        a = '去火车站'
                    密码 = {ask} '密码是什么？'
                    {if} 密码 {is} 'TOPSECRET'
                        b = '明天02.00'
                    {else}
                        b = '今天10.00'
                    {print} a + b
                    ```
            13:
                story_text: |
                    你能在空白处填上正确的命令吗？注意：超级间谍必须同时回答正确两个问题，然后才能获取机密情报!
                example_code: |
                    ```
                    名字 = {ask} '你的名字是什么？
                    密码 = {ask} '你的密码是什么？'
                    {if} 名字 {is} '特工007' _密码{is} 'TOPSECRET'
                        {print} '02.00去机场'
                    {else}
                        {print} '10.00去火车站'
                    ```
    sleep_command:
        name: '{sleep}'
        default_save_name: sleep_command
        description: introducing sleep command
        levels:
            2:
                story_text: |
                    ## The sleep command
                    Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.
                example_code: |
                    ```
                    {print} My favorite colour is...
                    {sleep} 2
                    {print} green!
                    ```
    songs:
        name: 唱支歌！
        default_save_name: 歌
        description: 打印一首歌
        levels:
            6:
                story_text: "歌曲中通常包含大量重复。有时重复是基于计数的。\n比如那首著名的歌曲“啤酒瓶”中。你可以用一点数学知识来为这首歌编程。 \n \n提示：使用朗读功能，让海蒂把歌曲唱给你听! \n\n### 练习 \n现在你可以通过复制第2至第7行的内容来重复这几行歌词，你想要重复几次就可以重复几次。\n"
                example_code: |
                    ```
                    歌词 = 99
                    {print} 歌词 '瓶啤酒在墙上'
                    {print} 歌词 '瓶啤酒'
                    {print} '取下一瓶传下去'
                    歌词 = 歌词 - 1
                    {print} 歌词 '瓶啤酒在墙上'
                    {sleep}
                    ```
                story_text_2: |
                    这首儿童歌曲从5只小猴子倒数到1只猴子。
                    如果你复制第2-7行并粘贴在代码下面，你就可以唱出整首歌了！
                example_code_2: |
                    ```
                    数字 = 6
                    数字 = 数字 - 1
                    {print} 数字 ' 小猴子在床上跳来跳去'
                    {print} '有一只掉下来，撞到了头'
                    {print} '妈妈叫来了医生，医生说'
                    {print} '不能再有猴子在床上跳了！'
                    {sleep}
                    ```
            7:
                story_text: "歌曲经常包含大量的重复。例如...小鲨鱼!如果你唱这首歌，其实你就是一直在唱同一句歌词：\n\n小鲨鱼图图图杜杜 <br>\n 小鲨鱼图图图杜杜 <br>\n小鲨鱼图图图杜杜 <br>\n小鲨鱼\n\n### 练习 \n你可以用`{repeat}` 来打印歌曲《小鲨鱼》？ 完成代码，替换空白处？ \n**另外* 在《小鲨鱼》之后，你当然还可以为其他歌曲编程。很多歌曲都有重复的句子！你能想出更多的歌曲吗？ \n你能再想出一首歌曲并打印出来吗？\n"
                example_code: |
                    ```
                    {repeat} _ _{print} '小鲨鱼图图图杜杜'
                    {print} '小鲨鱼'
                    ```
            8:
                story_text: |
                    在上一级中，你已经为歌曲 "啤酒瓶"编写了程序。但由于没有`{repeat}` ，你不得不多次复制一段歌词。
                    在这一级中，你只需要简单地增加一行代码，就能重复这首歌99次！

                    ### 练习
                    在空白处添加正确的命令，并正确缩进代码。
                example_code: |
                    ```
                    歌词 = 99
                    _ 99 {times}
                        {print} 歌词 '瓶啤酒在墙上'
                        {print} 歌词 '瓶啤酒'
                        {print} '取下一瓶传下去'
                        歌词 = 歌词 - 1
                        {print} 歌词 '瓶啤酒在墙上'
                    ```
            10:
                story_text: |
                    使用`{for}`，你只需6行即可打印整首小鲨鱼的歌曲（包括家庭中的所有其他鲨鱼）！

                    ### 练习 1
                    你能使用 `{for}` 命令使小鲨鱼这首歌的代码更简短吗？请完成代码范例。
                example_code: "```\n家庭成员 = 宝宝, 妈妈, 爸爸, 奶奶, 爷爷\n_ _ _ _ \n  {print} _\n```\n"
                story_text_2: |
                    ### 练习2
                    打印歌曲《5只小猴子们在床上跳来跳去》。如果你不记得了，就查查文本。

                    **（额外的）**打印歌曲《老麦当劳》，并确保所有的动物都发出不同的声音，使用`{if}`条件语句 。
                example_code_2: |
                    ```
                    猴子们 = 5, 4, 3, 2, 1
                    ```
            11:
                story_text: |
                    在这一级，你可以同时使用`{for}` 和`{range}`命令 ，做一些使用计数的歌曲，如5只小猴子们。

                    ### 练习1
                    填空使代码生效！如果你不记得歌曲的内容，可以自己去查。

                    ### 练习2
                    这首歌的最后一行与其他的不同。将这一行打印在`{for}`语句里面 ，并使用`{if}`命令使其正确工作。
                example_code: |
                    ```
                    猴子们 _ _ 5 _ 1
                        {print} 猴子们 ‘小猴子们在床上跳来跳去’
                        _
                    ```
            12:
                story_text: "在这首歌中，我们可以使编程变得更加容易 '如果你很快乐，你意识到了，拍拍你的手'。因为我们可以把所有的动作放在一个变量中，看看吧。\n \n### 练习 \n你能在每一行中加入适量的缩进，使歌曲正确播放吗？ \n注意：不是所有的行都需要缩进\n"
                example_code: |
                    ```
                    _一组动作 = '拍拍手', '跺跺脚', '喊万岁!'
                    _ {for} 动作 {in} 一组动作
                    _ {for} i {in} {range} 1 {to} 2
                    _ {print} '如果你很高兴，你意识到它'
                    _ {print}动作
                    _ {print} '如果你很高兴，你意识到它，你真的想表现出来'
                    _ {print} '如果你快乐并意识到它'
                    _ {print} 动作
                    ```
            13:
                story_text: |
                    In the previous adventure you have learned how to use an argument in a function, but did you know that you could combine them with {ask} commands as well?
                    In this example we have changed the 'My Bonnie' program and made it interactive. You are now asked where Bonnie is.
                example_code: |
                    ```
                    {define} song {with} place
                        {print} 'My Bonnie is ' place

                    chosen_place = {ask} 'Where do you want Bonnie to be?'
                    synonym = {ask} 'What is another word for that?'

                    {call} song {with} chosen_place
                    {call} song {with} synonym
                    {call} song {with} chosen_place
                    ```
            16:
                story_text: |
                    在这一级中，你可以更快速地编排一首像《老麦当劳》这样的歌曲。你可以把正确的动物和正确的声音联系起来，只要把它们放在列表的同一位置。
                    《醉酒的水手》在这一级别也能很快制作完成。你只需要8行就可以完成整首歌，看看吧!
                example_code: |
                    ```
                    动物们 = ['猪', '狗', '牛']
                    声音们 = ['哼哼', '汪汪', '哞']
                    {for} i {in} {range} 1 {to} 3
                        动物 = _
                        声音 = _
                        {print} '老麦当劳有一个农场'
                        {print} '咦啊咦啊欧！'
                        {print} '在那个农场里，他有一个' 动物
                        {print} '咦啊咦啊欧！'
                        {print} '这里有一个'声音'的声音'
                        {print} '和一个'声音'的声音那里'
                        {print} '这里有一个'声音
                        {print} '那里有一个'声音
                        {print} '到处都是一个'声音 声音
                    ```

                    ```
                    句子们 = ['我们该如何对待醉酒的水手', '用生锈的剃须刀刮光他的胡子', '把他放在大船上直到他清醒']
                    {for} 句子 {in} 句子们
                        {for} i {in} {range} 1 {to} 3
                            {print} 句子
                        {print} '一大清早'
                        {for} i {in} {range} 1 {to} 3
                            {print} '头昏脑涨的睁开眼'
                        {print} '一大清早'
                    ```
            18:
                story_text: |
                    In level 16 we made songs using lists. These programs however are no longer working properly in this level. The colons from level 17 and the brackets from level 18 still need to be added.

                    ### Exercise 1
                    The Drunken sailor song is given as sample code, but not yet working.
                    Can you make sure everything works again? To help you, we've put _ in the places of _some_ errors.

                    ### Exercise 2
                    Now also look up your Old MacDonald song from level 16, and correct it.
                example_code: |
                    ```
                    lines = ['我们应该如何处理醉酒的水手'，'用生锈的剃刀剃他的肚子'，'让他躺在船上醒酒']
                    {for} 行 {in} 行 _
                        {for} i {in} {range} 1 {to} 3 _
                            {print} _ 行 _
                         {print} '凌晨'
                         {for} i {in} {range} 1 {to} 3
                             {print} 'way hay and up she rises'
                         {print} '凌晨'
                    ```
    songs_2:
        name: Sing a song! 2
        default_save_name: Song 2
        description: Sing a song 2
        levels:
            12:
                story_text: |
                    Songs contain a lot of repetition. We can capture it with a function!
                    ### Exercise
                    Look at the example code with the function. Fill out the two lines so the full song is printed.
                example_code: |
                    ```
                    {define} twinkle
                        {print} 'Twinkle'
                        {print} '...'

                    {call} twinkle
                    {print} 'Up above the world so high'
                    {print} 'Like a diamond in the sky'
                    {call} _
                    ```
    tic:
        name: Tic Tac Toe
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            13:
                story_text: |
                    在这个探险活动中，你可以编写一个三连棋游戏的程序。你可以和两个人一起玩，两个人轮流在印有九格方盘上划“x”或“o”字。
                    谁先把三个同一记号排成横线、直线、或斜线, 谁就赢了！
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} game {is} 'on'
                            choice = {ask} 'Player ' sign ', which spot?'
                            {if} choice {in} open_spots
                                {remove} choice {from} open_spots
                                {if} choice {is} 1
                                    spot_1 = sign
                                {if} choice {is} 2
                                    spot_2 = sign
                                {if} choice {is} 3
                                    spot_3 = sign
                                {if} choice {is} 4
                                    spot_4 = sign
                                {if} choice {is} 5
                                    spot_5 = sign
                                {if} choice {is} 6
                                    spot_6 = sign
                                {if} choice {is} 7
                                    spot_7 = sign
                                {if} choice {is} 8
                                    spot_8 = sign
                                {if} choice {is} 9
                                    spot_9 = sign
                            {else}
                                {print} 'That spot was already taken'
                            {print} spot_1 spot_2 spot_3
                            {print} spot_4 spot_5 spot_6
                            {print} spot_7 spot_8 spot_9
                            {print} ' '
                            winner = {ask} 'Did you win?'
                            {if} winner {is} 'yes'
                                {print} 'Good job, player ' sign '!'
                                game = 'over'
                            {else}
                                {if} sign {is} 'x'
                                    sign = 'o'
                                {else}
                                    sign = 'x'
                    ```
            14:
                story_text: |
                    In the previous levels you've made a tic tac toe game. Now you've learned how to use the = sign, the == sign and the != sign.
                    You can use this knowledge in your new Taic Tac Toe game, like this:
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} game != 'over'
                            choice = {ask} 'Player ' sign ', which spot?'
                            {if} choice {in} open_spots
                                {remove} choice {from} open_spots
                                {if} choice == 1
                                    spot_1 = sign
                                {if} choice == 2
                                    spot_2 = sign
                                {if} choice == 3
                                    spot_3 = sign
                                {if} choice == 4
                                    spot_4 = sign
                                {if} choice == 5
                                    spot_5 = sign
                                {if} choice == 6
                                    spot_6 = sign
                                {if} choice == 7
                                    spot_7 = sign
                                {if} choice == 8
                                    spot_8 = sign
                                {if} choice == 9
                                    spot_9 = sign
                            {else}
                                {print} 'That spot was already taken'
                            {print} spot_1 spot_2 spot_3
                            {print} spot_4 spot_5 spot_6
                            {print} spot_7 spot_8 spot_9
                            {print} ' '
                            winner = {ask} 'Did you win?'
                            {if} winner == 'yes'
                                {print} 'Good job, player ' sign '!'
                                game = 'over'
                            {else}
                                {if} sign == 'x'
                                    sign = 'o'
                                {else}
                                    sign = 'x'
                    ```
            15:
                story_text: |
                    In this level you can improve your Tic Tac Toe game with the {while} loop/ With this loop you can combine the `{if} game != 'over'` and the `{for} i {in} {range} 1 to 9` into one simple line.
                    Check it out:
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {while} game != 'over'
                        choice = {ask} 'Player ' sign ', which spot?'
                        {if} choice {in} open_spots
                            {remove} choice {from} open_spots
                            {if} choice == 1
                                spot_1 = sign
                            {if} choice == 2
                                spot_2 = sign
                            {if} choice == 3
                                spot_3 = sign
                            {if} choice == 4
                                spot_4 = sign
                            {if} choice == 5
                                spot_5 = sign
                            {if} choice == 6
                                spot_6 = sign
                            {if} choice == 7
                                spot_7 = sign
                            {if} choice == 8
                                spot_8 = sign
                            {if} choice == 9
                                spot_9 = sign
                        {else}
                            {print} 'That spot was already taken'
                        {print} spot_1 spot_2 spot_3
                        {print} spot_4 spot_5 spot_6
                        {print} spot_7 spot_8 spot_9
                        {print} ' '
                        winner = {ask} 'Did you win?'
                        {if} winner == 'yes'
                            {print} 'Good job, player ' sign '!'
                            game = 'over'
                        {else}
                            {if} sign == 'x'
                                sign = 'o'
                            {else}
                                sign = 'x'
                    ```
            17:
                story_text: |
                    In the previous levels the tic tac toe game had an annoying feature. After every move, you had to fill in yourself if you had won or not.
                    This made the game playable, but also quite slow. In this level we have learned the `{elif}` command, that could solve that problem.
                    To use the {elif} to let 海蒂 check whether or not a player has won is fun, but it also requires a fair amount of extra lines.

                    In the example code you see that we added the requirements to win (3 spots in a row horizontally, vertically or diagonally).
                    You can find them in line 46 to 69. You can see that each time the requirement is met (so if a player has won) the variable game is set to 'over'.
                    This means that the {while} loop will be stopped and the game ends.
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {while} game != 'over':
                        choice = {ask} 'Player ' sign ', which spot?'
                        {if} choice {in} open_spots:
                            {remove} choice {from} open_spots
                            {if} choice == 1:
                                spot_1 = sign
                            {if} choice == 2:
                                spot_2 = sign
                            {if} choice == 3:
                                spot_3 = sign
                            {if} choice == 4:
                                spot_4 = sign
                            {if} choice == 5:
                                spot_5 = sign
                            {if} choice == 6:
                                spot_6 = sign
                            {if} choice == 7:
                                spot_7 = sign
                            {if} choice == 8:
                                spot_8 = sign
                            {if} choice == 9:
                                spot_9 = sign
                        {else}:
                            {print} 'That spot was already taken'
                        {print} spot_1 spot_2 spot_3
                        {print} spot_4 spot_5 spot_6
                        {print} spot_7 spot_8 spot_9
                        {print} ' '
                        {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {else}:
                            {if} sign == 'x':
                                sign = 'o'
                            {else}:
                                sign = 'x'
                    ```
    turtle:
        name: 海龟
        default_save_name: turtle
        description: 创作自己的绘画作品
        levels:
            1:
                story_text: |
                    你也可以用海蒂来画画。通过结合旋转和画线，你可以画出一个正方形或楼梯!

                    使用`{forward}`你可以向前画一条线。它后面的数字决定了海龟会走多远。`{turn} {right}`是顺时针转四分之一圈，`{turn} {left}`是逆时针转。

                    如果你想向后退，你可以使用`{forward}`命令，但要用一个负数。因此，比如说`{forward} -100`


                    ### 练习
                    让我们开始画一个小楼梯。你能使它有5个台阶吗？
                example_code: |
                    ```
                    {forward} 20
                    {turn} {right}
                    {forward} 20
                    {turn} {left}
                    {forward} 20
                    ```
            2:
                story_text: |
                    在这一级，你可以使用变量来使海龟互动。例如，你可以问玩家海龟必须走多少步。
                example_code: |
                    ```
                    答案 {is} {ask} 海龟应该走多少步？
                    {forward}答案
                    ```
                story_text_2: |
                    此外，在第1级，海龟只能左转或右转。这有点无聊！
                    在第2级，它可以转向任何方向。

                    用90来转1/4圈。我们管这个叫角度。完整转一圈是360度。

                    ### 练习
                    你能用这段代码来画一个图形吗？比如三角形或者圆形？
                example_code_2: |
                    ```
                    {print} 正在画图
                    角度 {is} 90
                    {turn} 角度
                    {forward} 25
                    {turn} 角度
                    {forward} 25
                    ```
            3:
                story_text: |
                    在这个级别中，您可以将 `{at} {random}` 与海龟绘图一起使用。使用随机选择使乌龟每次走不同的路径。
                    使用 `{at} {random}` 从列表中选择一个值。
                    ### 练习
                    您可以复制并粘贴第 2 行和第 3 行以创建更长的随机路径。
                example_code: |
                    ```
                    角度 {is} 10, 50, 90, 150, 250
                    {turn} 角度 {at} {random}
                    {forward} 25
                    ```
            4:
                story_text: |
                    在第4级，你必须在`{print}`和`{ask}`语句中使用引号。在画画时也一样！
                example_code: |
                    ```
                    {print} _ '正在画图'
                    角度 {is} 90
                    {turn} 角度
                    {forward} 25
                    {turn} 角度
                    {forward} 25
                    ```
                story_text_2: |
                    你也可以用命令`{color}` ，改变线条的颜色。请看这个例子。
                    你还可以用命令`{color} {white}`来制作 "看不见的 "线条。你可以用这些白线在开始绘图前将乌龟移到屏幕的任何地方。
                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
            5:
                story_text: |
                    在第5级，你可以用`{if}`来做出选择。比如选择不同类型的图案。
                example_code: |
                    ```
                    {print} '正在画图'
                    图形 {is} {ask} '你想要正方形还是三角形？'
                    {if} 图形 {is} 三角形 角度 {is} 120
                    {else} 角度 {is} 90
                    {turn} 角度
                    {forward} 25
                    {turn} 角度
                    {forward} 25
                    {turn} 角度
                    {forward} 25
                    {turn} 角度
                    {forward} 25
                    ```
                story_text_2: |
                    ### 练习
                    在此代码中输入正确的数字使其工作。
                    完成后，您可以尝试向后添加选项。

                    **额外** 请勿使用“左”和“右”，而是用北、东、南和西重新制作程序。
                    这样您就可以添加更多方向，例如东北和西南等。
                example_code_2: |
                    ```
                    方向 {is} {ask} '你想向左走、向右走还是一直向前走？'
                    {if} 方向 {is} 左 {turn} _
                    {if} 方向 {is} 右 {turn} _
                    {forward} 100
                    ```

                    图形 {is} {ask} '你想要一个正方形还是三角形？'
                    {if} 图形 {is} 三角形 角度 {is} 120 {else} 角度 {is} 90
                    {turn} 角度
                    {forward} 25
            6:
                story_text: |
                    在这一级，你可以使用算术来绘制不同的图形。
                    你可能在学校里学过，旋转一圈是360度。如果没学过，那你现在知道了！
                    这就是为什么你可以用90度来画方形。360除以4是90。
                    现在我们可以用海蒂做数学，我们就能画出所有想要的图形！
                example_code: |
                    ```
                    边 = {ask} '你想要画几边形？'
                    角度 = 360 / 边
                    {forward} 50
                    {turn} 角度
                    {forward} 50
                    {turn} 角度
                    {forward} 50
                    {turn} 角度
                    {forward} 50
                    {turn} 角度
                    {forward} 50
                    {turn} 角度
                    {forward} 50
                    {turn} 角度
                    ```
            8:
                story_text: "现在我们能重复多行了，可以更容易地画图。\n我们只需要设置一下角度，然后在`{repeat}`中使用这个变量。\n\n### 练习1 \n用这个代码范例画了一个正方形。改变代码，使其画另一个图形，如一个三角形或一个六边形。 \n这需要对两行代码进行修改。\n 提示：一个完整的圆是360度。\n \n ### 练习2 \n现在画一个至少由两个多边形组成的图形。\n"
                example_code: |
                    ```
                    角度 = 90
                    {repeat} 4 {times}
                        {turn} 角度
                        {forward} 50
                    ```
                story_text_2: |
                    **（另外）**我们现在还可以改进之前的能画不同图案的程序。完成这段代码，你就能画出任何你想要的多边形！
                example_code_2: |
                    ```
                    边数 = {ask} '你想要几边形？'
                    角度 = 360 / 边数
                    {repeat} 边数 {times}
                        {turn} _
                        {forward} _
                    ```
    turtle_draw_it:
        name: Draw it!
        default_save_name: Draw it
        description: Draw this picture with the turtle
        levels:
            1:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                        Rectangle <img src="https://github.com/hedyorg/hedy/assets/80678586/77aa99d5-cd8f-4969-b49d-e8fed34ac550" width="100">
                        Square <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                        Stairs<img src="https://github.com/hedyorg/hedy/assets/80678586/d4301e62-ec66-4031-827c-7d21f73ba106" width="200">
                    </div>
            2:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/e974b62c-f0cf-445a-8bd4-5ad9f1f71204" width="100">
                    Arrow <img src="https://github.com/hedyorg/hedy/assets/80678586/803d8f42-9708-448c-82ea-d035697f08c9" width="150">
                    Boat <img src="https://github.com/hedyorg/hedy/assets/80678586/94ef7189-442a-4c8f-827d-12a69203c2e9" width="150">
                    </div>
            3:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/71e04d98-9545-4614-9caf-a5f179b756a1" width="150">
                    Star <img src="https://github.com/hedyorg/hedy/assets/80678586/421c4d28-cb99-424b-be26-dcae30d65c80" width="150">
                    Arrow <img src="https://github.com/hedyorg/hedy/assets/80678586/3cbebcae-5258-47c5-a6ac-e7ee36c1d1ce" width="200">
                    </div>
            4:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Colored Star <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Rainbow <img src="https://github.com/hedyorg/hedy/assets/80678586/2728b10f-9f7f-45ea-964e-5b284033e4f0" width="500">
                    Nested squares <img src="https://github.com/hedyorg/hedy/assets/80678586/f013f9fa-bc68-4c60-b778-2c457799d6f7" width="200">
                    </div>
                example_code: |
                    **Extra** Up for a real challenge? Make sure that the colors of these figures are selected randomly, so that each time you run your programs they'll look differently!

                    ```
                    colors {is} red, orange, yellow, green, blue, purple, pink, brown, gray, black
                    color _
                    ```
            5:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** Make only one code that lets the player decide which letter they'd like to see! And can you add even more letters?

                    <div class="w-full flex flex-row gap-2">
                    F <img src="https://github.com/hedyorg/hedy/assets/80678586/8a021b76-c24b-4e7c-b960-48d57f3bcb20" width="100">
                    E <img src="https://github.com/hedyorg/hedy/assets/80678586/12821803-6422-416a-8e36-9902d14e57a4" width="100">
                    L <img src="https://github.com/hedyorg/hedy/assets/80678586/3af6f919-7b67-4ee7-b923-11e56f2b6b24" width="100">
                    </div>
                example_code: |
                    Hint:
                    ```
                    chosen_letter {is} {ask} 'Which letter would you like to see? F, E or L?
                    {if} _
                    ```
            6:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** Let the player decide which color the square should be.

                    ***Extra*** Can you make the letter of your own first name and the flag of your own country too?

                    <div class="w-full flex flex-row gap-2">
                    Square <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="150">
                    Letters <img src="https://github.com/hedyorg/hedy/assets/80678586/e75f4fa5-f1f5-4b48-806c-916c28e4e8ad" width="100">
                    Flag <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint for the square:
                    ```
                    chosen_color = {ask} _
                    ```
            7:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Hexagon <img src="https://github.com/hedyorg/hedy/assets/80678586/92e492e1-1593-489b-aaf0-51d2a29755f4" width="200">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/3629a5e6-1f02-4851-aab9-c5430ba4a1f1" width="200">
                    Fan <img src="https://github.com/hedyorg/hedy/assets/80678586/1ba2ff71-1230-4fe3-8255-b2c504cf1b4e" width="200">
                    </div>
            8:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** The number in brackets indicates in how many lines of code this figure can be drawn. Can you do it in the same amount of lines?

                    <div class="w-full flex flex-row gap-2">
                    Square (3) <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                    Randomly colored star (5) <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Randomly colored spiral (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/9bcdb3f1-367d-4ae0-878f-d09005424a35" width="150">
                    </div>
            9:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** The number in brackets indicates in how many lines of code this figure can be drawn. Can you do it in the same amount of lines?

                    **Extra** Give the player a choice which country they would like to see the flag of.

                    <div class="w-full flex flex-row gap-2">
                    Cross (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/76e42c76-aa3f-4863-8eee-ead73c09a186" width="150">
                    Randomly colored nested squares (8) <img src="https://github.com/hedyorg/hedy/assets/80678586/17f878cc-e893-4c10-b32e-a09a50bf08de" width="200">
                    Flags <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint for the nested squares:
                    ```
                    colors = red, blue, orange, yellow, pink, purple, green, brown, black
                    distance = 120
                    repeat 5 times
                    _
                    ```
                    Hint for the flags:
                    ```
                    country = ask 'which country would you like to see the flag of?'
                    if country is 'the Netherlands'
                        color_1 = red
                        color_2 = white
                        color_3 = blue
                    ```
            10:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Nested Hexagon <img src="https://github.com/hedyorg/hedy/assets/80678586/3629e908-3cd5-44ac-bbcd-1f1cceb15654" width="150">
                    Traffic lights  <img src="https://github.com/hedyorg/hedy/assets/80678586/edbbb608-5ff8-4349-85a6-e47809adde43" width="100">
                    </div>
                example_code: |
                    Hint Nested Hexagon:
                    ```
                    distances = 100, 80, 60, 40, 20
                    {for} distance {in} distances
                    _
                    ```

                    Hint Traffic Lights:
                    ```
                    colors = red, yellow, green
                    {for} chosen_color {in} colors
                        color _
                        {repeat} _
                    ```
                story_text_2: |
                    Christmas lights <img src="https://github.com/hedyorg/hedy/assets/80678586/9637ea6d-6edc-4d88-a6f7-10271bfc5371" width="500">
                example_code_2: |
                    Hint Christmas Lights:

                    Start by moving to the left side of the screen with an invisible white line. Then hang up the Christmas lights!
                    ```
                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 90

                    colors = red, blue, yellow, purple, green, orange, pink
                    {for} chosen_color {in} colors
                    _
                    ```
            11:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Beehive (6) <img src="https://github.com/hedyorg/hedy/assets/80678586/ec02469c-907b-4695-9382-d39a8f3c00ec" width="200">
                    Fan (5)  <img src="https://github.com/hedyorg/hedy/assets/80678586/a032ab35-c70c-4e67-9b4e-036a03ecce87" width="200">
                    </div>
                example_code: |
                    Hint Beehive:
                    ```
                    {for} amount_of_combs {in} {range} 1 {to} _
                        {for} walls_of_one_comb {in} {range} 1 {to} _
                            {forward} _
                            {turn} _
                        {forward} _
                        {turn} _
                    ```

                    Hint Fan:
                    Start out like the fan you made in level 7. Or take a peak at the hint for the beehive, because the codes are very similar.
            12:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!
                example_code: |
                    Hint: Bracelet designing program


                    Firstly, define a function **for each shape** you want to use on the bacelet. Then, add the shapes to the bacelet like this:

                    ```
                    {define} draw_a_square
                    _

                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 180

                    {for} i {in} {range} 1 {to} 5
                        {color} gray
                        {forward} 100
                        shape = {ask} 'What kind of shape would you like next on the bracelet?'
                        chosen_color = {ask} 'In which color?'
                        {color} chosen_color
                        {if} shape = 'square'
                            {call} draw_a_square
                    ```
            13:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    Street in different sizes <img src="https://github.com/hedyorg/hedy/assets/80678586/cdae9d97-d5ef-46f3-8838-24fa7b5b1bec" width="300">
                    Colored street  <img src="https://github.com/hedyorg/hedy/assets/80678586/9893e0bd-c0f8-49bc-a5a7-217182407724" width="300">
                example_code: |
                    Hint Street in different sizes
                    ```
                    {define} draw_a_house {with} size
                    _

                    {call} draw_a_house {with} 90
                    {call} draw_a_house {with} 60
                    {call} draw_a_house {with} 30
                    ```

                    Hint Colored street
                    ```
                    {define} draw_a_house {with} chosen_color
                    _
                    ```
            14:
                story_text: |
                    ### Exercise
                    Create a program that asks the player how many corners their figure should have and then creates that figure.
                    The figure in the image is the output when the player fills in 10.

                    <div class="w-full flex flex-row gap-2">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/ee32f40e-dea1-4e7c-a813-3ef63671254b" width="300">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/3621bf77-527d-41e8-a44f-c5a21bb4ffd2" width="200">
                    </div>
                example_code: |
                    ```
                    {define} calculate_degrees {with} amount_of_corners
                        _ 360 / amount_of_corners


                    {define} draw_figure {with} degrees
                        _
                            {forward} 400/amount_of_corners
                            {turn} _

                    amount_of_corners = {ask} _
                    degrees = {call} _ {with} _

                    {call} _ {with}
                    {call} _ {with}
                    ```
            15:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    Spiral <img src="https://github.com/hedyorg/hedy/assets/80678586/6943223c-018b-435b-a391-23723cc7a6ad" width="150">
                example_code: |
                    Spiral
                    ```
                    distance = 5
                    {while} distance < 200
                        distance = distance + 5
                         _
                    ```
                story_text_2: |
                    Fan <img src="https://github.com/hedyorg/hedy/assets/80678586/cb671065-b47b-49f0-b298-dcbcd2a5e28f" width="150">
                example_code_2: |
                    Fan
                    ```
                    {define} draw_a_square {with} side
                    _

                    i = 100
                    {while} i > 1
                        _ {with} i
                        _
                        i = i - 3
                    ```
                story_text_3: |
                    Star <img src="https://github.com/hedyorg/hedy/assets/80678586/17564e0a-63e1-4794-8d41-15ac8c1a5a93" width="150">
                example_code_3: |
                    Star
                    A star is usually drawn using 144-degree-turns. If you change this slightly to 143 degrees for example and repeat the pattern multiple times with a {while} loop you can make this figure.
    while_command:
        name: '{while}'
        default_save_name: while_command
        description: while
        levels:
            15:
                story_text: |-
                    We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.
                    So don't forget to change the value in the loop.

                    In the example code, we continue until a correct answer has been given.
                    If the correct answer is never given, the loop never ends!
                example_code: |
                    ```
                    answer = 0
                    {while} answer != 25
                        answer = {ask} '5重复5次是多少?'
                    {print} '一个正确的回答给出'
                    ```
    years:
        name: 新年
        default_save_name: 新年倒计时
        description: 新年倒计时!
        levels:
            11:
                story_text: |
                    在此级别中，您可以使用 `{for}` 数字 `{in}` `{range}` 命令倒计时到新年。

                    ### 练习
                    填空并使代码正常工作！
                example_code: |
                    ```
                    {for} 数字{in} {range} _{to} _
                        {print} 数字
                    {print} '新年快乐！'
                    ```
