adventures:
    story:
        name: Hist√≥ria
        default_save_name: Hist√≥ria
        description: Hist√≥ria
        levels:
            1:
                story_text: |
                    No n√≠vel 1 podes criar uma hist√≥ria com um personagem principal diferente, sa√≠do da tua imagina√ß√£o.

                    Na primeira linha, usa `{ask}` e pergunta √† personagem principal como ser√° a hist√≥ria.

                    Ap√≥s a primeira linha, come√ßa com `{print}` se precisares que a frase seja escrita.
                    Utilizas `{echo}` se quiseres colocar o teu personagem principal no final da frase.
                example_code: "```\n{ask} O(A) personagem principal desta hist√≥ria √©\n{print} O(A) personagem principal vai caminhar agora na floresta\n{echo} Est√£o um pouco assustados,\n{print} Ouvem barulhos estranhos por toda a parte\n{print} Receiam que esta floresta seja assombrada\n```\n"
                story_text_2: |
                    ### Exerc√≠cio
                    Agora, cria a tua pr√≥pria hist√≥ria com pelo menos 6 linhas de c√≥digo.
                    Esta hist√≥ria n√£o pode ser igual ao c√≥digo de exemplo.
                    Usa pelo meno um comando `{ask}` e um `{echo}`.
                    Podes escolher o tema que preferires.
                    Se n√£o conseguires lembrar-te de um tema, escolhe uma das nossas op√ß√µes: ir ao cinema, um evento desportivo ou um dia no zoo.
            2:
                story_text: |
                    No n√≠vel 2 podes tornar a tua hist√≥ria ainda mais divertida. O nome da tua personagem principal pode agora aparecer em qualquer parte da frase.

                    Precisas de programar algumas coisas extra, para conseguires isso. Antes de mais, tens de atribuir o nome ao teu personagem principal.

                    Depois, podes colocar esse nome em qualquer lugar da frase.
                example_code: |-
                    ```
                    nome {is} {ask} Qual √© o nome da tua personagem principal?
                    {print} nome vai agora correr na floresta
                    {print} nome est√° um pouco assustado(a)
                    {print} De repente, escuta um barulho estranho...
                    {sleep}
                    {print} nome receia que esta floresta seja assombrada
                    ```
                story_text_2: |
                    ### Exerc√≠cio
                    Chegou o momento de adicionar vari√°veis √† tua hist√≥ria, que constru√≠ste no n√≠vel anterior.
                    Vai at√© 'Os meus programas', procura pela hist√≥ria aventura do n√≠vel 1 e copia o c√≥digo. Cola o c√≥digo na tua janela de introdu√ß√£o neste n√≠vel.

                    Este c√≥digo n√£o ir√° funcionar neste n√≠vel, porque ainda n√£o usaste vari√°veis.
                    Altera os comandos `{ask}` e `{echo}` no teu c√≥digo para a forma correcta, que aprendeste neste n√≠vel.

                    **Extra** Adiciona um comando `{sleep}` ao teu c√≥digo, para aumentar o nervosismo na tua hist√≥ria.
            3:
                story_text: |
                    No n√≠vel 3 podes tornar a tua hist√≥ria mais divertida. Podes usar a aleatoriedade para qualquer monstro, animal ou outro obst√°culo, da seguinte forma:
                example_code: |
                    ```
                    animais {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} Agora conseguem ouvir o barulho de animais {at} {random}
                    ```
                story_text_2: |
                    O comando `{add}` pode tamb√©m ser √∫til na tua hist√≥ria. Por exemplo
                example_code_2: |
                    ```
                    {print} Ouvem um ru√≠do
                    animais {is} üêø, ü¶î, ü¶á, ü¶â
                    animal {is} {ask} O que achas que √©?
                    {add} animal {to_list} animais
                    {print} era um animais {at} {random}
                    ```
                story_text_3: |
                    Este √© um exemplo do comando `{remove}` na tua hist√≥ria

                    ### Exerc√≠cio
                    Copia a tua hist√≥ria do n√≠vel anterior para este novo n√≠vel.
                    Neste n√≠vel aprendeste 3 novos comandos `{at} {random}`, `{add} {to_list}` e `{remove} {from}`.
                    Adiciona novas linhas de c√≥digo √† tua hist√≥ria, por forma a que todos os novos comandos apare√ßam, pelo menos, uma vez na tua hist√≥ria.
                example_code_3: |
                    ```
                    {print} A mochila dele ficou demasiado pesada.
                    {print} No interior, estavam uma garrafa de √°gua, uma lanterna e um tijolo.
                    mochila {is} √°gua, lanterna, tijolo
                    despeja {is} {ask} Que objeto ele devia despejar?
                    {remove} despeja {from} mochila
                    ```
            4:
                story_text: |
                    ### Exerc√≠cio
                    Copia o c√≥digo de exemplo e completa-o, adicionando aspas no espa√ßos vazios nas linhas 1 e 2.
                    Os espa√ßos vazios nas linhas 3 e 4 n√£o devem ser substitu√≠dos por aspas, mas sim por um comando `{sleep}` e um `{clear}`. Consegues fazer isto resultar?

                    ### Exerc√≠cio 2
                    Volta ao n√≠vel anterior e copia o c√≥digo da tua hist√≥ria. Faz com que o c√≥digo funcione neste n√≠vel, adicionando aspas nos s√≠tios certos.
                    Lembra-te: As vari√°veis na tua pr√≥pria hist√≥ria devem estar fora das aspas. Tal como est√° na segunda linha do c√≥digo de exemplo. Nessa linha, o nome da vari√°vel √© colocado por fora das aspas.
                example_code: |
                    ```
                    nome {is} {ask} _ Qual √© o teu nome? _
                    {print} _ O personagem principal chama-se _ nome
                    _
                    _
                    {print} nome _ vai agora caminhar na floresta _
                    {print} nome _ est√° um pouco(a) assustado(a) _
                    animais {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} _ Escuta o som de um _ animais {at} {random}
                    {print} nome _ receia que a floresta √© assombrada _
                    ```
            5:
                story_text: |
                    Neste n√≠vel podes programar diferentes finais, o que ir√° tornar a tua hist√≥ria ainda mais divertida.
                    No c√≥digo de exemplo podes ver como podes criar 2 finais diferentes.

                    ### Exerc√≠cio 1
                    Escreve uma nova hist√≥ria curta com, pelo menos, 6 linhas de c√≥digo sobre um tema √† tua escolha.
                    Sem inspira√ß√£o? Escolhe um dos seguintes t√≥picos: um super-her√≥i, um dia chato na escola, preso numa ilha deserta.

                    Agora concede ao jogador a possibilidade de escolher um final feliz ou triste, tal como no c√≥digo de exemplo.
                    Programa ambos os finais.

                    ### Exerc√≠cio 2
                    Copia a hist√≥ria que criaste na tua pr√≥pria hist√≥ria aventura, nos n√≠veis anteriores.
                    Encontra uma forma de inclu√≠res na tua hist√≥ria, pelo menos, 2 comandos `{if}` e `{else}`.
                    Podes faz√™-lo com um final feliz e outro triste, mas podes tamb√©m experimentar outras maneiras de incorporar os comandos.
            7:
                story_text: |
                    Numa hist√≥ra, algu√©m pode repetir palavras v√°rias vezes. Por exemplo, quando gritam por ajuda ou cantam uma can√ß√£o.
                    Podes colocar estas repeti√ß√µes na tua hist√≥ria, neste n√≠vel, com o `{repeat}`.

                    ### Exerc√≠cio
                    Adiciona repeti√ß√£o √† tua pr√≥pria hist√≥ria. Volta aos teus programas guardados, escolhe o teu programa da hist√≥ria de um n√≠vel anterior e
                    procura uma linha contendo `{print}` e repete-a!
                example_code: |
                    ```
                    {print} 'O pr√≠ncipe continuava a gritar por ajuda'
                    {repeat} 5 {times} {print} 'Socorro!'
                    {print} 'Porque √© que ningu√©m me ajuda?'
                    ```
            8:
                story_text: |
                    Neste n√≠vel podes usar m√∫ltiplos comandos `{if}`, desta forma, podes melhorar o teu final feliz ou triste!

                    ### Exerc√≠cio 1
                    O c√≥digo de exemplo mostra dois finais diferentes; um onde os personagens saltam para uma m√°quina do tempo e outro onde isso n√£o acontece.
                    Completa os espa√ßos em branco com pelo menos uma frase por cada final.
                    **Extra** Torna a hist√≥ria mais longa. O que acontece na hist√≥ria? Podes tamb√©m adicionar um segundo `{ask}` com diferente op√ß√µes.

                    ### Exerc√≠cio 2
                    Regressa ao teus programas guardados, escolhe o programa da tua hist√≥ria do n√≠vel 5. Agora, escreve um final feliz e um final triste, com pelo menos tr√™s linhas cada um!
                example_code: |
                    ```
                    {print} 'OH N√ÉO! O T-rex est√° a aproximar-se!'
                    fim = {ask} 'Queres um final feliz ou triste?'
                    {if} fim {is} feliz
                        {print} 'Mesmo a tempo, Ricardo salta para dentro da m√°quina do tempo!'
                        {print} _
                    {else}
                        {print} 'Oh n√£o! Ricardo √© demasiado lento...'
                        {print} _
                    ```
            9:
                story_text: |
                    Neste n√≠vel podes usar comandos `{if}` e `{repeat}` dentro de outros comandos `{if}` e `{repeat}`.
                    Isto proporciona-te muitas op√ß√µes e ajuda imenso a tornar a tua hist√≥ria mais interactiva.

                    ### Exerc√≠cio 1
                    Completa o c√≥digo para que o `{if}` funcione correctamente.

                    ### Exerc√≠cio 2
                    Adiciona tamb√©m um `{if}` e um `{else}` para a parte da hist√≥ria em que Robin regressa a casa.

                    ### Exerc√≠cio 3
                    Regressa √† tua hist√≥ria do n√≠vel 8 e usa pelo menos dois `{if}`s dentro de outro `{if}`.
                example_code: |
                    ```
                    {print} 'Robin est√° a caminhar pela baixa da cidade'
                    local = {ask} 'Robin vai entrar numa loja ou est√° a voltar para casa?'
                    {if} local {is} loja
                    	{print} 'Ela entra na loja.'
                    	{print} 'Robin v√™ um livro com um aspecto interessante'
                    	livro = {ask} 'A Robin compra o livro?'
                    	{if} livro {is} sim
                    	_ {print} 'Robin compra o livro e volta para casa'
                    	_ {else}
                    	_ {print} 'Robin sai da loja e volta para casa'
                    {else}
                    	{print} 'Robin volta para casa'
                    ```
            10:
                story_text: |
                    Neste n√≠vel podes usar o comando {for} na tua hist√≥ria. Desta maneira, podes facilmente programar o livro infantil 'Urso Castanho, Urso Castanho, o que v√™s aqui?'.

                    ### Exerc√≠cio

                    Vai ver <a href="https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf"> a hist√≥ria</a>, se ainda n√£o a conheces, e assegura-te que √© escrita conforme est√° no livro.
                example_code: "```\nanimais = _ , _, ¬≠¬≠¬≠_  \n{print} 'Urso Castanho, Urso Castanho'\n{print} 'O que v√™s aqui?'\n```\n"
            12:
                story_text: |-
                    Neste n√≠vel, vamos precisar das aspas para salvar m√∫ltiplas palavras numa vari√°vel.

                    ### Exerc√≠cio

                    Encontra uma hist√≥ria de um n√≠vel anterior, qualque n√≠vel serve. Agora, garante que adicionas as aspas nos locais correctos.
                example_code: |
                    ```
                    nome = 'A Rainha de Inglaterra'
                    {print} nome ' estava a comer uma fatia de bolo, quando de repente...'
                    ```
            13:
                story_text: |
                    Usando os comandos `{and}` e `{or}` , podes tornar as tuas hist√≥rias ainda mais vers√°teis. Podes colocar duas quest√µes e responder √† combina√ß√£o de ambas as respostas.

                    ### Exerc√≠cio 1
                    Observa o c√≥digo de exemplo e completa-o. Em seguida, inclui mais 2 c√≥digos `{if}` com `{and}` ou `{or}`.

                    ### Exerc√≠cio 2
                    Encontra uma hist√≥ria de um n√≠vel anterior e adiciona um `{and}` ou `{or}`.
                example_code: |
                    ```
                    {print} 'O nosso her√≥i caminha pela floresta'
                    {print} 'O caminho divide-se em dois'
                    caminho = {ask} 'Qual caminho deve escolher?'
                    arma = {ask} 'Que arma deve pegar?'
                    {if} caminho {is} 'esquerda' {and} arma {is} 'espada'
                    	_
                    ```
            15:
                story_text: |
                    Recorrendo ao ciclo `{while}` podes tornar as tuas hist√≥rias mais interessantes. Por exemplo, podes usar `{while} game == 'on'` para que possas jogar at√© o jogo chegar ao fim.
                    Ou ent√£o podes usar `{while} sword == 'lost'` para que o jogador n√£o possa continuar o jogo, at√© que encontre algum objecto.

                    ### Exerc√≠cio
                    O c√≥digo de exemplo mostra-te como usar o ciclo `{while}` numa hist√≥ria. Agora, **pensa no teu pr√≥prio cen√°rio** no qual o jogador tem de encontrar algo antes que possa continuar.
            18:
                story_text: |
                    Vamos agora escrever outra hist√≥ria, mas agora temos de usar chavetas com o `{print}`.

                    ### Exerc√≠cio 1
                    Cria uma hist√≥ria com pelo menos 5 frases. N√£o precisas de usar j√° a vari√°vel 'nome'.
                example_code: |
                    ```
                    {print}('Bem-vindo(a) a esta hist√≥ria!')
                    ```
                story_text_2: |
                    ### Exerc√≠cio 2
                    J√° preparamos um `{input}` para ti. Primeiro, usa a vari√°vel `name` na tua hist√≥ria.
                    Depois, adiciona um segundo `{ask}` e usa a vari√°vel tamb√©m.
                    Dica: Lembra-te das v√≠rgulas no `{print}` entre o texto e as vari√°veis!
                example_code_2: |
                    ```
                    nome = {input}("Qual √© o teu nome?")
                    {print}('Bem-vindo(a) a esta hist√≥ria!')
                    ```
    add_remove_command:
        default_save_name: adiciona_remove_comando
        description: introduzindo {add} {to_list} e {remove} {from}
        levels:
            3:
                story_text: |
                    ## Adiciona a
                    Podes adicionar itens a uma lista com o comando `{add} {to_list}`. Para adicionar um item a uma lista, basta digitar: `{add} penguin {to_list} animals` o podes usar o comando `{ask}` como no c√≥digo de exemplo.
                story_text_3: |
                    ### Exercise
                    Try out the new commands in this virtual restaurant. Add the flavor the player is hpoing for to the list and remove the flavors they are allergic to.
    and_or_command:
        description: introducing and or
    ask_command:
        description: Introduction ask command
        levels:
            1:
                story_text_2: |
                    ## The echo command
                    If you want the computer to repeat the answer, you can use the `{echo}` command. The answer will then be echoed back at the end of the sentence, so in this example after hello.
    calculator:
        levels:
            6:
                story_text: |
                    Now that you can calculate, you can also create a program to practice maths calculations. You can make up the calculations yourself, for example:
                story_text_2: |
                    You can also let the computer do random calculations on its own using {random}.
                story_text_3: |
                    You can also let the computer do random calculations on its own using {random}.
                example_code_3: |
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number_1 = _
                    number_2 = _
                    correct_answer = number_1 * number_2
                    given_answer = 'What is ' number_1 ' times ' number_2 '?'
                    {if} _
                    {else} _
            9:
                story_text: |
                    In a previous level you've created a calculator, in this level you can expand that code so it asks multiple questions.

                    ### Exercise 1
                    Can you finish line 10 to get the code to work?

                    ### Exercise 2
                    Give the player feedback when the enter an answer, like `{print} 'Correct!'` or `{print} 'Wrong! The correct answer is ' correct_answer`.
            11:
                example_code: |
                    ```
                    number = 10
                    {for} i {in} {range} 1 to 10
                        {print} i * number
                    ```
            12:
                story_text: |
                    Now you can make a calculator that works for decimal numbers.
            14:
                story_text: |
                    In this level you can program the game 'Guess which number'
                example_code: |
                    ```
                    {print} 'Guess which number'
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number = numbers {at} {random}
                    game = 'on'
                    {for} i {in} {range} 1 {to} 10
                        {if} game == 'on'
                            guess = {ask} 'Which number do you think it is?'
                            {if} guess > number
                                {print} 'Lower!'
                            {if} guess < number
                                {print} 'Higher!'
                            {if} guess == number
                                {print} 'You win!'
                                game = 'over'
                    ```
    clear_command:
        description: clear command
    debugging:
        levels:
            3:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    movie_choices {is} dracula, fast and furious, home alone, barbie
                    chosen_movie {is} movies {at} {random}
                    {print} Tonight we will watch chosen _movies
                    like {ask} Do you like that movie?
                    {print} Tomorrow we will watch something else.
                    {add} chosen_movie {to} movie_choices
                    {print} Tomorrow we will watch tomorrows_movie
                    tomorrows_movie {is} movie_choices {at} {random}
                    I'll go get the popcorn! {print}
                    ```
            7:
                story_text: |-
                    ### Exercise
                    Surprise! This program looks more like an output than a code. And yet, we don't want you to just add `{print}` commands in front of each line.
                    Fix this program to turn it into the nursery rhyme 'Brother John (Fr√®re Jaques)' by using the {repeat} command of course!
            8:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to Manicures and Pedicures by Hedy'
                    bodypart = {ask} 'Are you getting your fingernails or toenails done today? Or both?'
                    {if} bodyparts {is} both
                            {print} That will be $25'
                            price = 25
                        {else}
                            {print} That will be $18'
                            price = 18
                    color = {ask} What color would you like?
                    sparkles = {ask} 'Would you like some sparkles with that?'
                    {if} sparkles {is} yes
                        {print} 'We charge $3 extra for that'
                    price = price + 3
                    {else} {print} 'No sparkles' {print} 'So no extra charge'
                    {sleep} 5
                    {print} 'All done! That will be $' price ' please!'
                    {print} 'Thank you! Byebye!'
                    ```
            9:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to our sandwich shop'
                    amount 'How many sandwiches would you like to buy?'
                    {repeat} amount {times}
                    {ask} {is} {ask} 'What kind or bread would you like your sandwich to be?'
                    types_of_bread {is} white, wheat, rye, garlic, gluten free
                    {if} chosen_bread in types_of_bread
                    {print} 'Lovely!'
                    {else}
                    'I'm sorry we don't sell that'
                    topping {is} {ask} 'What kind of topping would you like?'
                    sauce {is} {ask} 'What kind of sauce would you like?'
                    {print} One chosen_bread with topping and sauce.
                    price = amount * 6
                    {print} 'That will be 'price dollar' please'
                    ```

                    price = amount * 6
                    {print} 'That will be 'price dollar' please'
            10:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    names = Muad Hasan Samira Noura
                    activities = fly a kite, go swimming, go hiking, catch tan in the sun
                    {for} name {is} names
                    {print} At the beach name loves to activity at random
                    ```
            11:
                story_text: |-
                    ### Exercise
                    Debug this calender program. The output of this program is supposed to look like a list of dates.
                    For example:

                    ```
                    Hedy calender
                    Here are all the days of November
                    November 1
                    November 2
                    November 3
                    ```
                    And so on.

                    Mind that you have to test your code extra carefully for the month February, because the amount of days in this month changes in leap years.
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    print 'Hedy calender'
                    months_with_31 days = January, March, May, July, September, October, December
                    months_with_30_days = April, June, August, November
                    month = ask 'Which month would you like to see?'
                    if month in months_with_31_days
                        days = 31
                        if month in months_with30_days
                            days = 30
                    if month = February
                        leap_years = 2020, 2024, 2028, 2036, 2040, 2044, 2028
                        year = ask 'What year is it?'
                    if year in leap_years
                        days = 29
                    else
                        days = 28

                    print 'Here are all the days of ' moth
                    for i in range 1 to days
                        print month i
                    ```
            12:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define greet
                    greetings = 'Hello', 'Hi there', 'Goodevening'
                        print greetings at random

                    define take_order
                        food = ask 'What would you like to eat?'
                        print 'One food'
                        drink = 'What would you like to drink?'
                        print 'One ' drink
                        more = ask 'Would you like anything else?'
                            if more is 'no'
                        print 'Alright'
                            else
                            print 'And ' more
                    print 'Thank you'

                    print 'Welcome to our restaurant'
                    people = ask 'How many people are in your party tonight?'
                    for i in range 0 to people
                        call greet_costumer
                    ```
            13:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    defin movie_recommendation with name
                        action_movies == 'Die Hard', 'Fast and Furious', 'Inglorious Bastards'
                        romance_movies = 'Love Actually', 'The Notebook', 'Titanic'
                        comedy_movies = 'Mr Bean' 'Barbie''Deadpool'
                        kids_movies = 'Minions', 'Paddington', 'Encanto'
                        if name is 'Camila' or name is 'Manuel'
                            recommended_movie = kids_movie at random
                        if name is 'Pedro' or 'Gabriella'
                                mood = ask 'What you in the mood for?'
                            if mood is 'action'
                                recommended_movie = comedy_movies at random
                            if mood is 'romance'
                                recommended_movie = romance_movies
                        if mood is 'comedy'
                                recommended_movie = comedy_movies at random

                    print 'I would recommend ' recommended_movie ' for ' name

                    name = ask 'Who is watching?'
                    recommendation = ask 'Would you like a recommendation?'
                    if recommendaion is 'yes'
                    print movie_recommendation with name
                    else
                    print 'No problem!'
                    ```
            14:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define calculate_heartbeat
                        print 'Press your fingertips gently against the side of your neck'
                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
                    ```

                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
            15:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    names = 'Tanya', 'Romy', 'Kayla', 'Aldrin', 'Ali'
                    verbs='walking', 'skipping', 'cycling', 'driving', 'running'
                    locations = 'on a mountaintop', 'in the supermarket', 'to the swimming pool'
                    hiding_spots = 'behind a tree', under a table', in a box'
                    sounds = 'a trumpet', 'a car crash', 'thunder'
                    causes_of_noise = 'a television', 'a kid with firecrackers', 'a magic elephant', 'a dream'

                    chosen_ name = names at random
                    chosen_verb = verbs at random
                    chosen_location = 'locations at random'
                    chosen_sounds = noises at random
                    chosen_spot = hiding_spots random
                    chosen_causes = causes_of_noise at random

                    print chosen_name ' was ' chosen_verb ' ' chosen_location
                    print 'when they suddenly heard a sound like ' sounds at random
                    print chosen_name ' looked around, but they couldn't discover where the noise came from'
                    print chosen_name ' hid ' chosen_spot'
                    print 'They tried to look around, but couldn't see anything from there'
                    hidden = 'yes'
                    while hidden = 'yes'
                        print chosen_name 'still didn't see anything'
                    answer = ask 'does ' chosen_name ' move from their hiding spot?'
                        if answer = 'yes'
                            hidden == 'no'
                    print 'chosen_name moved from' chosen_spot
                    print 'And then they saw it was just' chosen_cause
                    print chosen_name 'laughed and went on with their day'
                    print The End
                    ```
            16:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    country = ['The Netherlands', 'Poland', 'Turkey', 'Zimbabwe', 'Thailand', 'Brasil', 'Peru', 'Australia', 'India', 'Romania' ]
                    capitals = 'Amsterdam', 'Warshaw' 'Istanbul', 'Harare', 'Bangkok', 'Brasilia', 'Lima', 'Canberra', 'New Delhi', 'Bucharest'
                    score = 0
                    for i in range 0 to 10
                        answer = ask 'What's the capital of ' countries[i]
                        correct = capital[i]
                        if answer = correct
                            print 'Correct!'
                        score = score + 1
                        else
                            print 'Wrong,' capitals[i] 'in the capital of' countries[i]
                        print 'You scored ' score ' out of 10'

                    ```
            17:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define food_order
                        toppings = ask 'pepperoni, tuna, veggie or cheese?'
                        size = ask 'big, medium or small?'
                        number_of_pizza = ask 'How many these pizzas would you like?'

                        print 'YOU ORDERED'
                        print number_of_pizzas ' size  ' topping ' pizza'

                    define drinks_order
                        drink = ask 'water, coke, icetea, lemonade or coffee?'
                        number_of_drinks = ask 'How many of these drinks would you like?'

                        print 'YOU ORDERED'
                        print number_of_drinks ' ' drink

                    'Welcome to Hedy pizza'
                    more_food = ask 'Would you like to order a pizza?'
                    while more_food = 'yes'
                        return food_order
                        more_food = ask 'Would you like to order a pizza?'
                    more_drinks = ask 'Would you like to order some drinks?'
                    while more_drinks == 'yes'
                        call drink_order
                        more_drinks == ask 'Would you like to order more drinks?'


                    print 'Thanks for ordering!'
                    ```
            18:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    for i in range 1 to 3
                        animal = animals[i]
                        sound = sounds[i]
                        print 'Old MacDonald had a farm'
                        print 'E I E I O!'
                        print 'and on that farm he had a ' animal
                        print 'E I E I O!'
                        print 'with a ' sound sound ' here'
                        print 'and a ' sound sound ' there'
                        print 'here a ' sound
                        print 'there a ' sound
                        print 'everywhere a ' sound sound
                    ```
    default:
        name: Introdu√ß√£o
        default_save_name: introdu√ß√£o
        description: Explica√ß√£o do n√≠vel
        levels:
            1:
                story_text: |
                    Bem-vindo √† Hedy! Aqui podes aprender a programar passo a passo.

                    Experimente o c√≥digo voc√™ mesmo! O bot√£o amarelo copia o c√≥digo de exemplo para o seu campo de programa√ß√£o.
                    Depois carregue no bot√£o verde 'Executar c√≥digo' por baixo do campo de programa√ß√£o para executar o c√≥digo.

                    J√° est√° pronto? Ent√£o, passa ao separador seguinte para aprenderes a criar os teus pr√≥prios c√≥digos!
            3:
                story_text: |
                    No n√≠vel 3 tamb√©m podes criar uma lista. Podes fazer o computador escolher algo aleat√≥rio (ou seja, uma coisa ao calhas) dessa lista. Fazes isso utilizando 'at random'.

                    Encontras todos os c√≥digos do n√≠vel 3 na barra esquerda. Temos tamb√©m separadores com tarefas.
            4:
                story_text: |
                    `ask` funciona no n√≠vel 4 tal como funcionava no n√≠vel 3, mas `print` est√° diferente agora.

                     Tens de colocar o texto que queres escrever entre aspas simples.

                     Isto √© √∫til, porque agora podes escrever todas as palavras que queres. O mesmo se aplica √†s palavras com que costumavas guardar algo usando `is`.

                     A maioria das linguagens de programa√ß√£o tamb√©m usam aspas simples quando querem escrever, por isso, estamos um passo mais pr√≥ximos da realidade da programa√ß√£o!

                     Vais encontrar os comandos √† esquerda, novamente, e as tarefas nos separadores seguintes. √Ä medida que avan√ßas pelos separadores, as tarefas v√£o ficando mais dif√≠ceis.
                     Por isso, √© melhor come√ßares pela esquerda na hist√≥ria e ires avan√ßando para a direita, para que o desafio v√° aumentando, gradualmente.
                example_code: |
                    ```
                    print 'You need to use quotation marks from now on!'
                    answer is ask 'What do we need to use from now on?'
                    print 'We need to use ' answer
                    ```
            5:
                story_text: |
                    `ask` e `print` funcionam como no n√≠vel 4.

                     No n√≠vel 5 temos algo novo, o `if`! Com o `if` podes escolher entre duas op√ß√µes diferentes.

                     Este c√≥digo escreve Fixe! se colocares Hedy como nome e boo! se colocares outra coisa qualquer.


                     Tamb√©m no n√≠vel 5 as tarefas que vais encontrar nos separadores est√£o a tornar-se mais dif√≠ceis. Por isso, completa-as da esquerda para a direita.
                example_code: |-
                    ```
                    nome is ask 'Como te chamas?'
                    if nome is Hedy print 'Fixe!' else print 'boo!'
                    ```
            6:
                story_text: |
                    No n√≠vel anterior praticou com `{ask}` e `{if}`. Por exemplo, pode perguntar aos convidados o que eles gostariam de comer.
                    O que ainda n√£o pode fazer √© calcular o pre√ßo do jantar de todos.

                    Este n√≠vel permite utilizar a adi√ß√£o, a subtra√ß√£o e a multiplica√ß√£o nos seus programas. Desta forma, podes calcular os pre√ßos no teu restaurante, mas tamb√©m podes acrescentar um c√≥digo secreto para fazeres um desconto aos teus amigos e familiares.
                    Outra op√ß√£o neste n√≠vel √© programar o teu pr√≥prio jogo de matem√°tica, para o teu irm√£o ou irm√£ mais novos praticarem as multiplica√ß√µes.
                    V√™ por ti pr√≥prio!
                example_code: |-
                    ```
                    print '5 mais 5 √© ' 5 + 5
                    print '5 menos 5 √© ' 5 - 5
                    print '5 vezes 5 √© ' 5 * 5
                    ```
            7:
                story_text: |
                    `ask`, `print` e `if` funcionam, exactamente, como acontecia no n√≠vel 5 e 6.
                    Mas o n√≠vel 7 acrescenta o comando `repeat`.  `repeat` pode ser usado para executar uma linha de c√≥digo m√∫ltiplas vezes.
                example_code: |-
                    ```
                    repeat 3 times print 'Hedy √© divertida!'
                    ```
            8:
                story_text: |
                    `ask` e `print` ainda funcionam como j√° conheces. Mas `if` e `repeat` mudaram!
                    Tu podes agora executar grupos de c√≥digo em conjunto, mas vais ter de indentar o c√≥digo.
                    Isto significa colocar quatro espa√ßos no in√≠cio da linha. Isto tamb√©m se aplica quando quiseres apenas criar um bloco s√≥ de uma linha.

                    Se juntares um `repeat` e um `if`, ter√°s de indentar cada bloco. Observa o exemplo de c√≥digo para mais detalhes!"
                example_code: |-
                    ```
                    repeat 5 times
                        print 'Ol√° a todos!'
                        print 'Tudo isto √© repetido 5 vezes.'
                    ```
            9:
                story_text: |
                    In this level you can not only use multiple lines with `if` and `repeat`, but you can also put them together!
                    In the example you see an `if` command within a `repeat` command. It is also allowed the other way around, and an `if` is also allowed in an `if` and a `repeat` in a `repeat`.
                    Give it a try!
                example_code: |-
                    ```
                    repeat 3 times
                        food = ask 'What do you want?'
                        if food is 'pizza'
                            print 'nice!'
                        else
                            print 'pizza is better'
                    ```
            10:
                story_text: |
                    In this level we learn a new code called `for`. With `for` you can make a list and use all elements.
                    `for` creates a block, like `repeat` and `if` so all lines in the block need to start with spaces.
                example_code: |-
                    ```
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animal
                    ```
            12:
                story_text: |-
                    **Decimal numbers**
                    So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.
                example_code: |
                    ```
                    {print} 'Two and a half plus two and a half is...'
                    {print} 2.5 + 2.5
                    ```

                    {print} 2.5 + 2.5
            13:
                story_text: Vamos agora aprender `and` e `or`! Se queres verificar duas instru√ß√µes, n√£o precisas de usar dois `if` mas podes usar `and` e `or`. Se utilizares `and`, ambas as instru√ß√µes, √† esquerda e √† direita do `and` t√™m de ser verdadeiras. Podemos tamb√©m utilizar `or`. Neste caso, apenas uma das instru√ß√µes tem de ser verdadeira.
                example_code: |
                    ```
                    name = ask 'what is your name?'
                    age = ask 'what is your age?'
                    if name is 'Hedy' and age is 2
                        print 'You are the real Hedy!'
                    ```
            14:
                story_text: Vamos aprender mais coisas novas! Podes j√° ter aprendido sobre elas na Matem√°tica, o `<` e `>`. O `<` verifica se o primeiro n√∫mero √© menor que o segundo, como `4 < 5`. O `>` verifica se o primeiro n√∫mero √© maior que o segundo, como `6 > 5`.
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```

                    if idade < 13
                        print '√âs mais novo a do que eu!'
                    else
                        print '√âs mais velho a do que eu!'
            15:
                story_text: Vamos aprender um ciclo novo, o ciclo `while`! Continuamos o ciclo enquanto a instru√ß√£o for verdadeira/v√°lida! Portanto, no exemplo de c√≥digo, continuamos at√© ser dada a resposta certa. Se a resposta correcta nunca for dada, o ciclo nunca acaba!
                example_code: |
                    ```
                    answer = 0
                    while answer != 25
                        answer = ask 'What is 5 times 5?'
                    print 'A correct answer has been given'
                    ```
            16:
                story_text: "N√≥s vamos criar listas do jeito do Python, com par√™ntesis reto ao redor das listas! N√≥s tamb√©m mantemos as aspas em torno de cada item, como n√≥s aprendemos nos n√≠veis anteriores. \nTamb√©m pode usar os par√™ntesis para indicar um lugar nas listas."
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    {print} friends[1] ' is the first friend on the list.'
                    {print} friends[2] ' is the second friend on the list.'
                    {print} friends[3] ' is the third friend on the list.'
                    #now we will match 2 lists using the variable i
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} friends[i] 's lucky number is ' lucky_numbers[i]
                    ```
            17:
                story_text: "Agora, n√≥s vamos alterar um pouco a indenta√ß√£o. Cada vez que n√≥s precisarmos de uma indenta√ß√£o, n√≥s temos de colocar `:` na linha antes da indenta√ß√£o. \n \nNeste n√≠vel, tamb√©m pode usar um novo comando:  `{elif}`. `{elif}` √© curto para `{else} {if}` e precisa disto quando quiser criar 3 (ou mais!) op√ß√µes.\nD√™ uma vista de olhos!"
            18:
                story_text: |-
                    We arrived at real Python code! That means we need to use parentheses with {print} and {range} from now on.
                    {print}('My name is ', naam)
    dice:
        levels:
            4:
                story_text: |
                    In this level we can make sentences with the die value in the sentence, with quotes of course.
                    This time the sample code is not quite complete. Can you finish the code?
            5:
                story_text: |
                    You can also make a die again in this level using the `{if}`.
                    Complete the sample code so that the code says "You can stop throwing" once you have thrown an earthworm.

                    But maybe you want to recreate a die from a completely different game. That's fine too! Then make up your own reaction. Eg 'yes' for 6 and 'pity' for something {else}.
            6:
                story_text: |
                    You can also make an Earthworm die again in this, but now you can also calculate how many points have been rolled.
                    You may know that the worm counts 5 points for Earthworms. Now after a roll you can immediately calculate how many points you have thrown.
                    This is the code to calculate points for one die:
                example_code_2: |
                    Did you manage to calculate the score for 8 dice? That required a lot of cutting and pasting, right? We are going to make that easier in level 7!
            7:
                story_text: |
                    You can also make a die again in level 5. With the `{repeat}` code you can easily roll a whole hand of dice.
                    Try to finish the sample code! The dashes should contain multiple commands and characters.

                    But maybe you want to make a completely different die. Of course you can!
            10:
                story_text: |
                    Is everybody taking too long throwing the dice? In this level you can let Hedy throw all the dice at once!
    dishes:
        description: Use the computer to see who does the dishes (Start at level 2)
        levels:
            3:
                story_text: |
                    Do you always disagree at home about who should wash the dishes or change the litter box today?
                    Then you can let the computer choose very fairly. You can program that in this level!
                    You first make a list of the members of your family. Then choose '{at} {random}' from the list.
                story_text_2: |
                    Don't feel like doing the dishes yourself? Hack the program to remove your name from the list.
            4:
                story_text: |
                    With quotation marks you can make your dishwashing planning more beautiful.
                    This time the sample code is not quite complete.

                    Can you complete the code by filling the blanks? Every blank must be replaced with one word of symbol.

                    Tip: Don't forget the quotation marks!
            5:
                story_text: |
                    With the `{if}` you can now have more fun with choice in the program. You can have your program respond to the choice that the computer has made.

                    Can you finish the code so that it prints 'too bad' when it is your turn and otherwise 'yes!'?
                    Don't forget the quotes!
            6:
                story_text_2: |
                    If you are extremely unlucky the previous program might choose you to to the dishes for the whole week! That's not fair!
                    To create a fairer system you can use the `{remove}` command to remove the chosen person from the list. This way you don't have to do the dishes again untill everybody has had a turn.

                    Monday and tuesday are ready for you! Can you add the rest of the week?
                    And... can you come up with a solution for when your list is empty?
                example_code_2: |
                    ```
                    people = mom, dad, Emma, Sophie
                    dishwasher = people {at} {random}
                    {print} 'Monday the dishes are done by: ' dishwasher
                    {remove} dishwasher {from} people
                    dishwasher = people {at} {random}
                    {print} 'Tuesday the dishes are done by: ' dishwasher
                    {remove} dishwasher {from} people
                    dishwasher = people {at} {random}
                    ```
            7:
                story_text: |
                    With the `{repeat}` you can repeat pieces of code. You can use this to calculate who will be washing dishes for the entire week.
            10:
                story_text: |
                    In this level you could make an even better dish washing shedule.
    elif_command:
        description: elif
        levels:
            17:
                example_code: |
                    ```
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
                    ```
    for_command:
        description: for command
        levels:
            11:
                story_text: |-
                    In this level, we add a new form of the `{for}`. In earlier levels, we used `{for}` with a list, but we can also use `{for}` with numbers.
                    We do that by adding a variable name, followed by  `{in}` `{range}`. We then write the number to start at, `{to}` and the number to end at.
                    Try the example to see what happens! In this level again, you will need to use indentations in lines below the `{for}` statements.
    fortune:
        levels:
            1:
                story_text: |
                    Have you ever been to a carnival and had your future predicted by a fortune teller? Or have you ever played with a magic eight ball?
                    Then you probably know that they can't really predict your future, but it's still fun to play!

                    In the upcoming levels you can learn how to create your own fortune telling machine!
                    In level 1 you can start off easy by letting Hedy introduce herself as a fortune teller and let her {echo} the players' answers.
                    Like this:
                story_text_2: |
                    ### Exercise
                    Hedy now only tells you your name. Can you expand the code so that Hedy can predict more things about you?
                    Obviously, Hedy isn't a very good fortune teller yet, as she can only repeat the answers that were given by the players!
                    Take a look in level 2 to improve your fortune teller.
            3:
                story_text: |
                    In the previous levels you've created your first fortune telling machine, but Hedy couldn't really predict anything, only {echo}.
                    In this level you can use a variable and the `{at} {random}` command to really let Hedy choose an answer for you. Check out this code for instance:
                example_code: |
                    Neste exemplo o jogador pode {ask} Hedy uma quest√£o 'sim-n√£o' e Hedy ir√° escolher uma resposta aleatoriamente para si.
                    ```
                    {print} Eu sou Hedy o adivinho!
                    quest√£o {is} {ask} O que quer saber?
                    {print} Isto √© o que quer saber: quest√£o
                    respostas {is} sim, n√£o, talvez
                    {print} A minha bola de cristal diz...
                    {sleep} 2
                    {print} respostas {at} {random}
                    ```
                story_text_2: |
                    ### Exercises
                    Now, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or '{ask} again'.
            5:
                story_text: |
                    In this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!
                    By using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.
                    Check out this example to find out how.
            6:
                story_text: |
                    In this level you can use math in your predictions as a fortune teller. This allows you to make up (silly) formulas to calculate the future.
                    For example you could calculate how rich you'll get or how many kids you will have when you grow up.
            7:
                story_text: |
                    In this level you can use the `{repeat}` command to make your machine tell multiple fortunes at once.
            8:
                story_text: |
                    In the previous levels you've learned how to use repeat to make the fortune teller answer 3 questions in a row, but we had a problem with printing the questions.
                    Now that problem is solved, because of the new way of using the repeat command.
                    In the next example you can have your fortune teller {ask} 3 questions and also print them!
                example_code: |
                    ```
                    {print} 'I am Hedy the fortune teller!'
                    {print} 'You can ask me 3 questions.'
                    answers = yes, no, maybe
                    _ _ _
                       question = {ask} 'What do you want to know?'
                       {print} question
                       {sleep}
                       {print} 'My crystal ball says...' answers {at} {random}
                    ```
            10:
                story_text: |
                    In this level you'll learn how to program the game MASH (mansion, apartement, shack, house). In this game you can predict for all the players at once, what their future will look like.
            12:
                story_text: |
                    In this level you can make your fortunes multiple words. Like in this example below:
    functions:
        levels:
            12:
                example_code: |
                    ```
                    sides = 'left', 'right'
                    limbs = 'hand', 'foot'
                    colors = 'red', 'blue', 'green', 'yellow'

                    {define} turn
                        chosen_side = sides {at} {random}
                        chosen_limb = limbs _
                        chosen_color = colors _
                        {print} chosen_side ' ' chosen_limb ' on ' chosen_color

                    {print} 'Lets play a game of Twister!'
                    {for} i {in} {range} 1 to _
                        {call} turn
                        {sleep} 2
                    ```
            13:
                story_text: |
                    Now that you've learned how to use functions, you'll learn how to use a function with an argument.
                    An **argument** is a variable that is used within a function. It is not used outside the function.

                    For example in this code we've programmed the first verse of the song 'My Bonnie is over the ocean'.
                    In this example code the argument `place` is used. Place is a variable that is only used in the function, so an argument.
                    To use `place` we have programmed the line `define song with place`.
                    When the function is called, computer will replace the argument `place`, with the piece of text after `call song with`.

                    ### Exercise
                    The next verse of this song goes:

                    Last night as I lay on my pillow
                    Last night as I lay on my bed
                    Last night as I lay on my pillow
                    I dreamed that my Bonnie is dead

                    Can you program this verse in the same way as the example?
            14:
                example_code: |
                    ```
                    {define} calculate_new_price {with} amount, percentage
                        percentage = percentage / 100
                        discount_amount = amount * percentage
                        return amount - discount_amount

                    old_price = {ask} 'How much is on the price tag?'
                    discount = {ask} 'What percentage is the discount?'

                    new_price = _ calculate_new_price {with} old_price, _
                    {print} 'The new price is ' new_price ' dollar'
                    ```
    haunted:
        levels:
            1:
                story_text: |
                    In this adventure you are working towards making a game in which you have to escape from a haunted house by picking the correct door.
                    If you pick the right door you'll survive, but {if} not a terrible monster might...

                    In level 1 we start our haunted house game by making up a scary story and {ask} the player what monster they'll see in the haunted house.
                story_text_2: |
                    Can you finish the scary story? Or make up your own haunted house story?
            2:
                example_code: |
                    ```
                    monster_1 {is} üëª
                    monster_2 {is} ü§°
                    monster_3 {is} üë∂
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
                example_code_2: |
                    ```
                    monster_1 {is} _
                    monster_2 {is} _
                    monster_3 {is} _
                    {print} You enter the haunted house.
                    {print} Suddenly you see a monster_1
                    {print} You run into the other room, but a monster_2 is waiting there for you!
                    {print} Oh no! Quickly get to the kitchen.
                    {print} But as you enter monster_3 attacks you!
                    ```
            3:
                story_text: |
                    In the previous levels you've made an introduction to your haunted house game, but as you might have noticed the story would always have a dreadful end.
                    In this level you can make your story more interactive by changing the outcome of the game; sometimes you'll get eaten, sometimes you'll escape!
                    Let Hedy decide randomly!
            4:
                story_text: |
                    In this level you learn how to use quotation marks in your games.
                    Can you make your Haunted House level 4 proof?
                example_code: |
                    ```
                    {print} _Escape from the haunted house!_
                    {print} _There are 3 doors in front of you..._
                    choice {is} {ask} _Which door do you choose?_
                    {print} _You picked door ..._ choice
                    monsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED
                    {print} _You see..._
                    {sleep}
                    {print} monsters {at} {random}
                     ```
            5:
                story_text: |
                    Up until this level the haunted house game always asked the player to choose a door, but as you might have noticed, they didn't really have to answer correctly.
                    If the player filled in a completely random answer, the game would still work and the player might even win (despite not picking a door).
                    In this level you can only win the game by picking the same door Hedy picked randomly.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house!'
                    {print} 'There are 3 doors in front of you...'
                    doors {is} 1, 2, 3
                    monsters {is} werewolf, mummy, vampire, zombie
                    chosen_door {is} {ask} 'Which door do you choose?'
                    {print} 'You chose door...' chosen_door
                    {sleep}
                    correct_door {is} doors {at} {random}
                    {if} chosen_door {is} correct_door {print} 'Great! Youve escaped!'
                    {else} {print} 'Oh no! You are being eaten by a...' monsters {at} {random}
                    ```
            9:
                story_text: |
                    In this level you can use nesting, which allows you to make the haunted house even more interactive!

                    Now it's very hard to win this game, can you make it easier to win?
                    For example by only having 1 wrong door and 2 correct doors instead of 1 correct door and 2 wrong ones?
            11:
                story_text: |
                    In this level we've changed the repeat command and we've added a line to our haunted house that tells the player in which room they are.
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player {is} alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    {for} i {in} {range} 1 {to} 3
                        {if} player {is} alive
                            correct_door = doors {at} {random}
                            {print} 'Room ' i
                            {print} 'There are 3 doors in front of you...'
                            chosendoor = {ask} 'Which door do you choose?'
                            {if} chosendoor {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
    if_command:
        description: Introducing the if command
        levels:
            9:
                story_text: |
                    In this level you can also put an {if} command inside another {if} command.
    in_command:
        description: Introducing the in command
        levels:
            5:
                example_code_2: |
                    ```
                    animals is dog, cow, sheep
                    answer is ask 'What is your favorite animal?'
                    _ answer _ animals _ 'Mine too!'
                    _ _ 'My favorite animals are dogs, cows and sheep'
                    ```
    is_command:
        description: introducing is command
        levels:
            2:
                story_text_2: |
                    ### Exercise
                    Time to make your own variables!
                    In the example code we made an example of the variable `favorite_animal`. In line 1 the variable is set, and in line 2 we haved used the variable in a print command.
                    Firstly, finish our example by filling in your favorite animal on the blank. Then make at least 3 of these codes yourself. Pick a variable, and set the variable with the {is} command. Then use it with a {print} command, just like we did.
            14:
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```
    language:
        levels:
            5:
                story_text: |
                    Make your own program to practice your vocabulary in a new language.
    maths:
        levels:
            6:
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 minus 5 is ' 5 - 5
                    {print} '5 times 5 is ' 5 * 5
                    ```
            12:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```

                    {print} 2.5 + 2.5
    music:
        levels:
            6:
                story_text: "Instead of playing notes, you can also play numbers now. Simply type `{play} 1` for the lowest note, `{play} 70` for the highest note, or anything in between.\n\n### Exercise\n This calls for musical maths! Try out the example code a couple of times with different starting numbers. \nThen, see if you can compose a song using the numbers.\n"
    parrot:
        levels:
            1:
                story_text_2: |
                    ### Exercise
                    Can you make the parrot ask a different question? Fill in the blanks in the example!
            2:
                story_text: |
                    Create your own online pet parrot that will copy you!
                story_text_2: |
                    ### Exercise
                    You can use variables to make the parrot say more than only your name. Can you complete this code?
            3:
                story_text: |
                    Teach your parrot a new word with `{add}`.
            4:
                story_text: |
                    In this level we have to use quotation marks with the commands `{ask}` and `{print}`.
                    Can you complete the code by adding quotation marks?
            5:
                story_text: |
                    Reward your parrot {if} it says the correct word!
    piggybank:
        levels:
            12:
                story_text: |
                    In this adventure you learn how to make a digital piggy bank, to calculate how much money you have and how long you need to save up to buy what you want!
            14:
                example_code: |
                    ```
                    _ calculate_budget with wish, money, allowance
                        to_save = wish - money
                        weeks = to_save / allowance
                        {if} wish _ money
                            {print} 'You need to save up some more!'
                            {print} 'Youll need ' weeks ' more weeks.'
                        {else}
                            {print} 'Great! You have enough'
                            {print} 'Lets go shopping!'

                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'

                    {call} calculate_budget with _, _, _
                    ```
    pressit:
        levels:
            9:
                story_text: |
                    Now that you know how to combine statements, you can create a touch type tool with `{pressed}`.

                    ### Exercise
                    Finish the code. Each time a random letter should be chosen, which you have to press. You get a point for a correct press, and and two points deduction for a wrong press.
                    **(extra)** Clear the screen after each letter, and show the user how many points they have scored.
    random_command:
        levels:
            16:
                story_text: |-
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    We use square brackets to point out a place in a list. For example: `friends[1]` is the first name on the list of friends, as you can see in the first part of the example code. The second part of the example code shows you that we can also match 2 lists using the variable i.
    repeat_command:
        description: repeat command
        levels:
            7:
                story_text: |
                    ## Repeat! Repeat! Repeat!
                    Level 7 adds the `{repeat}` command.  `{repeat}` can be used to execute one line of code multiple times. Like this:

                    ### Exercise
                    Play around with the repeat command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?
            9:
                story_text: |
                    Great job! You've reached another new level! In the previous level you've learned to use multiple lines of code in an {if} or {repeat} command. But you can't yet combine the two...
                    Good news! In this level you will be allowed to put an {if} inside an {if}, or inside a {repeat} command. Putting a block of code inside another block of code is called nesting.                     ``` Putting a block of code inside another block of code is called nesting.
                example_code: |
                    ```
                    answer = {ask} 'Are you ready to learn something new?'
                    {if} answer {is} yes
                        {print} 'Great! You can learn to use the repeat command in the if command!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                    {else}
                        {print} 'Maybe you should practice some more in the previous level'
    repeat_command_2:
        description: repeat command 2
        levels:
            7:
                story_text_2: |
                    Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.
                    Then, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.
    restaurant:
        levels:
            1:
                story_text_2: |
                    Can you think of more lines to add to your restaurant code? For example, can you {ask} the guests what they'd like to drink, tell them the price, or wish them a pleasant meal?
                example_code_2: |
                    ```
                    {print} Welcome to Hedy's restaurant üçü
                    {ask} What would you like to order?
                    {echo} So you would like to order
                    {print} Thanks you for your order!
                    {print} It's on its way!
                    ```
            2:
                story_text: |
                    In level 2 you could expand your restaurant by using variables. In level 1 Hedy could only {echo} the order once and only remember the last thing that was ordered.
                    Now you can use variables and Hedy can remember both the food and the drinks!
                example_code: |
                    ```
                    {print} Welcome to Hedy's restaurant!
                    {print} Today we're serving pizza or lasagna.
                    food {is} {ask} What would you like to eat?
                    {print} Great choice! The food is my favorite!
                    topping {is} {ask} Would you like meat or veggies on that?
                    {print} food with topping is on its way!
                    drinks {is} {ask} What would you like to drink with that?
                    {print} Thank you for your order.
                    {print} Your food and drinks will be right there!
                    ```
                story_text_2: |
                    ### Exercise
                    Can you make this code more elaborate? For example by adding drinks to the order? Or...?
            3:
                example_code: |
                    ```
                    {print} Welcome to Hedy's Random Restaurant!
                    {print} The only restaurant that will randomly choose your meal and its price for you!
                    starters {is} salad, soup, carpaccio
                    mains {is} pizza, brussels sprouts, spaghetti
                    desserts {is} brownies, ice cream, french cheeses
                    drinks {is} cola, beer, water
                    prices {is} 1 dollar, 10 dollars, 100 dollars
                    {print} You will start with: starters {at} {random}
                    {print} Then we'll serve: mains {at} {random}
                    {print} And as dessert: desserts {at} {random}
                    {print} You will get a drinks {at} {random} to drink
                    {print} That will be: prices {at} {random}
                    {print} Thank you and enjoy your meal!
                    ```
                story_text_2: |
                    Does your costumer have any allergies or do they dislike certain dishes? Then you can use the `{remove}`command to remove it from your menu.
                example_code_2: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    allergies {is} {ask} Are you allergic to any falvors?
                    {remove} allergies {from} flavors
                    {print} You get a flavors {at} {random} milkshake
                    ```
            4:
                story_text: |
                    ### Exercise
                    Add the quotation marks to this code to make it work! Be careful: variables should not be in quotation marks.
                    Then, use the `{clear}` command to only show one line at a time in your output screen.

                    ### Exercise 2
                    Go back to the previous level and copy your restaurant code. Make the code work in this level by adding quotation marks in the right spots and add some `{clear}` commands.
            5:
                story_text: |
                    In this level the {if} command allows you to {ask} your customers questions and give different responses to the answers.
                    In the example below, you see that you can {ask} the customer {if} they want to hear the specials and Hedy can respond accordingly.
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    special {is} {ask} 'Would you like to hear our specials today?'
                    {if} special {is} yes {print} 'Todays special is chicken piri piri and rice.' {else} {print} 'No problem.'
                    food {is} {ask} 'What would you like to eat?'
                    {print} 'One ' food ', coming right up!'
                    drink {is} {ask} 'What would you like to drink with that?'
                    {if} drink {is} cola {print} 'Im sorry, we are out of cola!' {else} {print} 'Great choice!'
                    anything {is} {ask} 'Would you like anything {else}?'
                    {print} 'Let me repeat your order...'
                    {print} 'One ' food
                    {if} drink {is} cola {print} 'and...' {else} {print} 'One ' drink
                    {if} anything {is} no {print} 'Thats it!' {else} {print} 'One ' anything
                    {print} 'Thank you for your order and enjoy your meal!'
                    ```
            6:
                story_text: |
                    In this level you can use maths to calculate the total price of your customer's order, which can make your virtual restaurant more realistic.
            7:
                story_text: |
                    In this level you've learned how to use the {repeat} command to repeat a line of code a certain amount of times.
                    You can use that in your restaurant to {ask} multiple people what they'd like to eat. Like this:
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people are joining us today?'
                    {repeat} people times food = {ask} 'What would you like to eat?'
                    {print} 'Thanks for your order! Its coming right up!'
                    ```
            9:
                story_text: |
                    In this level you can use nesting to make your restaurant more realistic and more fun!
                    For example you would {ask} for sauce {if} somebody orders fries, but you wouldn't {if} someone orders pizza!
                    Check out the example, and try this at your own virtual restaurant!
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people will be joining us today?'
                    {print} 'Great!'
                    price = 0
                    {repeat} people {times}
                        food = {ask} 'What would you like to order?'
                        {print} food
                        {if} food {is} fries
                            price = price + 3
                            sauce = {ask} 'What kind of sauce would you like with your fries?'
                            {if} sauce {is} no
                                {print} 'no sauce'
                            {else}
                                price = price + 1
                                {print} 'with ' sauce
                        {if} food {is} pizza
                            price = price + 4
                    {print} 'That will be ' price ' dollar'
                    {print} 'Enjoy your meal!'
                    ```
            10:
                story_text: |
                    In this level you'll learn how to easily {ask} your guests' orders in a short code.
                example_code: |
                    ```
                    courses = appetizer, main course, dessert
                    {for} course {in} courses
                        food = {ask} 'What would you like to eat as your ' course '?'
                        {print} food ' will be your ' course
                    ```
                example_code_2: |
                    ```
                    courses = appetizer, main course, dessert
                    names = Timon, Onno
                    {for} name {in} names
                        {for} course {in} courses
                            food = {ask} name ', what would you like to eat as your ' course '?'
                            {print} name ' orders ' food ' as their ' course
                    ```
            11:
                story_text: |
                    We can use the `{for} i {in} {range} 1 {to} 5` to {print} the orders from multiple customers in an orderly manner.
                example_code: |
                    ```
                    {print} 'Welcome to Restaurant Hedy!'
                    people = {ask} 'For how many people would you like to order?'
                    {for} i {in} {range} 1 {to} people
                        {print} 'Order number ' i
                        food = {ask} 'What would you like to eat?'
                        {print} food
                        {if} food {is} fries
                            sauce = {ask} 'What kind of sauce would you like with that?'
                            {print} sauce
                        drinks = {ask} 'What would you like to drink?'
                        {print} drinks
                    price = 4 * people
                    {print} 'That will be ' price ' dollars, please!'
                    ```
            12:
                story_text: |
                    From this level on you can use decimal numbers to make you menu more realistic.
                example_code: |
                    ```
                    price = 0
                    food = {ask} 'What would you like to order?'
                    drink = {ask} 'What would you like to drink?'
                    {if} food {is} 'hamburger'
                        price = price + 6.50
                    {if} food {is} 'pizza'
                        price = price + 5.75
                    {if} drink {is} 'water'
                        price = price + 1.20
                    {if} drink {is} 'soda'
                        price = price + 2.35
                    {print} 'That will be ' price ' dollar, please'
                    ```
            13:
                story_text: |
                    In this level we can use the new commands to upgrade our restaurant.
                    We use `{and}` to see {if} two things are both the case.
                example_code: |
                    ```
                    price = 10
                    food = {ask} 'What would you like to eat?'
                    drinks = {ask} 'What would you like to drink?'
                    {if} food {is} 'sandwich' {and} drinks {is} 'juice'
                        {print} 'Thats our discount menu'
                        price = price - 3
                    {print} 'That will be ' price ' dollars'
                    ```
    rock:
        default_save_name: Rock
        levels:
            2:
                story_text: |
                    In this level you can practise using the variables, so that you can make the rock, paper, scissors game in the next level!
            3:
                story_text_2: |
                    ### Exercise
                    Now you only have one player, so can you add a second player?
                    You can even use variables to name player 1 and player 2.
                example_code_2: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} player 1 chooses... choices {at} {random}
                    {print} player 2 _
                    ```
            5:
                story_text: |
                    In this level we can determine who won.
                    For that you need the new `{if}` code.

                    Save your choice with the name of choice and the choice of computer as computer choice.
                    Then you can use `{if}` to see {if} they are the same or different.
                    Will you finish the code?
            9:
                story_text: |
                    In this level you can program the whole rock, paper, scissors game by nesting the {if}-commands. Can you finish the code?
                example_code: |
                    ```
                    choices = rock, paper, scissors
                    your_choice = {ask} 'What do you choose?'
                    {print} 'You choose ' your_choice
                    computer_choice = choices {at} {random}
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} rock
                        {if} your_choice {is} paper
                            {print} 'You win!'
                        {if} your_choice {is} scissors
                            {print} 'You lose!'
                    # finish this code
                    ```
            10:
                story_text: |
                    Feeling too lazy to play the game yourself? Let Hedy play it for you!
            13:
                story_text: |
                    With the `{and}` command you can shorten your rock, paper, scissors code! Check out the example code below and try to finish it.
    rock_2:
        levels:
            2:
                story_text: |
                    Now that you have learned how to use the `{ask} command, you can make your rock, paper, scissors code interavtive too!

                    ### Exercise
                    Make the rock, paper, scissors code interactive by adding the `{ask}` command and a question to your rock, paper, scissors code.
                example_code: |
                    ```
                    choice is _
                    {print} I choose choice
                    ```
    secret:
        default_save_name: language
        levels:
            12:
                story_text: |
                    In this adventure you can create your own super spy code. Encode a message that only the right agent can decipher.
                    If the enemy tries to crack the code, they will get some false info to waste their time.
                example_code: |
                    ```
                    name {is} {ask} 'What is your name?'
                    {if} name {is} '_'
                        a {is} 'Go to the airport '
                    {else}
                        a {is} 'Go to the trainstation '
                    password {is} {ask} 'What is the password?'
                    {if} password {is} _
                        b {is} 'tomorrow at 02.00'
                    {else}
                        b {is} 'today at 10.00'
                    {print} _ _ _
                    ```
            13:
                story_text: |
                    The code you made in the previous level can be made a lot easier in this one with the `{and}` command.
    sleep_command:
        description: introducing sleep command
        levels:
            2:
                story_text: |
                    ## The sleep command
                    Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.
    songs:
        levels:
            6:
                story_text: |
                    Songs often contain a lot of repetition. Sometimes the repetition is also based on counting.
                    For example, in the well-known song 'Bottles of beer'. You can program that song with a little math.
                example_code_2: |
                    ```
                    number = 6
                    number = number - 1
                    print number ' little monkeys jumping on the bed'
                    print 'One fell off and bumped his head'
                    print 'Mama called the doctor and the doctor said'
                    print 'NO MORE MONKEYS JUMPING ON THE BED!'
                    sleep
                    ```
            7:
                story_text: |
                    Songs often contain a lot of repetition. For example... Baby Shark! If you sing it, you keep singing the same thing:

                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark

                    You can make this song much shorter with a `{repeat}`! Can you finish the code?
            8:
                story_text: |
                    In a previous level you've programmed the song 'Bottles of beer'. You made one verse and then had to copy the verses 99 times. In level 7 you can repeat the song 99 times, just by adding one simple line!
            10:
                story_text: |
                    In this level you can easily make the childrens' song 'Five little monkeys'. Can you make the last chorus?
                    You can also make the whole baby shark song (including all the other sharks in the family) in only 6 lines!
                    Or you can make Old MacDonald with all the different animals.
                example_code: |
                    ```
                    monkeys = 5, 4, 3, 2
                    {for} monkey {in} monkeys
                        {print} monkey ' little monkeys jumping on the bed'
                        {print} 'One fell off and bumped his head'
                        {print} 'Mama called the doctor and the doctor said'
                        {print} 'NO MORE MONKEYS JUMPING ON THE BED!'
                    ```

                    ```
                    sharks = baby, mommy, daddy, grandma, grandpa
                    {for} shark {in} sharks
                        {print} shark 'tututututudu'
                        {print} shark 'tututututudu'
                        {print} shark 'tututututudu'
                        {print} shark
                    ```
                    ```
                    animals = pig, dog, cow
                    {for} animal {in} animals
                        {if} animal {is} pig
                            sound = oink
                        {if} animal {is} dog
                            sound = woof
                        {if} animal {is} cow
                            sound = moo
                        {print} 'Old MacDonald had a farm'
                        {print} 'E I E I O!'
                        {print} 'and on that farm he had a ' animal
                        {print} 'E I E I O!'
                        {print} 'with a ' sound sound ' here'
                        {print} 'and a ' sound sound ' there'
                        {print} 'here a ' sound
                        {print} 'there a ' sound
                        {print} 'everywhere a ' sound sound
                    ```
                story_text_2: |
                    ### Exercise 2
                    Print the song Five little moneys jumping on the bed. Look up the text if you don't remember.

                    **(extra)** Print the song Old MacDonald had a farm, and make sure all animals make a different sound, using an `{if}`.
            11:
                story_text: |
                    In this level you can use the `{for} i {in} {range}` command to make songs that use counting.
                example_code: |
                    ```
                    {for} i {in} {range} 5 {to} 1
                        {print} i ' little monkeys jumping on the bed'
                        {print} 'One fell off and bumped his head'
                        {print} 'Mama called the doctor and the doctor said'
                        {if} i {is} 1
                            {print} 'PUT THOSE MONKEYS RIGHT TO BED!'
                        {else}
                            {print} 'NO MORE MONKEYS JUMPING ON THE BED!'
                    ```
            12:
                story_text: |
                    In this song we can make it even easier to program '{if} you're happy and you know it, clap your hands'. Because we can put all of the actions in a variable, check it out:
    songs_2:
        levels:
            12:
                example_code: |
                    ```
                    {define} twinkle
                        {print} 'Twinkle'
                        {print} '...'

                    {call} twinkle
                    {print} 'Up above the world so high'
                    {print} 'Like a diamond in the sky'
                    {call} _
                    ```
    turtle:
        default_save_name: turtle
        levels:
            2:
                story_text: |
                    In level 1 the turtle could only turn left or right. That is a bit boring!
                    In level 2 he can point his nose in all directions.

                    Use 90 to turn a quarter. We call this degrees. A full turn is 360 degrees.
                    Can you make a figure with this code? Maybe a triangle or a circle?
                example_code: |
                    ```
                    answer {is} {ask} How many steps should the turtle make?
                    {forward} answer
                    ```
                story_text_2: |
                    Also, in level 1 the turtle could only turn left or right. That is a bit boring!
                    In level 2 he can point his nose in all directions.

                    Use 90 to turn a quarter. We call this degrees. A full turn is 360 degrees.
                    Can you make a figure with this code? Maybe a triangle or a circle?
                example_code_2: |
                    ```
                    {print} Drawing figures
                    angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
            3:
                story_text: |
                    In this level you can use use `{random}` with the drawing turtle. A random choice makes the turtle walk a different path each time.
                    Use `{at} {random}` to choose a value from a list. You can copy and paste lines 2 and 3 to create a longer random path.
            5:
                example_code_2: |
                    ```
                    direction {is} {ask} 'Do you want to go left, right, or straight ahead?'
                    if direction is left turn _
                    if direction is right turn _
                    forward 100
                    ```
            8:
                story_text: |
                    Now that we can repeat several lines, we can make figures more easily.
                    We only have to set the angle once and then use that variable in the `{repeat}`.
                story_text_2: |
                    Also, we can now improve the program that draws different figures.
                    Can you figure out how far the turtle has to turn here? Finish the code and you can draw any polygon you'd like!
            9:
                story_text: |
                    Now that we can use a `{repeat}` inside a `{repeat}`, we can create more complex figures.

                    ### Exercise 1
                    This code creates three black triangles, change that into five pink squares.

                     **(extra)** Create a figure of your own choosing consisting of at least two different shapes types.
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                     **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
    turtle_draw_it:
        levels:
            9:
                example_code: |
                    Hint for the nested squares:
                    ```
                    colors = red, blue, orange, yellow, pink, purple, green, brown, black
                    distance = 120
                    repeat 5 times
                    _
                    ```
                    Hint for the flags:
                    ```
                    country = ask 'which country would you like to see the flag of?'
                    if country is 'the Netherlands'
                        color_1 = red
                        color_2 = white
                        color_3 = blue
                    ```
            10:
                example_code: |
                    Hint Nested Hexagon:
                    ```
                    distances = 100, 80, 60, 40, 20
                    {for} distance {in} distances
                    _
                    ```

                    Hint Traffic Lights:
                    ```
                    colors = red, yellow, green
                    {for} chosen_color {in} colors
                        color _
                        {repeat} _
                    ```
            12:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!
                    Hint: Bracelet designing program. Firstly, define a function **for each shape** you want to use on the bacelet. Then, add the shapes to the bacelet like this:
                    </div>
                    Bracelet Designing program <img src="https://github.com/hedyorg/hedy/assets/80678586/549d7f3a-c492-4b4a-b173-746eb3400951" width="500">
                example_code: |
                    ```
                    {define} draw_a_square
                    _

                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 180

                    {for} i {in} {range} 1 {to} 5
                        {color} gray
                        {forward} 100
                        shape = {ask} 'What kind of shape would you like next on the bracelet?'
                        chosen_color = {ask} 'In which color?'
                        {color} chosen_color
                        {if} shape = 'square'
                            {call} draw_a_square
                    ```
    while_command:
        description: while
    years:
        description: Countdown to the new year!
        levels:
            11:
                story_text: |
                    In this level you can use the `{for} i {in} {range}` command to countdown to the New Year.

                    ### Exercise
                    Fill in the blanks and make the code work!
                example_code: |
                    ```
                    for _ in _ 10 to 1
                        {print} i
                    {print} 'Happy New Year!'
                    ```
