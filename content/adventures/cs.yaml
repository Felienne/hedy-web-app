adventures:
    story:
        name: P≈ô√≠bƒõh
        default_save_name: P≈ô√≠bƒõh
        description: P≈ô√≠bƒõh
        levels:
            1:
                story_text: |
                    V √∫rovni 1 m≈Ø≈æete vytvo≈ôit p≈ô√≠bƒõh s jinou hlavn√≠ postavou, kterou sami zad√°te.

                    V prvn√≠m ≈ô√°dku pou≈æijte `{ask}` a zeptejte se, kdo bude hlavn√≠ postavou p≈ô√≠bƒõhu.

                    Po tomto prvn√≠m ≈ô√°dku zaƒçnƒõte `{print}`, pokud je t≈ôeba vƒõtu vytisknout.
                    `{echo}` pou≈æijte, pokud chcete, aby byla va≈°e hlavn√≠ postava na konci vƒõty.
                example_code: |
                    ```
                    {ask} Hlavn√≠ postavou tohoto p≈ô√≠bƒõhu je
                    {print} Hlavn√≠ postava se nyn√≠ chyst√° proch√°zet lesem
                    {echo} Trochu se boj√≠,
                    {print} V≈°ude sly≈°√≠ podivn√© zvuky
                    {print} Boj√≠ se, ≈æe je to stra≈°ideln√Ω les
                    ```
                story_text_2: |
                    ### Cviƒçen√≠
                    Nyn√≠ vytvo≈ôte vlastn√≠ p≈ô√≠bƒõh, kter√Ω bude m√≠t alespo≈à 6 ≈ô√°dk≈Ø k√≥du.
                    Tento p≈ô√≠bƒõh nesm√≠ b√Ωt stejn√Ω jako uk√°zkov√Ω k√≥d.
                    Pou≈æijte alespo≈à jeden p≈ô√≠kaz `{ask}` a jeden `{echo}`.
                    M≈Ø≈æete si vybrat jak√©koliv t√©ma, kter√© se v√°m l√≠b√≠.
                    Pokud nev√≠te, o ƒçem ps√°t, pou≈æijte nƒõkterou z na≈°ich mo≈ænost√≠: n√°v≈°tƒõva kina, sportovn√≠ z√°pas nebo den v zoo.
            2:
                story_text: |
                    Ve druh√© √∫rovni m≈Ø≈æete sv≈Øj p≈ô√≠bƒõh zpest≈ôit. Jm√©no va≈°√≠ hlavn√≠ postavy m≈Ø≈æe nyn√≠ b√Ωt kdekoli ve vƒõtƒõ.

                    Budete muset naprogramovat trochu v√≠ce. Nejprve mus√≠te pojmenovat svou hlavn√≠ postavu.

                    Pot√© m≈Ø≈æete toto jm√©no um√≠stit kdekoli ve vƒõtƒõ.
                example_code: |-
                    ```
                    jmeno {is} {ask} Jak√© je jm√©no hlavn√≠ postavy (holka)?
                    {print} jmeno nyn√≠ pobƒõ≈æ√≠ lesem
                    {print} jmeno je trochu vystra≈°en√°
                    {print} Najednou sly≈°√≠ podivn√Ω zvuk...
                    {sleep}
                    {print} jmeno se boj√≠, ≈æe je to stra≈°ideln√Ω les
                    ```
                story_text_2: |
                    ### Cviƒçen√≠
                    Nyn√≠ je ƒças p≈ôidat promƒõnn√© do va≈°eho vlastn√≠ho p≈ô√≠bƒõhu, kter√Ω jste vytvo≈ôili v p≈ôedchoz√≠ √∫rovni.
                    P≈ôejdƒõte do 'Moje programy', najdƒõte sv√© dobrodru≈æstv√≠ z √∫rovnƒõ 1 a zkop√≠rujte k√≥d. Vlo≈æte k√≥d do vstupn√≠ obrazovky v t√©to √∫rovni.

                    Tento k√≥d nebude fungovat v t√©to √∫rovni, proto≈æe jste je≈°tƒõ nepou≈æili promƒõnn√©.
                    Zmƒõ≈àte p≈ô√≠kazy `{ask}` a `{echo}` ve sv√©m k√≥du na spr√°vn√Ω form√°t, kter√Ω jste se nauƒçili v t√©to √∫rovni.

                    **Extra** P≈ôidejte p≈ô√≠kaz `{sleep}` do sv√©ho k√≥du, abyste zv√Ω≈°ili napƒõt√≠ ve sv√©m p≈ô√≠bƒõhu.
            3:
                story_text_2: |
                    The command `{add}` can also come in handy in your story. For example
                example_code_2: |
                    ```
                    {print} Sly≈°√≠ zvuk
                    zv√≠≈ôata {is} üêø, ü¶î, ü¶á, ü¶â
                    zvire {is} {ask} Co si mysl√≠≈°, ≈æe to je?
                    {add} zvire {to_list} zv√≠≈ôata
                    {print} to byla zv√≠≈ôata {at} {random}
                    ```
                story_text_3: |
                    This is an example of the `{remove}` command in your story
            5:
                story_text: |
                    In this level you can program different endings, which will make your story even more fun.

                    Think of two endings for your story, for example:

                    - The princess is walking through the forest
                    - She runs into a monster

                    - Happy ending: She takes her sword and the monster quickly runs away
                    - Bad Ending: The monster eats the princess

                    You can also ensure that a name can be entered again. That works just like in the previous levels. You can combine that with an `{if}`, and then you have already made a whole program!
                example_code: |
                    ```
                    name {is} {ask} 'Who is walking in the forest?'
                    {print} name 'walks through the forest'
                    {print} name 'encounter a monster'
                    end {is} {ask} 'Would you like a good or a bad ending?'
                    {if} end {is} good {print} name 'takes the sword and the monster quickly runs away'
                    {else} {print} 'The monster eats' name
                    ```
            7:
                story_text: |
                    V p≈ô√≠bƒõhu nƒõkdo opakuje slova nƒõkolikr√°t. Nap≈ô√≠klad, kdy≈æ nƒõkdo vol√° o pomoc nebo zp√≠v√° p√≠se≈à.
                    Takov√© opakov√°n√≠ m≈Ø≈æete vlo≈æit do sv√©ho p≈ô√≠bƒõhu, na t√©to √∫rovni s `{repeat}`.

                    ### Cviƒçen√≠
                    P≈ôidejte opakov√°n√≠ do sv√©ho vlastn√≠ho p≈ô√≠bƒõhu. Vra≈•te se ke sv√Ωm ulo≈æen√Ωm program≈Øm, vyberte sv≈Øj p≈ô√≠bƒõhov√Ω program z p≈ôedchoz√≠ √∫rovnƒõ a najdƒõte ≈ô√°dek obsahuj√≠c√≠ `{print}` a opakujte ho!
            8:
                story_text: |
                    Na t√©to √∫rovni m≈Ø≈æete pou≈æ√≠t v√≠ce ≈ô√°dk≈Ø ve va≈°ich `{if}` p≈ô√≠kazech, t√≠mto zp≈Øsobem m≈Ø≈æete vylep≈°it sv≈Øj ≈°≈•astn√Ω nebo smutn√Ω konec!

                    ### Cviƒçen√≠ 1
                    Uk√°zkov√Ω k√≥d zobrazuje dva r≈Øzn√© konce; jeden, kde postavy skoƒç√≠ do stroje ƒçasu, a druh√Ω, kde to neudƒõlaj√≠. Dopl≈àte mezery alespo≈à jednou vƒõtou na ka≈æd√Ω konec.
                    **Extra** Udƒõlejte p≈ô√≠bƒõh del≈°√≠. Co se v p≈ô√≠bƒõhu stane? M≈Ø≈æete tak√© p≈ôidat druh√Ω `{ask}` s r≈Øzn√Ωmi mo≈ænostmi.

                    ### Cviƒçen√≠ 2
                    Vra≈•te se ke sv√Ωm ulo≈æen√Ωm program≈Øm, vyberte sv≈Øj p≈ô√≠bƒõhov√Ω program z √∫rovnƒõ 5. Nyn√≠ napi≈°te dobr√Ω a ≈°patn√Ω konec, ka≈æd√Ω alespo≈à o t≈ôech vƒõt√°ch!
                example_code: |
                    ```
                    {print} 'JEJDA! T-rex se bl√≠≈æ√≠!'
                    end = {ask} 'Chcete ≈°≈•astn√Ω nebo smutn√Ω konec?'
                    {if} end {is} stastny
                        {print} 'Richard na posledn√≠ chv√≠li skoƒç√≠ zp√°tky do stroje ƒçasu!'
                        {print} _
                    {else}
                        {print} 'Oh ne! Richard je p≈ô√≠li≈° pomal√Ω...'
                        {print} _
                    ```
            9:
                story_text: |
                    In this level you can use nesting to put {if}, {repeat} or {for} commands inside other {if}, {repeat} or {for} commands. This gives you many options and really helps you to make your story interactive.
                example_code: |
                    ```
                    {print} 'Robin jde do centra mƒõsta'
                    location = {ask} 'Jde Robin do obchodu, nebo jde dom≈Ø?'
                    {if} location {is} obchodu
                        {print} 'Vstoup√≠ do obchodu.'
                        {print} 'Robin vid√≠ zaj√≠mavou knihu'
                        book = {ask} 'Koup√≠ si Robin knihu?'
                        {if} book {is} ano
                        _ {print} 'Robin si koup√≠ knihu a jde dom≈Ø'
                        _ {else}
                        _ {print} 'Robin opust√≠ obchod a jde dom≈Ø'
                    {else}
                        {print} 'Robin jde dom≈Ø'
                    ```
            10:
                story_text: |
                    In this level you can use the {for} command in your story. In this way you could easily program the children's book 'brown bear, brown bear, what do you see'.
                example_code: |
                    ```
                    zvirata = _ , _ , _ 
                    {print} 'Hnƒõd√Ω medvƒõde, hnƒõd√Ω medvƒõde'
                    {print} 'Co vid√≠≈°?'
                    ```
            12:
                story_text: |
                    In this level you can use the quotation marks to save multiple words in a variable.
                example_code: |
                    ```
                    jmeno = 'Kr√°lovna Velk√© Brit√°nie'
                    {print} jmeno ' jedla kousek dortu, kdy≈æ najednou‚Ä¶'
                    ```
            13:
                story_text: |
                    By using the `{and}` and `{or}` commands, you can shorten your stories. For example, check out the dragon story.
                example_code: |
                    ```
                    {print} 'N√°≈° hrdina kr√°ƒç√≠ lesem'
                    {print} 'Cesta se rozdvojuje'
                    cesta = {ask} 'Kterou cestu by mƒõla zvolit?'
                    zbran = {ask} 'Jakou zbra≈à vyt√°hne?'
                    {if} cesta {is} 'levou' {and} zbran {is} 'mec'
                        _
                    ```
            15:
                example_code: |
                    ```
                    keys = 'lost'
                    {print} 'You are standing in your garden and you have lost your keys.'
                    {print} 'Where do you want to look for them?'
                    {print} 'You can choose: tree, flowerbed, rock, postbox'
                    {while} keys == 'lost'
                        location = {ask} 'Where do you want to look?'
                        {if} location == 'flowerbed'
                            {print} 'Here they are!'
                            keys = 'found'
                        {else}
                            {print} 'Nope they are not at the ' location
                    {print} 'Now you can enter the house!'
            18:
                example_code: |
                    ```
                    {print}('V√≠tejte v tomto p≈ô√≠bƒõhu!')
                    ```
    add_remove_command:
        name: '{add} {to} & {remove} {from}'
        description: introducing add to and remove from
        levels:
            3:
                story_text: |
                    ## Add to
                    You can add items to the list with the `{add} {to_list}` command. To add an item to a list you can simply type: `{add} penguin {to} animals` or you can use the `{ask}` command like in the example code.
                story_text_3: |
                    ### Exercise
                    Try out the new commands in this virtual restaurant. Add the flavor the player is hpoing for to the list and remove the flavors they are allergic to.
    and_or_command:
        description: introducing and or
    ask_command:
        description: Introduction ask command
        levels:
            1:
                story_text_2: |
                    ## The echo command
                    If you want the computer to repeat the answer, you can use the `{echo}` command. The answer will then be echoed back at the end of the sentence, so in this example after hello.
            2:
                story_text: |
                    ## P≈ô√≠kaz ask
                    Nyn√≠, kdy≈æ m≈Ø≈æeme pou≈æ√≠vat **promƒõnn√©** ve sv√Ωch k√≥dech, u≈æ nepot≈ôebujeme p≈ô√≠kaz `{echo}`.
                    M≈Ø≈æeme pou≈æ√≠t promƒõnn√© k ulo≈æen√≠ odpovƒõd√≠ na na≈°e ot√°zky a t√≠mto zp≈Øsobem m≈Ø≈æeme odpovƒõƒè pou≈æ√≠t na v√≠ce ot√°zek ve sv√Ωch k√≥dech.
                    Pod√≠vejte se na to:

                    T√≠mto zp≈Øsobem se v√°≈° k√≥d st√°v√° interaktivn√≠m!
                example_code: |
                    ```
                    jmeno {is} {ask} 'Jak√© je va≈°e jm√©no?'
                    {print} 'Ahoj, ' jmeno
                    vek {is} {ask} 'Kolik v√°m je let?'
                    {print} jmeno ' m√° ' vek ' let.'
                    ```
                story_text_2: |
                    ### Cviƒçen√≠
                    V p≈ôedchoz√≠m panelu jste cviƒçili nastavov√°n√≠ promƒõnn√Ωch pomoc√≠ p≈ô√≠kazu `{is}`.
                    Vytvo≈ôili jste alespo≈à 3 promƒõnn√© a pou≈æili je s p≈ô√≠kazem print.
                    Nyn√≠ m√≠sto nastavov√°n√≠ promƒõnn√Ωch chceme, abyste promƒõnn√© uƒçinili interaktivn√≠mi, jak jsme to udƒõlali v na≈°em p≈ô√≠kladu.

                    Zkop√≠rujte sv≈Øj k√≥d z p≈ôedchoz√≠ho panelu a uƒçi≈àte promƒõnn√© interaktivn√≠mi pomoc√≠ p≈ô√≠kaz≈Ø `{ask}`.
    calculator:
        levels:
            6:
                story_text: |
                    Now that you can calculate, you can also create a program to practice maths calculations. You can make up the calculations yourself, for example:
                example_code: |
                    ```
                    correct_answer = 11 * 27
                    answer = {ask} 'How much is 11 times 27?'
                    {if} answer {is} correct_answer {print} 'good job!'
                    {else} {print} 'Wrong! It was ' correct_answer
                    ```
                story_text_2: |
                    You can also let the computer do random calculations on its own using {random}.
                example_code_2: |
                    ```
                    tables = 4, 5, 6, 8
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    table = tables {at} {random}
                    number = numbers {at} {random}
                    correct_answer = table * number
                    answer = {ask} 'how much is ' table ' times ' number '?'
                    {if} answer {is} correct_answer {print} 'okay'
                    {else} {print} 'mistake! it was ' correct_answer
                    ```
                story_text_3: |
                    You can also let the computer do random calculations on its own using {random}.
                example_code_3: |
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number_1 = _
                    number_2 = _
                    correct_answer = number_1 * number_2
                    given_answer = 'What is ' number_1 ' times ' number_2 '?'
                    {if} _
                    {else} _
            9:
                story_text: |
                    In a previous level you've created a calculator, in this level you can expand that code so it asks multiple questions.

                    ### Exercise 1
                    Can you finish line 10 to get the code to work?

                    ### Exercise 2
                    Give the player feedback when the enter an answer, like `{print} 'Correct!'` or `{print} 'Wrong! The correct answer is ' correct_answer`.
            11:
                example_code: |
                    ```
                    number = 10
                    {for} i {in} {range} 1 to 10
                        {print} i * number
                    ```
            12:
                story_text: |
                    Now you can make a calculator that works for decimal numbers.
                example_code: |
                    ```
                    number1 = {ask} 'What is the first number?'
                    number2 = {ask} 'What is the second number?'
                    answer = number1 + number2
                    {print} number1 ' plus ' number2 ' is ' answer
            14:
                example_code: |
                    ```
                    {define} calculate_mean_grade
                        total = 0
                        {for} i {in} {range} 1 {to} 4
                            grade = {ask} _
                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
                    ```

                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
    clear_command:
        description: clear command
    debugging:
        levels:
            3:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    movie_choices {is} dracula, fast and furious, home alone, barbie
                    chosen_movie {is} movies {at} {random}
                    {print} Tonight we will watch chosen _movies
                    like {ask} Do you like that movie?
                    {print} Tomorrow we will watch something else.
                    {add} chosen_movie {to} movie_choices
                    {print} Tomorrow we will watch tomorrows_movie
                    tomorrows_movie {is} movie_choices {at} {random}
                    I'll go get the popcorn! {print}
                    ```
            7:
                story_text: |-
                    ### Exercise
                    Surprise! This program looks more like an output than a code. And yet, we don't want you to just add `{print}` commands in front of each line.
                    Fix this program to turn it into the nursery rhyme 'Brother John (Fr√®re Jaques)' by using the {repeat} command of course!
            8:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to Manicures and Pedicures by Hedy'
                    bodypart = {ask} 'Are you getting your fingernails or toenails done today? Or both?'
                    {if} bodyparts {is} both
                            {print} That will be $25'
                            price = 25
                        {else}
                            {print} That will be $18'
                            price = 18
                    color = {ask} What color would you like?
                    sparkles = {ask} 'Would you like some sparkles with that?'
                    {if} sparkles {is} yes
                        {print} 'We charge $3 extra for that'
                    price = price + 3
                    {else} {print} 'No sparkles' {print} 'So no extra charge'
                    {sleep} 5
                    {print} 'All done! That will be $' price ' please!'
                    {print} 'Thank you! Byebye!'
                    ```
            9:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to our sandwich shop'
                    amount 'How many sandwiches would you like to buy?'
                    {repeat} amount {times}
                    {ask} {is} {ask} 'What kind or bread would you like your sandwich to be?'
                    types_of_bread {is} white, wheat, rye, garlic, gluten free
                    {if} chosen_bread in types_of_bread
                    {print} 'Lovely!'
                    {else}
                    'I'm sorry we don't sell that'
                    topping {is} {ask} 'What kind of topping would you like?'
                    sauce {is} {ask} 'What kind of sauce would you like?'
                    {print} One chosen_bread with topping and sauce.
                    price = amount * 6
                    {print} 'That will be 'price dollar' please'
                    ```

                    price = amount * 6
                    {print} 'That will be 'price dollar' please'
            10:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    names = Muad Hasan Samira Noura
                    activities = fly a kite, go swimming, go hiking, catch tan in the sun
                    {for} name {is} names
                    {print} At the beach name loves to activity at random
                    ```
            11:
                story_text: |-
                    ### Exercise
                    Debug this calender program. The output of this program is supposed to look like a list of dates.
                    For example:

                    ```
                    Hedy calender
                    Here are all the days of November
                    November 1
                    November 2
                    November 3
                    ```
                    And so on.

                    Mind that you have to test your code extra carefully for the month February, because the amount of days in this month changes in leap years.
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    print 'Hedy calender'
                    months_with_31 days = January, March, May, July, September, October, December
                    months_with_30_days = April, June, August, November
                    month = ask 'Which month would you like to see?'
                    if month in months_with_31_days
                        days = 31
                        if month in months_with30_days
                            days = 30
                    if month = February
                        leap_years = 2020, 2024, 2028, 2036, 2040, 2044, 2028
                        year = ask 'What year is it?'
                    if year in leap_years
                        days = 29
                    else
                        days = 28

                    print 'Here are all the days of ' moth
                    for i in range 1 to days
                        print month i
                    ```
            12:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define greet
                    greetings = 'Hello', 'Hi there', 'Goodevening'
                        print greetings at random

                    define take_order
                        food = ask 'What would you like to eat?'
                        print 'One food'
                        drink = 'What would you like to drink?'
                        print 'One ' drink
                        more = ask 'Would you like anything else?'
                            if more is 'no'
                        print 'Alright'
                            else
                            print 'And ' more
                    print 'Thank you'

                    print 'Welcome to our restaurant'
                    people = ask 'How many people are in your party tonight?'
                    for i in range 0 to people
                        call greet_costumer
                    ```
            13:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    defin movie_recommendation with name
                        action_movies == 'Die Hard', 'Fast and Furious', 'Inglorious Bastards'
                        romance_movies = 'Love Actually', 'The Notebook', 'Titanic'
                        comedy_movies = 'Mr Bean' 'Barbie''Deadpool'
                        kids_movies = 'Minions', 'Paddington', 'Encanto'
                        if name is 'Camila' or name is 'Manuel'
                            recommended_movie = kids_movie at random
                        if name is 'Pedro' or 'Gabriella'
                                mood = ask 'What you in the mood for?'
                            if mood is 'action'
                                recommended_movie = comedy_movies at random
                            if mood is 'romance'
                                recommended_movie = romance_movies
                        if mood is 'comedy'
                                recommended_movie = comedy_movies at random

                    print 'I would recommend ' recommended_movie ' for ' name

                    name = ask 'Who is watching?'
                    recommendation = ask 'Would you like a recommendation?'
                    if recommendaion is 'yes'
                    print movie_recommendation with name
                    else
                    print 'No problem!'
                    ```
            14:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define calculate_heartbeat
                        print 'Press your fingertips gently against the side of your neck'
                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
                    ```

                        print '(just under your jawline)'
                        print 'Count the number of beats you feel for 15 seconds'
                        beats == ask 'How many beats do you feel in 15 seconds?'
                        heartbeat = beats*4
                        print 'Your heartbeat is ' heartbeat
                        if heartbeat >= 60 or heartbeat <= 100
                            print 'Your heartbeat seems fine'
                        else
                            if heartbeat > 60
                                print 'Your heartbeat seems to be too low'
                            if heartbeat < 100
                                print 'Your heartbeat seems to be too high'
                            print 'You might want to contact a medical professional'

                    measure_heartbeat = ask 'Would you like to measure your heartbeat?'
                    if measure_heartbeat = 'yes'
                        call measure_heartbeat
                    else
                        'no problem'
            15:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    names = 'Tanya', 'Romy', 'Kayla', 'Aldrin', 'Ali'
                    verbs='walking', 'skipping', 'cycling', 'driving', 'running'
                    locations = 'on a mountaintop', 'in the supermarket', 'to the swimming pool'
                    hiding_spots = 'behind a tree', under a table', in a box'
                    sounds = 'a trumpet', 'a car crash', 'thunder'
                    causes_of_noise = 'a television', 'a kid with firecrackers', 'a magic elephant', 'a dream'

                    chosen_ name = names at random
                    chosen_verb = verbs at random
                    chosen_location = 'locations at random'
                    chosen_sounds = noises at random
                    chosen_spot = hiding_spots random
                    chosen_causes = causes_of_noise at random

                    print chosen_name ' was ' chosen_verb ' ' chosen_location
                    print 'when they suddenly heard a sound like ' sounds at random
                    print chosen_name ' looked around, but they couldn't discover where the noise came from'
                    print chosen_name ' hid ' chosen_spot'
                    print 'They tried to look around, but couldn't see anything from there'
                    hidden = 'yes'
                    while hidden = 'yes'
                        print chosen_name 'still didn't see anything'
                    answer = ask 'does ' chosen_name ' move from their hiding spot?'
                        if answer = 'yes'
                            hidden == 'no'
                    print 'chosen_name moved from' chosen_spot
                    print 'And then they saw it was just' chosen_cause
                    print chosen_name 'laughed and went on with their day'
                    print The End
                    ```
            16:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    country = ['The Netherlands', 'Poland', 'Turkey', 'Zimbabwe', 'Thailand', 'Brasil', 'Peru', 'Australia', 'India', 'Romania' ]
                    capitals = 'Amsterdam', 'Warshaw' 'Istanbul', 'Harare', 'Bangkok', 'Brasilia', 'Lima', 'Canberra', 'New Delhi', 'Bucharest'
                    score = 0
                    for i in range 0 to 10
                        answer = ask 'What's the capital of ' countries[i]
                        correct = capital[i]
                        if answer = correct
                            print 'Correct!'
                        score = score + 1
                        else
                            print 'Wrong,' capitals[i] 'in the capital of' countries[i]
                        print 'You scored ' score ' out of 10'

                    ```
            17:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define food_order
                        toppings = ask 'pepperoni, tuna, veggie or cheese?'
                        size = ask 'big, medium or small?'
                        number_of_pizza = ask 'How many these pizzas would you like?'

                        print 'YOU ORDERED'
                        print number_of_pizzas ' size  ' topping ' pizza'

                    define drinks_order
                        drink = ask 'water, coke, icetea, lemonade or coffee?'
                        number_of_drinks = ask 'How many of these drinks would you like?'

                        print 'YOU ORDERED'
                        print number_of_drinks ' ' drink

                    'Welcome to Hedy pizza'
                    more_food = ask 'Would you like to order a pizza?'
                    while more_food = 'yes'
                        return food_order
                        more_food = ask 'Would you like to order a pizza?'
                    more_drinks = ask 'Would you like to order some drinks?'
                    while more_drinks == 'yes'
                        call drink_order
                        more_drinks == ask 'Would you like to order more drinks?'


                    print 'Thanks for ordering!'
                    ```
            18:
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    for i in range 1 to 3
                        animal = animals[i]
                        sound = sounds[i]
                        print 'Old MacDonald had a farm'
                        print 'E I E I O!'
                        print 'and on that farm he had a ' animal
                        print 'E I E I O!'
                        print 'with a ' sound sound ' here'
                        print 'and a ' sound sound ' there'
                        print 'here a ' sound
                        print 'there a ' sound
                        print 'everywhere a ' sound sound
                    ```
    default:
        description: Vysvƒõtlen√≠ √∫rovnƒõ
        levels:
            1:
                story_text: "V prvn√≠ √∫rovni m≈Ø≈æe≈° pou≈æ√≠vat p≈ô√≠kazy `{print}`, `{ask}` a `{echo}`.\n Zapi≈° sv≈Øj k√≥d do lev√©ho okna. Nebo stiskni ≈ælut√© tlaƒç√≠tko v uk√°zce k√≥du, kter√© k√≥d zap√≠≈°e za tebe.\nK√≥d si v≈ædy vyzkou≈°ej pomoc√≠ zelen√©ho tlaƒç√≠tka 'Spustit k√≥d' pod lev√Ωm programov√Ωm polem.\n\nM≈Ø≈æe≈° vypsat text na obrazovku u≈æit√≠m p≈ô√≠kazu `{print}`.     \n"
            3:
                story_text: |-
                    V √∫rovni 3 m≈Ø≈æe≈° tak√© vytvo≈ôit seznam. Poƒç√≠taƒç um√≠ z tohoto seznamu vybrat n√°hodn√©ho ƒçlena, konkr√©tnƒõ pomoc√≠ p≈ô√≠kazu `at random`.
                    ```
                    zvirata is pes, koƒçka, klokan
                    print zvirata at random
                    ```

                    V≈°echny k√≥dy √∫rovnƒõ 3 najde≈° v lev√©m panelu. Opƒõt tady jsou i z√°lo≈æky s dal≈°√≠mi zad√°n√≠mi.
            4:
                story_text: |
                    V √∫rovni 4 se mƒõn√≠ `{ask}` a `{print}`.
                    Text, kter√Ω chce≈° vytisknout, teƒè mus√≠≈° d√°t do uvozovek.
                    Je to u≈æiteƒçn√©, proto≈æe tak m≈Ø≈æe≈° vytisknout v≈°echna slova, kter√° chce≈°. A to dokonce vƒçetnƒõ slov, pod kter√° jsi nƒõco ulo≈æil/a pomoc√≠ `{is}`.
                    Vƒõt≈°ina programovac√≠ch jazyk≈Ø tak√© pou≈æ√≠v√° p≈ôi vypisov√°n√≠ uvozovky, tak≈æe se dost√°v√°me zase o krok bl√≠≈æe ke skuteƒçn√©mu programov√°n√≠!
                example_code: |
                    ```{print} 'Odteƒè mus√≠te pou≈æ√≠vat uvozovky!'\nodpovƒõƒè {is} {ask} 'Co mus√≠me od teƒè pou≈æ√≠vat?'\n{print} 'Mus√≠me pou≈æ√≠vat ' odpovƒõƒè\n```\n"
            5:
                story_text: |
                    V √∫rovni 5 je nƒõco nov√©ho, `{if}`! S `{if}` si m≈Ø≈æete vybrat ze dvou r≈Øzn√Ωch mo≈ænost√≠.
                    Tento k√≥d vyp√≠≈°e "Pƒõknƒõ!" , pokud zad√°te Hedy, nebo "F≈Øj!", pokud zad√°te nƒõco jin√©ho.

                    `{ask}` a `{print}` st√°le funguj√≠ stejnƒõ jako v √∫rovni 4.
                example_code: |
                    ```
                    jm√©no {is} {ask} 'jak se jmenuje≈°?'
                    {if} jm√©no {is} Hedy {print} 'Pƒõknƒõ!' {else} {print} 'F≈Øj!'
                    ```
            6:
                story_text: |-
                    `ask`,` print` a `if` st√°le funguj√≠ jako na √∫rovn√≠ch 5.
                     V √∫rovni 6 je ale nƒõco nov√©ho, nyn√≠ m≈Ø≈æe≈° tak√© poƒç√≠tat!

                     Plus je jednoduch√©, m≈Ø≈æe≈° ho zapsat jako u matematiky, nap≈ô√≠klad `5 + 5`. M√≠nus funguje stejnƒõ, je to `5 - 5`.

                     S kr√°t je to trochu jin√©, proto≈æe na kl√°vesnici pro nƒõj nen√≠ ≈æ√°dn√Ω symbol. Zkus ho naj√≠t, opravdu tam nen√≠!
                     P√≠smenko x by se n√°m pletlo se slovy, proto n√°sob√≠me hvƒõzdiƒçkou: `5 * 5`. P≈ôeƒçti si to jako "5 kr√°t 5", pak si to zapamatujete nejsn√°ze.
                     ```
                     print '5 plus 5 je ' 5 + 5
                     print '5 m√≠nus 5 je ' 5 - 5
                     print '5 kr√°t 5 je ' 5 * 5
                     ```
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 minus 5 is ' 5 - 5
                    {print} '5 {times} 5 is ' 5 * 5
                    ```
            7:
                story_text: |-
                    `ask`, `print` a `if` funguj√≠ stejnƒõ jako na √∫rovni 5 a 6.
                    √örove≈à 7 v≈°ak p≈ôid√°v√° p≈ô√≠kaz `repeat`, pomoc√≠ kter√©ho lze ≈ô√°dek k√≥du prov√©st v√≠cekr√°t.
                example_code: |
                    ```
                    repeat 3 times print 'Hedy je z√°bavn√°!'
                    ```
            8:
                story_text: |
                    `ask` a `print` st√°le funguj√≠ tak, jak je zn√°≈°. Ale `if` a `repeat` se zmƒõnily!
                    Od teƒè m≈Ø≈æe≈° spou≈°tƒõt v√≠c ≈ô√°dk≈Ø k√≥du spoleƒçnƒõ, ale mus√≠≈° je odsadit.
                    To znamen√°, ≈æe na zaƒç√°tek ≈ô√°dku d√°≈° ƒçty≈ôi mezery. To plat√≠ i v p≈ô√≠padƒõ, ≈æe chce≈° vytvo≈ôit blok z pouze jednoho ≈ô√°dku.


                    ```
                    repeat 5 times
                        print 'Ahoj v≈°ichni'
                        print 'Tohle v≈°echno se 5kr√°t zopakuje'
                    ```
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Hello everyone'
                        {print} 'This is all repeated 5 times'
                    ```
            10:
                story_text: |
                    In this level we learn a new code called `for`. With `for` you can make a list and use all elements.
                    `for` creates a block, like `repeat` and `if` so all lines in the block need to start with spaces.

                    ```
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animal
                    ```
                example_code: |
                    ```
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                      {print} 'I love ' animal
                    ```
            12:
                story_text: Hedy doteƒè neumo≈æ≈àovala pou≈æ√≠vat ƒç√≠sla s desetinami jako je 1.5, ale odteƒè u≈æ ano. Pozor, Hedy pou≈æ√≠v√° desetinnou teƒçku `.` nam√≠sto desetinn√© ƒç√°rky.
                example_code: |
                    ```
                    {print} 'Two and a half plus two and a half is...'
                    {print} 2.5 + 2.5
                    ```

                    print 2.5 + 2.5
            13:
                story_text: Teƒè se nauƒç√≠me `and` (ƒçesky a) a `or` (nebo)! Kdy≈æ chce≈° ovƒõ≈ôit dvƒõ podm√≠nky, nemus√≠≈° k tomu pou≈æ√≠t dva `if`y, ale staƒç√≠ ti k tomu `and` a `or`. Pokud pou≈æije≈° `and`, mus√≠ b√Ωt obƒõ podm√≠nky, napravo i nalevo, pravdiv√©. S `or` staƒç√≠, aby byla pravdiv√° alespo≈à jedna z nich.
                example_code: |
                    ```
                    name = ask 'what is your name?'
                    age = ask 'what is your age?'
                    if name is 'Hedy' and age is 2
                        print 'You are the real Hedy!'
                    ```
            14:
                story_text: |-
                    Pojƒème se nauƒçit p√°r nov√Ωch vƒõc√≠! Mo≈æn√° u≈æ je zn√°≈° z matematiky, jde o `<` a `>`.
                    `<`zji≈°≈•uje, zda je prvn√≠ ƒç√≠slo men≈°√≠ ne≈æ to druh√©, nap≈ô. `4 < 5`.
                    `>` naopak zji≈°≈•uje, jestli je prvn√≠ ƒç√≠slo vƒõt≈°√≠, jako v `6 > 5`.
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```

                    if vek < 13
                        print 'Jsi mlad≈°√≠ ne≈æ j√°!'
                    else
                        print 'Jsi star≈°√≠ ne≈æ j√°!'
            15:
                story_text: Nauƒç√≠me se nov√Ω cyklus, konkr√°tnƒõ `while` cyklus! Tento cyklus se opakuje tak dlouho, dokud je jeho podm√≠nka pravdiv√°. V p≈ô√≠kladu vid√≠te, ≈æe k√≥d opakujeme, dokud nedostaneme spr√°vnou odpovƒõƒè. Pokud bychom ji nikdy nedostali, bude cyklus nekoneƒçn√Ω!
                example_code: |
                    ```
                    answer = 0
                    while answer != 25
                        answer = ask 'What is 5 times 5?'
                    print 'A correct answer has been given'
                    ```

                        odpoved = ask 'Kolik je 5 * 5?'
                    print 'Dostala jsem spr√°vnou odpovƒõƒè!'
            16:
                story_text: U≈æ i na≈°e seznamy maj√≠ vlastn√≠ z√°vorky! Budeme je ps√°t do hranat√Ωch z√°vorek a jejich  jednotliv√© polo≈æky do jednoduch√Ωch uvozovek ('), kter√© u≈æ zn√°me.
                example_code: |
                    ```
                    ovoce = ['jablko', 'ban√°n', 't≈ôe≈°nƒõ']
                    print ovoce
                    ```
            17:
                story_text: |-
                    Nyn√≠ trochu zmƒõn√≠me odsazen√≠. Poka≈æd√©, kdy≈æ pot≈ôebujeme odsazen√≠, je t≈ôeba zapsat znak `:` na ≈ô√°dku p≈ôed t√≠mto odsazen√≠m.

                    V t√©to √∫rovni m≈Ø≈æete tak√© pou≈æ√≠t nov√Ω p≈ô√≠kaz: `{elif}`. P≈ô√≠kaz `{elif}` je zkratka z `{else} {if}` a vyu≈æijete jej, kdy≈æ chcete prov√©st t≈ôi (nebo v√≠ce!) mo≈ænost√≠.
                    Vyzkou≈°ejte jej!
            18:
                story_text: |-
                    We arrived at real Python code! That means we need to use parentheses with {print} and {range} from now on.
                    {print}('My name is ', naam)
    dice:
        levels:
            3:
                example_code: |
                    ```
                    choices {is} 1, 2, 3, 4, 5, earthworm
                    {print} choices {at} {random}
                    ```
            4:
                story_text: |
                    In this level we can make sentences with the die value in the sentence, with quotes of course.
                    This time the sample code is not quite complete. Can you finish the code?
            5:
                story_text: |
                    You can also make a die again in this level using the `{if}`.
                    Complete the sample code so that the code says "You can stop throwing" once you have thrown an earthworm.

                    But maybe you want to recreate a die from a completely different game. That's fine too! Then make up your own reaction. Eg 'yes' for 6 and 'pity' for something {else}.
                example_code: |
                    ```
                    choices {is} 1, 2, 3, 4, 5, earthworm
                    throw {is} _
                    {print} 'you have' _ 'thrown'
                    {if} _ {is} earthworm {print} 'You can stop throwing.' _ {print} 'You have to hear it again!'
                    ```
            6:
                story_text: |
                    You can also make an Earthworm die again in this, but now you can also calculate how many points have been rolled.
                    You may know that the worm counts 5 points for Earthworms. Now after a roll you can immediately calculate how many points you have thrown.
                    This is the code to calculate points for one die:
                example_code: |
                    ```
                    choices = 1, 2, 3, 4, 5, earthworm
                    points = 0
                    throw = choices {at} {random}
                    {print} 'you threw' throw
                    {if} throw {is} earthworm points = points + 5 {else} points = points + throw
                    {print} 'those are' points ' point'
                    ```
                    Can you make the code so that you get the total score for 8 dice? To do that, you have to cut and paste some lines of the code.
                example_code_2: |
                    Did you manage to calculate the score for 8 dice? That required a lot of cutting and pasting, right? We are going to make that easier in level 7!
            7:
                story_text: |
                    You can also make a die again in level 5. With the `{repeat}` code you can easily roll a whole hand of dice.
                    Try to finish the sample code! The dashes should contain multiple commands and characters.

                    But maybe you want to make a completely different die. Of course you can!
                example_code: |
                    ```
                    choices = 1, 2, 3, 4, 5, earthworm
                    {repeat} _ _ {print} _ _ _
                    ```
            10:
                story_text: |
                    Is everybody taking too long throwing the dice? In this level you can let Hedy throw all the dice at once!
                example_code: |
                    ```
                    players = Ann, John, Jesse
                    choices = 1, 2, 3, 4, 5, 6
                    {for} player {in} players
                        {print} player ' throws ' choices {at} {random}
                        {sleep}
                    ```
    dishes:
        description: Use the computer to see who does the dishes (Start at level 2)
        levels:
            3:
                story_text: |
                    Do you always disagree at home about who should wash the dishes or change the litter box today?
                    Then you can let the computer choose very fairly. You can program that in this level!
                    You first make a list of the members of your family. Then choose '{at} {random}' from the list.
                example_code: |
                    ```
                    people {is} mom, dad, Emma, Sophie
                    {print} people {at} {random}
                    ```
                    Don't feel like doing the dishes yourself? Hack the program to remove your name from the list.

                    ```
                    people {is} mom, dad, Emma, Sophie
                    your_name {is} {ask} Who are you?
                    {remove} your_name {from} people
                    {print} people {at} {random} does the dishes
                    ```
                story_text_2: |
                    Don't feel like doing the dishes yourself? Hack the program to remove your name from the list.
            4:
                story_text: |
                    With quotation marks you can make your dishwashing planning more beautiful.
                    This time the sample code is not quite complete.

                    Can you complete the code by filling the blanks? Every blank must be replaced with one word of symbol.

                    Tip: Don't forget the quotation marks!
            5:
                story_text: |
                    With the `{if}` you can now have more fun with choice in the program. You can have your program respond to the choice that the computer has made.

                    Can you finish the code so that it prints 'too bad' when it is your turn and otherwise 'yes!'?
                    Don't forget the quotes!
                example_code: |
                    ```
                    people {is} mom, dad, Emma, Sophie
                    dishwasher {is} people {at} {random}
                    {if} dishwasher {is} Sophie {print} _ too bad I have to do the dishes _ {else} {print} 'luckily no dishes because' _ 'is already washing up'
                    ```
            6:
                story_text_2: |
                    If you are extremely unlucky the previous program might choose you to to the dishes for the whole week! That's not fair!
                    To create a fairer system you can use the `{remove}` command to remove the chosen person from the list. This way you don't have to do the dishes again untill everybody has had a turn.

                    Monday and tuesday are ready for you! Can you add the rest of the week?
                    And... can you come up with a solution for when your list is empty?
                example_code_2: |
                    ```
                    people = mom, dad, Emma, Sophie
                    dishwasher = people {at} {random}
                    {print} 'Monday the dishes are done by: ' dishwasher
                    {remove} dishwasher {from} people
                    dishwasher = people {at} {random}
                    {print} 'Tuesday the dishes are done by: ' dishwasher
                    {remove} dishwasher {from} people
                    dishwasher = people {at} {random}
                    ```
            7:
                story_text: |
                    With the `{repeat}` you can repeat pieces of code. You can use this to calculate who will be washing dishes for the entire week.
                example_code: |
                    ```
                    people = mom, dad, Emma, Sophie
                    {repeat} _ _ {print} 'the dishwasher is' _
                    ```
            10:
                story_text: |
                    In this level you could make an even better dish washing shedule.
    elif_command:
        description: elif
        levels:
            17:
                example_code: |
                    ```
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
                    ```
    for_command:
        description: for command
        levels:
            11:
                story_text: |-
                    In this level, we add a new form of the `{for}`. In earlier levels, we used `{for}` with a list, but we can also use `{for}` with numbers.
                    We do that by adding a variable name, followed by  `{in}` `{range}`. We then write the number to start at, `{to}` and the number to end at.
                    Try the example to see what happens! In this level again, you will need to use indentations in lines below the `{for}` statements.
    fortune:
        levels:
            1:
                story_text: |
                    Have you ever been to a carnival and had your future predicted by a fortune teller? Or have you ever played with a magic eight ball?
                    Then you probably know that they can't really predict your future, but it's still fun to play!

                    In the upcoming levels you can learn how to create your own fortune telling machine!
                    In level 1 you can start off easy by letting Hedy introduce herself as a fortune teller and let her {echo} the players' answers.
                    Like this:
                example_code: |
                    ```
                    {print} Hello, I'm Hedy the fortune teller!
                    {ask} Who are you?
                    {print} Let me take a look in my crystal ball
                    {print} I see... I see...
                    {echo} Your name is
                    ```

                    ### Exercise
                    Hedy now only tells you your name. Can you expand the code so that Hedy can predict more things about you?

                    Obviously, Hedy isn't a very good fortune teller yet, as she can only repeat the answers that were given by the players!
                    Take a look in level 2 to improve your fortune teller.
                story_text_2: |
                    ### Exercise
                    Hedy now only tells you your name. Can you expand the code so that Hedy can predict more things about you?
                    Obviously, Hedy isn't a very good fortune teller yet, as she can only repeat the answers that were given by the players!
                    Take a look in level 2 to improve your fortune teller.
            3:
                story_text: |
                    In the previous levels you've created your first fortune telling machine, but Hedy couldn't really predict anything, only {echo}.
                    In this level you can use a variable and the `{at} {random}` command to really let Hedy choose an answer for you. Check out this code for instance:
                example_code: |
                    In this example the player can {ask} Hedy a yes-no question and Hedy will pick a random answer for you.
                    ```
                    {print} I‚Äôm Hedy the fortune teller!
                    question {is} {ask} What do you want to know?
                    {print} This is what you want to know: question
                    answers {is} yes, no, maybe
                    {print} My crystal ball says...
                    {sleep} 2
                    {print} answers {at} {random}
                    ```

                    ### Exercises
                    Now, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or '{ask} again'.
                story_text_2: |
                    ### Exercises
                    Now, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or '{ask} again'.
            4:
                example_code: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    question {is} {ask} 'What do you want to know?'
                    {print} 'This is your question: ' question
                    answers {is} yes, no, maybe
                    {print} 'My crystal ball says...'
                    {sleep} 2
                    {print} answers {at} {random}
                    ```
            5:
                story_text: |
                    In this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!
                    By using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.
                    Check out this example to find out how.
                example_code: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    {print} 'I can predict {if} youll win the lottery tomorrow!'
                    person {is} {ask} 'Who are you?'
                    {if} person {is} Hedy {print} 'You will definitely win!ü§©' {else} {print} 'Bad luck! Someone {else} will win!üò≠'
                    ```
            6:
                story_text: |
                    In this level you can use math in your predictions as a fortune teller. This allows you to make up (silly) formulas to calculate the future.
                    For example you could calculate how rich you'll get or how many kids you will have when you grow up.
                example_code: |
                    ```
                    {print} 'I am Hedy the fortune teller!'
                    {print} 'I can predict how many kids youll get when you grow up!'
                    age = {ask} 'How old are you?'
                    siblings = {ask} 'How many siblings do you have?'
                    length = {ask} 'How tall are you in centimetres?'
                    kids = length / age
                    kids = kids - siblings
                    {print} 'You will get ...'
                    {sleep}
                    {print} kids ' kids!'
                    ```

                    If the previous example wasn't silly enough for you, take a look at this one!

                    ```
                    {print} 'Im Hedy the silly fortune teller!'
                    {print} 'I will predict how smart you are!'
                    football = {ask} 'On a scale 1-10 how much do you love football?'
                    bananas = {ask} 'How many bananas did you eat this week?'
                    hygiene = {ask} 'How many times did you wash your hands today?'
                    result = bananas + hygiene
                    result = result * football
                    {print} 'You are ' result ' percent smart.'
                    ```
            7:
                story_text: |
                    In this level you can use the `{repeat}` command to make your machine tell multiple fortunes at once.
                example_code: |
                    ```
                    {print} 'Im Hedy the fortune teller!'
                    {print} 'You can {ask} 3 questions!'
                    {repeat} 3 {times} question = {ask} 'What do you want to know?'
                    answer = yes, no, maybe
                    {repeat} 3 {times} {print} 'My crystal ball says... ' answer {at} {random}
                    ```

                    ### Exercise
                    As you can see, the questions aren't printed in this example. That's because the variable `question` was changed 3 times.
                    Every time the player fills in the new answer, Hedy overwrites the previous one, so the first answer the player gave is forgotten.
                    This means you can't print all the questions this way.

                    By using 3 different variables instead of 1 (for example `question1` , `question2` and `question3`), you could solve the problem and print the questions.
                    This does mean that you can only use `{repeat}` for the answers, and you will have to ask and print all the questions separately.
                    Can you do it?

                    In the upcoming levels the layout of {repeat} command will change, which enables you to repeat multiple lines at once.
            8:
                story_text: |
                    In the previous levels you've learned how to use repeat to make the fortune teller answer 3 questions in a row, but we had a problem with printing the questions.
                    Now that problem is solved, because of the new way of using the repeat command.
                    In the next example you can have your fortune teller {ask} 3 questions and also print them!
                example_code: |
                    ```
                    {print} 'I am Hedy the fortune teller!'
                    {print} 'You can {ask} me 3 questions.'
                    answers = yes, no, maybe
                    {repeat} 3 {times}
                       question = {ask} 'What do you want to know?'
                       {print} question
                       {sleep}
                       {print} 'My crystal ball says...' answers {at} {random}
                    ```
            10:
                story_text: |
                    In this level you'll learn how to program the game MASH (mansion, apartement, shack, house). In this game you can predict for all the players at once, what their future will look like.
                example_code: |
                    ```
                    houses = mansion, apartment, shack, house
                    loves = nobody, a royal, their neighbour, their true love
                    pets = dog, cat, elephant
                    names = Jenna, Ryan, Jim
                    {for} name {in} names
                        {print} name ' lives in a ' houses {at} {random}
                        {print} name ' will marry ' loves {at} {random}
                        {print} name ' will get a ' pets {at} {random} ' as their pet.'
                        {sleep}
                    ```
            12:
                story_text: |
                    In this level you can make your fortunes multiple words. Like in this example below:
                example_code: |
                    ```
                    fortunes = 'you will be rich', 'you will fall in love', 'you will slip on a banana peel'
                    {print} 'I will take a look in my crystall ball for your future.'
                    {print} 'I see... I see...'
                    {sleep}
                    {print} fortunes {at} {random}
                    ```
    functions:
        levels:
            12:
                example_code: |
                    ```
                    sides = 'left', 'right'
                    limbs = 'hand', 'foot'
                    colors = 'red', 'blue', 'green', 'yellow'

                    {define} turn
                        chosen_side = sides {at} {random}
                        chosen_limb = limbs _
                        chosen_color = colors _
                        {print} chosen_side ' ' chosen_limb ' on ' chosen_color

                    {print} 'Lets play a game of Twister!'
                    {for} i {in} {range} 1 to _
                        {call} turn
                        {sleep} 2
                    ```
            13:
                story_text: |
                    Now that you've learned how to use functions, you'll learn how to use a function with an argument.
                    An **argument** is a variable that is used within a function. It is not used outside the function.

                    For example in this code we've programmed the first verse of the song 'My Bonnie is over the ocean'.
                    In this example code the argument `place` is used. Place is a variable that is only used in the function, so an argument.
                    To use `place` we have programmed the line `define song with place`.
                    When the function is called, computer will replace the argument `place`, with the piece of text after `call song with`.

                    ### Exercise
                    The next verse of this song goes:

                    Last night as I lay on my pillow
                    Last night as I lay on my bed
                    Last night as I lay on my pillow
                    I dreamed that my Bonnie is dead

                    Can you program this verse in the same way as the example?
            14:
                example_code: |
                    ```
                    {define} calculate_new_price {with} amount, percentage
                        percentage = percentage / 100
                        discount_amount = amount * percentage
                        return amount - discount_amount

                    old_price = {ask} 'How much is on the price tag?'
                    discount = {ask} 'What percentage is the discount?'

                    new_price = _ calculate_new_price {with} old_price, _
                    {print} 'The new price is ' new_price ' dollar'
                    ```
    haunted:
        description: escape from the haunted house
        levels:
            1:
                story_text: |
                    V tomto dobrodru≈æstv√≠ pracujete na vytvo≈ôen√≠ hry, ve kter√© se mus√≠te dostat z stra≈°ideln√©ho domu t√≠m, ≈æe si vyberete spr√°vn√© dve≈ôe.
                    Pokud vyberete spr√°vn√© dve≈ôe, p≈ôe≈æijete, ale pokud ne, stra≈°ideln√Ω monster m≈Ø≈æe...

                    V √∫rovni 1 zaƒçneme na≈°i hru ve stra≈°ideln√©m domƒõ t√≠m, ≈æe vytvo≈ô√≠me dƒõsiv√Ω p≈ô√≠bƒõh a zept√°me se hr√°ƒçe, jak√© monstrum uvid√≠ ve stra≈°ideln√©m domƒõ.
                example_code: |
                    ```
                    {print} Jak jsem se sem dostal?
                    {print} Pamatuji si, jak mi kamar√°d ≈ôekl, abych ≈°el do star√©ho s√≠dla...
                    {print} a najednou v≈°e zƒçernalo.
                    {print} Ale jak jsem skonƒçil na podlaze...?
                    {print} Hlava mƒõ bol√≠, jako bych dostal r√°nu baseballovou p√°lkou!
                    {print} Co je to za zvuk?
                    {print} Oh ne! M√°m pocit, ≈æe nejsem v tomto domƒõ s√°m!
                    {print} Mus√≠m se odsud dostat!
                    {print} P≈ôed sebou m√°m 3 dve≈ôe...
                    {ask} Kter√© dve≈ôe m√°m vybrat?
                    {echo} Vybral jsem si dve≈ôe
                    {print} ...?
                    ```
                story_text_2: |
                    ### Cviƒçen√≠
                    Zkop√≠rujte uk√°zkov√Ω k√≥d do sv√© vstupn√≠ obrazovky kliknut√≠m na ≈ælut√© tlaƒç√≠tko.
                    Nyn√≠ dokonƒçete p≈ô√≠bƒõh p≈ôid√°n√≠m alespo≈à 5 ≈ô√°dk≈Ø k√≥du.
                    Nezapome≈àte zaƒç√≠t ka≈æd√Ω ≈ô√°dek k√≥du p≈ô√≠kazem `{print}`.
            2:
                story_text: |
                    V tomto stra≈°ideln√©m domƒõ si m≈Ø≈æete vybrat sv√° monstra pomoc√≠ emoji. Samoz≈ôejmƒõ m≈Ø≈æete tak√© pou≈æ√≠t slova.
                example_code: |
                    ```
                    monster_1 {is} üëª
                    monster_2 {is} ü§°
                    monster_3 {is} üë∂
                    {print} Vstupujete do stra≈°ideln√©ho domu.
                    {print} Najednou uvid√≠te monster_1
                    {print} Ut√≠k√°te do jin√© m√≠stnosti...
                    {print} Ale monster_2 na v√°s tam ƒçek√°!
                    {print} Oh ne! Rychle se dosta≈àte do kuchynƒõ.
                    {print} Ale kdy≈æ vstoup√≠te, monster_3 v√°s napadne!
                    ```
                story_text_2: |
                    ### Cviƒçen√≠
                    V p≈ô√≠kladu v√Ω≈°e jsou monstra p≈ôedem urƒçena. Tak≈æe poka≈æd√©, kdy≈æ spust√≠te sv≈Øj k√≥d, je v√Ωstup stejn√Ω.
                    Dok√°≈æete p≈ôidat p≈ô√≠kazy `{ask}`, aby byl stra≈°ideln√Ω d≈Øm interaktivn√≠ a hr√°ƒçi si mohli vybrat monstra, se kter√Ωmi se setkaj√≠?
                example_code_2: |
                    ```
                    monster_1 {is} _
                    monster_2 {is} _
                    monster_3 {is} _
                    {print} Vstupujete do stra≈°ideln√©ho domu.
                    {print} Najednou uvid√≠te monster_1
                    {print} Ut√≠k√°te do jin√© m√≠stnosti...
                    {print} Ale monster_2 na v√°s tam ƒçek√°!
                    {print} Oh ne! Rychle se dosta≈àte do kuchynƒõ.
                    {print} Ale kdy≈æ vstoup√≠te, monster_3 v√°s napadne!
                    ```
            3:
                story_text: |
                    In the previous levels you've made an introduction to your haunted house game, but as you might have noticed the story would always have a dreadful end.
                    In this level you can make your story more interactive by changing the outcome of the game; sometimes you'll get eaten, sometimes you'll escape!
                    Let Hedy decide randomly!
            4:
                story_text: |
                    In this level you learn how to use quotation marks in your games.
                    Can you make your Haunted House level 4 proof?
                example_code: |
                    ```
                    {print} _Escape from the haunted house!_
                    {print} _There are 3 doors in front of you..._
                    choice {is} {ask} _Which door do you choose?_
                    {print} _You picked door ..._ choice
                    monsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED
                    {print} _You see..._
                    {sleep}
                    {print} monsters {at} {random}
                     ```
            5:
                story_text: |
                    Up until this level the haunted house game always asked the player to choose a door, but as you might have noticed, they didn't really have to answer correctly.
                    If the player filled in a completely random answer, the game would still work and the player might even win (despite not picking a door).
                    In this level you can only win the game by picking the same door Hedy picked randomly.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house!'
                    {print} 'There are 3 doors in front of you...'
                    doors {is} 1, 2, 3
                    monsters {is} werewolf, mummy, vampire, zombie
                    chosen_door {is} {ask} 'Which door do you choose?'
                    {print} 'You chose door...' chosen_door
                    {sleep}
                    correct_door {is} doors {at} {random}
                    {if} chosen_door {is} correct_door {print} 'Great! Youve escaped!'
                    {else} {print} 'Oh no! You are being eaten by a...' monsters {at} {random}
                    ```
            9:
                story_text: |
                    In this level you can use nesting, which allows you to make the haunted house even more interactive!
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player = alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    {repeat} 3 {times}
                        {if} player {is} alive
                            correct_door {is} doors {at} {random}
                            {print} 'There are 3 doors in front of you...'
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} chosen_door {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
                    ### Exercise
                    Now it's very hard to win this game, can you make it easier to win?
                    For example by only having 1 wrong door and 2 correct doors instead of 1 correct door en 2 wrong ones?
            11:
                story_text: |
                    In this level we've changed the repeat command and we've added a line to our haunted house that tells the player in which room they are.
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player {is} alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    {for} i {in} {range} 1 {to} 3
                        {if} player {is} alive
                            correct_door = doors {at} {random}
                            {print} 'Room ' i
                            {print} 'There are 3 doors in front of you...'
                            chosendoor = {ask} 'Which door do you choose?'
                            {if} chosendoor {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
    if_command:
        description: Introducing the if command
        levels:
            9:
                story_text: |
                    In this level you can also put an {if} command inside another {if} command.
    in_command:
        description: Introducing the in command
        levels:
            5:
                example_code_2: |
                    ```
                    animals is dog, cow, sheep
                    answer is ask 'What is your favorite animal?'
                    _ answer _ animals _ 'Mine too!'
                    _ _ 'My favorite animals are dogs, cows and sheep'
                    ```
    is_command:
        description: introducing is command
        levels:
            2:
                story_text_2: |
                    ### Exercise
                    Time to make your own variables!
                    In the example code we made an example of the variable `favorite_animal`. In line 1 the variable is set, and in line 2 we haved used the variable in a print command.
                    Firstly, finish our example by filling in your favorite animal on the blank. Then make at least 3 of these codes yourself. Pick a variable, and set the variable with the {is} command. Then use it with a {print} command, just like we did.
            14:
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
                    ```

                    {if} age < 13
                        {print} 'You are younger than me!'
                    {else}
                        {print} 'You are older than me!'
    language:
        default_save_name: language
        levels:
            5:
                story_text: |
                    Make your own program to practice your vocabulary in a new language.

                    ```
                    {print} 'Learn French!'
                    cat {is} {ask} 'üê±'
                    {if} cat {is} chat {print} 'Terrific!'
                    {else} {print} 'No, cat is chat'
                    frog {is} {ask} 'üê∏'
                    {if} frog {is} grenouille {print} 'Super!'
                    {else} {print} 'No, frog is grenouille'
                    ```
    maths:
        levels:
            6:
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 minus 5 is ' 5 - 5
                    {print} '5 times 5 is ' 5 * 5
                    ```
            12:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```

                    {print} 2.5 + 2.5
    music:
        default_save_name: Hudba
        levels:
            1:
                story_text: |-
                    V t√©to √∫rovni se nauƒç√≠te pou≈æ√≠vat p≈ô√≠kaz `{play}` k zahr√°n√≠ melodie!

                    Napi≈°te `{play}` n√°sledovan√© notou, kterou chcete zahr√°t. Stupnice obsahuje C-D-E-F-G-A-H.
                    Jak vid√≠te, je zde 7 r≈Øzn√Ωch p√≠smen, ale m≈Ø≈æeme hr√°t v√≠ce ne≈æ jen 7 not.
                    Za p√≠smenem zadejte ƒç√≠slo mezi 1 a 10, abyste vybrali stupnici, nap≈ô√≠klad po H4 n√°sleduje C5.
                    C1 je nejni≈æ≈°√≠ nota, kterou m≈Ø≈æete zahr√°t, C10 je nejvy≈°≈°√≠.

                    ### Cviƒçen√≠
                    Vyzkou≈°ejte si uk√°zkov√Ω k√≥d a pak si s n√≠m pohrajte! Dok√°≈æete vytvo≈ôit vlastn√≠ melodii?
                    V dal≈°√≠ √∫rovni se nauƒç√≠te, jak zahr√°t nƒõkter√© existuj√≠c√≠ p√≠snƒõ.
            6:
                story_text: "Instead of playing notes, you can also play numbers now. Simply type `{play} 1` for the lowest note, `{play} 70` for the highest note, or anything in between.\n\n### Exercise\n This calls for musical maths! Try out the example code a couple of times with different starting numbers. \nThen, see if you can compose a song using the numbers.\n"
    parrot:
        name: Papou≈°ek
        default_save_name: Papou≈°ek
        description: Vytvo≈ôte si sv√©ho vlastn√≠ho online mazl√≠ƒçka papou≈°ka, kter√Ω v√°s bude kop√≠rovat!
        levels:
            1:
                story_text: |
                    Vytvo≈ôte si sv√©ho vlastn√≠ho online mazl√≠ƒçka papou≈°ka, kter√Ω v√°s bude kop√≠rovat!
                example_code: |
                    ```
                    {print} Jsem papou≈°ek Hedy
                    {ask} Jak√© je tv√© jm√©no?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    M≈Ø≈æete papou≈°ka p≈ôimƒõt, aby se zeptal na jinou ot√°zku? Dopl≈àte pr√°zdn√° m√≠sta v p≈ô√≠kladu!
                example_code_2: |
                    ```
                    {print} Jsem papou≈°ek Hedy
                    {ask} _
                    {echo}
                    {echo}
            2:
                story_text: |
                    Vytvo≈ôte si sv√©ho vlastn√≠ho online mazl√≠ƒçka papou≈°ka, kter√Ω v√°s bude kop√≠rovat!
                example_code: |
                    ```
                    {print} Im Hedy the parrot
                    name {is} {ask} whats your name?
                    {print} name
                    {sleep}
                    {print} squawk
                    {sleep}
                    {print} name
                    ```
                story_text_2: |
                    ### Exercise
                    You can use variables to make the parrot say more than only your name. Can you complete this code?
            3:
                story_text: |
                    Teach your parrot a new word with `{add}`.
                example_code: |
                    ```
                    words {is} squawk, Hedy
                    {print} Train your parrot!
                    new_word {is} {ask} Which word do you want to teach them?
                    {add} new_word {to_list} words
                    {print} üßí Say new_word , Hedy!
                    {print} ü¶ú words {at} {random}
                    ```
            4:
                story_text: |
                    In this level we have to use quotation marks with the commands `{ask}` and `{print}`.
                    Can you complete the code by adding quotation marks?
            5:
                story_text: |
                    Reward your parrot {if} it says the correct word!
                example_code: |
                    ```
                    words {is} squawk, Hedy
                    {print} 'Train your parrot!'
                    new_word {is} {ask} 'Which word do you want to teach them?'
                    {add} new_word {to_list} words
                    said_word {is} words {at} {random}
                    {print} 'üßí Say ' new_word ', Hedy!'
                    {print} 'ü¶ú ' said_word
                    {if} said_word {is} new_word {print} 'üßí Great job, Hedy! üç™'
                    {else} {print} 'üßí No, Hedy! Say ' new_word
                    ```
    piggybank:
        levels:
            12:
                story_text: |
                    In this adventure you learn how to make a digital piggy bank, to calculate how much money you have and how long you need to save up to buy what you want!
                example_code: |
                    ```
                    {print} 'The digital piggy bank'
                    wish = {ask} 'What would you like to buy?'
                    price = {ask} 'How much does that cost?'
                    saved = {ask} 'How much money have you saved already?'
                    allowance = {ask} 'How much pocket money do you get per week?'
                    to_save = price - saved
                    weeks = to_save / allowance
                    {print} 'You can buy a ' wish ' in ' weeks ' weeks.'
            14:
                example_code: |
                    ```
                    _ calculate_budget with wish, money, allowance
                        to_save = wish - money
                        weeks = to_save / allowance
                        {if} wish _ money
                            {print} 'You need to save up some more!'
                            {print} 'Youll need ' weeks ' more weeks.'
                        {else}
                            {print} 'Great! You have enough'
                            {print} 'Lets go shopping!'

                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'

                    {call} calculate_budget with _, _, _
                    ```
    pressit:
        levels:
            9:
                story_text: |
                    Now that you know how to combine statements, you can create a touch type tool with `{pressed}`.

                    ### Exercise
                    Finish the code. Each time a random letter should be chosen, which you have to press. You get a point for a correct press, and and two points deduction for a wrong press.
                    **(extra)** Clear the screen after each letter, and show the user how many points they have scored.
    print_command:
        levels:
            18:
                example_code_2: |
                    ```
                    temperature = 25
                    {print}('It is ', temperature, ' degrees outside')
                    ```

                    {print}('My name is ', name)
    random_command:
        levels:
            16:
                story_text: |-
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    We use square brackets to point out a place in a list. For example: `friends[1]` is the first name on the list of friends, as you can see in the first part of the example code. The second part of the example code shows you that we can also match 2 lists using the variable i.
    repeat_command:
        description: repeat command
        levels:
            7:
                story_text: |
                    ## Repeat! Repeat! Repeat!
                    Level 7 adds the `{repeat}` command.  `{repeat}` can be used to execute one line of code multiple times. Like this:

                    ### Exercise
                    Play around with the repeat command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?
            9:
                story_text: |
                    Great job! You've reached another new level! In the previous level you've learned to use multiple lines of code in an {if} or {repeat} command. But you can't yet combine the two...
                    Good news! In this level you will be allowed to put an {if} inside an {if}, or inside a {repeat} command. Putting a block of code inside another block of code is called nesting.                     ``` Putting a block of code inside another block of code is called nesting.
                example_code: |
                    ```
                    answer = {ask} 'Are you ready to learn something new?'
                    {if} answer {is} yes
                        {print} 'Great! You can learn to use the repeat command in the if command!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                        {print} 'Hooray!'
                    {else}
                        {print} 'Maybe you should practice some more in the previous level'
    repeat_command_2:
        description: repeat command 2
        levels:
            7:
                story_text_2: |
                    Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.
                    Then, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.
    restaurant:
        name: Restaurace
        default_save_name: Restaurace
        description: Vytvo≈ôte si vlastn√≠ virtu√°ln√≠ restauraci
        levels:
            1:
                story_text: |
                    V levelu 1 si m≈Ø≈æete vytvo≈ôit svou vlastn√≠ virtu√°ln√≠ restauraci a p≈ôij√≠mat objedn√°vky sv√Ωch host≈Ø..
                story_text_2: |
                    Napad√° v√°s v√≠ce ≈ô√°dk≈Ø, kter√© m≈Ø≈æete p≈ôidat do k√≥du restaurace? M≈Ø≈æete se nap≈ô√≠klad host≈Ø {ask}, co by si p≈ô√°li k pit√≠, ≈ô√≠ct jim cenu nebo jim pop≈ô√°t dobrou chu≈•?
                example_code_2: |
                    ```
                    {print} V√≠tejte v restauraci Hedy üçü
                    {ask} Co byste si chtƒõli objednat?
                    {echo} Tak≈æe byste si chtƒõli objednat
                    {print} Dƒõkujeme za Va≈°i objedn√°vku!
                    {print} Je to na cestƒõ!
                    ```
            2:
                story_text: |
                    In level 2 you could expand your restaurant by using variables. In level 1 Hedy could only {echo} the order once and only remember the last thing that was ordered.
                    Now you can use variables and Hedy can remember both the food and the drinks!
                example_code: |
                    ```
                    {print} Welcome to Hedy's restaurant!
                    {print} Today we're serving pizza or lasagna.
                    food {is} {ask} What would you like to eat?
                    {print} Great choice! The food is my favorite!
                    topping {is} {ask} Would you like meat or veggies on that?
                    {print} food with topping is on its way!
                    drinks {is} {ask} What would you like to drink with that?
                    {print} Thank you for your order.
                    {print} Your food and drinks will be right there!
                    ```
                story_text_2: |
                    ### Exercise
                    Can you make this code more elaborate? For example by adding drinks to the order? Or...?
            3:
                example_code: |
                    ```
                    {print} Welcome to Hedy's Random Restaurant!
                    {print} The only restaurant that will randomly choose your meal and its price for you!
                    starters {is} salad, soup, carpaccio
                    mains {is} pizza, brussels sprouts, spaghetti
                    desserts {is} brownies, ice cream, french cheeses
                    drinks {is} cola, beer, water
                    prices {is} 1 dollar, 10 dollars, 100 dollars
                    {print} You will start with: starters {at} {random}
                    {print} Then we'll serve: mains {at} {random}
                    {print} And as dessert: desserts {at} {random}
                    {print} You will get a drinks {at} {random} to drink
                    {print} That will be: prices {at} {random}
                    {print} Thank you and enjoy your meal!
                    ```
                story_text_2: |
                    Does your costumer have any allergies or do they dislike certain dishes? Then you can use the `{remove}`command to remove it from your menu.
                example_code_2: |
                    ```
                    {print} Mystery milkshake
                    flavors {is} strawberry, chocolate, vanilla
                    allergies {is} {ask} Are you allergic to any falvors?
                    {remove} allergies {from} flavors
                    {print} You get a flavors {at} {random} milkshake
                    ```
            4:
                story_text: |
                    ### Exercise
                    Add the quotation marks to this code to make it work! Be careful: variables should not be in quotation marks.
                    Then, use the `{clear}` command to only show one line at a time in your output screen.

                    ### Exercise 2
                    Go back to the previous level and copy your restaurant code. Make the code work in this level by adding quotation marks in the right spots and add some `{clear}` commands.
            5:
                story_text: |
                    In this level the {if} command allows you to {ask} your customers questions and give different responses to the answers.
                    In the example below, you see that you can {ask} the customer {if} they want to hear the specials and Hedy can respond accordingly.
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    special {is} {ask} 'Would you like to hear our specials today?'
                    {if} special {is} yes {print} 'Todays special is chicken piri piri and rice.' {else} {print} 'No problem.'
                    food {is} {ask} 'What would you like to eat?'
                    {print} 'One ' food ', coming right up!'
                    drink {is} {ask} 'What would you like to drink with that?'
                    {if} drink {is} cola {print} 'Im sorry, we are out of cola!' {else} {print} 'Great choice!'
                    anything {is} {ask} 'Would you like anything {else}?'
                    {print} 'Let me repeat your order...'
                    {print} 'One ' food
                    {if} drink {is} cola {print} 'and...' {else} {print} 'One ' drink
                    {if} anything {is} no {print} 'Thats it!' {else} {print} 'One ' anything
                    {print} 'Thank you for your order and enjoy your meal!'
                    ```

                    ### Exercise
                    Can you think of more questions to {ask} the customers when they are ordering, and make up different responses to their answers by using the {if} command?
            6:
                story_text: |
                    In this level you can use maths to calculate the total price of your customer's order, which can make your virtual restaurant more realistic.
                example_code: |
                    You can make a simple restaurant code, like this:
                    ```
                    {print} 'Welcome to Hedys restaurant'
                    {print} 'Here is our menu:'
                    {print} 'Our main courses are pizza, lasagne, or spaghetti'
                    main = {ask} 'Which main course would you like?'
                    price = 0
                    {if} main {is} pizza price = 10
                    {if} main {is} lasagne price = 12
                    {if} main {is} spaghetti price = 8
                    {print} 'You have ordered ' main
                    {print} 'That will be ' price ' dollars, please'
                    {print} 'Thank you, enjoy your meal!'
                    ```
            7:
                story_text: |
                    In this level you've learned how to use the {repeat} command to repeat a line of code a certain amount of times.
                    You can use that in your restaurant to {ask} multiple people what they'd like to eat. Like this:

                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people are joining us today?'
                    {repeat} people times food = {ask} 'What would you like to eat?'
                    {print} 'Thanks for your order! Its coming right up!'
                    ```
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people are joining us today?'
                    {repeat} people times food = {ask} 'What would you like to eat?'
                    {print} 'Thanks for your order! Its coming right up!'
                    ```
            9:
                story_text: |
                    In this level you can use nesting to make your restaurant more realistic and more fun!
                    For example you would {ask} for sauce {if} somebody orders fries, but you wouldn't {if} someone orders pizza!
                    Check out the example, and try this at your own virtual restaurant!
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people will be joining us today?'
                    {print} 'Great!'
                    price = 0
                    {repeat} people {times}
                        food = {ask} 'What would you like to order?'
                        {print} food
                        {if} food {is} fries
                            price = price + 3
                            sauce = {ask} 'What kind of sauce would you like with your fries?'
                            {if} sauce {is} no
                                {print} 'no sauce'
                            {else}
                                price = price + 1
                                {print} 'with ' sauce
                        {if} food {is} pizza
                            price = price + 4
                    {print} 'That will be ' price ' dollar'
                    {print} 'Enjoy your meal!'
                    ```
            10:
                story_text: |
                    In this level you'll learn how to easily {ask} your guests' orders in a short code.
                example_code: |
                    ```
                    courses = appetizer, main course, dessert
                    {for} course {in} courses
                        food = {ask} 'What would you like to eat as your ' course '?'
                        {print} food ' will be your ' course
                    ```
                story_text_2: |
                    Of course, you could also order for multiple people!
                example_code_2: |
                    ```
                    courses = appetizer, main course, dessert
                    names = Timon, Onno
                    {for} name {in} names
                        {for} course {in} courses
                            food = {ask} name ', what would you like to eat as your ' course '?'
                            {print} name ' orders ' food ' as their ' course
                    ```
            11:
                story_text: |
                    We can use the `{for} i {in} {range} 1 {to} 5` to {print} the orders from multiple customers in an orderly manner.
                example_code: |
                    ```
                    {print} 'Welcome to Restaurant Hedy!'
                    people = {ask} 'For how many people would you like to order?'
                    {for} i {in} {range} 1 {to} people
                        {print} 'Order number ' i
                        food = {ask} 'What would you like to eat?'
                        {print} food
                        {if} food {is} fries
                            sauce = {ask} 'What kind of sauce would you like with that?'
                            {print} sauce
                        drinks = {ask} 'What would you like to drink?'
                        {print} drinks
                    price = 4 * people
                    {print} 'That will be ' price ' dollars, please!'
                    ```
            12:
                story_text: |
                    From this level on you can use decimal numbers to make you menu more realistic.
                example_code: |
                    ```
                    price = 0
                    food = {ask} 'What would you like to order?'
                    drink = {ask} 'What would you like to drink?'
                    {if} food {is} 'hamburger'
                        price = price + 6.50
                    {if} food {is} 'pizza'
                        price = price + 5.75
                    {if} drink {is} 'water'
                        price = price + 1.20
                    {if} drink {is} 'soda'
                        price = price + 2.35
                    {print} 'That will be ' price ' dollar, please'
                    ```
            13:
                story_text: |
                    In this level we can use the new commands to upgrade our restaurant.
                    We use `{and}` to see {if} two things are both the case.
                example_code: |
                    ```
                    price = 10
                    food = {ask} 'What would you like to eat?'
                    drinks = {ask} 'What would you like to drink?'
                    {if} food {is} 'sandwich' {and} drinks {is} 'juice'
                        {print} 'Thats our discount menu'
                        price = price - 3
                    {print} 'That will be ' price ' dollars'
                    ```
    rock:
        name: K√°men, n≈Ø≈æky, pap√≠r
        default_save_name: K√°men
        description: Vytvo≈ôte si vlastn√≠ hru k√°men, n≈Ø≈æky, pap√≠r
        levels:
            1:
                story_text: |
                    V √∫rovni 1 m≈Ø≈æete zaƒç√≠t hrou k√°men, n≈Ø≈æky, pap√≠r.

                    Pomoc√≠ `{ask}` m≈Ø≈æete prov√©st v√Ωbƒõr a pomoc√≠ `{echo}` m≈Ø≈æete tuto volbu zopakovat.
                example_code: |
                    ```
                    {print} Co si vybere≈°?
                    {ask} Vyber si {from} k√°men, n≈Ø≈æky, pap√≠r
                    {echo} Tv√° volba byla:
                    ```
                    M√≠sto slov m≈Ø≈æete samoz≈ôejmƒõ pou≈æ√≠t tak√© emotikony: ‚úä‚úã‚úå
                story_text_2: |
                    M√≠sto slov m≈Ø≈æete tak√© pou≈æ√≠t emotikony: ‚úä‚úã‚úå
                    M≈Ø≈æete vytvo≈ôit k√≥d pomoc√≠ emotikon≈Ø?
                example_code_2: |
                    ```
                    {print} Co si vybere≈°?
                    {ask} Tv√° volba from _
                    {echo} Tak tv√° volba byla:
                    ```
            2:
                story_text: |
                    In this level you can practise using the variables, so that you can make the rock, paper, scissors game in the next level!
                example_code: |
                    ```
                    choice {is} _
                    {print} I choose choice
                    ```
            3:
                story_text_2: |
                    ### Exercise
                    Now you only have one player, so can you add a second player?
                    You can even use variables to name player 1 and player 2.
                example_code_2: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} player 1 chooses... choices {at} {random}
                    {print} player 2 _
                    ```
            5:
                story_text: |
                    In this level we can determine who won.
                    For that you need the new `{if}` code.

                    Save your choice with the name of choice and the choice of computer as computer choice.
                    Then you can use `{if}` to see {if} they are the same or different.
                    Will you finish the code?
                example_code: |
                    ```
                    options {is} rock, paper, scissors
                    computer_choice {is} _
                    choice {is} {ask} What do you choose?
                    {print} 'you chose ' _
                    {print} 'computer chose ' _
                    {if} _ {is} _ {print} 'tie!' {else} {print} 'no tie'
                    ```

                    Fill in the correct code on the blanks to see {if} it is a draw.
            9:
                story_text: |
                    In this level you can program the whole rock, paper, scissors game by nesting the {if}-commands. Can you finish the code?
                example_code: |
                    ```
                    choices = rock, paper, scisscors
                    your_choice = {ask} 'What do you choose?'
                    {print} 'You choose ' your_choice
                    computer_choice = choices {at} {random}
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} 'rock'
                        {if} your_choice {is} 'paper'
                            {print} 'You win!'
                        {if} your_choice {is} 'scissors'
                            {print} 'You lose!'
                    ```
            10:
                story_text: |
                    Feeling too lazy to play the game yourself? Let Hedy play it for you!
                example_code: |
                    ```
                    choices = rock, paper, scissors
                    players = Marleen, Michael
                    {for} player {in} players
                         {print} player ' chooses ' choices {at} {random}
                    ```
            13:
                story_text: |
                    With the `{and}` command you can shorten your rock, paper, scissors code! Check out the example code below and try to finish it.
                example_code: |
                    ```
                    options = 'rock', 'paper', 'scissors'
                    your_choice = {ask} 'What do you choose?'
                    computer_choice = options {at} {random}
                    {print} 'You choose ' your_choice
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'paper'
                        {print} 'You win!'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'
                        {print} 'The computer wins!'
                    ```
            15:
                example_code: |
                    ```
                    won = 'no'
                    options = 'rock', 'paper', 'scissors'
                    {while} won == 'no'
                        your_choice = {ask} 'What do you choose?'
                        computer_choice = options {at} {random}
                        {print} 'you chose ' your_choice
                        {print} 'the computer chose ' computer_choice
                        {if} computer_choice == your_choice
                            {print} 'Tie!'
                        {if} computer_choice == 'rock' {and} your_choice == 'scissors'
                            {print} 'You lose!'
                        {if} computer_choice == 'rock' {and} your_choice == 'paper'
                            {print} 'You win!'
                            won = 'yes'
    rock_2:
        levels:
            2:
                story_text: |
                    Now that you have learned how to use the `{ask} command, you can make your rock, paper, scissors code interavtive too!

                    ### Exercise
                    Make the rock, paper, scissors code interactive by adding the `{ask}` command and a question to your rock, paper, scissors code.
                example_code: |
                    ```
                    choice is _
                    {print} I choose choice
                    ```
    secret:
        default_save_name: language
        levels:
            12:
                story_text: |
                    In this adventure you can create your own super spy code. Encode a message that only the right agent can decipher.
                    If the enemy tries to crack the code, they will get some false info to waste their time.
                example_code: |
                    ```
                    name {is} {ask} 'What is your name?'
                    {if} name {is} '_'
                        a {is} 'Go to the airport '
                    {else}
                        a {is} 'Go to the trainstation '
                    password {is} {ask} 'What is the password?'
                    {if} password {is} _
                        b {is} 'tomorrow at 02.00'
                    {else}
                        b {is} 'today at 10.00'
                    {print} _ _ _
                    ```
            13:
                story_text: |
                    The code you made in the previous level can be made a lot easier in this one with the `{and}` command.
    sleep_command:
        description: introducing sleep command
        levels:
            2:
                story_text: |
                    ## The sleep command
                    Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.
    songs:
        levels:
            6:
                story_text: |
                    Songs often contain a lot of repetition. Sometimes the repetition is also based on counting.
                    For example, in the well-known song 'Bottles of beer'. You can program that song with a little math.
                example_code: |
                    ```
                    verse = 99
                    {print} verse ' bottles of beer on the wall'
                    {print} verse ' bottles of beer'
                    {print} 'Take one down, pass it around'
                    verse = verse - 1
                    {print} verse ' bottles of beer on the wall'
                    ```

                    You can now repeat lines 2 to 9 as many times as you want by copying the lines.
                example_code_2: |
                    ```
                    number = 6
                    number = number - 1
                    print number ' little monkeys jumping on the bed'
                    print 'One fell off and bumped his head'
                    print 'Mama called the doctor and the doctor said'
                    print 'NO MORE MONKEYS JUMPING ON THE BED!'
                    sleep
                    ```
            7:
                story_text: |
                    Songs often contain a lot of repetition. For example... Baby Shark! If you sing it, you keep singing the same thing:

                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark

                    You can make this song much shorter with a `{repeat}`! Can you finish the code?
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Baby Shark tututudutudu'
                    {print} 'Baby Shark'
                    ```

                    After Baby Shark you can of course also program other songs. There are many songs with repetition.
            8:
                story_text: |
                    In a previous level you've programmed the song 'Bottles of beer'. You made one verse and then had to copy the verses 99 times. In level 7 you can repeat the song 99 times, just by adding one simple line!
                example_code: |
                    ```
                    verse = 99
                    {repeat} 99 {times}
                        {print} verse ' bottles of beer on the wall'
                        {print} verse ' bottles of beer'
                        {print} 'Take one down, pass it around'
                        verse = verse - 1
                        {print} verse ' bottles of beer on the wall'
                    ```
            10:
                story_text: |
                    In this level you can easily make the childrens' song 'Five little monkeys'. Can you make the last chorus?
                    You can also make the whole baby shark song (including all the other sharks in the family) in only 6 lines!
                    Or you can make Old MacDonald with all the different animals.
                example_code: |
                    ```
                    monkeys = 5, 4, 3, 2
                    {for} monkey {in} monkeys
                        {print} monkey ' little monkeys jumping on the bed'
                        {print} 'One fell off and bumped his head'
                        {print} 'Mama called the doctor and the doctor said'
                        {print} 'NO MORE MONKEYS JUMPING ON THE BED!'
                    ```

                    ```
                    sharks = baby, mommy, daddy, grandma, grandpa
                    {for} shark {in} sharks
                        {print} shark 'tututututudu'
                        {print} shark 'tututututudu'
                        {print} shark 'tututututudu'
                        {print} shark
                    ```
                    ```
                    animals = pig, dog, cow
                    {for} animal {in} animals
                        {if} animal {is} pig
                            sound = oink
                        {if} animal {is} dog
                            sound = woof
                        {if} animal {is} cow
                            sound = moo
                        {print} 'Old MacDonald had a farm'
                        {print} 'E I E I O!'
                        {print} 'and on that farm he had a ' animal
                        {print} 'E I E I O!'
                        {print} 'with a ' sound sound ' here'
                        {print} 'and a ' sound sound ' there'
                        {print} 'here a ' sound
                        {print} 'there a ' sound
                        {print} 'everywhere a ' sound sound
                    ```
                story_text_2: |
                    ### Exercise 2
                    Print the song Five little moneys jumping on the bed. Look up the text if you don't remember.

                    **(extra)** Print the song Old MacDonald had a farm, and make sure all animals make a different sound, using an `{if}`.
            11:
                story_text: |
                    In this level you can use the `{for} i {in} {range}` command to make songs that use counting.
                example_code: |
                    ```
                    {for} i {in} {range} 5 {to} 1
                        {print} i ' little monkeys jumping on the bed'
                        {print} 'One fell off and bumped his head'
                        {print} 'Mama called the doctor and the doctor said'
                        {if} i {is} 1
                            {print} 'PUT THOSE MONKEYS RIGHT TO BED!'
                        {else}
                            {print} 'NO MORE MONKEYS JUMPING ON THE BED!'
                    ```
            12:
                story_text: |
                    In this song we can make it even easier to program '{if} you're happy and you know it, clap your hands'. Because we can put all of the actions in a variable, check it out:
                example_code: |
                    ```
                    actions = 'clap your hands', 'stomp your feet', 'shout Hurray!'
                    {for} action {in} actions
                        {for} i {in} {range} 1 {to} 2
                            {print} '{if} youre happy and you know it'
                            {print} action
                        {print} '{if} youre happy and you know it and you really want to show it'
                        {print} '{if} youre happy and you know it'
                        {print} action
                    ```
            16:
                story_text: |
                    In this level, you can program a song like OldMacDonald even more quickly. You can connect the right animal to the right sound by simply putting them in the same place in the list.
                    The Drunken Sailor is also quickly made in this level. You only need 8 lines for the entire song, check it out!

                    ### Exercise
                    Complete the Old MacDonald song by setting the variable `animal` to `animals[i]` and `sound` to `sounds[i]`.

                    ```
                    animals = ['pig', 'dog', 'cow']
                    sounds = ['oink', 'woof', 'moo']
                    {for} i {in} {range} 1 {to} 3
                        animal = _
                        sound = _
                        {print} 'Old MacDonald had a farm'
                        {print} 'E I E I O!'
                        {print} 'and on that farm he had a ' animal
                        {print} 'E I E I O!'
                        {print} 'with a ' sound sound ' here'
                        {print} 'and a ' sound sound ' there'
                        {print} 'here a ' sound
                        {print} 'there a ' sound
                        {print} 'everywhere a ' sound sound
                    ```

                    ```
                    lines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} line {in} lines
                        {for} i {in} {range} 1 {to} 3
                            {print} line
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
    songs_2:
        levels:
            12:
                example_code: |
                    ```
                    {define} twinkle
                        {print} 'Twinkle'
                        {print} '...'

                    {call} twinkle
                    {print} 'Up above the world so high'
                    {print} 'Like a diamond in the sky'
                    {call} _
                    ```
    tic_2:
        description: Zahrajte si hru Pi≈°kvorky!
    turtle:
        name: ≈Ωelva
        default_save_name: ≈Ωelva
        description: Vytvo≈ôte si vlastn√≠ kresbu
        levels:
            1:
                story_text: |
                    Hedy m≈Ø≈æete tak√© pou≈æ√≠vat k kreslen√≠. Kombinov√°n√≠m otoƒçen√≠ a ƒçar m≈Ø≈æete nakreslit ƒçtverec nebo schody!

                    Pomoc√≠ `{forward}` nakresl√≠te ƒç√°ru dop≈ôedu. ƒå√≠slo za n√≠m urƒçuje, jak daleko ≈æelva p≈Øjde. `{turn} {right}` otoƒç√≠ ≈æelvu o ƒçtvrt ot√°ƒçky ve smƒõru hodinov√Ωch ruƒçiƒçek, `{turn} {left}` otoƒç√≠ proti smƒõru hodinov√Ωch ruƒçiƒçek.

                    Pokud chcete j√≠t dozadu, pou≈æijete p≈ô√≠kaz `{forward}` s negativn√≠m ƒç√≠slem. Nap≈ô√≠klad `{forward} -100`
                story_text_2: |
                    ### Cviƒçen√≠
                    Toto je zaƒç√°tek mal√Ωch schod≈Ø. Dok√°≈æete je roz≈°√≠≈ôit na 5 schod≈Ø?
            2:
                story_text: |
                    V t√©to √∫rovni m≈Ø≈æete pou≈æ√≠t promƒõnn√©, aby byla ≈æelva interaktivn√≠. Nap≈ô√≠klad se m≈Ø≈æete  zeptat hr√°ƒçe, kolik krok≈Ø m√° ≈æelva udƒõlat.
                example_code: |
                    ```
                    answer {is} {ask} Kolik krok≈Ø m√° ≈æelva udƒõlat?
                    {forward} answer
                    ```
                story_text_2: |
                    V prvn√≠ √∫rovni mohla ≈æelva zat√°ƒçet pouze doleva nebo doprava. To je trochu nuda!
                    Ve druh√© √∫rovni m≈Ø≈æe m√≠≈ôit nosem do v≈°ech smƒõr≈Ø.

                    K otoƒçen√≠ o ƒçtvrtinu pou≈æijte hodnotu 90. ≈ò√≠k√°me tomu stupnƒõ. √öpln√© otoƒçen√≠ je 360 stup≈à≈Ø.
                    Dok√°≈æete z tohoto k√≥du vytvo≈ôit obrazec? T≈ôeba troj√∫heln√≠k nebo kruh?
                example_code_2: |
                    ```
                    {print} Kreslen√≠ obrazce
                    angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
            3:
                story_text: |
                    V t√©to √∫rovni m≈Ø≈æete pou≈æ√≠t p≈ô√≠kaz `{at} {random}` s kresl√≠c√≠ ≈æelvou. N√°hodn√° hodnota zp≈Øsob√≠, ≈æe ≈æelva p≈Øjde poka≈æd√© jinou cestou.
                    Pou≈æijte `{at} {random}` k v√Ωbƒõru hodnotu ze seznamu. M≈Ø≈æete zkop√≠rovat a vlo≈æit ≈ô√°dky 2 a 3 a vytvo≈ôit tak del≈°√≠ n√°hodnou cestu.
            4:
                story_text: |
                    Ve ƒçtvrt√© √∫rovni mus√≠te i p≈ôi kreslen√≠ pou≈æ√≠vat uvozovky s p≈ô√≠kazy `{print}` a `{ask}`!
                example_code: |
                    ```
                    {print} 'Kreslen√≠ obrazce'
                    angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
            5:
                story_text: |
                    V p√°t√© √∫rovni m≈Ø≈æete prov√©st volbu pomoc√≠ p≈ô√≠kazu `{if}`. Nap≈ô√≠klad mezi r≈Øzn√Ωmi typy obrazc≈Ø.
                example_code: |
                    ```
                    {print} 'Kreslen√≠ obrazce'
                    figure {is} {ask} 'Chcete nakreslit ƒçtverec nebo troj√∫heln√≠k?'
                    {if} figure {is} triangle angle {is} 120
                    {else} angle {is} 90
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    {turn} angle
                    {forward} 25
                    ```
                example_code_2: |
                    ```
                    direction {is} {ask} 'Do you want to go left, right, or straight ahead?'
                    if direction is left turn _
                    if direction is right turn _
                    forward 100
                    ```
            6:
                story_text: |
                    V t√©to √∫rovni m≈Ø≈æete pomoc√≠ v√Ωpoƒçt≈Ø kreslit r≈Øzn√© obrazce.
                    Mo≈æn√° jste se ve ≈°kole uƒçili, ≈æe otoƒçen√≠ cel√©ho kruhu je 360 stup≈à≈Ø. Pokud ne, teƒè u≈æ to v√≠te!
                    Proto tak√© pou≈æ√≠v√°te 90 stup≈à≈Ø pro ƒçtverec. Kdy≈æ 360 vydƒõl√≠te 4, je to 90.
                    Teƒè, kdy≈æ um√≠me s Hedy poƒç√≠tat, m≈Ø≈æeme kreslit jak√©koliv obrazce, kter√© chceme!
                example_code: |
                    ```
                    angles = {ask} 'Kolik √∫hl≈Ø chcete?'
                    angle = 360 / angles
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    {forward} 50
                    {turn} angle
                    ```
            8:
                story_text: |
                    Nyn√≠, kdy≈æ m≈Ø≈æeme opakovat nƒõkolik ≈ô√°dk≈Ø, m≈Ø≈æeme snadnƒõji vytv√°≈ôet obrazce.
                    √öhel nastav√≠me pouze jednou a pak tuto promƒõnnou pou≈æijeme v p≈ô√≠kazu `{repeat}`.
                story_text_2: |
                    Nyn√≠ m≈Ø≈æeme vylep≈°it program, kter√Ω kresl√≠ r≈Øzn√© obrazce.
                    Dok√°≈æete urƒçit, kolikr√°t se mus√≠ ≈æelva otoƒçit? Dokonƒçete k√≥d a nakreslete libovoln√Ω mnoho√∫heln√≠k!
            9:
                story_text: |
                    Now that we can use a `{repeat}` inside a `{repeat}`, we can create more complex figures.

                    ### Exercise 1
                    This code creates three black triangles, change that into five pink squares.

                     **(extra)** Create a figure of your own choosing consisting of at least two different shapes types.
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                     **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
    turtle_draw_it:
        levels:
            9:
                example_code: |
                    Hint for the nested squares:
                    ```
                    colors = red, blue, orange, yellow, pink, purple, green, brown, black
                    distance = 120
                    repeat 5 times
                    _
                    ```
                    Hint for the flags:
                    ```
                    country = ask 'which country would you like to see the flag of?'
                    if country is 'the Netherlands'
                        color_1 = red
                        color_2 = white
                        color_3 = blue
                    ```
            10:
                example_code: |
                    Hint Nested Hexagon:
                    ```
                    distances = 100, 80, 60, 40, 20
                    {for} distance {in} distances
                    _
                    ```

                    Hint Traffic Lights:
                    ```
                    colors = red, yellow, green
                    {for} chosen_color {in} colors
                        color _
                        {repeat} _
                    ```
            12:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!
                    Hint: Bracelet designing program. Firstly, define a function **for each shape** you want to use on the bacelet. Then, add the shapes to the bacelet like this:
                    </div>
                    Bracelet Designing program <img src="https://github.com/hedyorg/hedy/assets/80678586/549d7f3a-c492-4b4a-b173-746eb3400951" width="500">
                example_code: |
                    ```
                    {define} draw_a_square
                    _

                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 180

                    {for} i {in} {range} 1 {to} 5
                        {color} gray
                        {forward} 100
                        shape = {ask} 'What kind of shape would you like next on the bracelet?'
                        chosen_color = {ask} 'In which color?'
                        {color} chosen_color
                        {if} shape = 'square'
                            {call} draw_a_square
                    ```
    while_command:
        description: while
    years:
        description: Countdown to the new year!
        levels:
            11:
                story_text: |
                    In this level you can use the `{for} i {in} {range}` command to countdown to the New Year.

                    ### Exercise
                    Fill in the blanks and make the code work!
                example_code: |
                    ```
                    for _ in _ 10 to 1
                        {print} i
                    {print} 'Happy New Year!'
                    ```
