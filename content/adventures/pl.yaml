adventures:
    story:
        name: Historyjka
        default_save_name: Historyjka
        description: Stwórz krótką historyjkę
        levels:
            1:
                story_text: |
                    Na poziomie 1 możesz stworzyć opowieść z różnymi postaciami które stworzysz samodzielnie.

                    W pierwszej linii użyj polecenia `{ask}` i zapytaj kto będzie głównym bohaterem twojej opowieści.

                    Kolejne linie zacznij od polecenia `{print}` jeżeli chcesz wyświetlić tekst.
                    Użyj polecenia `{echo}` jeżeli chcesz aby imię twojego bohatera znalazło się na końcu wypowiedzi.
                example_code: |
                    ```
                    {ask} Głównym bohaterem historii jest
                    {print} Główny bohater idzie przez las
                    {echo} Jest troszkę przestraszony,
                    {print} Wszędzie słyszy jakieś dziwnie odgłosy
                    {print} Obawia się że to jest nawiedzony las
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Teraz stwórz własną historię z co najmniej sześciu (6) linii kodu.
                    Twoja historia nie może być taka sama jak przykładowy kod.
                    Użyj co najmniej jednego polecenia `{ask}` i jednego `{echo}`.
                    Możesz zrobić to na dowolny temat.
                    Jeśli nie możesz wymyślić tematu, skorzystaj z jednej z naszych opcji: wyjście do kina, mecz sportowy lub dzień w zoo.
            2:
                story_text: |
                    Na poziomie 2 twoja opowieść może być znacznie zabawniejsza. Imię głównego bohatera może pojawić się w dowolnym miejscu w zdaniu.

                    Trzeba będzie napisać nieco więcej kodu. Musisz zapytać o imię głównego bohatera, zanim będziesz mógł wykorzystać je w zdaniu.

                    Potem będziesz mógł użyć imienia w dowolnym miejscu w zdaniu.
                example_code: |-
                    ```
                    imię {is} {ask} Jak nazywa się główny bohater?
                    {print} imię biega teraz po lesie
                    {print} imię trochę się boi
                    {print} Nagle imię usłyszał dziwny dźwięk...
                    {sleep}
                    {print} imię obawia się, że las może być nawiedzony
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Teraz nadszedł czas, aby dodać zmienne do opowieści, którą stworzyłeś na poprzednim poziomie.
                    Przejdź do „Moje programy”, poszukaj przygody fabularnej poziomu 1 i skopiuj kod. Wklej kod na ekranie wprowadzania na tym poziomie.

                    Ten kod nie zadziała na tym poziomie, ponieważ nie używałeś jeszcze zmiennych.
                    Zmień polecenia `{ask}` i `{echo}` w swoim kodzie na poprawną formę, której nauczyłeś się na tym poziomie.

                    **Dodatkowo** Dodaj polecenie `{sleep}` do swojego kodu, aby zbudować napięcie w swojej historii.
            3:
                story_text: |
                    Na poziomie 3. Twoja historyjka może być jeszcze zabawniejsza. Możesz wybrać losowo potwora, zwierzę oraz inne utrudnienia, tak jak w przykładzie:
                example_code: |
                    ```
                    zwierzęta {is} 🦔, 🐿, 🦉, 🦇
                    {print} Teraz słyszy odgłos zwierzęta {at} {random}
                    ```
                story_text_2: |
                    Komenda `{add}` może się przydać w historyjce.
                example_code_2: |
                    ```
                    {print} On słyszy odgłos
                    zwierzęta {is} 🐿, 🦔, 🦇, 🦉
                    zwierzę {is} {ask} Co myślisz że to było?
                    {add} zwierzę {to_list} zwierzęta
                    {print} To był odgłos zwierzęta {at} {random}
                    ```
                story_text_3: |
                    To jest przykład polecenia `{remove}` w twojej opowieści.

                    ### Ćwiczenie
                    Skopiuj swoją opowieść z poprzednich poziomów na ten poziom.
                    Na tym poziomie nauczyłeś się 3 nowych komend `{at} {random}`, `{add} {to_list}` i `{remove} {from}`.
                    Dodaj nowe wiersze kodu do swojej historii, aby wszystkie nowe polecenia znalazły się w niej przynajmniej raz.
                example_code_3: |
                    ```
                    {print} Jego stał się zbyt ciężki.
                    {print} W środku była butelka wody, latarka i cegła.
                    plecak {is} woda, latarka, cegła
                    wyrzuc {is} {ask} Który przedmiot powinien wyrzucić?
                    {remove} wyrzuc {from} plecak
                    ```
            4:
                story_text: |
                    ### Ćwiczenie
                    Skopiuj przykładowy kod i dokończ go dodając cudzysłowie w puste miejsca w liniach 1 i 2.
                    Puste miejsca w linii 3 i 4 nie powinny być zastępowane przez cudzysłowie , tylko komendą `{sleep}` i `{clear}`. Czy dasz radę to zrobić?

                    ### Ćwiczenie 2
                    Wróć do poprzedniego poziomu i skopiuj kod z opowieści. Spraw by kod działał w tym poziomie dodając cudzysłowy w odpowiednie miejsca.
                    Zwróć uwagę, że zmienne w twojej opowieści powinny być poza cudzysłowami. Podobnie jak w drugiej linii kodu przykładowego. W tej linii nazwa zmiennej wstawiona poza cudzysłowami.
                example_code: |
                    ```
                    imię {is} {ask}_ Jakie jest twoje imię? _
                    {print}  _ Głównym bohaterem jest _ imię
                    _
                    _
                    {print} imię _ idzie na spacer do lasu _
                    {print} imię _ nieco się boi _
                    zwierzęta {is} 🦔, 🐿, 🦉, 🦇
                    {print} _ Słyszy dźwięk _ zwierzęcia {at} {random}
                    {print} imię _ obawia się, że jest w nawiedzonym lesie _
                    ```
            5:
                story_text: |
                    W tym poziomie możesz zaprogramować różne zakończenia, które sprawią, że Twoja opowieść będzie jeszcze ciekawsza.
                    W przykładowym kodzie możesz zobaczyć jak stworzyć 2 różne zakończenia.

                    ### Ćwiczenie 1
                    Napisz nową, krótką opowieść składającą się z  przynajmniej 6 linii kodu na wybrany przez Ciebie temat.
                    Brak Ci pomysłów? Wybierz jeden z tych: superbohater, nudny dzień w szkole, opuszczeni na bezludnej wyspie.

                    Teraz daj graczowi wybór pomiędzy dobrym i złym zakończeniem, tak jak w kodzie przykładowym.
                    Zaprogramuj oba zakończenia.

                    ### Ćwiczenie 2
                    Skopiuj swoją opowieść przygodową z poprzednich poziomów.
                    Znajdź sposób by dodać co najmniej 2 polecenia `{if}` oraz `{else}` do Twojej historii.
                    Mogą to być dobre lub złe zakończenia, możesz również znaleźć inny sposób na użycie tych poleceń.
                example_code: |
                    ```
                    imię {is} {ask} 'Kto idzie przez las?'
                    {print} imię ' idzie przez las'
                    {print} imię ' spotyka potwora'
                    zakończenie {is} {ask} 'Czy chciałbyś dobre czy złe zakończenie?'
                    {if} zakończenie {is} dobre {print} imię ' wyciąga miecz i potwór ucieka'
                    {else} {print} 'Potwór zjada ' imię
                    ```
            7:
                story_text: "W opowieściach, bohaterowie czasem powtarzają wybrany zwrot kilka razy. Przykładem tego jest bohater wołający o pomoc lub śpiewający piosenkę.\nMożesz stworzyć takie powtórzenia w swojej opowieści przy użyciu polecenia `{repeat}`.\n\n### Ćwiczenie\nDodaj powtórzenia do Twojej opowieści. Wróć do swoich zapisanych programów i wybierz Twój program z opowieścią z poziomu 6 i \nznajdź linię zawierającą polecenie `{print}` i powtórz ją!\n"
                example_code: |
                    ```
                    {print} 'Książę wciąż wołał o pomoc'
                    {repeat} 5 {times} {print} 'Pomocy!'
                    {print} 'Dlaczego nikt mi nie pomaga?'
                    ```
            8:
                story_text: |
                    W tym poziomie masz możliwość napisania wielu linii kodu wewnątrz polecenia `{if}`. Dzięki temu możesz urozmaicić szczęśliwe i tragiczne zakończenia Twojej opowieści.

                    ### Ćwiczenie 1
                    Przykładowy kod pokazuje dwa różne zakończenia; jedno, w którym bohaterowie skaczą w czasie przy użyciu maszyny czasu, a drugie, w którym tego nie robią.
                    Uzupełnij puste miejsca co najmniej jednym zdaniem na każde zakończenie.
                    **(Dodatkowo)** Stwórz dłuższą opowieść. Co się w niej dzieje? Możesz także dodać drugie polecenie `{ask}` z innymi opcjami.

                    ### Ćwiczenie 2
                    Wróć do swoich zapisanych programów, wybierz program z opowieścią z poziomu 5. Napisz w nich dobre oraz złe zakończenia, każde z co najmniej trzema liniami kodu!
                example_code: |
                    ```
                    {print} 'O, nie! Tyranozaur Rex zbliża się!'
                    zakończenie = {ask} 'Czy chcesz zakończenie szczęśliwe czy smutne?'
                    {if} zakończenie {is} szczęśliwe
                        {print} 'W ostatnim momencie Richard wraca do maszyny czasu!'
                        {print} _
                    {else}
                        {print} 'O, nie! Richard jest zbyt wolny...'
                        {print} _
                    ```
            9:
                story_text: |
                    W tym poziomie możesz użyć poleceń `{if}` and `{repeat}` wewnątrz innych poleceń `{if}` oraz `{repeat}`.
                    Dzięki temu możesz jeszcze bardziej urozmaicić swoją opowieść.

                    ### Cwiczenie 1
                    Uzupełnij kod tak, aby polecenie `{if}` działało poprawnie.

                    ### Cwiczenie 2
                    Dodaj polecenie `{if}` oraz `{else}` do części opowiadania, gdzie Robin wraca do domu.

                    ### Cwiczenie 3
                    Wróć do swojej opowiadania z poziomu 8 i użyj co najmniej dwóch poleceń `{if}` wewnątrz innego polecenia `{if}`.
                example_code: |
                    ```
                    {print} 'Robin idzie wzdłuż ulicy'
                    lokalizacja = {ask} 'Czy Robin idzie do sklepu, czy wraca do domu?'
                    {if} lokalizacja {is} sklep
                        {print} 'Wchodzi do sklepu.'
                        {print} 'Robin widzi ciekawą książkę'
                        książka = {ask} 'Czy Robin kupuje książkę?'
                        {if} książka {is} tak
                        _ {print} 'Robin kupuje książkę i wraca do domu'
                        _ {else}
                        _ {print} 'Robin opuszcza sklep i wraca do domu'
                    {else}
                        {print} 'Robin wraca do domu'
                    ```
            10:
                story_text: |
                    W tym poziomie możesz użyć polecenia {for} w swojej opowieści. Dzięki tej komendzie możesz bardzo prosto zaprogramować część wierszyka "Sroczka kaszkę warzyła".

                    ### Ćwiczenie

                    Spójrz na <a href="https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf"> opowiadanie</a> jeśli go nie znasz i upewnij się, że jest wydrukowane tak jak w książce.
                example_code: "```\nzwierzęta = _ , _ , _ \n{print} 'Brązowy niedźwiedź, Brązowy niedźwiedź'\n {print} 'Co widzisz?'\n```\n"
            12:
                story_text: |-
                    W tym poziomie cudzysłowy będą potrzebne, żeby przypisać wiele słów do jednej zmiennej.

                    ### Ćwiczenie

                    Weź opowieść z poprzedniego poziomu, dowolny poziom jest ok. Teraz upewnij się, że cudzysłowy są powstawiane w odpowiednich miejscach.
                example_code: |
                    ```
                    imię = 'Królowa Anglii'
                    {print} imię ' jadła kawałek ciasta, gdy nagle...'
                    ```
            13:
                story_text: |
                    Używając poleceń `{and}` oraz `{or}` możesz uczynić swoje opowieści bardziej wszechstronnymi. Możesz zadać dwa pytania i odpowiedzieć na kombinację odpowiedzi.

                    ### Ćwiczenie 1
                    Popatrz na przykładowy kod i dokończ go. Następnie dodaj co najmniej 2 polecenia `{if}` z poleceniami `{and}` lub `{or}`.

                    ### Ćwiczenie 2
                    Odnajdź opowieść z poprzedniego poziomu i dodaj jedno polecenie `{and}` lub `{or}`.
                example_code: "```\n{print} 'Nasz bohater idzie przez las'\n{print} 'Ścieżka rozdziela się'\nścieżka = {ask} 'Którą ścieżkę powinna wybrać?'\nbroń ={ask} 'Jaką broń wyciąga?'\n{if} ścieżka {is} 'lewo' {and} broń {is} 'miecz'\n\t_\n```\n"
            15:
                story_text: |
                    Przy użyciu pętli `{while}` możesz stworzyć jeszcze bardziej wciągające opowieści. Na przykład, możesz użyć `{while} game == 'on'` żeby kontynuować grę aż się zakończy.
                    Alternatywnie możesz napisać `{while} sword == 'lost'` żeby nie pozwolić graczowi kontynuować zanim znajdą miecz.

                    ### Ćwiczenie
                    Przykładowy kod pokazuje, jak w historii używać pętli `{while}` . Teraz ** pomyśl o swoim scenariuszu **, w którym gracz musi coś znaleźć , zanim będzie mógł kontynuować.
                example_code: "```\nklucze = 'zgubione'\n{print} 'Stoisz w ogrodzie i zgubiłeś swoje klucze.' \n{print} 'Gdzie chcesz ich poszukać?'\n{print} 'Możesz wybrać: drzewo, doniczka, kamień, skrzynka na listy'\n{while} klucze == 'zgubione'\n    miejsce = {ask} 'Gdzie chcesz popatrzeć?'\n    {if} miejsce == 'doniczka'\n        {print} 'Tutaj są!'\n        klucze = 'znalezione'\n    {else}\n        {print} 'Nie, nie ma ich w ' miejsce\n{print} 'Teraz możesz wejść do domu!'\n```\n"
            18:
                story_text: |
                    Napiszemy kolejną opowieść, ale teraz musimy użyć nawiasów z poleceniem`{print}`.

                    ### Ćwiczenie 1
                    Stwórz opowieść składającą się z co najmniej 5 zdań. Nie musisz jeszcze używać 'imię'
                example_code: |
                    ```
                    {print}('Witamy w tej opowieści!')
                    ```
                story_text_2: |
                    ### Ćwiczenie 2
                    Przygotowaliśmy już dla ciebie polecenie `{input}`. Najpierw użyj zmiennej `imię` w twojej opowieści.
                    Następnie dodaj drugie polecenie `{ask}` i użyj również tej zmiennej.
                    Wskazówka: Pamiętaj o przecinkach w poleceniu `{print}` pomiędzy tekstem a zmiennymi!
                example_code_2: |
                    ```
                    imię = {input}("Jak się nazywasz?")
                    {print}('Witamy w tej opowieści!')
                    ```
    add_remove_command:
        name: '{add} {to_list} & {remove} {from}'
        default_save_name: add_remove_command
        description: wprowadzamy {add}{to_list} i {remove} {from}
        levels:
            3:
                story_text: |
                    ## Komenda Add to
                    Możesz dodawać elementy do listy używając komendy`{add} {to_list}`. Żeby dodać element do listy możesz po prostu wpisać: `{add} penguin {to_list} animals` albo możesz użyć komendy `{ask}`, tak jak w przykładowym kodzie.
                example_code: |
                    ```
                    zwierzęta {is} pies, kot, kangur
                    ulubione {is} {ask} Jakie jest Twoje ulubione zwierzę?
                    {add} ulubione {to_list} zwierzęta
                    {print} Wybieram zwierzęta {at} {random}
                    ```
                story_text_2: |
                    ## Komenda Remove from
                    Tak samo jak możemy dodawać elementy do listy, możemy je również usuwać. Robimy to za pomocą komendy `{remove} {from}`.
                example_code_2: |
                    ```
                    zwierzęta {is} pies, kot, kangur
                    nielubiane {is} {ask} Którego zwierzęcia nie lubisz?
                    {remove} nielubiane {from} zwierzęta
                    {print} Wybieram zwierzęta {at} {random}
                    ```
                story_text_3: |
                    ### Ćwiczenie
                    Wypróbuj nowe komendy w przykładzie z wirtualną restauracją. Dodaj smak, którego gracz oczekuje i usuń smak, na który ma alergię.
                example_code_3: |
                    ```
                    {print} Tajemniczy koktajl mleczny
                    smaki {is} truskawkowy, czekoladowy, waniliowy
                    oczekiwany {is} {ask} Jakiego smaku oczekujesz?
                    _
                    alergia {is} {ask} Na który smak masz alergię?
                    _
                    {print} Otrzymujesz koktajl o smaku {at} {random}
                    ```
    and_or_command:
        name: '{and} & {or}'
        default_save_name: i lub
        description: wprowadzenie komendy {and} i {or}
        levels:
            13:
                story_text: |-
                    Teraz nauczymy się komend `{and}` i `{or}`! Jeżeli chcesz sprawdzić dwa stwierdzenia, nie musisz używać dwóch komend`{if}` zamiast tego możesz użyć komendy `{and}` i `{or}`.

                    Jeżeli używasz komendy `{and}`, oba stwierdzenia, po lewej i prawej stronie komendy `{and}` muszą być prawdziwe. Możemy również użyć komendy `{or}`. Wtedy tylko jedno stwierdzenie musi być poprawne.
                example_code: |
                    ```
                    imię = {ask} 'Jak masz na imię?'
                    wiek = {ask} 'Ile masz lat?'
                    {if} imię {is} 'Hedy' {and} wiek {is} 2
                        {print} 'Jesteś prawdziwym Hedym!'
                    ```
    ask_command:
        name: '{ask}'
        default_save_name: komenda_ask
        description: Wprowadzenie komendy {ask}
        levels:
            1:
                story_text: |
                    ## Komenda zapytaj
                    Skoro znasz się już komendę `{print}`, jesteś gotowy nauczyć się kolejnej metody: `{ask}`. Używając komendy `{ask}`, możesz zadać pytanie. Wypróbuj tego:
                example_code: |
                    ```
                    {print} Cześć!
                    {ask} Jak masz na imię?
                    ```
                story_text_2: |
                    ## Komenda `{echo}`
                    Jeśli chcesz aby komputer powtórzył odpowiedź, możesz użyć komendy `{echo}`. Odpowiedź zostanie wypisana na końcu zdania, czyli w tym przypadku po "cześć"
                example_code_2: |
                    ```
                    {print} Cześć!
                    {ask} Jak masz na imię?
                    {echo} cześć
                    ```
                story_text_3: |
                    ### Ćwiczenie
                    Wypróbuj komend `{ask}` i `{echo}`. Najpierw wypełnij puste miejsca, aby program zadziałał.
                    Następnie zadaj 2 kolejne pytania, używając komendy `{ask}`. Po każdym `{ask}` użyj `{echo}` aby wypisać odpowiedź na ekranie.
                example_code_3: |
                    ```
                    _ Jak się masz?
                    _
                    ```
            2:
                story_text: |
                    ## Komenda zapytaj
                    Teraz gdy potrafimy używać **zmiennych** w naszym kodzie, nie potrzebujemy już komendy `{echo}`.
                    Możemy używać zmiennych, aby zapisać odpowiedzi do naszych pytań i w ten sposób używać tych odpowiedzi w wielu zapytaniach w naszym kodzie.
                    Spójrz na to:

                    W ten sposób Twój kod staje się interaktywny!
                example_code: |
                    ```
                    imię {is} {ask} Jak masz na imię?
                    {print} Cześć imię
                    wiek {is} {ask} Ile masz lat?
                    {print} imię ma ... lat.
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    W poprzedniej zakładce przećwiczyliśmy ustawianie wartości zmiennych używając komendy `{is}`.
                    Utworzyłeś co najmniej 3 zmiennych i użyłeś ich z komendą print.
                    Teraz, zamiast ustawiać zmiennych w kodzie, spróbuj uczynić je interaktywnymi, tak jak zrobiliśmy to powyżej.

                    Skopiuj kod z poprzedniej zakładki i uczyń zmienne interaktywnymi używając komendy `{ask}`.
                example_code_2: |
                    ```
                    ulubione_zwierzę {is} {ask} Jakie jest Twoje ulubione zwierzę?
                    {print} Lubię ulubione_zwierzę
                    ```
            18:
                story_text: The final change we will need to make to get Python code is changing `{ask}` into `{input}`.
                example_code: |
                    ```
                    {print}('My name is Hedy!')
                    name = {input}('What is your name?')
                    {print}('So your name is ', name)
                    ```
    blackjack:
        name: Blackjack
        default_save_name: Blackjack
        description: Spróbuj zdobyć jak największą ilość punktów ale mniejszą lub równą 21
        levels:
            17:
                story_text: |
                    Blackjack to prosta gra karciana, w której musisz zdobyć jak najwięcej punktów, ale nie więcej niż 21. Dostajesz dwie karty. Każda karta ma swoją wartość liczbową, a figury (walet, królowa i król) są warte 10 punktów.
                    As jest wart 1 lub 11 punktów (do wyboru). Rozdający, twój przeciwnik, również otrzymuje dwie karty.
                    Jeśli chcesz, możesz zdobyć kolejną kartę, a jej punkty zostaną dodane do Twojej sumy. Rozdający może również wybrać inną kartę.
                    Uważaj, aby nie zdobyć więcej niż 21 punktów, ponieważ jeśli to zrobisz, przegrywasz!
                    Gracz, który zbliży się do liczby 21, nie przekraczając jej, wygrywa!

                    ### Ćwiczenie
                    W tej przygodzie będziemy kodować pierwszą część naszej gry w Blackjacka. Stworzymy funkcję, która pozwoli nam obliczyć wartość każdej z kart.

                    ***Ustaw zmienne***
                    Zacznij od zrobienia listy wszystkich kart, od 2 do Asa. Następnie zrób listę figur, czyli Walet, Królowa i Król. Wtedy wybierz przypadkową kartę z listy kart, która ma być kartą_1.

                    ***Utwórz funkcję do obliczania punktów***
                    Utwórz funkcję, która obliczy, ile punktów jest warta karta.
                    Wszystkie figury są warte 10 punktów, As jest wart 11, a wszystkie pozostałe karty mają swoją wartość liczbową .
                    Return the zmienną `points` na koniec funkcji.

                    ***Przetestuj funkcję***
                    Sprawdź, czy Twoja funkcja działa poprawnie. Zakończ pierwsze polecenie print poprzez wypełnienie go kartą, którą wyciągnąłeś. Następnie zakończ drugi wiersz, wywołując funkcję za pomocą card_1.
                    Uruchom kod kilka razy. Czy jesteś zadowolony z wyników? Świetnie! Następnie możesz usunąć część testową i przejść do następnej zakładki!
                example_code: |
                    ```
                    {print} 'BLACKJACK'

                    # Ustaw zmienne
                    karty = _
                    figury = _
                    karta_1 =

                    # Stwórz funkcję do obliczenia punktów
                    {define} oblicz_punkty {with} kart:
                        {if} karta{in} figury:
                            punkty = _
                        {elif} _
                            _
                        {else}:
                            _
                        _ points

                    # Przetestuj swoją funkcję
                    {print} 'Twoja karta to ' _
                    {print} 'Jest warta ' _ ' punktów'.
                    ```
    blackjack_2:
        name: Blackjack 2
        default_save_name: Blackjack_2
        description: Blackjack część 2
        levels:
            17:
                story_text: |
                    ### Ćwiczenie
                    W tej przygodzie napiszemy kod drugiej części naszej gry w Blackjacka.

                    ***Wklej swój kod z poprzedniej przygody***
                    Poprzednio zacząłeś listę zmiennych i stworzyłeś funkcję do obliczania wartości kart. Skopiuj swój kod i wklej go tutaj. Zwróć uwagę na to, że nie potrzebujesz już części testowej, dlatego jeśli jeszcze jej nie usunąłeś to zrób to teraz.

                    ***Dodaj więcej zmiennych***
                    Ustawiłeś już listy `cards` i `face_cards` oraz zmienną `card_1`. Pod tymi zmiennymi utwórz 3 dodatkowe zmienne: `card_2`, dealer_card_1` and `dealer_card_2`. Wszystkie te zmienne są ustawione na losową kartę z listy kart.

                    ***Podlicz punkty***
                    Aby obliczyć liczbę punktów, które zdobyłeś, wywołujemy funkcję za pomocą karty 1 i robimy to ponownie dla karty 2. Następnie dodajemy oba te wyniki razem, aby uzyskać sumę.
                    Zrób to samo dla punktów innych graczy , ale pamiętaj, aby użyć kart innych graczy, a nie własnych!

                    ***2 Asy***
                    Świetnie sobie radzisz! Prawie wszystkie wyniki można teraz obliczyć. Jest tylko jeden wyjątek: 2 asy. Jeśli zdobędziesz 2 asy, twoja suma to 12 punktów, a nie 22 (ponieważ mając 22 punkty przegrałbyś!). Dotyczy to oczywiście również rozdającego.

                    ***Pokaż wynik***
                    Na koniec musisz powiedzieć programowi, które karty wyciągnąłeś i ile to jest punktów. Następnie pokaż, jakie karty ma inny gracz i ile zdobył punktów.

                    ***Przejdź do następnej zakładki***
                    Świetnie! Skończyłeś tę część gry! Skopiuj kod i przejdź do następnej zakładki, aby dowiedzieć się, jak poprosić o dodatkową kartę i ogłosić zwycięzcę.
                example_code: |
                    ```
                    # Wklej tutaj swój kod z poprzedniej przygody. 

                    # Dodaj te zmienne do listy zmiennych
                    karta_2 = _
                    karta_przeciwnika_1 = _
                    karta_przeciwnika_2 = _

                    # Podlicz swoje punkty
                    twoje_punkty_1 = {call} _ {with} card_1
                    twoje_punkty_2 = _
                    twój_wynik= _

                    # Podlicz punkty przeciwnika
                    punkty_przeciwnika_1 = _
                    _
                    _

                    # 2 Asy
                    {if} karta_1 == 'As' {and} _
                        twój_wynik = 12
                    {if} karta_przeciwnika_1 _
                        wynik_przeciwnika = _

                    # Pokaż wynik
                    {print} 'Wyciągnąłeś ' _ ' i ' _ ' kartę. To oznacza, że masz ' _ ' punktów'
                    {print} 'Przeciwnik wyciągnął ' _ ' i ' _ '. To oznacza, że ma ' _ ' punktów'
                    ```
    blackjack_3:
        name: Blackjack 3
        default_save_name: Blackjack_3
        description: Blackjack część 3
        levels:
            17:
                story_text: |
                    W poprzedniej zakładce nauczyłeś się jak dobierać 2 losowe karty dla siebie i dla przeciwnika, a także jak obliczyć ile punktów dostał każdy z was.
                    W tej przygodzie dodamy opcję zapytania o dodatkową kartę dla ciebie oraz dla twojego przeciwnika.

                    ### Ćwiczenie
                    ***Wklej swój kod z poprzedniej przygody*** Skopiuj swój kod z poprzedniej zakładki i wklej tutaj.

                    ***Dodatkowa karta dla ciebie*** Jeśli chcesz, to możesz dostać dodatkową kartę ,żeby zbliżyć swój wynik do 21 punktów. Najpierw zapytaj gracza czy chcę dodatkową kartę.
                    Jeśli będzie chciał, to wybierz losową kartę i napisz jaką kartę dobrał. Jeżeli karta nie jest asem , to wtedy wywołaj funkcję i dodaj punkty do twojego wyniku. 
                    W przypadku, gdy karta jest asem, nie możesz użyć funkcji, ponieważ wartość asa może wynosić 1 punkt lub jedenaście w zależności od tego jak dużo punktów zebrałeś do tej pory.
                    Jeśli twój wynik jest mniejszy niż 11, to wtedy chcesz aby wartość asa wynosiła 11 punktów (ponieważ jest to najbliższe 21 punktów). Więc dodaj 11 punktów do swojego wyniku.
                    Jeżeli wynik jest większy lub równy 11, to wtedy chcesz aby wartość asa wynosiła 1 punkt (ponieważ nie chcesz mieć więcej niż 21 punktów). Więc dodaj 1 punkt do swojego wyniku.
                    Na koniec napisz swój nowy wynik.

                    ***Dodatkowa karta dla przeciwnika*** Przeciwnik może również dostać dodatkową kartę. Przeciwnik nie musi być oto zapytany, ponieważ zawsze dostaje dodatkową kartę jeżeli jego wynik wynosi mniej niż 17.
                    Skopiuj 'Dodatkowa karta do twojego kodu' i wklej do sekcji przeciwnika. Następnie zmień go w taki sposób, aby dopasować do przeciwnika wybierającego dodatkową kartę i otrzymującego punkty, które są dodawane do jego wyniku.
                example_code: |
                    ```
                    # Wklej tutaj swój kod z poprzedniej przygody.

                    # Dodatkowa karta dla ciebie 
                    hit = {ask} _
                    {if} hit == 'yes':
                        karta_3 = _
                        {print} _
                        {if} karta_3 _ 'As':
                            twoje_punkty_3 = _
                            twój_wynik = _
                        {else}:
                           {if} twój _wynik _
                                _
                            {else}:
                                _
                        {print} _

                    # Dodatkowa karta dla przeciwnika
                    {if} wynik_przeciwnika< 17
                    _
                    ```
    blackjack_4:
        name: Blackjack 4
        default_save_name: Blackjack_4
        description: Blackjack część 4
        levels:
            17:
                story_text: |
                    W ostatnich 3 przygodach prawie stworzyłeś działającą grę w Blackjacka! Ostatnią rzeczą do zrobienia jest zdecydowanie kto jest zwycięzcą.

                    ### Ćwiczenie
                    ***Wklej swój kod z poprzedniej przygody*** Zacznij od wklejenia kodu, który do tej pory stworzyłeś do pola programowania.

                    ***Zdecyduj kto jest zwycięzcą***
                    Po pierwsze, jeśli ty i przeciwnik macie po tyle samo punktów, oznacza to remis.
                    Po drugie, jeżeli przeciwnik ma więcej niż 21 punktów a ty tyle nie masz, to wtedy ty jesteś zwycięzcą. 
                    Po trzecie, jeśli oboje macie mniej niż 22 punkty, to wtedy musimy dowiedzieć się kto jest bliżej 21 punktów. Możemy to zrobić poprzez porównanie wyników. Jeżeli twój wynik jest wyższy niż wynik przeciwnika, to jesteś zwycięzcą. Jeżeli nie, to wygrywa przeciwnik. 
                    Na koniec, we wszystkich innych przypadkach (np. jak masz więcej niż 21 punktów a przeciwnik nie lub jeżeli oboje macie więcej niż 21 punktów) jesteś przegranym.

                    ***Ciesz się swoją grą!***
                    Czy Twoja gra działa poprawnie? Niesamowicie! Wykonałeś świetną robotę! Ciesz się swoją grą!
                    Jeśli to nie zadziała od razu, nie martw się, mogłeś popełnić błąd. Zachowaj spokój i zdebuguj swój kod za pomocą przycisku biedronki.
                example_code: |
                    ```
                    # Wklej tutaj swój kod z poprzedniej przygody.

                    # Zdecyduj kto jest zwycięzcą.
                    {if} _
                        {print} 'Remis! Zagraj ponownie!'
                    {elif} _
                        {print} 'Wygrywasz!'
                    {elif} _ :
                        {if} _:
                            {print} _
                        {else}:
                            {print} _
                    {else}:
                        _
                    ```
    calculator:
        name: Kalkulator
        default_save_name: Kalkulator
        description: Stwórz kalkulator
        levels:
            6:
                story_text: |
                    Teraz gdy umiesz już matematykę, możesz sam zrobić kalkulator!
                example_code: "```\nliczba_1 ={ask} 'Wpisz pierwszą liczbę:'\nliczba_2 ={ask} 'Wpisz drugą liczbę:'\npoprawna_odpowiedź = liczba_1 * liczba_2 \n{print} liczba_1 ' razy ' liczba_2 ' to ' poprawna_odpowiedź \n```\n"
                story_text_2: |
                    ### Ćwiczenie
                    Powyższy kalkulator obliczy odpowiedź za Ciebie, ale możesz również stworzyć program, aby sprawdzić swoje umiejętności matematyczne, jak ten:
                    Wypełnij puste miejsca, aby go dokończyć!
                example_code_2: |
                    ```
                    poprawna_odpowiedź = 11 * 27
                    odpowiedź = {ask} 'Ile to jest 11 razy 27?'
                    {if} odpowiedź {is} _ {print} 'dobra robota!'
                    {else} {print} 'Źle! To było ' _.
                    ```
                story_text_3: |
                    **Dodatkowo**Możesz też pozwolić komputerowi na samodzielne wykonywanie losowych sum za pomocą`{random}`.
                example_code_3: |-
                    ```
                    liczby= 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    liczba_1 = _
                    liczba_2 = _
                    poprawna_odpowiedź = liczba_1 * liczba_2
                    podana_odpowiedź ={ask} 'Ile to jest ' liczba_1 ' razy ' liczba_2 '?'
                    {if} _
                    {else} _
                    ```
            9:
                story_text: |
                    W poziomie 6 stworzyłeś kalkulator, w tym poziomie możesz rozbudować ten kod tak, aby zadawał wiele pytań.

                    ### Ćwiczenie 1
                    Czy potrafisz dokończyć linię 10, w taki sposób aby program zadziałał?

                    ### Ćwiczenie 2
                    Daj graczom informację zwrotną, gdy wpiszą odpowiedź. Zrób to za pomocą `{print} 'Correct!'` lub `{print} 'Wrong! The correct answer is ' correct_answer`
                example_code: "```\nwynik = 0\n{repeat} 10 {times}\n    liczby = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    liczba_1= liczby {at} {random}\n    liczba_2 = liczby {at} {random}\n    poprawna_odpowiedź = liczba_1* liczba_2 \n    {print} 'Ile wynosi ' liczba_1 ' razy ' liczba_2 '?'\n    odpowiedź = {ask} 'Wpisz tutaj swoją odpowiedź...'\n    {print} 'Twoja odpowiedź to' odpowiedź\n    {if} _ {is} _\n        wynik = wynik + 1\n{print} 'Świetna robota! Twój wynik to... ' wynik ' na 10!\n```\n"
            10:
                story_text: |
                    Ten kalkulator pomaga ci ćwiczyć tabliczkę mnożenia!
                    ### Ćwiczenie
                    Wypełnij puste miejsca. Chcemy, aby program zadał graczowi te pytania: 
                    ```
                    Ile to jest 1 razy 1?
                    Ile to jest 1 razy 2?
                    Ile to jest 1 razy 3?
                    Ile to jest 2 razy 1?
                    Ile to jest 2 razy 2?
                    Ile to jest 2 razy 3?
                    Ile to jest 3 razy 1?
                    Ile to jest 3 razy 2?
                    Ile to jest 3 razy 3?
                    _
                    ```
                example_code: |
                    ```
                    liczby = 1, 2, 3
                    {for} _
                        {for} _
                            odpowiedź = {ask} _
                            poprawnie = liczba_1 * liczba_2
                            {if} odpowiedź{is} poprawna
                                {print} 'Dobra robota!'
                            {else}
                                {print} 'Zła odpowiedź. Poprawna odpowiedź ' poprawnie
                    ```
            11:
                story_text: |
                    Dzięki `{for}` można uprościć program ćwiczeniowy tabliczki mnożenia.

                    ### Ćwiczenie 1
                    Popraw przykładowy kod tak, aby drukował ładną tabliczkę mnożenia: <br> "1 razy 10 to 10", "2 razy 10 to 20" itd.

                    ### Ćwiczenie 2
                    Wróć do swojego kodu mnożenia na poziomie 10 i zmodyfikuj go tak, aby używał `{for}` i `{range}`.
                example_code: |
                    ```
                    liczba = 10
                    {for} i {in} {range} 1 {to} 10
                        {print} i * liczba
                    ```
            12:
                story_text: |
                    W tym poziomie, możesz stworzyć kalkulator, który działa z liczbami dziesiętnymi.

                    ### Ćwiczenie 1
                    Wypełnij puste miejsca, aby ukończyć kalkulator. Pamiętaj o używaniu kropki, a nie przecinka z liczbami dziesiętnymi.

                    ### Ćwiczenie 2
                    Stwórz nowy program do ćwiczeń matematycznych, ale tym razem użyj liczb dziesiętnych.
                    Stwórz listę liczb, wybierz dwie lub więcej i pozwól graczowi odpowiedzieć.
                    Oczywiście, musisz jeszcze potwierdzić odpowiedź! **Dodatkowo** Podnieś poziom trudności poprzez dodanie liczby żyć: Gracz traci jedno życie udzielając złej odpowiedzi, po 3 złych odpowiedziach następuje koniec gry.
                example_code: |
                    ```
                    liczba1 = {ask} 'Jaka jest pierwsza liczba?'
                    liczba2 = {ask} 'Jaka jest druga liczba?'
                    odpowiedź = _
                    {print} liczba1 ' plus ' liczba2 ' to ' odpowiedź
                    ```
            13:
                story_text: |
                    ### Ćwiczenie 1
                    Uczyńmy program do ćwiczeń nieco trudniejszym. Tym razem gracz musi odpowiedzieć poprawnie na dwa pytania. Uzupełnij puste miejsca, aby ukończyć program.

                    ### Ćwiczenie 2 
                    Czasami, obliczenia mają wiele prawidłowych odpowiedzi. Przykładowo, 10 może być podzielone na 5 i na 2. Więc na pytanie 'Przez jaką liczbę można podzielić 10?' można odpowiedzieć, że przez 2 i przez 5.
                    Zapytaj o obliczenia, które mają wiele poprawnych odpowiedzi, poproś gracza, aby odpowiedział i ustalił, czy odpowiedź jest poprawna za pomocą komendy `{or}`.
                    Wyczyść pole programowania i stwórz swoje własne rozwiązanie.
                example_code: |
                    ```
                    odpowiedź1 = {ask} 'Ile to jest 10 razy 7?'
                    odpowiedź2 = {ask} 'Ile to jest 6 razy 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
            14:
                story_text: |
                    W tej przygodzie stworzysz kalkulator, który pozwoli ci na obliczenie średniej ocen. Jeśli uda ci się uruchomić kalkulator, wtedy możesz przejść do następnej przygody, która pozwala dodać dwie dodatkowe funkcje.

                    ### Ćwiczenie 1
                    Wypełnij puste pola, aby kalkulator zadziałał.
                    * Zacznij od czwartej linii, dodaj pytanie, aby dowiedzieć się, jaką ocenę uzyskał uczeń.
                    * W piątej linii będziesz chciał obliczyć sumę wszystkich ocen, więc suma = suma + ocena.
                    * Then we get to set the return value. We want to return the mean, so the total devided by the amount of tests (4).
                    * Ostatecznie kończymy kod, wywołując funkcję w wierszu 8.

                    Udało ci się? Niesamowite! Chciałbyś dodać jeszcze więcej do swojego kalkulatora? **Dalsza część tej przygody w następnej zakładce!**
                example_code: |
                    ```
                    {define} oblicz_średnią_ocen
                        wynik = 0
                        {for} i {in} {range} 1 {to} 4
                            ocena = {ask} _
                            wynik= wynik + _
                            {return}_ / 4

                    średnia_ocen= {call} _
                    {print} 'Twoja średnia ocen wynosi ' średnia ocen
                    ```
            15:
                story_text: |
                    Możesz dodać pętlę `{while}` do swojego kalkulatora, który nauczyłeś się tworzyć na poprzednim poziomie.
                    Daje to pewność, że gracz nie będzie mógł przejść do następnego pytania jeżeli udzielił błędnej odpowiedzi.

                    ### Ćwiczenie
                    Dodaj w funkcji pętlę loop `{while}` ,  zapytaj gracza, ile to jest numer_1 razy numer_2 i napisz jego odpowiedź..
                    Następnie `{call}` funkcję.
                example_code: |
                    ```
                    {define} nowe_pytanie
                        liczby = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        liczba_1 = liczby {at} {random}
                        liczba_2 = liczby {at} {random}
                        poprawnie = liczba_1 * liczba_2
                        odpowiedź= 0
                        _
                        _
                        _
                        {print} 'Dobra robota!'

                    {print} 'Odpowiedz poprawnie na 10 pytań, aby wygrać'
                    {for} i {in} {range} 1 {to} 10
                        _
                    {print} 'Wygrałeś!'
                    ```
    calculator_2:
        name: Kalkulator 2
        default_save_name: Kalkulator 2
        description: Kalkulator 2
        levels:
            14:
                story_text: |
                    ### Ćwiczenie 2
                    **To druga część tej przygody.** Przygoda zaczyna się w poprzedniej zakładce.
                    Oczywiście nie zawsze chcesz obliczyć średnią z 4 testów. Możesz obliczyć średnią z 10 testów lub tylko 2.
                    Możemy rozwiązać ten problem, dodając argument i zmienną 'ilość_testów'.
                    * Zacznij nową linię w wierszu 3. Ustaw argument ilość_testów, pytając ucznia, ile testów napisał.
                    * Zmień 4 w wierszu 4 na nowy argument ilość_testów.
                    * Na koniec zmień 4 w wierszu 6 na ilość_testów

                    Wypróbuj nowy program. Działa?

                    ### Ćwiczenie 3
                    Chciałbyś ulepszyć swój program? Świetnie! W poprzednim programie można było obliczyć tylko średnią ocenę z 1 przedmiotu, ale byłoby lepiej, gdybyś mógł obliczyć średnią ocenę dla wszystkich przedmiotów!
                    Nie powiemy ci, jak to zrobić, ale damy ci jedną wskazówkę: Rozpocznij swój kod w wierszu 1 od: zdefiniuj oblicz_średnią_oceny z przedmiotu.
                example_code: |
                    ```
                    # Wykorzystaj swój kod z poprzedniej przygody.
                    ```
    clear_command:
        name: '{clear}'
        default_save_name: clear_command
        description: 'Polecenie {clear}'
        levels:
            4:
                story_text: |
                    Czas na nową komendę! Z komendą `{clear}` możesz wyczyścić cały tekst z ekranu. W ten sposób możesz zapobiec ścianie tekstu na Twoim ekranie.
                    Uważaj! Jeżeli używasz komendy `{clear}`, to może być konieczne użycie nad nią komendy `{sleep}`. W przeciwnym wypadku Hedy wyczyści Twój ekran zanim będziesz miał szansę cokolwiek przeczytać, jak to możesz zobaczyć w podanym przykładzie.
                example_code: |
                    ```
                    {print} '3'
                    {clear}
                    {print} '2'
                    {clear}
                    {print} '1'
                    {clear}
                    {print} 'czekaj...'
                    {sleep} 3
                    {clear}
                    {print} 'NIESPODZIANKA!'
                    ```
    debugging:
        name: debugging
        default_save_name: debugging
        description: przygoda debuggowania
        levels:
            1:
                story_text: |-
                    Witamy w przygodzie debuggowania. Debuggowanie kodu oznacza pozbywanie się pomyłek znajdujących się w kodzie.
                    Oznacza to, że w tych przygodach debuggingu, pokażemy wam kod, który jeszcze nie działa.
                    Będziecie musieli dowiedzieć się, co jest z nim nie tak oraz poprawić wszelkie pomyłki.

                    ### Ćwiczenie
                    Zdebugguj ten kod. Powodzenia!
                example_code: |
                    **Uwaga! Ten kod wymaga usunięcia z niego błędów!**
                    ```
                    {print} Uwielbiam programować
                    Czy ty też uwielbiasz programować?
                    {echo}
                    {print} Jakie są twoje zainteresowania?
                    {echo} Moje zainteresowania to
                    ```
            2:
                story_text: |-
                    Witamy w przygodzie debuggowania. Debuggowanie kodu oznacza pozbywanie się pomyłek znajdujących się w kodzie.
                    Oznacza to, że w tych przygodach debuggingu, pokażemy wam kod, który jeszcze nie działa.
                    Będziecie musieli dowiedzieć się, co jest z nim nie tak oraz poprawić wszelkie pomyłki.

                    ### Ćwiczenie
                    Zdebugguj ten kod. Powodzenia!
                example_code: |
                    **Uwaga! Ten kod musi zostać zdebugowany!**
                    ```
                    miejsce docelowe {ask} Gdzie jedzie Pan/Pani na wakacje?
                    {print} Lot do miejsca docelowego odlatuje o 3 po południu.
                    {ask} Czy dał Pan/Pani już swój bagaż do sprawdzenia?
                    {echo}
                    {print} Proszę pozwolić, że wydrukuję kartę pokładową.
                    {sleep}
                    Proszę bardzo! Miłej podróży!
                    ```
            3:
                story_text: |-
                    Witamy w przygodzie debuggowania. Debuggowanie kodu oznacza pozbywanie się pomyłek znajdujących się w kodzie.
                    Oznacza to, że w tych przygodach debuggingu, pokażemy wam kod, który jeszcze nie działa.
                    Będziecie musieli dowiedzieć się, co jest z nim nie tak oraz poprawić wszelkie pomyłki.

                    ### Ćwiczenie
                    Pozbądź się pomyłek z tego kodu. Powodzenia!
                example_code: |
                    **Uwaga! Ten kod musi zostać zdebuggowany!**
                    ```
                    filmy_do_wyboru {is} dracula, fast and furious, home alone, barbie
                    wybrany_film {is} filmy {at} {random}
                    {print} Dzisiejszego wieczoru bedziemy oglądać wybrane_filmy
                    lubić {ask} Lubisz ten film?
                    {print} Jutro obejrzymy coś innego.
                    {add} wybrany_film {to_list} filmy_do_wyboru
                    {print} Jutro obejrzymy jutrzejszy_film
                    jutrzejszy_film {is} filmy_do_wyboru {at} {random}
                    Pójdę po popcorn! {print}
                    ```
            4:
                story_text: |-
                    ### Ćwiczenie
                    Zdebuguj ten kod. Powodzenia!
                example_code: |
                    **Uwaga! Ten kod musi zostać zdebuggowany!**
                    ```
                    {print} 'Witamy w internetowej bibliotece!
                    {ask} Jaki gatunek książek lubisz?
                    {print} Lubisz gatunek
                    autor {is} {ask} 'Kto jest twoim ulubionym autorem?'
                    {print} 'autor jest twoim ulubionym autorem'
                    {print} Hmmm... myślę, że powinieneś spróbować książek ... {at} {random}
                    ```
            5:
                story_text: |-
                    ### Ćwiczenie
                    Zdebugguj ten kod. Powodzenia!
                example_code: |
                    **Uwaga! Ten kod musi zostać zdebuggowany**
                    ```
                    {print} Witamy na basenie Hedy'ego!
                    klasa {is} {ask} 'Czy chciałbyś dzisiaj dołączyć na lekcję pływania?'
                    {if} lekcja pływania tak
                    {print} 'Świetnie! Dołączasz na lekcję pływania!
                    {print} {else} 'Nie dołączasz na lekcję pływania'
                    discount {is} 'Czy posiadasz kod zniżkowy?'
                    {if} zniżka {is} tak
                    zniżka-odpowiedź {is} {ask} 'Jaki jest twój kod zniżkowy?'
                    kody_zniżkowe = Senior4231, Student8786, NewMember6709
                    {if} zniżka_odpowiedź {is} {in} kod_zniżkowy
                    {print} 'Do zapłaty będzie $3,50'
                    'Do zapłaty będzie $5,50'
                    {print} 'Życzymy miłego pływania!'
                    ```
            6:
                story_text: |-
                    ### Ćwiczenie
                    Zdebugguj ten kod. Powodzenia!
                example_code: |
                    **Uwaga! Ten kod musi zostać zdebuggowany**
                    ```
                    {print} 'Automat z przekąskami'
                    wybrany_produkt = {ask} 'Proszę wybrać produkt'
                    produkty_1_dolarowe = kola, sok pomarańczowy, woda 
                    produkty_2_dolarowe = czekolada, ciastko, batonik muesli
                    produkty_3_dolarowe = chipsy, kabanosy, chleb bananowy
                    {if} wybrany  {is} {in} produkty_1_dolarowe
                    cena = 1
                    {if} wybrany_produkt {is} produkty_2_dolarowe
                    price = 2
                    {else} wybrany_produkt {in} produkty_3_dolarowe
                    cena = 3
                    ilość_produktów = '{ask} Ile ' wybrany_produkt ' chciałbyś otrzymać?'
                    suma= cena + ilość_produktów
                    {print} 'To będzie ' cena ' $
                    ```
            7:
                story_text: |-
                    ### Ćwiczenie
                    Niespodzianka! Ten program wygląda bardziej jak dane wyjściowe a nie kod. A jednak nie chcemy, żebyś tylko dodawał komendy `{print}` na początku każdej linijki.
                    Napraw ten program, żeby zmienić go w kołysankę 'Panie Janie', oczywiście używając komendy {repeat} !
                example_code: |
                    **Uwaga! Ten kod musi zostać zdebugowany!**
                    ```
                    Panie Janie !
                    Rano wstań !
                    Wszystkie dzwony biją!!
                    Bim, Bam, Bom!
                    ```
            8:
                story_text: |-
                    ### Ćwiczenie
                    Zdebuguj ten kod. Powodzenia!
                example_code: |-
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Witamy w Salonie Kosmetycznym Hedy'ego'
                    część ciała = {ask} 'Czy robi Pani dziś paznokcie u rąk czy paznokcie u stóp? A może obydwa?'
                    {if} części_ciała {is} obie
                            {print} Będzie to $25'
                            cena = 25
                        {else}
                            {print} Będzie to $18'
                            cena = 18
                    kolor = {ask} Jaki kolor ?
                    świecidełka = {ask} 'Chciała by Pani do tego jakieś świecidełka?'
                    {if} świecidełka {is} tak
                        {print} 'Są one płatne dodatkowo 3$'
                    cena całkowita = cena + 3
                    {else} {print} 'Bez świecidełek' {print} 'Więc bez dodatkowej opłaty'
                    {sleep} 5
                    {print} 'Gotowe! Za wszystko będzie ' cena ' $!'
                    {print} 'Dziękuję! Do widzenia!'
                    ```
            9:
                story_text: |-
                    ### Ćwiczenie
                    Zdebuguj ten kod. Powodzenia!
                example_code: |
                    **Uwaga! Ten kod musi być zostać zdebugowany!**
                    ```
                    {print} 'Witamy w naszym sklepie z kanapkami'
                    amount 'Ile kanapek chciałby Pan/Pani kupić?'
                    {repeat} ilość {times}
                    {ask} {is} {ask} 'Z jakiego rodzaju chleba miałaby być Pana/Pani kanapka?'
                    rodzaje_chleba {is} biały, pszenny, żytni, czosnkowy, bezglutenowy
                    {if} wybrany_chleb w rodzaje_chleba
                    {print} 'Cudownie!'
                    {else}
                    'Przepraszam, ale nie sprzedajemy takiego'
                    topping {is} {ask} 'Jaki rodzaj dodatków chciałby Pan?'
                    sos {is} {ask} 'Jaki sos chciałby Pan?'
                    {print} Jeden wybrany_chleb z dodatkiem i sosem.
                    cena = ilość * 6
                    {print} 'To będzie 'cena w dolarach'
                    ```
            10:
                story_text: |-
                    ### Ćwiczenie
                    Zdebuguj ten kod. Powodzenia!
                example_code: |
                    **Uwaga! Ten kod musi zostać zdebugowany!**
                    ```
                    imiona = Muad Hasan Samira Noura
                    aktywność = puszczać latawce, pływać, wędrować, opalać się na słońcu
                    {for} imię {is} imiona
                    {print} Na plaży imię uwielbia aktywność {at}{random}
                    ```
            11:
                story_text: |-
                    ### Exercise
                    Debug this calender program. The output of this program is supposed to look like a list of dates.
                    For example:

                    ```
                    Hedy calender
                    Here are all the days of November
                    November 1
                    November 2
                    November 3
                    ```
                    And so on.

                    Mind that you have to test your code extra carefully for the month February, because the amount of days in this month changes in leap years.
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    print 'Hedy calender'
                    months_with_31 days = January, March, May, July, September, October, December
                    months_with_30_days = April, June, August, November
                    month = ask 'Which month would you like to see?'
                    if month in months_with_31_days
                        days = 31
                        if month in months_with30_days
                            days = 30
                    if month = February
                        leap_years = 2020, 2024, 2028, 2036, 2040, 2044, 2028
                        year = ask 'What year is it?'
                    if year in leap_years
                        days = 29
                    else
                        days = 28

                    print 'Here are all the days of ' moth
                    for i in range 1 to days
                        print month i
                    ```
            12:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    define greet
                    greetings = 'Hello', 'Hi there', 'Goodevening'
                        print greetings at random

                    define take_order
                        food = ask 'What would you like to eat?'
                        print 'One food'
                        drink = 'What would you like to drink?'
                        print 'One ' drink
                        more = ask 'Would you like anything else?'
                            if more is 'no'
                        print 'Alright'
                            else
                            print 'And ' more
                    print 'Thank you'

                    print 'Welcome to our restaurant'
                    people = ask 'How many people are in your party tonight?'
                    for i in range 0 to people
                        call greet_costumer
                    ```
            13:
                story_text: |-
                    ### Exercise
                    Debug this code. Good luck!
                example_code: |
                    **Uwaga! Ten kod musi zostać zdebuggowany!**
                    ```
                    {define} rekomendacja_filmu {with} imię
                        filmy_akcji == 'Die Hard', 'Fast and Furious', 'Inglorious Bastards'
                        romase = 'Love Actually', 'The Notebook', 'Titanic'
                        komedie = 'Mr Bean' 'Barbie''Deadpool'
                        filmy_dla_dzieci = 'Minions', 'Paddington', 'Encanto'
                        {if} imię{is} 'Camila' {or} imię {is} 'Manuel'
                            recommended_movie = kids_movie {at} {random}
                        {if} imię {is} 'Pedro' {or} 'Gabriella'
                                ochota = {ask} 'What you in the mood for?'
                            {if} ochota {is} 'action'
                                polecany_film = komedie {at} {random}
                            {if} ochota {is} 'romans'
                                polecany_film = romans
                        {if} ochota {is} 'komedie'
                                polecany_film = komedie {at} {random}

                    {print} 'Poleciłbym ci ' rekomedowany_film ' for ' imię

                    imię = {ask} 'Kto ogląda?'
                    rekomendacja = {ask} 'Chciałbyś otrzymać rekomendację?'
                    {if} rekomendacja {is} 'tak'
                    {print} rekomedacja_filmu {with} imię
                    {else}
                    {print} 'Żaden problem!'
                    ```
            14:
                story_text: |-
                    ### Ćwiczenie
                    Zdebugguj ten kod. Powodzenia!
                example_code: |
                    **Uwaga! Ten kod musi zostać zdebuggowany!**
                    ```
                    {define} zmierz_tętno
                        {print} 'Delikatnie dociśnij opuszki palców z boku szyi'
                        {print} '(tuż pod twoją szczęką)'
                        {print} 'Zmierz liczbę uderzeń serca przez 15 sekund'
                        uderzenia serca == {ask} 'Ile uderzeń naliczyłeś w 15 sekund?'
                         tętno= uderzenia*4
                        {print} 'Twoje tętno wynosi ' tętno
                        {if} tętno >= 60 {or} tętno <= 100
                            {print} 'Twoje tętno jest w porządku'
                        {else}
                            {if} tętno > 60
                                {print} 'Twoje tętno jest za niskie'
                            {if} tętno < 100
                                {print} 'Twoje tętno jest za wysokie'
                            {print} 'Powinieneś skontaktować się z lekarzem'

                    zmierz_tętno = {ask} 'Chciałbyś zmierzyć swoje tętno?'
                    {if} zmierz_tętno= 'tak'
                        {call} zmierz_tętno
                    {else}
                        'żaden problem'
                    ```
            15:
                story_text: |-
                    ### Ćwiczenie
                    Zdebugguj tą historyjkę dla dzieci. Powodzenia!
                example_code: |
                    **Uwaga! Ten kod musi zostać zdebuggowany!**
                    ```
                    Imiona = 'Tanya', 'Romy', 'Kayla', 'Aldrin', 'Ali'
                    czynność ='spacerował', 'skakał na skakance', 'jeżdził na rowerze', 'biegał', 'jeździł na deskorolce'
                    miejsca = 'na szczycie góry', 'w supermarkecie', 'na basenie'
                    kryjówka = 'za drzewem', pod stołem', w pudełku'
                    dźwięki = 'trąbka', 'uderzenie', 'grzmot'
                    przyczyna hałasu = 'telewizja', 'dziecko z petardami', 'magiczny słoń', 'sen'

                    wybrane_imię = imiona {at} {random}
                    wybrana_czynność= czynności{at} {random}
                    wybrane_miejsce = 'miejsca {at} {random}'
                    wybrany_dźwięk = hałasy {at} {random}
                    wybrana_kryjówka= kryjówki {random}
                    wybrana_przyczyna=przyczyna hałasu {at} {random}

                    {print} wybrane_imię ' ' wybrana_czynność ' ' wybrane_miejsce
                    {print} 'nagle usłyszał dźwięk podobny do ' dzwięki {at} {random}
                    {print} wybrane_imię ' rozglądnął się, ale nie widział skąd dochodził hałas'
                    {print} wybrane_imię ' ukrył się ' wybrana_kryjówka'
                    {print} 'Próbował się rozglądać, ale niczego nie mógł zobaczyć z tego miejsca'
                    ukryty = 'tak'
                    {while} ukryty = 'tak'
                        {print} wybrane_imię 'nadal niczego nie widział'
                    odpowiedź = {ask} 'Czy ' wybrane_imię ' wyszedł z kryjówki?'
                        {if} odpowiedź = 'tak'
                            ukryty == 'nie'
                    {print} 'wybrane_imię wyszedł z' wybrana_kryjówka
                    {print} 'I wtedy zobaczył, że to był to tylko' wybrana_przyczyna
                    {print} wybrane_imię 'roześmiał się i kontynuował swój dzien'
                    {print} Koniec
                    ```
            16:
                story_text: |-
                    ### Ćwiczenia
                    Zdebugguj ten kod. Powodzenia!
                    Wskazówka: Upewnij się, że widzisz swój wynik tylko raz.
                example_code: |
                    **Uwaga! Ten kod musi zostać zdebuggowany!**
                    ```
                    kraj = ['Holandia', 'Polska', 'Turcja', 'Zimbabwe', 'Tajlandia', 'Brazylia', 'Peru', 'Australia', 'Indie', 'Romania' ]
                    stolice = 'Amsterdam', 'Warszawa' 'Istambuł', 'Harare', 'Bangkok', 'Brasilia', 'Lima', 'Canberra', 'New Delhi', 'Bukareszt'
                    wynik = 0
                    {for} i {in} {range} 0 {to} 10
                        odpowiedź = {ask} 'Jaka jest stolica ' kraje[i]
                        poprawna = stolica[i]
                        {if} odpowiedź = poprawna
                            {print} 'Poprawnie!'
                        wynik = wynik + 1
                        {else}
                            {print} 'Źle,' stolice[i] 'w stolicy' kraje[i]
                        {print} 'Twój wynik to ' wynik ' na 10'

                    ```
            17:
                story_text: |-
                    ### Ćwiczenie
                    Zdebugguj ten kod. Powodzenia!
                example_code: |
                    **Uwaga! Ten kod musi zostać zdebuggowany!**
                    ```
                    {define} zamówienie_jedzenia
                        dodatki = {ask} 'pepperoni, tuńczyk, warzywa lub ser?'
                        rozmiar = {ask} 'duży, średni czy mały?'
                        liczba_pizz = {ask} 'Ile pizz chciałbyś zamówić ?'

                        {print} 'ZAMÓWIŁEŚ'
                        {print} liczba_pizz' rozmiar ' dodatki' pizzy'

                    {define} zamówienie_napojów
                        napoje = {ask} 'woda, kola, mrożona herbata, lemoniada, kawa?'
                        liczba_napojów = {ask} 'Ile napojów chciałbyś zamówić?'

                        {print} 'ZAMÓWIŁEŚ'
                        {print} liczba napojów ' ' napój

                    'Witamy w pizzerii Hedy"ego'
                    wiecej_jedzenia = {ask} 'Czy chciałbyś zamówić pizzę?'
                    {while} wiecej_jedzenia = 'tak'
                        {return} zamówienie_jedzenia
                        wiecej_jedzenia = {ask} 'Czy chciałbyś zamówić pizzę?'
                    więcej_napojów = {ask} 'Chciałbyś zamówić napoje?'
                    {while} wiecej_napojów == 'tak'
                        {call} zamowienie_napoju
                        wiecej_napojów == {ask} 'Chciałbyś zamówić więcej napojów?'


                    {print} 'Dziękuję za złożenie zamówienia!'
                    ```
            18:
                story_text: |-
                    ### Ćwiczenie
                    Zdebugguj ten program Stary MacDonald z poziomu 16. Powodzenia!
                example_code: |
                    **Uwaga! Ten kod musi zostać zdebuggowany!**
                    ```
                    zwierzęta = ['świnka', 'pies', 'krowa']
                    dwięki = ['chrum', 'hau', 'muu']
                    {for} i {in} {range} 1 {to} 3
                        zwierzę = zwierzęta[i]
                        dźwięk = dźwięki [i]
                        {print} 'Pan MacDonald farmę miał'
                        {print} 'E I E I O!'
                        {print} 'na tej farmie ' zwierzę' hodował'
                        {print} 'E I E I O!'
                        {print} 'i ' dźwięk dźwięk ' tu'
                        {print} 'i ' dźwięk dźwięk ' tam'
                        {print} 'tu ' dźwięk
                        {print} 'tam ' dźwięk
                        {print} 'wszędzie ' dźwięk dźwięk
                    ```
    default:
        name: Wprowadzenie
        default_save_name: wstęp
        description: Wyjaśnienie poziomu
        levels:
            1:
                story_text: |
                    Witamy w Hedy! Tutaj możesz nauczyć się programowania krok po kroku.

                    Wypróbuj kod! Żółty przycisk kopiuje przykładowy kod do pola programowania.
                    Następnie naciśnij zielony przycisk „uruchom kod” w polu programowania, aby uruchomić kod.

                    Gotowy? Następnie przejdź do następnej karty, aby dowiedzieć się, jak tworzyć własne kody!
                example_code: |
                    ```
                    {print} Witaj świecie!
                    ```
            2:
                story_text: |
                    Gratulacje! Osiągnąłeś poziom 2. Mam nadzieję, że już stworzyłeś niesamowite kody!
                    Na pierwszym poziomie możesz zauważyć, że polecenie `{echo}` może zapisywać tylko jeden bit informacji na raz.
                    Na przykład podczas przygody w restauracji można powtórzyć to, co klient chciał zjeść lub co chciał wypić, ale nie jedno i drugie w jednym zdaniu.

                    To zmienia się na poziomie 2. Na poziomie 2 nauczysz się pracować ze zmiennymi, które pozwalają zapisać wiele informacji i napisać je w dowolnym miejscu.
                    Przejdźmy więc do następnej karty!
                example_code: |
                    **Uwaga! Ten kod nie działa!**
                    W Hedy polecenia będą się czasem zmieniać. Na przykład `{echo}`działa tylko na poziomie 1. Na tym poziomie nauczysz się lepszego sposobu powtarzania odpowiedzi.
                    ```
                    {print} Witamy u Hedy'ego
                    {ask} Co chciałbyś zjeść?
                    {echo} Czyli chcesz
                    {ask} Czego chciałbyś się napić?
                    {echo} Czyli chcesz
                    ```
            3:
                story_text: "Na poprzednim poziomie nauczyliśmy się czym są zmienna i jak możemy ich używać, żeby nasze przygody były bardziej interaktywne. \nAle... to nie jedyna rzecz, którą możemy zrobić ze zmiennymi! Zmienne mogą też być listami. \nA nawet możemy pozwolić Hedy, aby wybrała losowe słowo z listy, co pozwoli Ci stworzyć prawdziwe gry!\nSpójrzmy na kolejną zakładkę!\n"
            4:
                story_text: |
                    Na poprzednich poziomach ćwiczyliśmy używanie zmiennych, ale mogłaś napotkać się na jeden problem.
                    Mogłaś próbować odpalać tego typu kod:

                    Oczywiście chciałaś, aby wypisało się:

                    `Moje imię to Zosia`

                    Jednak Hedy wypisuje:

                    `Moje Zosia to Zosia`.

                    Na tym poziomie rozwiążemy ten problem używając cudzysłowów.
                example_code: |
                    ```
                    imię {is} Zosia
                    {print} Moje imię to imię
                    ```
            5:
                story_text: |
                    W poprzednich poziomach nauczyliśmy się używać `{at} {random}`, które sprawiało, że gry wyglądały inaczej pomiędzy ich uruchomieniem.
                    Ale to nie jest do końca interaktywne, ponieważ gracz nie ma wpływu, na to co się stanie dalej w grze.

                    Na tym poziomie nauczyć się nowej komendy `{if}`, która pozwoli na podawanie różnych odpowiedzi w twoim programie.
                    Dla przykładu, w ten sposób będziesz mógł zaprogramować hasło dla swojego komputera. Przejdźmy do kolejnej zakładki!
                example_code: |
                    ```
                    hasło {is} {ask} 'Jakie jest prawidłowe hasło?'
                    ```
            6:
                story_text: |
                    Na poprzednim poziomie ćwiczyłeś z `{ask}` i `{if}`. Na przykład możesz zapytać gości, co chcieliby zjeść.
                    Jednak nie możesz jeszcze obliczyć ceny za obiad każdej osoby.

                    Ten poziom umożliwia stosowanie dodawania, odejmowania i mnożenia w twoich programach. W ten sposób możesz obliczyć ceny w swojej restauracji, ale możesz również dodać tajny kod, aby dać swoim znajomym i rodzinie zniżkę.
                    Inną opcją na tym poziomie jest zaprogramowanie własnej gry matematycznej, aby młodszy brat lub siostra ćwiczyli mnożenie liczb.
                    Sprawdź sam!
                example_code: |
                    ```
                    cena_posiłku {is} 0
                    cena_napoju{is} 0
                    cena_całkowita {is} 0
                    {print} 'Witamy w McHedy'
                    zamówienie {is} {ask} 'Co chciałbyś zjeść?'
                    {if} zamówienie {is} hamburger cena_posiłku {is} 5
                    {if} zamówienie {is} frytki cena_posiłku {is} 2
                    napój {is} {ask} 'Czego chciałbyś się napić?'
                    {if} napój {is} woda cena_napoju {is} 0
                    {else} cena_napoju {is} 3
                    cena_całkowita {is} cena_posiłku + cena_napoju
                    {print} 'Za wszystko należy się ' cena_całkowita ' dolarów'
                    ```
            7:
                story_text: |
                    Dobra robota! Osiągnąłeś następny poziom, co oznacza, że ćwiczyłeś `{if}` i `{else}`. Prawdopodobnie zauważyłeś, że twoje kody stają się coraz dłuższe.
                    Na przykład, jeśli chcesz zaprogramować 'Wszystkiego najlepszego'.

                    To dużo kodu - głównie te same słowa w kółko i w kółko. Na szczęście w następnej zakładce nauczysz się rozwiązania używając komendy`{repeat}`, która pozwala powtarzać wiersz kodu wiele razy.
                example_code: |
                    ```
                    {print} 'Sto lat'
                    {print} 'Sto lat'
                    {print} 'Niech żyje, żyje nam'
                    {print} 'Sto la'
                    ```
            8:
                story_text: |
                    Teraz nauczyłeś się powtarzać jeden wiersz kodu. Przydaje się to, ale nie zawsze wystarcza. Czasami chcesz powtórzyć wiele linii jednocześnie.
                    Ten poziom pozwala zgrupować kilka wierszy kodu i powtórzyć tę małą grupę wierszy jednocześnie!
                example_code: |
                    ```
                    {repeat} 5 {times} {print} 'W następnej zakładce możesz powtórzyć wiele wierszy kodu jednocześnie!'
                    ```
            9:
                story_text: |
                    Świetna robota! Osiągnąłeś kolejny poziom! Na poprzednim poziomie nauczyłeś się używać wielu wierszy kodu w poleceniu {if} lub {repeat}. Ale nie możesz jeszcze połączyć dwóch..
                    Dobre wieści! Na tym poziomie będziesz mógł umieścić {if} w poleceniu {if}lub w poleceniu {repeat}. Umieszczenie bloku kodu w innym bloku kodu nazywa się nesting (zagnieżdżeniem).                     ``` Umieszczenie bloku kodu w innym bloku kodu nazywa się nesting (tłumaczenie dosłowne: zagnieżdżeniem).
                example_code: |
                    ```
                    odpowiedź = {ask} 'Jesteś gotów, aby nauczyć się czegoś nowego?'
                    {if} odpowiedź {is} tak
                        {print} 'Świetny! Możesz nauczyć się używać polecenia powtórz w poleceniu if!'
                        {print} 'Hura!'
                        {print} 'Hura!'
                        {print} 'Hura!'
                    {else}
                        {print} 'Może powinieneś poćwiczyć więcej na poprzednim poziomie'
            10:
                story_text: "Świetnie sobie radzisz! Na poprzednich poziomach wciąż mieliśmy do czynienia z małym problemem. Nauczyłeś się powtarzać wiersze, ale co, jeśli chcesz nieznacznie zmienić jeden wiersz.\nNa przykład, jeśli chcesz zaśpiewać piosenkę 'if you're happy and you know it'. Wyglądałoby to tak:\n\nJeśli chcesz także zawrzeć następny werset 'stomp your feet',  następny i następny, musisz całkowicie zmienić kod.\nNa tym poziomie nauczysz się polecenia `{for}`, które pozwala tworzyć listę akcji i powtarzać kod z inną akcją za każdym razem\nSpójrz!\n"
                example_code: |
                    ```
                    {repeat} 2 {times}
                        {print} 'if youre happy and you know it clap your hands'
                    {print} 'if youre happy and you know it and you really want to show it'
                    {print} 'if youre happy and you know it clap your hands'
                    ```
            11:
                story_text: |
                    Osiągnąłeś poziom 11, świetnie sobie radzisz! Na wyższych poziomach Hedy coraz bardziej koncentruje się na nauczaniu języka programowania Python.
                    W Pythonie nie ma polecenia `{repeat}`, ale istnieje polecenie, które działa jak {repeat}. Czy chcesz dowiedzieć się, jak powiedzieć `{repeat}` w języku Python? Szybko przejdź dalej, aby się tego dowiedzieć!
            12:
                story_text: |
                    Może próbowałeś użyć liczb dziesiętnych w swojej przygodzie w restauracji. Jeśli tak, prawdopodobnie zauważyłeś, że Hedy jeszcze ich nie zrozumiał i zawsze je zaokrąglał.
                    Od tego poziomu możesz używać liczb dziesiętnych.
                example_code: |
                    ```
                    burger = 5
                    napój = 2
                    cena = burger + drink
                    print 'Zamówiłeś burgera i napój'
                    print 'Za wszystko należy się ' cena ' dolarów'
                    ```
            13:
                story_text: |
                    Na poprzednich poziomach nauczyłeś się umieszczać w sobie dwa polecenia `{if}`. Działa to dobrze, ale daje bardzo długie i nieprzydatne kody, takie jak ten:

                    W tym systemie musisz podać zarówno poprawną nazwę użytkownika, jak i prawidłowe hasło.
                    Na tym poziomie nauczysz się polecenia `{and}`, które sprawi, że ten kod będzie znacznie krótszy i bardziej zrozumiały!
                    Sprawdź to!
                example_code: |
                    ```
                    nazwa_użytkownika = {ask} 'Jaka jest twoja nazwa użytkownika?'
                    hasło = {ask} 'Jakie jest twoje hasło?'
                    {if} nazwa_użytkownika {is} 'Hedy'
                        {if} hasło {is} 'sekret'
                            {print} 'Witaj Hedy!'
                        {else}
                            {print} 'Brak dostępu'
                    {else}
                        {print} 'Brak dostępu!'
                    ```
            14:
                story_text: |
                    Za pomocą przykładowego kodu możesz obliczyć, czy zdałeś przedmiot w szkole.
                    Możesz zauważyć, że ten kod jest wyjątkowo nieefektywny ze względu na to, że jest zbyt długi w wierszu 5.
                    Wszystkie stopnie od 1 do 5 musiały być programowane osobno. Na szczęście dla ciebie, na tym poziomie nauczysz się, jak to zrobić bez tego wyjątkowo długiego kodu!
                example_code: |
                    ```
                    pierwsza_ocena = {ask} 'Jaki wynik uzyskałeś z pierwszego testu?'
                    druga_ocena = {ask} 'Jaki wynik uzyskałeś z drugiego testu?'
                    suma = pierwsza_ocena + druga_ocena
                    średnia_ocen = suma / 2
                    {if} średnia_ocen = 1 {or} średnia_ocen = 2 {or} średnia_ocen = 3 {or} średnia_ocen = 4 {or} średnia_ocen = 5
                        {print} 'O nie! Oblałeś przedmiot...'
                    {else}
                        {print} 'Świetnie! Zdałeś przedmiot!'
                    ```
            15:
                story_text: "W tej grze poniżej wprowadzono kod, aby gracz mógł grać tak długo, jak zechce...\nAle ten kod jest nieskuteczny i zdecydowanie za długi. A co, jeśli gracz chce zagrać w 101 gier zamiast 100?\nNie możesz grać w nieskończoność?\nNa tym poziomie nauczysz się polecenia, które znacznie to wszystko ułatwia!\n"
                example_code: |
                    ```
                    gra = 'start'
                    {for} i {in} {range} 1 {to} 100
                        {if} gra == 'start'
                            answer = {ask} 'Czy chcesz kontynuować?'
                            {if} answer == 'no'
                                gra = 'koniec'
                            {if} odpowiedź == 'tak'
                                {print} 'Kontynuujemy'
                    ```
            16:
                story_text: |
                    Na tym poziomie pójdziemy nieco bardziej kierunku prawdziwego kodu Pythona. Dowiesz się również, jak dopasować razem dwie listy.
                    W ten sposób możesz zaprogramować kod, w którym prawidłowe zwierzę jest dopasowane do właściwego dźwięku.
                    Ponieważ dwa poniższe kody... To kompletny nonsens!
                example_code: |-
                    ```
                    zwierzęta = 'kurczak', 'koń', 'krowa'
                    dźwięki = 'pipipi', 'ihaha', 'muuu'
                    {for} zwierzę {in} zwierzęta
                        {print} 'A ' zwierzę ' mówi ' dźwięki {at} {random}
                    ```
                    Możesz spróbować zrobić to również w ten sposób.
                    ```
                    zwierzęta = 'kurczak', 'koń', 'krowa'
                    dźwięki = 'pipipi', 'ihaha', 'muuuu'
                    {for} zwierzę {in} zwierzęta
                        {for} dźwięk {in} dźwięki
                            {print} 'A ' zwierzę' mówi ' dźwięk
                    ```
                    Uwaga: Te kody nie będą działać w ten sposób na tym poziomie. Przejdź do następnej karty, aby zobaczyć, które części należy poprawić.
            17:
                story_text: |
                    Teraz zmienimy nieco wcięcia. Za każdym razem, gdy potrzebujemy wciąć kod, potrzebujemy `:` w linii przed wcięciem.

                    Na tym poziomie możesz też użyć nowej komendy: `{elif}`. `{elif}` ,które jest połczeniem ``{else} {if}` i potrzebujesz go, gdy chcesz dodać 3 (lub więcej!) opcji.
                    Sprawdź to!
            18:
                story_text: |
                    Gratulacje! Osiągnąłeś ostatni poziom Hedy! Utworzony tutaj kod można skopiować do prawdziwych środowisk Pythona, takich jak replika lub PyCharm, i możesz tam kontynuować naukę!
                    Pamiętaj jednak, że Python może czytać tylko polecenia w języku angielskim, więc jeśli używasz innych języków, musisz teraz przejść na angielski.
    dice:
        name: Kostka do gry
        default_save_name: Kostka do gry
        description: Stwórz własną kostkę do gry
        levels:
            3:
                story_text: |
                    Na tym poziomie posiadamy możliwość wyboru z listy. Dzięki temu możemy pozwolić komputerowi wybrać jedną ze stron kostki.
                    Zerknij na gry, które masz w swojej szafie w domu.
                    Czy są tam gry z (specjalną) kostką? Możesz ją również skopiować przy pomocy tego kodu.
                    Na przykład kostka do gry Gąsienice z liczbami od 1 do 5 i wężem na niej.

                    ![Kostka do gry Gąsienice z liczbami od 1 do 5 i gąsienicą na niej](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    wybory {is} 1, 2, 3, 4, 5, dżdżownica
                    {print} Wyrzucono _ {at} {random}
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Kości w przykładzie powyżej są kośćmi do specjalnej gry. Czy możesz zrobić normalną kość do gry?
                    Lub inne specjalne kości z innej gry?
                example_code_2: |
                    ```
                    wybór {is} _
                    ```
            4:
                story_text: |
                    W tym poziomie możesz stworzyć kostki do gry. Ale tym razem spróbuj zrobić to samodzielnie, bez przykładowego kodu!

                    ### Ćwiczenie
                    Stwórz własne kostki do gry.
                    Wskazówka: Jeśli nie masz pojęcia jak stworzyć kostki do gry, spójrz na te z poprzedniego poziomu, ale nie zapomnij dodać cudzysłowów.
            5:
                story_text: |
                    Teraz dodamy polecenia `{if}` oraz `{else}` do naszych kości!

                    ### Ćwiczenie
                    Uzupełnij kod przykładowy tak, aby kod napisał „Możesz przestać rzucać” gdy wyrzucona zostanie gąsienica. W przypadku gdy zostanie wyrzucone coś innego powinien napisać „Musisz rzucić ponownie”.
                    **Dodatkowo** Może chcesz stworzyć kostkę do gry z całkowicie innej gry? To też jest w porządku! W takim razie wymyśl swoją własną reakcję. Na przykład „tak” dla 6 i „szkoda” dla czegoś innego.
                example_code: |
                    ```
                    wybory {is} 1, 2, 3, 4, 5, dżdżownica
                    rzut {is} wybory {at} {random}
                    {print} 'wyrzucono ' rzut
                    _ rzut {is} dżdżownica {print} 'Możesz przestać rzucać.'
                    _ {print} 'Musisz rzucić jeszcze raz!'
                    ```
            6:
                story_text: |
                    Na tym poziomie możesz zrobić kostkę do gry z Gąsienicą i teraz możesz nawet policzyć ile punktów zostało wyrzuconych.
                    Wiedząc, że Gąsienica jest warta 5 punktów.  Teraz po rzucie możesz policzyć ile punktów wyrzuciłeś w sumie.
                    Ten kod policzy ilość punktów dla jednej kostki:

                    ### Ćwiczenie
                    Czy potrafisz napisać kod, który policzy sumę punkt na 8 kostkach? Aby to zrobić musisz skopiować i wkleić kilka linijek kodu.
                example_code: |
                    ```
                    wybory = 1, 2, 3, 4, 5, gąsienica
                    punkty = 0
                    rzut = wybory {at} {random}
                    {print} 'wyrzuciłeś' rzut
                    {if} rzut {is} gąsienica punkty = punkty + 5 {else} punkty = punkty + rzut
                    {print} 'suma punktów to ' punkty
                    ```
                example_code_2: |
                    Czy udało ci się policzyć wynik dla 8 kostek? Wymagało to sporo kopiowania i wklejania , prawda? W poziomie 7 ułatwimy to!
            7:
                story_text: |
                    Na tym poziomie możeszponownie zrobić kości. Dzięki kodowi `{repeat}` możesz łatwo rzucić całą ręką kości.

                    ### Ćwiczenie
                    Spróbuj zakończyć przykładowy kod! **Dodatkowo ** Pomyśl o znanej grze, która obejmuje kości i zaprogramuj taką przy użyciu`{repeat}`.
                example_code: |
                    ```
                    wybory = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
            10:
                story_text: |
                    ### Ćwiczenie
                    Czy wszyscy zbyt długo rzucają kostką? Na tym poziomie możesz pozwolić Hedy rzucić wszystkimi kośćmi naraz!
                    Zmień nazwy na imiona swoich przyjaciół lub rodziny i dokończ kod.
                example_code: |
                    ```
                    gracze = Ania, Jasiek, Kasia
                    wybory = 1, 2, 3, 4, 5, 6
                    _ _ _ _
                        {print} gracz ' wyrzucił ' wybory {at} {random}
                        {sleep}
                    ```
            15:
                story_text: |
                    ### Ćwiczenie
                    Na tym poziomie możesz stworzyć małą grę, w której będziesz musiał rzucić 6 tak szybko, jak to możliwe.
                    Rozpoczęliśmy pisanie kodu, teraz to od Ciebie zależy, czy gra zadziała!

                    Na początku, dodaj pętlę `{while}` , która sprawdza czy 6 oczek zostało wyrzuconych czy nie.
                    Dopóki nie wyrzuciłeś 6, wyrzuć kostką losową liczbę.
                    Napisz, co wyrzucił gracz.
                    Dodaj próbę do liczby prób
                    Poczekaj sekundę, zanim rzucisz ponownie lub - na wypadek, gdybyś rzucił 6 - przed końcem gry.
                example_code: |
                    ```
                    opcje = 1, 2, 3, 4, 5, 6
                    {print} 'Wyzuć 6 tak szybko, jak to możliwe!'
                    wyrzucono = 0
                    próby = 0
                    _
                    _
                    _
                    _
                    _
                    {print} 'Tak! Wrzuciłeś 6 w 'próby' próbach
                    ```
    dishes:
        name: Zmywanie?
        default_save_name: Zmywanie
        description: Użyj komputera, aby sprawdzić, kto zmywa naczynia
        levels:
            3:
                story_text: |
                    Czy często w domu kłócisz się o to, kto powinien dziś umyć naczynia lub wyczyścić kuwetę?
                    Możesz pozwolić komputerowi dokonać bardzo sprawiedliwego wyboru. Możesz to zaprogramować na tym poziomie!
                example_code: |
                    ```
                    ludzie {is} mama, tata, Emma, Sofia
                    {print} ludzie {at} {random} muszą zmywać naczynia
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Stwórz własną wersję programu zmywarki. Najpierw sporządź listę członków swojej rodziny.
                    Następnie pomyśl o zadaniu do wykonania i pozwól komputerowi zdecydować, kto ma wykonać zadanie za pomocą polecenia `{at} {random}`.

                    **Dodatkowo** Nie masz ochoty samodzielnie zmywać naczyń? Zhakuj program, usuwając swoje imię z listy za pomocą polecenia `{remove}` `{from}`.
            4:
                story_text: |
                    Korzystając z cudzysłowów możesz sprawić, że twój program o zmywaniu naczyń będzie jeszcze lepszy.

                    ### Ćwiczenie
                    Najpierw uzupełnij puste miejsca symbolami lub poleceniami, tak by przykładowy program zaczął działać.
                    Udało Ci się? Super! Teraz skopiuj swój własny kod z poprzedniego poziomu i spraw by zaczął działać w tym poziomie dodając cudzysłowy w odpowiednich miejscach.
                example_code: |
                    ```
                    ludzie {is} mama, tata, Emma, Sophie
                    {print} _ naczynia są myte przez _
                    {sleep}
                    {print} ludzie {at} _
                    ```
            5:
                story_text: |
                    Dzięki poleceniu `{if}` możesz mieć teraz trochę więcej zabawy z wyborami w twoich programach. Możesz teraz sprawić, by twój program reagował na wybory podjęte przez komputer.
                    ### Ćwiczenie
                    Czy potrafisz dokończyć program, tak by wyświetlał "o, nie..." gdy jest Twoja kolej, a w przeciwnym przypadku wyświetlał „tak!”?
                    Nie zapomnij cudzysłowów!
                example_code: |
                    ```
                    ludzie {is} mama, tata, Agnieszka, Zosia
                    zmywarka {is} ludzie {at} {random}
                    _ kto_zmywa {is} Zosia {print} _ o, nie... Moja kolej zmywania naczyń _
                    _ {print} 'całe szczęście, że nie ma naczyń, ponieważ' _ ' już je myje '
                    ````
            6:
                story_text: |
                    Jak często wszyscy będą zmywać naczynia? Czy to jest sprawiedliwe? Możesz to policzyć na tym poziomie.
                example_code: |
                    ```
                    ludzie = mama, tata, Emma, Sophie
                    emma_zmywa = 0
                    kto_zmywa = ludzie {at} {random}
                    {print} 'Teraz zmywa ' kto_zmywa
                    {if} kto_zmywa {is} Emma emma_zmywa = emma_zmywa + 1
                    {print} 'Emma będzie zmywać naczynia w tym tygodniu ' emma_zmywa ' razy'
                    ```

                    Teraz możesz skopiować linie od 3 do 5 kilka razy (np. 7 razy dla całego tygodnia), aby ponownie obliczyć dla całego tygodnia.
                    Czy robisz kod dla całego tygodnia?
                story_text_2: |
                    Jeśli masz wielkiego pecha to poprzedni program mógłby wybrać ciebie do zmywania naczyń przez cały tydzień! To jest niesprawiedliwe!
                    Żeby stworzyć bardziej sprawiedliwy system możesz użyc polecenia `{remove}` żeby usunąć osobę z listy zaraz po wybraniu jej do mycia naczyń. Tym sposobem nie będziesz musiał już zmywać naczyń  dopóki wszyscy nie będą mieli swojej kolejki.

                    Poniedziałek i wtorek zostały przygotowane dla Ciebie. Czy potrafisz dodać resztę tygodnia?
                    Czy potrafisz również wymyślić co zrobić gdy lista jest pusta?
                example_code_2: |
                    ```
                    ludzie = mama, tata, Agnieszka, ty
                    kto_zmywa = ludzie {at} {random}
                    {print} 'Naczynia w poniedziałek myje: ' kto_zmywa
                    {remove} kto_zmywa {from} ludzie
                    kto_zmywa = ludzie {at} {random}
                    {print} 'Naczynia we wtorek myje: ' kto_zmywa
                    {remove} kto_zmywa {from} ludzie
                    ```
            7:
                story_text: |
                    Przy użyciu komendy `{repeat}` możesz powtórzyć fragmenty kodu. Możesz to wykorzystać do obliczenia kto będzie zmywał naczynia przez kilka dni!
                    ### Ćwiczenie
                    Użyj komendy `{repeat}` aby zadecydować kto będzie mył naczynia przez cały tydzień. Każde puste miejsce musi być wypełnione jedną komendą lub liczbą!
                    **(Dodatkowo)** Czy możesz wymyślić inne prace domowe? Przygotuj kod, który wylosuje trzy prace domowe. Nie zapomnij napisać, o co chodzi!
                example_code: |
                    ```
                    ludzie = mamy, taty, Emmy, Sophie
                    {repeat} _ _ {print} 'Zmywanie naczyń jest zadaniem ' _ _ _
                    ```
            10:
                story_text: |
                    Na tym poziomie w prosty sposób ułożysz plan na cały tydzień!

                    ### Ćwiczenie
                    Dodaj drugie zadanie, takie jak odkurzanie lub sprzątanie, i upewnij się, że jest ono również podzielone na cały tydzień.
                    <br> **Dodatkowo** Program nie jest sprawiedliwy, można mieć pecha i zmywać cały tydzień. Jak uczynić program bardziej sprawiedliwym?
                example_code: |
                    ```
                    dni = Poniedziałek, Wtorek, Środa, Czwartek, Piątek, Sobota, Niedziela
                    imiona = mama, tata, Agnieszka, Zosia
                    {for} dzień {in} dni
                        {print} imiona {at} {random} ' myje naczynia w ' dzień
                    ```
    elif_command:
        name: '{elif}'
        default_save_name: elif
        description: '{elif}'
        levels:
            17:
                story_text: |
                    Na tym poziomie możesz także użyć nowego polecenia: `{elif}`. `{elif}` to kombinacja słów kluczowych`{else}` i `{if}` i potrzebujesz go, gdy chcesz stworzyć 3 (lub więcej!) opcji.
                    Sprawdź to!
                example_code: |
                    ```
                    nagrody = ['1 milion dolarów', 'szarlotka', 'nic']
                    twoja_nagroda = nagrody[{random}]
                    {print} 'Wygrałeś ' twoja_nagroda
                    {if} twoja_nagroda == '1 milion dolarów' :
                        {print} 'Yeah! Jesteś bogaty!'
                    {elif} twoja_nagroda == 'szarlotka' :
                        {print} 'Cudownie, szarlotka!'
                    {else}:
                        {print} 'Spróbuj szczęścia następnym razem.'
                    ```
    for_command:
        name: '{for}'
        default_save_name: for
        description: komenda {for}
        levels:
            10:
                story_text: |-
                    ## For
                    Na tym poziomie nauczymy się nowego kodu/komendy `{for}`. Z komendą `{for}`możesz stworzyć listę i użyć wszystkich elementów.
                    `{for}` tworzy blok, jak `{repeat}` i `{if}` więc wszystkie linie w bloku muszą zaczynać się od 4 spacji.
                example_code: |
                    ```
                    animals = dog, cat, blobfish
                    {for} animal {in} animals
                        {print} 'I love ' animal
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Dokończ ten kod, dodając `{for} action {in} actions` do wiersza 2.
                example_code_2: |
                    ```
                    czynności = klaszcz w dłonie, tupnij stopami, krzycz Hurra!
                    _
                        {repeat} 2 {times}
                            {print} 'If youre happy and you know it, ' czynności
                            {sleep} 2
                        {print} 'If youre happy and you know it, and you really want to show it'
                        {print} 'If youre happy and you know it, ' action
                        {sleep} 3
                    ```
            11:
                story_text: |-
                    Na tym poziomie dodajemy nową formę komendy`{for}`. Na wcześniejszych poziomach używaliśmy `{for}` z listą, ale możemy też używać `{for}` z liczbami.
                    Robimy to, dodając nazwę zmiennej, następnie `{in}` `{range}`. Następnie wpisujemy liczbę, od której rozpoczniemy, `{to}` i liczbę, na której zakończymy.

                    Wypróbuj przykład, aby zobaczyć, co się stanie! Pamiętaj, na tym poziomie będziesz musiał użyć wcięć w wierszach poniżej instrukcji `{for}`.
                example_code: |
                    ```
                    {for} licznik {in} {range} 1 {to} 10
                        {print} licznik
                    {print} 'Gotowy czy nie. Nadchodzę!'
                    ```
            17:
                story_text: |
                    Teraz trochę zmienimy wcięcie. Za każdym razem, gdy potrzebujemy wcięcia, potrzebujemy `:` na linii przed wcięciem.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Gotowy czy nie, nadchodzę!!'
                    ```
            18:
                story_text: |
                    Na koniec zmienimy `{for} i {in} {range} 1 to 5` w prawdziwy kod Pythona, taki jak:
                example_code: |
                    ```
                    {for} i {in} {range}(1,5):
                        {print} (i)
                    ```
    fortune:
        name: Wróżka
        default_save_name: Wróżka
        description: Niech Hedy przewidzi przyszłość
        levels:
            1:
                story_text: |
                    Czy byłeś kiedyś w wesołym miasteczku i wróżka przepowiedziała Ci przyszłość? Albo czy kiedykolwiek grałeś magiczną ósemką?
                    Wtedy prawdopodobnie wiesz, że tak naprawdę nie mogą one przewidzieć twojej przyszłości, ale nadal jest to zabawne!

                    W najbliższych poziomach możesz nauczyć się jak stworzyć własną maszynę do wróżenia!
                    W poziomie 1 możesz zacząć łatwo, pozwalając Hedy przedstawić się jako wróżka i pozwolić jej odpowiedzieć `{echo}` odpowiedziami graczy.
                    Na przykład tak:
                example_code: |
                    ```
                    _ Witam, jestem Hedy, wróżka!
                    _ Kim jesteś?
                    _ Pozwól mi spojrzeć w moją kryształową kulę
                    _ Widzę... 
                    _ Twoje imię to
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Skopiuj przykładowy kod na ekran wprowadzania i wypełnij puste pola, aby kod zadziałał.
                    **Dodatkowo** Zmień kod i pozwól wróżbitce nie tylko przewidzieć Twoje imię, ale także wiek, ulubioną drużynę sportową lub coś innego o sobie.
            3:
                story_text: |
                    Na poprzednich poziomach stworzyłeś swoją pierwszą maszynę do wróżenia, ale Hedy nie mogła niczego przewidzieć, tylko wykonać`{echo}`.
                    Na tym poziomie możesz użyć zmiennej i polecenia `{at} {random}`, aby Hedy naprawdę wybrała odpowiedź. Dla przykładu, spójrz na ten kod:
                example_code: "```\n{print} Jestem wróżka Hedy!\npytanie {is} {ask} Co chciałbyś się dowiedzieć?\n{print} A więc chcesz wiedzieć czy: pytanie \nodpowiedzi {is} tak, nie, może\n{print} Moja szklana kula mówi że...\n{sleep} 2\n{print} odpowiedzi {at} {random}\n```\n"
                story_text_2: |
                    ### Ćwiczenie
                    Teraz Hedy może odpowiedzieć tylko tak, nie lub może. Czy możesz dać Hedy więcej opcji odpowiedzi, np. 'zdecydowanie' lub 'zapytaj ponownie'.
            4:
                story_text: |
                    ### Ćwiczenie
                    Usunęliśmy wszystkie cudzysłowy z tego przykładowego kodu, czy możesz dodać je wszystkie we właściwych miejscach?

                    ### Ćwiczenie 2
                    Wróć do poprzedniego poziomu i skopiuj kod wróżki. Spraw, aby kod zadziałał na tym poziomie, dodając cudzysłowy we właściwych miejscach.
                example_code: |
                    ```
                    _ Dodaj cudzysłowy do tego kodu _
                    {print} Jestem wróżka Hedy!
                    pytanie {is} {ask} Czego chciałbyś się dowiedzieć?
                    {print} A więc chcesz wiedzieć czy: pytanie 
                    odpowiedzi {is} tak, nie, może
                    {print} Moja szklana kula mówi że...
                    {sleep} 2
                    {print} odpowiedzi {at} {random}
                    ```
            5:
                story_text: |
                    ### Ćwiczenie
                    W przykładowym kodzie widzisz, jak stworzyć program wróżki, który pozwala przechylić szanse na swoją korzyść. Ten program oszukiwania zawsze mówi ci, ,że wygrasz na loterii, ale twoi przyjaciele nigdy nie będą w stanie wygrać.

                    Użyj tego, aby stworzyć własny program, bądź kreatywny! Na przykład możesz stworzyć kod, który przewiduje, że:
                    * Twoja ulubiona drużyna sportowa pokona wszystkich przeciwników!
                    * Twój ulubiony film zostanie wybrany na wieczór filmowy!
                    * Wygrywasz bilety na swój ulubiony program!
                    * Jesteś najpiękniejszą osobą ze wszystkich, jak mówiło to magiczne lustro Królewny Śnieżki.
                    Daj się ponieść wyobraźni!

                    Twój program musi zawierać co najmniej 10 wierszy kodu i musi posiadać co najmniej jedno polecenie `{if}` i `{else}`.
                example_code: |
                    ```
                    przyjaciele {is} Jordan, Lucy, Dave
                    {print} 'Mogę przewidzieć, czy jutro wygrasz na loterii!'
                    osoba {is} {ask} 'Kim jesteś?'
                    dobra_odpowiedź {is} Hurra! Wygrywasz !, Na pewno wygrasz !, Mamy zwycięzcę!
                    zła_odpowiedź {is} Pech! Spróbuj ponownie !, Inna osoba wygra, Przegrywasz!
                    {if} osoba {in} przyjaciele {print} dobra_odpowiedź {at} {random}
                    {else} {print} zła_odpowiedź {at} {random}
                    ```
            6:
                story_text: |
                    Na tym poziomie możesz używać matematyki w swoich przewidywaniach jako wróżbita. Pozwala to na tworzenie (zwariowanych) formuł do obliczania przyszłości.
                    Na przykład możesz obliczyć, w jaki sposób zdobędziesz bogactwo lub ile będziesz mieć dzieci, gdy dorośniesz.



                    ### Ćwiczenie
                    Czy możesz wymyślić własną (zwariowaną) maszynę do wróżenia?
                example_code: "```\n{print} 'Jestem Hedy - wróżka!'\n{print} 'Mogę przewidzieć, ile dzieci będziesz miał, gdy dorośniesz!'\nwiek = {ask} 'Ile masz lat?'\nrodzeństwo = {ask} 'Ile masz rodzeństwa?'\nwzrost = {ask} 'Ile masz wzrostu w centymetrach?'\nliczba_dzieci = wzrost / wiek\nliczba_dzieci = liczba_dzieci - rodzeństwo\n{print} 'Będziesz miał...'\n{sleep}\n{print} liczba_dzieci ' dzieci!'\n```\n"
            7:
                story_text: |
                    ### Ćwiczenie
                    Skończ ten program i spraw, aby powiedział ci , czy twoja sympatia cię kocha, czy nie.
                example_code: |
                    ```
                    {print} 'Mam kwiat z magicznymi płatkami'
                    {print} 'Jeżeli wybierzesz płatki to kwiat powie ci czy twoja sympatia kocha cię z wzajemnością'
                    ilość = {ask} 'Ile płatków chcesz wybrać?'
                    opcje = kocha cię, nie kocha cię
                    _ _ _ _ opcje {at} {random}
                    ```
            8:
                story_text: |
                    W następnym przykładzie możesz poprosić wróżkę, aby zadała 3 pytania, a także je wydrukowała!

                    ### Ćwiczenie
                    Czy potrafisz wpisać odpowiednie polecenie w puste miejsca?
                example_code: |
                    ```
                    {print} 'Jestem Hedy - wróżka!'
                    {print} 'Możesz zadać mi 3 pytania'
                    odpowiedzi = tak, nie, może
                    _ _ _
                       pytanie = {ask} 'Czego chciałbyś się dowiedzieć?'
                       {print} pytanie
                       {sleep}
                       {print} 'Moja kryształowa kula mówi..' odpowiedzi {at} {random}
                    ```
            10:
                story_text: |
                    Na tym poziomie nauczysz się programować grę MASH (dwór, mieszkanie, chałupa, dom). W tej grze możesz przewidzieć jak będzie wyglądać przyszłość dla wszystkich graczy jednocześnie.

                    ### Ćwiczenie 1
                    Wypełnij puste pola za pomocą nowego polecenia, którego nauczyłeś się na tym poziomie.
                example_code: |
                    ```
                    domy= dwór, mieszkanie, chałupa, dom
                    kocha = nikogo, księcia, sąsiada, prawdziwą miłość
                    zwierzęta = pies, kot, słoń
                    imiona = Jenna, Ryan, Jim
                    _
                        {print} imię ' żyje w ' domy {at} {random}
                        {print} imię ' ożeni się z ' kocha {at} {random}
                        {print} imię ' wezmą ' zwierzęta {at} {random} ' jako ich zwierzę.'
                        {sleep}
                    ```
            12:
                story_text: |-
                    Od poziomu 12 będziesz musiał używać cudzysłowów na listach, przed i po każdym elemencie.

                    ### Ćwiczenie
                    Dodaj dwa przewidywania do listy
                example_code: |
                    ```
                    losy = 'poślizgniesz się na skórce od banana', _
                    {print} 'Zajrzę do mojej kryształowej kuli w poszukiwaniu twojej przyszłości.'
                    {print} 'Widzę...'
                    {sleep}
                    {print} losy {at} {random}
                    ```
    functions:
        name: funkcje
        default_save_name: funkcje
        description: funkcje
        levels:
            12:
                story_text: |
                    Na tym poziomie nauczysz się korzystać z ** funkcji**. Funkcja to blok kodu, z którego można łatwo korzystać wiele razy. Korzystanie z funkcji pomaga nam organizować fragmenty kodu, których możemy używać wielokrotnie.
                    Aby utworzyć funkcję, użyj `{define}` i nadaj funkcji nazwę. Następnie umieść wszystkie linie, które chcesz w funkcji, w wciętym bloku pod linią `{define}`.
                    Pozostaw jedną pustą linię w kodzie, aby wyglądała ładnie i schludnie. Świetna robota! Stworzyłeś funkcję!

                    Teraz, gdy potrzebujemy tego bloku kodu, aby go wywołać używamy tylko kodu <code>{call} </code>z nazwą funkcji! Nie musimy ponownie wpisywać tego bloku kodu.

                    Sprawdź ten przykładowy kod gry Twister. Funkcja „obróć” zawiera blok kodu, który wybiera, która kończyna powinna iść gdzie.

                    ### Ćwiczenie
                    Dokończ ten kod, ustawiając 2 zmienne wybrana_kończyna i wybrany_kolor.
                    Następnie wybierz, ile razy chcesz wywołać funkcję, która spowoduje zakręcenie spinnerem do twistera.

                    ### Ćwiczenie 2
                    Ulepsz swój kod, dodając zmienną o nazwie „ludzie”'. Użyj zmiennej, aby dać wszystkim graczom własne polecenie w grze.
                    Na przykład: „Ahmed, prawa ręka na zielonym” lub „Jessica, lewa stopa na żółtym”'.
                example_code: |
                    ```
                    strony = 'lewo', 'prawo'
                    kończyny = 'ręka', 'stopa'
                    kolory = 'czerwony', 'niebieski', 'zielony', 'żółty'

                    {define} kolej
                        wybrana_strona = strony {at} {random}
                        wybrana_kończyna= kończyny _
                        wybrany_kolor = kolory _
                        {print} wybrana_strona' ' wybrana_kończyna ' on ' wybrany _kolor

                    {print} 'Zagrajmy w Twistera!'
                    {for} i {in} {range} 1 {to} _
                        {call} kolej
                        {sleep} 2
                    ```
            13:
                story_text: |
                    Now that you've learned how to use functions, you'll learn how to use a function with an argument.
                    An **argument** is a variable that is used within a function. It is not used outside the function.

                    For example in this code we've programmed the first verse of the song 'My Bonnie is over the ocean'.
                    In this example code the argument 'place' is used. Place is a variable that is only used in the function, so an argument.
                    To use 'place' we have placed `{with} place` after `{define} song`.
                    When the function is called, the computer will replace the argument 'place', with the piece of text after `{call} song {with}`.

                    ### Exercise
                    The next verse of this song goes:

                    ```not_hedy_code
                    Last night as I lay on my pillow
                    Last night as I lay on my bed
                    Last night as I lay on my pillow
                    I dreamed that my Bonnie is dead
                    ```

                    Can you program this verse in the same way as the example?
                example_code: |
                    ```
                    {define} song {with} place
                        {print} 'My Bonnie is over the ' place

                    {call} song {with} 'ocean'
                    {call} song {with} 'sea'
                    {call} song {with} 'ocean'
                    ```
            14:
                story_text: |
                    Na poprzednich poziomach nauczyłeś się tworzyć funkcje i używać z nimi argumentów. Innym doskonałym zastosowaniem funkcji jest umożliwienie jej obliczenia czegoś.
                    Możesz podać funkcji obliczenia, które dadzą ci odpowiedź na obliczenia. Ta odpowiedź nazywa się ** wartość zwrotu**.

                    Na przykład w tym kodzie funkcja oblicz_nową_cenę obliczy nową cenę dowolnego elementu. Daje ci nową cenę jako wartość zwrotu.

                    ### Ćwiczenie
                    Dokończ ten kod. Stworzyliśmy już dla ciebie zmienną nowa_cena, wystarczy ją tylko ustawić.
                    Powinieneś zakończyć wiersz kodu, wywołując funkcję, która oblicza nową cenę.
                example_code: |
                    ```
                    {define} oblicz_nową_cenę {with} kwota, procent
                        procent = procent / 100
                        wysokość_zniżki = kwota * procent
                        {return} kwota - wysokość_zniżki

                    stara_cena = {ask} 'Jaka cena widnieje na metce?'
                    przecena = {ask} 'Ile procent wynosi zniżka?'

                    nowa_cena = _ obliczyć_nową_cenę {with} stara_cena, _
                    {print} 'Nowa cena wynosi ' nowa_cena ' dolarów'
                    ```
            18:
                story_text: |
                    Stwórzmy funkcje w sposób Pythona! Aby zdefiniować funkcję, nie używamy już:

                    `{define} name_function {with} argument_1, argument_2:`

                    używamy zamiast tego:

                    `{def} name_function(argument_1, argument_2):`.


                    Jeśli nie chcesz używać argumentów, po prostu pozostaw puste miejsce między nawiasami.
                    Aby wywołać funkcję, nie potrzebujemy już polecenia `{call}`. Po prostu wpisz nazwę funkcji.
                example_code: |
                    ```
                    {def} oblicz_wynik(odpowiedź, poprawna_odpowiedź):
                        {if} odpowiedź == poprawna_odpowiedź:
                            wynik = 1
                        {elif} answer == '?':
                            wynik = 0
                        {else}:
                            wynik = -1
                        {return} wynik

                    odpowiedź = {input} ('Gdzie możemy znaleźć wieżę Eiffla ?')
                    poprawna_odpowiedź = 'Paryż'
                    wynik = oblicz_wynik(odpowiedź, poprawna_odpowiedź)
                    {print} ('Twój wynik to...', wynik)
                    ```
    guess_my_number:
        name: Zgadnij moją liczbę
        default_save_name: Zgadnij moją liczbę
        description: Zgadnij mój numer
        levels:
            14:
                story_text: |
                    Na tym poziomie możesz zaprogramować grę 'Zgadnij moją liczbę'

                    ### Ćwiczenie
                    Wypełnij puste miejsca odpowiednimi symbolami, aby gra mogła zadziałać.
                example_code: |
                    ```
                    {print} 'Zgadnij moją liczbę'
                    liczby = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    liczba = liczby {at} {random}
                    gra = 'start'
                    {for} i {in} {range} 1 {to} 10
                        {if} gra == 'start'
                            zgadnij = {ask} 'O jakiej liczbie myślę?'
                            {if} zgadnij _ liczbę
                                {print} 'Niżej!'
                            {if} zgadnij _ liczbę
                                {print} 'Wyżej!'
                            {if} zgadnij _ liczbę
                                {print} 'Wygrywasz!'
                                gra = 'koniec'
                    ```
    hangman:
        name: Wisielec
        default_save_name: Wisielec
        description: Zgadnij moje słowo
        levels:
            17:
                story_text: |
                    W tej przygodzie zaprogramujemy grę w wisielca. Najpierw przygotowujemy się, potem zaprogramujemy grę, a w trzeciej części dodajemy rysunek z żółwiem.

                    ### Ćwiczenie
                    ***Ustaw zmienne *** W tej grze w wisielca gracz 1 wybiera odpowiedź, a gracz 2 musi odgadnąć litery.
                    Aby poinformować komputer o wszystkich literach w słowie, zamienimy odpowiedź w listę liter. Robimy to również za pomocą liter zgadywanych przez Gracza 2.
                    Rozpoczniemy grę z 2 pustymi listami. Zrobiliśmy dla ciebie pustą listę dla zmiennej o nazwie odpowiedzi. Teraz utwórz pustą listę dla zgadywane_litery.
                    Następnie piszemy ile błędów zostało popełnionych. Na początku gry powinno to być 0.
                    Zmienna `amount_letters` mówi nam, ile liter znajduje się w odpowiedzi. Poproś Gracza 1, aby powiedział, ile liter ma jego słowo.
                    Na koniec informujemy komputer, czy gra się skończyła. Używamy zmiennej `game_over` i ustawiamy ją na `False`.

                    ***Wybór odpowiedzi *** Chcemy, aby Gracz 1 mógł wybrać odpowiedź. Zapytamy ich tyle razy, ile to konieczne o to jaka jest następna litera.
                    Następnie dodajemy tą literę do odpowiedzi. Na koniec dodajemy puste _ do listy zgadywanych liter, więc otrzymujemy tyle pustych _, ile jest liter w odpowiedzi.

                    ***Kolej gracza 2***
                    Powiedz Graczowi 2, że teraz jest jego kolej. Następnie powiedz Graczowi 2, ile liter znajduje się w odpowiedzi. Na koniec napisz listę `guessed_letters`.

                    ***Przejdź do następnej karty *** Po ustawieniu wszystkich zmiennych początkowych możemy rozpocząć programowanie samej gry. Sprawdź następną kartę, aby dowiedzieć się, jak to zrobić!
                example_code: |
                    ```
                    print 'Wisielec!'

                    # Ustaw zmienne
                    odpowiedź = []
                    odgadnięte_litery = _
                    zrobione_pomyłki= _
                    ilość_liter = {ask} _
                    _ = 'False'

                    # Wybór odpowiedzi
                    {for} _
                        litera= {ask} 'Graczu 1, czy w słowie znajduje się litera ' i '?'
                        _
                        {add} '_' {to} _

                    # Kolej Gracza 2
                    print _
                    print _
                    print  odgadnięte_litery
                    ```
    hangman_2:
        name: Wisielec 2
        default_save_name: Wisielec_2
        description: Wisielec 2
        levels:
            17:
                story_text: |
                    Teraz nadszedł czas, aby zaprogramować grę w wisielca.

                    ### Ćwiczenie

                    ***Wklej kod *** Skopiuj kod z poprzedniej karty i wklej go w polu programowania.

                    **Gra *** Ta gra trwa do momentu, aż Gracz 2 nie zakończy swojej gry (wygra lub przegra). Wypełnij odpowiednio polecenie while. Teraz Gracz 2 może odgadnąć litery, więc poproś Gracza 2, aby je
                    zgadywał. Musimy sprawdzić, czy jego odpowiedź jest poprawna, więc sprawdź, czy jego `guess` jest (gdzieś) na (liście) `answer`. Następnie pozwalamy komputerowi dowiedzieć się, która z liter jest zgadywana. Zaprogramowaliśmy już tę część dla Ciebie.
                    Następnie chcemy pochwalić gracza za odgadnięcie poprawnej litery i chcemy wydrukować listę `guessed_letters`, aby gracz mógł zobaczyć swoje postępy.

                    W następnej części zaprogramujemy i dowiemy się co się stanie jeśli gracz odgadnie wszystkie litery. Czyli jeśli jego odgadnięte litery `guessed_letters` są takie same jak nasza odpowiedź `answer`.
                    Jeżeli są one takie same, to wtedy pogratuluj Graczowi 2 jego zwycięstwa i ustaw zmienną `game_over` na `True`.

                    Teraz zaprogramujemy część, w której Gracz 2 przegrywa (czyli komenda `{else}` ). Najpierw powiedz graczowi, że zgadł źle. Wtedy zwiększ zmienną `mistakes_made` o 1.

                    Ostatnim krokiem będzie zaprogramowanie sytuacji, w której Gracz 2 zrobił 10 pomyłek. Napiszemy (pokażemy), że Gracz nr 1 wygrał oraz podamy poprawną odpowiedź. W końcu ustawimy zmienną `game_over` na `True`, i gra się kończy.

                    ***Przejdź do następnej karty *** Świetna robota! W twoją grę można grać, ale czy nie byłoby fajnie, gdyby wisielca rzeczywiście narysowano, gdy Gracz 2 popełni błąd?
                example_code: |
                    ```
                    # Wklej tutaj swój kod.

                    # Gra
                    {while} Koniec_gry _
                        próba_odgadnięcia = _
                        {if} _
                            {for} i {in} {range} 1 {to} Liczba_liter:
                                jeśli odpowiedź[i] == próba_odgadnięcia:
                                    odgadnięte_litery [i] = próba_odgadnięcia
                            {print} _
                            {if} odgadnięte_litery == _:
                                {print} _
                                koniec_gry = _
                        {else}:
                            {print} _
                            zrobione_pomyłki_
                            {if} _ == 10:
                                {print} _
                                {print} _
                                _
                    ```
    hangman_3:
        name: Wisielec 3
        default_save_name: Wisielec_3
        description: Wisielec 3
        levels:
            17:
                story_text: |
                    W grze w wisielca błędy są pokazywane poprzez narysowanie części wisielca za każdym razem, gdy popełniono błąd.
                    Teraz dodajemy rysunki z naszym żółwiem!

                    ### Ćwiczenie
                    ***Utwórz funkcję, która będzie rysowała wisielca*** Utwórz funkcję, która narysuje wisielca w 10 krokach. Zrobiliśmy już dla ciebie krok 1.

                    ***Przetestuj funkcję *** Przetestuj ją, wywołując funkcję za pomocą 10. Jeśli jesteś zadowolony z funkcji, usuń linię, która na razie ją wywołuje. Wywołamy tę funkcję, gdy gracz popełni błąd.

                    ***Wklej grę w wisielca pod swoją funkcją *** Wróć do poprzedniej karty i skopiuj grę w wisielca. Wklej grę pod swoją funkcją.

                    ***Wezwij do funkcji, gdy gracz popełni błąd *** W wierszu `mistakes_made = mistakes_made + 1` wywołamy funkcję. Chcemy, aby żółw wykonał tyle samo kroków, co gracz popełnił błędów, dlatego nazywamy tę funkcję argumentem `mistakes_made`.

                    ***Ciesz się swoją grą!***
                    <div class="w-full flex flex-row gap-2">
                        Wisielec mógłby wyglądać tak <img src="https://github.com/hedyorg/hedy/assets/80678586/d385b691-5701-4342-b5d9-dfae1589c129" width="100">
                    </div>
                example_code: |
                    ```
                    # Utwórz funkcję, która będzie rysowała wisielca.
                    {define} narysuj_wisielca {with} krok:
                        {if} krok == 1:
                            {color} biały
                            {forward} -100
                            {turn} 90
                            {forward} -50
                            {color} czarny
                            {forward} 100
                            {forward} -50

                        {if} krok == 2:
                            _
                    # Wklej tutaj swoją grę w wisielca

                    ```
    harry_potter:
        name: Harry Potter
        default_save_name: Harry Potter
        description: Przygody Harry'ego Pottera
        levels:
            10:
                story_text: |
                    ### Ćwiczenie
                    Możemy również zrobić wróżbitę o tematyce Harry'ego Pottera. Wypełnij puste pola, tak aby napisano 9 wierszy.
                    **Dodatkowo ** Zmień motyw wróżbity na coś innego, na przykład ulubioną książkę, film lub program telewizyjny.
                example_code: |
                    ```
                    domy = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    przedmioty = eliksiry, obrona przed czarną magią, zaklęcia, transfiguracja
                    lęki = Voldemort, pająki, oblanie egzaminów
                    imiona = Harry, Ron, Hermiona
                    _
                    _ {print} imię ' zostaje przypisany do ' domu {at} {random}
                    _ {print} imię ' jest dobry w ' przedmiot {at} {random}
                    _ {print} największy lęk imię to' lęki {at} {random}
                    ```
    haunted:
        name: Nawiedzony dom
        default_save_name: Nawiedzony dom
        description: Ucieknij z nawiedzonego domu
        levels:
            1:
                story_text: |
                    W tej przygodzie pracujesz nad stworzeniem gry, w której musisz uciec z nawiedzonego domu wybierając właściwe drzwi.
                    Jeśli wybierzesz właściwe drzwi, przeżyjesz, ale jeśli nie, straszny potwór może...

                    W poziomie 1 zaczynamy naszą grę w nawiedzony dom przez wymyślenie strasznej historii i zapytania gracza jakiego potwora zobaczą w nawiedzonym domu.
                example_code: |
                    ```
                    {print} Jak się tu dostałem?
                    {print} Pamiętam, jak przyjaciel powiedział mi, że mam wejść do starej rezydencji...
                    {print} i nagle wszystko stało się czarne.
                    {print} Ale jak wylądowałem na podłodze...?
                    {print} Strasznie boli mnie głowa, jakby ktoś uderzył mnie kijem!
                    {print} Co to za dźwięk?
                    {print} O nie! Chyba nie jestem sam w tym domu!
                    {print} Muszę się stąd wydostać!
                    {print} Przede mną jest 3 drzwi...
                    {ask} Które drzwi powinienem wybrać?
                    {echo} Wybieram drzwi
                    {print} ...?
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Skopiuj przykładowy kod na ekran wprowadzania, klikając żółty przycisk.
                    Teraz zakończ historię, dodając co najmniej 5 linii kodu.
                    Pamiętaj, aby każdą linię kodów rozpocząć od komendy `{print}`.
            2:
                story_text: |
                    W tym nawiedzonym domu możesz wybierać swoje potwory za pomocą emotikonów. Oczywiście możesz też użyć słów.
                example_code: |
                    ```
                    potwór_1 {is} 👻
                    potwór_2 {is} 🤡
                    potwór_3 {is} 👶
                    {print} Wchodzisz do nawiedzonego domu..
                    {print} Nagle widzisz potwór_1
                    {print} Uciekasz do innego pokoju, 
                    {print} ale potwór_2 czeka na ciebie!
                    {print} O nie! Szybko idź do kuchni.
                    {print} Ale jak wchodzisz zaatakował ciebie potwór_3!
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    W powyższym przykładzie potwory są z góry określone. Więc za każdym razem, gdy uruchamiasz swój kod, dane wyjściowe są takie same.
                    Czy możesz dodać polecenia `{ask}`, aby uczynić nawiedzony dom interaktywnym i sprawić, by gracze wybierali napotkane potwory?
                example_code_2: |
                    ```
                    potwór_1 {is} _
                    potwór_2 {is} _
                    potwór_3 {is} _
                    {print} Wchodzisz do nawiedzonego domu..
                    {print} Nagle widzisz potwór_1
                    {print} Uciekasz do innego pokoju, 
                    {print}ale potwór_2 czeka na ciebie!
                    {print} O nie! Szybko idź do kuchni.
                    {print} Ale jak wchodzisz zaatakował ciebie potwór_3!
                    ```
            3:
                story_text: |
                    Na poprzednich poziomach zrobiłeś wprowadzenie do gry o nawiedzony dom, ale jak mogłeś zauważyć, historia zawsze miałaby straszny koniec.
                    Na tym poziomie możesz uczynić swoją historię bardziej interaktywną, zmieniając wynik gry; czasami zostaniesz zjedzony, czasami uciekniesz!
                    Niech Hedy decyduje losowo!

                    ### Ćwiczenie
                    Skopiuj przykładowe kody i wypełnij puste pola, tak aby działały!

                    **Dodatkowo ** Ta historia jest dość prosta, może możesz zrobić ją trochę straszniejszą poprzez dodanie bardziej ekscytującej historii.
                    Masz teraz bardzo ograniczone wyniki, są tylko 3 opcje tego, co może być za drzwiami. Może wymyślisz więcej potworów do dodania do listy!
                example_code: |
                    ```
                    _ Ucieknij z nawiedzonego domu!
                    _ Przed tobą jest troje drzwi... 
                    _ _ _ Które drzwi wybierzesz?
                    _ Wybrałeś drzwi  ... wybór
                    potwory _ zombie, wampir, NIC UCIEKŁEŚ
                    _ Widzisz...
                    {sleep}
                    _ _ _ _
                    ```
            4:
                story_text: |
                    Na tym poziomie nauczysz się używać cudzysłowów w swoich grach.
                    Czy potrafisz zmienić swój Nawiedzony Dom, aby był zgodny z poziomem 4?
                example_code: |
                    ```
                    _Dodaj znaki cudzysłowu do tego kodu
                    {print} _ Uciekaj z nawiedzonego domu! _
                    {print} _ Przed tobą znajduje się 3 drzwi... _
                    wybór {is} {ask} _ Które drzwi wybierzesz? _
                    {print} Wybrałeś drzwi ... _ wybór
                    potwory {is} zombie, wampir, NIC UCIEKŁEŚ
                    {print} Widzisz... _
                    {sleep}
                    {print} potwory {at} {random}
                     ```
            5:
                story_text: |
                    Aż do tego poziomu gra w nawiedzonym domu zawsze prosiła gracza o wybranie drzwi, ale jak zapewne zauważyłeś, tak naprawdę nie musieli odpowiadać poprawnie.
                    Jeśli gracz podał całkowicie losową odpowiedź, gra nadal działała, a gracz mógł nawet wygrać (mimo że nie wybrał drzwi).
                    Na tym poziomie możesz wygrać grę tylko wybierając te same drzwi, które losowo wybrała Hedy.

                    ### Ćwiczenie
                    Czy potrafisz znaleźć 4 brakujące słowa, aby uzupełnić kod?
                example_code: "```\n{print} 'Uciekaj z nawiedzonego domu!'\n{print} 'Przed tobą znajdują się 3 drzwi...'\ndrzwi {is} 1, 2, 3\npotwory {is} wilkołak, mumia, wampir, zombie\nwybrane_drzwi {is} {ask} 'Które drzwi wybierasz?'\n {print} 'Wybrałeś drzwi...' wybrane_drzwi \n{sleep}\npoprawne_drzwi {is} drzwi {at} {random}\n_ _ _ {print} 'Fantastycznie! Uciekłeś!'\n{else} {print} 'O nie! Zostałeś zjedzony przez...' potwory. {at} {random}\n```\n"
            9:
                story_text: |
                    Na tym poziomie możesz skorzystać ze wcięć, dzięki czemu nawiedzony dom stanie się jeszcze bardziej interaktywny!

                    ### Ćwiczenie
                    Teraz bardzo trudno jest wygrać tę grę, czy możesz ułatwić wygraną?
                    Zmień kod tak, aby zawierał tylko jedne błędne drzwi i dwoje prawidłowych drzwi zamiast jednych prawidłowych drzwi i dwóch niewłaściwych?
                    Wskazówka: oznacza to zmianę zmiennej poprawne_drzwi na niepoprawne_drzwi i zamianę kodu `{if}` i `{else}`.
                    I oczywiście możesz także zmienić historię i uczynić ją własną. Zmień potwory lub spraw, by był to wesoły teleturniej, w którym otrzymasz prezent!
                example_code: |
                    ```
                    {print} 'Ucieknij z nawiedzonego domu!'
                    gracz = żyje
                    drzwi = 1, 2, 3
                    potwory = zombie, wampir, ogromny pająk
                    {repeat} 3 {times}
                        {if} gracz {is} żyje
                            poprawne_drzwi {is} drzwi {at} {random}
                            {print} 'Przed tobą jest 3 drzwi...'
                            wybrane_drzwi = {ask} 'Które drzwi wybierasz?'
                            {if} wybrane_drzwi {is} poprawne_drzwi
                                {print} 'Tutaj nie ma potworów!'
                            {else}
                                {print} 'Zostałeś zjedzony przez ' potwory {at} {random}
                                gracz = zginął
                        {else}
                            {print} 'KONIEC GRY'
                    {if} gracz {is} żyje
                        {print} 'Świetnie! Udało ci się przetrwać!'
                    ```
            11:
                story_text: |
                    Na tym poziomie zmieniliśmy polecenie `{for}`, abyśmy mogli powiedzieć graczowi, gdzie się znajduje.

                    ### Ćwiczenie 1
                    Skończ program tak, aby gracz wiedział, w którym pokoju się znajduje.

                    ### Ćwiczenie 2
                    Zmień program w przygodę, wykonując następujące kroki:

                    1. Zrób listę wyborów (takich jak: walcz lub uciekaj)
                    2. Upewnij się, że gracz może wybrać opcję za pomocą `{ask}`
                    3. Czy odpowiedź jest poprawna? Następnie mogą przejść do następnego potwora. Czy dali złą odpowiedź? Poinformuj gracza za pomocą `{print}`.

                    **Dodatkowo** Jeśli dokonasz złego wyboru, potwór nadal będzie widoczny! Jak mógłbyś to zmienić?
                example_code: |
                    ```
                    {print} 'Ucieknij z nawiedzonego domu!'
                    potwory = zombie, wampir, gigantyczny pająk
                    _
                        {print} 'Pokój ' i
                        potwór = potwory {at} {random}
                    ```
            14:
                story_text: |
                    ### Ćwiczenie
                    Na tym poziomie możesz użyć symbolu `<` i `>`, aby wprowadzić życia do swojej gry.
                    Upewnij się, że gracz straci życie, gdy napotka potwora oraz że gra się skończy, jeśli nie masz żadnych żyć.
                example_code: |
                    ```
                    {print} 'Ucieknij z nawiedzonego domu'
                    życia = 3
                    drzwi = 1, 2, 3
                    potwory = 'zła czarownica', 'zombie', 'śpiący trójgłowy pies'
                    {for} i {in} {range} 1 {to} 10
                        {if} życia _
                            dobre_drzwi = drzwi {at} {random}
                            potwór = potwory {at} {random}
                            wybrane_drzwi = {ask} 'Które drzwi wybierasz?'
                            {if} dobre_drzwi == wybrane_drzwi
                                {print} 'Wybrałeś poprawne drzwi'
                            {else}
                                {print} 'Widzisz...' potwór
                                {if} potwór == 'śpiący trójgłowy pies'
                                    {print} 'Fiuuu.... śpi'
                                {else}
                                    {print} 'Tracisz jedno życie'
                                    życia = _
                        {else}
                            {print} 'KONIEC GRY'
                    ```
            16:
                story_text: |
                    ### Ćwiczenie
                    Ta gra w nawiedzonym domu wykorzystuje połączenie między listami, których możesz użyć na tym poziomie
                    Na przykład: wszystkie właściwości należące do zombie są pierwsze na wszystkich listach, drugie wiedźma i trzecie wampir.
                    Sprawdź kod i wypełnij w pustych polach za pomocą `weapons[i]`, `monsters[i]`, `bad_fate[i]`, `good_fate[i]`, `hint[i]`w taki sposób, aby kod zadziałał!
                example_code: |
                    ```
                    liczby = [1, 2, 3]
                    i = liczby[{random}]
                    wskazówka = ['warczenie', 'rechoczący śmiech', 'trzepot skrzydeł']
                    potwory = ['zombie', 'wiedźma', 'wampir']
                    zły_los = ['Twój mózg jest zjadany', 'Zostałeś przeklęty', 'Zostałeś ugryziony']
                    dobry_los = ['Rzuciłeś szynkę. Zombie jest rozproszony i zaczyna ją jeść.', 'Podpalasz zasłony. Czarownica ucieka ze strachu przed ogniem', 'Wampir nienawidzi czosnku i ucieka']
                    bronie = ['szynka', 'zapalniczka', 'czosnek']
                    {print} 'Stoisz przed starą rezydencją'
                    {print} 'Coś tu nie gra'
                    {print} 'Słyszysz ' _
                    {print} 'Zamierzasz to zbadać'
                    {print} 'Wchodzisz do kuchni i widzisz zapalniczkę, surową szynkę i czosnek.'
                    twoja_broń = {ask} 'Co zabierasz ze sobą?'
                    {print} 'Z ' twoja_broń ' w ręku wchodzisz do salonu'
                    {print} 'Znajdujesz...  ' _
                    potrzebna_broń= _
                    {if} twoja_broń == potrzebna_broń
                        {print} 'Użwasz ' twoja_broń
                        {print} _
                        {print} 'Wygrałeś!'
                    {else}
                        {print} 'Wybrałeś złą broń...'
                        {print} _
                        {print} 'KONIEC GRY'
                    ```
    hotel:
        name: hotel
        default_save_name: hotel
        description: hotel
        levels:
            13:
                story_text: |
                    W poprzedniej przygodzie nauczyłeś się używać argumentu w funkcji i nauczyłeś się łączyć go z {ask}
                    Być może zastanawiałeś się, dlaczego używasz funkcji, ponieważ funkcje w tym przykładzie były tylko jednym wierszem kodu.
                    Teraz pokażemy Ci, jak wygląda większa funkcja, i teraz będziemy również korzystać z wielu argumentów. Zobaczysz, że lepiej jest korzystać z funkcji, jeżeli funkcja się powiększy.
                    Oto przykład funkcji z argumentami połączonymi z poleceniami {ask}.
                example_code: |
                    ```
                    {define} wiadomość_powitalna {with} tytuł, nazwisko, kraj, numer_pokoju
                        {print} 'Witamy w hotelu Hedy'ego, ' tytuł ' ' nazwisko
                        przyjemna_podróż {is} {ask} 'Czy miał Pan/Pani przyjemną podróż z , ' kraj '?'
                        {if} przyjemna_podróż {is} 'tak'
                            {print} 'Cudownie!'
                        {else}
                            {print} 'Przykro mi to słyszeć!'
                            {print} 'Mam nadzieję, że odpocznie Pan/Pani w swoim pokoju.'
                        {print} 'Twój numer pokoju to ' numer_pokoju

                    {print} 'Witam. Proszę podać swoje informacje, aby się zameldować.'
                    tytuł = {ask} 'Jaki jest Pana/Pani (pani, pan, doktor, itd.)?'
                    nazwisko = {ask} 'Jakie jest twoje nazwisko?'
                    kraj_pochodzenia = {ask} 'Z jakiego kraju Pan/Pani pochodzi?'

                    {call} wiadomość_powitalna {with} tytuł, nazwisko, kraj_pochodzenia, 105
                    ```

                    tytuł = {ask} 'Jaki jest Pana/Pani (pani, pan, doktor, itd.)?'
                    nazwisko = {ask} 'Jakie jest twoje nazwisko?'
                    kraj_pochodzenia = {ask} 'Z jakiego kraju pochodzisz?'

                    {call} wiadomość_powitalna {with} tytuł, nazwisko, kraj_pochodzenia, 105
    if_command:
        name: '{if} i {else}'
        default_save_name: komenda_if
        description: Wprowadzenie polecenia {if}
        levels:
            5:
                story_text: |
                    ## Jeżeli... inaczej...
                    W poziomie 5 pojawia się coś nowego `{if}`! Za pomocą `{if}` możesz wybrać pomiędzy dwoma opcjami.
                    Ten kod wyświetla „to miło”, jeśli wprowadzisz imię Hedy, w przeciwnym wypadku wyświetli „bu!”.
                    `{ask}` i `{print}` działają w dalszym ciągu tak jak w poziomie 4.
                example_code: |
                    ```
                    imię {is} {ask} 'jak masz na imię?'
                    {if} imię {is} Hedy {print} 'super' {else} {print} 'eh'
                    ```
                story_text_2: |
                    Czasami kod zawierający `{if}` staje się naprawdę długi i nie mieści się w linii. <br>Wtedy możesz podzielić kod na dwie linie, zaczynając drugą linię od `{else}`, tak jak w przykładzie:
                example_code_2: |
                    ```
                    imię {is} {ask} 'jak masz na imię?'
                    {if} imię {is} Hedy {print} 'super'
                    {else} {print} 'eh'
                    ```
                story_text_3: |
                    ### Ćwiczenie
                    Spróbuj napisać własny kod używając `{if}` and `{else}`. Możesz użyć przykładowego kodu.
                example_code_3: |
                    ```
                    odpowiedź {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ 'Dobra robota!'
                    _ _ 'Nie, 2 + 2 = 4'
                    ```
            8:
                story_text: |
                    ## If... Else...
                    Nauczyłeś się powtarzać blok wierszy kodu po poleceniu `{repeat}`.
                    Teraz możesz także użyć wcięcia, aby utworzyć bloki po poleceniu {if} lub {else}.
                    Sprawdź przykładowy kod.

                    ### Ćwiczenie
                    Dodaj polecenie {else} do przykładowego kodu. Utwórz blok wiersza za pomocą wcięcia. Robisz to, rozpoczynając każdą linię od 4 spacji.
                example_code: |
                    ```
                    imię = {ask} 'Jak masz na imię?'
                    {if} imię {is} Hedy
                        {print} 'Witaj Hedy'
                        {print} 'Możesz zagrać na komputerze!'
                    ```
            9:
                story_text: |
                    Na tym poziomie możesz również umieścić polecenie `{if}` w innym poleceniu `{if}`
                example_code: |
                    ```
                    kontunuować = {ask} 'Czy chcesz kontynuować?'
                    {if} kontunuować = yes
                        pewien = {ask} 'Jesteś tego pewny?'
                        {if} pewien {is} tak
                            {print} 'Kontynuujemy'
                        {else}
                            {print} 'Nie jesteś pewien'
                    {else}
                        {print} 'Nie chcesz kontynuować'
                    ```
    in_command:
        name: '{in}'
        default_save_name: polecenie_in
        description: Wprowadzenie polecenia {in}
        levels:
            5:
                story_text: |
                    ## Listy
                    Aby sprawdzić czy coś jest obecne na liście, możemy użyć komendy `{in}`.
                    Ten kod wypisuje 'ładny' jeśli wprowadzimy 'zielony' albo 'żółty', a w przeciwnym razie wypisuje 'meh'.
                example_code: |
                    ```
                    ładne_kolory {is} zielony, żółty
                    wybrany_kolor {is} {ask} 'Jaki jest Twój ulubiony kolor?'
                    {if} wybrany_kolor {in} ładne_kolory {print} 'ładny!'
                    {else} {print} 'meh'
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Dokończ przykładowy kod wypełniająć puste miejsca komendami, których się nauczyłeś.
                    Po dokończeniu kodu, spróbuj stworzyć własny kod i użyj pytania, które wymyśliłeś sam.
                example_code_2: |
                    ```
                    zwierzęta {is} pies, krowa, owca
                    odpowiedź {is} {ask} 'Jakie jest Twoje ulubione zwierzę?'
                    _ odpowiedź _zwierzęta _ 'Moje też!'
                    _ _ 'Moje ulubione zwierzęta to psy, krowy i owce'
                    ```
    is_command:
        name: '{is}'
        default_save_name: Polecenie_is
        description: Wprowadzenie polecenia {is}
        levels:
            2:
                story_text: |
                    ## Zmienne
                    Możesz nadać nazwę słowu za pomocą `{is}`. Nazywa się to **zmienną**. W tym przykładzie stworzyliśmy zmienną o nazwie name oraz zmienną o nazwie age. Możesz użyć słowo name gdziekolwiek w swoim kodzie  i będzie ono zastąpione Hedy, w ten oto sposób: :
                example_code: |
                    ```
                    imię {is} Hedy
                    wiek {is} 15
                    {print} imię ma wiek lat
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Czas na tworzenie własnych zmiennych!
                    W przykładowym kodzie podaliśmy przykład zmiennej `favorite_animal`. W wierszu 1 zmienna jest ustawiona, a w wierszu 2 użyliśmy zmiennej w komendzie {print}.
                    Po pierwsze, dokończ nasz przykład, wypełniając swoje ulubione zwierzę w pustych miejscach. Następnie sam napisz co najmniej 3 z tych kodów. Wybierz zmienną i ustaw ją za pomocą polecenia {is}. Następnie użyj go z poleceniem {print}, tak jak my to zrobiliśmy.
                example_code_2: |
                    ```
                    Ulubione_zwierzę {is} _
                    {print} Lubię ulubione_zwierzę
                    ```
            6:
                story_text: |
                    Zmieniamy również przechowywanie słowa w zmiennej! Możesz teraz użyć `=` zamiast `{is}`, gdy przechowujemy nazwę lub liczbę w zmiennej, w ten oto sposób:
                example_code: |
                    ```
                    imię = Hedy
                    odpowiedź = 20 + 4
                    ```
            14:
                story_text: |
                    Nauczymy się więcej nowych rzeczy. Być może znasz je już z matematyki, `<` i `>`.
                    `<` sprawdza, czy pierwsza liczba jest mniejsza niż druga, na przykład wiek `<` 12 sprawdza, czy wiek jest mniejszy niż 12 lat.
                    Jeśli chcesz sprawdzić, czy pierwsza liczba jest mniejsza lub równa drugiej, możesz użyć`<=`, na przykład wiek `<=` 11.
                    `>` sprawdza, czy pierwsza liczba jest większa niż druga, na przykład wskazuje `>` 10, czy punkty są większe niż 10.
                    Jeśli chcesz sprawdzić, czy pierwsza liczba jest większa lub równa drugiej, możesz użyć `>=`, na przykład punktów`>=` 11.
                    Używasz tych porównań w `{if}`, w ten sposób:
                example_code: |
                    ```
                    wiek = {ask} 'Ile masz lat?'
                    {if} wiek > 12
                        {print} 'Jesteś ode mnie starszy!'
                    ```
                    ```
                    wiek = {ask} 'Ile masz lat?
                    {if} wiek < 12
                        {print} Jesteś ode mnie młodszy!'
                    {else}
                        {print} 'Jesteś ode mnie starszy!'
                    ```
                story_text_2: |
                    Od tego poziomu, jeśli chcesz dokładnie coś porównać, możesz użyć dwóch znaków równości. Tak właśnie robi większość języków programowania:
                example_code_2: |
                    ```
                    imię = {ask} 'Jak masz na imię?'
                    {if} imię == 'Hedy'
                        {print} 'Jesteś spoko!'
                    ```
                story_text_3: |
                    Możesz także porównać, czy coś * nie * jest równe czemuś innemu za pomocą `!=` w ten sposób:
                example_code_3: |
                    ```
                    imię = {ask} 'Jak masz na imię?'
                    {if} imię != 'Hedy'
                        {print} 'Ty nie jesteś hedy'
                    ```
    language:
        name: Język
        default_save_name: Język
        description: Ćwicz słowa w języku obcym
        levels:
            5:
                story_text: |
                    Stwórz swój własny program do ćwiczenia słownictwa w nowym języku.

                    ### Ćwiczenie
                    Wydłuż kod, dodając co najmniej 3 dodatkowe słowa, aby gracz mógł się uczyć.
                    **Dodatkowo ** Oczywiście możesz użyć innego języka niż francuski. Możesz zmienić kod na dowolny język, którego chcesz się nauczyć.
                example_code: |
                    ```
                    {print} 'Naucz się francuskiego!'
                    kot{is} {ask} '🐱'
                    {if} kot {is} chat {print} 'Wspaniale!'
                    {else} {print} 'Nie, kot po francusku to chat'
                    żaba {is} {ask} '🐸'
                    {if} żaba {is} grenouille {print} 'Super!'
                    {else} {print} 'Nie, żaba to grenouille'
                    ```
            16:
                story_text: |
                    ### Ćwiczenie
                    Spójrz na przykładowy kod. Jest to program do ćwiczenia francuskiego słownictwa. Teraz stwórz własny program do ćwiczenia słownictwa w nowym języku.
                    Jeśli nie znasz innych języków, możesz użyć tłumacza Google lub emoji i języka ojczystego.
                example_code: |
                    ```
                    francuskie_słowa= ['bonjour', 'ordinateur', 'pomme de terre']
                    tłumaczenie = ['witam', 'komputer', 'ziemniak']
                    wynik = 0
                    {for} i {in} {range} 1 {to} 3
                        odpowiedź = {ask} 'Co to znaczy ' francuskie_słowa[i] ' ?'
                        poprawnie = tłumaczenie[i]
                        {if} odpowiedź == poprawnie
                            {print} 'Poprawnie!'
                            wynik = wynik + 1
                        {else}
                            {print} 'Źle, ' francuskie_słowa[i] ' oznacza ' tłumaczenie[i]
                    {print} 'Odpowiedziałeś poprawnie na ' wynik ' pytań.'
                    ```
    maths:
        name: Matematyka
        default_save_name: matematyka
        description: Wprowadzenie matematyki
        levels:
            6:
                story_text: |
                    Na tym poziomie nauczysz się czegoś nowego: możesz teraz wykonywać obliczenia.

                    Plus jest łatwy, piszesz go jak w matematyce: na przykład `5 + 5`. Minus również działa tak samo, to jest `5 - 5`.

                    Teraz jest nieco inaczej , ponieważ na klawiaturze nie ma symbolu mnożenia. Poszukaj, naprawdę nie ma!
                    Dlatego mnożymy przez gwiazdkę * powyżej 8: `5 * 5`. Przeczytaj to jako „5 razy 5”, to pomoże ci lepiej zapamiętać.
                example_code: |
                    ```
                    {print} '5 plus 5 to ' 5 + 5
                    {print} '5 minus 5 to ' 5 - 5
                    {print} '5 razy 5 to ' 5 * 5
                    {print} '5 dzielone na 5 to ' 5 / 5
                    ```
            12:
                story_text: |-
                    **Liczby dziesiętne**
                    Jak dotąd Hedy nie dopuszczał liczb dziesiętnych takich jak 1,5, ale teraz na to pozwalamy. Pamiętaj, że komputery używają `.` do liczb dziesiętnych.
                example_code: |
                    ```
                    {print} 'Dwa i pół plus dwa i pół to...'
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |-
                    **Matematyka ze słowami**
                    Na tym poziomie możesz również dodać razem ze słowami:
                example_code_2: |
                    ```
                    a = 'Witaj '
                    b = 'świecie!'
                    {print} a + b
                    ```
    music:
        name: muzyka
        default_save_name: muzyka
        description: Zagraj melodię!
        levels:
            1:
                story_text: |-
                    Na tym poziomie nauczysz się korzystać z polecenia `{play}`, aby zagrać melodię!

                    Wpisz `{play}`, poprzedzone nutą, którą chcesz zagrać. Skala idzie w ten sposób : C-D-E-F-G-A-B.
                    Jak możesz zauważyć, istnieje 7 różnych liter, ale możemy zagrać więcej niż 7 nut.
                    Wpisz liczbę od 1 do 10 po literze, aby wybrać skalę, na przykład po B4 pojawia się C5.
                    C1 to najniższa nuta, jaką możesz zagrać, C10 jest najwyższą.

                    ### Ćwiczenie
                    Wypróbuj przykładowy kod, a następnie baw się nim! Czy potrafisz stworzyć własną melodię?
                    Na następnym poziomie nauczysz się grać niektóre istniejące utwory.
                example_code: |-
                    ```
                    {play} C4
                    {play} D4
                    {play} E4
                    {play} F4
                    {play} G4
                    {play} A4
                    {play} B4
                    {play} C5
                    ```
            2:
                story_text: |
                    ### Ćwiczenie
                    Dokończ piosenki! Rozpoczęliśmy kody niektórych melodii.
                example_code: |
                    ```
                    {print} Pan Mac Donald farmę miał
                    {play} C5
                    {play} C5
                    {play} C5
                    {play} G4
                    {play} A4
                    {play} A4
                    {play} G4
                    ```
                story_text_2: Jak widać, możesz również użyć polecenia `{sleep}`, aby dodać małą pauzę w utworze.
                example_code_2: |
                    ```
                    {print} Twinkle Twinkle Little Star
                    {play} C
                    {play} C
                    {play} G
                    {play} G
                    {play} A
                    {play} A
                    {play} G
                    {sleep} 1
                    {play} F
                    {play} F
                    ```
            3:
                story_text: |
                    Stwórz losową melodię!

                    ### Ćwiczenie
                    Przykładowy kod tworzy losową melodię, ale jest bardzo krótki i nie używa się wielu nut.
                    Dodaj więcej nut do listy i stwórz dłuższą melodię, kopiując ostatni wiersz jeszcze kilka razy.
                example_code: |
                    ```
                    nuty {is} A4, B4, C4
                    {play} nuty  {at} {random}
                    {play} nuty  {at} {random}
                    {play} nuty  {at} {random}
                    ```
            4:
                story_text: |
                    Użyj polecenia `{clear}`, aby utworzyć maszynę do karaoke!

                    ### Ćwiczenie
                    Dokończ wersję karaoke 'Mary had a little lamb'.
                    Następnie utwórz wersję karaoke dowolnej piosenki, jeśli chcesz!
                example_code: |
                    ```
                    {print} 'Mary had a little lamb'
                    {play} E
                    {play} D
                    {play} C
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Little lamb, little lamb'
                    {play} D
                    {play} D
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Mary had a little lamb'
                    {play} E
                    ```
            5:
                story_text: |
                    Nie zawsze chcesz używać polecenia `{play}`, aby odtworzyć cały utwór, czasem chcesz po prostu odtworzyć jedną nutę.
                    Na przykład, jeśli chcesz zrobić quiz, możesz zagrać radosną nutę, jeśli odpowiedź jest poprawna, i smutną niską nutę, jeśli odpowiedź jest błędna.

                    ### Ćwiczenie
                    Dokończ pierwsze pytanie, dodając wiersz kodu, który odtwarza nutę C3, jeśli podana zostanie niewłaściwa odpowiedź.
                    Następnie pomyśl o 3 dodatkowych pytaniach, które możesz dodać do tego quizu.
                example_code: |
                    ```
                    odpowiedź {is} {ask} 'Jaka jest stolica Zimbabwe?'
                    {if} odpowiedź {is} Harare {play} C6
                    _
                    ```
            6:
                story_text: "Zamiast grać nuty, możesz teraz także odtwarzać liczby. Po prostu wpisz `{play} 1` dla najniższej nuty, `{play} 70` dla najwyższej nuty lub czegokolwiek pomiędzy.\n\n### Exercise\n To wymaga matematyki muzycznej! Wypróbuj przykładowy kod kilka razy z różnymi liczbami początkowymi. \nNastępnie sprawdź, czy możesz skomponować utwór za pomocą liczb.\n"
                example_code: |
                    ```
                    liczba= {ask} 'Podaj liczbę początkową między 1 i 67'
                    {print} liczba
                    {play} liczba
                    liczba = liczba + 1
                    {print} liczba
                    {play} liczba
                    liczba = liczba+ 1
                    {print} liczba
                    {play} liczba
                    ```
            7:
                story_text: |
                    Użycie polecenia `{repeat}` może znacznie skrócić kody melodii!

                    ### Ćwiczenie
                    Dokończ kod dla piosenki Twinkle Twinkle Little Star używając polecenia `{repeat}`.
                    Wróć do piosenek, które stworzyłeś na poprzednich poziomach. Czy możesz również skrócić ich kody?
                example_code: |
                    ```
                    {print} 'Twinkle Twinkle Little Star'
                    {repeat} 2 {times} {play} C4
                    {repeat} 2 {times} {play} G4
                    _
                    ```
            8:
                story_text: |
                    Teraz, gdy możemy użyć polecenia `{repeat}` dla wielu linii, możemy tworzyć utwory jeszcze łatwiej!

                    ### Ćwiczenie
                    Dokończ piosenkę Panie Janie. Nie zapomnij użyć `{repeat}`!
                example_code: |
                    ```
                    {print} 'Brother John'
                    {repeat} 2 {times}
                        {play} C
                        {play} D
                        {play} E
                        {play} C
                    {repeat} 2 {times}
                        {play} E
                        {play} F
                        {play} G
                        {sleep} 1
                    ```
            9:
                story_text: |
                    Na tym poziomie możesz - między innymi - użyć polecenia {repeat} w poleceniu {repeat}.
                    To sprawia, że piosenki takie jak „Sto lat” są jeszcze krótsze!

                    ### Ćwiczenie
                    Dokończ piosenkę!
                example_code: |
                    ```
                    pierwszy_raz = tak
                    {repeat} 2 {times}
                        {repeat} 2 {times}
                            {play} C
                        {play} D
                        {play} C
                        {if} pierwszy_raz  {is} tak
                            {play} F
                            {play} E
                            pierwszy_raz  {is} nie
                        {else}
                            _
                    ```
            12:
                story_text: |
                    Używaj funkcji w swoich utworach! Jak widać w przykładowym kodzie, możesz utworzyć funkcję dla każdego wiersza Twinkle Twinkle Little Star. Po zaprogramowaniu pierwszych trzech linii wystarczy wywołać funkcje w kolejności, w jakiej mają być odtwarzane.

                    ### Ćwiczenie
                    Dokończ piosenkę Twinkle Twinkle Little Star.
                    Spójrz wstecz na wszystkie utwory, które zaprogramowałeś na poprzednich poziomach. Spraw za pomocą funkcji, aby te kody były jeszcze lepsze i krótsze niż poprzednio?
                example_code: |
                    ```
                    {define} pierwsza_linijka
                        {play} C
                        {play} C
                        {play} G
                        {play} G
                        {play} A
                        {play} A
                        {play} G
                        {sleep}

                    {define} druga_linijka
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {play} D
                        {play} C
                        {sleep}

                    {define} trzecia_linijka
                        {play} G
                        {play} G
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {sleep}

                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    ```
            13:
                story_text: |
                    Możesz użyć funkcji z argumentem dla utworów, które mają linię prawie taką samą, ale za każdym razem nieco inną.
                    Jednym z przykładów jest piosenka „Yankee Doodle”'. Pierwsze 4 nuty pierwszych wierszy są takie same, ale za każdym razem następuje po nich inna para nut.

                    ### Ćwiczenie
                    Czy możesz dokończyć piosenkę Yankee Doodle?
                    Czy możesz zaprogramować w ten sam sposób inną piosenkę?
                example_code: |
                    ```
                    {print} 'Yankee Doodle'
                    {define} _ {with} nuta_1, nuta_2, nuta_3
                        {play} C4
                        {play} C4
                        {play} D4
                        {play} E4
                        {play} _
                        {play} _
                        {play} _

                    {call} linijka_1 {with} 29, 31, 30
                    {call} linijka_1 {with} 29, 28, 0
                    {call} linijka_1 {with} 32, 31, 30

                    {play} C4
                    {play} B3
                    {play} G3
                    {play} A3
                    {play} B3
                    {play} C4
                    {play} C4
                    ```
            14:
                story_text: |
                    Możesz programować muzykę dla zabawy, ale możesz także użyć nut, aby zrobić coś przydatnego, na przykład alarm przeciwpożarowy!

                    ### Ćwiczenie
                    Upewnij się, że alarm przeciwpożarowy dzwoni, gdy wybuchnie pożar!
                example_code: |
                    ```
                    {define} alarm_przeciwpożarowy
                        {print} 'Pożar!'
                        nuta = 40
                        {for} i {in} {range} 1 {to} 100
                            {if} nuta _ 50
                                nuta = nuta + 5
                                {play} _
                            {else}
                                nuta = 40

                    pożar = {ask} 'Pali się?'
                    {if} pożar _ 'tak'
                        {call} alarm_przeciwpożarowy
                    ```
            15:
                story_text: |
                    **Uwaga** Ta przygoda może stać się wyjątkowo denerwująca!
                    Możemy również użyć polecenia {while}, aby powtórzyć utwór w nieskończoność.

                    ### Ćwiczenie
                    Dokończ niekończącą się piosenkę
                example_code: |
                    ```
                    {define} piosenka
                        {play} _

                    tak_lub_nie = {ask} 'Czy chcesz usłyszeć moją niekończącą się piosenkę?'
                    {while} tak_lub_nie = 'tak'
                        {call} piosenka
                        {print} '🥳'
                    ```
            16:
                story_text: |
                    Ulepsz swój kod dla Pan MacDonald !

                    ### Ćwiczenie
                    Weź swój kod z przygody „Sing a Song” i dodaj do niego nuty!
                    Możesz utworzyć funkcję dla każdego wiersza w utworze i wywołać tę funkcję po wyświetleniu wiersza kodu.
                    Zdefiniowaliśmy dla ciebie pierwszy wiersz i wywołaliśmy go w kodzie. Czy potrafisz dokończyć całą piosenkę?
                example_code: |
                    ```
                    {define} linijka_1
                        {for} i {in} {range} 1 {to} 3
                            {play} G
                        {play} D
                        {for} i {in} {range} 1 {to} 2
                            {play} E
                        {play} D

                    zwierzęta = ['świnka', 'pies', 'krowa']
                    dźwięki = ['chrum', 'hau', 'muu']
                    for i in range 1 to 3
                        zwierzę = zwierzęta[i]
                        dźwięk = dźwięki[i]
                        print 'Pan MacDonald farmę miał'
                        call linijkę_1
                        print 'E I E I O!'
                        _
                    ```
            17:
                story_text: |
                    Możesz użyć {elif}, aby utworzyć różne opcje.

                    ### Ćwiczenie
                    Po pierwsze, dodaj dwukropki, aby kod działał.
                    Następnie dokończ ten kod, dodając co najmniej 2 inne utwory dla innych nastrojów. Na przykład szczęśliwa piosenka i wściekła piosenka.
                example_code: |
                    ```
                    {define} straszna_piosenka
                        {for} i {in} {range} 1 {to} 3
                            {play} G
                        {play} E
                        {sleep} 2
                        {for} i {in} {range} 1 {to} 3
                            {play} F
                        {play} D

                    nastrój = {ask} 'Jakie emocje odczuwasz?'
                    {if} nastrój {is} 'strach'
                        {call} straszna_piosenka
                    {elif} _
                    ```
            18:
                story_text: |
                    ### Ćwiczenie
                    Nawet na ostatnim poziomie Hedy możemy stworzyć muzykę! Uważaj na całą składnię, która jest teraz potrzebna.
                    Przyjrzyj się, jak funkcje są zdefiniowane i wywołane w przykładowym kodzie.
                    Dokończ piosenkę!
                example_code: |
                    ```
                    {def} linijka_1():
                        {for} i {in} {range}(1, 5):
                            {play} A
                        {play} D
                        {play} F
                        {play} A

                    {def} linijka_2():
                        {for} i {in} {range}(1, 5):
                            {play} G
                        {play} C
                        {play} E
                        {play} G

                    {def} linijka_3():
                    _

                    {print} ('The drunken sailor')
                    {print} ('What shall we do with the drunken sailor?')
                    linijka_1()
                    linijka_2()
                    linijka_3()
                    {print} ('Early in the morning')
                    ```
    parrot:
        name: Papuga
        default_save_name: Papuga
        description: Stwórz swoja własną cyfrową papugę która powtórzy wszystko co powiesz!
        levels:
            1:
                story_text: |
                    Stwórz swoją własną cyfrową papugę która powtórzy wszystko co powiesz!
                example_code: |
                    ```
                    {print} Jestem papuga Hedy
                    {ask} Jak masz na imię?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Skopiuj przykładowy kod na ekran wprowadzania, klikając żółty przycisk.
                    Spraw, aby papuga zadała inne pytanie. Uzupełnij puste miejsca w przykładzie!
                    **Dodatkowo** Możesz także pozwolić papudze zadawać wiele pytań. Wpisz więcej wierszy kodu pod własnym kodem.
                example_code_2: |
                    ```
                    {print} Jestem papuga Hedy
                    {ask} _
                    {echo}
                    {echo}
            2:
                story_text: |
                    Na poprzednim poziomie stworzyłeś papugę, która wszystko po tobie powtórzy. Na tym poziomie sprawimy, że papuga będzie interaktywna za pomocą zmiennej i polecenia `{ask}`.
                    Sprawimy, że papuga będzie bardziej żywa, dodając polecenia `{sleep}` po tym, jak coś zostanie powiedziane.
                example_code: |
                    ```
                    {print} Jestem papuga Hedy
                    imię _ _ Jak masz na imię?
                    {print} imię
                    _
                    {print} ara
                    _
                    {print} imię
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Po pierwsze, zakończ wiersz 2 poleceniem `{is}` i `{ask}`.
                    Następnie wypełnij polecenie `{sleep}` w wierszach 4 i 6, aby papuga pozostała przez chwilę cicho.

                    **Dodatkowo ** Czy możesz sprawić, by papuga poprosiła o więcej niż tylko twoje imię, dodając więcej wierszy kodu?
            3:
                story_text: |
                    Naucz swoją papugę nowego słowa z poleceniem `{add}`.
                    ### Ćwiczenie
                    Czy możesz dodać polecenie `{add} {to_list}` i sprawić, żeby kod zadziałał?
                example_code: |
                    ```
                    słowa {is} ara, Hedy
                    {print} Naucz twoją papugę!
                    nowe_słowo{is}{ask}Jakiego słowa chcesz ja nauczyć?
                    _ nowe_słowo _ słowa
                    {print} 🧒 Powiedz nowe_słowo , Hedy!
                    {print} 🦜 słowa {at} {random}
                    ```
            4:
                story_text: |
                    Na tym poziomie musimy użyć cudzysłowów z poleceniami `{ask}` and `{print}`.
                    ### Ćwiczenie
                    Dokończ kod poprzez dodanie cudzysłowów w pustych miejscach.
                example_code: |
                    ```
                    słowa {is} kra, Hedy
                    {print} _ Wytresuj swoją papugę! _
                    nowe_słowo {is} {ask} _ Jakie słowo chciałbyś ją nauczyć? _
                    {add} nowe_słowo {to_list} słowa
                    {print} _ 🧒 Powiedz _ nowe_słowo _, Hedy!_
                    {print} _ 🦜 _ słowa {at} {random}
                    ```
            5:
                story_text: |
                    Daj swojej papudze nagrodę jeżeli powie poprawne słowo.

                    ### Ćwiczenie
                    Dokończ kod uzupełniając 4 brakujące polecenia.
                example_code: |
                    ```
                    słowa {is} kra, Hedy
                    {print} 'Wytresuj swoją papugę!'
                    nowe_słowo {is} {ask} 'Jakie słowo chciałbyś ją nauczyć?'
                    {add} nowe_słowo {to_list} słowa
                    powiedziane_słowo {is} słowa {at} {random}
                    {print} '🧒 Powiedz ' nowe_słowo ', Hedy!'
                    {print} '🦜 ' powiedziane_słowo
                    _ powiedziane_słowo {is} nowe_słowo _ '🧒 Świetnie, Hedy! 🍪'
                    _ _ '🧒 Nie, Hedy! Powiedz ' nowe_słowo
                    ```
    piggybank:
        name: Skarbonka
        default_save_name: Skarbonka
        description: Policz swoje kieszonkowe!
        levels:
            12:
                story_text: |
                    W tej przygodzie uczysz się, jak zrobić cyfrową skarbonkę.

                    ### Ćwiczenie
                    Zakończ kod, aby obliczyć, ile masz pieniędzy i jak długo musisz oszczędzać, aby kupić to, co chcesz!
                    **Dodatkowo** Może już zaoszczędziłeś trochę pieniędzy? Odejmij to od kwoty, którą będziesz musiał zaoszczędzić.
                example_code: "```\n{print} 'Cyfrowa skarbonka'\nżyczenie = {ask} 'Co chciałbyś kupić?'\ncena = {ask} 'Ile to kosztuje?'\nzaoszczędzone = {ask} 'Ile pieniędzy już zaoszczędziłeś?'\nkieszonkowe = {ask} 'Ile kieszonkowego dostajesz na tydzień?'\ndo_zaoszczędzenia = cena - zaoszczędzone\ntygodnie = do_zaoszczędzenia / kieszonkowe \n{print} 'Możesz kupić ' _ ' za ' _ ' tygodni.'\n```\n"
            14:
                story_text: |
                    ### Ćwiczenie
                    Na tym poziomie możesz pozwolić Hedy powiedzieć, czy zaoszczędziłeś wystarczająco dużo pieniędzy!
                    Dokończ ten kod, wypełniając puste pola!
                example_code: |
                    ```
                    _ oblicz_budżet {with} pragnienie, pieniadze, kieszonkowe
                        do_zaoszczędzenia = pragnienie - pieniądze
                        tygodnie = do_zaoszczędzenia / kieszonkowe
                        {if} upragniona_kwota
                            {print} 'Musisz jeszcze trochę zaoszczędzić!'
                            {print} 'Będziesz potrzebował jeszcze ' weeks ' tygodni.'
                        {else}
                            {print} 'Świetnie! Masz wystarczająco dużo!'
                            {print} 'Chodźmy na zakupy!'

                    pieniądze = {ask} 'Ile pieniędzy zaoszczędziłeś?'
                    pragnienie = {ask} 'Ile pieniędzy potrzebujesz?'
                    kieszonkowe = {ask} 'Ile kieszonkowego dostajesz każdego tygodnia?'

                    {call} _
                    ```
    pressit:
        name: Naciśnięcia klawiszy
        default_save_name: Naciśnij
        description: Spróbuj przypisać klawisz do konkretnego polecenia!
        levels:
            5:
                story_text: |
                    Na tym poziomie pojawia się kolejne nowe polecenie: `{pressed}`!
                    Dzięki poleceniu `{pressed}` możesz użyć przycisków na swojej klawiaturze by kontrolować które linie zostaną użyte.

                    ### Ćwiczenie
                    Spójrz na przykładowy kod i dodaj jeszcze jedną linię , która reaguje na naciśnięcie przycisku.
                example_code: |
                    ```
                    {print} 'Wolisz dobre (d) czy złe (z) zakończenie?'
                    {if} d {is} {pressed} {print} 'I żyli długo i szczęśliwie ❤'
                    {else} {print} 'Książę został zjedzony przez hipopotama 😭'
                    ```
                story_text_2: |
                    Możesz również przypisać polecenia żółwia do klawiszy.

                    ### Ćwiczenie
                    Skopiuj linie kilka razy by móc stworzyć większy rysunek.
                example_code_2: |
                    ```
                    {if} y {is} {pressed} {forward} 15
                    {else} {turn} 90
                    ```
            7:
                story_text: |
                    Teraz, gdy dowiedziałeś się o `{repeat}`, możemy naciskać klawisze wiele razy.
                    Możesz ich użyć, aby żółw szedł naprzód i obracał się.

                    ### Ćwiczenie
                    Kod, który widziałeś na poziomie 5, sprawdza klawisz tylko raz. Skopiuj przykładowy kod i dodaj do niego `{repeat}`, aby można było wielokrotnie naciskać klawisze.
                    Użyj tego kodu, aby narysować coś ładnego.
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
            9:
                story_text: |
                    Teraz, gdy wiesz, jak łączyć instrukcje, możesz utworzyć narzędzie typu dotykowego za pomocą `{pressed}`.

                    ### Ćwiczenie
                    Dokończ kod. Za każdym razem należy wybrać losową literę, którą należy nacisnąć. Dostajesz punkt za poprawną naciśnięcie i odliczenie dwóch punktów za niewłaściwą prasę.
                    **Dodatkowo ** Wyczyść ekran po każdej literze i pokaż użytkownikowi, ile punktów zdobył.
                example_code: "```\npunkty = 0\nlitery = a, b, c, d, e\n{repeat} 10 {times}\n    litera = _ _ _\n    {print} 'Naciśnij literę ' litera\n    {if} litera {is} {pressed}\n    _\n    _\n    _\n```\n"
    print_command:
        name: '{print}'
        default_save_name: print
        description: Wprowadzenie polecenia print
        levels:
            1:
                story_text: |
                    ## Komenda print
                    Możesz wypisać tekst na ekran używając komendy `{print}`.
                example_code: |
                    ```
                    {print} Cześć, programisto!
                    {print} Witamy w Hedy!
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    W Hedy znajdziesz ćwiczenia w każdej przygodzie. Ćwiczenie pozwala ćwiczyć nowe polecenia i pojęcia oraz pozwala nadać własny zwrot przykładowym kodom.
                    W tym ćwiczeniu zobaczysz różowe puste miejsce. Musisz wypełnić coś w miejscu pustego miejsca, zanim kod będzie mógł zostać uruchomiony.

                    Wypełnij polecenie `{print}` w pustym miejscu, a następnie dodaj jeszcze pięć wierszy kodu. Każda linia musi zaczynać się od polecenia `{print}`.
                    Miłej zabawy!
                example_code_2: |
                    ```
                    _ Cześć!
                    ```
            18:
                story_text: |-
                    Dotarliśmy do prawdziwego kodu Pythona! Oznacza to, że musimy odtąd używać nawiasów z komendami`{print}` i`{range}`.
                    Oznacza to również, że możesz używać kodu Hedy z tego poziomu w dowolnym środowisku Pythona, o ile używasz angielskich poleceń. Jeśli do tej pory tego nie zrobiłeś, to możesz nacisnąć przełącznik w menu poleceń, aby to zrobić.
                example_code: |
                    ```
                    {print}('Witaj!')
                    {for} i {in} {range}(1, 10):
                        {print}('To jest linia ', i)
                    ```
                story_text_2: Jeśli chcesz wyświetlić więcej niż jeden element, to musisz je rozdzielić przecinkami.
                example_code_2: |
                    ```
                    temperatura = 25
                    {print}('Na zewnątrz jest ', temperatura, ' stopni')
                    ```
                    ```
                    imię = 'Hedy'
                    {print}('Mam na imię ', imię)
                    ```
    quizmaster:
        name: Mistrz Quizu
        default_save_name: Mistrz Quizu
        description: Stwórz własny quiz!
        levels:
            14:
                story_text: |
                    ### Ćwiczenie
                    W tej przygodzie możesz stworzyć własny quiz! Wypełnij puste pola, dodaj więcej pytań i ciesz się własnym quizem!
                    Możesz zrobić quiz o wszystkim, co lubisz: swoim hobby, ulubionym zwierzęciu, ulubionej książce lub w ogóle o czymkolwiek!
                example_code: |
                    ```
                    {print} 'Stwórz swój własny quiz'
                    punkty_a = 0
                    punkty_b = 0
                    {print} 'Pytanie'
                    {print} 'Odpowiedź opcja A'
                    {print} 'Odpowiedź opcja B'
                    odpowiedź = {ask} 'Która odpowiedź?'
                    {if} odpowiedź == 'A'
                        punkty_a = points_a + 1
                    {if} odpowiedź == 'B'
                        punkty_b = punkty_b + 1
                    {print} 'Koniec quizu!'
                    {print} 'Sprawdźmy wynik!'
                    {if} punkty_a > punkty_b
                        {print} 'Należysz do klubu A'
                    {if} punkty_b >punkty_a
                        {print} 'Należysz do klubu B'
                    ```
    quotation_marks:
        name: '''Cudzysłowy'''
        default_save_name: cudzysłowy
        description: Wprowadzenie cudzysłowów
        levels:
            4:
                story_text: |
                    ## Cudzysłowy
                    Na poziomie 4 `{ask}` i `{print}` zmieniły się.
                    Musisz umieścić w cudzysłowach tekst, który chcesz wyświetlić.
                    Jest to przydatne, ponieważ teraz możesz wyświetlić na ekranie wszystkie słowa, które chcesz. Również słowa, których użyłeś, aby przechować coś za pomocą `{is}`.
                    Większość języków programowania również używa cudzysłowów podczas wyświetlania tekstu, a więc jesteśmy o jeden krok bliżej prawdziwego programowania!
                example_code: |
                    ```
                    {print} 'Od teraz musimy używać cudzysłowów!'
                    odpowiedź {is} {ask} 'Czego musimy używać?'
                    {print} 'Musimy używać ' odpowiedź
                    ```
                story_text_2: |
                    ## Skrótowce
                    Ważne! Pamiętaj, że teraz, gdy używamy cudzysłowów, Hedy będzie zdezorientowana, gdy użyjesz apostrofu do pisowni skrótowców I'm lub What's.
                    Usuń te apostrofy i zmień pisownię na I am lub What is.
                    Sprawdź przykładowy kod, aby zobaczyć niewłaściwy sposób korzystania z apostrofów.
                example_code_2: |
                    ```
                    _ To niewłaściwy sposób używania apostrofów _
                    {print} 'I'm babysitting my sister's kids'
                    {print} 'What's more fun than that?'
                    ```
            12:
                story_text: |
                    **Wszystkie teksty muszą znajdować się w cudzysłowie**
                    Dla tego poziomu będziesz musiał również użyć cudzysłowu podczas przechowywania tekstu za pomocą `=`:
                example_code: |
                    ```
                    imię = 'Robot Hedy'
                    {print} 'Witaj ' imię
                    ```
                story_text_2: |
                    **Wszystkie pozycje na listach również wymagają cudzysłowu**
                    Listy są tekstami, więc potrzebują też cudzysłowów. Pamiętaj, że każdy element na liście ma cudzysłowy.
                    Pozwala to zapisać dwa słowa jako 1 element na liście, na przykład „Czarna Wdowa”'.
                example_code_2: |
                    ```
                    superbohaterowie = 'Spiderman', 'Batman', 'Black Widow'
                    {print} superbohaterowie  {at} {random}
                    ```
                story_text_3: |
                    **Cały tekst po porównaniach `{if}` również wymaga cudzysłowu**
                example_code_3: |
                    ```
                    imię = {ask} 'Jak masz na imię?'
                    {if} name = 'Robot Hedy'
                        {print} 'Witaj!'
                    ```
                story_text_4: |
                    **Liczby nie potrzebują cudzysłowu**
                    W przypadku liczb nie używasz cudzysłowu w `=`:
                example_code_4: |
                    ```
                    wynik = 25
                    {print} 'Zdobyłeś ' wynik
                    ```
    random_command:
        name: '{random}'
        default_save_name: Komenda pozycja losowa
        description: Przedstawienie komendy pozycja losowa
        levels:
            3:
                story_text: |
                    ## Pozycja losowa
                    Na tym poziomie możesz utworzyć listę za pomocą polecenia `{is}`. Możesz pozwolić komputerowi wybrać losowy element z tej listy. Możesz to zrobić za pomocą `{at} {random}`.
                example_code: |
                    ```
                    zwierzęta {is} psy, koty, kangury
                    {print} zwierzęta {at} {random}
                    ```
                story_text_2: |
                    Możesz też użyć komendy `{at} {random}` w zdaniu.
                example_code_2: |
                    ```
                    jedzenie {is} kanapka, kawałek pizzy, burrito
                    {print} Dzisiaj na obiad jedzenie {at} {random} na lunch
                    ```
                story_text_3: |
                    ### Ćwiczenie
                    Wypróbuj komendę `{at} {random}` poprzez zrobienie własnego teleturnieju (jak w telewizji), w którym wybierasz drzwi albo walizkę i ona zawiera wielką nagrodę!
                    Czy uda Ci się to? Pierwsze linie kodu już są wypełnione.
                example_code_3: |
                    ```
                    {print} Wielki teleturniej!
                    {print} Przed Tobą 3 walizki...
                    wybór {is} {ask} Którą walizkę wybierasz?
                    nagroda {is} _
                    _
                    ```
            16:
                story_text: |-
                    Będziemy tworzyć listy po Pythonie, z nawiasami kwadratowymi wokół list! Również używamy znaku cudzysłowu wokół każdego elementu, jak nauczyliśmy się na poprzednich poziomach.
                    Używamy nawiasów kwadratowych, aby wskazać miejsce na liście. Na przykład: `friends[1]` to imię na liście znajomych, jak widać w pierwszej części przykładowego kodu.
                    Druga część przykładowego kodu pokazuje, że możemy również dopasować 2 listy za pomocą zmiennej i.
                example_code: |
                    ```
                    przyjaciele = ['Ahmed', 'Ben', 'Cayden']
                    {print} przyjaciele[1] ' jest pierwszym przyjacielem na liście.'
                    {print} przyjaciele[2] ' jest drugim przyjacielem na liście.'
                    {print} przyjaciele[3] ' jest trzecim przyjacielem na liście.'
                    #teraz dopasujemy 2 listy za pomocą zmiennej i
                    szczęśliwe_liczby = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} przyjaciele[i] 's szczęśliwy numer to ' szczęśliwe_liczby[i]
                    ```
                story_text_2: |-
                    Teraz, gdy nauczyłeś się używać nawiasów na listach, możesz także zacząć używać polecenia {at}{random} w Pythonie!
                    Po prostu wpisz nazwę swojej listy z `[random]` za nią!
                example_code_2: |-
                    ```
                    owoc = ['jabłko', 'banan', 'wiśnia']
                    {print} owoc[random]
                    ```
    repeat_command:
        name: '{repeat}'
        default_save_name: polecenie_repeat
        description: polecenie {repeat}
        levels:
            7:
                story_text: |
                    ## Repeat! Repeat! Repeat!
                    Poziom 7 dodaje polecenie `{repeat}`. `{repeat}` można użyć do wielokrotnego wykonania jednego wiersza kodu. w ten sposób:

                    ### Ćwiczenie
                    Poćwicz z poleceniem`{repeat}`. Czy możesz teraz zrobić piosenkę z okazji urodzin w zaledwie 3 wierszach kodu zamiast 4?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy jest zabawny!'
                    ```
            8:
                story_text: |
                    ### Polecenia repeat i wcięcia
                    Na tym poziomie możesz powtórzyć wiele wierszy kodu za pomocą tylko 1 polecenia repeat.
                    Robisz to, tworząc blok linii, który chcesz powtórzyć.
                    Linie w tym bloku będą wymagały ** wcięcia** .
                    Oznacza to umieszczenie czterech spacji na początku każdej linii. Będziesz także musiał użyć wcięć, gdy chcesz tylko utworzyć blok jednej linii.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Witam wszystkich'
                        {print} 'Wszystko to powtarza się 5 razy'
                    ```
            9:
                story_text: |
                    Świetna robota! Osiągnąłeś kolejny nowy poziom! Na poprzednim poziomie nauczyłeś się używać wielu wierszy kodu w poleceniu `{if}`lub `{repeat}`. 
                    Ale nie możesz jeszcze ich połączyć...

                    Dobre wieści! Na tym poziomie będziesz mógł umieścić `{if}` w `{if}`, `{repeat}` wewnątrz`{repeat}` .
                    Wypróbuj!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        zamówienie = {ask} 'Co chciałbyś zamówić?'
                        {if} zamówienie {is} pizza
                            {print} 'Yammie'
                        {else}
                            {print} 'pizza jest lepsza!'
                    ```
    repeat_command_2:
        name: '{repeat} 2'
        default_save_name: Polecenie_repeat_2
        description: polecenie {repeat} 2
        levels:
            7:
                story_text: |
                    ## Repeat with other commands and with variables
                    You have practiced the `{repeat}` command in combination with the `{print}` command now, but did you know you could also use other commands with `{repeat}` ?
                    In this example code you can see that `{repeat}` can also be used with an `{ask}`, `{if}` or `{else}` command.
                example_code: |
                    ```
                    {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                    {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                    {else} {repeat} 3 {times} {print} 'You have learned something new!'
                    ```
                story_text_2: |
                    Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.
                    Then, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.
                example_code_2: |
                    ```
                    {print} 'Yay! It is your birthday!'
                    age = {ask} 'How old are you now?'
                    {repeat} age {times} {print} 'Hip Hip Hurray!'
                    ```
            8:
                story_text: |
                    ### In the block or not?
                    In this level you have to think carefully which lines of code should be in the block and which shouldn't.
                    For example: If you want to sing the song *the muffin man*. You only want the line with 'the muffin man' to be repeated twice.
                    This means the last line shouldn't start with indentation as it doesn't belong to the block.
                    If you do start the last line with indentation the song will turn out wrong.

                    ## Ćwiczenie
                    Each line in the example code starts with a blank. Remove the blanks and try to figure out which line need indentation and which don't to make the muffin man song.
                example_code: |
                    ```
                    _ {print} 'Do you know the muffin man?'
                    _ {repeat} 2 {times}
                    _ {print} 'The muffin man'
                    _ {print} 'Do you know the muffin man, who lives on Drury Lane?'
                    ```
    restaurant:
        name: Restauracja
        default_save_name: Restauracja
        description: Stwórz swoją własną wirtualną restaurację
        levels:
            1:
                story_text: |
                    Na poziomie 1 możesz stworzyć swoją własną wirtualną restaurację i przyjmować zamówienia gości.
                story_text_2: |
                    ### Ćwiczenie
                    Skopiuj przykładowy kod na ekran wejściowy, klikając żółty przycisk.
                    Najpierw wpisz w puste miejsca właściwe polecenia, aby kod działał poprawnie.
                    Następnie dodaj co najmniej 4 kolejne linie kodu do programu restauracji.
                    Zapytaj klienta, co chciałby wypić i czy chce zapłacić gotówką, czy kartą.
                    Na koniec wymyśl jakiś miły sposób pożegnania się z klientem.
                example_code_2: "``` \n{print} Witaj w restauracji Hedy 🍟\n_ Co chcesz zamówić?\n {echo} A więc chcesz zamówić\n{print} Dziękuje za zamówienie!\n{print} Zaraz podamy!\n```\n"
            2:
                story_text: |
                    Na poziomie 2 możesz rozbudować swoją restaurację za pomocą zmiennych. Na poziomie 1 Hedy mogła wyświetlić {echo} zamówienie tylko raz i pamiętała tylko ostatnią zamówioną rzecz.
                    Teraz możesz używać zmiennych, a Hedy może zapamiętać zarówno co zamówiłeś do jedzenie, jak i do picia!
                example_code: |
                    ```
                    {print} Witamy w restauracji Hedy!
                    {print} Dziś serwujemy pizzę lub lasagne.
                    jedzenie {is} {ask} Co chciałbyś zjeść?
                    {print} Świetny wybór! Uwielbiam jedzenie!
                    dodatki {is} {ask} Chciałbyś do tego mięso czy warzywa?
                    {print} Juz przygotowuje jedzenie z dodatki!
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Skopiuj swój własny kod restauracji z poprzedniego poziomu do ekranu wejściowego poniżej.
                    Popraw kod zastępując komendy `{ask}` i `{echo}` i używając zmiennych, tak jak nauczyłeś się w tym poziomie.

                    Teraz gdy Twój kod znów działa, czas dodać coś jeszcze.
                    Spójrz na ostatnią linię przykładowego kodu: `{print} jedzenie z polewa jest w drodze!`.
                    W tej jednej linii zostały użyte 2 zmienne do stworzenia podsumowania zamówienia.
                    Teraz dodaj własne podsumowanie zamówionego przez klienta jedzenia i napojów.

                    **Dodatkowo** Teraz gdy nauczyłeś się używać zmiennych, możesz użyć tylu zmiennych w jednej linii, ile tylko zechcesz. Czy możesz dodać więcej zmiennych do swojego kodu, jak np. zjeść w lokalu lub na wynos, gotówką lub kartą, ze słomką lub bez itp?
            3:
                story_text: |
                    Masz problem z podjęciem decyzji, co chcesz zjeść na obiad? Możesz pozwolić Hedy wybrać za Ciebie!
                    Po prostu dodaj listę swoich ulubionych (lub najmniej ulubionych) potraw, a Hedy może losowo wybrać Twój obiad.
                    Możesz się też trochę zabawić, pozwalając Hedy wybrać także cenę za Twój obiad! Co dostaniesz?
                example_code: |
                    ```
                    dania {is} spaghetti, brukselka, hamburgery
                    {print} Dziś wieczorem będziesz miał dania {at} {random}!
                    ceny {is} 1 złoty, 10 złotych, 100 złotych
                    {print} To będzie ceny {at} {random} proszę.
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Teraz stwórz własną wersję losowej restauracji.
                    Zrób sam listę przystawek, dań głównych, deserów, napojów i cen.
                    Następnie użyj komend `{print}` i `{at} {random}`, aby powiedzieć klientowi, co będzie w jego menu dziś wieczorem.
                example_code_2: |
                    ```
                    {print} Witaj w swojej własnej, losowej restauracji!
                    przystawki {is} _
                    dania główne {is} _
                    desery {is} _
                    napoje {is} _
                    ceny {is} _
                    _
                    ```
            4:
                story_text: |
                    ### Exercise
                    Add the quotation marks to this code to make it work! Be careful: variables should not be in quotation marks.
                    Then, use the `{clear}` command to only show one line at a time in your output screen.

                    ### Exercise 2
                    Go back to the previous level and copy your restaurant code. Make the code work in this level by adding quotation marks in the right spots and add some `{clear}` commands.
                example_code: |
                    ```
                    _ Dodaj cudzysłów do tego kodu _
                    {print} Witamy w restauracji Chez Hedy!
                    {print} Dzisiaj serwujemy pizzę lub lasagnę.
                    jedzenie {is} {ask} Co chciałbyś zjeść?
                    {print} Świetny wybór! Uwielbiam jedzenie!
                    polewa {is} {ask} Czy chciałbyś na tym mięso lub warzywa?
                    {print} jedzenie z polewa jest w drodze!
                    napoje {is} {ask} Co chciałbyś do tego wypić?
                    {print} Dziękujemy za zamówienie.
                    {print} Twoje jedzenie i napoje będą na miejscu!
                    ```
            5:
                story_text: |
                    Na tym poziomie polecenie `{if}` pozwala Ci na `{ask}` (zapytanie) klientów i udzielanie różnych odpowiedzi.
                    W poniższym przykładzie widać, że można `{ask}` klienta `{if}` chce usłyszeć specjały, a Hedy może odpowiednio odpowiedzieć.
                example_code: |
                    ```
                    {print} 'Witamy w restauracji Chez Hedy!'
                    specjał {is} {ask} 'Czy chciałbyś usłyszeć nasze dzisiejsze specjały?'
                    {if} specjał {is} tak {print} 'Dzisiaj specjalnością jest kurczak piri piri i ryż.' {else} {print} 'Nie ma problemu.'
                    jedzenie {is} {ask} 'Co chciałbyś zjeść?'
                    {print} 'Jedno ' jedzenie ', zaraz się pojawi!'
                    napój {is} {ask} 'Co chciałbyś do tego pić?'
                    {if} napój {is} cola {print} 'Przepraszam, skończyła nam się cola!' {else} {print} 'Świetny wybór!'
                    cokolwiek {is} {ask} 'Czy chciałbyś coś jeszcze?'
                    {print} 'Pozwól, że powtórzę twoje zamówienie…'
                    {print} 'Jedno ' jedzenie
                    {if} napój {is} cola {print} 'i…' {else} {print} 'jeden ' napój
                    {if} cokolwiek {is} nie {print} 'To wszystko!' {else} {print} 'jeden ' cokolwiek
                    {print} 'Dziękujemy za zamówienie i smacznego!'
                    ```
            6:
                story_text: |
                    Na tym poziomie możesz użyć matematyki do obliczenia całkowitej ceny zamówienia klienta, co może sprawić, że Twoja wirtualna restauracja będzie bardziej realistyczna.
                example_code: |
                    Możesz utworzyć prosty kod restauracji, taki jak ten:
                    ```
                    {print} 'Witamy w restauracji Chez Hedy'
                    {print} 'Oto nasze menu:'
                    {print} 'Nasze dania główne to pizza, lasagne lub spaghetti'
                    główne = {ask} 'Które danie główne chcesz?'
                    cena = 0
                    {if} główne {is} pizza cena = 10
                    {if} główne {is} lasagne cena = 12
                    {if} główne {is} spaghetti cena = 8
                    {print} 'Zamówiłeś ' główne
                    {print} 'To będzie ' cena ' złotych.'
                    {print} 'Dziękuję, smacznego!'
                    ```
            7:
                story_text: |
                    Na tym poziomie nauczyłeś się używać polecenia `{repeat}` do powtórzenia linii kodu określoną ilość razy.
                    Możesz użyć tego w swojej restauracji do `{ask}` wielu osób, co chcą zjeść.

                    ### Ćwiczenie
                    Czy możesz uzupełnić kod? Hedy musi powtarzać to pytanie tyle razy, ilu jest ludzi. Więc jeśli jest 5 osób, pytanie należy zadać 5 razy.
                    **Dodatkowo** Rozszerz swój kod o więcej pytań, na przykład o napoje lub sos.
                example_code: |
                    ```
                    {print} 'Witamy w restauracji Chez Hedy'
                    osoby = {ask} 'Ile osób dzisiaj do nas dołącza?'
                    ```
            8:
                story_text: |
                    Na tym poziomie możesz rozbudować swoją wirtualną restaurację, powtarzając wiele linii kodu. W ten sposób:

                    ### Ćwiczenie
                    Ten kod można rozszerzyć o więcej pozycji w menu, na przykład oferując napoje i/lub wiele dań, lub deserów. Dodaj jeszcze co najmniej jeden element.
                    **Dodatkowo** Dodaj jeszcze więcej elementów, tyle opcji, ile chcesz!
                example_code: |
                    ```
                    {print} 'Witamy w Restauracji Chez Hedy!'
                    osoby = {ask} 'Ile osób dzisiaj do nas dołączy?'
                    {print} 'Świetnie!'
                    {repeat} osoby {times}
                        jedzenie = {ask} 'Co chcieliby Państwo zamówić?'
                        {print} jedzenie
                    {print} 'Dziękuję za zamówienie!'
                    {print} 'Smacznego!'
                    ```
            9:
                story_text: "Na tym poziomie możesz użyć wcięć, aby Twoja restauracja była bardziej realistyczna i zabawniejsza!\n\n### Ćwiczenie\nWcięcie zostało usunięte z przykładowego kodu.\nCzy potrafisz określić, ile wcięć potrzebuje każda linia, aby kod działał poprawnie?\nJeśli klient zamawia pizzę, Hedy nie powinna pytać, jakiego sosu chce klient.\n\n**Dodatkowo** Restauracja nie posiada wszystkich sosów. Sporządź listę dostępnych sosów i przy każdym zamówieniu napisz, czy je sprzedajesz. <br>\n**Dodatkowo** Pizze mają dodatki. Zapytaj klientów, czego chcą.<br>\n**Dodatkowo** Czy klienci chcą drinka? Zapytaj ich też! <br>                    \n"
                example_code: "```\n{print} 'Witamy w Restauracji Chez Hedy!'\nosoby = {ask} 'Ile osób dzisiaj do nas dołączy?'\n{print} 'Świetnie!'\ncena = 0\n{repeat} osoby {times}\n_ jedzenie = {ask} 'Co chciałbyś zamówić?'\n_ {print} jedzenie \n_ {if} jedzenie {is} frytki\n_ cena = cena + 3\n_ sos = {ask} 'Jaki sos chciałbyś mieć do swoich frytek?'\n_ {if} sos {is} nie\n_ {print} 'bez sosu'\n _ {else}\n_ cena = cena + 1\n_ {print} 'z ' sos\n_ {if} jedzenie {is} pizza\n _ cena = cena + 4\n{print} 'To będzie ' cena ' złotych.'\n{print} 'Smacznego!'\n```\n"
            10:
                story_text: |
                    Na tym poziomie nauczysz się, jak łatwo pytać o zamówienia na różne dania.

                    ### Ćwiczenie 1
                    Zakończ kod za pomocą `{ask}` w pustych miejscach, tak aby klient był pytany, co chce zjeść w ramach każdego dania.
                example_code: "```\ndania = przystawka, danie główne, deser\n{for} danie {in} dania \n    {print} 'Jakie jest Państwa zamówienie na ' danie '?'\n    _ \n    _\n```\n"
                story_text_2: |
                    ### Ćwiczenie
                    Oczywiście można też zamówić dla wielu osób!
                    Czy możesz dodać odpowiednią ilość wcięć przed każdą linią, aby kod działał poprawnie?
                    Wskazówka: niektóre wiersze w ogóle nie wymagają wcięcia.
                example_code_2: "```\n_ dania = przystawka, danie główne, deser\n_ imiona = Szymon, Anna\n_ {for} imię {in} imiona \n_ {for} danie {in} dania \n_ jedzenie = {ask} imię ', co chcesz zjeść jako swoje ' danie '?'\n_ {print} imię ' zamawia ' jedzenie ' jako ich ' danie\n```\n"
            11:
                story_text: |
                    Możemy użyć `{for}` z `{range}` do wypisania zamówień od wielu klientów w uporządkowany sposób.

                    ### Ćwiczenie
                    Dokończ kod restauracji, aby móc poprosić o zamówienie wielu osób. Za każdym razem drukuj numer zamówienia: 'Zamówienie 1', 'Zamówienie 2' itd.
                    Nie jesteś pewien, jak się do tego zabrać? Zerknij na swój kod poziomu 8.

                    **Dodatkowo** Na poziomie 9 restauracja stosowała również ceny. Tutaj też możesz to dodać!
                example_code: |
                    ```
                    {print} 'Witamy w Restauracji Hedy!'
                    osoby = {ask} 'Dla ilu osób chciałbyś zamówić?'
                    {print} 'Więc chcesz zamówić dla ' osoby ' osób.'
                    {print} 'Chodźmy!'
                    ```
            12:
                story_text: |
                    Od tego poziomu możesz używać liczb dziesiętnych, aby menu było bardziej realistyczne.

                    ### Ćwiczenie
                    Czy możesz wymyślić kod, aby dać znajomym i rodzinie 15% zniżki?
                example_code: |
                    ```
                    price = 0
                    food = {ask} 'What would you like to order?'
                    drink = {ask} 'What would you like to drink?'
                    {if} food {is} 'hamburger'
                        price = price + 6.50
                    {if} food {is} 'pizza'
                        price = price + 5.75
                    {if} drink {is} 'water'
                        price = price + 1.20
                    {if} drink {is} 'soda'
                        price = price + 2.35
                    {print} 'That will be ' price ' dollar, please'
                    ```
            13:
                story_text: |
                    Na tym poziomie możemy wykorzystać nowe komendy do ulepszenia naszej restauracji.
                    Używamy `{and}`, aby zobaczyć {if} dwie rzeczy są w obu przypadkach.
                example_code: |
                    ```
                    price = 10
                    food = {ask} 'What would you like to eat?'
                    drinks = {ask} 'What would you like to drink?'
                    {if} food {is} 'sandwich' {and} drinks {is} 'juice'
                        {print} 'Thats our discount menu'
                        price = price - 3
                    {print} 'That will be ' price ' dollars'
                    ```
            15:
                story_text: |
                    Dzięki `{while}` możesz mieć pewność, że Twoi klienci będą mogli dodawać zamówienia, dopóki ich nie skończą.
                    ### Exercise
                    Correctly add the `{while}` command to this code.
                example_code: "```\n{print} 'Witamy w McHedy'\nwięcej = 'tak'\n_\n    zamówienie = {ask} 'Co chcesz zamówić?'\n    {print} zamówienie \n    więcej = {ask} 'Czy chciałby Pan/Pani zamówić coś jeszcze?'\n{print} 'Dziękuję!'\n```\n"
    rock:
        name: Papier, kamień, nożyce
        default_save_name: Kamień
        description: Zrób własną grę w papier, kamień, nożyce
        levels:
            1:
                story_text: |
                    Na poziomie 1 możesz zacząć tworzyć grę papier, kamień, nożyce.

                    Za pomocą  `{ask}` możesz zapytać a za pomocą `{echo}` możesz powtórzyć co zostało wybrane.
                example_code: |
                    ```
                    {print} Co wybierasz?
                    {ask} wybierz: papier, kamień lub nożyce
                    {echo} a więc wybrałeś:
                    ```
                story_text_2: |
                    ### Wyzwanie
                    Zamiast używać słów, możesz również użyć emotikonów: ✊✋✌
                    Czy możesz poprawić kod, aby używać emotikonów?
                example_code_2: |
                    ```
                    {print} co wybierasz?
                    {ask} wybierz z _
                    {echo} a więć wybrałeś:
                    ```
            2:
                story_text: |
                    Na tym poziomie możesz poćwiczyć używanie zmiennych, dzięki będziesz mógł stworzyć grę w papier, kamień, nożyce w następnym poziomie!
                example_code: |
                    ```
                    _ {is} {ask} papier, kamień czy nożyce?
                    {print} Ja wybrałam _
                    ```
            3:
                story_text: |
                    Na tym poziomie możemy wprowadzać listy i wybierać z nich rzeczy.
                    Najpierw tworzysz listę za pomocą `{is}`. Następnie możesz pozwolić komputerowi wybrać coś z listy za pomocą `{at} {random}`.
                    Na przykład, możesz pozwolić komputerowi wybrać z listy papier, kamień lub nożyce.
                example_code: |
                    ```
                    możliwości {is} papier, kamień, nożyce
                    {print} możliwości  {at} {random}
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Skopiuj przykładowy kod i wypełnij puste pola, aby dodać dodatkowego gracza do tej gry.

                    **Dodatkowo** Teraz gracze nazywają się po prostu gracz 1 i gracz 2. Czy możesz dodać polecenia pytania (oczywiście ze zmiennymi), aby zapytać graczy o imiona?
                    W ten sposób możesz stworzyć taki wynik, na przykład: Jacek wybiera... papier
                example_code_2: |
                    ```
                    możliwości {is} papier, kamień, nożyce
                    {print} gracz 1 wybiera... możliwości  {at} {random}
                    {print} gracz 2 _
                    ```
            4:
                story_text: |
                    Na tym poziomie możemy dodatkowo zaprogramować kamień, papier, nożyce. Jeśli chcesz dodać tekst, tutaj również musisz użyć cudzysłowów.

                    ### Ćwiczenie
                    Fill in quotation marks on the blanks. Mind that the variable `choices` should be outside the quotes.
                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} _The computer chooses..._ choices {at} {random}
                    ```
            5:
                story_text: |
                    Na tym poziomie możemy ustalić, kto wygrał.
                    Do tego potrzebny jest nowy kod `{if}`.

                    Zapisz swój wybór pod wybraną nazwą i wybór komputera jako wybór komputera.
                    Następnie możesz użyć `{if}`, aby sprawdzić, czy są takie same, czy różne.
                    Dokończysz kod?
                example_code: |
                    ```
                    options {is} rock, paper, scissors
                    computer_choice {is} _
                    choice {is} {ask} 'What do you choose?'
                    {print} 'you chose ' _
                    {print} 'computer chose ' _
                    {if} _ {is} _ {print} 'tie!' {else} {print} 'no tie'
                    ```

                    Fill in the correct code on the blanks to see {if} it is a draw.
            9:
                story_text: "W tym poziomie można zaprogramować całą grę kamień, papier, nożyce poprzez zagnieżdżanie poleceń `{if}`. \n\n### Ćwiczenie\nCzy potrafisz dokończyć kod? Program musi powiedzieć, kto wygrał dla każdej kombinacji.\n\n**Dodatkowo** Chcesz zagrać w więcej niż jedną grę? Rozwiń kod tak, aby można było rozegrać wiele rund. Możesz nawet użyć `{ask}`, aby zapytać użytkownika, ile rund chce zagrać.\n"
                example_code: "```\nopcje = papier, kamień, nożyce\ntwój_wybór = {ask} 'Co wybierasz?'\n{print} 'Wybrałeś ' twój_wybór \nwybór_komputera = opcje {at} {random}\n{print} 'Komputer wybrał ' wybór_komputera \n{if} wybór_komputera {is} twój_wybór \n    {print} 'remis'\n{if} wybór_komputera {is} kamień\n    {if} twój_wybór  {is} papier\n        {print} 'Wygrałeś!'\n    {if} twój_wybór  {is} nożyce\n        {print} 'Przegrałeś!'\n#dokończ program\n```\n"
            10:
                story_text: |
                    Czujesz się zbyt leniwy, by samemu zagrać w grę? Pozwól Hedy zagrać w nią za Ciebie!
                    Wystarczy, że wypełnisz imiona graczy, a oni dostaną losowy wybór.

                    ### Ćwiczenie 1
                    Zakończ program, wypełniając listę nazwisk.

                    ### Ćwiczenie 2
                    Dodaj gracza komputerowego, który wybiera z każdym graczem.

                    **Dodatkowo** Wróć do swojego kodu i zdecyduj, kto wygrywa w każdej rundzie: komputer czy wymieniona osoba.
                example_code: |
                    ```
                    wybory = kamień, papier, nożyce
                    gracze = _
                    {for} gracz {in} gracze
                         {print} gracz ' wybiera ' wybory {at} {random}
                    ```
            13:
                story_text: |
                    Dzięki poleceniu `{and}` możesz skrócić swój kod kamień, papier, nożyce! Sprawdź poniższy przykładowy kod i spróbuj go dokończyć.
                example_code: |
                    ```
                    opcje = 'kamień', 'papier', 'nożyczki'
                    twój_wybór = {ask} 'Co wybierasz?'
                    wybór_komputera = opcje {at} {random}
                    {print} 'Ty wybrałeś ' twój_wybór
                    {print} 'Komputer wybrał ' wybór_komputera
                    {if} wybór_komputera {is} twój_wybór
                        {print} 'Remis'
                    {if} wybór_komputera {is} 'kamień' {and} twój_wybór {is} 'papier'
                        {print} 'Ty wygrałeś!'
                    {if} wybór_komputera {is} 'kamień' {and} twój_wybór {is} 'nożyczki'
                        {print} 'Komputer wygrał!'
                    _
                    ```
            15:
                story_text: |
                    ### Ćwiczenie
                    Graj, aż pokonasz komputer! Najpierw dokończ przykładowy kod...
                example_code: "```\nwygrana = 'nie'\nwybory = 'kamień', 'papier', 'nożyce'\n {while} wygrana == 'nie'\n    twój_wybór = {ask} 'Co wybierasz?'\n    wybór_komputera = wybory {at} {random}\n    {print} 'Ty wybrałeś' twój_wybór \n    {print} 'komputer wybrał ' wybór_komputera\n    {if}  wybór_komputera == twój_wybór\n        {print} 'Remis!'\n    {if} wybór_komputera == 'kamień' {and} twój_wybór == 'nożyce'\n        {print} 'Przegrywasz!'\n    {if} wybór_komputera == 'kamień' {and} twój_wybór == 'papier'\n        {print} 'Wygrywasz!'\n        wygrana = 'tak'\n_\n```\n"
    rock_2:
        name: Papier, kamień, nożyce 2
        default_save_name: Kamień_2
        description: Część 2 papier, kamień, nożyce
        levels:
            2:
                story_text: |
                    Znając komendę `{ask}` możemy uczynić naszą grę w papier, kamień, nożyce interaktywną!

                    ### Ćwiczenie
                    Uczyń grę w papier, kamień, nożyce interkatywną dodając komendę `{ask}` wraz z pytaniem.
                example_code: |
                    ```
                    wybór {is} _
                    {print} Wybrałam wybór
                    ```
    secret:
        name: Super Szpieg
        default_save_name: language
        description: Stwórz swój kod szpiegowski
        levels:
            12:
                story_text: |
                    W tej przygodzie możesz stworzyć swój własny kod superszpiegowski. Zaszyfruj wiadomość, którą może rozszyfrować tylko właściwy agent.
                    Jeśli wróg spróbuje złamać kod, otrzyma fałszywe informacje, aby zmarnować swój czas.

                    ### Ćwiczenie
                    Utwórz własny tajny kod dla swojego superszpiega. Czy możesz sprawić, by składał się z jeszcze większej liczby zmiennych?
                example_code: |
                    ```
                    imię = {ask} 'Jak masz na imię?'
                    if imię {is} 'Agent007'
                        a = 'Jedź na lotnisko '
                    {else}
                        a = 'Idź na dworzec kolejowy'
                    hasło = {ask} 'Jakie jest hasło?'
                    {if} hasło {is} 'TOPSECRET'
                        b = 'jutro o 02.00'
                    {else}
                        b = 'dziś o 10.00'
                    {print} a + b
                    ```
            13:
                story_text: |
                    Czy potrafisz wpisać właściwe polecenie w pustym miejscu? Mózg: Superszpieg musi poprawnie odpowiedzieć na OBA pytania, zanim zdobędzie poufne informacje!
                example_code: |
                    ```
                    imię = {ask} 'Jak masz na imię?'
                    hasło = {ask} 'Jakie jest twoje hasło?'
                    {if} imię {is} 'Agent007' _ hasło {is} 'TOPSECRET'
                        {print} 'Jedź na lotnisko o 02.00'
                    {else}
                        {print} 'Idź na dworzec o 10.00'
                     ```
    simon:
        name: Simon Says
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    Let's make a game of Simon Says! Simon Says is a memory game in which the player will be given a color. They have to repeat that color back.
                    If they get it right a color is added to the sequence, so they now have to remember 2 colors, then 3, then 4 etc. the game stops as soon as the player makes a mistake.

                    ### Exercise
                    In this first part of the Simon Says adventure, we'll let the computer pick a random color and add it to a list.

                    ***Make 2 lists*** First, make a list called `colors` and fill it with the colors red, yellow, green and blue.
                    Then make a list called `simon_sequence`. This list will be used as the answer.
                    At the start of the game this lists need to be empty. unfortunately, we can't create an empty list (yet), so we'll fill it with the words 'empty' and 'list' and we'll remove them from the list immediately.

                    ***Create a function that adds a color to the sequence*** Now that we have an empty list called simon_sequence, we can start filling it with random colors.
                    We do that with a function, so we can call it everytime there's a new level in our game. Create a function called `add_random_color`.
                    Then create the variable random_color and set it to a random color. Next, add this random color to the simon_sequence.

                    ***Create a function that shows the simon_sequence*** Start by naming the new function `show_simon_sequence` with `level` as an argument. Now we want to show as many colors as the level we are in (in level 1 you see 1 color, in level 2 you see 2 colors etc).
                    So we repeat `level` times, to print the `simon_sequence[i]`. Each time a color is shown, wait for 1 second and then clear the screen.

                    ***Test your program*** Before you go to the next level, test if the functions are working by calling both of the functions. If they're working you should see a random color in your output screen.
                    Remove this testing part of your code, copy the code and continue to the next tab to learn more about the simon says game!
                example_code: |
                    ```
                    # Make 2 lists
                    colors = _
                    _ = ['empty', 'list']
                    {remove} _ {from} simon_sequence
                    {remove} _

                    # Create a function that adds a color
                    _ add_random_color
                        _
                        {add} _

                    # Create a function that shows the simon_sequence
                    {define} _
                        {for} i {in} {range} 1 {to} _
                            {print} _
                            _
                            _

                    # Test your program
                    {call} _
                    {call} show_simon_sequence {with} 1
                    ```
    simon_2:
        name: Simon Says 2
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    We'll continue with our Simon Says game!

                    ### Exercise
                    ***Paste your code here*** Paste your code from the previous level here. Don't forget to remove the part that was just used for testing the functions.

                    ***Create a function that creates the player_sequence*** The list `player_sequence` is used to capture the answers of the player. First we define the function with the argument level.
                    Next, we ask level times what the color is that they choose. We call that variable `answer`. Then we add the variable `answer` to the list player_sequence.

                    ***Setting up the game*** Before we program the game in the next tab, we'll need some starting variables. First, we'll set the variable `level` to 1 and the variable `game_over` to False.
                    Then we make an introduction for the game. We'll print 'Welcome to Simon Says!' and clear the screen after 1 second.

                    ***Continue to the next tab to finish the game!**** Don't forget to copy your code and take it with you to the next tab.
                example_code: |
                    ```
                    # Paste your code here


                    # Create a function that creates the player_sequence
                    {define} _
                        {for} _
                            _ 'What is color number ' i '?'
                            {add} answer {to} _

                    # Set up
                    level = _
                    game_over = _
                    {print} _
                    _ 1
                    _
                    ```
    simon_3:
        name: Simon Says 3
        default_save_name: Simon
        description: Make a game of Simon Says
        levels:
            16:
                story_text: |
                    In this tab we'll program the game of Simon Says!

                    ### Exercise
                    ***Paste your code*** Copy your code from the previous tab and paste it here.

                    ***Program the game*** We start by making sure the game goes on while the game isn't over. Then we print what level the player is on, we use the variable level for that. We only show that for 1 second and then we clear the screen again.
                    Now, we have to create the empty list player_sequence. We've already programmed how to fill the list, with our function `player_sequence`, but we never made the list itself. To create the list we use the same trick as we did in the previous tab.
                    We'll make a list with the words 'empty' and 'list' on it, and then we remove both these words. Next, we'll call all of the 3 functions that we've created.
                    Lastly, we'll have to check if the player gave the correct answers (so if the player_sequence and the simon_sequence are the same).
                    If that's the case, we'll compliment the player. Wait for 1 second and increase the level with 1.
                    Did the player give the wrong answer, we'll tell them and end the game by setting game_over to 'True'

                    ***Enjoy your game!*** Great job! Does your game not work? Use the ladybug button to debug your code!
                example_code: |
                    ```
                    # Paste your code here

                    # The game
                    {while} game_over _
                        {print} _
                        _
                        _
                        _ = ['empty', 'list']
                        {remove} _
                        {remove} _
                        {call} _
                        {call} _ {with} _
                        {call} _ {with} _
                        {if} player_sequence == _
                            _
                            _
                            _
                        {else}
                            _
                            game_over = _
                    ```
    sleep_command:
        name: '{sleep}'
        default_save_name: sleep_command
        description: introducing sleep command
        levels:
            2:
                story_text: |
                    ## Komenda {sleep}
                    Inną nową komendą jest `{sleep}`, która zatrzymuje Twój program na sekundę. Jeżeli wpiszesz jakąś liczbę zaraz za komendą `{sleep}`, to program zatrzyma się na taką ilość sekund.
                example_code: |
                    ```
                    {print} Moim ulubionym kolorem jest...
                    {sleep} 2
                    {print} zielony!
                    ```
    songs:
        name: Zaśpiewaj piosenkę!
        default_save_name: Piosenka
        description: Wyświetl piosenkę
        levels:
            6:
                story_text: "Piosenki często zawierają dużo powtórzeń. Czasami te powtórzenia opierają się na liczeniu. \nPrzykładem jest dobrze znana angielska piosenka \"Butelki Piwa\" (ang. bottles of beer). Możesz zaprogramować tą piosenkę z odrobiną matematyki.\n\nWskazówka: Użyj funkcji \"czytaj na głos\" żeby Hedy zaśpiewał tą piosenkę!\n\n### Ćwiczenie\nMożesz teraz powtórzyć linie od 2 do 7 ile razy chcesz poprzez skopiowanie tych linii.\n"
                example_code: |
                    ```
                    wers = 99
                    {print} wers ' butelek piwa na ścianie'
                    {print} wers ' butelek piwa'
                    {print} 'Weź jedną i przekaż ją dalej'
                    wers = wers - 1
                    {print} wers ' butelek piwa na ścianie'
                    {sleep}
                    ```
                story_text_2: |
                    Ta piosenka dla dzieci odlicza od 5 małych małpek do 1 małpki.
                    Możesz zaśpiewać całą piosenkę jeżeli skopiujesz linie od 2 do 7 i wkleisz je poniżej kodu.
                example_code_2: |
                    ```
                    numer = 6
                    numer = numer - 1
                    {print} 'Skakało na łóżku małych małpek ' numer
                    {print} 'Nagle jedna spadła i potłukła się'
                    {print} 'Mama do doktora dzwoni i słyszy, że'
                    {print} 'SKAKAĆ NA ŁÓŻKU ZABRONIONE JEST!'
                    {sleep}
                    ```
            7:
                story_text: |
                    Piosenki często zawierają dużo powtórzeń, na przykład: Dziecko Rekin (ang. Baby Shark)! Jeżeli ją zaśpiewasz to będziesz śpiewać ten w kółko ten sam tekst:

                    Baby Shark dududududududu <br>
                    Baby Shark dududududududu <br>
                    Baby Shark dududududududu <br>
                    Baby Shark

                    ### Ćwiczenie
                    Możesz napisać piosenkę Dziecko Rekin przy użyciu polecenia `{repeat}`. Dokończ kod uzupełniając puste miejsca.
                    **Dodatkowe ćwiczenie** Po napisaniu piosenki Dziecko rekin możesz zaprogramować inne piosenki. Jest dużo piosenek z powtarzającym się tekstem.
                    Czy pamiętasz przynajmniej o jednej takiej piosence, i czy potrafisz ją zaprogramować?
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Dziecko Rekin tututudutudu'
                    {print} 'Dziecko Rekin'
                    ```
            8:
                story_text: |
                    W poprzednich poziomach programowałeś piosenkę "Butelki Piwa" (ang. Bottles of Beer). Bez użycia polecenia `{repeat}` musiałeś wiele razy skopiować wersy piosenki.
                    Na tym poziomie możesz powtórzyć ten wers 99 razy poprzez dodanie jednej prostej linii kodu.

                    ### Ćwiczenie
                    Dodaj odpowiednie polecenia w puste miejsca i upewnij się, że kod ma poprawne wcięcia.
                example_code: |
                    ```
                    wers = 99
                    _ 99 {times}
                        {print} wers ' butelek piwa na ścianie'
                        {print} wers ' butelek piwa'
                        {print} 'Weź jedną i przekaż ją dalej'
                        wers = wers - 1
                        {print} wers ' butelek piwa na ścianie'
                    ```
            10:
                story_text: |
                    Dzięki `{for}` możesz wydrukować całą piosenkę „Baby Shark” (w tym wszystkie inne rekiny w rodzinie) w zaledwie 6 liniach!

                    ### Ćwiczenie 1
                    Czy możesz jeszcze bardziej skrócić kod „Baby Shark” za pomocą polecenia `{for}`? Dokończ przykładowy kod.
                example_code: "```\nrodzina = dziecko, mamusia, tatuś, babcia, dziadek\n_ _ _ _ \n  {print} _\n```\n"
                story_text_2: |
                    ### Ćwiczenie 2
                    Wypisz piosenkę „Pięć Małych Małpek skaczących po łóżku”. Wyszukaj tekst, jeśli go nie pamiętasz.

                    **Dodatkowo** Wydrukuj piosenkę „Stary MacDonald farmę miał” i upewnij się, że wszystkie zwierzęta wydają inny dźwięk, używając `{if}`.
                example_code_2: |
                    ```
                    małpki = 5, 4, 3, 2, 1
                    ```
            11:
                story_text: |
                    Na tym poziomie możesz użyć `{for}` z `{range}`, aby tworzyć piosenki, które wykorzystują liczenie, takie jak 5 małych małpek.

                    ### Ćwiczenie 1
                    Wypełnij puste pola i spraw, aby kod działał! Jeśli nie pamiętasz tekstu piosenki, poszukaj go sam.

                    ### Ćwiczenie 2
                    Ostatnia linijka piosenki różni się od pozostałych. Wydrukuj ten wiersz wewnątrz `{for}` i użyj `{if}`, aby działał poprawnie.
                example_code: |
                    ```
                    _ małpki _ _ 5 _ 1
                        {print} małpki 'małe małpki skaczące po łóżku'
                        _
                    ```
            12:
                story_text: |
                    W tej piosence jeszcze prościej zaprogramujemy 'jeśli jesteś dziś szczęśliwy w dłonie klaszcz'. To wszystko dzięki temu, że wszystkie akcje możemy przypisać do zmiennej. Zobacz jak:

                    ### Ćwiczenie
                    Czy potrafisz dodać odpowiednią długość wcięcia do każdej linii kodu żeby ta piosenka była zaśpiewana poprawnie?
                    Wskazówka: Nie wszystkie linie kodu wymagają wcięcia.
                example_code: |
                    ```
                    akcje = 'w dłonie klaszcz', 'tupnij tak', 'klepnij się'
                    {for} akcja {in} akcje
                        {for} i {in} {range} 1 {to} 2
                            {print} 'jeśli jesteś dziś szczęśliwy'
                            {print} akcja
                        {print} 'jeśli jesteś dziś szczęśliwy, w sercu pokój masz prawdziwy'
                        {print} 'jeśli jesteś dziś szczęśliwy'
                        {print} akcja
                    ```
            13:
                story_text: |
                    In the previous adventure you have learned how to use an argument in a function, but did you know that you could combine them with {ask} commands as well?
                    In this example we have changed the 'My Bonnie' program and made it interactive. You are now asked where Bonnie is.
                example_code: |
                    ```
                    {define} song {with} place
                        {print} 'My Bonnie is ' place

                    chosen_place = {ask} 'Where do you want Bonnie to be?'
                    synonym = {ask} 'What is another word for that?'

                    {call} song {with} chosen_place
                    {call} song {with} synonym
                    {call} song {with} chosen_place
                    ```
            16:
                story_text: |
                    Na tym poziomie możesz jeszcze szybciej zaprogramować utwór taki jak „Dziadek Fajną Farmę Miał”. Możesz połączyć odpowiednie zwierzę z odpowiednim dźwiękiem, po prostu umieszczając je w tym samym miejscu na liście.
                    „Morskie Opowieści” (ang.: Drunken Sailor) jest również szybko tworzony na tym poziomie. Potrzebujesz tylko 8 linii do całej piosenki, sprawdź to!
                example_code: |
                    ```
                    zwierzęta = ['Kurki', 'Krówki', 'Świnkę']
                    dźwięki = ['ko', 'muu', 'chrum']
                    {for} i {in} {range} 1 {to} 3
                        zwierzę = _
                        dźwięk = _
                        {print} 'Dziadek fajną farmę miał'
                        {print} 'ija ija oo!'
                        {print} zwierzę ' na niej hodował'
                        {print} 'ija ija oo!'
                        {print} zwierzę ' ' dźwięk dźwięk ' tu'
                        {print} 'i ' dźwięk dźwięk ' tam'
                        {print} dźwięk 'tu,'
                        {print} dźwięk ' tam,'
                        {print} 'ciągle tylko ' dźwięk dźwięk
                    ```

                    ```
                    wersy = ['Co zrobimy z pijanym marynarzem?', 'Zgolim mu brzuch żyletką tępą,', 'Wsadzim go w łódź aż wytrzeźwieje,']
                    {for} wers {in} wersy
                        {for} i {in} {range} 1 {to} 3
                            {print} wers
                        {print} 'Wcześnie o poranku!'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'Hej ho i już się wznosi,'
                        {print} 'Wcześnie o poranku!'
                    ```
            18:
                story_text: |
                    W poziomie 16 stworzyliśmy piosenki przy użyciu list. Te programy nie będą już działały poprawnie w tym poziomie. Dwukropki z poziomu 17 i nawiasy kwadratowe z poziomu 18 muszą zostać dodane.

                    ### Ćwiczenie 1
                    Piosenka o pijanym marynarzu ma przykładowy kod, ale jeszcze nie działa.
                    Czy możesz się upewnić, że wszystko znów zacznie działać? By Ci pomóc powstawialiśmy _ w _niektórych_ miejscach z błędami.

                    ### Ćwiczenie 2
                    Teraz znajdź swoją piosenkę o dziadku z farmą z poziomu 16 i popraw ją.
                example_code: |
                    ```
                    wersy = ['Co zrobimy z pijanym marynarzem?', 'Zgolim mu brzuch żyletką tępą,', 'Wsadzim go w łódź aż wytrzeźwieje,']
                    {for} wers {in} wersy _
                        {for} i {in} {range} 1 {to} 3 _
                            {print} _ wers _
                        {print} 'Wcześnie o poranku!'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'Hej ho i już się wznosi,'
                        {print} 'Wcześnie o poranku!'
                    ```
    songs_2:
        name: Sing a song! 2
        default_save_name: Song 2
        description: Sing a song 2
        levels:
            12:
                story_text: |
                    Songs contain a lot of repetition. We can capture it with a function!
                    ### Exercise
                    Look at the example code with the function. Fill out the two lines so the full song is printed.
                example_code: |
                    ```
                    {define} twinkle
                        {print} 'Twinkle'
                        {print} '...'

                    {call} twinkle
                    {print} 'Up above the world so high'
                    {print} 'Like a diamond in the sky'
                    {call} _
                    ```
            16:
                story_text: |
                    ### Exercise
                    Finish the nursery rhyme!
                example_code: |
                    ```
                    number = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten']
                    object = ['on his drum', 'on his shoe', 'on his knee', 'on his door', 'on his hive', 'on his sticks', 'up in heaven', 'on his gate', 'on his vine', 'once again']

                    _
                        {print} 'This old man'
                        {print} 'He played ' _
                        {print} 'He played knick-knack ' _
                        {print} 'With a knick-knack paddywhack'
                        {print} 'Give the dog a bone'
                        {print} 'This old man came rolling home'
                        {sleep} 8
                        {clear}
                    ```
                story_text_2: |
                    ### Exersice 2
                    Now create your own code for the nursery rhyme 'The wheels on the bus' on the same way!
                example_code_2: |
                    ```
                    object = ['wheels', 'doors', _]
                    movement = [ 'round and round', 'open and shut', _]
                    ```
    tic:
        name: Tic-Tac-Toe
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    Let's program a game of tic-tac-toe!

                    ### Exercise
                    In this adventure we'll start with creating an empty field.

                    ***Create a list called field*** This list will be our playing field. This list is filled with 9 dots, since there are no x's and o's yet at the start of our game.

                    ***Create a function that prints the field*** Firstly, clear the screen so the old playing fields will be removed. Then we print the first line of our Tic Tac Toe field. This line constists of the first 3 spots in our list field.
                    We have already programmed this line for you. Now finish the field by printing spot 4, 5, and 6 on the second row and spot 7, 8 and 9 in the third row.

                    ***Call the function that prints the field*** Now call the function.
                    <div class="w-full flex flex-row gap-2">
                        Run the code. Your output should look like this: <img src="https://github.com/hedyorg/hedy/assets/80678586/bcbd156e-4b48-4e82-84ae-f86d21b0cbcc" width="100">
                    </div>

                    ***Continue in the next tab*** In the next tab you'll learn how to program the game itself.
                example_code: |
                    ```
                    # Create a list called field
                    _ = ['.', '.', '.', '.', '.', '.', '.', '.', '.']

                    # Create a function that prints the field
                    {define} print_field
                        _
                        {print} 'TIC TAC TOE'
                        {print} field[1] field[2] field[3]
                        _
                        _

                    # Call the function
                    ```
            17:
                story_text: |
                    In the previous level you've learned how to make a tic-tac-toe game. The game works, but is quite annoying as it keeps asking you if you've won yet.
                    Now that we have the {elif} command, we can let the game decide if someone has won and it can stop asking us!

                    ### Exercise
                    ***Paste your code*** Paste your code from the previous level here and make it level 17 proof. In this level you've learned to use a colon everytime you create a block of code. Please add the colons in the correct spots.

                    ***Create a function that detects if someone's won*** We have started the function for you, paste it under the function `print_field` and finish the function. You can see that this first piece of code checks to see if spot 1, 2 and 3 are the same, because if they are you have 3 in a row.
                    It also checks if they are not a dot, because if they are, the line might have the same symbols on them, but that's just because it's still empty.
                    If all these conditions are met, the game is over and the winner is printed.
                    Finish this function with all possible ways to win. This means you have to make this for the other 2 rows, 3 columns and 2 diagonals.
                    If you've finished all the other options, the function should return the variable `game_over` so we can use it in our game.

                    ***Call the function in the game*** Go to the line `game_over = {ask} 'Did you win?'` and change it to `game_over = {call} detect_winner {with} field, sign`. Now the function will check if there's a winner and the game doesn't need to keep asking anymore!

                    ***Enjoy your game!*** Great job! You have finished the game! Enjoy playing it!

                example_code: |
                    ```
                    # Paste your code here and make it level 17 proof

                    # Create a function that detects if someone has won
                    {define} detect_winner {with} field, sign:
                        {if} field[1] == field[2] {and} field[2] == field[3] {and} field[1] != '.':
                            game_over = 'yes'
                            {print} 'Player ' sign 'wins!'
                        {elif}:
                            _
                        {else}:
                            game_over = 'no'
                    {return} _
                    ```
    tic_2:
        name: Tic-Tac-Toe 2
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    In the previous adventure you've learned how to create a playing field. Now you'll learn how to create the game!

                    ### Exercise
                    ***Paste your code*** Start by pasting your code from the previous adventure here.

                    ***Add variables*** Underneath your list called `field` we'll add 2 more variables that we'll need to program the game.
                    The variable `game_over` tells us if the game is over, and should be 'no' at the start of the game.
                    The variable `sign` tells us if it's the turn of player x or player o. Set the variable to 'x'.

                    ***The game*** First use a {while} command, to make sure the game keeps on playing the variable while game_over is set to no.
                    During the game, we first ask the player which spot they choose. Then we change the field with the number they chose into their sign.
                    Then we print the field again and we ask the player if they've won yet. Lastly we want to switch whose turn it is, so if the sign is 'x' it should be 'o' and the other way around.

                    ***Test your game*** Does your game work? Great, have fun playing the game! If not, use the ladybug button to debug your code.
                    You might have noticed one mistake in the code though, you can steal the other player's spot! If the other person chose spot 1, you could simply enter 1 after them and steal their spot.
                    That's not fair! Go to the next tab to learn how to fix this problem.
                example_code: |
                    ```
                    # Paste your code from the previous adventure here

                    # Add variables
                    game_over = _
                    sign = _

                    # The game
                    {while} _
                        choice = _ 'Player ' sign '_?'
                        field[choice] = _
                        _ print_field
                        game_over = {ask} _
                        {if} sign = 'o'
                            sign = _
                        _
                            sign = _
                    ```
    tic_3:
        name: Tic-Tac-Toe 3
        default_save_name: Tic
        description: Play a game of Tic Tac Toe!
        levels:
            16:
                story_text: |
                    You might have noticed one mistake in the code you've made in the previous adventure. You can steal the other player's spot! If the other person chose spot 1, you could simply enter 1 after them and steal their spot.
                    That's not fair! In this tab we'll fix that mistake.

                    ### Exercise
                    ***Paste your code here*** Paste your code from the previous adventure here.

                    ***Fix the mistake*** To fix the mistake we replace the line that says `field[choice] = sign`. This turns any spot that the player has chosen into their sign.
                    Go to the header that says 'Use this to fix the mistake' and finish the code. We first want to check if the chosen spot is still empty, so `if field[choice] = '.'`. If that is the case, you are allowed to take it.
                    Then we make an else command and print 'Sorry, this spot is already taken' if the spot is not empty. Lastly, we add a {sleep} command, so the players can actually read the text before it gets cleared again.
                    Now copy this piece of code and replace the line `field[choice] = sign` with this new piece of code.

                    ***Play your game!*** Now the game should work properly! Good job!
                    The only flaw is that you can get a bit annoyed that the game keeps asking you if you've won yet. Do you want to fix that? Go to level 17 and we'll fix it!
                example_code: |
                    ```
                    # Paste your code here

                    # Use this to fix the mistake
                    {if} _ = '.'
                        field[choice] = sign
                    {else}
                        {print} _
                        _
                    ```
    turtle:
        name: Żółw
        default_save_name: Żółw
        description: Stwórz swoje własne obrazki
        levels:
            1:
                story_text: |
                    Możesz wykorzystać Hedy także do rysowania.  Rysując linie i obracając żółwia, możesz narysować kwadrat lub gwiazdę!

                    Pisząć `{forward}` możesz narysować linie. Liczba zaraz po komendzie mówi o tym ile ma przejść żółw rysując linie..`{turn} {right}` obraca żółwia o ćwierć obrotu w prawo (zgodnie z ruchem wskazówek zegara), `{turn} {left}` obraca w lewo (przeciwnie do ruchu wskazówek zegara).

                    Jeśli chcesz przesunąć żółwia do tył, możesz wykorzystać komendę `{forward}` ale z ujemną liczba. Na przykład `{forward} -100`
                example_code: |
                    ```
                    {forward} 100
                    {turn} {left}
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    To jest początek schodków. Możesz sprawić aby miały 5 stopni?
                example_code_2: |
                    ```
                    {forward} 20
                    {turn} {right}
                    {forward} 20
                    {turn} {left}
                    {forward} 20
                    ```
            2:
                story_text: |
                    Na tym poziomie możesz używać zmiennych aby uczynić żółwia interaktywnym. Na przykład możesz zapytać użytkownika ile kroków ma zrobić twój żółw.
                example_code: |
                    ```
                    kroki {is} {ask} Ile kroków ma wykonać żółw?
                    {forward} kroki
                    ```
                story_text_2: |
                    Również na poziomie 1 żółw mógł skręcać tylko w lewo lub w prawo. To trochę nudne!
                    Na poziomie 2 może obracać się we wszystkich kierunkach.

                    Użyj liczby 90, aby obrócić o żółwia o ćwierć obrotu. Wielkość obrotu liczby w stopniach. Pełny obrót to 360 stopni.

                    ### Ćwiczenie
                    Czy możesz zrobić figurę za pomocą tego kodu? Może trójkąt lub okrąg?
                example_code_2: |
                    ```
                    {print} Rysowanie kształtu
                    kąt {is} 90
                    {turn} kąt
                    {forward} 25
                    {turn} kąt
                    {forward} 25
                    ```
            3:
                story_text: |
                    Na tym poziomie możesz użyć `{at} {random}` podczas rysowania żółwiem. Losowy wybór sprawia, że żółw za każdym razem idzie inną ścieżką.
                    Użyj `{at} {random}`, aby wybrać wartość z listy.
                    ### Ćwiczenie
                    Czy możesz skopiować i wkleić linie 2 i 3, żeby stwożyć dłuższą losową ścieżkę?
                example_code: |
                    ```
                    kąty {is} 10, 50, 90, 150, 250
                    {turn} kąty {at} {random}
                    {forward} 25
                    ```
            4:
                story_text: |
                    Na poziomie 4 musisz użyć cudzysłowów z poleceniami `{print}` oraz `{ask}`. To samo się dotyczy rysowania!
                example_code: |
                    ```
                    {print} _ Rysujemy figury _
                    kąt {is} 90
                    {turn} kąt
                    {forward} 25
                    {turn} kąt
                    {forward} 25
                    ```
                story_text_2: |
                    Możesz również zmienić kolor rysowanych linii przy użyciu polecenia `{color}`. Sprawdź przykładowy program.
                    Możesz również użyc polecenia `{color} {white}` żeby zrobić "niewidoczne" linie. Możesz użyć tych "niewidocznych" linii, żeby przesunąć żółwia w inne miejsce na ekranie zanim zaczniesz rysować.
                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
            5:
                story_text: |
                    Na poziomie 5 możesz dokonywać wyboru przy użyciu polecenia `{if}`. Przykładem takiego wyboru byłby wybór pomiędzy różnymi typami figur do narysowania.
                example_code: |
                    ```
                    {print} 'Rysowanie Figur'
                    figura {is} {ask} 'Chcesz kwadrat czy trójkąt?'
                    {if} figura {is} trójkąt kąt {is} 120
                    {else} kąt {is} 90
                    {turn} kąt
                    {forward} 25
                    {turn} kąt
                    {forward} 25
                    {turn} kąt
                    {forward} 25
                    {turn} kąt
                    {forward} 25
                    ```
                story_text_2: |
                    ### Ćwiczenie
                    Wpisz poprawne liczby w tym kodzie tak by zaczął działać.
                    Gdy to już zrobisz, możesz spróbować dodać możliwość cofania się.

                    **Dodatkowo** Zamiast używać „prawo” i „lewo” zmień program by używał „Północ”, „Wschód”, „Południe” i „Zachód”.
                    W ten sposób możesz dodać nawet więcej kierunków, jak na przykład, „Północny wschód” czy „Południowy zachód”.
                example_code_2: |
                    ```
                    kierunek {is} {ask} 'Chcesz iść w „prawo”, w „lewo” czy „naprzód”?'
                    {if} kierunek {is} lewo {turn} _
                    {if} kierunek {is} prawo {turn} _
                    {forward} 100
                    ```
            6:
                story_text: |
                    Na tym poziomie możesz użyć matematyki żeby narysować różne figury.
                    Być może pamiętasz ze szkoły, że obrócenie się dookoła jest tym samym co obrócenie się o 360 stopni. Jeżeli tego nie wiedziałeś to teraz już wiesz!
                    Z tego też powodu już wiesz dlaczego gdy rysujemy kwadrat to obracamy się o 90 stopni. Jako, że kwadrat ma cztery boki pod kątem prostym to znaczy że kąt pomiędzy nimi to 90 stopni - 360 stopni podzielone przez 4 (boki) to 90 stopni.
                    Dzięki temu, że w Hedy możesz przeprowadzać obliczenia matematyczne, możesz tez rysować wszystkie figury jakie tylko chcesz!
                example_code: "```\nkątów = {ask} 'Ile chcesz kątów?'\nkąt = 360 / kątów\n{forward} 50\n{turn} kąt\n{forward} 50\n{turn} kąt\n{forward} 50\n{turn} kąt\n{forward} 50\n{turn} kąt\n{forward} 50\n{turn} kąt\n{forward} 50 \n{turn} kąt\n```\n"
            8:
                story_text: |
                    Dzięki naszej nowo nabytej umiejętności powtarzania wielu linii kodu możemy rysować figury w jeszcze prostszy sposób.
                    Wystarczy, że ustawimy kąt tylko raz i potem użyjemy go jako zmienną wewnątrz polecenia `{repeat}`.

                    ### Ćwiczenie 1
                    Przykładowy kod tworzy kwadrat. Zmień kod tak, aby tworzył inną figurę, np. trójkąt lub sześciokąt.
                    Wymaga to zmiany w dwóch liniach kodu.
                    Podpowiedź: Całe koło to 360 stopni.

                    ### Ćwiczenie 2
                    Teraz stwórz rysunek składający się z co najmniej dwóch wielokątów.
                example_code: |
                    ```
                    kąt = 90
                    {repeat} 4 {times}
                        {turn} kąt
                        {forward} 50
                    ```
                story_text_2: |
                    **(dodatkowe zadanie)** Możemy teraz ulepszyć program, który rysuje różne figury. Donończ kod i możesz narysować dowolny wielokąt, który chcesz!
                example_code_2: |
                    ```
                    figura = {ask} 'Ile kątów mam narysować?'
                    kąt = 360 / figura
                    {repeat} figura {times}
                        {turn} _
                        {forward} _
                    ```
            9:
                story_text: |
                    Skoro potrafimy używać `{repeat}` wewnątrz `{repeat}`, możemy tworzyć bardziej złożone figury.

                    ### Ćwiczenie 1
                    Ten kod tworzy trzy czarne trójkąty, zmień to na pięć różowych kwadratów.

                    **(dodatkowe zadanie)** Stwórz własną figurę składającą się z co najmniej dwóch różnych kształtów.
                example_code: |
                    ```
                    {color} {black}
                    {repeat} 3 {times}
                        {repeat} 3 {times}
                            {forward} 10
                            {turn} 120
                        {color} {white}
                        {forward} 50
                        {color} {black}
                    ```
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.
                    ### Ćwiczenie 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                     **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!
                    ### Ćwiczenie 2
                    The spiral is drawn outwards, make it go inwards?
                example_code: |
                    ```
                    {turn} 90
                    distances = 10, 20, 30, 40, 50, 60
                    {for} distance {in} distances
                        {forward} distance
                    ```
            12:
                story_text: |
                    We can use functions to draw more complex figures with less code.
                    ### Exercise 1
                    Fill the function so that three squares are created. If you want the image to look nicer, you can make the lines between the squares white.

                    ### Exercise 2
                    The code can be made even shorter. Place the final lines into a `{repeat}` so the figure remains the same.

                    ### Exercise 3
                    Create your own drawing with different figures.
                    Change both the number of figures with the `{repeat}` and the shape of the figures in the `{define}`
                example_code: |
                    ```
                    {define} square
                        {repeat} 4 {times}
                            {turn} _
                            {forward} _
                    {call} square
                    {forward} 50
                    {call} square
                    {forward} 50
                    {call} square
                    ```
    turtle_draw_it:
        name: Draw it!
        default_save_name: Draw it
        description: Draw this picture with the turtle
        levels:
            1:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                        Rectangle <img src="https://github.com/hedyorg/hedy/assets/80678586/77aa99d5-cd8f-4969-b49d-e8fed34ac550" width="100">
                        Square <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                        Stairs<img src="https://github.com/hedyorg/hedy/assets/80678586/d4301e62-ec66-4031-827c-7d21f73ba106" width="200">
                    </div>
            2:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/e974b62c-f0cf-445a-8bd4-5ad9f1f71204" width="100">
                    Arrow <img src="https://github.com/hedyorg/hedy/assets/80678586/803d8f42-9708-448c-82ea-d035697f08c9" width="150">
                    Boat <img src="https://github.com/hedyorg/hedy/assets/80678586/94ef7189-442a-4c8f-827d-12a69203c2e9" width="150">
                    </div>
            3:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/71e04d98-9545-4614-9caf-a5f179b756a1" width="150">
                    Star <img src="https://github.com/hedyorg/hedy/assets/80678586/421c4d28-cb99-424b-be26-dcae30d65c80" width="150">
                    Arrow <img src="https://github.com/hedyorg/hedy/assets/80678586/3cbebcae-5258-47c5-a6ac-e7ee36c1d1ce" width="200">
                    </div>
            4:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Colored Star <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Rainbow <img src="https://github.com/hedyorg/hedy/assets/80678586/2728b10f-9f7f-45ea-964e-5b284033e4f0" width="500">
                    Nested squares <img src="https://github.com/hedyorg/hedy/assets/80678586/f013f9fa-bc68-4c60-b778-2c457799d6f7" width="200">
                    </div>
                example_code: |
                    **Extra** Up for a real challenge? Make sure that the colors of these figures are selected randomly, so that each time you run your programs they'll look differently!

                    ```
                    colors {is} red, orange, yellow, green, blue, purple, pink, brown, gray, black
                    color _
                    ```
            5:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** Make only one code that lets the player decide which letter they'd like to see! And can you add even more letters?

                    <div class="w-full flex flex-row gap-2">
                    F <img src="https://github.com/hedyorg/hedy/assets/80678586/8a021b76-c24b-4e7c-b960-48d57f3bcb20" width="100">
                    E <img src="https://github.com/hedyorg/hedy/assets/80678586/12821803-6422-416a-8e36-9902d14e57a4" width="100">
                    L <img src="https://github.com/hedyorg/hedy/assets/80678586/3af6f919-7b67-4ee7-b923-11e56f2b6b24" width="100">
                    </div>
                example_code: |
                    Hint:
                    ```
                    chosen_letter {is} {ask} 'Which letter would you like to see? F, E or L?'
                    {if} _
                    ```
            6:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** Let the player decide which color the square should be.

                    ***Extra*** Can you make the letter of your own first name and the flag of your own country too?

                    <div class="w-full flex flex-row gap-2">
                    Square <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="150">
                    Letters <img src="https://github.com/hedyorg/hedy/assets/80678586/e75f4fa5-f1f5-4b48-806c-916c28e4e8ad" width="100">
                    Flag <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint for the square:
                    ```
                    chosen_color = {ask} _
                    ```
            7:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Hexagon <img src="https://github.com/hedyorg/hedy/assets/80678586/92e492e1-1593-489b-aaf0-51d2a29755f4" width="200">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/3629a5e6-1f02-4851-aab9-c5430ba4a1f1" width="200">
                    Fan <img src="https://github.com/hedyorg/hedy/assets/80678586/1ba2ff71-1230-4fe3-8255-b2c504cf1b4e" width="200">
                    </div>
            8:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** The number in brackets indicates in how many lines of code this figure can be drawn. Can you do it in the same amount of lines?

                    <div class="w-full flex flex-row gap-2">
                    Square (3) <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                    Randomly colored star (5) <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Randomly colored spiral (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/9bcdb3f1-367d-4ae0-878f-d09005424a35" width="150">
                    </div>
            9:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** The number in brackets indicates in how many lines of code this figure can be drawn. Can you do it in the same amount of lines?

                    **Extra** Give the player a choice which country they would like to see the flag of.

                    <div class="w-full flex flex-row gap-2">
                    Cross (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/76e42c76-aa3f-4863-8eee-ead73c09a186" width="150">
                    Randomly colored nested squares (8) <img src="https://github.com/hedyorg/hedy/assets/80678586/17f878cc-e893-4c10-b32e-a09a50bf08de" width="200">
                    Flags <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint for the nested squares:
                    ```
                    colors = red, blue, orange, yellow, pink, purple, green, brown, black
                    distance = 120
                    repeat 5 times
                    _
                    ```
                    Hint for the flags:
                    ```
                    country = ask 'which country would you like to see the flag of?'
                    if country is 'the Netherlands'
                        color_1 = red
                        color_2 = white
                        color_3 = blue
                    ```
            10:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Nested Hexagon <img src="https://github.com/hedyorg/hedy/assets/80678586/3629e908-3cd5-44ac-bbcd-1f1cceb15654" width="150">
                    Traffic lights  <img src="https://github.com/hedyorg/hedy/assets/80678586/edbbb608-5ff8-4349-85a6-e47809adde43" width="100">
                    </div>
                example_code: |
                    Hint Nested Hexagon:
                    ```
                    distances = 100, 80, 60, 40, 20
                    {for} distance {in} distances
                    _
                    ```

                    Hint Traffic Lights:
                    ```
                    colors = red, yellow, green
                    {for} chosen_color {in} colors
                        color _
                        {repeat} _
                    ```
                story_text_2: |
                    Christmas lights <img src="https://github.com/hedyorg/hedy/assets/80678586/9637ea6d-6edc-4d88-a6f7-10271bfc5371" width="500">
                example_code_2: |
                    Hint Christmas Lights:

                    Start by moving to the left side of the screen with an invisible white line. Then hang up the Christmas lights!
                    ```
                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 90

                    colors = red, blue, yellow, purple, green, orange, pink
                    {for} chosen_color {in} colors
                    _
                    ```
            11:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Beehive (6) <img src="https://github.com/hedyorg/hedy/assets/80678586/ec02469c-907b-4695-9382-d39a8f3c00ec" width="150">
                    Fan (5)  <img src="https://github.com/hedyorg/hedy/assets/80678586/a032ab35-c70c-4e67-9b4e-036a03ecce87" width="150">
                    Snowflake (13) <img src="https://github.com/hedyorg/hedy/assets/80678586/90f56bbb-86e5-448d-8aec-16f8c2c05cf2" width="150">
                    </div>
                example_code: |
                    Hint Beehive:
                    ```
                    {for} amount_of_combs {in} {range} 1 {to} _
                        {for} walls_of_one_comb {in} {range} 1 {to} _
                            {forward} _
                            {turn} _
                        {forward} _
                        {turn} _
                    ```

                    Hint Fan:
                    Start out like the fan you made in level 7. Or take a peak at the hint for the beehive, because the codes are very similar.

                    Hint Snowflake: Start by making one 'leg' and repeat it 6 times.
            12:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!
                    Hint: Bracelet designing program. Firstly, define a function **for each shape** you want to use on the bacelet. Then, add the shapes to the bacelet like this:
                    </div>
                    Bracelet Designing program <img src="https://github.com/hedyorg/hedy/assets/80678586/549d7f3a-c492-4b4a-b173-746eb3400951" width="500">
                example_code: |
                    ```
                    {define} draw_a_square
                    _

                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 180

                    {for} i {in} {range} 1 {to} 5
                        {color} gray
                        {forward} 100
                        shape = {ask} 'What kind of shape would you like next on the bracelet?'
                        chosen_color = {ask} 'In which color?'
                        {color} chosen_color
                        {if} shape = 'square'
                            {call} draw_a_square
                    ```
            13:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    Street in different sizes <img src="https://github.com/hedyorg/hedy/assets/80678586/cdae9d97-d5ef-46f3-8838-24fa7b5b1bec" width="300">
                    Colored street  <img src="https://github.com/hedyorg/hedy/assets/80678586/9893e0bd-c0f8-49bc-a5a7-217182407724" width="300">
                    Snow Storm <img src="https://github.com/hedyorg/hedy/assets/80678586/111b0a1b-b0e1-47c3-b032-81cea05e6bbc" width="300">
                example_code: |
                    Hint Street in different sizes
                    ```
                    {define} draw_a_house {with} size
                    _

                    {call} draw_a_house {with} 90
                    {call} draw_a_house {with} 60
                    {call} draw_a_house {with} 30
                    ```

                    Hint Colored street
                    ```
                    {define} draw_a_house {with} chosen_color
                    _
                    ```

                    Hint Snow Storm
                    ```
                    {define} draw_snowflake {with} length, color
                        _

                    numbers = 10, 20, 30
                    colors = _

                    {for} i {in} {range} 1 {to} 5
                        random_number = _
                        random_color = _
                        {call} draw_snowflake {with} random_number, random_color
                        {color} white
                        {turn} random_number * 5
                        {forward} 80
                    ```
            14:
                story_text: |
                    ### Ćwiczenie
                    Utwórz program, który zapyta gracza, ile rogów powinna mieć jego figurka, a następnie utworzy tę figurę.
                    Liczba na obrazku to wynik, gdy gracz wypełni 10.

                    <div class="w-full flex flex-row gap-2">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/ee32f40e-dea1-4e7c-a813-3ef63671254b" width="300">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/3621bf77-527d-41e8-a44f-c5a21bb4ffd2" width="200">
                    </div>
                example_code: |
                    ```
                    {define} calculate_degrees {with} amount_of_corners
                        _ 360 / amount_of_corners


                    {define} draw_figure {with} degrees
                        _
                            {forward} 400/amount_of_corners
                            {turn} _

                    amount_of_corners = {ask} _
                    degrees = {call} _ {with} _

                    {call} _ {with}
                    {call} _ {with}
                    ```
            15:
                story_text: |
                    ### Ćwiczenie
                    Odtwórz rysunki z żółwiem!

                    Spirala <img src="https://github.com/hedyorg/hedy/assets/80678586/6943223c-018b-435b-a391-23723cc7a6ad" width="150">
                example_code: |
                    Spirala
                    ```
                    distance = 5
                    {while} distance < 200
                        distance = distance + 5
                         _
                    ```
                story_text_2: |
                    Spirala <img src="https://github.com/hedyorg/hedy/assets/80678586/cb671065-b47b-49f0-b298-dcbcd2a5e28f" width="150">
                example_code_2: |
                    Fan
                    ```
                    {define} draw_a_square {with} side
                    _

                    i = 100
                    {while} i > 1
                        _ {with} i
                        _
                        i = i - 3
                    ```
                story_text_3: |
                    Star <img src="https://github.com/hedyorg/hedy/assets/80678586/17564e0a-63e1-4794-8d41-15ac8c1a5a93" width="150">
                example_code_3: |
                    Gwiazda
                    Gwiazdę rysuje się zwykle za pomocą obrotu o 144 stopnie. Jeśli zmienisz to nieco na przykład na 143 stopnie i powtórzysz wzór wiele razy z pętlą {while}, możesz wykonać tę figurę.
    while_command:
        name: '{while}'
        default_save_name: while_command
        description: while
        levels:
            15:
                story_text: |-
                    Nauczymy się innej pętli, pętli `{while}`! Kontynuujemy pętlę tak długo, jak długo stwierdzenie jest prawdziwe.
                    Nie zapomnij więc zmienić wartości w pętli.

                    W przykładowym kodzie kontynuujemy, aż zostanie podana poprawna odpowiedź.
                    Jeśli nigdy nie zostanie podana prawidłowa odpowiedź, pętla nigdy się nie kończy!
                example_code: |
                    ```
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
                    ```
    years:
        name: Nowy Rok
        default_save_name: Odliczanie do Nowego Roku
        description: Odliczanie do Nowego Roku!
        levels:
            11:
                story_text: |
                    Na tym poziomie możesz użyć komendy `{for}` liczba `{in}` `{range}`, aby odliczać czas do Nowego Roku.

                    ### Ćwiczenie
                    Wypełnij puste pola i spraw, aby kod działał!
                example_code: |
                    ```
                    {for} liczba {in} {range} _ {to} _
                        {print} liczba
                    {print} 'Szczęśliwego Nowego Roku!'
                    ```
