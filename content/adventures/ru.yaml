adventures:
    default:
        name: "Вступление"
        description: "Объяснение уровня"
        default_save_name: "вступление"
        levels:
            6:
                start_code: "{print} '5 раз по 5 это ' 5 * 5"
                story_text: " На этом уровне вы узнаете кое-что новое: теперь вы также можете вычислять.\n\n Плюс - это просто, вы пишете его как в математике: `5 + 5`, например. Минус также работает хорошо, это `5 - 5`.\n\n Со временем все немного иначе, потому что на клавиатуре нет символа времени. Просто поищите, его действительно нет!\n Поэтому мы умножаем со звездочкой над 8: `5 * 5`. Читайте это как \"5 умножить на 5\", это поможет вам лучше запомнить.\n"
                example_code: "```\n{print} '5 plus 5 is ' 5 + 5\n{print} '5 minus 5 is ' 5 - 5\n{print} '5 times 5 is ' 5 * 5\n```\n"
            12:
                start_code: "{print} 'В десятичных числах теперь нужно использовать точку'\n{print} 2.5 + 2.5"
                story_text: "**Десятичные числа**\nДо сих пор Hedy не позволял использовать десятичные числа, такие как 1,5, но теперь мы это делаем. Обратите внимание, что компьютеры используют `.` для десятичных чисел."
                example_code: "```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n"
            1:
                story_text: "Добро пожаловать в Hendy! На Уровне 1 вы можете начать с написания рассказа.\n\nПопробуйте выполнить код самостоятельно с помощью зеленой кнопки \"Выполнить код\" под полем программирования.\n\nВы Готовы? Тогда перейдите на следующую вкладку чтобы выучить вашу первую команду!\n"
                start_code: '{print} привет мир!'
            2:
                story_text: "In level 2 we learn two new commands: `{is}` and `{sleep}`.\nYou can name a word with `{is}`. This is called a variable. In this example we made a variable called name and a variable called age. You can use the word name anywhere in your code and it will be replaced by Hedy, like this:\n\nThis way you no longer need the `{echo}` command!\n"
                example_code: "```\nname {is} Hedy\nage {is} 15\n{print} name is age years old\n```\n"
                story_text_2: "`{print}` still works the same, but the `{ask}` command has changed. You need to use a variable in the `{ask}` command as well. It looks like this:\n"
                start_code: '{print} hello world!'
            3:
                story_text: "In level 3 you can make a list. You can let the computer choose something random from the list. You do that with `{at} {random}`.\n"
                start_code: '{print} Здравствуй мир!'
            4:
                start_code: "{print} 'Привет, мир'"
                story_text: "На уровне 4 `{ask}` и `{print}` изменились.\n\nВы должны заключить текст, который хотите напечатать, в кавычки.\n\nЭто полезно, потому что теперь вы можете печатать все слова, которые хотите. Также слова, которые вы использовали для хранения чего-либо с помощью `{is}`.\n\nБольшинство языков программирования также используют кавычки при печати, так что мы становимся на шаг ближе к настоящему программированию!\n"
                example_code: "```\n{print} 'You need to use quotation marks from now on!'\nanswer {is} {ask} 'What do we need to use from now on?'\n{print} 'We need to use ' answer\n```\n"
            18:
                start_code: |-
                    имя = 'Хеди'
                    {print}('Меня зовут ', имя)
                story_text: |-
                    We arrived at real Python code! That means we need to use parentheses with {print} and {range} from now on.

            5:
                start_code: "имя {is} {ask} 'как тебя зовут?'\n{if} имя {is} Хеди {print} 'круто!' {else} {print} 'meh'"
                story_text: "На 5 уровне есть что-то новенькое, `{if}`! С помощью `{if}` ты можешь выбирать между двумя разными опциями.\nЭтот код выводит \"nice\" если ты введешь \"Hedy\" в качестве имени, а если ты введешь что-либо другое, выведется \"boo!\"\n`{ask}` и `{print}` работают также, как они работали на 4 уровне.\n"
                example_code: "```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'\n```\n"
            7:
                start_code: "{repeat} 3 {times} {print} 'Hedy is fun!'"
                story_text: "Уровень 7 добавляет команду `{repeat}`. `{repeat}` можно использовать для многократного выполнения одной строки кода.\n"
                example_code: "```\n{repeat} 3 {times} {print} 'Hedy is fun!'\n```\n"
            8:
                start_code: "{repeat} 5 {times}\n    {print} 'Hello folks'\n    {print} 'Это будет напечатано 5 раз'"
                story_text: "`{ask}` и `{print}` по-прежнему работают так, как вы знаете. Но `{if}`, `{else}`, `{pressed}` и `{repeat}` изменились!\nТеперь вы можете группировать несколько строк вместе, но вам придется *отступать* в коде.\nЭто означает ставить четыре пробела в начале строки. Вы также должны делать отступ, когда хотите создать блок из одной строки.\n"
                example_code: "Вот как теперь работает команда `{repeat}`:\n```\n{repeat} 5 {times}\n    {print} 'Привет всем'\n    {print} 'Это все повторяется 5 раз'\n```\nВот как теперь работают команды `{if}` и `{else}`:\n\n```\nname {is} {ask} 'Как вас зовут?'\n{if} name {is} Hedy\n    {print} 'Добро пожаловать, Хеди'\n    {print} 'Вы можете играть на своем компьютере!'\n{else}\n    {print} 'INTRUDER!'\n    {print} 'Вы не можете использовать этот компьютер!'\n```\n"
            9:
                start_code: "{repeat} 3 {times}\n    еда = {ask} 'Что вы хотите?'\n    {if} еда {is} пицца\n        {print} 'отлично!'\n    {else}\n        {print} 'пицца лучше'"
                story_text: "На этом уровне вы можете не только использовать несколько строк с `{if}` и `{repeat}`, но и соединять их вместе!\nВ примере вы видите команду `{if}` внутри команды `{repeat}`. Допускается и обратное, и `{if}` также разрешено вводить в `{if}`, а `{repeat}` - в `{repeat}`.\nПопробуйте!\n"
                example_code: "```\n{repeat} 3 {times}\n    еда = {ask} 'What do you want?'\n    {if} еда {is} pizza\n        {print} 'nice!'\n    {else}\n        {print} 'pizza is better'\n```\n"
            10:
                start_code: "животные {is} собака, кошка, рыба-глобус\n{for} животное {in} животные\n  {print} 'Я люблю' животное"
                story_text: "На этом уровне мы изучаем новый код под названием `{for}`. С помощью `{for}` вы можете создать список и использовать все элементы.\n`{for}` создает блок, как `{repeat}` и `{if}`, поэтому все строки в блоке должны начинаться с пробелов."
                example_code: "```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal\n```\n"
            11:
                start_code: "{for} счетчик {in} {range} 1 {to} 5\n    {print} счетчик"
                story_text: "`{print}` работает точно так же, но мы добавляем новую форму `{for}`. Теперь вы можете написать `{for} counter {in} {range} 1 {to} 5` вместо `{repeat} 5 {times}` и использовать `counter` в своей программе.\nПопробуйте это сделать и посмотрите, что получится! Не забывайте использовать отступы после утверждений `{for}` и `{if}` (Это означает начинать предложение с четырех пробелов)."
            13:
                start_code: "имя = {ask} 'как вас зовут?'\nвозраст = {ask} 'каков ваш возраст?'\n{if} имя {is} 'Хеди' {and} возраст {is} 2\n    {print} 'Ты настоящая Хеди!'"
                story_text: "Сейчас мы изучим `{and}` и `{or}`! Если вы хотите проверить два утверждения, вам не обязательно использовать два {if}, но можно использовать `{and}` и `{or}`. Если вы используете `{and}`, оба утверждения, слева и справа от `{and}`, должны быть истинными. Можно также использовать `{or}`. Тогда только одно утверждение должно быть верным."
                example_code: "```\nимя = {ask} 'как вас зовут?'\nвозраст = {ask} 'какой ваш возраст?'\n{if} имя {is} 'Хеди' {and} возраст {is} 2\n    {print} 'Ты настоящая Хеди!'\n```\n"
            14:
                start_code: "возраст = {ask} 'Сколько тебе лет?'\n{if} возраст < 13\n    {print} 'Ты младше меня!'\n{else}\n    {print} 'Ты старше меня!'"
                story_text: "Сейчас мы познакомимся с новыми предметами. Возможно, вы уже знаете их из математики: `<` и `>`.\nС помощью `<` проверяется, меньше ли первое число второго, например, возраст `<` 12 проверяется, меньше ли возраст 12.\nЕсли вы хотите проверить, меньше или равно ли первое число второму, вы можете использовать `<=`, например, возраст `<=` 11.\n `>` проверяет, больше ли первое число второго, например points `>` 10 проверяет, больше ли points 10.\nЕсли вы хотите проверить, больше или равно ли первое число второму, вы можете использовать `>=`, например points `>=` 11.\nЭти сравнения используются в `{if}`, например, так:\n"
                example_code: "```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n"
            15:
                start_code: "ответ = 0\n{while} ответ != 25\n    ответ = {ask} 'Сколько будет 5 раз по 5?'\n{print} 'Был дан правильный ответ'"
                story_text: "Мы изучим новый цикл - цикл `{while}`! Мы продолжаем цикл до тех пор, пока утверждение истинно.\nПоэтому не забывайте менять значение в цикле.\n\nВ коде примера мы продолжаем цикл до тех пор, пока не будет получен правильный ответ.\nЕсли правильный ответ так и не будет получен, цикл не завершится!"
                example_code: "```\nanswer = 0\n{while} answer != 25\n    answer = {ask} 'Сколько будет 5 раз по 5?'\n{print} 'Был дан правильный ответ'\n```\n"
            16:
                start_code: "фрукты = ['яблоко', 'банан', 'вишня']\n{print} фрукты"
                story_text: "Мы будем создавать списки, как в Python, с квадратными скобками вокруг списков! Мы также сохраним кавычки вокруг каждого элемента, как мы учили на предыдущих уровнях.\nВы также можете использовать квадратные скобки, чтобы указать место в списках."
                example_code: "```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
            17:
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Готов или нет, но я иду!'
                story_text: |-
                    Now we are going to change indentation a little bit. Every time that we need an indentation, we need `:` at the line before the indentation.

                    In this level you can also use a new command: `{elif}`. `{elif}` is short for {else} {if} and you need it when you want to make 3 (or more!) options.
                    Check it out!
    story:
        name: История
        levels:
            3:
                example_code_2: "```\n{print} Он слышит звук\nживотные {is} 🐿, 🦔, 🦇, 🦉\nживотные {is} {ask} Как ты думаешь, что это?\n{add} животное {to_list} животные\n{print} это было животное {at} {random}\n```\n"
                story_text_3: "Вот пример команды `{remove}` в вашей истории\n\nМожете ли вы использовать 3 новые команды `{at} {random}`, `{add} {to}` и `{remove} {from}` в своей собственной истории?\n"
                start_code: '{print} Ваша история'
                story_text: "На уровне 3 вы можете сделать свою историю более увлекательной. Вы можете использовать случайность для любого монстра, животного или другого препятствия, например, так:\n"
                example_code: "```\nживотные {is} 🦔, 🐿, 🦉, 🦇\n{print} Теперь он слышит звуки животные {at} {random}\n```\n"
                story_text_2: "Команда `{add}` также может пригодиться в вашей истории.\n"
                example_code_3: "```\n{print} His backpack got way too heavy.\n{print} Inside were a bottle of water, a flashlight and a brick.\nbag {is} water, flashlight, brick\ndump {is} {ask} Which item should he dump?\n{remove} dump {from} bag\n```\n"
            1:
                story_text: "На уровне 1 вы можете создать историю с другим главным героем, которого вы вводите сами.\n\nВ первой строке используйте `{ask}` и спросите, кто будет главным героем истории.\n\nПосле этой первой строки начните с `{print}`, если предложение нужно напечатать.\nВы используете `{echo}`, если хотите, чтобы главный герой был в конце предложения.\n"

                example_code: "```\n{ask} The main character of this story is\n{print} The main character is now going to walk in the forest\n{echo} He's a bit scared,\n{print} He hears crazy noises everywhere\n{print} He's afraid this is a haunted forest\n```\n"
                start_code: '{print} Ваша история начинается здесь'
                story_text_2: "Можете ли вы создать свою собственную историю в Hedy, используя `{print}`, `{ask}` и `{echo}`?\n"
            2:
                story_text: "На уровне 2 вы можете сделать свой рассказ более интересным. Теперь имя вашего главного героя может находиться в любом месте предложения.\n\nПравда, для этого вам придется немного доработать программу. Теперь вы должны сначала назвать имя своего главного героя.\n\nЗатем вы можете поместить это имя в любое место в предложении.\n"
                example_code: "```\nname {is} {ask} What is the name of the main character?\n{print} name is now going to run in the woods\n{print} name is a bit scared\n{print} Suddenly he hears a crazy noise...\n{sleep}\n{print} name is afraid this is a haunted forest\n```"
                start_code: '{print} Ваша история'
                story_text_2: "### Exercise\nNow it's time to add variables to your own story that you've made in the previous level.\nGo to 'My programs', look for your level 1 story adventure and copy the code. Paste the code in your input screen in this level.\n\nThis code won't work in this level, because you have not used variables yet.\nChange the `{ask}` commands and `{echo}` commands in your code to the correct form that you've learned in this level.\n\n**Extra** Add a sleep command to your code to build up tension in your story.\n"
            4:
                story_text: "Возможно, вы заметили, что в предыдущих уровнях все еще существует проблема. Вы пытались напечатать предложение, содержащее слово имя? Например, `{print}` моё имя есть имя.\nВы можете решить эту проблему в этом уровне. Вы должны использовать кавычки для всего, что собираетесь напечатать.\n\n### Упражнение\nСкопируйте код примера и сделайте так, чтобы он работал, добавив кавычки в строки.\n\n### Упражнение 2\nВернитесь на предыдущий уровень и скопируйте код вашей истории. Заставьте код работать на этом уровне, добавив кавычки в нужных местах.\nПомните: Переменные в вашей истории должны находиться за пределами кавычек. Так же, как во второй строке кода примера. В этой строке имя переменной находится вне кавычек.\n"
                example_code: "```\nимя {is} Ганс\n{print} Имя главного героя - _ имя\n{print} имя _ сейчас собирается гулять по лесу _\n{print} имя _ немного боится _\nживотные {is} 🦔, 🐿, 🦉, 🦇.\n{print} Он слышит звуки _ животных {at} {random}\n{print} имя _ боится, что это лес с привидениями.\n```\n"
                start_code: "{print} 'Ваша история будет напечатана здесь!'"
            5:
                story_text: "На этом уровне вы можете запрограммировать различные концовки, которые сделают вашу историю еще более увлекательной.\n\nПридумайте две концовки для вашей истории, например:\n\n- Принцесса гуляет по лесу.\n- Она сталкивается с чудовищем\n\n- Счастливый конец: Она берет свой меч, и чудовище быстро убегает.\n- Плохая концовка: Монстр съедает принцессу\n\nВы также можете сделать так, чтобы имя можно было вводить повторно. Это работает так же, как и в предыдущих уровнях. Вы можете объединить это с `{if}`, и тогда у вас уже получится целая программа!\n"
                example_code: "```\nname {is} {ask} 'Who is walking in the forest?'\n{print} name 'walks through the forest'\n{print} name 'encounter a monster'\nend {is} {ask} 'Would you like a good or a bad ending?'\n{if} end {is} good {print} name 'takes the sword and the monster quickly runs away'\n{else} {print} 'The monster eats' name\n```\n"
                start_code: "{print} 'Здесь начнется ваша история!'"
            7:
                story_text: "В рассказе кто-то произносит слова несколько раз. Например, когда кто-то зовет на помощь или поет песню.\nВы можете вставить такие повторы в свой рассказ, на этом уровне с `{repeat}`.\n\nМожете ли вы создать свою собственную историю с повторами?\n"
                example_code: "```\n{print} 'The prince kept calling for help'\n{repeat} 5 {times} {print} 'Help!'\n{print} 'Why is nobody helping me?'\n```\n"
                start_code: "{repeat} 5 {times} {print} 'Help!'"
            8:
                story_text: "В этом уровне вы можете использовать несколько строк в командах `{if}`, таким образом вы можете улучшить счастливый или грустный конец!\n\n### Упражнение 1\nВ примере кода показаны две разные концовки: одна, где герои прыгают в машину времени, и другая, где они этого не делают.\nЗаполните пробелы, используя как минимум одно предложение для каждой концовки.\n**(дополнительно)** Сделайте историю длиннее. Что происходит в рассказе? Вы также можете добавить второй `{ask}` с различными вариантами.\n\n### Упражнение 2\nВернитесь к своим сохраненным программам, выберите свою программу истории из уровня 5. Теперь напишите хорошую и плохую концовку длиной не менее трех строк каждая!\n"
                example_code: "```\n{print} 'OH NO! The T-rex is closing in!'\nend = {ask} 'Do you want a happy or a sad ending?'\n{if} end {is} happy\n    {print} 'Just in time Richard jumps back into the time machine!'\n    {print} 'Michael types in the code and...'\n    {print} '💥ZAP!💥'\n    {print} 'They are back in their garage'\n{else}\n    {print} 'Michael yells COME ON RICHARD! RUN FASTER!'\n    {print} 'But Richard is too slow...'\n    {print} 'The T-rex closes in and eats him in one big bite!🦖'\n```\n"
                start_code: '# разместите здесь свой код'
            9:
                story_text: "На этом уровне вы можете использовать вложенность, чтобы поместить команды `{if}`, `{repeat}` или `{for}` внутри других команд `{if}`, `{repeat}` или `{for}`. Это дает вам множество возможностей и действительно помогает сделать вашу историю интерактивной.\n"
                example_code: "```\n{print} 'Robin is walking downtown'\nlocation = {ask} 'Is Robin going into a shop, or does she go home?'\n{if} location {is} shop\n    {print} 'She enters the shop.'\n    {print} 'Robin sees an interesting looking book'\n    book = {ask} 'Does Robin buy the book?'\n    {if} book {is} yes\n        {print} 'Robin buys the book and goes home'\n    {else}\n        {print} 'Robin leaves the shop and goes home'\n{else}\n    {print} 'Robin goes home'\n```\n"
                start_code: '# разместите здесь свой код'
            10:
                story_text: "На этом уровне вы можете использовать команду {for} в своем рассказе. Таким образом, вы можете легко запрограммировать детскую книгу \"Бурый медведь, бурый медведь, что ты видишь\"\n\n### Задание\n\nПосмотрите на  <a href=\"https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf\">рассказ</a> если вы его не видели раньше и убедитесь что ваш рассказ напечатан так же как и в книге.\n"
                example_code: "```\nanimals = red bird, black sheep, green frog, yellow duck, little child\n{print} 'brown bear'\n{print} 'brown bear'\n{print} 'What do you see?'\n{for} animal {in} animals\n    {print} 'I see a ' animal ' looking at me'\n    {print} animal\n    {print} animal\n    {print} 'What do you see?'\n{print} 'I see all the animals looking at me!'\n```\n"
                start_code: '# разместите здесь свой код'
            12:
                story_text: "На этом уровне вы можете использовать кавычки для сохранения нескольких слов в переменной."
                example_code: "```\nname = 'The Queen of England'\n{print} name ' was eating a piece of cake, when suddenly...'\n```\n"
                start_code: '# разместите здесь свой код'
            13:
                story_text: "Используя команды `{and}` и `{or}`, вы можете сократить свои истории. Например, посмотрите историю о драконе.\n\nСможете ли вы создать свою собственную приключенческую мини-игру, подобную этой?\n"
                example_code: "```\nsword = 'lost'\ngame = 'on'\n{print} 'Our hero is walking through the forest'\n{print} 'The path splits two ways'\n{for} i {in} {range} 0 {to} 2\n    {if} game {is} 'on'\n        path = {ask} 'Which path should she choose?'\n        {if} path {is} 'left' {and} sword {is} 'found'\n            {print} 'Our hero comes across a dragon!'\n            {print} 'Luckily our hero has a sword to defeat the beast!'\n            game = 'over'\n        {if} path {is} 'left' {and} sword {is} 'lost'\n            {print} 'Our hero finds a dragon, but she doesnt have any weapons!'\n            {print} 'Our hero is beaten by the dragon...'\n            {print} 'Try again'\n            game = 'over'\n        {if} path {is} 'right' {and} sword {is} 'found'\n            {print} 'You have already found the sword. There is nothing left here.'\n            {print} 'She walks back'\n        {if} path {is} 'right' {and} sword {is} 'lost'\n            {print} 'Our hero finds a sword'\n            {print} 'This could come in very handy'\n            sword = 'found'\n```\n"
                start_code: '# разместите здесь свой код'
            15:
                story_text: "Использование цикла `{while}` может сделать ваши истории более интересными. Например, вы можете использовать `{while} game {is} 'on'`, чтобы можно было играть до тех пор, пока игра не закончится.\nИли вы можете использовать `{while} sword {is} 'lost'`, чтобы игрок не мог продолжить игру, пока не найдет что-нибудь.\n"
                example_code: "```\nkeys = 'lost'\n{print} 'You are standing in your garden and you have lost your keys.'\n{print} 'Where do you want to look for them?'\n{print} 'You can choose: tree, flowerbed, rock, postbox'\n{while} keys == 'lost'\n    location = {ask} 'Where do you want to look?'\n    {if} location == 'flowerbed'\n        {print} 'Here they are!'\n        keys = 'found'\n    {else}\n        {print} 'Nope they are not at the ' location\n{print} 'Now you can enter the house!'\n```\n"
                start_code: '# разместите здесь свой код'
            18:
                story_text: "We are going to print another story, but now we have to use brackets with `{print}`.\n\n### Exercise 1\nCreate a story of at least 5 sentences. You don't have to use 'name' just yet.\n"
                story_text_2: "### Exercise 2\nWe have already prepared an `{input}` for you. First, use the `name` variable in your story.\nThen add a second `{ask}` and use that variable as well.\nTip: Remember the commas in a `{print}` between text and variables!\n"
                example_code: "```\n{print}('Welcome to this story!')\n```\n"
                example_code_2: "```\nnaam = {input}(\"What's your name?\")\n{print}('Welcome to this story!')\n```\n"
                start_code: '# Schrijf jouw code hier'
        description: История
        default_save_name: История
    parrot:
        levels:
            3:
                story_text: "Научите своего попугая новому слову с помощью `{add}`.\n### Задача\nКак заставить попугая произносить несколько слов?\n"
                start_code: '# разместите здесь свой код'
                example_code: "```\nслова {is} squawk, Hedy\n{print} Дрессируйте своего попугая!\nnew_word {is} {ask} Какому слову вы хотите их научить?\n{add} новое_слово {to_list} слова\n{print} 🧒 Скажи новое_слово, Хеди!\n{print} 🦜 слова {at} {random}\n```\n"
            1:
                story_text: "Создайте своего собственного онлайн-попугая, который будет копировать вас!\n"
                example_code: "```\n{print} Я попугай Хеди\n{ask} Как тебя зовут?\n{echo}\n{echo}\n```\n"
                start_code: '{print} Я попугай Хейди

                    {ask} Как тебя зовут?

                    {echo}

                    {echo}

                    '
                story_text_2: "### Задача\nСкопируйте код примера в своё поле для ввода нажав на жёлтую кнопку.\nМожете ли вы заставить попугая задать другой вопрос? Заполните пробелы в примере!\n**Дополнительное задание** Вы так же можете научить попугая задавать несколько вопросов. Допишите ещё несколько строк после своего кода.\n"
                example_code_2: "```\n{print} Я попугай Хеди\n{ask} _\n{echo}\n{echo}\n"
            2:
                story_text: "Создайте своего собственного онлайн-попугая, который будет копировать вас!\n"
                example_code: "```\n{print} Я попугай Хеди\nИмя {is} {ask} Как тебя зовут?\n{print} Имя\n{sleep}\n{print} Курлык\n{sleep}\n{print} Имя\n```\n"
                start_code: '{print} Я попугай Хеди!'
                story_text_2: "### Задача\nВы можете использовать переменные, чтобы заставить попугая произносить не только ваше имя. Можете ли вы дописать эту программу?\n"
            5:
                story_text: "Вознаградите своего попугая, если он произнесет правильное слово!\n\n### Задача\nЗакончите код, заполнив 4 пропущенные команды.\n"
                example_code: "```\nслова {is} squawk, Hedy\n{print} 'Дрессируйте своего попугая!'\nnew_word {is} {ask} 'Какому слову вы хотите их научить?'\n{add} new_word {to_list} words\nsaid_word {is} words {at} {random}\n{print} '🧒 Скажи новое_слово, Хеди!'\n{print} '🦜 ' said_word\n_ said_word {is} new_word _ '🧒 Отличная работа, Хеди! 🍪'\n_ _ '🧒 Нет, Хеди! Скажи новое_слово\n```\n"
                start_code: '# разместите свой код здесь'
            4:
                start_code: '# Напишите здесь свой код'
                story_text: "На этом уровне мы должны использовать кавычки с командами `{ask}` и `{print}`.\n\n### Задача\nДопишите код программы, добавив кавычки вместо пробелов.\n"
                example_code: "```\nwords {is} squawk, Hedy\n{print} _ Train your parrot! _\nnew_word {is} {ask} _ Which word do you want to teach them? _\n{add} new_word {to_list} words\n{print} _ 🧒 Say _ new_word _, Hedy!_\n{print} _ 🦜 _ words {at} {random}\n```\n"
        name: Попугай
        description: Создайте своего собственного онлайн-попугая, который будет копировать вас!
        default_save_name: Попугай
    dishes:
        name: Блюда?
        description: Используйте компьютер, чтобы узнать, кто моет посуду (Начните с уровня 2)
        default_save_name: Блюда
        levels:
            3:
                story_text: "Вы всегда расходитесь во мнениях дома по поводу того, кто должен сегодня мыть посуду или менять туалет?\nТогда вы можете позволить компьютеру выбирать очень справедливо. Вы можете запрограммировать это в этом уровне!\nСначала вы составляете список членов вашей семьи. Затем выберите `{at} {random}` из списка.\n"
                example_code: "```\nлюди {is} mom, dad, Emma, Sophie\n{print} люди {at} {random}\n```\n"
                story_text_2: "Не хочется самому мыть посуду? Взломайте программу, удалив свое имя из списка с помощью команды `{remove}` `{from}`.\n"
                start_code: '{print} Кто моет посуду?'
            4:
                story_text: "С помощью кавычек вы можете сделать планирование мытья посуды более красивым.\nНа этот раз пример кода не совсем полный.\n\nМожете ли вы завершить код, заполнив пропуски? Каждый пробел должен быть заменен одним словом или символом.\n\nСовет: Не забывайте о кавычках!\n"
                example_code: "```\nлюди {is} mom, dad, Emma, Sophie\n{print} _ the dishes are done by _\n{sleep}\n{print} люди {at} _\n```\n"
                start_code: "{print} 'Кто моет посуду?'"
            5:
                story_text: "С помощью сайта `{if}` вы можете получить больше удовольствия от выбора в программе. Вы можете сделать так, чтобы ваша программа реагировала на выбор, который сделал компьютер.\n\nМожете ли вы дописать код так, чтобы он печатал \"жаль\", когда наступает ваша очередь, а в противном случае - \"да!\"?\nНе забывайте о кавычках!\n"
                example_code: "```\nлюди {is} мама, папа, Эмма, Софи\nпосудомоечная машина {is} люди {at} {random}\n{if} посудомоечная машина {is} Софи {print} _ слишком плохо, что я должна мыть посуду _ \n{else} {print} 'к счастью, посуды нет, потому что' _ 'уже моет посуду'\n```\n"
                start_code: "{print} 'Кто моет посуду?'"
            6:
                story_text: "Как часто каждый будет мыть посуду? Справедливо ли это? Вы можете посчитать это на этом уровне.\n"
                example_code: "```\nлюди = mom, dad, Emma, Sophie\nemma_washes = 0\ndishwasher = люди {at} {random}\n{print} 'The dishwasher is' dishwasher\n{if} dishwasher {is} Emma emma_washes = emma_washes + 1\n{print} 'Emma will do the dishes this week' emma_washes 'times'\n```\n\nNow you can copy lines 3 to 5 a few times (e.g. 7 times for a whole week) to calculate for a whole week again.\nDo you make the code for the whole week?\n"
                story_text_2: "Если вам крайне не повезло, предыдущая программа может выбрать вас для мытья посуды на всю неделю! Это несправедливо!\nЧтобы создать более справедливую систему, вы можете использовать команду `{remove}`, чтобы удалить выбранного человека из списка. Таким образом, вам не придется снова мыть посуду до тех пор, пока все не отмоют свою очередь.\n\nПонедельник и вторник готовы! Можете ли вы добавить остальные дни недели?\nИ... можете ли вы придумать решение для случая, когда список пуст?\n"
                example_code_2: "```\nлюди = мама, папа, Эмма, Софи\nпосудомоечная машина = люди {at} {random}\n{print} 'В понедельник посуду моет: ' посудомоечная машина\n{remove} посудомоечная машина {from} люди\nпосудомоечная машина = люди {at} {random}\n{print} 'Вторник посуду моет: ' посудомоечная машина\n{remove} посудомоечная машина {from} люди\nпосудомоечная машина = люди {at} {random}\n```\n"
                start_code: "{print} 'Кто моет посуду?'"
            7:
                story_text: "На сайте `{repeat}` вы можете повторять фрагменты кода. С его помощью можно рассчитать, кто будет мыть посуду в течение всей недели.\n"
                example_code: "```\nлюди = mom, dad, Emma, Sophie\n{repeat} _ _ {print} 'the dishwasher is' _\n```\n"
                start_code: "{print} 'Кто моет посуду?'"
            10:
                story_text: "На этом уровне вы сможете сделать еще более совершенный сарай для мытья посуды.\n"
                example_code: "```\nдни = понедельник, вторник, среда, четверг, пятница, суббота, воскресенье\nимена = мама, папа, Эмма, Софи\n_ день _ дни\n    {print} имена {at} {random} ''моет посуду в '' день\n```\n"
                start_code: '# разместите здесь свой код'
    dice:
        levels:
            6:
                start_code: "{print} 'Что покажет кубик на этот раз?'"
                story_text: "Здесь вы можете снова сделать кубик земляного червя, но теперь вы также можете подсчитать, сколько очков выпало.\nВы, наверное, знаете, что червь считает 5 очков для земляных червей. Теперь после броска вы можете сразу подсчитать, сколько очков вы выбросили.\nВот код для подсчета очков для одного кубика:\n\n### Exercise\nМожете ли вы сделать код так, чтобы получить общее количество очков для 8 кубиков? Для этого нужно вырезать и вставить несколько строк кода.\n"
                example_code: "```\nварианты = 1, 2, 3, 4, 5, земляной\nочки = 0\nбросок = варианты {at} {random}\n{print} 'вы бросили' бросок\n{if} бросок {is} земляной очки = очки + 5 {else} очки = очки + бросок\n{print} 'это' очки ' точка'\n```\n"
                example_code_2: "\nУдалось ли вам рассчитать счет для 8 кубиков? Это потребовало много вырезания и вставки, верно? В 7 уровне мы сделаем это еще проще!\n"
            3:
                story_text: "На этом уровне мы можем выбирать из списка. С помощью этого мы можем позволить компьютеру выбрать одну сторону кубика.\nПосмотрите на игры, которые есть у вас дома в шкафу.\nЕсть ли среди них игры с (специальным) кубиком? Вы также можете скопировать его с помощью этого кода.\nНапример, кубик игры Earthworms с цифрами от 1 до 5 и земляным червем на нем.\n\n![Кубик игры \"Земляные черви\" с цифрами от 1 до 5 и земляным червем на нем](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)\n"
                example_code: "```\nchoices {is} 1, 2, 3, 4, 5, earthworm\n{print} choices {at} {random}\n```\n"
                start_code: '{print} Что покажет кубик на этот раз?'
                story_text_2: "### Задача\nКубики в примере выше - это кубики для конкретной игры. Можете ли вы сделать обычные игральные кости?\nИли другие специальные кубики из другой игры?\n"
                example_code_2: "```\nвыбор {is} _\n```\n"
            4:
                story_text: "В этом уровне мы можем составлять предложения со значением кубика в предложении, разумеется, с кавычками.\nНа этот раз пример кода не совсем полный. Сможете ли вы закончить код?\n"
                start_code: "{print} 'Что покажет кубик на этот раз?'"
            5:
                story_text: "В этом уровне вы также можете сделать кубик еще раз, используя сайт `{if}`.\nДополните код примера так, чтобы в коде было написано \"You can stop throwing\", как только вы бросите земляного червя.\n\nНо, возможно, вы хотите воссоздать кубик из совершенно другой игры. Это тоже прекрасно! Тогда придумайте свою собственную реакцию. Например, \"да\" для 6 и \"жаль\" для чего-то {else}.\n"
                example_code: "```\nchoices {is} 1, 2, 3, 4, 5, earthworm\nthrow {is} _\n{print} 'you have' _ 'thrown'\n{if} _ {is} earthworm {print} 'You can stop throwing.' _ {print} 'You have to hear it again!'\n```\n"
                start_code: "{print} 'Что покажет кубик на этот раз?'"
            7:
                story_text: "На пятом уровне вы также можете снова сделать кубик. С помощью кода `{repeat}` вы можете легко бросить целую руку игральных костей.\nПопробуйте закончить код примера! Тире должно содержать несколько команд и символов.\n\nНо, может быть, вы хотите сделать совершенно другой кубик? Конечно, вы можете!\n"
                example_code: "```\nchoices = 1, 2, 3, 4, 5, earthworm\n{repeat} _ _ {print} _ _ _\n```\n"
                start_code: "{print} 'Что покажет кубик на этот раз?'"
            10:
                story_text: "Все слишком долго бросают кубики? В этом уровне вы можете позволить Хеди бросить все кубики сразу!\nСможете ли вы заполнить правильную строку кода на пустых местах?\n"
                example_code: "```\nигроки = Энн, Джон, Джесси\nварианты = 1, 2, 3, 4, 5, 6\n_\n    {print} игрок ' бросает ' выбор {at} {random}\n   {sleep}\n```\n"
                start_code: '# разместите здесь свой код'
            15:
                story_text: "В этой игре вам нужно бросить 6 костей за как можно меньшее количество попыток.\n"
                example_code: "```\noptions = 1, 2, 3, 4, 5, 6\n{print} 'Throw 6 as fast as you can!'\nthrown = 0\ntries = 0\n{while} thrown != 6\n    thrown = options {at} {random}\n    {print} 'You threw ' thrown\n    tries = tries + 1\n{print} 'Yes! You have thrown 6 in ' tries ' tries.'\n```\n"
                start_code: '# разместите здесь свой код'
        name: Кубики
        description: Сделайте свои собственные кубики
        default_save_name: Кубики
    rock:
        levels:
            5:
                start_code: "{print} 'Добро пожаловать в свой собственный камень-ножницы-бумага!'"
                story_text: "В этом уровне мы можем определить, кто победил.\nДля этого вам понадобится новый код `{if}`.\n\nСохраните свой выбор с именем choice и выбор компьютера как computer choice.\nЗатем вы можете использовать `{if}`, чтобы увидеть {if}, одинаковые они или разные.\nВы закончите код?\n"
                example_code: "```\noptions {is} rock, paper, scissors\ncomputer_choice {is} _\nchoice {is} {ask} 'What do you choose?'\n{print} 'you chose ' _\n{print} 'computer chose ' _\n{if} _ {is} _ {print} 'tie!' {else} {print} 'no tie'\n```\n\nFill in the correct code on the blanks to see {if} it is a draw.\n"
            1:
                story_text: "На уровне 1 вы можете начать с игры \"Камень, ножницы, бумага\"\n\nС помощью команды `{ask}` вы можете сделать выбор, а с помощью `{echo}` вы можете повторить этот выбор.\n"
                example_code: "```\n{print} Что ты выберешь?\n{ask} Выбери камнь, бумагу или ножницы\n{echo} Твой выбор был:\n```\n"
                start_code: '{print} Добро пожаловать в свой собственный камень-ножницы-бумага!

                    {ask} Что ты выберешь?

                    '
                story_text_2: "### Задача\nКроме слов вы можете писать и эмодзи: ✊✋✌\nМожете ли вы создать код используя эмодзи?\n"
                example_code_2: "```\n{print} Что ты выберешь?\n{ask} Выбери из _\n{echo} Итак, твой выбор был:\n```\n"
            2:
                story_text: "В этом уровне вы можете попрактиковаться в использовании переменных, чтобы в следующем уровне вы могли провести игру \"Камень, ножницы, бумага\"!\n"
                example_code: "```\n {is} {ask} камень, бумага или ножницы?\n{print} Я выбираю _\n```\n"
                start_code: '# разместите здесь свой код'
            3:
                story_text: "\nВ этом уровне мы можем вводить списки и выбирать из них предметы.\nСначала вы составляете список с помощью `{is}`. Затем вы можете позволить компьютеру выбрать что-то из списка с помощью `{at} {random}`{random}`.\nНапример, вы можете позволить компьютеру выбрать из списка \"камень, бумага и ножницы\"\n"
                example_code: "```\nchoices {is} rock, paper, scissors\n{print} choices {at} {random}\n```\n"
                start_code: '{print} Добро пожаловать в свой собственный камень-ножницы-бумага!'
                story_text_2: "### Задача\nСкопируйте код примера и заполните в нём проблелы, чтобы добавить ещё одного игрока.\n\n**Дополнительное задание** Сейчас игроков зовут \"игрок 1\" и \"игрок 2\". Можете добавить несколько команд `{ask}` (конечно же с переменными), чтобы дать игрокам имена? \nТаким образом, вы сможете получить вывод вроде `Ваня выбрал... бумагу`\n"
                example_code_2: "```\nвыбор {is} камень, бумага, ножницы\n{print} игрок 1 выбирает... выбор {at} {random}\n{print} игрок 2 _\n```\n"
            4:
                story_text: "На этом уровне мы можем дальше программировать камень, бумагу, ножницы. Но {if} вы хотите добавить текст, здесь тоже нужно использовать кавычки.\nЗавершите код, введя правильные команды или символы на подчеркиваниях?\n"
                start_code: "{print} 'Добро пожаловать в свой собственный камень-ножницы-бумага!'"
            9:
                story_text: "В этом уровне вы можете запрограммировать целую игру \"Камень, ножницы, бумага\" путем вложения команд `{if}`. Сможете ли вы закончить код?\n"
                example_code: "```\nchoices {is} rock, paper, scissors\nyour_choice {is} {ask} 'What do you choose?'\n{print} 'You choose ' your_choice\ncomputer_choice {is} choices {at} {random}\n{print} 'The computer chooses ' computer_choice\n{if} computer_choice {is} your_choice\n    {print} 'Tie'\n{if} computer_choice {is} rock\n    {if} your_choice {is} paper\n        {print} 'You win!'\n    {if} your_choice {is} scissors\n        {print} 'You lose!'\n# finish this code\n```\n"
                start_code: '# разместите здесь свой код'
            10:
                story_text: "Лень играть в игру самому? Позвольте Хеди сыграть за вас!\nВам нужно только заполнить имена игроков.\n"
                example_code: "```\nвыбор = камень, бумага, ножницы\nигроки = _\n{for} игрок {in} игроки\n     {print} игрок ' выбирает ' выбор {at} {random}\n```\n"
                start_code: '# разместите здесь свой код'
            13:
                story_text: "С помощью команды `{and}` вы можете сократить свой код \"Камень, ножницы, бумага\"! Посмотрите приведенный ниже пример кода и попробуйте закончить его.\n"
                example_code: "```\nварианты = 'камень', 'бумага', 'ножницы'\nyour_choice = {ask} 'Что вы выбираете?'\nкомпьютерный_выбор = варианты {at} {random}\n{print} 'Вы выбираете ' your_choice\n{print} 'Компьютер выбирает ' computer_choice\n{if} computer_choice {is} your_choice\n    {print} 'галстук'\n{if} computer_choice {is} 'камень' {and} your_choice {is} 'бумага'\n    {print} 'You win!'\n{if} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'\n    {print} 'Компьютер победил!'\n_\n```\n"
                start_code: '# разместите здесь свой код'
            15:
                story_text: "Играйте, пока не победите компьютер! Но сначала закончите код примера...\n"
                example_code: "```\nпобеда = 'нет'\nварианты = 'камень', 'бумага', 'ножницы'\n{while} выиграл == 'нет'\n    your_choice = {ask} 'Что вы выбираете?'\n    компьютерный_выбор = варианты {at} {random}\n    {print} 'вы выбрали ' ваш_выбор\n    {print} 'компьютер выбрал' computer_choice\n    {if} компьютерный_выбор == ваш_выбор\n        {print} 'Ничья!'\n    {if} computer_choice == 'rock' {and} your_choice == 'scissors'\n        {print} 'Вы проиграли!'\n    {if} компьютерный_выбор == 'камень' {and} ваш_выбор == 'бумага'\n        {print} 'Вы выиграли!'\n        выиграл = 'да'\n_\n```\n"
                start_code: '# разместите здесь свой код'
        name: Камень, ножницы, бумага
        description: Создайте свою собственную игру "камень, ножницы, бумага"
        default_save_name: Камень
    calculator:
        levels:
            9:
                start_code: "{print} 'Добро пожаловать в этот калькулятор!'"
                story_text: "На предыдущих уровнях вы научились создавать калькулятор, а на этом уровне вы можете расширить этот код и превратить его в небольшую математическую игру.\nСможете ли вы закончить строку 10, чтобы программа заработала?\n"
                example_code: "```\nоценка = 0\n{repeat} 10 {times}\n    числа = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    число1 = числа {at} {random}\n    номер2 = числа {at} {random}\n    правильный_ответ = число1 * число2\n    {print} 'Сколько будет ' число1 ' умножить на ' число2 '?\n    ответ = {ask} 'Введите свой ответ здесь...'\n    {print} 'Your answer is' answer\n    {if} _ {is} _\n        оценка = оценка + 1\n{print} 'Отличная работа! Ваша оценка... ' оценка ' из 10!\n```\n"
            10:
                start_code: '# разместите здесь свой код'
                story_text: "Эта игра на калькуляторе поможет вам отработать таблицу умножения!\n### Задача\nМожете ли вы добавить больше чисел в список, чтобы отработать всю таблицу умножения до 10?\n"
                example_code: "```\nnumbers = 1, 2, 3\n{for} number1 {in} numbers\n    {for} number2 {in} numbers\n        answer = {ask} 'How much is ' number2 ' times ' number1 '?'\n        correct = number1 * number2\n        {if} answer {is} correct\n            {print} 'Great job!'\n        {else}\n            {print} 'Thats wrong. The right answer is ' correct\n```\n"
            6:
                story_text: "Теперь, когда вы умеете считать, вы можете сделать калькулятор самостоятельно!\n"
                example_code: "```\nчисло_1 {is} {ask} 'Заполните первое число:'\nчисло_2 {is} {ask} 'Введите второе число:'\nправильный_ответ = число_1 * число_2\n{print} число_1 ' раз ' число_2 ' есть ' правильный_ответ\n```\n"
                story_text_2: "### Задача\nКалькулятор выше рассчитает ответ за вас, но вы также можете составить программу для проверки собственных математических навыков, например, такую:\nЗаполните пробелы, чтобы ответ был полным!\n"
                example_code_2: "```\nправильный_ответ = 11 * 27\nответ = {ask} 'Сколько будет 11 умножить на 27?\n{if} ответ {is} _ {print} 'Хорошая работа!'\n{else} {print} 'Неправильно! Это было ' _\n```\n"
                start_code: "{print} 'Добро пожаловать в этот калькулятор!'"
                story_text_3: "Вы также можете позволить компьютеру самостоятельно выполнять случайные суммы, используя функцию random.\nТаким образом, вы выбираете несколько таблиц для тренировки, и из них всегда получается разная сумма:\n"
            12:
                story_text: "Теперь вы можете сделать калькулятор, который работает для десятичных чисел. Заполните пробелы, чтобы он работал правильно!\n"
                example_code: "```\nnumber1 = {ask} 'Какое первое число?'\nnumber2 = {ask} 'Какое второе число?'\nответ = _\n{print} число1 ' плюс ' число2 ' есть ' ответ\n```\n"
                start_code: '# разместите здесь свой код'
            14:
                story_text: "На этом уровне вы можете запрограммировать игру \"Угадай число\"\n"
                example_code: "```\n{print} 'Guess which number'\nnumbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nnumber = numbers {at} {random}\ngame = 'on'\n{for} i {in} {range} 1 {to} 10\n    {if} game == 'on'\n        guess = {ask} 'Which number do you think it is?'\n        {if} guess > number\n            {print} 'Lower!'\n        {if} guess < number\n            {print} 'Higher!'\n        {if} guess == number\n            {print} 'You win!'\n            game = 'over'\n```\n"
                start_code: '# разместите здесь свой код'
            15:
                story_text: "Вы можете добавить цикл `{while}` в игру-калькулятор, которую вы научились делать в предыдущем уровне.\nЭто гарантирует, что игрок не сможет перейти к следующему вопросу {if} при неправильном ответе.\n"
                example_code: "```\nscore = 0\n{for} i {in} {range} 0 {to} 9\n    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    number1 = numbers {at} {random}\n    number2 = numbers {at} {random}\n    correct = number1 * number2\n    answer = 0\n    {while} answer != correct\n        {print} 'How much is ' number1 ' times ' number2 '?'\n        answer = {ask} 'Fill in your answer:'\n        {print} 'Your answer is ' answer\n    {print} 'Good job!'\n{print} 'You win!'\n```\n"
                start_code: '# разместите здесь свой код'
            11:
                story_text: "With a `{for}` you can simplify tables of multiplication practise program.\n\n### Exercise 1\nImprove the example code such that it prints a nice multiplication table: <br> \"1 times 10 is 10\", \"2 times 10 is 20\", etc.\n\n### Exercise 2\nGo back to your level 10 multiplication code, and modify it so that it uses a `{for}` and `{range}`.\n"
                example_code: "```\nnumber = 10\n{for} i {in} {range} 1 to 10\n    {print} i * number\n```\n"
                start_code: '# place your code here'
            13:
                example_code: "```\nanswer1 = {ask} 'What is 10 times 7?'\nanswer2 = {ask} 'What is 6 times 7?'\n{if} _ _ _ _ _ _ _\n    {print} _\n```\n"
                start_code: '# Schrijf jouw code hier'
                story_text: "\n### Exercise 1\nLet's make the practice program a bit harder. The player now has to answers two questions correctly. Fill out the blanks to complete the program.\n\n### Exercise 2 (extra)\nSometimes, calculations have multiple correct answers. For example, 10 can be divided by 5 and by 2. So the question 'What number divides 10?' can be answered by 2 and by 5.\nAsk for a calculation that has multiple correct answers, ask the player to answer it, and determine if it is correct using `{or}`.\nEmpty the programming field and create your own solution.\n"
        name: Калькулятор
        description: Создайте калькулятор
        default_save_name: Калькулятор
    restaurant:
        levels:
            6:
                start_code: '# разместите здесь свой код'
                story_text: "В этом уровне вы можете использовать математику для подсчета общей стоимости заказа клиента, что может сделать ваш виртуальный ресторан более реалистичным.\n"
                example_code: "\nВы можете сделать простой код ресторана, например, такой:\n```\n{print} 'Добро пожаловать в ресторан Hedys'\n{print} 'Вот наше меню:'\n{print} 'Наши основные блюда - пицца, лазанья или спагетти'\nблюдо = {ask} 'Какое основное блюдо вы бы хотели?'\nцена = 0\n{if} основное {is} пицца цена = 10\n{if} основное {is} лазанья цена = 12\n{if} главная {is} спагетти цена = 8\n{print} 'Вы заказали ' блюдо\n{print} 'Это будет стоить ' цена ' долларов, пожалуйста'\n{print} 'Спасибо, приятного аппетита!'\n```\n"
            12:
                start_code: '# разместите здесь свой код'
                story_text: "Начиная с этого уровня вы можете использовать десятичные числа, чтобы сделать ваше меню более реалистичным.\n\nМожете ли вы придумать код для предоставления 15% скидки своим друзьям и родственникам?\n"
                example_code: "```\nprice = 0\nеда = {ask} 'What would you like to order?'\ndrink = {ask} 'What would you like to drink?'\n{if} еда {is} 'hamburger'\n    price = price + 6.50\n{if} еда {is} 'pizza'\n    price = price + 5.75\n{if} drink {is} 'water'\n    price = price + 1.20\n{if} drink {is} 'soda'\n    price = price + 2.35\n{print} 'That will be ' price ' dollar, please'\n```\n"
            1:
                story_text: "На первом уровне вы сможете создать свой собственный виртуальный ресторан и принимать заказы гостей.\n"
                example_code: "```\n{print} Добро пожаловать в ресторан Хейди 🍟\n_ Что бы вы хотели заказать?\n{echo} Итак, вы хотели бы заказать\n{print} Спасибо за заказ!\n{print} Он уже в пути!\n```\n"
                story_text_2: "### Упражнение\nМожете ли вы придумать больше строк, которые можно добавить в код ресторана? Например, вы можете {ask} гостям, что они хотели бы выпить, сообщить им цену или пожелать приятного аппетита?\n"
                start_code: '# разместите здесь свой код'
            2:
                story_text: "На уровне 2 вы можете расширить свой ресторан, используя переменные. В первом уровне Хеди могла сделать заказ только один раз {echo} и запомнить только то, что было заказано последним.\nТеперь вы можете использовать переменные, и Хеди сможет запомнить и блюда, и начинку!\n"
                example_code: "```\n{print} Добро пожаловать в ресторан Хеди!\n{print} Сегодня мы подаем пиццу или лазанью.\nеда {is} {ask} Что бы вы хотели съесть?\n{print} Отличный выбор! Еда - моя любимая!\nтоппинг {is} {ask} Вы бы хотели мясо или овощи?\n{print} Еда с топпингом уже в пути!\n```\n"
                start_code: '# разместите здесь свой код'
                story_text_2: "### Задача\nСкоприуйте код своего ресторана с предыдущего уровня в окно ввода ниже.\nПоправьте код, заменив команды `{ask}` и `{echo}` и используя переменные так, как вы увидели на этом уровне.\n\nСейчас когде ваш код стал опять рабочим, самое время в него кое-что добавить.\nПосмотрите на последнюю строку в примере: `{print} блюдо с топпингом в пути!`\nВ этой одной строке используются две переменные для того, чтобы создать содержимое заказа.\nТеперь добавьте свой список еды и напитков, заказанных клиентом.\n\n**Дополнительное задание** Теперь, когда вы уже узнали как можно использовать переменные, вы способны использовать сколько угодно переменных в одной строке. Можете добавить больше переменных в свой код, вроде был ли заказ на вынос или для ресторана, оплата картой или наличными, с трубочкой для напитка или без?\n"
            3:
                story_text: "Не можете решить, что хотите съесть на ужин? Вы можете позволить Хеди выбрать за вас!\nПросто добавьте списки ваших любимых (или нелюбимых) блюд, и Хеди сможет случайным образом выбрать ваш ужин.\nВы также можете повеселиться, позволив Хеди выбрать цену вашего ужина! Что вы получите?\n"
                example_code: "```\n{print} Welcome to Hedy's Random Restaurant!\n{print} The only restaurant that will randomly choose your meal and its price for you!\nstarters {is} salad, soup, carpaccio\nmains {is} pizza, brussels sprouts, spaghetti\ndesserts {is} brownies, ice cream, french cheeses\ndrinks {is} cola, beer, water\nprices {is} 1 dollar, 10 dollars, 100 dollars\n{print} You will start with: starters {at} {random}\n{print} Then we'll serve: mains {at} {random}\n{print} And as dessert: desserts {at} {random}\n{print} You will get a drinks {at} {random} to drink\n{print} That will be: prices {at} {random}\n{print} Thank you and enjoy your meal!\n```\n"
                story_text_2: "У вашего клиента есть аллергия или ему не нравятся определенные блюда? Тогда вы можете воспользоваться командой `{remove}`, чтобы удалить его из своего меню.\n"
                example_code_2: "```\n{print} Молочный коктейль \"Тайна\nвкусы {is} клубника, шоколад, ваниль\nаллергия {is} {ask} Есть ли у вас аллергия на какие-либо фалворы?\n_\n{print} Вы получаете молочный коктейль со вкусом {at} {random}.\n```\n"
                start_code: '# разместите здесь свой код'
            4:
                story_text: "На этом уровне вы должны использовать кавычки при использовании команды `{print}` или `{ask}`.\n\nДобавьте кавычки в этот код, чтобы он заработал! Будьте внимательны: переменные не должны заключаться в кавычки.\n"
                example_code: "```\nДобавьте кавычки к этому коду _\n{print} Добро пожаловать в ресторан Hedys!\n{print} Сегодня мы подаем пиццу или лазанью.\nеда {is} {ask} Что бы вы хотели съесть?\n{print} Отличный выбор! Еда - моя любимая!\nтоппинг {is} {ask} Вы бы хотели мясо или овощи?\n{print} Еда с начинкой уже в пути!\nнапитки {is} {ask} Что бы вы хотели выпить с этим?\n{print} Спасибо за ваш заказ.\n{print} Ваша еда и напитки будут доставлены прямо сейчас!\n```\n"
                start_code: '# разместите здесь свой код'
            5:
                story_text: "На этом уровне команда `{if}` позволяет вам `{ask}` задавать вопросы клиентам и давать различные ответы на них.\nВ приведенном ниже примере видно, что вы можете `{ask}` клиенту `{if}`, что он хочет услышать о специальных блюдах, а Хеди может ответить соответствующим образом.\n"
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\nspecial {is} {ask} 'Would you like to hear our specials today?'\n{if} special {is} yes {print} 'Todays special is chicken piri piri and rice.' {else} {print} 'No problem.'\nеда {is} {ask} 'What would you like to eat?'\n{print} 'One ' еда ', coming right up!'\ndrink {is} {ask} 'What would you like to drink with that?'\n{if} drink {is} cola {print} 'Im sorry, we are out of cola!' {else} {print} 'Great choice!'\nanything {is} {ask} 'Would you like anything {else}?'\n{print} 'Let me repeat your order...'\n{print} 'One ' еда\n{if} drink {is} cola {print} 'and...' {else} {print} 'One ' drink\n{if} anything {is} no {print} 'Thats it!' {else} {print} 'One ' anything\n{print} 'Thank you for your order and enjoy your meal!'\n```\n"
                start_code: '# разместите здесь свой код'
            7:
                story_text: "На этом уровне вы узнали, как использовать команду `{repeat}` для повторения строки кода определенное количество раз.\nВы можете использовать это в своем ресторане, чтобы `{ask}` нескольким людям о том, что они хотели бы съесть.\n\nМожете ли вы заполнить пробелы? Хеди нужно повторить этот вопрос столько раз, сколько людей. Так, если есть 5 человек, то вопрос нужно задать 5 раз.\n"
                example_code: "```\n{print} 'Добро пожаловать в ресторан Hedys!'\nлюди = {ask} 'Сколько человек присоединилось к нам сегодня?'\n{repeat} _ {times} еда = {ask} 'Что бы вы хотели съесть?'\n{print} 'Спасибо за ваш заказ! Его сейчас принесут!\n```\n"
                start_code: '# разместите здесь свой код'
            8:
                story_text: "На этом уровне вы можете сделать свой виртуальный ресторан более сложным, повторяя несколько строк кода. Например:\n"
                example_code: "```\n{print} 'Добро пожаловать в ресторан Hedys!'\nлюди = {ask} 'Сколько человек присоединится к нам сегодня?'\n{print} 'Отлично!'\n{repeat} люди {times}\n    еда = {ask} 'Что бы вы хотели заказать?'\n    {print} еда\n{print} 'Спасибо за заказ!'\n{print} 'Приятного аппетита!'\n```\n"
                story_text_2: "### Задача\nКонечно, этот код можно расширить, добавив больше позиций в меню, предложив напитки и/или несколько блюд.\n\n**Дополнительное задание** Добавьте ещё больше вариантов - столько, сколько вам нравится!\n"
                start_code: '# разместите здесь свой код'
            9:
                story_text: "В этом уровне вы можете использовать вложенность, чтобы сделать ваш ресторан более реалистичным и веселым!\n\n### Упражнение\nВ коде примера были удалены отступы. \nМожете ли вы определить, сколько отступов должно быть в каждой строке, чтобы код работал правильно?\nЕсли клиент заказывает пиццу, Хеди не должна спрашивать, какой соус хочет клиент.\n\n**(экстра)** В ресторане не все соусы имеются в наличии. Составьте список доступных соусов и при каждом заказе отвечайте, продаете ли вы его. <br>\n**(дополнительно)** У пиццы есть начинка. Спросите клиентов, что они хотят.<br>\n**(дополнительно)** Хотят ли клиенты напитки? Спросите и их! <br>                    \n"
                example_code: "```\n{print} 'Добро пожаловать в ресторан Хеди!'\nлюди = {ask} 'Сколько человек присоединится к нам сегодня?'\n{print} 'Отлично!'\nцена = 0\n{repeat} люди {times}\n_ еда = {ask} 'Что бы вы хотели заказать?'\n_ {print} еда\n_ {if} еда {is} картофель фри\n_ цена = цена + 3\n_ соус = {ask} 'Какой соус вы хотели бы получить к картофелю фри?'\n_ {if} соус {is} нет\n_ {print} 'без соуса'\n_ {else}\n_ цена = цена + 1\n_ {print} 'с соусом'\n_ {if} еда {is} пицца\n_ цена = цена + 4\n{print} 'Это будет стоить ' цена ' доллар'\n{print} 'Приятного аппетита!'\n```\n"
                start_code: '# разместите здесь свой код'
            10:
                story_text: "На этом уровне вы узнаете, как легко {ask} заказы ваших гостей в виде короткого кода.\n"
                example_code: "```\ncourses = appetizer, main course, dessert\n{for} course {in} courses\n    еда = {ask} 'What would you like to eat as your ' course '?'\n    {print} еда ' will be your ' course\n```\n"
                story_text_2: "Конечно, вы также можете сделать заказ для нескольких человек!\nМожете ли вы добавить нужное количество отступов перед каждой строкой, чтобы код работал правильно?\nСОВЕТ: некоторые строки вообще не нуждаются в отступах.\n"
                example_code_2: "```\n_ блюда = закуска, основное блюдо, десерт\n_ имена = Тимон, Онно\n_ {for} имя {in} имена\n_ {for} курс {in} курсы\n_ еда = {ask} имя ', что бы вы хотели съесть в качестве своего ''блюда''?\n_ {print} имя ' заказывает ' еду ' в качестве своего ' блюда\n```\n"
                start_code: блюда = закуска, основное блюдо, десерт
            11:
                story_text: "Мы можем использовать `{for} i {in} {range} 1 {to} 5`{in}, чтобы `{print}` заказы от нескольких клиентов в упорядоченном порядке.\n\nСможете ли вы справиться с еще одной задачей, связанной с отступами? Заставьте код работать правильно, добавив нужное количество отступов перед каждой строкой!\n"
                example_code: "```\n{print} 'Добро пожаловать в ресторан Hedy!'\nлюди = {ask} 'На сколько человек вы хотите сделать заказ?'\n{for} i {in} {range} 1 {to} люди\n_ {print} 'Номер заказа' i\n_ еда = {ask} 'Что бы вы хотели съесть?'\n_ {print} еда\n_ {if} еда {is} картофель фри\n_ соус = {ask} 'Какой соус вы бы хотели к этому?'\n_ {print} соус\n_ напитки = {ask} 'Что бы вы хотели выпить?'\n_ {print} напитки\nцена = 4 * человек\n{print} 'Это будет ' цена ' долларов, пожалуйста!'\n```\n"
                start_code: '# разместите здесь свой код'
            13:
                story_text: "В этом уровне мы можем использовать новые команды для модернизации нашего ресторана.\nМы используем `{and}`, чтобы убедиться, что {if} оба варианта верны.\n"
                example_code: "```\nprice = 10\nеда = {ask} 'What would you like to eat?'\ndrink = {ask} 'What would you like to drink?'\n{if} еда {is} 'sandwich' {and} drink {is} 'juice'\n    {print} 'Thats our discount menu'\n    price = price - 3\n{print} 'That will be ' price ' dollars'\n```\n"
                start_code: '# разместите здесь свой код'
            15:
                story_text: "С помощью `{while}` вы можете убедиться, что ваши клиенты могут продолжать добавлять заказы, пока они не будут выполнены.\n"
                example_code: "```\n{print} 'Добро пожаловать в МакХеди'\nmore = 'yes'\n{while} more == 'yes'\n    заказать = {ask} 'Что бы вы хотели заказать?'\n    {print} заказать\n    more = {ask} 'Вы хотите заказать что-нибудь еще?'\n{print} 'Спасибо!'\n```\n"
                start_code: '# разместите здесь свой код'
        name: Ресторан
        description: Создайте свой собственный виртуальный ресторан
        default_save_name: Ресторан
    secret:
        levels:
            12:
                start_code: '# разместите здесь свой код'
                story_text: "В этом приключении вы сможете создать свой собственный супершпионский код. Зашифруйте сообщение, которое сможет расшифровать только правильный агент.\nЕсли враг попытается взломать код, он получит ложную информацию, чтобы потратить свое время.\n\nПридумайте свой собственный секретный код для супершпиона. Сможете ли вы сделать его состоящим из еще большего количества переменных?\n"
                example_code: "```\nname {is} {ask} 'Как вас зовут?'\nif name {is} 'Agent007'\n    a {is} 'Поехать в аэропорт'\n{else}\n    a {is} 'Поехать на вокзал'\nпароль {is} {ask} 'Какой пароль?'\n{if} пароль {is} 'TOPSECRET'\n    b {is} 'завтра в 02.00'\n{else}\n    b {is} 'сегодня в 10.00'\n{print} a + b\n```\n"
            13:
                start_code: '# поместите свой код здесь'
                story_text: "Можете ли вы заполнить правильную команду на бланке? Разум: Супершпион должен правильно ответить на ОБА вопроса, прежде чем он получит конфиденциальную информацию!\n"
                example_code: "```\nname {is} {ask} 'What is your name?'\nпароль {is} {ask} 'Какой у вас пароль?'\n{if} имя {is} 'Agent007' _ пароль {is} 'TOPSECRET'\n    {print} 'Поехать в аэропорт в 02.00'\n{else}\n    {print} 'Отправиться на вокзал в 10.00'\n ```\n"
        name: СуперШпион
        description: Сделайте свой собственный шпионский код
        default_save_name: СуперШпион
    songs:
        name: Спойте песню!
        description: Печать песни
        default_save_name: Песня
        levels:
            6:
                story_text: "Песни часто содержат много повторений. Иногда повторение также основано на счете.\nНапример, в известной песне \"Бутылки пива\". Вы можете запрограммировать эту песню с помощью математики.\n\nСовет: Используйте функцию чтения вслух, чтобы Хеди спела вам песню!\n\n### Задача\nТеперь вы можете повторять строки со 2 по 7 столько раз, сколько захотите, копируя их.\n"
                example_code: "```\nстих = 99\n{print} стих ' бутылки пива на стене '\n{print} стих ' бутылки пива'\n{print} 'Возьми одну, передай по кругу'\nстих = стих - 1\n{print} стих ' бутылки пива на стене'\n{sleep}\n```\n"
                start_code: "{print} 'Давай петь!'"
                story_text_2: "Эта детская песенка отсчитывает время от 5 маленьких обезьянок до 1 обезьянки.\nЕсли вы скопируете строки 2 - 7 и вставите их под кодом, вы сможете спеть всю песню!\n"
                example_code_2: "```\nчисло = 6\nчисло = число - 1\nprint number ' Маленькие обезьянки прыгают по кровати'\nprint 'Один упал и ударился головой'\nprint 'Мама позвонила доктору, и доктор сказал'\nprint 'Больше никаких обезьян, прыгающих на кровати!\nsleep\n```\n"
            7:
                story_text: "Песни часто содержат много повторений. Например... Детеныш акулы! Если вы поете ее, вы продолжаете петь одно и то же:\n\nBaby Shark tututudutudu <br>\nBaby Shark tutututudutudu <br>\nBaby Shark tututudutudu <br>\nBaby Shark\n\nВы можете сделать эту песню намного короче с помощью `{repeat}`! Вы можете закончить код?\n"
                example_code: "```\n{repeat} _ _ {print} 'Baby Shark tututudutudu'\n{print} 'Baby Shark'\n```\n\nAfter Baby Shark you can of course also program other songs. There are many songs with repetition.\n"
                start_code: "{print} 'Малыш акула'"
            8:
                story_text: "В предыдущем уровне вы запрограммировали песню \"Бутылки пива\". Вы сочинили один куплет, а затем должны были скопировать его 99 раз. В этом уровне вы можете повторить песню 99 раз, просто добавив одну простую строчку!\nЗнаете ли вы, какую строку кода нужно добавить на пустом месте?\n"
                example_code: "```\nстих = 99\n_ _ _\n    {print} стих 'бутылки пива на стене'\n    {print} стих ' бутылки пива'\n    {print} 'Возьми одну, передай по кругу'\n    стих = стих - 1\n    {print} стих ' бутылки пива на стене'\n```\n"
                start_code: '# разместите здесь свой код'
            10:
                story_text: "На этом уровне вы легко сможете исполнить детскую песенку \"Пять маленьких обезьянок\". Сможете ли вы сделать последний припев?\nВы также можете сделать всю песню про акулу (включая всех остальных акул в семье) всего за 6 строк, используя `{for}`!\nИли вы можете сделать песню Old McDonald со всеми различными животными.\n\n\n\nМожете ли вы добавить последний куплет про обезьянок на кровати, когда осталась только одна обезьянка?\n\nМожете ли вы сделать код акулы-малютки еще короче, используя команду `{repeat}`?\n\nМожете ли вы добавить новых животных на ферму старого Макдональда?\n"
                example_code: "```\nобезьянки = 5, 4, 3, 2\n{for} обезьяна {in} обезьянки\n    {print} обезьяна ' маленькие обезьянки прыгают на кровати'\n    {print} 'Один упал и ударился головой'\n    {print} 'Мама позвонила доктору, и доктор сказал'\n    {print} 'БОЛЬШЕ НИКАКИХ ОБЕЗЬЯНОК, ПРЫГАЮЩИХ НА КРОВАТИ!'\n```\n\n```\nакулы = ребенок, мама, папа, бабушка, дедушка\n{for} акула {in} акулы\n    {print} акула ' акула тутутутутуду'\n    {print} акула ' акула тутутутутутуду'\n    {print} акула ' акула тутутутутуду'\n    {print} акула ' акула '\n```\n```\nживотные = свинья, собака, корова\n{for} животное {in} животные\n    {if} животное {is} свинья\n        звук = ойк\n    {if} животное {is} собака\n        звук = гав\n    {if} животное {is} корова\n        звук = му\n    {print} 'У старого Макдональда была ферма'\n    {print} 'E I E E I O!'\n    {print} 'и на этой ферме у него было ' животное\n    {print} 'E I E I O!'\n    {print} 'со звуком ' звук\n    {print} 'и ' звук ' там'\n    {print} 'здесь ' звук\n    {print} 'там ' звук\n    {print} 'везде ' звук звук звук\n```\n"
                start_code: '# разместите здесь свой код'
                example_code_2: "```\nmonkeys = 5, 4, 3, 2, 1\n```\n"
                story_text_2: "### Exercise 2\nPrint the song Five little moneys jumping on the bed. Look up the text if you don't remember.\n\n**(extra)** Print the song Old MacDonald had a farm, and make sure all animals make a different sound, using an `{if}`.\n"
            11:
                story_text: "На этом уровне вы можете использовать команду `{for} i {in} {range}`{in} {range}` для создания песен, в которых используется счет, например, 5 маленьких обезьянок.\n\nЗаполните пробелы и заставьте код работать!\n"
                example_code: "```\n_ _ _ _ 5 _ 1\n    {print} i ' маленькие обезьянки прыгают по кровати'\n    {print} 'Одна упала и ударилась головой'\n    {print} 'Мама позвонила доктору, и доктор сказал'\n    {if} i {is} 1\n        {print} 'УЛОЖИТЕ ЭТИХ ОБЕЗЬЯНОК СПАТЬ!'\n    {else}\n        {print} \"БОЛЬШЕ НИКАКИХ ОБЕЗЬЯНОК, ПРЫГАЮЩИХ НА КРОВАТИ!\n```\n"
                start_code: '# разместите здесь свой код'
            12:
                story_text: "В этой песне мы можем еще проще запрограммировать \"если ты счастлив и знаешь это, хлопай в ладоши\". Поскольку мы можем поместить все действия в переменную, проверьте это:\n\nМожете ли вы добавить нужное количество отступов к каждой строке, чтобы песня играла правильно?\nРазум: Не все строки нуждаются в отступах\n"
                example_code: "```\n_ действия = 'хлопать в ладоши', 'топать ногами', 'кричать Ура!'\n_ {for} действие {in} действия\n_ {for} i {in} {range} 1 {to} 2\n_ {print} 'if youre happy and you know it'\n_ {print} действие\n_ {print} 'если вы счастливы и знаете это, и вам очень хочется это показать'\n_ {print} 'if youre happy and you know it'\n_ {print} действие\n```\n"
                start_code: '# разместите здесь свой код'
            16:
                story_text: "На этом уровне вы сможете еще быстрее запрограммировать песню типа OldMacDonald. Вы можете соединить нужное животное с нужным звуком, просто поместив их в одно и то же место в списке.\nПьяный моряк также быстро создается в этом уровне. Вам понадобится всего 8 строк для всей песни, посмотрите!\n"
                example_code: |
                    ```
                    животные = ['свинья', 'собака', 'корова']
                    звуки = ['oink', 'woof', 'moo']
                    {for} i {in} {range} 1 {to} 3
                        здесь = животные[i]
                        звук = звуки[i]
                        {print} 'У старого Макдональда была ферма'
                        {print} 'E I E E I O!'
                        {print} 'и на этой ферме у него было животное'
                        {print} 'E I E I O!'
                        {print} 'со звуком ' здесь
                        {print} 'и ' звук ' там'
                        {print} 'здесь ' звук
                        {print} 'там ' звук
                        {print} 'везде ' звук звук звук
                    ```

                    ```
                    строки = ['что делать с пьяным матросом', 'брить ему брюхо ржавой бритвой', 'посадить его в длинную лодку, пока не протрезвеет']
                    {for} строка {in} строки
                        {for} i {in} {range} 1 {to} 3
                            {print} строка
                        {print} 'рано утром'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
                start_code: '# разместите здесь свой код'
            18:
                example_code: "```\nlines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']\n{for} line {in} lines _\n    {for} i {in} {range} 1 {to} 3 _\n        {print} _ line _\n    {print} 'early in the morning'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'way hay and up she rises'\n    {print} 'early in the morning'\n```\n"
                start_code: '# Schrijf jouw code hier'
                story_text: "In level 16 we made songs using lists. These programs however are no longer working properly in this level. The colons from level 17 and the brackets from level 18 still need to be added.\n\n### Exercise 1\nThe Drunken sailor song is given as sample code, but not yet working.\nCan you make sure everything works again? To help you, we've put _ in the places of _some_ errors.\n\n### Exercise 2\nNow also look up your Old MacDonald song from level 16, and correct it.\n"
    turtle:
        name: Черепаха
        description: Создайте свой собственный рисунок
        default_save_name: Черепаха
        levels:
            1:
                story_text: "Ещё можно использовать Хейди для рисования. Используя линии и повороты, вы можете сделать квадрат или лестницу!\n\nДля того чтобы нарисовать линию - используйте команду  `{forward}`. Число за ней определяет, как далеко пройдет черепаха. Команда `{turn} {right}` повернёт черепаху на четверть оборота по часовой стрелке, `{turn} {left}` - повернёт её против часовой стрелки.\n\nЧтобы пойти назад, можно использовать ту же команду `{forward}`, но с отрицательным числом. Например, `{forward} -100`\n\n### Упражнение\nЭто начало маленькой лестницы. Можете ли вы сделать так, чтобы у нее было 5 ступенек?\n"
                example_code: "```\n{forward} 20\n{turn} {right}\n{forward} 20\n{turn} {left}\n{forward} 20\n```\n"
                start_code: "{forward} 50\n{turn} {left}"
            2:
                story_text: "В этом уровне вы можете использовать переменные, чтобы сделать черепаху интерактивной. Например, вы можете спросить игрока, сколько шагов должна сделать черепаха.\n"
                example_code: "```\nответ {is} {ask} Сколько шагов должна сделать черепаха?\n{forward} ответ\n```\n"
                start_code: "{print} Черепашьи бега!\nугол {is} 90\n{turn} угол\n{forward} 25"
                story_text_2: "Кроме того, на первом уровне черепаха могла поворачивать только влево или вправо. Это немного скучно!\nНа втором уровне она может поворачивать свой нос во все стороны.\n\nИспользуйте 90 для поворота на четверть. Мы называем это градусами. Полный поворот - это 360 градусов.\n\n### Задача\nМожете ли вы построить фигуру с помощью этого кода? Может треугольник или круг?\n"
                example_code_2: "```\n{print} Чертежные фигуры\nугол {is} 90\n{turn} угол\n{forward} 25\n{turn} угол\n{forward} 25\n```\n"
            3:
                story_text: "В этом уровне вы можете использовать `{at} {random}`{random}` с рисующей черепахой. Случайный выбор заставляет черепаху каждый раз идти по разному пути.\nИспользуйте `{at} {random}`{random}` для выбора значения из списка.\nМожете ли вы скопировать и вставить строки 2 и 3, чтобы создать более длинный случайный путь?\n"
                example_code: "```\nangles {is} 10, 50, 90, 150, 250\n{turn} angles {at} {random}\n{forward} 25\n```\n"
                start_code: "углы {is} 10, 50, 90, 150, 250\n{turn} углы {at} {random}\n{forward} 25"
            4:
                story_text: "В четвертом уровне вы должны использовать кавычки с `{print}` и `{ask}`. Также при рисовании!\n"
                example_code: "```\n{print} _ Чертежные фигуры _\nугол {is} 90\n{turn} угол\n{forward} 25\n{turn} угол\n{forward} 25\n```\n"
                start_code: "{print} 'Рисование фигур'\nугол {is} 90\n{turn} угол\n{forward} 25"
                story_text_2: "Вы также можете изменить цвет линий с помощью команды `{color}`. Посмотрите пример.\nВы также можете использовать команду `{color} {white}`{white}`, чтобы сделать \"невидимые\" линии. Вы можете использовать эти белые линии для перемещения черепашки в любую точку экрана перед началом рисования.\n"
                example_code_2: "```\n{color} {white}\n{forward} -80\n{color} {green}\n{forward} 50\n{color} {yellow}\n{forward} 50\n{color} {red}\n{forward} 50\n```\n"
            5:
                story_text: "На уровне 5 вы можете сделать выбор с помощью `{if}`. Например, между разными типами фигур.\n"
                example_code: "```\n{print} 'Drawing Figures'\nfigure {is} {ask} 'Do you want a square or a triangle?'\n{if} figure {is} triangle angle {is} 120\n{else} angle {is} 90\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n```\n"
                start_code: "{print} 'Рисуем фигуры'\nрисунок {is} {ask} 'Вам нужен квадрат или треугольник?'\n{if} рисунок {is} угол треугольника {is} 120 {else} угол {is} 90\n{turn} угол\n{forward} 25"
                story_text_2: "### Exercise\nFill in the correct numbers in this code to get it to work.\nAfter you've done that, you can try to add the option backwards.\n\n**Extra** Instead of using 'left' and 'right', remake the program with North, East, South and West.\nThis way you could add even more directions like Northeast and Southwest etc.\n"
                example_code_2: "```\ndirection {is} {ask} 'Do you want to go left, right, or straight ahead?'\nif direction is left turn _\nif direction is right turn _\nforward 100\n```\n"
            6:
                story_text: "На этом уровне вы можете использовать вычисления для рисования различных фигур.\nВозможно, в школе вы узнали, что полный круг - это 360 градусов. Если нет, то теперь вы знаете!\nВот почему вы также используете 90 градусов для квадрата. 360 разделить на 4 - это 90.\nТеперь, когда мы можем заниматься математикой вместе с Хеди, мы можем рисовать любые фигуры, какие захотим!\n"
                example_code: "```\nangles = {ask} 'How many angles do you want?'\nangle = 360 / angles\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n```\n"
                start_code: "{print} 'Рисование фигур'"
            8:
                story_text: "Теперь, когда мы можем повторять несколько линий, нам легче строить фигуры.\nНам нужно только один раз задать угол, а затем использовать эту переменную в `{repeat}`.\n"
                example_code: "```\nangle = 90\n{repeat} 10 {times}\n    {turn} angle\n    {forward} 50\n```\n"
                story_text_2: "Кроме того, теперь мы можем усовершенствовать программу, которая рисует различные фигуры.\nМожете ли вы определить, насколько черепаха должна повернуться здесь? Доработайте код, и вы сможете нарисовать любой многоугольник, какой захотите!\n"
                example_code_2: "```\nangles = {ask} 'How many angles should I draw?'\nangle = 360 / angles\n{repeat} angle {times}\n    {turn} _\n    {forward} _\n```\n"
                start_code: "angles = {ask} 'Сколько углов я должен нарисовать?'"
            9:

                start_code: '# place your code here'
                story_text: "Now that we can use a `{repeat}` inside a `{repeat}`, we can create more complex figures.\n\n### Exercise 1\nThis code creates three black triangles, change that into five pink squares.\n\n **(extra)** Create a figure of your own choosing consisting of at least two different shapes types.\n"
                example_code: "```\n{color} {black}\n{repeat} 3 {times}\n    {repeat} 3 {times}\n        {forward} 10\n        {turn} 120\n    {color} {white}\n    {forward} 50\n    {color} {black}\n```\n"
    fortune:
        name: Предсказатель
        description: Позвольте Хеди предсказать будущее
        default_save_name: Гадалка
        levels:
            1:
                story_text: "Бывали ли вы когда-нибудь на карнавале, где гадалка предсказывала ваше будущее? Или вы когда-нибудь играли с волшебным восьмеркой?\nТогда вы наверняка знаете, что на самом деле они не могут предсказать ваше будущее, но играть все равно интересно!\n\nВ следующих уровнях вы сможете узнать, как создать свою собственную гадальную машину!\nНа первом уровне вы можете начать с самого простого: пусть Хеди представится гадалкой и позволит ей {echo} ответы игроков.\nНапример:\n"
                example_code: "```\n{print} Hello, I'm Hedy the fortune teller!\n{ask} Who are you?\n{print} Let me take a look in my crystal ball\n{print} I see... I see...\n{echo} Your name is\n```\n"
                story_text_2: "Сейчас Хеди говорит вам только ваше имя. Можете ли вы расширить код, чтобы Хеди могла предсказывать больше вещей о вас?\nОчевидно, что Хеди еще не очень хорошая гадалка, так как она может только повторять ответы, которые были даны игроками!\nЗагляните на уровень 2, чтобы улучшить свою гадалку.\n"
                start_code: '# разместите здесь свой код'
            3:
                story_text: "В предыдущих уровнях вы создали свою первую машину для гадания, но Хеди не могла ничего предсказать, только {echo}.\nВ этом уровне вы можете использовать переменную и команду `{at} {random}`{random}`, чтобы позволить Хеди действительно выбрать ответ за вас. Посмотрите, например, этот код:\n"
                example_code: "\nIn this example the player can {ask} Hedy a yes-no question and Hedy will pick a random answer for you.\n```\n{print} I’m Hedy the fortune teller!\nquestion {is} {ask} What do you want to know?\n{print} This is what you want to know: question\nanswers {is} yes, no, maybe\n{print} My crystal ball says...\n{sleep} 2\n{print} answers {at} {random}\n```\n"
                story_text_2: "Сейчас Хеди может ответить только \"да\", \"нет\" или \"может быть\". Можете ли вы дать Хеди больше вариантов ответа, например, \"определенно\" или \"переспросить\"\n"
                start_code: '# разместите здесь свой код'
            4:
                story_text: "Этот уровень не содержит новых функций, но позволяет потренироваться в использовании кавычек.\nВы можете переделать свой код уровня 3, и убедитесь, что добавили кавычки в нужных местах!\n\nОбратите внимание, что в уровне 3 мы не могли использовать слово \"вопрос\" и как имя переменной, и как обычное слово, которое можно напечатать.\nКавычки в уровне 3 делают это возможным!\n\n### Упражнение\nМы убрали все кавычки из этого примера кода, можете ли вы добавить их во всех нужных местах?\n\n### Упражнение 2\nВернитесь на предыдущий уровень и скопируйте код гадалки. Заставьте код работать на этом уровне, добавив кавычки в нужных местах.\n"
                example_code: "```\nДобавьте кавычки к этому коду _\n{print} Я Хеди - гадалка!\nвопрос {is} {ask} Что вы хотите узнать?\n{print} Это ваш вопрос: вопрос\nответы {is} да, нет, может быть\n{print} Мой хрустальный шар говорит...\n{sleep} 2\n{print} ответы {at} {random}\n```\n"
                start_code: '# разместите здесь свой код'
            5:
                story_text: "In this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!\nBy using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other люди might not.\nCheck out this example to find out how.\n"
                example_code: "```\n{print} 'Я Хеди - предсказательница!'\n{print} 'Я могу предсказать, выиграете ли вы завтра в лотерею!'\nчеловек {is} {ask} 'Кто вы?'\n{if} человек {is} Хеди {print} 'Вы обязательно выиграете! 🤩' {else} {print} 'Не повезло! Выиграет кто-то другой! 😭'\n```\n"
                start_code: '# разместите здесь свой код'
            6:
                story_text: "На этом уровне вы можете использовать математику в своих предсказаниях в качестве гадалки. Это позволяет вам придумывать (глупые) формулы для расчета будущего.\nНапример, вы можете рассчитать, насколько богатым вы станете или сколько детей у вас будет, когда вы вырастете.\n\n\n\nМожете ли вы придумать свою собственную (глупую) машину для гадания?\n"
                example_code: "```\n{print} 'Я могу предсказать, сколько детей у тебя будет, когда ты вырастешь!'\nвозраст = {ask} 'Сколько вам лет?'\nбратья_и_сестры = {ask} \"Сколько у вас братьев и сестер?\"\nдлина = {ask} 'Какой у вас рост в сантиметрах?'\nдети = длина / возраст\nдети = дети - братья_и_сестры\n{print} 'У тебя будет ...'\n{sleep}\n{print} 'дети  дети!'\n```\nПример глупой гадалки\nЕсли предыдущий пример не показался вам достаточно глупым, посмотрите на этот!\n```\n{print} 'Я Хеди - глупая гадалка!'\n{print} 'Я предскажу, насколько вы умны!'\nфутбол = {ask} 'По шкале 1-10 насколько сильно вы любите футбол?'\nбананы = {ask} 'Сколько бананов вы съели на этой неделе?'\nгигиена = {ask} 'Сколько раз вы сегодня мыли руки?'\nрезультат = бананы + гигиена\nрезультат = результат * футбол\n{print} 'Ты ' результат ' процент умных'\n```\n"
                start_code: '# разместите здес"Я Хеди - предсказательница!ь свой код'
            7:
                story_text: "На этом уровне вы можете использовать команду `{repeat}`, чтобы заставить машину предсказывать несколько предсказаний одновременно.\n"
                example_code: "```\n{print} 'Я Хеди - предсказательница!'\n{print} 'Вы можете задать 3 вопроса!'\n{repeat} 3 {times} question = {ask} 'What do you want to know?'\nответ = да, нет, может быть\n{repeat} 3 {times} {print} 'Мой хрустальный шар говорит...' ответ {at} {random}\n```\n"
                start_code: '# разместите здесь свой код'
            8:
                story_text: "В предыдущих уровнях вы узнали, как с помощью команды `{repeat}` заставить гадалку ответить на 3 вопроса подряд, но у нас возникла проблема с печатью вопросов.\nТеперь эта проблема решена благодаря новому способу использования команды `{repeat}`.\nВ следующем примере вы можете заставить гадалку задать 3 вопроса, а также распечатать их!\n\nСможете ли вы правильно заполнить команду `{repeat}` на пустых местах?\n"
                example_code: "```\n{print} 'Я Хеди - предсказательница!'\n{print} 'Вы можете задать мне 3 вопроса'.\nответы = да, нет, возможно\n_ _ _\n   вопрос = {ask} 'Что вы хотите узнать?'\n   {print} вопрос\n   {sleep}\n   {print} 'Мой хрустальный шар говорит...' ответы {at} {random}\n```\n"
                start_code: '# разместите здесь свой код'
            10:
                story_text: "В этом уровне вы узнаете, как программировать игру MASH (mansion, apartement, shack, house). В этой игре вы можете предсказать всем игрокам сразу, каким будет их будущее.\n"
                example_code: "```\nhouses = mansion, apartment, shack, house\nloves = nobody, a royal, their neighbour, their true love\npets = dog, cat, elephant\nnames = Jenna, Ryan, Jim\n{for} name {in} names\n    {print} name ' lives in a ' houses {at} {random}\n    {print} name ' will marry ' loves {at} {random}\n    {print} name ' will get a ' pets {at} {random} ' as their pet.'\n    {sleep}\n```\n"
                start_code: '# разместите здесь свой код'
            12:
                story_text: "В этом уровне вы можете составлять гадания из нескольких слов. Сможете ли вы добавить в список больше различных предсказаний?\n"
                example_code: "```\nпредсказания = 'вы поскользнетесь на банановой кожуре', _\n{print} 'Я загляну в свой кристаллический шар, чтобы узнать ваше будущее'\n{print} 'Я вижу... Я вижу...\n{sleep}\n{print} fortunes {at} {random}\n```\n"
                start_code: '# разместите здесь свой код'
    haunted:
        name: Дом с привидениями
        description: Побег из дома с привидениями
        default_save_name: Дом с привидениями
        levels:
            1:
                story_text: "В этом приключении вам предстоит создать игру, в которой вы должны выбраться из дома с привидениями, выбрав правильную дверь.\nЕсли вы выберете правильную дверь, вы выживете, но если нет, то страшный монстр может...\n\nНа первом уровне мы начинаем игру в дом с привидениями с придумывания страшной истории и спрашиваем игрока, какое чудовище он увидит в доме с привидениями.\n"
                example_code: "```\n{print} How did I get here?\n{print} I remember my friend telling me to go into the old mansion...\n{print} and suddenly everything went black.\n{print} But how did I end up on the floor...?\n{print} My head hurts like Ive been hit by a baseball bat!\n{print} What's that sound?\n{print} Oh no! I feel like Im not alone in this house!\n{print} I need to get out of here!\n{print} There are 3 doors in front of me..\n{ask} Which door should i pick?\n{echo} I choose door\n{print} ...?\n```\n"
                story_text_2: "Сможете ли вы закончить страшную историю? Или придумать свою собственную историю о доме с привидениями?\n"
                start_code: '{print} Как я сюда попал?'
            2:
                story_text: "В этом доме с привидениями вы можете выбрать себе монстров с помощью эмодзи. Конечно, вы также можете использовать слова.\n"
                example_code: "```\nmonster_1 {is} 👻\nmonster_2 {is} 🤡\nmonster_3 {is} 👶\n{print} You enter the haunted house.\n{print} Suddenly you see a monster_1\n{print} You run into the other room, but a monster_2 is waiting there for you!\n{print} Oh no! Quickly get to the kitchen.\n{print} But as you enter monster_3 attacks you!\n```\n"
                start_code: monster1 {is} _
                story_text_2: "В приведенном выше примере монстры предопределены. Поэтому каждый раз, когда вы запускаете свой код, результат будет один и тот же.\nМожете ли вы добавить команды `{ask}`, чтобы сделать дом с привидениями интерактивным и чтобы игроки сами выбирали монстров, с которыми они сталкиваются?\n"
                example_code_2: "```\nмонстр_1 {is} _\nмонстр_2 {is} _\nмонстр_3 {is} _\n{print} Вы входите в дом с привидениями.\n{print} Вдруг вы видите монстра_1.\n{print} Вы бежите в другую комнату, но там вас поджидает монстр_2!\n{print} О нет! Быстро бегите на кухню.\n{print} Но когда вы входите, на вас нападает монстр_3!\n```\n"
            3:
                story_text: "Дом с привидениями\nВ предыдущих уровнях вы сделали вступление к игре \"Дом с привидениями\", но, как вы могли заметить, история всегда имела ужасный конец.\nВ этом уровне вы можете сделать свою историю более интерактивной, изменив исход игры; иногда вас съедят, иногда вы сбежите!\nПусть Хеди решает случайным образом!\n"
                start_code: '# разместите здесь свой код'
                example_code: "```\n_ Escape from the haunted house!\n_ There are 3 doors in front of you...\n_ _ _ Which door do you choose?\n_ You picked door ... choice\nmonsters _ a zombie, a vampire, NOTHING YOUVE ESCAPED\n_ You see...\n{sleep}\n_ _ _ _\n```\n"
            4:
                story_text: "В этом уровне вы узнаете, как использовать кавычки в своих играх.\nСможете ли вы сделать свой уровень \"Дом с привидениями\" на 4?\n"
                example_code: "```\n{print} _ Побег из дома с привидениями! _\n{print} Перед вами 3 двери... _\nвыбор {is} {ask} _ Какую дверь вы выберете? _\n{print} _ Вы выбрали дверь ... _ выбор\nмонстры {is} зомби, вампир, НИЧЕГО ВЫ НЕ ВЫБРАЛИ\n{print} Вы видите... _\n{sleep}\n{print} монстры {at} {random}\n ```\n"
                start_code: '# разместите здесь свой код'
            5:
                story_text: "До этого уровня игра \"Дом с привидениями\" всегда просила игрока выбрать дверь, но, как вы могли заметить, ответ не обязательно должен быть правильным.\nЕсли игрок заполнял совершенно случайный ответ, игра все равно работала, и игрок мог даже выиграть (несмотря на то, что не выбрал дверь).\nВ этом уровне вы можете выиграть игру, только выбрав ту же дверь, которую случайно выбрала Хеди.\n\nСможете ли вы найти 4 недостающих слова, чтобы завершить код?\n"
                example_code: "```\n{print} 'Побег из дома с привидениями!'\n{print} 'Перед вами 3 двери...'\nдвери {is} 1, 2, 3\nмонстры {is} оборотень, мумия, вампир, зомби\nselected_door {is} {ask} 'Какую дверь вы выбираете?'\n{print} 'Ты выбрал дверь...' chose_door\n{sleep}\nправильная_дверь {is} двери {at} {random}\n_ _ _ _ _ {print} 'Отлично! Ты сбежал!\n{else} {print} 'О нет! Вас съедает...' монстры {at} {random}\n```\n"
                start_code: '# разместите здесь свой код'
            9:
                story_text: "В этом уровне вы можете использовать вложенность, которая позволяет сделать дом с привидениями еще более интерактивным!\n\n### Упражнение\nСейчас очень трудно выиграть в этой игре, можете ли вы сделать так, чтобы выиграть было легче?\nИзмените свой код так, чтобы в нем была только одна неправильная дверь и две правильные, а не одна правильная дверь и две неправильные? \nПодсказка: Это означает замену переменной correct_door на wrong_door, а также изменение кода `{if}` и `{else}`.\nИ, конечно, вы можете изменить историю и сделать ее своей. Измените монстров или сделайте это счастливым игровым шоу, в котором вы получаете подарок!\n"
                example_code: "```\n{print} 'Escape from the Haunted House!'\nplayer = alive\ndoors = 1, 2, 3\nmonsters = zombie, vampire, giant spider\n{repeat} 3 {times}\n    {if} player {is} alive\n        correct_door {is} doors {at} {random}\n        {print} 'There are 3 doors in front of you...'\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} chosen_door {is} correct_door\n            {print} 'No monsters here!'\n        {else}\n            {print} 'You are eaten by a ' monsters {at} {random}\n            player = dead\n    {else}\n        {print} 'GAME OVER'\n{if} player {is} alive\n    {print} 'Great! You survived!'\n```\n"
                start_code: "{print} 'Побег из дома с привидениями!'"
            11:
                story_text: "В этом уровне мы изменили команду `{for}`, чтобы сообщить игроку, где он находится. \n\n### Упражнение 1\nЗавершите программу, чтобы игрок знал, в какой комнате он находится.\n\n### Упражнение 2\nПревратите программу в приключение, выполнив следующие шаги:\n\n1. Составьте список вариантов действий (например: борьба или бегство).\n2. Убедитесь, что игрок может выбрать вариант с `{ask}`\n3. Ответ правильный? Тогда они могут перейти к следующему монстру. Ответили неправильно? Сообщите игроку об этом с помощью `{print}`. \n\n**(дополнительно)** Если вы сделали неправильный выбор, монстр все равно будет показан! Как вы можете это изменить?\n"
                example_code: "```\n{print} 'Побег из дома с привидениями!\nигрок {is} жив\nдвери = 1, 2, 3\nмонстры = зомби, вампир, гигантский паук\n_\n    {if} игрок {is} жив\n        правильная_дверь = двери {at} {random}\n        {print} 'Комната' i\n        {print} 'Перед вами 3 двери...'\n        chosendoor = {ask} 'Какую дверь вы выберете?'\n        {if} chosendoor {is} correct_door\n            {print} 'Здесь нет монстров!'\n        {else}\n            {print} 'Вы съедены ' монстрами {at} {random}\n            игрок = мёртв\n    {else}\n        {print} 'ИГРА ОКОНЧЕНА'\n{if} игрок {is} живой\n    {print} 'Отлично! Вы выжили!\n```\n"
                start_code: "{print} 'Побег из дома с привидениями!'"
            14:
                story_text: "В этом уровне вы можете использовать символ `<` и `>`, чтобы ввести в игру жизни.\n"
                example_code: "```\n{print} 'Escape from the haunted house'\nlives = 3\ndoors = 1, 2, 3\nmonsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'\n{for} i {in} {range} 1 {to} 10\n    {if} lives > 0\n        good_door = doors {at} {random}\n        monster = monsters {at} {random}\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} good_door == chosen_door\n            {print} 'You have chosen the correct door'\n        {else}\n            {print} 'You see...' monster\n            {if} monster == 'a sleeping 3 headed dog'\n                {print} 'Pffieuw.... Its asleep'\n            {else}\n                {print} 'You lose one life'\n                lives = lives -1\n    {else}\n        {print} 'GAME OVER'\n```\n"
                start_code: '# разместите здесь свой код'
            16:
                story_text: "Дом с привидениями\nВ этой игре \"Дом с привидениями\" используется связь между списками, которые вы можете использовать на этом уровне.\nНапример: все свойства, принадлежащие зомби, стоят первыми во всех списках, ведьма - вторая, а вампир - третий.\nПроверьте код!\n"
                example_code: "```\nnumbers = [1, 2, 3]\ni = numbers[{random}]\nhint = ['growling', 'a cackling laugh', 'fluttering batwings']\nmonsters = ['zombie', 'witch', 'vampire']\nbad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']\ngood_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']\nweapons = ['ham', 'lighter', 'garlic']\n{print} 'You are standing in front of an old mension'\n{print} 'Something is not right here'\n{print} 'You hear ' hint[i]\n{print} 'You are going to explore it'\n{print} 'You enter the kitchen en see a lighter, a raw ham and a garlic.'\nyour_weapon = {ask} 'What do you bring with you?'\n{print} 'With your ' your_weapon ' you enter the living room'\n{print} 'There you find a ' monsters[i]\nneeded_weapon = weapons[i]\n{if} your_weapon == needed_weapon\n    {print} 'You use your ' your_weapon\n    {print} good_fate[i]\n    {print} 'YOU WIN!'\n{else}\n    {print} 'You have chosen the wrong weapon...'\n    {print} bad_fate[i]\n    {print} 'GAME OVER'\n```\n"
                start_code: '# разместите здесь свой код'
    piggybank:
        name: Копилка
        description: Считайте свои карманные деньги!
        default_save_name: Копилка
        levels:
            12:
                story_text: "В этом приключении вы узнаете, как сделать цифровую копилку.\nЗавершите код, чтобы подсчитать, сколько у вас денег и сколько вам нужно накопить, чтобы купить то, что вы хотите!\n"
                start_code: '# разместите здесь свой код'
                example_code: "```\n{print} 'Цифровая копилка'\nwish = {ask} 'Что бы вы хотели купить?'\nцена = {ask} 'Сколько это стоит?'\nсбережения = {ask} 'Сколько денег вы уже сэкономили?'\nцена = {ask} 'Сколько карманных денег ты получаешь в неделю?'\nэкономия = цена - экономия\nнедели = экономия / пособие\n{print} 'Ты можешь купить _ за _ недель'\n```\n"
            14:
                story_text: "В этом уровне вы можете позволить Хеди сообщить вам, если вы накопили достаточно денег!\n"
                example_code: "```\nmoney = {ask} 'How much money have you saved?'\nwish = {ask} 'How much money do you need?'\nallowance = {ask} 'How much pocket money do you get each week?'\nto_save = wish - money\nweeks = to_save / allowance\n{if} wish > money\n    {print} 'You need to save up some more!'\n    {print} 'Youll need ' weeks ' more weeks.'\n{else}\n    {print} 'Great! You have enough'\n    {print} 'Lets go shopping!'\n```\n"
                start_code: '# разместите здесь свой код'
    quizmaster:
        name: Викторина
        description: Составьте свою собственную викторину!
        default_save_name: Викторина
        levels:
            14:
                story_text: "В этом приключении вы можете создать свою собственную викторину! Заполняйте пробелы, добавляйте новые вопросы и наслаждайтесь своей собственной викториной!\nВы можете составить викторину о чем угодно: о своем хобби, любимом животном, любимой книге или вообще о чем угодно!\n"
                example_code: "```\n{print} 'Make your own quiz'\npoints_a = 0\npoints_b = 0\n{print} 'Question'\n{print} 'Answer option A'\n{print} 'Answer option B'\nanswer = {ask} 'Which answer?'\n{if} answer == 'A'\n    points_a = points_a + 1\n{if} answer == 'B'\n    points_b = points_b + 1\n{print} 'End of the quiz!'\n{print} 'Lets see the results!'\n{if} points_a > points_b\n    {print} 'You belong to the A club'\n{if} points_b > points_a\n    {print} 'You belong to the B club'\n```\n"
                start_code: '# разместите здесь свой код'
    language:
        name: Язык
        description: Отрабатывайте слова на иностранном языке
        default_save_name: Язык
        levels:
            5:
                story_text: "Создайте свою собственную программу для тренировки словарного запаса на новом языке.\n\nМожете ли вы сделать эту программу для другого языка? Или вы можете добавить больше слов во французскую программу?\n"
                example_code: "```\n{print} 'Learn French!'\ncat {is} {ask} '🐱'\n{if} cat {is} chat {print} 'Terrific!'\n{else} {print} 'No, cat is chat'\nfrog {is} {ask} '🐸'\n{if} frog {is} grenouille {print} 'Super!'\n{else} {print} 'No, frog is grenouille'\n```\n"
                start_code: '# разместите здесь свой код'
            16:
                story_text: "Создайте свою собственную программу для тренировки словарного запаса на новом языке.\n"
                example_code: "```\nfrench_words = ['bonjour', 'ordinateur', 'pomme de terre']\ntranslation = ['hello', 'computer', 'potato']\nscore = 0\n{for} i {in} {range} 1 {to} 3\n    answer = {ask} 'What does ' french_words[i] ' mean?'\n    correct = translation[i]\n    {if} answer == correct\n        {print} 'Correct!'\n        score = score + 1\n    {else}\n        {print} 'Wrong, ' french_words[i] ' means ' translation[i]\n{print} 'You gave ' score ' correct answers.'\n```\n"
                start_code: '# разместите здесь свой код'
    tic:
        name: Крестики-нолики
        description: Сыграйте в крестики-нолики!
        default_save_name: Тик
        levels:
            13:
                story_text: "В этом приключении вы можете запрограммировать игру Tic Tac Toe. Вы можете играть с двумя людьми. По очереди вы выбираете номер места (1 - 9), на которое вы хотите поставить свой знак (x или o).\nПервый игрок, который поставит 3 знака подряд (по горизонтали, вертикали или диагонали), побеждает!\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game {is} 'on'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice {is} 1\n                spot_1 = sign\n            {if} choice {is} 2\n                spot_2 = sign\n            {if} choice {is} 3\n                spot_3 = sign\n            {if} choice {is} 4\n                spot_4 = sign\n            {if} choice {is} 5\n                spot_5 = sign\n            {if} choice {is} 6\n                spot_6 = sign\n            {if} choice {is} 7\n                spot_7 = sign\n            {if} choice {is} 8\n                spot_8 = sign\n            {if} choice {is} 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner {is} 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign {is} 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
                start_code: '# Напишите свой код здесь'
            15:
                start_code: '# разместите здесь свой код'
                story_text: "В этом уровне вы можете улучшить свою игру в Крестики-нолики с помощью цикла {while}. С помощью этого цикла вы можете объединить `{if} game != 'over'` и `{for} i {in} {range} 1 {to} 9` в одну простую линию.\nПроверьте это:\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over'\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots\n        {remove} choice {from} open_spots\n        {if} choice == 1\n            spot_1 = sign\n        {if} choice == 2\n            spot_2 = sign\n        {if} choice == 3\n            spot_3 = sign\n        {if} choice == 4\n            spot_4 = sign\n        {if} choice == 5\n            spot_5 = sign\n        {if} choice == 6\n            spot_6 = sign\n        {if} choice == 7\n            spot_7 = sign\n        {if} choice == 8\n            spot_8 = sign\n        {if} choice == 9\n            spot_9 = sign\n    {else}\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    winner = {ask} 'Did you win?'\n    {if} winner == 'yes'\n        {print} 'Good job, player ' sign '!'\n        game = 'over'\n    {else}\n        {if} sign == 'x'\n            sign = 'o'\n        {else}\n            sign = 'x'\n```\n"
            17:
                start_code: '# разместите здесь свой код'
                story_text: "В предыдущих уровнях игра \"Крестики-нолики\" имела раздражающую особенность. После каждого хода вы должны были сами заполнить, выиграли вы или нет.\nЭто делало игру играбельной, но в то же время довольно медленной. В этом уровне мы изучили команду `{elif}`, которая может решить эту проблему.\nИспользовать {elif} для того, чтобы Хеди могла проверить, выиграл ли игрок или нет, очень интересно, но это также требует достаточно большого количества дополнительных строк.\n\nВ примере кода вы видите, что мы добавили требования для победы (3 места подряд по горизонтали, вертикали или диагонали).\nВы можете найти их в строках с 46 по 69. Видно, что каждый раз, когда требование выполняется (то есть если игрок выиграл), переменная game устанавливается в значение 'over'.\nЭто означает, что цикл {while} будет остановлен и игра закончится.\n"
                example_code: "```\nsign = 'x'\nopen_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over':\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots:\n        {remove} choice {from} open_spots\n        {if} choice == 1:\n            spot_1 = sign\n        {if} choice == 2:\n            spot_2 = sign\n        {if} choice == 3:\n            spot_3 = sign\n        {if} choice == 4:\n            spot_4 = sign\n        {if} choice == 5:\n            spot_5 = sign\n        {if} choice == 6:\n            spot_6 = sign\n        {if} choice == 7:\n            spot_7 = sign\n        {if} choice == 8:\n            spot_8 = sign\n        {if} choice == 9:\n            spot_9 = sign\n    {else}:\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {else}:\n        {if} sign == 'x':\n            sign = 'o'\n        {else}:\n            sign = 'x'\n```\n"
            14:
                story_text: "В предыдущих уровнях вы создали игру \"Крестики-нолики\". Теперь вы научились использовать знаки =, == и !=.\nВы можете использовать эти знания в своей новой игре Tic Tac Toe, например, так:\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game != 'over'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice == 1\n                spot_1 = sign\n            {if} choice == 2\n                spot_2 = sign\n            {if} choice == 3\n                spot_3 = sign\n            {if} choice == 4\n                spot_4 = sign\n            {if} choice == 5\n                spot_5 = sign\n            {if} choice == 6\n                spot_6 = sign\n            {if} choice == 7\n                spot_7 = sign\n            {if} choice == 8\n                spot_8 = sign\n            {if} choice == 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner == 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign == 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
                start_code: '# разместите здесь свой код'
    blackjack:
        name: Блэкджек
        description: Постарайтесь приблизиться к 21, насколько это возможно
        default_save_name: Блэкджек
        levels:
            17:
                story_text: "Блэкджек - это простая карточная игра, в которой вы должны как можно ближе подобраться к 21 очку. Вы получаете две карты. Каждая карта имеет свое цифровое значение, а карты с лицом (валет, королева и король) стоят 10 очков.\nТуз стоит 1 или 11 очков (вы можете выбрать). Дилер, ваш противник, также получает две карты.\nЕсли вы хотите, вы можете взять еще одну карту, и ее очки будут добавлены к вашей сумме. Дилер также может взять еще одну карту.\nНо будьте осторожны, чтобы не набрать больше 21 очка, потому что в этом случае вы проиграете!\nПобеждает тот игрок, который ближе всего подойдет к 21 очку, не превысив его!\n\nВеселитесь!\n"
                example_code: "```\n{print} 'BLACKJACK'\ncards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen','King', 'Ace']\npoints = 0\ndealer_points = 0\ncard_1 = cards[{random}]\ncard_2 = cards[{random}]\ncard_3 = cards [{random}]\ndealer_card_1 = cards[{random}]\ndealer_card_2 = cards[{random}]\ndealer_card_3 = cards[{random}]\n# Points for card 1\n{if} card_1 == 'Jack' {or} card_1 == 'Queen' {or} card_1 == 'King':\n    points = points + 10\n{elif} card_1 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_1\n# Points for card 2\n{if} card_2 == 'Jack' {or} card_2 == 'Queen' {or} card_2 == 'King':\n    points = points + 10\n{elif} card_2 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_2\n# Points for dealer card 1\n{if} dealer_card_1 == 'Jack' {or} dealer_card_1 == 'Queen' {or} dealer_card_1 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_1 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_1\n# Points for dealer card 2\n{if} dealer_card_2 == 'Jack' {or} dealer_card_2 == 'Queen' {or} dealer_card_2 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_2 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_2\n# Two Aces\n{if} card_1 == 'Ace' {and} card_2 == 'Ace':\n    points = 12\n{if} dealer_card_1 == 'Ace' {and} dealer_card_2 == 'Ace':\n    dealer_points = 12\n# Scoreboard\n{print} 'You have a ' card_1 ' and a ' card_2 ' (' points ' points)'\n{print} 'The dealer has a ' dealer_card_1 ' and a ' dealer_card_2 ' (' dealer_points ' points)'\n# Extra card for the player\nhit = {ask} 'Do you want an extra card?'\n{if} hit == 'yes':\n    {if} card_3 == 'Jack' {or} card_3 == 'Queen' {or} card_3 == 'King':\n        points = points + 10\n    {elif} card_3 == 'Ace':\n        {if} points > 11:\n            points = points + 11\n        {else}:\n            points = points + 1\n    {else}:\n        points = points + card_3\n    print 'You get an extra ' card_3 ' (' points ' points)'\n{else}:\n    print 'No extra cards'\n# Winner\n{if} points > 21 {or} dealer_points > points {or} dealer_points == 21:\n    {print} 'You lose'\n{elif} dealer_points < 17:\n    {print} 'The dealer takes an extra card. It is a... ' dealer_card_3\n    {if} dealer_card_3 == 'Jack' {or} dealer_card_3 == 'Queen' {or} dealer_card_3 == 'King':\n        dealer_points = dealer_points + 10\n    {elif} dealer_card_3 == 'Ace':\n        {if} dealer_points < 11:\n            dealer_points = dealer_points + 11\n        {else}:\n            dealer_points = dealer_points + 1\n    {else}:\n        dealer_points = dealer_points + dealer_card_3\n    {print} 'The dealer has ' dealer_points ' points now'\n    {if} dealer_points < 21 {and} dealer_points > points:\n        {print} 'You lose'\n    {else}:\n        {print} 'You win'\n{elif} points > dealer_points {and} points < 21:\n    {print} 'You win!'\n```\n"
                start_code: '# разместите здесь свой код'
    years:
        name: Новый год
        description: Обратный отсчет до Нового года!
        default_save_name: Новогодний отсчет
        levels:
            11:
                story_text: "In this level you can use the `{for} i {in} {range}` command to countdown to the New Year.\n\n### Exercise\nFill in the blanks and make the code work!\n"
                example_code: "```\n{for} _ {in} _ 10 {to} 1\n    {print} i\n{print} 'Happy New Year!'\n```\n"
                start_code: '# разместите здесь свой код'
#    next:
#        name: Что дальше?
#        description: Что дальше?
#        default_save_name: Далее
#        levels:
#            1:
#                story_text: "Поздравляем! Вы достигли конца первого уровня. Надеюсь, вы уже сделали несколько потрясающих кодов, но Хеди еще многое предстоит открыть для себя. \n\nНа первом уровне вы могли заметить, что команда `{echo}` может сохранять только один бит информации за раз. \nНапример, в приключении в ресторане вы могли передать эхом, что клиент хочет съесть или что он хочет выпить, но не то и другое в одном предложении.\n"
#                example_code: "```\n{print} Welcome at Hedy's\n{ask} What would you like to eat?\n{echo} So you want \n{ask} what would you like to drink?\n{echo} So you want \n```\n"
#                story_text_2: "If the player types a hamburger and coke, you can't say \"so you would like a hamburger and coke\", but you have to make two separate line. \nAlso, the `{echo}` command only echoes the word at the end of the sentence. So you can't say \"your hamburger is coming right up!\"\n\nThat changes in level 2. In level 2 you'll learn to work with variables, that allow you to save multiple pieces of information and print them in any place you want.\nSo let's go to the next level!\n"
#                start_code: "{print} Поехали!"
#            2:
#                story_text: "В этом уровне вы узнали, что такое переменная и как ее использовать, чтобы сделать ваши приключения более интерактивными.\nНо... это не единственное, что можно делать с переменными! Вы также можете использовать переменные для составления списков.\nИ вы даже можете позволить Хеди выбирать случайное слово из списка, что позволит вам создавать настоящие игры!\nВзгляните на следующий уровень!\n"
#                start_code: "{print} Переходим на следующий уровень!"
#            3:
#                story_text: "На этом уровне вы практиковались в работе с переменными, но, возможно, вы столкнулись с этой ошибкой.\n\nПопробуйте выполнить этот код:\n```\nname {is} Sophie\n{print} Меня зовут имя\n```\nКонечно, вы хотели напечатать `My name is Sophie`, но Хеди напечатала `My Sophie is Sophie`.\nНа следующем уровне эта проблема решается с помощью кавычек.\n"
#                start_code: "{print} Переходим на следующий уровень!"
#            4:
#                story_text: "В предыдущих уровнях вы уже научились использовать `{at} {random}`{random}`, который делал ваши игры разными каждый раз, когда вы запускали код.\nНо это не совсем интерактивно, игрок не имеет никакого влияния на то, что происходит в игре.\n\nНа следующем уровне вы изучите команду `{if}`, которая позволяет давать различные ответы в вашей программе. Таким образом, вы сможете запрограммировать, например, секретный пароль для вашего компьютера.\nИтак, давайте посмотрим!\n\n```\npassword {is} {ask} 'Какой пароль правильный?'\n```\n"
#                start_code: "{print} 'Переходим на следующий уровень!'"
#            5:
#                story_text: "Теперь вы достигли конца этого уровня, поэтому вы выучили `{ask}` и `{if}`. Например, вы можете спросить гостей, что бы они хотели съесть.\nНо что вы еще не можете сделать, так это рассчитать стоимость ужина для каждого.\n\nСледующий уровень позволяет использовать в программах сложение, вычитание и умножение. Таким образом, вы сможете не только рассчитать цены в вашем ресторане, но и добавить секретный код, чтобы предоставить вашим друзьям и родственникам скидку.\nДругой вариант на следующем уровне - программирование собственной математической игры, чтобы ваш младший брат или сестра могли практиковаться в умножении.\nУбедитесь в этом сами на следующем уровне!\n"
#                example_code: "```\n{print} 'Добро пожаловать в МакХеди'\nзаказ {is} {ask} 'Что бы вы хотели съесть?'\n{print} 'Вы хотели бы ' заказ\n{if} заказать {is} гамбургер цена {is} 5\n{if} заказ {is} картофель фри цена {is} 2\nнапитки {is} {ask} 'Что бы вы хотели выпить?'\n{print} 'Вы бы хотели ' напитки\n{print} 'Это будет стоить ' цена ' долларов за ваш ' заказ ' пожалуйста'\n{print} 'Напитки бесплатны на этом уровне, потому что Хеди пока не может рассчитать цену...'\n```\n"
#                start_code: "{print} 'На следующий уровень!'"
#            6:
#                story_text: " Отличная работа! Вы достигли конца этого уровня, что означает, что вы практиковались с `{if}` и `{else}`. Вы, вероятно, заметили, что ваши коды становятся все длиннее и длиннее.\n Например, {if} вы хотите запрограммировать \"Happy Birthday\"\n\nЭто очень много кода для того, чтобы повторять одни и те же слова снова и снова. К счастью, на следующем уровне есть решение с помощью команды `{repeat}`, которая позволяет повторять строку кода несколько раз.\n"
#                example_code: "```\n{print} 'happy birthday to you'\n{print} 'с днем рождения тебя'\n{print} 'с днем рождения дорогая Хеди'\n{print} 'happy birthday to you'\n```\n"
#                start_code: "{print} 'На следующий уровень!'"
#            7:
#                story_text: "Теперь вы узнали, как повторить одну единственную строку кода. Это очень удобно, но этого не всегда достаточно. Иногда вы хотите повторить сразу несколько строк.\nНа следующем уровне вы сможете сгруппировать несколько строк кода и повторить эту небольшую группу строк одновременно!\n"
#                example_code: "```\n{repeat} 5 {times} {print} 'In the next level you can repeat multiple lines of code at once!'\n```\n"
#                start_code: "{print} 'Переходим на следующий уровень!'"
#            8:
#                story_text: "Отличная работа! Вы достигли конца очередного уровня! На этом уровне вы научились использовать несколько строк кода в команде {if} или {repeat}. Но вы еще не можете объединить их...\nХорошие новости! На следующем уровне вам будет разрешено помещать {if} внутрь {if}, или внутрь команды {repeat}.\n"
#                example_code: "```\nanswer = {ask} 'Would you like to go to the next level?'\n{if} answer {is} yes\n    {print} 'Great! You can use the {repeat} commando in the {if} command!'\n    {print} 'Hooray!'\n    {print} 'Hooray!'\n    {print} 'Hooray!'\n{else}\n    {print} 'Okay, you can stay here for a little longer!'\n```\n"
#                start_code: "{print} 'Переходим на следующий уровень!'"
#            9:
#                story_text: "У вас все отлично! На этом уровне мы все еще сталкиваемся с небольшой проблемой. Вы научились повторять строчки, но что если вы захотите немного изменить строчку.\nНапример, если вы хотите спеть песню \"If you're happy and you know it\". Это будет выглядеть следующим образом:\n\nЕсли вы также захотите, чтобы следующий куплет был \"stomp your feet\", и следующий, и следующий, вам придется полностью изменить код.\nНа следующем уровне вы изучите команду `{for}`, которая позволяет составить список действий и каждый раз повторять код с другим действием!\nПожалуйста, посмотрите!\n"
#                example_code: "```\n{repeat} 2 {times}\n    {print} 'if youre happy and you know it clap your hands'\n{print} 'если вы счастливы и знаете это, и вы действительно хотите показать это'\n{print} 'если ты счастлив и знаешь это, хлопай в ладоши'\n```\n"
#                start_code: "{print} 'Переходим на следующий уровень!'"
#            10:
#                story_text: "Вы достигли конца этого уровня, вы молодцы! Вы собираетесь перейти на следующий уровень. На более высоких уровнях Хеди уделяет все больше внимания обучению языку программирования Python.\nВ Python нет команды `{repeat}`, но есть команда, которая работает как {repeat}. Вам интересно узнать, как сказать `{repeat}` на языке Python? Скорее переходите и узнайте!\n"
#                start_code: "{print} 'Переходим на следующий уровень!'"
#            11:
#                story_text: "Возможно, вы уже пробовали использовать десятичные числа в своих ресторанных приключениях. Если да, то вы, вероятно, заметили, что Хеди еще не понимает их и всегда округляет.\nСо следующего уровня вы сможете использовать десятичные числа.\n"
#                example_code: "```\nбургер {is} 5\nнапиток {is} 2\nитого {is} бургер + напиток\nprint 'Вы заказали бургер и напиток'\nprint 'Это стоит ' всего ' долларов, пожалуйста'\n```\nПриведенный выше код работает, потому что бургер стоит 5 долларов, а напиток - 2 доллара. Но если вы берете на 50 центов больше, программа больше не работает! Например, код ниже:\n```\nбургер {is} 5.50\nнапиток {is} 2.30\nитого {is} бургер + напиток\nprint 'Вы заказали бургер и напиток'\nprint 'Это стоит ' всего ' долларов, пожалуйста'\n```\nПерейдите на следующий уровень, чтобы заставить этот код работать!\n"
#                start_code: "{print} 'Переходим на следующий уровень!'"
#            12:
#                story_text: "В предыдущих уровнях вы узнали, как поместить две команды `{if}`друг в друга. Это работает хорошо, но дает очень длинные и неудобные коды, такие как этот:\n\nВ этой системе вы должны указать и правильное имя пользователя, и правильный пароль.\nНа следующем уровне вы узнаете команду `{and}`, которая сделает этот код еще короче и понятнее!\nПроверьте это!\n"
#                example_code: "```\nusername {is} {ask} 'What is your username?'\npassword {is} {ask} 'What is your password?'\n{if} username {is} 'Hedy'\n    {if} password {is} 'secret'\n        {print} 'Welcome Hedy!'\n    {else}\n        {print} 'Access denied'\n{else}\n    {print} 'Access denied!'\n```\n"
#                start_code: "{print} 'Переходим на следующий уровень!'"
#            13:
#                story_text: "С помощью приведенной ниже программы вы можете вычислить, сдали ли вы какой-либо предмет в школе (т.е. оценка шесть или выше).\nВы можете видеть, что этот код крайне неэффективен из-за очень длинного кода в строке 5.\nВсе различные оценки от 1 до 5 должны были быть запрограммированы отдельно. К счастью для вас, на следующем уровне вы узнаете, как сделать это без этого чрезвычайно длинного кода!\n"
#                example_code: "```\nfirst_grade = {ask} 'What score did you get on your first test?'\nsecond_grade = {ask} 'What score did you get on your second test?'\nadded {is} first_grade + second_grade\nmean_grade {is} added / 2\n{if} mean_grade = 1 {or} mean_grade = 2 {or} mean_grade = 3 {or} mean_grade = 4 {or} mean_grade = 5\n    {print} 'Oh no! You have failed the subject...'\n{else}\n    {print} 'Great! You have passed the subject!'\n```\n"
#                start_code: "{print} 'Переходим на следующий уровень!'"
#            14:
#                story_text: "В этой игре ниже был сделан код, чтобы игрок мог играть столько, сколько захочет...\nНо код неэффективен и слишком длинный. Кроме того, что если игрок захочет сыграть не 100, а 101 игру?\nВы не можете играть до бесконечности?\nВ следующем уровне вы узнаете команду, которая сделает все это намного проще!\n"
#                example_code: "```\ngame {is} 'on'\n{for} i {in} {range} 1 {to} 100\n    {if} game {is} 'on'\n        answer = {ask} 'Do you want to continue?'\n        {if} answer {is} 'no'\n            game {is} 'over'\n        {if} answer {is} 'yes'\n            {print} 'Ok we will continue'\n```\n"
#                start_code: "{print} 'Переходим на следующий уровень!'"
#            15:
#                story_text: "На следующем уровне мы еще немного продвинемся к реальному коду Python. Вы также узнаете, как сопоставить два списка.\nТаким образом, вы сможете запрограммировать код, в котором правильное животное будет сопоставлено с правильным звуком.\nПотому что два кода ниже... являются очевидной бессмыслицей!\n"
#                example_code: "```\nживотные = 'курица', 'лошадь', 'корова'\nзвуки = 'кудахтанье', 'клекот', 'мычание'\n{for} животное {in} животные\n    {print} Животное \"говорит\" звуки {at} {random}\n```\nВы также можете попытаться сделать это таким образом, но....\n```\nживотные = 'курица', 'лошадь', 'корова'\nзвуки = 'cluck', 'neigh', 'moo'\n{for} животное {in} животные\n    {for} звук {in} звуки\n        {print} Животное \"говорит\" звук\n```\n"
#                start_code: "{print} 'Переходим на следующий уровень!'"
#            16:
#                story_text: "На следующем уровне пришло время для новой команды. Вы могли заметить в предыдущих уровнях, что `{if}` и `{else}` иногда недостаточно.\nНапример, в этом коде:\n"
#                example_code: "```\n{print} 'What is for dinner tonight?'\noptions = ['pizza', 'broccoli', 'green beans']\nchosen = options {at} {random}\n{if} chosen = 'pizza'\n    {print} 'Yummy! Pizza!'\n{else}\n    {print} 'Yikes...'\n```\n"
#                story_text_2: В этом коде было бы здорово иметь 2x `{else}`, чтобы можно было выбрать один вариант для брокколи и один для стручковой фасоли. Следующий уровень поставляется с новой командой `{elif}`, которая делает это возможным! Так что посмотрите следующий уровень прямо сейчас!
#                start_code: "{print} 'Переходим на следующий уровень!'"
#            17:
#                story_text: "На следующем уровне вы изучите реальный способ использования Python `{print}`.\n"
#                start_code: "{print} 'Переходим на следующий уровень!'"
#            18:
#                story_text: "Поздравляем! Вы достигли последнего уровня Hedy! Код, который вы создали здесь, можно скопировать в реальные среды Python, такие как replit или PyCharm, и продолжить обучение там!\nОбратите внимание, что Python может читать только английские команды, поэтому если вы использовали другие языки, вам придется перейти на английский.\n"
#                start_code: "{print} (\"Отличная работа!!!\")"
    pressit:
        levels:
            5:
                story_text: "In this level there is another new keyword: `{pressed}`!\nWith `{pressed}` you can use keys on your keyboard to control what lines are used.\n\n### Exercise\nLook at the example and add one more line of code that reacts to a key press.\n"
                story_text_2: "You can also link turtle commands to keys.\n\n### Exercise\nCopy the lines a few times so you can create a larger drawing.\n"
                example_code: "```\n{print} 'Do you want a good (g) or bad (b) ending?'\n{if} g {is} {pressed} {print} 'They lived happily ever after ❤'\n{else} {print} 'The prince was eaten by a hippopotamus 😭'\n```\n"
                example_code_2: "```\n{if} y {is} {pressed} {forward} 15\n{else} {turn} 90\n```\n"
                start_code: '# place your code here'
            7:
                story_text: "Now that you have learned about `{repeat}`, we can press keys multiple times.\nYou can use it to make the turtle walk forward and turn.\n\n### Exercise\nThe code you have seen in level 5 only checks the key once. Copy the example code and add a `{repeat}` to it, so that you can press the keys many times.\nUse this code to draw something nice.\n"
                example_code: "```\n{if} x {is} {pressed} {forward} 15 {else} {turn} 90\n```\n"
                start_code: '# place your code here'
            9:
                start_code: '# place your code here'
                story_text: "Now that you know how to combine statements, you can create a touch type tool with `{pressed}`.\n\n### Exercise\nFinish the code. Each time a random letter should be chosen, which you have to press. You get a point for a correct press, and and two points deduction for a wrong press.\n**(extra)** Clear the screen after each letter, and show the user how many points they have scored.\n"
                example_code: "```\npoints = 0\nletters = a, b, c, d, e\n{repeat} 10 {times}\n    letter = _ _ _\n    {print} 'Press the letter ' letter\n    {if} letter {is} {pressed}\n    _\n    _\n    _\n```\n"
        description: Try linking a keyboard key to a command!
        default_save_name: Pressed
        name: Key presses
    print_command:
        name: "{print}"
        levels:
            1:
                story_text: "## Команда печати\nТы можешь напечатать текст на экране с помощью команды  `{print}`.\n"
                story_text_2: "### Exercise\nIn Hedy you will find exercises in every adventure. An exercise allows you to practise the new commands and concepts, and lets you give your own twist to the example codes.\nIn this exercise you will see a pink blank space. You have to fill something in the place of the blank space before the code can be ran.\n\nFill in the `{print}` command in the blank space and then add five more lines of code. Each line has to start with a `{print}` command.\nHave fun!\n"
                example_code: "```\n{print} Hi there, programmer!\n{print} Welcome to Hedy!\n```\n"
                example_code_2: "```\n_ Hello!\n```\n"
                start_code: "{print} Welcome to Hedy!\n"
            18:
                start_code: "name = 'Hedy'\n{print}('My name is ', name)"
                story_text: "We arrived at real Python code! That means we need to use parentheses with `{print}` and `{range}` from now on.\nIt also means you can use Hedy code from this level in any Python environment as long as you use the English commands. If you haven't until now, you can switch the toggle in the commands menu to do so."
                example_code: "```\n{print}('Hello!')\n{for} i {in} {range}(1, 10):\n    {print}('This is line ', i)\n```\n"
                story_text_2: If you want to print more than one item, you need to separate them by commas.
                example_code_2: "```\ntemperature = 25\n{print}('It is ', temperature, ' degrees outside')\n```\n"
                story_text_3: The final change we will need to make to get Python code is changing `{ask}` into `{input}`.
                example_code_3: "```\n{print}('My name is Hedy!')\nname = {input}('What is your name?')\n{print}('So your name is ', name)\n```\n"
        description: Introduction print command
        default_save_name: print
    ask_command:
        name: "{ask}"
        description: Introduction ask command
        default_save_name: ask_command
        levels:
            1:
                story_text: "## The ask command\nNow that you can use the `{print}` command, you are ready to learn the next command: `{ask}`. With the `{ask}` command, you can ask a question. Check it out:\n"
                example_code: "```\n{print} Hello!\n{ask} What is your name?\n```\n"
                story_text_2: "## The echo command\nIf you want the computer to repeat the answer, you can use the `{echo}` command. The answer will then be echoed back at the end of the sentence, so in this example after hello.\n"
                story_text_3: "### Exercise\nTry out the `{ask}` and `{echo}` commands. Firstly, fill in the blanks to make this program work.\nThen ask 2 more questions using the `{ask}` command, after each `{ask}` use an `{echo}` to print the answer on the screen.\n"
                example_code_2: "```\n{print} Hello!\n{ask} What is your name?\n{echo} hello\n```\n"
                example_code_3: "```\n_ How are you doing?\n_\n```\n"
                start_code: "{print} Hello!\n{ask} What is your name?\n{echo} hello\n"
            2:
                story_text: "## The ask command\nNow that we can use **variables** in our codes, we no longer need the `{echo}` command.\nWe can use variables to store the answers to our questions and this way we can use the answer to multiple questions in our codes.\nCheck it out:\n\nThis way your code is becoming interactive!\n"
                example_code: "```\nname {is} {ask} What is your name?\n{print} Hello name\nage {is} {ask} How old are you?\n{print} name is age years old.\n```\n"
                story_text_2: "### Exercise\nIn the previous tab you have practised with setting variables with the `{is}` command.\nYou have created at least 3 variables and used them with a print command.\nNow, instead of setting the variables we want you to make the variables interactive, like we did in our example.\n\nCopy your code from the previous tab and make the variables interactive by using `{ask}` commands.\n"
                example_code_2: "```\nfavorite_animals is ask What is your favorite animal?\nprint I like favorite_animals\n```\n"
                start_code: "name {is} {ask} What is your name?\n{print} Hello name\nage {is} {ask} How old are you?\n{print} name is age years old."
    add_remove_command:
        name: "{add} {to} & {remove} {from}"
        description: introducing add to and remove from
        default_save_name: add_remove_command
        levels:
            3:
                story_text: "## Add to\nYou can add items to the list with the `{add} {to}` command. To add an item to a list you can simply type: `{add} penguin {to} animals` or you can use the `{ask}` command like in the example code.\n"
                example_code: "```\nanimals {is} dog, cat, kangaroo\nlike {is} {ask} What is your favorite animal?\n{add} like {to_list} animals\n{print} I choose animals {at} {random}\n```\n"
                story_text_2: "## Remove from\nIf you can add items to a list, of course you can also take them off. This is done with the `{remove} {from}` command.\n"
                example_code_2: "```\nanimals {is} dog, cat, kangaroo\ndislike {is} {ask} What animal do you not like?\n{remove} dislike {from} animals\n{print} I choose animals {at} {random}\n```\n"
                story_text_3: "### Exercise\nTry out the new commands in this virtual restaurant. Add the flavor the player is hpoing for to the list and remove the flavors they are allergic to.\n"
                example_code_3: "```\n{print} Mystery milkshake\nflavors {is} strawberry, chocolate, vanilla\nhope {is} {ask} What flavor are you hoping for?\n_\nallergies {is} {ask} Are you allergic to any flavors?\n_\n{print} You get a flavors {at} {random} milkshake\n```\n"
                start_code: "animals {is} dog, cat, kangaroo\nlike {is} {ask} What is your favorite animal?\n{add} like {to_list} animals\ndislike {is} {ask} What animal do you not like?\n{remove} dislike {from} animals\n{print} I choose animals {at} {random}"
    in_command:
        name: "{in}"
        description: Introducing the in command
        default_save_name: in_command
        levels:
            5:
                story_text: "## Lists\nWhen we want to check if something is in a list, we can now use the `{in}` command.\nThis code prints pretty! if you choose green or yellow, and meh otherwise.\n"
                example_code: "```\npretty_colors {is} green, yellow\nfavorite_color {is} {ask} 'What is your favorite color?'\n{if} favorite_color {in} pretty_colors {print} 'pretty!'\n{else} {print} 'meh'\n```\n"
                story_text_2: "### Exercise\nFinish the example code by filling in the blanks with commands that you've learned.\nWhen you've finished the code, try to create a code of your own and use a question that you've thought of yourself.\n"
                example_code_2: "```\nanimals is dog, cow, sheep\nanswer is ask 'What is your favorite animal?'\n_ answer _ animals _ 'Mine too!'\n_ _ 'My favorite animals are dogs, cows and sheep'\n```\n"
                start_code: "pretty_colors {is} green, yellow\nfavorite_color {is} {ask} 'What is your favorite color?'\n{if} favorite_color {in} pretty_colors {print} 'pretty!'\n{else} {print} 'meh'"
    quotation_marks:
        levels:
            12:
                example_code: "```\nname = 'Hedy the Robot'\n{print} 'Hello ' name\n```\n"
                story_text: "**All texts need to be in quotation marks**\nFor this level on you will also have to use quotation marks when storing a text with `=`:\n"
                story_text_2: "**All items in lists need quotation marks too**\nLists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.\nThis allows you to save two words as 1 item on the list, for example 'Iron Man'.\n"
                example_code_2: "```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n"
                story_text_3: "**All text after `{if}` comparisons need quotation marks too**\n"
                example_code_3: "```\nname = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n"
                story_text_4: "**Numbers don't need quotation marks**\nFor numbers, you do not use quotation marks in the `=`:\n"
                example_code_4: "```\nscore = 25\n{print} 'You got ' score\n```\n"
                start_code: "name = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'"
            4:
                story_text: "## 'Quotation marks'\nIn level 4 `{ask}` and `{print}` have changed.\nYou must put text that you want to print between quotation marks.\nThis is useful, because now you can print all the words you want. Also the words you used to store something with `{is}`.\nMost programming languages also use quotation marks when printing, so we are also getting a step closer to real programming!\n"
                story_text_2: "## Contractions\nImportant! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.\nMake sure to remove those apostrophes and change the spelling to I am or What is.\nCheck out the example code to see the wrong way of using apostrophes.\n"
                example_code: "```\n{print} 'You need to use quotation marks from now on!'\nanswer {is} {ask} 'What do we need to use from now on?'\n{print} 'We need to use ' answer\n```\n"
                example_code_2: "```\n_ This is the wrong way of using apostrophes _\n{print} 'I'm babysitting my sister's kids'\n{print} 'What's more fun than that?'\n```\n"
                start_code: "{print} 'You need to use quotation marks from now on!'\nanswer {is} {ask} 'What do we need to use from now on?'\n{print} 'We need to use ' answer"
        name: "'quotation marks'"
        description: Introduction quotation marks
        default_save_name: quotation_marks
    maths:
        levels:
            12:
                example_code: "```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n"
                start_code: "{print} 'decimal numbers now need to use a dot'\n{print} 2.5 + 2.5"
                story_text: "**Decimal numbers**\nSo far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers."
                story_text_2: |-
                    **Maths with words**
                    In this level you can also do addition with words like this:
                example_code_2: |
                    ```
                    a = 'Hello '
                    b = 'world!'
                    {print} a + b
                    ```
            6:
                start_code: "{print} '5 times 5 is ' 5 * 5"
                story_text: "## 1 + 1\nIn this level you learn something new: you can now also calculate.\n\nThe plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.\n\nThe times is a bit different, because there is no times symbol on your keyboard. Just search, there really isn't!\nThat is why we multiply with the asterisk above 8: `5 * 5`. Read that as \"5 times 5\" that helps you remember it best.\n"
                example_code: "```\n{print} '5 plus 5 is ' 5 + 5\n{print} '5 minus 5 is ' 5 - 5\n{print} '5 times 5 is ' 5 * 5\n```\n"
                story_text_2: "We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:\n"
                example_code_2: "```\nname = Hedy\nanswer = 20 + 4\n```\n"
        name: maths
        description: Introducing maths
        default_save_name: maths
    harry_potter:
        name: Harry Potter
        description: Harry Potter adventures
        default_save_name: Harry Potter
        levels:
            10:
                start_code: '# place your code here'
                story_text: "### Exercise\nWe can also make a Harry Potter themed fortune teller. Fill in blanks such that 9 lines are printed.\n**Extra** Change the theme of the fortune teller into something else, such as your favorite book, film or tv show.\n"
                example_code: "```\nhouses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw\nsubjects = potions, defence against the dark arts, charms, transfiguration\nfears = Voldemort, spiders, failing your OWL test\nnames = Harry, Ron, Hermione\n_\n_ {print} name ' is placed in ' houses {at} {random}\n_ {print} name ' is great at ' subjects {at} {random}\n_ {print} name 's greatest fear is ' fears {at} {random}\n```\n"
    is_command:
        name: "{is}"
        description: introducing is command
        default_save_name: is_command
        levels:
            2:
                story_text: "## Variables\nYou can name a word with `{is}`. This is called a **variable**. In this example we made a variable called name and a variable called age. You can use the word name anywhere in your code and it will be replaced by Hedy, like this:\n"
                example_code: "```\nname {is} Hedy\nage {is} 15\n{print} name is age years old\n```\n"
                story_text_2: "### Exercise\nTime to make your own variables!\nIn the example code we made an example of the variable `favorite_animals`. In line 1 the variable is set, and in line 2 we haved used the variable in a print command.\nFirstly, finish our example by filling in your favorite animal in the blanks. Then make at least 3 of these codes yourself. Pick a variable, and set the variable with the {is} command. Then use it with a {print} command, just like we did.\n"
                example_code_2: "```\nfavorite_animals is _\n{print} I like favorite_animals\n```\n"
                start_code: "name {is} Hedy\nage {is} 15\n{print} name is age years old"
            14:
                start_code: "age = {ask} 'How old are you?'\n{if} age < 13\n    {print} 'You are younger than me!'\n{else}\n    {print} 'You are older than me!'"
                story_text: "We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.\nThe `<` checks if the first number is smaller than the second, for example age `<` 12 checks if age is smaller than 12.\nIf you want to check if the first number is smaller or equal to the second, you can use `<=`, for example age `<=` 11.\nThe `>` checks if the first number is bigger than the second, for example points `>` 10 checks if points is larger than 10.\nIf you want to check if the first number is bigger or equal to the second, you can use `>=`, for example points `>=` 11.\nYou use these comparisons in an `{if}`, like this:\n"
                example_code: "```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n"
                story_text_2: "From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:\n"
                example_code_2: "```\nname = {ask} 'What is your name?'\n{if} name == 'Hedy'\n    {print} 'You are cool!'\n```\n"
                story_text_3: "You can also compare if something is *not* equal to something else using `!=` like this:\n"
                example_code_3: "```\nname = {ask} 'What is your name?'\n{if} name != 'Hedy'\n    {print} 'You are not Hedy'\n```\n"
    random_command:
        name: "{random}"
        description: introducing at random command
        default_save_name: random_command
        levels:
            3:
                story_text: "## At random\nIn this level you can make a list using the `{is}` command. You can let the computer choose a random item from that list. You do that with `{at} {random}`.\n"
                example_code: "```\nanimals {is} dogs, cats, kangaroos\n{print} animals {at} {random}\n```\n"
                story_text_2: "You can use the `{at} {random}` command in a sentence as well.\n"
                example_code_2: "```\nfood {is} sandwich, slice of pizza, salad, burrito\n{print} I am going to have a food {at} {random} for lunch.\n```\n"
                start_code: "animals {is} dog, cat, kangaroo\n{print} animals {at} {random}\n"
                story_text_3: "### Exercise\nTry out the `{at} {random}` command by making your own gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!\nCan you do it? We have already put the first lines into the example code.\n"
                example_code_3: "```\n{print} The big gameshow!\n{print} There are 3 suitcases in front of you...\nchosen {is} {ask} Which suitcase do you choose?\nprices {is} _\n_\n```\n"
            16:
                start_code: "fruit = ['apple', 'banana', 'cherry']\n{print} fruit[random]"
                story_text: "We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.\nWe use square brackets to point out a place in a list. The {at} {random} command can not be used anymore."
                example_code: "```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
    sleep_command:
        name: "{sleep}"
        description: introducing sleep command
        default_save_name: sleep_command
        levels:
            2:
                story_text: "## The sleep command\nAnother new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.\n"
                example_code: "```\n{print} My favorite colour is...\n{sleep} 2\n{print} green!\n```\n"
                start_code: "{print} My favorite colour is...\n{sleep} 2\n{print} green!"
    if_command:
        name: "{if} & {else}"
        description: Introducing the if command
        default_save_name: if_command
        levels:
            5:
                story_text: "## If... else....\nIn level 5 there is something new, the `{if}`! With the `{if}` you can choose between two different options.\nThis code prints nice if you enter Hedy as a name, and boo! if you enter something else.\n`{ask}` and `{print}` still work like they did in level 4.\n"
                example_code: "```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'\n```\n"
                story_text_2: "Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:\n"
                example_code_2: "```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice'\n{else} {print} 'boo!'\n```\n"
                story_text_3: "### Exercise\nTry to create your own code with `{if}` and `{else}`. You can use the example code if you want.\n"
                example_code_3: "```\nanswer {is} {ask} '2 + 2 = ?'\n_ _ _ 4 _ 'Great job!'\n_ _ 'No 2 + 2 = 4'\n```\n"
                start_code: "name {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice'\n{else} {print} 'boo!'"
            8:
                start_code: "name {is} {ask} 'What is your name?'\n{if} name {is} Hedy\n    {print} 'Welcome Hedy'\n    {print} 'You can play on your computer!'\n"
                example_code: "```\nname {is} {ask} 'What is your name?'\n{if} name {is} Hedy\n    {print} 'Welcome Hedy'\n    {print} 'You can play on your computer!'\n```\n"
                story_text: "## If... Else...\nYou have learned to repeat a block of lines of code after a `{repeat}` command.\nNow you can also use indentation to make blocks after a {if} or {else} command.\nCheck out the example code.\n\n### Exercise\nAdd an {else} command to the example code. Make a block of line using indentation. You do this by starting each line with 4 spaces.\n"
    repeat_command:
        name: "{repeat}"
        description: repeat command
        default_save_name: repeat_command
        levels:
            7:
                story_text: "## Repeat! Repeat! Repeat!\nLevel 7 adds the `{repeat}` command.  `{repeat}` can be used to execute one line of code multiple times. Like this:\n\n### Exercise\nPlay around with the repeat command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?\n"
                example_code: "```\n{repeat} 3 {times} {print} 'Hedy is fun!'\n```\n"
                start_code: "{print} 'happy birthday to you'\n{print} 'happy birthday to you'\n{print} 'happy birthday dear Hedy'\n{print} 'happy birthday to you'\n"
            9:
                start_code: "{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    {else}\n        {print} 'pizza is better'"
                story_text: "In this level you can not only use multiple lines with `{if}` and `{repeat}`, but you can also put them together!\nIn the example you see an `{if}` command within a `{repeat}` command. It is also allowed the other way around, and an `{if}` is also allowed in an `{if}` and a `{repeat}` in a `{repeat}`.\nGive it a try!\n"
                example_code: "```\n{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    {else}\n        {print} 'pizza is better'\n```\n"
            8:
                start_code: "{repeat} 5 {times}\n    {print} 'Hello everyone'\n    {print} 'This will be printed 5 times'"
                story_text: "### Repeat commands and indentation\nIn this level you can repeat multiple lines of code with only 1 repeat command.\nYou do this by making a block of lines that you want to repeat.\nThe lines in this block will need **indentation** .\nThat means putting four spaces at the beginning of each line. You will also have to indent when you just want to create a block of one line.\n"
                example_code: "```\n{repeat} 5 {times}\n    {print} 'Hello everyone'\n    {print} 'This is all repeated 5 times'\n```\n"
    repeat_command_2:
        name: "{repeat} 2"
        description: repeat command 2
        default_save_name: repeat_command_2
        levels:
            7:
                story_text: "## Repeat with other commands and with variables\nYou have practiced the `{repeat}` command in combination with the `{print}` command now, but did you know you could also use other commands with `{repeat}` ?\nIn this example code you can see that `{repeat}` can also be used with an `{ask}`, `{if}` or `{else}` command.\n"
                story_text_2: "Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.\nThen, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.\n"
                example_code: "```\n{repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'\n{if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'\n{else} {repeat} 3 {times} {print} 'You have learned something new!'\n```\n"
                example_code_2: "```\n{print} 'Yay! It is your birthday!'\nage = {ask} 'How old are you now?'\n{repeat} age {times} {print} 'Hip Hip Hurray!'\n```\n"
                start_code: "{repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'\n{if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'\n{else} {repeat} 3 {times} {print} 'You have learned something new!'"
            8:
                story_text: "### In the block or not?\nIn this level you have to think carefully which lines of code should be in the block and which shouldn't.\nFor example: If you want to sing the song *the muffin man*. You only want the line with 'the muffin man' to be repeated twice.\nThis means the last line shouldn't start with indentation as it doesn't belong to the block.\nIf you do start the last line with indentation the song will turn out wrong.\n\n## Exercise\nEach line in the example code starts with a blank. Remove the blanks and try to figure out which line need indentation and which don't to make the muffin man song.\n"
                example_code: "```\n_ {print} 'Do you know the muffin man?'\n_ {repeat} 2 {times}\n_ {print} 'The muffin man'\n_ {print} 'Do you know the muffin man, who lives on Drury Lane?'\n```\n"
                start_code: "{repeat} 3 {times}\n    {print} 'This line will be repeated...'\n    {print} 'This one too...'\n{print} 'but this one will not!'"
    for_command:
        name: "{for}"
        description: for command
        default_save_name: for
        levels:
            10:
                start_code: "animals {is} dog, cat, blobfish\n{for} animal {in} animals\n    {print} 'I love ' animal"
                story_text: "## For\nIn this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.\n`{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with 4 spaces."
                example_code: "```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n    {print} 'I love ' animal\n```\n"
            11:
                start_code: "{for} counter {in} {range} 1 {to} 5\n    {print} counter"
                story_text: "In this level, we add a new form of the `{for}`. In earlier levels, we used `{for}` with a list, but we can also use `{for}` with numbers.\nWe do that by adding a variable name, followed by  `{in}` `{range}`. We then write the number to start at, `{to}` and the number to end at.\n\nTry the example to see what happens! In this level again, you will need to use indentations in lines below the `{for}` statements."
                example_code: "```\n{for} counter {in} {range} 1 {to} 5\n    {print} counter\n```\n"
            17:
                start_code: "{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Ready or not, here I come!'"
                story_text: "Now we are going to change indentation a little bit. Every time that we need an indentation, we need `:` at the line before the indentation.\n"
                example_code: "```\n{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Ready or not, here I come!'\n```\n"
    and_or_command:
        name: "{and} & {or}"
        description: introducing and or
        default_save_name: and or
        levels:
            13:
                start_code: "name = {ask} 'what is your name?'\nage = {ask} 'what is your age?'\n{if} name {is} 'Hedy' {and} age {is} 2\n    {print} 'You are the real Hedy!'"
                story_text: "We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two `{if}`s but can use `{and}` and `{or}`.\n\nIf you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct."
                example_code: "```\nname = {ask} 'what is your name?'\nage = {ask} 'what is your age?'\n{if} name {is} 'Hedy' {and} age {is} 2\n    {print} 'You are the real Hedy!'\n```\n"
    while_command:
        name: "{while}"
        description: while
        default_save_name: while_command
        levels:
            15:
                start_code: "answer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'"
                story_text: "We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.\nSo don't forget to change the value in the loop.\n\nIn the example code, we continue until a correct answer has been given.\nIf the correct answer is never given, the loop never ends!"
                example_code: "```\nanswer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'\n```\n"
    elif_command:
        name: "{elif}"
        description: elif
        default_save_name: elif
        levels:
            17:
                story_text: "In this level you can also use a new command: `{elif}`. `{elif}` is short for `{else}` `{if}` and you need it when you want to make 3 (or more!) options.\nCheck it out!\n"
                example_code: "```\nprices = ['1 million dollars', 'an apple pie', 'nothing']\nyour_price = prices[{random}]\n{print} 'You win ' your_price\n{if} your_price == '1 million dollars' :\n    {print} 'Yeah! You are rich!'\n{elif} your_price == 'an apple pie' :\n    {print} 'Lovely, an apple pie!'\n{else}:\n    {print} 'Better luck next time..'\n```\n"
                start_code: "prices = ['1 million dollars', 'an apple pie', 'nothing']\nyour_price = prices[{random}]\n{print} 'You win ' your_price\n{if} your_price == '1 million dollars' :\n    {print} 'Yeah! You are rich!'\n{elif} your_price == 'an apple pie' :\n    {print} 'Lovely, an apple pie!'\n{else}:\n    {print} 'Better luck next time..'"
    rock_2:
        name: Rock, paper, scissors 2
        description: Part 2 of rock, paper, scissors
        default_save_name: rock_2
        levels:
            2:
                story_text: "Now that you have learned how to use the `{ask} command, you can make your rock, paper, scissors code interavtive too!\n\n### Exercise\nMake the rock, paper, scissors code interactive by adding the `{ask}` command and a question to your rock, paper, scissors code.\n"
                example_code: "```\nchoice is _\n{print} I choose choice\n```\n"
                start_code: "# place your code here"
    clear_command:
        name: '{clear}'
        description: clear command
        default_save_name: clear_command
        levels:
            4:
                start_code: "print '3'\nsleep\nclear\nprint '2'\nsleep\nclear\nprint '1'\nsleep\nclear\nprint 'SURPRISE!'\n"
                story_text: "Time for a new command! With `{clear}` you can clear all the text form your output screen. This way you can prevent your screen getting too full of text.\nBeware! If you are using a `{clear}` command, remember to use a `{sleep}` above it. Otherwise Hedy will clear your screen without giving you the time to read!\n"
                example_code: "```\nprint '3'\nsleep\nclear\nprint '2'\nsleep\nclear\nprint '1'\nsleep\nclear\nprint 'SURPRISE!'\n```\n"
