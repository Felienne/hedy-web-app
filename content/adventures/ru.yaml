adventures:
    default:
        name: "Вступление"
        description: "Объяснение уровня"
        default_save_name: "intro"
        levels:
            6:
                start_code: "{print} '5 раз по 5 это ' 5 * 5"
                story_text: "## 1 + 1\n На этом уровне вы узнаете кое-что новое: теперь вы также можете вычислять.\n\n Плюс - это просто, вы пишете его как в математике: `5 + 5`, например. Минус также работает хорошо, это `5 - 5`.\n\n Со временем все немного иначе, потому что на клавиатуре нет символа времени. Просто поищите, его действительно нет!\n Поэтому мы умножаем со звездочкой над 8: `5 * 5`. Читайте это как \"5 умножить на 5\", это поможет вам лучше запомнить.\n"
                example_code: "```\n{print} '5 plus 5 is ' 5 + 5\n{print} '5 minus 5 is ' 5 - 5\n{print} '5 {times} 5 is ' 5 * 5\n```\n"
                story_text_2: "Мы также вносим изменения в хранение слова в переменной! Теперь вы можете использовать `=` вместо `{is}`, когда мы храним имя или число в переменной, например, так:\n"
                example_code_2: "```\nname = Хеди\nanswer = 20 + 4\n```\n"
            12:
                story_text_5: "**Числа не нуждаются в кавычках**.\nДля чисел не используются кавычки на странице `=`:\n"
                start_code: "{print} 'В десятичных числах теперь нужно использовать точку'\n{print} 2.5 + 2.5"
                story_text: "## Числа и тексты\n**Десятичные числа**\nДо сих пор Hedy не позволял использовать десятичные числа, такие как 1,5, но теперь мы это делаем. Обратите внимание, что компьютеры используют `.` для десятичных чисел."
                example_code: "```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n"
                story_text_2: "**Все тексты должны быть заключены в кавычки**.\nНа этом уровне вам также придется использовать кавычки при сохранении текста с `=`:\n"
                example_code_2: "```\nимя = 'Hedy the Robot'\n{print} 'Hello ' имя\n```\n"
                story_text_3: "**Все элементы в списках также нуждаются в кавычках**.\nСписки - это тексты, поэтому им тоже нужны кавычки. Обратите внимание, что каждый отдельный элемент списка заключен в кавычки.\nЭто позволяет сохранить два слова как один элемент в списке, например, \"Железный человек\".\n"
                example_code_3: "```\nсупергерои = 'Человек-паук', 'Бэтмен', 'Железный человек'\n{print} superheroes {at} {random}\n```\n"
                story_text_4: "**Весь текст после сравнений `{if}` также нуждается в кавычках**.\n"
                example_code_4: "```\nname = {ask} 'Как тебя зовут?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n"
                example_code_5: "```\nсчет = 25\n{print} 'Вы получили ' score\n```\n"
                story_text_6: "**Математика со словами** \nНа этом уровне также разрешается использовать знак + с текстами. Например:"
                example_code_6: "```\na = 'Hello'\nb = 'Мир!'\n{print} a + b\n```\n"
            1:
                story_text: "## Добро пожаловать в Hedy!\nНа Уровне 1 вы можете использовать команды `{print}`, `{ask}` и `{echo}`.\nВведите свой код в поле программирования. Или нажмите зеленую кнопку в блоке примера кода, и код будет набран за вас!\nПопробуйте выполнить код самостоятельно с помощью зеленой кнопки \"Выполнить код\" под полем программирования.\n\nВы можете распечатать текст на экране с помощью команды `{print}`.     \n"
                example_code: "```\n{print} Hello!\n{print} Welcome to Hedy!\n```\n"
                story_text_2: "Вы также можете запросить ввод с помощью команды `{ask}`и повторить его с помощью команды `{echo}` .\n"
                story_text_3: "Let's get started! Don't know what to create? In the next tabs you will find ideas for programs to build.\n"
                example_code_2: "```\n{ask} What is your name?\n{echo} hello\n```\n"
                start_code: '{print} hello world!'
            2:
                story_text: "## Variables\nIn level 2 we learn two new commands: `{is}` and `{sleep}`.\nYou can name a word with `{is}`. This is called a variable. In this example we made a variable called name and a variable called age. You can use the word name anywhere in your code and it will be replaced by Hedy, like this:\n\nThis way you no longer need the `{echo}` command!\n"
                example_code: "```\nname {is} Hedy\nage {is} 15\n{print} name is age years old\n```\n"
                story_text_2: "`{print}` still works the same, but the `{ask}` command has changed. You need to use a variable in the `{ask}` command as well. It looks like this:\n"
                example_code_2: "```\nanswer {is} {ask} What is your name?\n{print} Hello answer\n```\n"
                story_text_3: "Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.\n"
                example_code_3: "```\n{print} My favorite colour is...\n{sleep} 2\n{print} green!\n```\n"
                start_code: '{print} hello world!'
            3:
                story_text: "## Make a list!\nIn level 3 you can make a list. You can let the computer choose something random from the list. You do that with `{at} {random}`.\n"
                example_code: "```\nanimals {is} dog, cat, kangaroo\n{print} animals {at} {random}\n```\n"
                story_text_2: Вы также можете добавить элементы в список с `{add}` и удалить элементы с `{remove}`.
                example_code_2: "```\nanimals {is} dog, cat, kangaroo\n{add} penguin {to_list} animals\n{remove} cat {from} animals\n{print} animals {at} {random}\n```\n"
                start_code: '{print} Здравствуй мир!'
            4:
                start_code: "{print} 'Привет, мир'"
                story_text: "## 'Кавычки'\nНа уровне 4 `{ask}` и `{print}` изменились.\n\nВы должны заключить текст, который хотите напечатать, в кавычки.\n\nЭто полезно, потому что теперь вы можете печатать все слова, которые хотите. Также слова, которые вы использовали для хранения чего-либо с помощью `{is}`.\n\nБольшинство языков программирования также используют кавычки при печати, так что мы становимся на шаг ближе к настоящему программированию!\n"
                example_code: "```\nprint 'You need to use quotation marks from now on!'\nanswer is ask 'What do we need to use from now on?'\nprint 'We need to use ' answer\n```\n"
                story_text_2: "## Приключения становятся все сложнее и сложнее\nПриключения становятся все сложнее и сложнее на следующих вкладках.\nПоэтому лучше всего начинать слева и двигаться вправо, чтобы все больше и больше усложнять себе задачу.\n"
            18:
                start_code: |-
                    имя = 'Хеди'
                    {print}('Меня зовут ', имя)
                story_text: |-
                    ## The last level!
                    We arrived at real Python code! That means we need to use parentheses with {print} and {range} from now on.

                example_code: |
                    ```
                    {print}('Hello!')
                    {for} i {in} {range}(1, 10):
                       {print}('Это строка ', i)
                    ```

                story_text_2: |-
                    Если вы хотите вывести более одного элемента, их нужно разделить запятыми.

                example_code_2: |
                    ```
                    температура = 25
                    {print}('На улице ', температура, ' градусов')
                    ```

                story_text_3: |-
                    ## Ввод
                    Последнее изменение, которое нам нужно сделать для получения кода Python, - это замена `{ask}` на `{input}`.

                example_code_3: |
                    ```
                    {print}("Меня зовут Хеди!")
                    name = {input}('What is your name?')
                    {print}('Так тебя зовут ', имя)
                    ```

            5:
                start_code: "имя {is} {ask} 'как тебя зовут?'\n{if} имя {is} Хеди {print} 'круто!' {else} {print} 'meh'"
                story_text: "## If... else....\nНа 5 уровне есть что-то новенькое, `{if}`! С помощью `{if}` ты можешь выбирать между двумя разными опциями.\nЭтот код выводит \"nice\" если ты введешь \"Hedy\" в качестве имени, а если ты введешь что-либо другое, выведется \"boo!\".\n`{ask}` {и} `{print}` работают также, как они работали на 4 уровне.\n"
                example_code: "```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'\n```\n"
                story_text_3: "## Списки\nКогда мы хотим проверить, есть ли что-то в списке, мы можем использовать команду `{in}`.\nЭтот код выводит \"Красиво!\", если вы выбрали зеленый или желтый цвет, и \"Meh\" в противном случае.\n"
                example_code_3: "```\npretty_colors {is} green, yellow\ncolor {is} {ask} 'What is your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!'\n{else} {print} 'meh'\n```\n"
                story_text_2: "Иногда код с `{if}` становится очень длинным и не помещается на строке. <br> Вы также можете разделить код на две строки, начав вторую строку с `{else}` следующим образом:\n"
                example_code_2: "```\nимя {is} {ask} 'как тебя зовут?'\n{if} имя {is} Хеди {print} 'мило'\n{else} {print} 'boo!'\n```\n"
            7:
                start_code: "{repeat} 3 {times} {print} 'Hedy is fun!'"
                story_text: "## Уровень 7! Уровень 7!\nУровень 7 добавляет команду `{repeat}`. `{repeat}` можно использовать для многократного выполнения одной строки кода.\n"
                example_code: "```\n{repeat} 3 {times} {print} 'Hedy is fun!'\n```\n"
            8:
                start_code: "{repeat} 5 {times}\n    {print} 'Hello folks'\n    {print} 'Это будет напечатано 5 раз'"
                story_text: "## Отступы\n`{ask}` и `{print}` по-прежнему работают так, как вы их знаете. Но `{if}`, `{else}` и `{repeat}` изменились!\nТеперь вы можете выполнять группы кода вместе, но вам придется *отступать* код.\nЭто означает, что в начале строки нужно поставить четыре пробела. Вы также должны делать отступ, когда хотите создать блок из одной строки.\n"
                example_code: "Вот как теперь работает команда `{repeat}`:\n```\n{repeat} 5 {times}\n    {print} 'Привет всем'\n    {print} 'Это все повторяется 5 раз'\n```\nВот как теперь работают команды `{if}` и `{else}`:\n\n```\nname {is} {ask} 'Как вас зовут?'\n{if} name {is} Hedy\n    {print} 'Добро пожаловать, Хеди'\n    {print} 'Вы можете играть на своем компьютере!'\n{else}\n    {print} 'INTRUDER!'\n    {print} 'Вы не можете использовать этот компьютер!'\n```\n"
            9:
                start_code: "{repeat} 3 {times}\n    еда = {ask} 'Что вы хотите?'\n    {if} еда {is} пицца\n        {print} 'отлично!'\n    {else}\n        {print} 'пицца лучше'"
                story_text: "## Теперь все вместе!\nНа этом уровне вы можете не только использовать несколько строк с `{if}` и `{repeat}`, но и соединять их вместе!\nВ примере вы видите команду `{if}` внутри команды `{repeat}`. Допускается и обратное, и `{if}` также разрешено вводить в `{if}`, а `{repeat}` - в `{repeat}`.\nПопробуйте!\n"
                example_code: "```\n{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    else\n        {print} 'pizza is better'\n```\n"
            10:
                start_code: "животные {is} собака, кошка, рыба-глобус\n{for} животное {in} животные\n  {print} 'Я люблю' животное"
                story_text: "## Для каждого пункта в моем списке...\nНа этом уровне мы изучаем новый код под названием `{for}`. С помощью `{for}` вы можете создать список и использовать все элементы.\n`{for}` создает блок, как `{repeat}` и `{if}`, поэтому все строки в блоке должны начинаться с пробелов."
                example_code: "```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal\n```\n"
            11:
                start_code: "{for} счетчик {in} {range} 1 {to} 5\n    {print} счетчик"
                story_text: "## Loops!\n`{print}` работает точно так же, но мы добавляем новую форму `{for}`. Теперь вы можете написать `{for} counter {in} {range} 1 {to} 5`{in} {range} 1 {to} 5` вместо `{repeat} 5 {times}`{times}` и использовать `counter` в своей программе.\nПопробуйте это сделать и посмотрите, что получится! Не забывайте использовать отступы после утверждений `{for}` и `{if}` (Это означает начинать предложение с четырех пробелов)."
                example_code: "```\nfor counter in range 1 to 5\n    print counter\n```\n"
            13:
                start_code: "имя = {ask} 'как вас зовут?'\nвозраст = {ask} 'каков ваш возраст?'\n{if} имя {is} 'Хеди' {and} возраст {is} 2\n    {print} 'Ты настоящая Хеди!'"
                story_text: "## И... Или...?\nСейчас мы изучим `{and}` и `{or}`! Если вы хотите проверить два утверждения, вам не обязательно использовать два {if}, но можно использовать `{and}` и `{or}`. Если вы используете `{and}`, оба утверждения, слева и справа от `{and}`, должны быть истинными. Можно также использовать `{or}`. Тогда только одно утверждение должно быть верным."
                example_code: "```\nимя = {ask} 'как вас зовут?'\nвозраст = {ask} 'какой ваш возраст?'\n{if} имя {is} 'Хеди' {and} возраст {is} 2\n    {print} 'Ты настоящая Хеди!'\n```\n"
            14:
                start_code: "возраст = {ask} 'Сколько тебе лет?'\n{if} возраст < 13\n    {print} 'Ты младше меня!'\n{else}\n    {print} 'Ты старше меня!'"
                story_text: "## Великий, Величайший, Величайший!\nСейчас мы познакомимся с новыми предметами. Возможно, вы уже знаете их из математики: `<` и `>`.\nС помощью `<` проверяется, меньше ли первое число второго, например, возраст `<` 12 проверяется, меньше ли возраст 12.\nЕсли вы хотите проверить, меньше или равно ли первое число второму, вы можете использовать `<=`, например, возраст `<=` 11.\n `>` проверяет, больше ли первое число второго, например points `>` 10 проверяет, больше ли points 10.\nЕсли вы хотите проверить, больше или равно ли первое число второму, вы можете использовать `>=`, например points `>=` 11.\nЭти сравнения используются в `{if}`, например, так:\n"
                example_code: "```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n"
                story_text_2: "Начиная с этого уровня, если вы хотите сравнить точно, вы можете использовать два знака равенства. Так поступает большинство языков программирования:\n"
                example_code_2: "```\nname = {ask} 'What is your name?'\n{if} имя == 'Хеди'\n    {print} 'Ты крут!'\n```\n"
                story_text_3: "Вы также можете сравнивать, если что-то *не* равно чему-то другому, используя `!=`, как это:\n"
                example_code_3: "```\nname = {ask} 'What is your name?'\n{if} name != 'Hedy'\n    {print} 'Вы не Хеди'\n```\n"
            15:
                start_code: "ответ = 0\n{while} ответ != 25\n    ответ = {ask} 'Сколько будет 5 раз по 5?'\n{print} 'Был дан правильный ответ'"
                story_text: "## Больше петель!\nМы изучим новый цикл - цикл `{while}`! Мы продолжаем цикл до тех пор, пока утверждение истинно.\nПоэтому не забывайте менять значение в цикле.\n\nВ коде примера мы продолжаем цикл до тех пор, пока не будет получен правильный ответ.\nЕсли правильный ответ так и не будет получен, цикл не завершится!"
                example_code: "```\nanswer = 0\nwhile answer != 25\n    answer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n```\n"
            16:
                start_code: "фрукты = ['яблоко', 'банан', 'вишня']\n{print} фрукты"
                story_text: "## Все больше и больше похоже на настоящий код!\nМы будем создавать списки, как в Python, с квадратными скобками вокруг списков! Мы также сохраним кавычки вокруг каждого элемента, как мы учили на предыдущих уровнях.\nВы также можете использовать квадратные скобки, чтобы указать место в списках."
                example_code: "```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
            17:
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Готов или нет, но я иду!'
                story_text: |-
                    ## Elif
                    Now we are going to change indentation a little bit. Every time that we need an indentation, we need `:` at the line before the indentation.

                    In this level you can also use a new command: `{elif}`. `{elif}` is short for {else} {if} and you need it when you want to make 3 (or more!) options.
                    Check it out!
                example_code: |
                    ```
                    prices = ['1 million dollars', 'an apple pie', 'nothing']
                    your_price = prices[{random}]
                    {print} 'You win ' your_price
                    {if} your_price == '1 million dollars' :
                        {print} 'Yeah! You are rich!'
                    {elif} your_price == 'an apple pie' :
                        {print} 'Lovely, an apple pie!'
                    {else}:
                        {print} 'Better luck next time..'
                    ```
    story:
        name: История
        levels:
            3:
                example_code_2: "```\n{print} He hears a sound\nanimals {is} \U0001F43F, \U0001F994, \U0001F987, \U0001F989\nanimal {is} {ask} What do you think it is?\n{add} animal {to_list} animals\n{print} it was a animals {at} {random}\n```\n"
                story_text_3: "Вот пример команды `{remove}` в вашей истории\n\n## Задача\nМожете ли вы использовать 3 новые команды `{at} {random}`{random}`, `{add} {to}`{to}` и `{remove} {from}`{from}` в своей собственной истории?\n"
                start_code: '{print} Ваша история'
                story_text: "## История\nНа уровне 3 вы можете сделать свою историю более увлекательной. Вы можете использовать случайность для любого монстра, животного или другого препятствия, например, так:\n"
                example_code: "```\nanimals {is} \U0001F994, \U0001F43F, \U0001F989, \U0001F987\n{print} He now hears the sound of an animals {at} {random}\n```\n"
                story_text_2: "Команда `{add}` также может пригодиться в вашей истории.\n"
                example_code_3: "```\n{print} His backpack got way too heavy.\n{print} Inside were a bottle of water, a flashlight and a brick.\nbag {is} water, flashlight, brick\ndump {is} {ask} Which item should he dump?\n{remove} dump {from} bag\n```\n"
            1:
                story_text: "## Make a story\nIn level 1 you can make a story with a different main character that you enter yourself.\n\nIn the first line, use `{ask}` and ask who the main character in your story will be.\nAfter that first line, start with `{print}` {if} the sentence needs to be printed.\nYou use `{echo}` {if} you want your main character to be at the end of the sentence.\n"

                example_code: "\n```\n{ask} The main character of this story is\n{print} The main character is now going to walk in the forest\n{echo} He's a bit scared,\n{print} He hears crazy noises everywhere\n{print} He's afraid this is a haunted forest\n```\n"
                start_code: '{print} Ваша история начинается здесь'
                story_text_2: "## Задача\nМожете ли вы создать свою собственную историю в Hedy, используя `{print}`, `{ask}` и `{echo}`?\n"
            2:
                story_text: "## История\nНа уровне 2 вы можете сделать свой рассказ более интересным. Теперь имя вашего главного героя может находиться в любом месте предложения.\n\nПравда, для этого вам придется немного доработать программу. Теперь вы должны сначала назвать имя своего главного героя.\n\nЗатем вы можете поместить это имя в любое место в предложении.\n\n## Вызов\nМожете ли вы сами составить рассказ, используя переменную? Можете ли вы добавить еще больше переменных?\n"
                example_code: "\n```\nname {is} {ask} What is the name of the main character?\n{print} name is now going to run in the woods\n{print} name is a bit scared\n{print} Suddenly he hears a crazy noise...\n{sleep}\n{print} name is afraid this is a haunted forest\n```\n"
                start_code: '{print} Ваша история'
            4:
                story_text: "## История\nВозможно, вы заметили, что в предыдущих уровнях все еще существует проблема. Вы пытались напечатать предложение, содержащее слово name? Например, `{print}` my name is name.\nВы можете решить эту проблему в этом уровне. Вы должны использовать кавычки для всего, что собираетесь напечатать.\n"
                example_code: "```\nимя {is} Ганс\n{print} Имя главного героя - _ имя\n{print} имя _ сейчас собирается гулять по лесу _\n{print} имя _ немного боится _\nживотные {is} \U0001F994, \U0001F43F, \U0001F989, \U0001F987.\n{print} Он слышит звуки _ животных {at} {random}\n{print} имя _ боится, что это лес с привидениями.\n```\n"
                start_code: "{print} 'Ваша история будет напечатана здесь!'"
            5:
                story_text: "## История\nНа этом уровне вы можете запрограммировать различные концовки, которые сделают вашу историю еще более увлекательной.\n\n## Задача\nПридумайте две концовки для вашей истории, например:\n\n- Принцесса гуляет по лесу.\n- Она сталкивается с чудовищем\n\n- Счастливый конец: Она берет свой меч, и чудовище быстро убегает.\n- Плохая концовка: Монстр съедает принцессу\n\nВы также можете сделать так, чтобы имя можно было вводить повторно. Это работает так же, как и в предыдущих уровнях. Вы можете объединить это с `{if}`, и тогда у вас уже получится целая программа!\n"
                example_code: "```\nname {is} {ask} 'Who is walking in the forest?'\n{print} name 'walks through the forest'\n{print} name 'encounter a monster'\nend {is} {ask} 'Would you like a good or a bad ending?'\n{if} end {is} good {print} name 'takes the sword and the monster quickly runs away'\n{else} {print} 'The monster eats' name\n```\n"
                start_code: "{print} 'Здесь начнется ваша история!'"
            7:
                story_text: "## История\nВ рассказе кто-то произносит слова несколько раз. Например, когда кто-то зовет на помощь или поет песню.\nВы можете вставить такие повторы в свой рассказ, на этом уровне с `{repeat}`.\n\n## Задача\nМожете ли вы создать свою собственную историю с повторами?\n"
                example_code: "```\n{print} 'The prince kept calling for help'\n{repeat} 5 {times} {print} 'Help!'\n{print} 'Why is nobody helping me?'\n```\n"
                start_code: "{repeat} 5 {times} {print} 'Help!'"
            8:
                story_text: "## История\nВ этом уровне вы можете использовать несколько строк в командах {if}, таким образом вы можете улучшить счастливый или грустный конец!\n\n## Задача\nСможете ли вы создать свою собственную историю с двумя разными концовками?\n"
                example_code: "```\n{print} 'OH NO! The T-rex is closing in!'\nend = {ask} 'Do you want a happy or a sad ending?'\n{if} end {is} happy\n    {print} 'Just in time Richard jumps back into the time machine!'\n    {print} 'Michael types in the code and...'\n    {print} '\U0001F4A5ZAP!\U0001F4A5'\n    {print} 'They are back in their garage'\n{else}\n    {print} 'Michael yells COME ON RICHARD! RUN FASTER!'\n    {print} 'But Richard is too slow...'\n    {print} 'The T-rex closes in and eats him in one big bite!\U0001F996'\n```\n"
                start_code: '# разместите здесь свой код'
            9:
                story_text: "## История\nНа этом уровне вы можете использовать вложенность, чтобы поместить команды `{if}`, `{repeat}` или `{for}` внутри других команд `{if}`, `{repeat}` или `{for}`. Это дает вам множество возможностей и действительно помогает сделать вашу историю интерактивной.\n"
                example_code: "```\n{print} 'Robin is walking downtown'\nlocation = {ask} 'Is Robin going into a shop, or does she go home?'\n{if} location {is} shop\n    {print} 'She enters the shop.'\n    {print} 'Robin sees an interesting looking book'\n    book = {ask} 'Does Robin buy the book?'\n    {if} book {is} yes\n        {print} 'Robin buys the book and goes home'\n    {else}\n        {print} 'Robin leaves the shop and goes home'\n{else}\n    {print} 'Robin goes home'\n```\n"
                story_text_2: "Приведенный выше пример довольно прост, но, вложив в него {if}, вы можете действительно усовершенствовать свой код и превратить свою историю в настоящую игру. Посмотрите на этот пример!"
                example_code_2: "## Сложный код\n```\nмеч = потерян\nигра = включена\n{print} 'Наш герой идет через лес'\n{print} 'Путь разделяется на две части'\n{repeat} 2 {times}\n    {if} игра {is} on\n        путь = {ask} 'Какой путь она должна выбрать?\n        {if} путь {is} налево\n            {if} меч {is} найден\n                {print} 'Наш герой встречает дракона!'\n                {print} 'К счастью, у нашего героя есть меч, чтобы победить чудовище!'\n                игра = конец\n            {else}\n                {print} 'Наш герой находит дракона, но у него нет никакого оружия!'\n                {print} 'Наш герой побежден драконом...'\n                {print} 'Попробуйте еще раз'\n                игра = окончена\n        {if} путь {is} направо\n            {if} меч {is} потерян\n                {print} 'Наш герой находит меч'\n                {print} 'Это может очень пригодиться'\n                меч = найден\n            {else}\n                {print} 'Вы уже нашли меч. Здесь больше ничего не осталось'.\n                {print} 'Она идет обратно'\n```\n"
                start_code: '# разместите здесь свой код'
            10:
                story_text: "## История\nНа этом уровне вы можете использовать команду {for} в своем рассказе. Таким образом, вы можете легко запрограммировать детскую книгу \"Бурый медведь, бурый медведь, что ты видишь\".\n"
                example_code: "```\nanimals = red bird, black sheep, green frog, yellow duck, little child\n{print} 'brown bear'\n{print} 'brown bear'\n{print} 'What do you see?'\n{for} animal {in} animals\n    {print} 'I see a ' animal ' looking at me'\n    {print} animal\n    {print} animal\n    {print} 'What do you see?'\n{print} 'I see all the animals looking at me!'\n```\n"
                start_code: '# разместите здесь свой код'
            12:
                story_text: "## История\nНа этом уровне вы можете использовать кавычки для сохранения нескольких слов в переменной."
                example_code: "\n```\nname = 'The Queen of England'\n{print} name ' was eating a piece of cake, when suddenly...'\n```\n"
                start_code: '# разместите здесь свой код'
            13:
                story_text: "## История\nИспользуя команды `{and}` и `{or}`, вы можете сократить свои истории. Например, посмотрите историю о драконе.\n\n## Задача\nСможете ли вы создать свою собственную приключенческую мини-игру, подобную этой?\n"
                example_code: "```\nsword = 'lost'\ngame = 'on'\n{print} 'Our hero is walking through the forest'\n{print} 'The path splits two ways'\n{for} i {in} {range} 0 {to} 2\n    {if} game {is} 'on'\n        path = {ask} 'Which path should she choose?'\n        {if} path {is} 'left' {and} sword {is} 'found'\n            {print} 'Our hero comes across a dragon!'\n            {print} 'Luckily our hero has a sword to defeat the beast!'\n            game = 'over'\n        {if} path {is} 'left' {and} sword {is} 'lost'\n            {print} 'Our hero finds a dragon, but she doesnt have any weapons!'\n            {print} 'Our hero is beaten by the dragon...'\n            {print} 'Try again'\n            game = 'over'\n        {if} path {is} 'right' {and} sword {is} 'found'\n            {print} 'You have already found the sword. There is nothing left here.'\n            {print} 'She walks back'\n        {if} path {is} 'right' {and} sword {is} 'lost'\n            {print} 'Our hero finds a sword'\n            {print} 'This could come in very handy'\n            sword = 'found'\n```\n"
                start_code: '# разместите здесь свой код'
            15:
                story_text: "## История\nИспользование цикла `{while}` может сделать ваши истории более интересными. Например, вы можете использовать `{while} game {is} 'on'`{is} 'on'`, чтобы можно было играть до тех пор, пока игра не закончится.\nИли вы можете использовать `{while} sword {is} 'lost'`{is} 'lost'`, чтобы игрок не мог продолжить игру, пока не найдет что-нибудь.\n"
                example_code: "```\nkeys = 'lost'\n{print} 'You are standing in your garden and you have lost your keys.'\n{print} 'Where do you want to look for them?'\n{print} 'You can choose: tree, flowerbed, rock, postbox'\n{while} keys == 'lost'\n    location = {ask} 'Where do you want to look?'\n    {if} location == 'flowerbed'\n        {print} 'Here they are!'\n        keys = 'found'\n    {else}\n        {print} 'Nope they are not at the ' location\n{print} 'Now you can enter the house!'\n```\n"
                start_code: '# разместите здесь свой код'
        description: История
        default_save_name: История
    parrot:
        levels:
            3:
                story_text: "## Попугай\nНаучите своего попугая новому слову с помощью `{add}`.\n## Задача\nКак заставить попугая произносить несколько слов?\n"
                start_code: '# разместите здесь свой код'
                example_code: "```\nслова {is} squawk, Hedy\n{print} Дрессируйте своего попугая!\nnew_word {is} {ask} Какому слову вы хотите их научить?\n{add} новое_слово {to_list} слова\n{print} \U0001F9D2 Скажи новое_слово, Хеди!\n{print} \U0001F99C слова {at} {random}\n```\n"
            1:
                story_text: "## Попугай\nСоздайте своего собственного онлайн-попугая, который будет копировать вас!\n"
                example_code: "```\n{print} Im Hedy the parrot\n{ask} whats your name?\n{echo}\n{echo}\n```\n"
                start_code: '{print} Это попугай Хеди'
                story_text_2: "## Вызов\nМожете ли вы заставить попугая задать другой вопрос? Заполните пробелы в примере!\n"
                example_code_2: "```\n{print} Это попугай Хеди.\n{ask} _\n{echo}\n{echo}\n"
            2:
                story_text: "## Попугай\nСоздайте своего собственного онлайн-попугая, который будет копировать вас!\n"
                example_code: "```\n{print} Im Hedy the parrot\nname {is} {ask} whats your name?\n{print} name\n{sleep}\n{print} squawk\n{sleep}\n{print} name\n```\n"
                start_code: '{print} Это попугай Хеди!'
                story_text_2: "## Вызов\nВы можете использовать переменные, чтобы заставить попугая произносить не только ваше имя. Можете ли вы завершить этот код?\n"
                example_code_2: "```\n{print} Я попугай Хеди\nимя {is} {ask} как тебя зовут?\n{print} имя\n{sleep}\n{print} имя\nфамилия {is} {ask} какая у вас фамилия?\n_\n{sleep}\n_\n```\n"
            5:
                story_text: "## Попугай\nВознаградите своего попугая, если он произнесет правильное слово!\nЗакончите код, заполнив 4 пропущенные команды.\n"
                example_code: "```\nслова {is} squawk, Hedy\n{print} 'Дрессируйте своего попугая!'\nnew_word {is} {ask} 'Какому слову вы хотите их научить?'\n{add} new_word {to_list} words\nsaid_word {is} words {at} {random}\n{print} '\U0001F9D2 Скажи новое_слово, Хеди!'\n{print} '\U0001F99C ' said_word\n_ said_word {is} new_word _ '\U0001F9D2 Отличная работа, Хеди! \U0001F36A'\n_ _ '\U0001F9D2 Нет, Хеди! Скажи новое_слово\n```\n"
                start_code: '# разместите свой код здесь'
        name: Попугай
        description: Создайте своего собственного онлайн-попугая, который будет копировать вас!
        default_save_name: Попугай
    dishes:
        name: Блюда?
        description: Используйте компьютер, чтобы узнать, кто моет посуду (Начните с уровня 2)
        default_save_name: Блюда
        levels:
            3:
                story_text: "## Мытье посуды\nВы всегда расходитесь во мнениях дома по поводу того, кто должен сегодня мыть посуду или менять туалет?\nТогда вы можете позволить компьютеру выбирать очень справедливо. Вы можете запрограммировать это в этом уровне!\nСначала вы составляете список членов вашей семьи. Затем выберите '{at} {random}' из списка.\n"
                example_code: "```\npeople {is} mom, dad, Emma, Sophie\n{print} people {at} {random}\n```\n"
                story_text_2: "## Взломайте программу для мытья посуды!\nНе хочется самому мыть посуду? Взломайте программу, удалив свое имя из списка с помощью команды `{remove}` `{from}`.\n"
                example_code_2: "```\nлюди {is} мама, папа, Эмма, Софи\nваше_имя {is} {ask} Кто вы?\n_ ваше_имя _ люди\n{print} _ _ _ _ моет посуду\n```\n"
                start_code: '{print} Кто моет посуду?'
            4:
                story_text: "## Мытье посуды\nС помощью кавычек вы можете сделать планирование мытья посуды более красивым.\nНа этот раз пример кода не совсем полный.\n\nМожете ли вы завершить код, заполнив пропуски? Каждый пробел должен быть заменен одним словом или символом.\n\nСовет: Не забывайте о кавычках!\n"
                example_code: "```\npeople {is} mom, dad, Emma, Sophie\n{print} _ the dishes are done by _\n{sleep}\n{print} people {at} _\n```\n"
                start_code: "{print} 'Кто моет посуду?'"
            5:
                story_text: "## Посудомоечная машина\nС помощью сайта `{if}` вы можете получить больше удовольствия от выбора в программе. Вы можете сделать так, чтобы ваша программа реагировала на выбор, который сделал компьютер.\n\nМожете ли вы дописать код так, чтобы он печатал \"жаль\", когда наступает ваша очередь, а в противном случае - \"да!\"?\nНе забывайте о кавычках!\n"
                example_code: "```\nлюди {is} мама, папа, Эмма, Софи\nпосудомоечная машина {is} люди {at} {random}\n{if} посудомоечная машина {is} Софи {print} _ слишком плохо, что я должна мыть посуду _ \n{else} {print} 'к счастью, посуды нет, потому что' _ 'уже моет посуду'\n```\n"
                start_code: "{print} 'Кто моет посуду?'"
            6:
                story_text: "## Мытье посуды\nКак часто каждый будет мыть посуду? Справедливо ли это? Вы можете посчитать это на этом уровне.\n"
                example_code: "```\npeople = mom, dad, Emma, Sophie\nemma_washes = 0\ndishwasher = people {at} {random}\n{print} 'The dishwasher is' dishwasher\n{if} dishwasher {is} Emma emma_washes = emma_washes + 1\n{print} 'Emma will do the dishes this week' emma_washes 'times'\n```\n\nNow you can copy lines 3 to 5 a few times (e.g. 7 times for a whole week) to calculate for a whole week again.\nDo you make the code for the whole week?\n"
                story_text_2: "## Будьте справедливы\nЕсли вам крайне не повезло, предыдущая программа может выбрать вас для мытья посуды на всю неделю! Это несправедливо!\nЧтобы создать более справедливую систему, вы можете использовать команду `{remove}`, чтобы удалить выбранного человека из списка. Таким образом, вам не придется снова мыть посуду до тех пор, пока все не отмоют свою очередь.\n\nПонедельник и вторник готовы! Можете ли вы добавить остальные дни недели?\nИ... можете ли вы придумать решение для случая, когда список пуст?\n"
                example_code_2: "```\nлюди = мама, папа, Эмма, Софи\nпосудомоечная машина = люди {at} {random}\n{print} 'В понедельник посуду моет: ' посудомоечная машина\n{remove} посудомоечная машина {from} люди\nпосудомоечная машина = люди {at} {random}\n{print} 'Вторник посуду моет: ' посудомоечная машина\n{remove} посудомоечная машина {from} люди\nпосудомоечная машина = люди {at} {random}\n```\n"
                start_code: "{print} 'Кто моет посуду?'"
            7:
                story_text: "## Посудомоечная машина\nНа сайте `{repeat}` вы можете повторять фрагменты кода. С его помощью можно рассчитать, кто будет мыть посуду в течение всей недели.\n"
                example_code: "```\npeople = mom, dad, Emma, Sophie\n{repeat} _ _ {print} 'the dishwasher is' _\n```\n"
                start_code: "{print} 'Кто моет посуду?'"
            10:
                story_text: "## Мытье посуды\nНа этом уровне вы сможете сделать еще более совершенный сарай для мытья посуды.\n"
                example_code: "```\nдни = понедельник, вторник, среда, четверг, пятница, суббота, воскресенье\nимена = мама, папа, Эмма, Софи\n_ день _ дни\n    {print} имена {at} {random} ''моет посуду в '' день\n```\n"
                start_code: '# разместите здесь свой код'
    dice:
        levels:
            6:
                start_code: "{print} 'Что покажет кубик на этот раз?'"
                story_text: "## Кубик\nЗдесь вы можете снова сделать кубик земляного червя, но теперь вы также можете подсчитать, сколько очков выпало.\nВы, наверное, знаете, что червь считает 5 очков для земляных червей. Теперь после броска вы можете сразу подсчитать, сколько очков вы выбросили.\nВот код для подсчета очков для одного кубика:\n\n## Challenge\nМожете ли вы сделать код так, чтобы получить общее количество очков для 8 кубиков? Для этого нужно вырезать и вставить несколько строк кода.\n"
                example_code: "```\nварианты = 1, 2, 3, 4, 5, земляной\nочки = 0\nбросок = варианты {at} {random}\n{print} 'вы бросили' бросок\n{if} бросок {is} земляной очки = очки + 5 {else} очки = очки + бросок\n{print} 'это' очки ' точка'\n```\n"
                example_code_2: "## Заглядывая вперед\n\nУдалось ли вам рассчитать счет для 8 кубиков? Это потребовало много вырезания и вставки, верно? В 7 уровне мы сделаем это еще проще!\n"
            3:
                story_text: "## Кубики\nНа этом уровне мы можем выбирать из списка. С помощью этого мы можем позволить компьютеру выбрать одну сторону кубика.\nПосмотрите на игры, которые есть у вас дома в шкафу.\nЕсть ли среди них игры с (специальным) кубиком? Вы также можете скопировать его с помощью этого кода.\nНапример, кубик игры Earthworms с цифрами от 1 до 5 и земляным червем на нем.\n\n![Кубик игры \"Земляные черви\" с цифрами от 1 до 5 и земляным червем на нем](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)\n"
                example_code: "```\nchoices {is} 1, 2, 3, 4, 5, earthworm\n{print} choices {at} {random}\n```\n"
                start_code: '{print} Что покажет кубик на этот раз?'
                story_text_2: "## Вызов\nКубики в примере выше - это кубики для конкретной игры. Можете ли вы сделать обычные игральные кости?\nИли другие специальные кубики из другой игры?\n"
                example_code_2: "```\nвыбор {is} _\n```\n"
            4:
                story_text: "## Кубик\nВ этом уровне мы можем составлять предложения со значением кубика в предложении, разумеется, с кавычками.\nНа этот раз пример кода не совсем полный. Сможете ли вы закончить код?\n"
                example_code: "```\nchoices {is} 1, 2, 3, 4, 5, earthworm\n{print} _ you threw _\n{print} _ _ _ <- here you have to program the choice\n```\n"
                start_code: "{print} 'Что покажет кубик на этот раз?'"
            5:
                story_text: "## Кубик\nВ этом уровне вы также можете сделать кубик еще раз, используя сайт `{if}`.\nДополните код примера так, чтобы в коде было написано \"You can stop throwing\", как только вы бросите земляного червя.\n\nНо, возможно, вы хотите воссоздать кубик из совершенно другой игры. Это тоже прекрасно! Тогда придумайте свою собственную реакцию. Например, \"да\" для 6 и \"жаль\" для чего-то {else}.\n"
                example_code: "```\nchoices {is} 1, 2, 3, 4, 5, earthworm\nthrow {is} _\n{print} 'you have' _ 'thrown'\n{if} _ {is} earthworm {print} 'You can stop throwing.' _ {print} 'You have to hear it again!'\n```\n"
                start_code: "{print} 'Что покажет кубик на этот раз?'"
            7:
                story_text: "## Кубик\nНа пятом уровне вы также можете снова сделать кубик. С помощью кода `{repeat}` вы можете легко бросить целую руку игральных костей.\nПопробуйте закончить код примера! Тире должно содержать несколько команд и символов.\n\nНо, может быть, вы хотите сделать совершенно другой кубик? Конечно, вы можете!\n"
                example_code: "```\nchoices = 1, 2, 3, 4, 5, earthworm\n{repeat} _ _ {print} _ _ _\n```\n"
                start_code: "{print} 'Что покажет кубик на этот раз?'"
            10:
                story_text: "## Игральные кости\nВсе слишком долго бросают кубики? В этом уровне вы можете позволить Хеди бросить все кубики сразу!\nСможете ли вы заполнить правильную строку кода на пустых местах?\n"
                example_code: "```\nигроки = Энн, Джон, Джесси\nварианты = 1, 2, 3, 4, 5, 6\n_\n    {print} игрок ' бросает ' выбор {at} {random}\n   {sleep}\n```\n"
                start_code: '# разместите здесь свой код'
            15:
                story_text: "## Кубики\nВ этой игре вам нужно бросить 6 костей за как можно меньшее количество попыток.\n"
                example_code: "```\noptions = 1, 2, 3, 4, 5, 6\n{print} 'Throw 6 as fast as you can!'\nthrown = 0\ntries = 0\n{while} thrown != 6\n    thrown = options {at} {random}\n    {print} 'You threw ' thrown\n    tries = tries + 1\n{print} 'Yes! You have thrown 6 in ' tries ' tries.'\n```\n"
                start_code: '# разместите здесь свой код'
        name: Кубики
        description: Сделайте свои собственные кубики
        default_save_name: Кубики
    rock:
        levels:
            5:
                start_code: "{print} 'Добро пожаловать в свой собственный камень-ножницы-бумага!'"
                story_text: "## Камень, бумага, ножницы\nВ этом уровне мы можем определить, кто победил.\nДля этого вам понадобится новый код `{if}`.\n\nСохраните свой выбор с именем choice и выбор компьютера как computer choice.\nЗатем вы можете использовать `{if}`, чтобы увидеть {if}, одинаковые они или разные.\nВы закончите код?\n"
                example_code: "```\noptions {is} rock, paper, scissors\ncomputer_choice {is} _\nchoice {is} {ask} 'What do you choose?'\n{print} 'you chose ' _\n{print} 'computer chose ' _\n{if} _ {is} _ {print} 'tie!' {else} {print} 'no tie'\n```\n\nFill in the correct code on the blanks to see {if} it is a draw.\n"
            1:
                story_text: "## Камень, бумага, ножницы\nНа уровне 1 вы можете начать с игры \"Камень, ножницы, бумага\".\n\nС помощью `{ask}` вы можете сделать выбор, а с помощью `{echo}` вы можете повторить этот выбор.\n"
                example_code: "```\n{print} что вы выберете?\n{ask} выбирай из камня, бумаги или ножниц\n{echo} Так что твой выбор был:\n```\n"
                start_code: '{print} Добро пожаловать в свой собственный камень-ножницы-бумага!'
                story_text_2: "## Вызов\nВместо слов вы также можете использовать эмодзи: ✊✋✌\nМожете ли вы создать код с помощью эмодзи?\n"
                example_code_2: "```\n{print} что вы выбираете?\n{ask} выбрать из _\n{echo} Итак, твой выбор был:\n```\n"
            2:
                story_text: "## Камень, бумага, ножницы\nВ этом уровне вы можете попрактиковаться в использовании переменных, чтобы в следующем уровне вы могли провести игру \"Камень, ножницы, бумага\"!\n"
                example_code: "```\n {is} {ask} камень, бумага или ножницы?\n{print} Я выбираю _\n```\n"
                start_code: '# разместите здесь свой код'
            3:
                story_text: "## Камень, бумага, ножницы\n\nВ этом уровне мы можем вводить списки и выбирать из них предметы.\nСначала вы составляете список с помощью `{is}`. Затем вы можете позволить компьютеру выбрать что-то из списка с помощью `{at} {random}`{random}`.\nНапример, вы можете позволить компьютеру выбрать из списка \"камень, бумага и ножницы\".\n"
                example_code: "\n```\nchoices {is} rock, paper, scissors\n{print} choices {at} {random}\n```\n"
                start_code: '{print} Добро пожаловать в свой собственный камень-ножницы-бумага!'
                story_text_2: "## Вызов\nТеперь у вас есть только один игрок, так можете ли вы добавить второго игрока?\nВы даже можете использовать переменные, чтобы назвать игрока 1 и игрока 2.\n"
                example_code_2: "```\nвыбор {is} камень, бумага, ножницы\n{print} игрок 1 выбирает... выбор {at} {random}\n{print} игрок 2 _\n```\n"
            4:
                story_text: "## Камень, бумага, ножницы\nНа этом уровне мы можем дальше программировать камень, бумагу, ножницы. Но {if} вы хотите добавить текст, здесь тоже нужно использовать кавычки.\nЗавершите код, введя правильные команды или символы на подчеркиваниях?\n"
                example_code: "```\nchoices {is} rock, paper, scissors\n{print} _ The computer chose: _ _ {at} _\n```\n"
                start_code: "{print} 'Добро пожаловать в свой собственный камень-ножницы-бумага!'"
            9:
                story_text: "## Камень, бумага, ножницы\nВ этом уровне вы можете запрограммировать целую игру \"Камень, ножницы, бумага\" путем вложения {if}-команд. Сможете ли вы закончить код?\n"
                example_code: "```\nchoices {is} rock, paper, scissors\nyour_choice {is} {ask} 'What do you choose?'\n{print} 'You choose ' your_choice\ncomputer_choice {is} choices {at} {random}\n{print} 'The computer chooses ' computer_choice\n{if} computer_choice {is} your_choice\n    {print} 'Tie'\n{if} computer_choice {is} rock\n    {if} your_choice {is} paper\n        {print} 'You win!'\n    {if} your_choice {is} scissors\n        {print} 'You lose!'\n# finish this code\n```\n"
                start_code: '# разместите здесь свой код'
            10:
                story_text: "## Камень, бумага, ножницы\nЛень играть в игру самому? Позвольте Хеди сыграть за вас!\nВам нужно только заполнить имена игроков.\n"
                example_code: "```\nвыбор = камень, бумага, ножницы\nигроки = _\n{for} игрок {in} игроки\n     {print} игрок ' выбирает ' выбор {at} {random}\n```\n"
                start_code: '# разместите здесь свой код'
            13:
                story_text: "## Камень, бумага, ножницы\nС помощью команды `{and}` вы можете сократить свой код \"Камень, ножницы, бумага\"! Посмотрите приведенный ниже пример кода и попробуйте закончить его.\n"
                example_code: "```\nварианты = 'камень', 'бумага', 'ножницы'\nyour_choice = {ask} 'Что вы выбираете?'\nкомпьютерный_выбор = варианты {at} {random}\n{print} 'Вы выбираете ' your_choice\n{print} 'Компьютер выбирает ' computer_choice\n{if} computer_choice {is} your_choice\n    {print} 'галстук'\n{if} computer_choice {is} 'камень' {and} your_choice {is} 'бумага'\n    {print} 'You win!'\n{if} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'\n    {print} 'Компьютер победил!'\n_\n```\n"
                start_code: '# разместите здесь свой код'
            15:
                story_text: "## Камень, бумага, ножницы\nИграйте, пока не победите компьютер! Но сначала закончите код примера...\n"
                example_code: "```\nпобеда = 'нет'\nварианты = 'камень', 'бумага', 'ножницы'\n{while} выиграл == 'нет'\n    your_choice = {ask} 'Что вы выбираете?'\n    компьютерный_выбор = варианты {at} {random}\n    {print} 'вы выбрали ' ваш_выбор\n    {print} 'компьютер выбрал' computer_choice\n    {if} компьютерный_выбор == ваш_выбор\n        {print} 'Ничья!'\n    {if} computer_choice == 'rock' {and} your_choice == 'scissors'\n        {print} 'Вы проиграли!'\n    {if} компьютерный_выбор == 'камень' {and} ваш_выбор == 'бумага'\n        {print} 'Вы выиграли!'\n        выиграл = 'да'\n_\n```\n"
                start_code: '# разместите здесь свой код'
        name: Камень, ножницы, бумага
        description: Создайте свою собственную игру "камень, ножницы, бумага"
        default_save_name: Камень
    calculator:
        levels:
            9:
                start_code: "{print} 'Добро пожаловать в этот калькулятор!'"
                story_text: "## Калькулятор\nНа предыдущих уровнях вы научились создавать калькулятор, а на этом уровне вы можете расширить этот код и превратить его в небольшую математическую игру.\n## Задача\nСможете ли вы закончить строку 10, чтобы программа заработала?\n"
                example_code: "```\nоценка = 0\n{repeat} 10 {times}\n    числа = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    число1 = числа {at} {random}\n    номер2 = числа {at} {random}\n    правильный_ответ = число1 * число2\n    {print} 'Сколько будет ' число1 ' умножить на ' число2 '?\n    ответ = {ask} 'Введите свой ответ здесь...'\n    {print} 'Your answer is' answer\n    {if} _ {is} _\n        оценка = оценка + 1\n{print} 'Отличная работа! Ваша оценка... ' оценка ' из 10!\n```\n"
            10:
                start_code: '# разместите здесь свой код'
                story_text: "## Калькулятор\nЭта игра на калькуляторе поможет вам отработать таблицы умножения!\n## Вызов\nМожете ли вы добавить больше чисел в список, чтобы отработать все умножения?\n"
                example_code: "```\nnumbers = 1, 2, 3\n{for} number1 {in} numbers\n    {for} number2 {in} numbers\n        answer = {ask} 'How much is ' number2 ' times ' number1 '?'\n        correct = number1 * number2\n        {if} answer {is} correct\n            {print} 'Great job!'\n        {else}\n            {print} 'Thats wrong. The right answer is ' correct\n```\n"
            6:
                story_text: "## Калькулятор\nТеперь, когда вы умеете считать, вы можете сделать калькулятор самостоятельно!\n"
                example_code: "```\nnumber_1 {is} {ask} 'Заполните первое число:'\nnumber_2 {is} {ask} 'Введите второе число:'\nправильный_ответ = число_1 * число_2\n{print} число_1 ' раз ' число_2 ' есть ' правильный_ответ\n```\n"
                story_text_2: "## Вызов\nКалькулятор выше рассчитает ответ за вас, но вы также можете составить программу для проверки собственных математических навыков, например, такую:\nЗаполните пробелы, чтобы ответ был полным!\n"
                example_code_2: "```\nправильный_ответ = 11 * 27\nответ = {ask} 'Сколько будет 11 умножить на 27?\n{if} ответ {is} _ {print} 'Хорошая работа!'\n{else} {print} 'Неправильно! Это было ' _\n```\n"
                start_code: "{print} 'Добро пожаловать в этот калькулятор!'"
                story_text_3: "## Случайные числа\nВы также можете позволить компьютеру самостоятельно выполнять случайные суммы, используя функцию random.\nТаким образом, вы выбираете несколько таблиц для тренировки, и из них всегда получается разная сумма:\n"
                example_code_3: "```\nтаблицы = 4, 5, 6, 8\nчисла = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nтаблица = таблицы {at} {random}\nчисло = числа {at} {random}\nправильный_ответ = таблица * число\nответ = {ask} 'сколько будет ' таблица ' умножить на ' число '?\n{if} ответ {is} правильный_ответ {print} 'хорошо'\n{else} {print} 'ошибка! это было ' правильный_ответ\n```\n"
            12:
                story_text: "## Калькулятор\nТеперь вы можете сделать калькулятор, который работает для десятичных чисел. Заполните пробелы, чтобы он работал правильно!\n"
                example_code: "```\nnumber1 = {ask} 'Какое первое число?'\nnumber2 = {ask} 'Какое второе число?'\nответ = _\n{print} число1 ' плюс ' число2 ' есть ' ответ\n```\n"
                start_code: '# разместите здесь свой код'
            14:
                story_text: "## Угадай, какое число\nНа этом уровне вы можете запрограммировать игру \"Угадай число\".\n"
                example_code: "```\n{print} 'Guess which number'\nnumbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nnumber = numbers {at} {random}\ngame = 'on'\n{for} i {in} {range} 1 {to} 10\n    {if} game == 'on'\n        guess = {ask} 'Which number do you think it is?'\n        {if} guess > number\n            {print} 'Lower!'\n        {if} guess < number\n            {print} 'Higher!'\n        {if} guess == number\n            {print} 'You win!'\n            game = 'over'\n```\n"
                start_code: '# разместите здесь свой код'
            15:
                story_text: "## Калькулятор\nВы можете добавить цикл `{while}` в игру-калькулятор, которую вы научились делать в предыдущем уровне.\nЭто гарантирует, что игрок не сможет перейти к следующему вопросу {if} при неправильном ответе.\n"
                example_code: "```\nscore = 0\n{for} i {in} {range} 0 {to} 9\n    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    number1 = numbers {at} {random}\n    number2 = numbers {at} {random}\n    correct = number1 * number2\n    answer = 0\n    {while} answer != correct\n        {print} 'How much is ' number1 ' times ' number2 '?'\n        answer = {ask} 'Fill in your answer:'\n        {print} 'Your answer is ' answer\n    {print} 'Good job!'\n{print} 'You win!'\n```\n"
                start_code: '# разместите здесь свой код'
        name: Калькулятор
        description: Создайте калькулятор
        default_save_name: Калькулятор
    restaurant:
        levels:
            6:
                start_code: '# разместите здесь свой код'
                story_text: "## Restaurant\nIn this level you can use maths to calculate the total price of your customer's order, which can make your virtual restaurant more realistic.\n"
                example_code: "## Example Hedy code (Simple)\nYou can make a simple restaurant code, like this:\n```\n{print} 'Welcome to Hedys restaurant'\n{print} 'Here is our menu:'\n{print} 'Our main courses are pizza, lasagne, or spaghetti'\nmain = {ask} 'Which main course would you like?'\nprice = 0\n{if} main {is} pizza price = 10\n{if} main {is} lasagne price = 12\n{if} main {is} spaghetti price = 8\n{print} 'You have ordered ' main\n{print} 'That will be ' price ' dollars, please'\n{print} 'Thank you, enjoy your meal!'\n```\n"
                story_text_2: "But you can also add many more things to your virtual restaurant, for example more courses.\n\n## Challenge\nYou can add many more things to your virtual restaurant. For example, can you...\n- {ask} how many people are coming and multiply the price by that amount?\n- add another course?\n- give people a discount when they enter a (secret) couponcode?\n- add a children's menu?\n- think of other fun things to add?\n"
                example_code_2: "## Example Hedy code (Elaborate)\nIn this example there are three courses, which requires more code and more additions in calculating the price.\n```\n{print} 'Welcome to Hedys restaurant'\n{print} 'Here is our menu:'\n{print} 'Our starters are salad, soup, or carpaccio'\n{print} 'Our main courses are pizza, lasagne, or spaghetti'\n{print} 'Our desserts are brownie, icecream, or milkshake'\nstarter = {ask} 'Which starter would you like to have?'\nmain = {ask} 'Which main course would you like?'\ndessert = {ask} 'Which dessert do you pick?'\nprice = 0\n{if} starter {is} soup price = price + 6 {else} price = price + 7\n{if} main {is} pizza price = price + 10\n{if} main {is} lasagne price = price + 12\n{if} main {is} spaghetti price = price + 8\n{if} dessert {is} brownie price = price + 7\n{if} dessert {is} icecream price = price + 5\n{if} dessert {is} milkshake price = price + 4\n{print} 'You have ordered ' starter ' , ' main ' and ' dessert\n{print} 'That will be ' price ' dollars, please'\n{print} 'Thank you, enjoy your meal!'\n```\n"
            12:
                start_code: '# разместите здесь свой код'
                story_text: "## Restaurant\nFrom this level on you can use decimal numbers to make you menu more realistic.\n"
                example_code: "```\nprice = 0\nfood = {ask} 'What would you like to order?'\ndrink = {ask} 'What would you like to drink?'\n{if} food {is} 'hamburger'\n    price = price + 6.50\n{if} food {is} 'pizza'\n    price = price + 5.75\n{if} drink {is} 'water'\n    price = price + 1.20\n{if} drink {is} 'soda'\n    price = price + 2.35\n{print} 'That will be ' price ' dollar, please'\n```\n"
            1:
                story_text: "## Ресторан\n На первом уровне вы сможете создать свой собственный виртуальный ресторан и принимать заказы своих гостей.\n"
                example_code: "  ```\n {print} Welcome to Hedy's restaurant \U0001F35F\n {ask} What would you like to order?\n {echo} So you would like to order\n {print} Thanks you for your order!\n {print} It's on its way!\n ```\n"
                story_text_2: "## Вызов\nМожете ли вы придумать больше строк, которые можно добавить в код ресторана? Например, вы можете {ask} гостям, что они хотели бы выпить, сообщить им цену или пожелать приятного аппетита?\n"
                start_code: '# разместите здесь свой код'
            2:
                story_text: "## Ресторан\nНа уровне 2 вы можете расширить свой ресторан, используя переменные. В первом уровне Хеди могла сделать заказ только один раз {echo} и запомнить только то, что было заказано последним.\nТеперь вы можете использовать переменные, и Хеди сможет запомнить и блюда, и начинку!\n"
                example_code: "```\n{print} Добро пожаловать в ресторан Хеди!\n{print} Сегодня мы подаем пиццу или лазанью.\nеда {is} {ask} Что бы вы хотели съесть?\n{print} Отличный выбор! Еда - моя любимая!\nтоппинг {is} {ask} Вы бы хотели мясо или овощи?\n{print} Еда с топпингом уже в пути!\n```\n"
                start_code: '# разместите здесь свой код'
                story_text_2: "## Вызов\nМожете ли вы сделать этот код более сложным? Например, добавить к заказу напитки? Или...?\n"
                example_code_2: "```\n{print} Добро пожаловать в ресторан Хеди!\n{print} Сегодня мы подаем пиццу или лазанью.\nеда {is} {ask} Что бы вы хотели съесть?\n{print} Отличный выбор! Еда - моя любимая!\nтоппинг {is} {ask} Вы бы хотели мясо или овощи?\n{print} Еда с топпингом уже в пути!\nнапитки {is} _\n```\n"
            3:
                story_text: "## Случайный ресторан\nНе можете решить, что хотите съесть на ужин? Вы можете позволить Хеди выбрать за вас!\nПросто добавьте списки ваших любимых (или нелюбимых) блюд, и Хеди сможет случайным образом выбрать ваш ужин.\nВы также можете немного повеселиться, позволив Хеди выбрать цену вашего ужина! Что вы получите?\n## Вызов\nСможете ли вы создать свою собственную версию случайного ресторана?\n"
                example_code: "```\n{print} Welcome to Hedy's Random Restaurant!\n{print} The only restaurant that will randomly choose your meal and its price for you!\nstarters {is} salad, soup, carpaccio\nmains {is} pizza, brussels sprouts, spaghetti\ndesserts {is} brownies, ice cream, french cheeses\ndrinks {is} cola, beer, water\nprices {is} 1 dollar, 10 dollars, 100 dollars\n{print} You will start with: starters {at} {random}\n{print} Then we'll serve: mains {at} {random}\n{print} And as dessert: desserts {at} {random}\n{print} You will get a drinks {at} {random} to drink\n{print} That will be: prices {at} {random}\n{print} Thank you and enjoy your meal!\n```\n"
                story_text_2: "## Аллергия\nУ вашего клиента есть аллергия или ему не нравятся определенные блюда? Тогда вы можете воспользоваться командой `{remove}`, чтобы удалить его из своего меню.\n"
                example_code_2: "```\n{print} Молочный коктейль \"Тайна\nвкусы {is} клубника, шоколад, ваниль\nаллергия {is} {ask} Есть ли у вас аллергия на какие-либо фалворы?\n_\n{print} Вы получаете молочный коктейль со вкусом {at} {random}.\n```\n"
                start_code: '# разместите здесь свой код'
            4:
                story_text: "## Ресторан\nНа этом уровне вы должны использовать кавычки при использовании команды `{print}` или `{ask}`.\n\n## Задача\nДобавьте кавычки в этот код, чтобы он заработал! Будьте внимательны: переменные не должны заключаться в кавычки.\n"
                example_code: "## Пример ресторана Hedy\n```\nДобавьте кавычки к этому коду _\n{print} Добро пожаловать в ресторан Hedys!\n{print} Сегодня мы подаем пиццу или лазанью.\nеда {is} {ask} Что бы вы хотели съесть?\n{print} Отличный выбор! Еда - моя любимая!\nтоппинг {is} {ask} Вы бы хотели мясо или овощи?\n{print} Еда с начинкой уже в пути!\nнапитки {is} {ask} Что бы вы хотели выпить с этим?\n{print} Спасибо за ваш заказ.\n{print} Ваша еда и напитки будут доставлены прямо сейчас!\n```\n"
                start_code: '# разместите здесь свой код'
            5:
                story_text: "## Ресторан\nНа этом уровне команда `{if}` позволяет вам `{ask}` задавать вопросы клиентам и давать различные ответы на них.\nВ приведенном ниже примере видно, что вы можете `{ask}` клиенту `{if}`, что он хочет услышать о специальных блюдах, а Хеди может ответить соответствующим образом.\n"
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\nspecial {is} {ask} 'Would you like to hear our specials today?'\n{if} special {is} yes {print} 'Todays special is chicken piri piri and rice.' {else} {print} 'No problem.'\nfood {is} {ask} 'What would you like to eat?'\n{print} 'One ' food ', coming right up!'\ndrink {is} {ask} 'What would you like to drink with that?'\n{if} drink {is} cola {print} 'Im sorry, we are out of cola!' {else} {print} 'Great choice!'\nanything {is} {ask} 'Would you like anything {else}?'\n{print} 'Let me repeat your order...'\n{print} 'One ' food\n{if} drink {is} cola {print} 'and...' {else} {print} 'One ' drink\n{if} anything {is} no {print} 'Thats it!' {else} {print} 'One ' anything\n{print} 'Thank you for your order and enjoy your meal!'\n```\n"
                story_text_2: "## Задача\nМожете ли вы придумать больше вопросов для `{ask}` клиентов, когда они делают заказ, и придумать различные ответы на них, используя команду `{if}`?\n"
                start_code: '# разместите здесь свой код'
            7:
                story_text: "## Restaurant\nIn this level you've learned how to use the {repeat} command to repeat a line of code a certain amount of times.\nYou can use that in your restaurant to {ask} multiple people what they'd like to eat. Like this:\n"
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\npeople = {ask} 'How many people are joining us today?'\n{repeat} people times food = {ask} 'What would you like to eat?'\n{print} 'Thanks for your order! Its coming right up!'\n```\n"
                start_code: '# разместите здесь свой код'
            8:
                story_text: "## Restaurant\nIn this level you can make your virtual restaurant more elaborate by repeating multiple lines of code. Like this:\n"
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\npeople = {ask} 'How many people will be joining us today?'\n{print} 'Great!'\n{repeat} people {times}\n    food = {ask} 'What would you like to order?'\n    {print} food\n{print} 'Thank you for ordering!'\n{print} 'Enjoy your meal!'\n```\n"
                story_text_2: "## Challenge\nOf course, this code can be expanded with more items on the menu, offering drinks, and/or multiple courses, so feel free to add as many options as you like!\n"
                start_code: '# разместите здесь свой код'
            9:
                story_text: "## Restaurant\nIn this level you can use nesting to make your restaurant more realistic and more fun!\nFor example you would {ask} for sauce {if} somebody orders fries, but you wouldn't {if} someone orders pizza!\nCheck out the example, and try this at your own virtual restaurant!\n"
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\npeople = {ask} 'How many people will be joining us today?'\n{print} 'Great!'\nprice = 0\n{repeat} people {times}\n    food = {ask} 'What would you like to order?'\n    {print} food\n    {if} food {is} fries\n        price = price + 3\n        sauce = {ask} 'What kind of sauce would you like with your fries?'\n        {if} sauce {is} no\n            {print} 'no sauce'\n        {else}\n            price = price + 1\n            {print} 'with ' sauce\n    {if} food {is} pizza\n        price = price + 4\n{print} 'That will be ' price ' dollar'\n{print} 'Enjoy your meal!'\n```\n"
                start_code: '# разместите здесь свой код'
            10:
                story_text: "## Restaurant\nIn this level you'll learn how to easily {ask} your guests' orders in a short code.\n"
                example_code: "```\ncourses = appetizer, main course, dessert\n{for} course {in} courses\n    food = {ask} 'What would you like to eat as your ' course '?'\n    {print} food ' will be your ' course\n```\n"
                story_text_2: "Of course, you could also order for multiple people!\n"
                example_code_2: "```\ncourses = appetizer, main course, dessert\nnames = Timon, Onno\n{for} name {in} names\n    {for} course {in} courses\n        food = {ask} name ', what would you like to eat as your ' course '?'\n        {print} name ' orders ' food ' as their ' course\n```\n"
                start_code: блюда = закуска, основное блюдо, десерт
            11:
                story_text: "## Restaurant\nWe can use the `{for} i {in} {range} 1 {to} 5` to {print} the orders from multiple customers in an orderly manner.\n"
                example_code: "```\n{print} 'Welcome to Restaurant Hedy!'\npeople = {ask} 'For how many people would you like to order?'\n{for} i {in} {range} 1 {to} people\n    {print} 'Order number ' i\n    food = {ask} 'What would you like to eat?'\n    {print} food\n    {if} food {is} fries\n        sauce = {ask} 'What kind of sauce would you like with that?'\n        {print} sauce\n    drinks = {ask} 'What would you like to drink?'\n    {print} drinks\nprice = 4 * people\n{print} 'That will be ' price ' dollars, please!'\n```\n"
                start_code: '# разместите здесь свой код'
            13:
                story_text: "## Restaurant\nIn this level we can use the new commands to upgrade our restaurant.\nWe use `{and}` to see {if} two things are both the case.\n"
                example_code: "```\nprice = 10\nfood = {ask} 'What would you like to eat?'\ndrinks = {ask} 'What would you like to drink?'\n{if} food {is} 'sandwich' {and} drinks {is} 'juice'\n    {print} 'Thats our discount menu'\n    price = price - 3\n{print} 'That will be ' price ' dollars'\n```\n"
                story_text_2: "We use `{or}` to see {if} one our of two things is the case.\n"
                example_code_2: "```\ndrinks = {ask} 'What would you like to drink?'\n{if} drinks {is} 'water' {or} drinks {is} 'juice'\n    {print} 'Thats a healthy choice'\n```\n"
                start_code: '# разместите здесь свой код'
            15:
                story_text: "## Restaurant\nWith the `{while}` you can make sure your costumers can keep adding orders until they are done.\n"
                example_code: "```\n{print} 'Welcome at McHedy'\nmore = 'yes'\n{while} more == 'yes'\n    order = {ask} 'What would you like to order?'\n    {print} order\n    more = {ask} 'Would you like to order anything {else}?'\n{print} 'Thank you!'\n```\n"
                start_code: '# разместите здесь свой код'
        name: Ресторан
        description: Создайте свой собственный виртуальный ресторан
        default_save_name: Ресторан
    secret:
        levels:
            12:
                start_code: '## разместите здесь свой код'
                story_text: "## Make a secret code like a super spy\nIn this adventure you can create your own super spy code. Encode a message that only the right agent can decipher.\nIf the enemy tries to crack the code, they will get some false info to waste their time.\n"
                example_code: "```\nname is ask 'What is your name?'\nif name is 'Agent007'\n    a is 'Go to the airport '\nelse\n    a is 'Go to the trainstation '\npassword is ask 'What is the password?'\nif password is 'TOPSECRET'\n    b is 'tomorrow at 02.00'\nelse\n    b is 'today at 10.00'\nprint a + b\n```\n"
            13:
                start_code: '# разместите здесь свой код'
                story_text: "## Superspy\nThe code you made in the previous level can be made a lot easier in this one with the `{and}` command.\n"
                example_code: "```\nname is ask 'What is your name?'\npassword is ask 'What is your password?'\nif name is 'Agent007' and password is 'TOPSECRET'\n    print 'Go to the airport at 02.00'\nelse\n    print 'Go to the trainstation at 10.00'\n ```\n"
        name: СуперШпион
        description: Сделайте свой собственный шпионский код
        default_save_name: СуперШпион
    songs:
        name: Спойте песню!
        description: Печать песни
        default_save_name: Песня
        levels:
            6:
                story_text: "## Песни\nПесни часто содержат много повторений. Иногда повторение также основано на счете.\nНапример, в известной песне \"Бутылки пива\". Вы можете запрограммировать эту песню с помощью математики.\n\nСовет: Используйте функцию чтения вслух, чтобы Хеди спела вам песню!\n\n## Вызов\nТеперь вы можете повторять строки со 2 по 7 столько раз, сколько захотите, копируя их.\n"
                example_code: "```\nстих = 99\n{print} стих ' бутылки пива на стене '\n{print} стих ' бутылки пива'\n{print} 'Возьми одну, передай по кругу'\nстих = стих - 1\n{print} стих ' бутылки пива на стене'\n{sleep}\n```\n"
                start_code: "{print} 'Давай петь!'"
                story_text_2: "## 5 маленьких обезьянок прыгают на кровати\nЭта детская песенка отсчитывает время от 5 маленьких обезьянок до 1 обезьянки.\nЕсли вы скопируете строки 2 - 7 и вставите их под кодом, вы сможете спеть всю песню!\n"
                example_code_2: "```\nчисло = 6\nчисло = число - 1\nprint number ' Маленькие обезьянки прыгают по кровати'\nprint 'Один упал и ударился головой'\nprint 'Мама позвонила доктору, и доктор сказал'\nprint 'Больше никаких обезьян, прыгающих на кровати!\nsleep\n```\n"
            7:
                story_text: "## Песни\nПесни часто содержат много повторений. Например... Детеныш акулы! Если вы поете ее, вы продолжаете петь одно и то же:\n\nBaby Shark tututudutudu <br>\nBaby Shark tutututudutudu <br>\nBaby Shark tututudutudu <br>\nBaby Shark\n\nВы можете сделать эту песню намного короче с помощью `{repeat}`! Вы можете закончить код?\n"
                example_code: "```\n{repeat} _ _ {print} 'Baby Shark tututudutudu'\n{print} 'Baby Shark'\n```\n\nAfter Baby Shark you can of course also program other songs. There are many songs with repetition.\n"
                start_code: "{print} 'Малыш акула'"
            8:
                story_text: "## Песни\nВ предыдущем уровне вы запрограммировали песню \"Бутылки пива\". Вы сочинили один куплет, а затем должны были скопировать его 99 раз. В этом уровне вы можете повторить песню 99 раз, просто добавив одну простую строчку!\nЗнаете ли вы, какую строку кода нужно добавить на пустом месте?\n"
                example_code: "```\nстих = 99\n_ _ _\n    {print} стих `бутылки пива на стене`\n    {print} стих ' бутылки пива'\n    {print} 'Возьми одну, передай по кругу'\n    стих = стих - 1\n    {print} стих ' бутылки пива на стене'\n```\n"
                start_code: '# разместите здесь свой код'
            10:
                story_text: "## Песни\nНа этом уровне вы легко сможете исполнить детскую песенку \"Пять маленьких обезьянок\". Сможете ли вы сделать последний припев?\nВы также можете сделать всю песню про акулу (включая всех остальных акул в семье) всего за 6 строк, используя `{for}`!\nИли вы можете сделать песню Old McDonald со всеми различными животными.\n\n\n\n## Задачи\nМожете ли вы добавить последний куплет про обезьянок на кровати, когда осталась только одна обезьянка?\n\nМожете ли вы сделать код акулы-малютки еще короче, используя команду `{repeat}`?\n\nМожете ли вы добавить новых животных на ферму старого Макдональда?\n"
                example_code: "## 5 маленьких обезьянок, прыгающих на кровати\n```\nобезьянки = 5, 4, 3, 2\n{for} обезьяна {in} обезьяны\n    {print} обезьяна ' маленькие обезьянки прыгают на кровати'\n    {print} 'Один упал и ударился головой'\n    {print} Мама позвонила доктору, и доктор сказал.\n    {print} \"БОЛЬШЕ НИКАКИХ ОБЕЗЬЯНОК, ПРЫГАЮЩИХ НА КРОВАТИ!\n```\n\n## Малышка Акула\n```\nакулы = ребенок, мама, папа, бабушка, дедушка\n{for} акула {in} акулы\n    {print} акула ' акула тутутутутуду'\n    {print} акула ' акула тутутутутутуду'\n    {print} акула ' акула тутутутутуду'\n    {print} акула ' акула '\n```\n## Старый Макдональд\n```\nживотные = свинья, собака, корова\n{for} животное {in} животные\n    {if} животное {is} свинья\n        звук = ойк\n    {if} животное {is} собака\n        звук = гав\n    {if} животное {is} корова\n        звук = му\n    {print} 'У старого Макдональда была ферма'\n    {print} 'E I E E I O!'\n    {print} 'и на этой ферме у него было животное'\n    {print} 'E I E I O!'\n    {print} 'со звуком 'здесь'\n    {print} 'и ' звук ' там'\n    {print} 'здесь звук'\n    {print} 'там звук'\n    {print} 'везде звук звук звук\n```\n"
                start_code: '# разместите здесь свой код'
            11:
                story_text: "## Песни\nНа этом уровне вы можете использовать команду `{for} i {in} {range}`{in} {range}` для создания песен, в которых используется счет, например, 5 маленьких обезьянок.\n\n## Задача\nЗаполните пробелы и заставьте код работать!\n"
                example_code: "## 5 маленьких обезьянок\n```\n_ _ _ _ 5 _ 1\n    {print} i ' маленькие обезьянки прыгают по кровати'\n    {print} 'Одна упала и ударилась головой'\n    {print} 'Мама позвонила доктору, и доктор сказал'\n    {if} i {is} 1\n        {print} 'УЛОЖИТЕ ЭТИХ ОБЕЗЬЯНОК СПАТЬ!'\n    {else}\n        {print} \"БОЛЬШЕ НИКАКИХ ОБЕЗЬЯНОК, ПРЫГАЮЩИХ НА КРОВАТИ!\n```\n"
                start_code: '# разместите здесь свой код'
            12:
                story_text: "## Спойте песню!\nВ этой песне мы можем еще больше упростить программирование '{if} вы счастливы и знаете это, хлопайте в ладоши'. Поскольку мы можем поместить все действия в переменную, проверьте это:\n\n## Задача\nМожете ли вы добавить нужное количество отступов к каждой строке, чтобы песня играла правильно?\nРазум: Не все строки нуждаются в отступах\n"
                example_code: "```\n_ действия = 'хлопать в ладоши', 'топать ногами', 'кричать Ура!'\n_ {for} действие {in} действия\n_ {for} i {in} {range} 1 {to} 2\n_ {print} 'if youre happy and you know it'\n_ {print} действие\n_ {print} 'если вы счастливы и знаете это, и вам очень хочется это показать'\n_ {print} 'if youre happy and you know it'\n_ {print} действие\n```\n"
                start_code: '# разместите здесь свой код'
            16:
                story_text: "## Спойте песню!\nНа этом уровне вы сможете еще быстрее запрограммировать песню типа OldMacDonald. Вы можете соединить нужное животное с нужным звуком, просто поместив их в одно и то же место в списке.\nПьяный моряк также быстро создается в этом уровне. Вам понадобится всего 8 строк для всей песни, посмотрите!\n"
                example_code: "## Старый Макдональд\n```\nживотные = ['свинья', 'собака', 'корова']\nзвуки = ['oink', 'woof', 'moo']\n{for} i {in} {range} 1 {to} 3\n    животное = животные[i]\n    звук = звуки[i]\n    {print} 'У старого Макдональда была ферма'\n    {print} 'E I E E I O!'\n    {print} 'и на этой ферме у него было животное'\n    {print} 'E I E I O!'\n    {print} 'со звуком 'здесь'\n    {print} 'и ' звук ' там'\n    {print} 'здесь звук'\n    {print} 'там звук'\n    {print} 'везде звук звук звук\n```\n\n## Пьяный моряк\n```\nстроки = ['что делать с пьяным матросом', 'брить ему брюхо ржавой бритвой', 'посадить его в длинную лодку, пока не протрезвеет'].\n{for} строка {in} строки\n    {for} i {in} {range} 1 {to} 3\n        {print} строка\n    {print} 'рано утром'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'way hay and up she rises'\n    {print} 'early in the morning'\n```\n"
                start_code: '# разместите здесь свой код'
    turtle:
        name: Черепаха
        description: Создайте свой собственный рисунок
        default_save_name: Черепаха
        levels:
            1:
                story_text: "## Давайте рисовать\nВы также можете использовать Хеди для рисования. Комбинируя повороты и линии, вы можете сделать квадрат или лестницу!\n\nИспользуя `{forward}`, нарисуйте линию вперед. Число за ней определяет, как далеко пройдет черепаха. `{turn} {right}`{right}` поворачивается на четверть оборота по часовой стрелке, `{turn} {left}`{left}` поворачивается против часовой стрелки.\n\nЕсли вы хотите пройти назад, вы используете команду `{forward}`, но с отрицательным числом. Например, `{forward} -100`\n\n## Challenge\nЭто начало маленькой лестницы. Можете ли вы сделать так, чтобы у нее было 5 ступенек?\n"
                example_code: "```\n{turn} {right}\n{forward} 50\n{turn} {left}\n{forward} 50\n```\n"
                start_code: "{forward} 50\n{turn} {left}"
            2:
                story_text: "## Черепаха\nВ этом уровне вы можете использовать переменные, чтобы сделать черепаху интерактивной. Например, вы можете спросить игрока, сколько шагов должна сделать черепаха.\n"
                example_code: "\n```\n{print} Drawing figures\nangle {is} 90\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n```\n"
                start_code: "{print} Черепашьи бега!\nугол {is} 90\n{turn} угол\n{forward} 25"
                story_text_2: "Кроме того, на первом уровне черепаха могла поворачивать только влево или вправо. Это немного скучно!\nНа втором уровне он может направлять свой нос во все стороны.\n\nИспользуйте 90 для поворота на четверть. Мы называем это градусами. Полный поворот - это 360 градусов.\n\n## Вызов\nМожете ли вы построить фигуру с помощью этого кода? Может быть, треугольник или круг?\n"
                example_code_2: "```\n{print} Чертежные фигуры\nугол {is} 90\n{turn} угол\n{forward} 25\n{turn} угол\n{forward} 25\n```\n"
            3:
                story_text: "## Рисующая черепаха\nВ этом уровне вы можете использовать `{at} {random}`{random}` с рисующей черепахой. Случайный выбор заставляет черепаху каждый раз идти по разному пути.\nИспользуйте `{at} {random}`{random}` для выбора значения из списка.\n## Задача\nМожете ли вы скопировать и вставить строки 2 и 3, чтобы создать более длинный случайный путь?\n"
                example_code: "\n```\nangles {is} 10, 50, 90, 150, 250\n{turn} angles {at} {random}\n{forward} 25\n```\n"
                start_code: "углы {is} 10, 50, 90, 150, 250\n{turn} углы {at} {random}\n{forward} 25"
            4:
                story_text: "## Давайте нарисуем\nВ четвертом уровне вы должны использовать кавычки с `{print}` и `{ask}`. Также при рисовании!\n"
                example_code: "```\n{print} _ Чертежные фигуры _\nугол {is} 90\n{turn} угол\n{forward} 25\n{turn} угол\n{forward} 25\n```\n"
                start_code: "{print} 'Рисование фигур'\nугол {is} 90\n{turn} угол\n{forward} 25"
                story_text_2: "## Цвета\nВы также можете изменить цвет линий с помощью команды `{color}`. Посмотрите пример.\nВы также можете использовать команду `{color} {white}`{white}`, чтобы сделать \"невидимые\" линии. Вы можете использовать эти белые линии для перемещения черепашки в любую точку экрана перед началом рисования.\n"
                example_code_2: "```\n{color} {white}\n{forward} -80\n{color} {green}\n{forward} 50\n{color} {yellow}\n{forward} 50\n{color} {red}\n{forward} 50\n```\n"
            5:
                story_text: "## Давайте рисовать\nНа уровне 5 вы можете сделать выбор с помощью `{if}`. Например, между разными типами фигур.\n"
                example_code: "```\n{print} 'Drawing Figures'\nfigure {is} {ask} 'Do you want a square or a triangle?'\n{if} figure {is} triangle angle {is} 120\n{else} angle {is} 90\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n```\n"
                start_code: "{print} 'Рисуем фигуры'\nрисунок {is} {ask} 'Вам нужен квадрат или треугольник?'\n{if} рисунок {is} угол треугольника {is} 120 {else} угол {is} 90\n{turn} угол\n{forward} 25"
            6:
                story_text: "## Давайте рисовать\nНа этом уровне вы можете использовать вычисления для рисования различных фигур.\nВозможно, в школе вы узнали, что полный круг - это 360 градусов. Если нет, то теперь вы знаете!\nВот почему вы также используете 90 градусов для квадрата. 360 разделить на 4 - это 90.\nТеперь, когда мы можем заниматься математикой вместе с Хеди, мы можем рисовать любые фигуры, какие захотим!\n"
                example_code: "```\nangles = {ask} 'How many angles do you want?'\nangle = 360 / angles\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n```\n"
                start_code: "{print} 'Рисование фигур'"
            7:
                story_text: "## Давайте рисовать\nВ этом уровне вы можете повторить одну строку кода с `{repeat}`.\n"
                example_code: "```\n{print} 'Рисуйте фигуры'\n_ 3 _ {forward} 10\n```\n"
                start_code: "{print} 'Рисовать фигуры'\n{repeat} 3 {times} {forward} 10"
            8:
                story_text: "## Давайте рисовать\nТеперь, когда мы можем повторять несколько линий, нам легче строить фигуры.\nНам нужно только один раз задать угол, а затем использовать эту переменную в `{repeat}`.\n"
                example_code: "```\nangle = 90\n{repeat} 10 {times}\n    {turn} angle\n    {forward} 50\n```\n"
                story_text_2: "## Взаимодействие\nКроме того, теперь мы можем усовершенствовать программу, которая рисует различные фигуры.\nМожете ли вы определить, насколько черепаха должна повернуться здесь? Доработайте код, и вы сможете нарисовать любой многоугольник, какой захотите!\n"
                example_code_2: "```\nangles = {ask} 'How many angles should I draw?'\nangle = 360 / angles\n{repeat} angle {times}\n    {turn} _\n    {forward} _\n```\n"
                start_code: "angles = {ask} 'Сколько углов я должен нарисовать?'"
    fortune:
        name: Предсказатель
        description: Позвольте Хеди предсказать будущее
        default_save_name: Гадалка
        levels:
            1:
                story_text: "## Fortune Teller\nHave you ever been to a carnival and had your future predicted by a fortune teller? Or have you ever played with a magic eight ball?\nThen you probably know that they can't really predict your future, but it's still fun to play!\n\nIn the upcoming levels you can learn how to create your own fortune telling machine!\nIn level 1 you can start off easy by letting Hedy introduce herself as a fortune teller and let her {echo} the players' answers.\nLike this:\n"
                example_code: "```\n{print} Hello, I'm Hedy the fortune teller!\n{ask} Who are you?\n{print} Let me take a look in my crystal ball\n{print} I see... I see...\n{echo} Your name is\n```\n"
                story_text_2: "## Challenge\nHedy now only tells you your name. Can you expand the code so that Hedy can predict more things about you?\nObviously, Hedy isn't a very good fortune teller yet, as she can only repeat the answers that were given by the players!\nTake a look in level 2 to improve your fortune teller.\n"
                start_code: '# разместите здесь свой код'
            3:
                story_text: "## Fortune Teller\nIn the previous levels you've created your first fortune telling machine, but Hedy couldn't really predict anything, only {echo}.\nIn this level you can use a variable and the `{at} {random}` command to really let Hedy choose an answer for you. Check out this code for instance:\n"
                example_code: "In this example the player can {ask} Hedy a yes-no question and Hedy will pick a random answer for you.\n```\n{print} I’m Hedy the fortune teller!\nquestion {is} {ask} What do you want to know?\n{print} This is what you want to know: question\nanswers {is} yes, no, maybe\n{print} My crystal ball says...\n{sleep} 2\n{print} answers {at} {random}\n```\n"
                story_text_2: "## Challenges\nNow, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or '{ask} again'.\n"
                start_code: '# разместите здесь свой код'
            4:
                story_text: "## Fortune Teller\nThis level has no new functions, but allows you to practice with using the quotation marks.\nYou can remake your level 3 code, and make sure to add the quotation marks in the right places!\n\nMind that in level 3, we couldn't use the word 'question' as both the name of the variable and a normal word that could be printed.\nThe quotation marks in level 3 make this possible!\n\nImportant! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.\nMake sure to remove those apostrophes and change the spelling to Im or Whats.\n"
                example_code: "```\n{print} 'Im Hedy the fortune teller!'\nquestion {is} {ask} 'What do you want to know?'\n{print} 'This is your question: ' question\nanswers {is} yes, no, maybe\n{print} 'My crystal ball says...'\n{sleep} 2\n{print} answers {at} {random}\n```\n"
                start_code: '# разместите здесь свой код'
            5:
                story_text: "## Fortune Teller\nIn this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!\nBy using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.\nCheck out this example to find out how.\n"
                example_code: "```\n{print} 'Im Hedy the fortune teller!'\n{print} 'I can predict {if} youll win the lottery tomorrow!'\nperson {is} {ask} 'Who are you?'\n{if} person {is} Hedy {print} 'You will definitely win!\U0001F929' {else} {print} 'Bad luck! Someone {else} will win!\U0001F62D'\n```\n"
                story_text_2: "## Hack the program\nReplace Hedy with your own name in the last line, and Hedy will always predict that you will win the lottery and others won't!\nOf course this might raise some suspicion with the other players... To avoid that, you can make sure that Hedy does give different answers every time you run the code.\nBut of course, still gives you a positive answer and the other players a negative one.\n"
                example_code_2: "```\n{print} 'Im Hedy the fortune teller!'\n{print} 'I can predict {if} you will win the lottery tomorrow!'\nperson {is} {ask} 'Who are you?'\ngoodanswer {is} Hurray! You win!, You will definitely win!, We have a winner!\nbadanswer {is} Bad luck! Try again!, Another person will win, You lose!\n{if} person {is} Hedy {print} goodanswer {at} {random} {else} {print} badanswer {at} {random}\n```\n"
                story_text_3: "## Challenges\nThis concept can be used to make may different programs, just be creative! For example you could create a machine that predicts that your favorite sports team will beat all the competitors!\nOr you could make  Snow White's magic mirror on the wall, to tell everyone you are the fairest of them all!\nLet your imagination do the work!\n"
                start_code: '# разместите здесь свой код'
            6:
                story_text: "## Fortune Teller\nIn this level you can use math in your predictions as a fortune teller. This allows you to make up (silly) formulas to calculate the future.\nFor example you could calculate how rich you'll get or how many kids you will have when you grow up.\n"
                example_code: "```\n{print} 'I am Hedy the fortune teller!'\n{print} 'I can predict how many kids youll get when you grow up!'\nage = {ask} 'How old are you?'\nsiblings = {ask} 'How many siblings do you have?'\nlength = {ask} 'How tall are you in centimetres?'\nkids = length / age\nkids = kids - siblings\n{print} 'You will get ...'\n{sleep}\n{print} kids ' kids!'\n```\n\n## Example Silly Fortune Teller\nIf the previous example wasn't silly enough for you, take a look at this one!\n\n```\n{print} 'Im Hedy the silly fortune teller!'\n{print} 'I will predict how smart you are!'\nfootball = {ask} 'On a scale 1-10 how much do you love football?'\nbananas = {ask} 'How many bananas did you eat this week?'\nhygiene = {ask} 'How many times did you wash your hands today?'\nresult = bananas + hygiene\nresult = result * football\n{print} 'You are ' result ' percent smart.'\n```\n"
                start_code: '# разместите здесь свой код'
            7:
                story_text: "## Fortune Teller\nIn this level you can use the `{repeat}` command to make your machine tell multiple fortunes at once.\n"
                example_code: "```\n{print} 'Im Hedy the fortune teller!'\n{print} 'You can {ask} 3 questions!'\n{repeat} 3 {times} question = {ask} 'What do you want to know?'\nanswer = yes, no, maybe\n{repeat} 3 {times} {print} 'My crystal ball says... ' answer {at} {random}\n```\n"
                story_text_2: "## Challenge\nAs you can see, the questions aren't printed in this example. That's because the variable `question` was changed 3 times.\nEvery time the player fills in the new answer, Hedy overwrites the previous one, so the first answer the player gave is forgotten.\nThis means you can't print all the questions this way.\n\nBy using 3 different variables instead of 1 (for example `question_1` , `question_2` and `question_3`), you could solve the problem and print the questions.\nThis does mean that you can only use `{repeat}` for the answers, and you will have to ask and print all the questions separately.\nCan you do it?\n\nIn the upcoming levels the layout of {repeat} command will change, which enables you to repeat multiple lines at once.\n"
                start_code: '# разместите здесь свой код'
            8:
                story_text: "## Fortune Teller\nIn the previous levels you've learned how to use repeat to make the fortune teller answer 3 questions in a row, but we had a problem with printing the questions.\nNow that problem is solved, because of the new way of using the repeat command.\nIn the next example you can have your fortune teller {ask} 3 questions and also print them!\n"
                example_code: "```\n{print} 'I am Hedy the fortune teller!'\n{print} 'You can {ask} me 3 questions.'\nanswers = yes, no, maybe\n{repeat} 3 {times}\n   question = {ask} 'What do you want to know?'\n   {print} question\n   {sleep}\n   {print} 'My crystal ball says...' answers {at} {random}\n```\n"
                start_code: '# разместите здесь свой код'
            10:
                story_text: "## Fortune Teller\nIn this level you'll learn how to program the game MASH (mansion, apartement, shack, house). In this game you can predict for all the players at once, what their future will look like.\n"
                example_code: "```\nhouses = mansion, apartment, shack, house\nloves = nobody, a royal, their neighbour, their true love\npets = dog, cat, elephant\nnames = Jenna, Ryan, Jim\n{for} name {in} names\n    {print} name ' lives in a ' houses {at} {random}\n    {print} name ' will marry ' loves {at} {random}\n    {print} name ' will get a ' pets {at} {random} ' as their pet.'\n    {sleep}\n```\n"
                story_text_2: We can also make a Harry Potter themed fortune teller.
                example_code_2: "```\nhouses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw\nsubjects = potions, defence against the dark arts, charms, transfiguration\nfears = Voldemort, spiders, failing your OWL test\nnames = Harry, Ron, Hermione\n{for} name in names\n    {print} name ' is placed in ' houses {at} {random}\n    {print} name ' is great at ' subjects {at} {random}\n    {print} name 's greatest fear is ' fears {at} {random}\n```\n"
                start_code: '# разместите здесь свой код'
            12:
                story_text: "## Fortune Teller\nIn this level you can make your fortunes multiple words. Like in this example below:\n"
                example_code: "```\nfortunes = 'you will be rich', 'you will fall in love', 'you will slip on a banana peel'\n{print} 'I will take a look in my crystall ball for your future.'\n{print} 'I see... I see...'\n{sleep}\n{print} fortunes {at} {random}\n```\n"
                start_code: '# разместите здесь свой код'
    haunted:
        name: Дом с привидениями
        description: Побег из дома с привидениями
        default_save_name: Дом с привидениями
        levels:
            1:
                story_text: "## Haunted house\nIn this adventure you are working towards making a game in which you have to escape from a haunted house by picking the correct door.\nIf you pick the right door you'll survive, but {if} not a terrible monster might...\n\nIn level 1 we start our haunted house game by making up a scary story and {ask} the player what monster they'll see in the haunted house.\n"
                example_code: "\n```\n{print} How did I get here?\n{print} I remember my friend telling me to go into the old mansion...\n{print} and suddenly everything went black.\n{print} But how did I end up on the floor...?\n{print} My head hurts like Ive been hit by a baseball bat!\n{print} What's that sound?\n{print} Oh no! I feel like Im not alone in this house!\n{print} I need to get out of here!\n{print} There are 3 doors in front of me..\n{ask} Which door should i pick?\n{echo} I choose door\n{print} ...?\n```\n"
                story_text_2: "## Challenge\nCan you finish the scary story? Or make up your own haunted house story?\n"
                start_code: '{print} Как я сюда попал?'
            2:
                story_text: "## Haunted House\nIn this haunted house you can choose your monsters with emojis. Of course you could also use words.\n"
                example_code: "```\nmonster_1 {is} \U0001F47B\nmonster_2 {is} \U0001F921\nmonster_3 {is} \U0001F476\n{print} You enter the haunted house.\n{print} Suddenly you see a monster_1\n{print} You run into the other room, but a monster_2 is waiting there for you!\n{print} Oh no! Quickly get to the kitchen.\n{print} But as you enter monster_3 attacks you!\n```\n"
                start_code: monster1 {is} _
                story_text_2: "## Challenge\nIn the example above the monsters are predetermined. So each time you run your code, the output is the same.\nCan you add `{ask}` commands to make the haunted house interactive and have the players choose the monsters they come across?\n"
                example_code_2: "```\nmonster_1 {is} _\nmonster_2 {is} _\nmonster_3 {is} _\n{print} You enter the haunted house.\n{print} Suddenly you see a monster_1\n{print} You run into the other room, but a monster_2 is waiting there for you!\n{print} Oh no! Quickly get to the kitchen.\n{print} But as you enter monster_3 attacks you!\n```\n"
            3:
                story_text: "## Haunted house game\nIn the previous levels you've made an introduction to your haunted house game, but as you might have noticed the story would always have a dreadful end.\nIn this level you can make your story more interactive by changing the outcome of the game; sometimes you'll get eaten, sometimes you'll escape!\nLet Hedy decide randomly!\n"
                example_code: "```\n{print} Escape from the haunted house!\n{print} There are 3 doors in front of you...\nchoice {is} {ask} Which door do you choose?\n{print} You picked door ... choice\nmonsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED\n{print} You see...\n{sleep}\n{print} monsters {at} {random}\n```\n"
                story_text_2: "## Challenge\nThis story is pretty straight {forward}, maybe you can spook it up a bit by adding a more exciting story.\nAlso you have very limited outcomes right now, there are only 3 options of what's behind the doors. Maybe you can think of more monsters to add to the list!\n\n## Change the game into a tv gameshow!\nLastly, we'd like to challenge you to change this game into a gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!\nCan you do it?\n"
                start_code: '# разместите здесь свой код'
                story_text_3: "## Change the game into a tv gameshow!\nLastly, we'd like to challenge you to change this game into a gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!\nCan you do it?\n"
                example_code_3: "```\n{print} The big gameshow!\n{print} There are 3 suitcases in front of you...\n{print} One of them contains _\n_\n```\n"
            4:
                story_text: "## Haunted house\nIn this level you learn how to use quotation marks in your games.\nCan you make your Haunted House level 4 proof?\n"
                example_code: "```\n{print} _Escape from the haunted house!_\n{print} _There are 3 doors in front of you..._\nchoice {is} {ask} _Which door do you choose?_\n{print} _You picked door ..._ choice\nmonsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED\n{print} _You see..._\n{sleep}\n{print} monsters {at} {random}\n ```\n"
                start_code: '# разместите здесь свой код'
            5:
                story_text: "## Haunted House\nUp until this level the haunted house game always asked the player to choose a door, but as you might have noticed, they didn't really have to answer correctly.\nIf the player filled in a completely random answer, the game would still work and the player might even win (despite not picking a door).\nIn this level you can only win the game by picking the same door Hedy picked randomly.\n"
                example_code: "```\n{print} 'Escape from the haunted house!'\n{print} 'There are 3 doors in front of you...'\ndoors {is} 1, 2, 3\nmonsters {is} werewolf, mummy, vampire, zombie\nchosen_door {is} {ask} 'Which door do you choose?'\n{print} 'You chose door...' chosen_door\n{sleep}\ncorrect_door {is} doors {at} {random}\n{if} chosen_door {is} correct_door {print} 'Great! Youve escaped!'\n{else} {print} 'Oh no! You are being eaten by a...' monsters {at} {random}\n```\n"
                start_code: '# разместите здесь свой код'
            9:
                story_text: "## Haunted House\nIn this level you can use nesting, which allows you to make the haunted house even more interactive!\n\n## Challenge\nNow it's very hard to win this game, can you make it easier to win?\nFor example by only having 1 wrong door and 2 correct doors instead of 1 correct door en 2 wrong ones?\n"
                example_code: "```\n{print} 'Escape from the Haunted House!'\nplayer = alive\ndoors = 1, 2, 3\nmonsters = zombie, vampire, giant spider\n{repeat} 3 {times}\n    {if} player {is} alive\n        correct_door {is} doors {at} {random}\n        {print} 'There are 3 doors in front of you...'\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} chosen_door {is} correct_door\n            {print} 'No monsters here!'\n        {else}\n            {print} 'You are eaten by a ' monsters {at} {random}\n            player = dead\n    {else}\n        {print} 'GAME OVER'\n{if} player {is} alive\n    {print} 'Great! You survived!'\n```\n"
                start_code: "{print} 'Побег из дома с привидениями!'"
            11:
                story_text: "## Haunted House\nIn this level we've changed the repeat command and we've added a line to our haunted house that tells the player in which room they are.\n"
                example_code: "```\n{print} 'Escape from the Haunted House!'\nplayer {is} alive\ndoors = 1, 2, 3\nmonsters = zombie, vampire, giant spider\n{for} i {in} {range} 1 {to} 3\n    {if} player {is} alive\n        correct_door = doors {at} {random}\n        {print} 'Room ' i\n        {print} 'There are 3 doors in front of you...'\n        chosendoor = {ask} 'Which door do you choose?'\n        {if} chosendoor {is} correct_door\n            {print} 'No monsters here!'\n        {else}\n            {print} 'You are eaten by a ' monsters {at} {random}\n            player = dead\n    {else}\n        {print} 'GAME OVER'\n{if} player {is} alive\n    {print} 'Great! You survived!'\n```\n"
                start_code: "{print} 'Побег из дома с привидениями!'"
            14:
                story_text: "## Haunted House\nIn this level you can use the `<` and `>` symbol to introduce lives to your game.\n"
                example_code: "```\n{print} 'Escape from the haunted house'\nlives = 3\ndoors = 1, 2, 3\nmonsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'\n{for} i {in} {range} 1 {to} 10\n    {if} lives > 0\n        good_door = doors {at} {random}\n        monster = monsters {at} {random}\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} good_door == chosen_door\n            {print} 'You have chosen the correct door'\n        {else}\n            {print} 'You see...' monster\n            {if} monster == 'a sleeping 3 headed dog'\n                {print} 'Pffieuw.... Its asleep'\n            {else}\n                {print} 'You lose one life'\n                lives = lives -1\n    {else}\n        {print} 'GAME OVER'\n```\n"
                start_code: '# разместите здесь свой код'
            16:
                story_text: "## Haunted House Game\nThis haunted house game uses the connection between the lists you can use in this level.\nFor example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.\nCheck out the code!\n"
                example_code: "```\nnumbers = [1, 2, 3]\ni = numbers[{random}]\nhint = ['growling', 'a cackling laugh', 'fluttering batwings']\nmonsters = ['zombie', 'witch', 'vampire']\nbad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']\ngood_fate = ['You throw the ham. The zombie is distracted and starts etaing it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']\nweapons = ['ham', 'lighter', 'garlic']\n{print} 'You are standing in front of an old mension'\n{print} 'Something is not right here'\n{print} 'You hear ' hint[i]\n{print} 'You are going to explore it'\n{print} 'You enter the kitchen en see a lighter, a raw ham and a garlic.'\nyour_weapon = {ask} 'What do you bring with you?'\n{print} 'With your ' your_weapon ' you enter the living room'\n{print} 'There you find a ' monsters[i]\nneeded_weapon = weapons[i]\n{if} your_weapon == needed_weapon\n    {print} 'You use your ' your_weapon\n    {print} good_fate[i]\n    {print} 'YOU WIN!'\n{else}\n    {print} 'You have chosen the wrong weapon...'\n    {print} bad_fate[i]\n    {print} 'GAME OVER'\n```\n"
                start_code: '# разместите здесь свой код'
    piggybank:
        name: Копилка
        description: Считайте свои карманные деньги!
        default_save_name: Копилка
        levels:
            12:
                story_text: "## Piggy Bank\nIn this adventure you learn how to make a digital piggy bank, to calculate how much money you have and how long you need to save up to buy what you want!\n"
                start_code: '# разместите здесь свой код'
                example_code: "```\n{print} 'The digital piggy bank'\nwish = {ask} 'What would you like to buy?'\nprice = {ask} 'How much does that cost?'\nsaved = {ask} 'How much money have you saved already?'\nallowance = {ask} 'How much pocket money do you get per week?'\nto_save = price - saved\nweeks = to_save / allowance\n{print} 'You can buy a ' wish ' in ' weeks ' weeks.'\n```\n"
            14:
                story_text: "## Piggybank\nIn this level you can let Hedy tell you {if} you have saved up enough money!\n"
                example_code: "```\nmoney = {ask} 'How much money have you saved?'\nwish = {ask} 'How much money do you need?'\nallowance = {ask} 'How much pocket money do you get each week?'\nto_save = wish - money\nweeks = to_save / allowance\n{if} wish > money\n    {print} 'You need to save up some more!'\n    {print} 'Youll need ' weeks ' more weeks.'\n{else}\n    {print} 'Great! You have enough'\n    {print} 'Lets go shopping!'\n```\n"
                start_code: '# разместите здесь свой код'
    quizmaster:
        name: Викторина
        description: Составьте свою собственную викторину!
        default_save_name: Викторина
        levels:
            14:
                story_text: "## Make your own quiz\nIn this adventure you can make your own quiz! Fill in the blanks, add more questions and enjoy your own quiz!\nYou can make a quiz about anything you like: your hobby, your favorite animal, your favorite book or anything at all!\n"
                example_code: "```\n{print} 'Make your own quiz'\npoints_a = 0\npoints_b = 0\n{print} 'Question'\n{print} 'Answer option A'\n{print} 'Answer option B'\nanswer = {ask} 'Which answer?'\n{if} answer == 'A'\n    points_a = points_a + 1\n{if} answer == 'B'\n    points_b = points_b + 1\n{print} 'End of the quiz!'\n{print} 'Lets see the results!'\n{if} points_a > points_b\n    {print} 'You belong to the A club'\n{if} points_b > points_a\n    {print} 'You belong to the B club'\n```\n"
                start_code: '# разместите здесь свой код'
    language:
        name: Язык
        description: Отрабатывайте слова на иностранном языке
        default_save_name: Язык
        levels:
            5:
                story_text: "## Learn a new language\nMake your own program to practice your vocabulary in a new language.\n"
                example_code: "```\n{print} 'Learn French!'\ncat {is} {ask} '\U0001F431'\n{if} cat {is} chat {print} 'Terrific!'\n{else} {print} 'No, cat is chat'\nfrog {is} {ask} '\U0001F438'\n{if} frog {is} grenouille {print} 'Super!'\n{else} {print} 'No, frog is grenouille'\n```\n"
                start_code: '# разместите здесь свой код'
            16:
                story_text: "## Learn a new language\nMake your own program to practice your vocabulary in a new language.\n"
                example_code: "```\nfrench_words = ['bonjour', 'ordinateur', 'pomme de terre']\ntranslation = ['hello', 'computer', 'potato']\nscore = 0\n{for} i {in} {range} 1 {to} 3\n    answer = {ask} 'What does ' french_words[i] ' mean?'\n    correct = translation[i]\n    {if} answer == correct\n        {print} 'Correct!'\n        score = score + 1\n    {else}\n        {print} 'Wrong, ' french_words[i] ' means ' translation[i]\n{print} 'You gave ' score ' correct answers.'\n```\n"
                start_code: '# разместите здесь свой код'
    next:
        name: Что дальше?
        description: Что дальше?
        default_save_name: Далее
        levels:
            1:
                story_text: "## What's next?\nCongratulations! You've reached the end of level 1. Hopefully you've already made some awesome codes, but Hedy has a lot more to discover. \n\nIn the first level you might've notice that the `{echo}` command can only save one bit of information at a time. \nFor example in the restaurant adventure, you could {echo} what the costumer wanted to eat, or what they wanted to drink, but not both in one sentence. \n"
                example_code: "```\n{print} Welcome at Hedy's\n{ask} What would you like to eat?\n{echo} So you want \n{ask} what would you like to drink?\n{echo} So you want \n```\n"
                story_text_2: "If the player types a hamburger and coke, you can't say `so you would like a hamburger and coke`, but you have to make two separate line. \nAlso, the `{echo}` command only echoes the word at the end of the sentence. So you can't say `your hamburger is coming right up!`.\n\nThat changes in level 2. In level 2 you'll learn to work with variables, that allow you to save multiple pieces of information and print them in any place you want.\nSo let's go to the next level!\n"
                start_code: "{print} Поехали!"
            2:
                story_text: "## What's next?\nIn this level you've learned what a variable is and how you can use it to make your adventures more interactive.\nBut... that's not the only thing you can do with variables! You can also use variables to make lists.\nAnd you can even let Hedy pick a random word out of a list, which allows you to make real games!\nTake a quick look at the next level!\n"
                start_code: "{print} Переходим на следующий уровень!"
            3:
                story_text: "## What's next?\nIn this level you've been practising with variables, but maybe you've come across this mistake.\n\nTry to run this code:\n```\nname {is} Sophie\n{print} My name is name\n```\nOf course you wanted to print `My name is Sophie` but Hedy prints `My Sophie is Sophie`.\nIn the next level this problem is fixed by using quotation marks.\n"
                start_code: "{print} Переходим на следующий уровень!"
            4:
                story_text: "## What's next?\nIn the previous levels you've already learned to use `{at} {random}` which made your games different every time you ran the code.\nBut it's not really interactive, the player doesn't have any influence on what happens in the game.\n\nIn the next level you'll learn the `{if}` command, that allows you to give different responses in your program. This way you can program a secret password for your computer for example.\nSo let's take a peak!\n\n```\npassword {is} {ask} 'What is the correct password?'\n```\n"
                start_code: "{print} 'Переходим на следующий уровень!'"
            5:
                story_text: "## What's next?\nNow you've reached the end of this level, so you have learned `{ask}` and `{if}`. For example you can {ask} guests what they would like to eat.\nWhat you can't yet do though, is calculate the price for everyone's dinner.\n\nThe next level makes it possible to use addition, subtraction and multiplication in your programs. This way you can calculate the prices in your restaurant, but you could also add a secret code to give your friends and family a discount.\nAnother option in the next level is programming your own maths game, for your little brother or sister to practice their multiplications.\nGo see for yourself in the next level!\n"
                example_code: "## Free drinks!\n```\n{print} 'Welcome at McHedy'\norder {is} {ask} 'What would you like to eat?'\n{print} 'You would like ' order\n{if} order {is} hamburger price {is} 5\n{if} order {is} fries price {is} 2\ndrinks {is} {ask} 'What would you like to drink?'\n{print} 'You would like ' drinks\n{print} 'That will be ' price ' dollars for your ' order ' please'\n{print} 'The drinks are free in this level because Hedy cant calculate the price yet...'\n```\n"
                start_code: "{print} 'На следующий уровень!'"
            6:
                story_text: "## What's next?\n Great job! You've reached the end of this level, which means you have practiced with `{if}` and `{else}`. You have probably noticed that your codes are getting longer and longer.\n For example {if} you want to program 'Happy Birthday'.\n\nThat's a lot of code for mainly the same words over and over again. Luckily in the next level has a solution with the `{repeat}` command, that allows you to repeat a line of code multiple times.\n"
                example_code: " ```\n {print} 'happy birthday to you'\n {print} 'happy birthday to you'\n {print} 'happy birthday dear Hedy'\n {print} 'happy birthday to you'\n ```\n"
                start_code: "{print} 'На следующий уровень!'"
            7:
                story_text: "## What's next?\nNow you've learned how to repeat one single line of code. This comes in handy, but it's not always enough. Sometimes you want to repeat multiple lines at once.\nthe next level allows you to group a couple of lines of code, and repeat that little group of lines all at once!\n"
                example_code: "```\n{repeat} 5 {times} {print} 'In the next level you can repeat multiple lines of code at once!'\n```\n"
                start_code: "{print} 'Переходим на следующий уровень!'"
            8:
                story_text: "## What's next?\nGreat job! You've reached the end of another level! In this level you've learned to use multiple lines of code in an {if} or {repeat} command. But you can't yet combine the two...\nGood news! In the next level you will be allowed to put an {if} inside an {if}, or inside a {repeat} command.\n"
                example_code: "```\nanswer = {ask} 'Would you like to go to the next level?'\n{if} answer {is} yes\n    {print} 'Great! You can use the {repeat} commando in the {if} command!'\n    {print} 'Hooray!'\n    {print} 'Hooray!'\n    {print} 'Hooray!'\n{else}\n    {print} 'Okay, you can stay here for a little longer!'\n```\n"
                start_code: "{print} 'Переходим на следующий уровень!'"
            9:
                story_text: "## What's next?\nYou're doing great! In this level we still face a small problem. You have learned to repeat lines, but what if you'd want to slightly change the line.\nFor example if you want to sing the song '{if} you're happy and you know it'. It would look like this:\n\nIf you'd also want the next verse 'stomp your feet', and the next one, and the next one, you'd have to change the code completely.\nIn the next level you'll learn the `{for}` command, which allows you to make a list of actions and repeat the code with another action each time!\nPlease take a look!\n"
                example_code: "```\n{repeat} 2 {times}\n    {print} '{if} youre happy and you know it clap your hands'\n{print} '{if} youre happy and you know it and you really want to show it'\n{print} '{if} youre happy and you know it clap your hands'\n```\n"
                start_code: "{print} 'Переходим на следующий уровень!'"
            10:
                story_text: "## What's next?\nYou have reached the end of this level, you're doing great! You are about to go to the next level. In the higher levels, Hedy is focussing more and more on teaching you the programming language Python.\nIn Python there is no `{repeat}` command, but there is a command that works like {repeat}. Are you curious to find out how to say `{repeat}` in Python language? Quickly go on to find out!\n"
                start_code: "{print} 'Переходим на следующий уровень!'"
            11:
                story_text: "## What's next?\nMaybe you have tried using decimal numbers in your restaurant adventure. If you did, you probably noticed that Hedy didn't understand them yet and always rounded off.\nFrom the next level on you can use decimal numbers.\n\nAnother cool feauture in the next level is that you can use mulitiple words in a variable.\nFor intance, you could already do this...\n"
                example_code: "```\nname = {ask} 'Who is your favorite cartoon character?'\n{print} 'I love watching ' name\n```\nBut you couldn't use multiple words in a variable like the example below. This program does not work yet in this level!\n```\nshow = SpongeBob SquarePants\n{print} show 'is my favorite show!'\n```\nGo to the next level to make this code work!\n"
                start_code: "{print} 'Переходим на следующий уровень!'"
            12:
                story_text: "## What's next?\nIn the previous levels you learned how to put two `{if}`commands inside each other. This works fine, but it does give you very long and unhandy codes like this one:\n\nIn this system you have to give both the correct username and the correct password.\nIn the next level you will learn the `{and}` command that will make this code a ot shorter and more understandable!\nCheck it out!\n"
                example_code: "```\nusername {is} {ask} 'What is your username?'\npassword {is} {ask} 'What is your password?'\n{if} username {is} 'Hedy'\n    {if} password {is} 'secret'\n        {print} 'Welcome Hedy!'\n    {else}\n        {print} 'Access denied'\n{else}\n    {print} 'Access denied!'\n```\n"
                start_code: "{print} 'Переходим на следующий уровень!'"
            13:
                story_text: "## What's next?\nWith the program below you can calulate {if} you've passed a subject at school (so, a grade of six or higher).\nYou can see this code is extremely inefficient, du to the very long code in line 5.\nAll the different grades from 1 to 5 had to be programmed seperately. Lucky for you, in the next level you'll learn how to do this without this extremely long code!\n"
                example_code: "```\nfirst_grade = {ask} 'What score did you get on your first test?'\nsecond_grade = {ask} 'What score did you get on your second test?'\nadded {is} first_grade + second_grade\nmean_grade {is} added / 2\n{if} mean_grade = 1 {or} mean_grade = 2 {or} mean_grade = 3 {or} mean_grade = 4 {or} mean_grade = 5\n    {print} 'Oh no! You have failed the subject...'\n{else}\n    {print} 'Great! You have passed the subject!'\n```\n"
                start_code: "{print} 'Переходим на следующий уровень!'"
            14:
                story_text: "## What's next?\nIn this game below a code has been made to make sure the player can play on as long as he/she wants...\nBut the code is ineffective and way too long. Also, what {if} the player wants to play 101 games instead of 100?\nYou can't play to infinity?\nIn the next level you will learn a command that makes all of this a lot easier!\n"
                example_code: "```\ngame {is} 'on'\n{for} i {in} {range} 1 {to} 100\n    {if} game {is} 'on'\n        answer = {ask} 'Do you want to continue?'\n        {if} answer {is} 'no'\n            game {is} 'over'\n        {if} answer {is} 'yes'\n            {print} 'Ok we will continue'\n```\n"
                start_code: "{print} 'Переходим на следующий уровень!'"
            15:
                story_text: "## What's next?\nIn the next level we will grow a bit more towards real Python code. thon code. You will also learn how to match two lists together.\nThis way you can program a code in which the correct animal is matched to the right sound.\nBecause the two codes below... Are obviously nonsense!\n"
                example_code: "```\nanimals = 'chicken', 'horse', 'cow'\nsounds = 'cluck', 'neigh', 'moo'\n{for} animal {in} animals\n    {print} 'A ' animal ' says ' sounds {at} {random}\n```\nYou could also try to make it work this way, but....\n```\nanimals = 'chicken', 'horse', 'cow'\nsounds = 'cluck', 'neigh', 'moo'\n{for} animal {in} animals\n    {for} sound {in} sounds\n        {print} 'A ' animal ' says ' sound\n```\n"
                start_code: "{print} 'Переходим на следующий уровень!'"
            16:
                story_text: "## What's next?\nIn the next level it's time for a new command. You might have noticed in the previous levels that `{if}` and `{else}` sometimes aren't enough.\nFor example in this code:\n"
                example_code: "```\n{print} 'What is for dinner tonight?'\noptions = ['pizza', 'broccoli', 'green beans']\nchosen = options {at} {random}\n{if} chosen = 'pizza'\n    {print} 'Yummy! Pizza!'\n{else}\n    {print} 'Yikes...'\n```\n"
                story_text_2: In this code it would be great to have 2x an `{else}` so you could have one option for the broccoli and one for the green beans. The next level comes with the new command `{elif}` that makes this possible! So check out the next level now!
                start_code: "{print} 'Переходим на следующий уровень!'"
            17:
                story_text: "## What's next?\nIn the next level you will learn a real Python way to use `{print}`.\n"
                start_code: "{print} 'Переходим на следующий уровень!'"
            18:
                story_text: "## What's next?\nCongratulations! You have reached the last level of Hedy! But no worries, we are working very hard to create more levels and new adventures. So please come back later to check out the newest levels!\n"
                start_code: "{print} (\"Отличная работа!!!\")"
    tic:
        name: Крестики-нолики
        description: Сыграйте в крестики-нолики!
        default_save_name: Тик
        levels:
            13:
                story_text: "## Tic Tac Toe\nIn this adventure you can program a game of Tic Tac Toe. You can play with two people. Taking turns, you pick a number of the spot (1 - 9) you want to put your sign (x or o) on.\nThe first player that gets 3 in a row (horizontally, vertically or diagonally) wins!\nHave fun!\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game {is} 'on'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice {is} 1\n                spot_1 = sign\n            {if} choice {is} 2\n                spot_2 = sign\n            {if} choice {is} 3\n                spot_3 = sign\n            {if} choice {is} 4\n                spot_4 = sign\n            {if} choice {is} 5\n                spot_5 = sign\n            {if} choice {is} 6\n                spot_6 = sign\n            {if} choice {is} 7\n                spot_7 = sign\n            {if} choice {is} 8\n                spot_8 = sign\n            {if} choice {is} 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner {is} 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign {is} 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
                start_code: '## разместите здесь свой код'
            15:
                start_code: '## разместите здесь свой код'
                story_text: "## Tic Tac Toe\nIn this level you can improve your Tic Tac Toe game with the {while} loop/ With this loop you can combine the `{if} game != 'over'` and the `{for} i {in} {range} 1 to 9` into one simple line.\nCheck it out:\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over'\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots\n        {remove} choice {from} open_spots\n        {if} choice == 1\n            spot_1 = sign\n        {if} choice == 2\n            spot_2 = sign\n        {if} choice == 3\n            spot_3 = sign\n        {if} choice == 4\n            spot_4 = sign\n        {if} choice == 5\n            spot_5 = sign\n        {if} choice == 6\n            spot_6 = sign\n        {if} choice == 7\n            spot_7 = sign\n        {if} choice == 8\n            spot_8 = sign\n        {if} choice == 9\n            spot_9 = sign\n    {else}\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    winner = {ask} 'Did you win?'\n    {if} winner == 'yes'\n        {print} 'Good job, player ' sign '!'\n        game = 'over'\n    {else}\n        {if} sign == 'x'\n            sign = 'o'\n        {else}\n            sign = 'x'\n```\n"
            17:
                start_code: '## разместите здесь свой код'
                story_text: "## Tic Tac Toe\nIn the previous levels the tic tac toe game had an annoying feature. After every move, you had to fill in yourself if you had won or not.\nThis made the game playable, but also quite slow. In this level we have learned the `{elif}` command, that could solve that problem.\nTo use the {elif} to let Hedy check whether or not a player has won is fun, but it also requires a fair amount of extra lines.\n\nIn the example code you see that we added the requirements to win (3 spots in a row horizontally, vertically or diagonally).\nYou can find them in line 46 to 69. You can see that each time the requirement is met (so if a player has won) the variable game is set to 'over'.\nThis means that the {while} loop will be stopped and the game ends.\n"
                example_code: "```\nsign = 'x'\nopen_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over':\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots:\n        {remove} choice {from} open_spots\n        {if} choice == 1:\n            spot_1 = sign\n        {if} choice == 2:\n            spot_2 = sign\n        {if} choice == 3:\n            spot_3 = sign\n        {if} choice == 4:\n            spot_4 = sign\n        {if} choice == 5:\n            spot_5 = sign\n        {if} choice == 6:\n            spot_6 = sign\n        {if} choice == 7:\n            spot_7 = sign\n        {if} choice == 8:\n            spot_8 = sign\n        {if} choice == 9:\n            spot_9 = sign\n    {else}:\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {else}:\n        {if} sign == 'x':\n            sign = 'o'\n        {else}:\n            sign = 'x'\n```\n"
            14:
                story_text: "## Tic Tac Toe\nIn the previous levels you've made a tic tac toe game. Now you've learned how to use the = sign, the == sign and the != sign.\nYou can use this knowledge in your new Taic Tac Toe game, like this:\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game != 'over'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice == 1\n                spot_1 = sign\n            {if} choice == 2\n                spot_2 = sign\n            {if} choice == 3\n                spot_3 = sign\n            {if} choice == 4\n                spot_4 = sign\n            {if} choice == 5\n                spot_5 = sign\n            {if} choice == 6\n                spot_6 = sign\n            {if} choice == 7\n                spot_7 = sign\n            {if} choice == 8\n                spot_8 = sign\n            {if} choice == 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner == 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign == 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
                start_code: '## разместите здесь свой код'
    blackjack:
        name: Блэкджек
        description: Try to get as close to 21 as you can
        default_save_name: Блэкджек
        levels:
            17:
                story_text: "## Create a game of Blackjack\nBlackjack is a simple game of cards in which you have to get as close to 21 points as possible. You get two cards. Each card is worth their numeral value, and the face cards (Jack, Queen and King) are worth 10 points.\nThe Ace is worth either 1 or 11 points (you can choose). The dealer, your opponent, also gets two cards.\nIf you want, you can get another card, and its points will be added to your total. The dealer can also choose to take another card.\nBut be careful not to get more than 21 points, because if you do, you lose!\nThe player who gets closest to 21, without going over it, wins!\n\nHave fun!\n"
                example_code: "```\n{print} 'BLACKJACK'\ncards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen','King', 'Ace']\npoints = 0\ndealer_points = 0\ncard_1 = cards[{random}]\ncard_2 = cards[{random}]\ncard_3 = cards [{random}]\ndealer_card_1 = cards[{random}]\ndealer_card_2 = cards[{random}]\ndealer_card_3 = cards[{random}]\n# Points for card 1\n{if} card_1 == 'Jack' {or} card_1 == 'Queen' {or} card_1 == 'King':\n    points = points + 10\n{elif} card_1 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_1\n# Points for card 2\n{if} card_2 == 'Jack' {or} card_2 == 'Queen' {or} card_2 == 'King':\n    points = points + 10\n{elif} card_2 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_2\n# Points for dealer card 1\n{if} dealer_card_1 == 'Jack' {or} dealer_card_1 == 'Queen' {or} dealer_card_1 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_1 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_1\n# Points for dealer card 2\n{if} dealer_card_2 == 'Jack' {or} dealer_card_2 == 'Queen' {or} dealer_card_2 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_2 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_2\n# Two Aces\n{if} card_1 == 'Ace' {and} card_2 == 'Ace':\n    points = 12\n{if} dealer_card_1 == 'Ace' {and} dealer_card_2 == 'Ace':\n    dealer_points = 12\n# Scoreboard\n{print} 'You have a ' card_1 ' and a ' card_2 ' (' points ' points)'\n{print} 'The dealer has a ' dealer_card_1 ' and a ' dealer_card_2 ' (' dealer_points ' points)'\n# Extra card for the player\nhit = {ask} 'Do you want an extra card?'\n{if} hit == 'yes':\n    {if} card_3 == 'Jack' {or} card_3 == 'Queen' {or} card_3 == 'King':\n        points = points + 10\n    {elif} card_3 == 'Ace':\n        {if} points > 11:\n            points = points + 11\n        {else}:\n            points = points + 1\n    {else}:\n        points = points + card_3\n    print 'You get an extra ' card_3 ' (' points ' points)'\n{else}:\n    print 'No extra cards'\n# Winner\n{if} points > 21 {or} dealer_points > points {or} dealer_points == 21:\n    {print} 'You lose'\n{elif} dealer_points < 17:\n    {print} 'The dealer takes an extra card. It is a... ' dealer_card_3\n    {if} dealer_card_3 == 'Jack' {or} dealer_card_3 == 'Queen' {or} dealer_card_3 == 'King':\n        dealer_points = dealer_points + 10\n    {elif} dealer_card_3 == 'Ace':\n        {if} dealer_points < 11:\n            dealer_points = dealer_points + 11\n        {else}:\n            dealer_points = dealer_points + 1\n    {else}:\n        dealer_points = dealer_points + dealer_card_3\n    {print} 'The dealer has ' dealer_points ' points now'\n    {if} dealer_points < 21 {and} dealer_points > points:\n        {print} 'You lose'\n    {else}:\n        {print} 'You win'\n{elif} points > dealer_points {and} points < 21:\n    {print} 'You win!'\n```\n"
                start_code: '# разместите здесь свой код'
