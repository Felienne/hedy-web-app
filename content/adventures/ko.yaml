adventures:
    tic:
        levels:
            17:
                story_text: "이전 수준에서 틱택토 게임은 짜증나는 기능을 가지고 있었다. 모든 동작이 끝난 후, 당신은 당신이 이겼는지 안 이겼는지를 스스로 채워야 했다. 이것은 게임을 플레이 할 수 있게 해주었지만 또한 매우 느렸다. 이 수준에서 우리는 이 문제를 해결할 수 있는 {elif} 명령어를 배웠다. {elif}를 사용하여 어떤 선수가 이겼는지를 헤디가 확인하는 것은 재미있지만 상당한 양의 추가 줄이 필요하기도 하다. 예제 코드에서 당신은 우리가 이기기 위한 조건(가로, 세로, 대각선으로 연속된 세 지점)을 추가한 것을 볼 수 있다. 46번부터 69번 줄에서 찾을 수 있다. 당신은 조건이 충족될 때마다(선수가 이겼다면) 가변적인 게임이 오버로 설정되는 것을 볼 수 있다. 이것은 {while}번 루프가 멈추고 게임이 끝난다는 것을 의미한다.\n"
                example_code: "```\nsign = 'x'\nopen_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over':\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots:\n        {remove} choice {from} open_spots\n        {if} choice == 1:\n            spot_1 = sign\n        {if} choice == 2:\n            spot_2 = sign\n        {if} choice == 3:\n            spot_3 = sign\n        {if} choice == 4:\n            spot_4 = sign\n        {if} choice == 5:\n            spot_5 = sign\n        {if} choice == 6:\n            spot_6 = sign\n        {if} choice == 7:\n            spot_7 = sign\n        {if} choice == 8:\n            spot_8 = sign\n        {if} choice == 9:\n            spot_9 = sign\n    {else}:\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {else}:\n        {if} sign == 'x':\n            sign = 'o'\n        {else}:\n            sign = 'x'\n```\n"
                start_code: '# place your code here'
            13:
                start_code: '# place your code here'
                story_text: "이 모험에서 여러분은 Tic Tac Toe 게임을 프로그래밍할 수 있습니다. 여러분은 두 명과 함께 게임을 할 수 있습니다. 교대로, 여러분은 여러분의 기호(x 또는 o)를 달고 싶은 자리의 숫자(1 - 9)를 고릅니다. 3개의 연속 (가로, 세로, 대각선)을 얻은 첫 번째 플레이어가 이깁니다! ### 운동 1 이 게임은 효과가 있지만 몇 가지 문제가 있습니다. 예를 들어, 어떤 플레이어든지, 심지어 한 개의 필드라도 선택할 수 있습니다! 자리가 잡혔는지 '{if}'를 사용하고, 만약 그렇다면, 플레이어에게 경고하십시오. ## 운동 2 게임은 또한 누가 이겼는지를 결정하지 않습니다. 여러분은 3개의 연속된 자리가 같은 기호를 가지고 있는지 확인하여 이를 추가해야 합니다. ## 운동 3 추가 여러분은 항상 같이 놀 친구가 있는 것은 아닙니다. 여러분은 컴퓨터 상대를 만들 수 있나요?\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game {is} 'on'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice {is} 1\n                spot_1 = sign\n            {if} choice {is} 2\n                spot_2 = sign\n            {if} choice {is} 3\n                spot_3 = sign\n            {if} choice {is} 4\n                spot_4 = sign\n            {if} choice {is} 5\n                spot_5 = sign\n            {if} choice {is} 6\n                spot_6 = sign\n            {if} choice {is} 7\n                spot_7 = sign\n            {if} choice {is} 8\n                spot_8 = sign\n            {if} choice {is} 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner {is} 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign {is} 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
            14:
                start_code: '# place your code here'
                story_text: "이전 레벨에서는 틱택토 게임을 만들었습니다. 이제 = 사인, == 사인 및 != 사인을 사용하는 방법에 대해 배웠습니다. 이 지식을 새 틱택토 게임에 사용할 수 있는 방법은 다음과 같습니다:\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game != 'over'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice == 1\n                spot_1 = sign\n            {if} choice == 2\n                spot_2 = sign\n            {if} choice == 3\n                spot_3 = sign\n            {if} choice == 4\n                spot_4 = sign\n            {if} choice == 5\n                spot_5 = sign\n            {if} choice == 6\n                spot_6 = sign\n            {if} choice == 7\n                spot_7 = sign\n            {if} choice == 8\n                spot_8 = sign\n            {if} choice == 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner == 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign == 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
            15:
                story_text: "이 레벨에서는 {while} 루프로 Tic Tac Toe 게임을 향상시킬 수 있다. 이 루프로 {if} 게임 != 'over'와 '{for} i {in} {range} 1 {to} 9'를 하나의 간단한 행으로 결합할 수 있다. 이것을 확인해 보자:\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over'\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots\n        {remove} choice {from} open_spots\n        {if} choice == 1\n            spot_1 = sign\n        {if} choice == 2\n            spot_2 = sign\n        {if} choice == 3\n            spot_3 = sign\n        {if} choice == 4\n            spot_4 = sign\n        {if} choice == 5\n            spot_5 = sign\n        {if} choice == 6\n            spot_6 = sign\n        {if} choice == 7\n            spot_7 = sign\n        {if} choice == 8\n            spot_8 = sign\n        {if} choice == 9\n            spot_9 = sign\n    {else}\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    winner = {ask} 'Did you win?'\n    {if} winner == 'yes'\n        {print} 'Good job, player ' sign '!'\n        game = 'over'\n    {else}\n        {if} sign == 'x'\n            sign = 'o'\n        {else}\n            sign = 'x'\n```\n"
                start_code: '# place your code here'
        name: Tic Tac Toe
        description: Play a game of Tic Tac Toe!
        default_save_name: Tic
    default:
        levels:
            3:
                start_code: '{print} hello world!'
                story_text: "이전 수준에서 여러분은 변수가 무엇인지 그리고 여러분의 모험을 더 상호작용적으로 만들기 위해 그것을 어떻게 사용할 수 있는지 배웠습니다. \n그러나... 그것만이 변수로 할 수 있는 것이 아닙니다! 여러분은 목록을 만들기 위해 변수를 사용할 수도 있습니다. \n그리고 목록에서 헤디에게 임의의 단어를 고르도록 할 수도 있는데, 이것은 여러분이 진짜 게임을 만들 수 있게 해줍니다! 다음 탭을 잠깐 보세요!\n"
            4:
                start_code: "{print} 'Hello world'"
                story_text: "이전 수준에서는 변수를 사용하여 연습해 보았지만, 이 문제를 발견했을 수도 있습니다.\n다음과 같은 코드를 실행하려고 했을 수도 있습니다:\n\n물론 print하고 싶었겠지\n\n`제 이름은 소피입니다`\n\n하지만 Hedy는 지문을 찍는다\n\n`나의 소피는 소피다.`\n\n이 수준에서는 따옴표를 사용하여 이 문제를 해결합니다.\n"
                example_code: "```\nname {is} Sophie\n{print} My name is name\n```\n"
            14:
                start_code: "age = {ask} 'How old are you?'\n{if} age < 13\n    {print} 'You are younger than me!'\n{else}\n    {print} 'You are older than me!'"
                story_text: "아래의 프로그램으로 여러분은 학교에서 한 과목(즉, 6등급 또는 그 이상의 등급)을 통과했는지 계산할 수 있다. 여러분은 이 코드가 5번 줄에 있는 매우 긴 코드 때문에 극도로 비효율적이라는 것을 알 수 있다. 1등급부터 5등급까지 모든 다른 등급들은 따로 프로그램 되어 있어야 했다. 운이 좋군요, 이 수준에서 여러분은 이 극도로 긴 코드 없이 이것을 하는 방법을 배울 수 있을 것입니다!\n"
                example_code: "```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n"
            2:
                story_text: "축하해요! 레벨 2에 올랐네요. 이미 멋진 코드를 만들었기를 바랍니다!\n첫 번째 레벨에서는 '{echo}' 명령을 사용하면 한 번에 정보를 한 비트만 저장할 수 있다는 것을 알 수 있습니다.\n예를 들어 레스토랑 어드벤처에서는 고객이 먹고 싶은 것, 또는 마시고 싶은 것을 한 문장으로 반향할 수 있지만 둘 다는 아니다.\n"
                start_code: '{print} hello world!'
                example_code: "**Warning! This code does not work!**\nIn Hedy commands will change sometimes. `echo` for example only works in level 1. In this level you'll learn a better way to echo answers back.\n```\n{print} Welcome at Hedy's\n{ask} What would you like to eat?\n{echo} So you want\n{ask} what would you like to drink?\n{echo} So you want\n```\n"
                story_text_2: "플레이어가 햄버거와 콜라를 입력하면 \"그래서 햄버거와 콜라를 원한다\"고 말할 수는 없지만, 두 줄을 따로 만들어야 한다.\n또한, {echo} 명령어는 문장의 마지막에 단어만 울려 퍼지기 때문에 \"너의 햄버거가 바로 올라온다!\"라고 말할 수는 없다.\n\n이는 레벨 2에서 변화한다. 레벨 2에서는 여러 개의 정보를 저장하고 원하는 장소에 인쇄할 수 있는 변수 작업을 배울 수 있다.\n그럼 다음 탭으로 가보도록 하겠습니다!\n"
            1:
                story_text: "레벨 1에서는 `{print}`, `{ask}` 그리고 `{echo}` 와 같은 명령어를 사용할 수 있습니다.\n당신의 코드를 하단 프로그래밍 영역에 작성해주세요. 혹은 우측의 화살표 버튼을 눌러 당신을 위해 준비한 코드를 생성할 수도 있습니다!\n작성한 코드는 하단의 '코드 실행' 버튼을 누르면 실행할 수 있습니다.\n\n문장을 나타내기 위해 `{print}` 를 사용할 수 있습니다.\n"
                start_code: '{print} hello world!'
            5:
                start_code: "name {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'cool!' {else} {print} 'meh'"
                story_text: "이전 수준에서는 코드를 실행할 때마다 게임이 달라지는 {at} {random}을 사용하는 법을 이미 배웠습니다. 하지만 이것은 실제로 상호작용적이지는 않고 플레이어는 게임에서 일어나는 일에 아무런 영향을 미치지 않습니다. 이 수준에서 여러분은 프로그램에서 다른 반응을 줄 수 있는 {if} 명령어를 배울 것입니다. 예를 들어, 컴퓨터의 비밀 암호를 프로그래밍할 수 있는 방법입니다. 이제 새로운 명령어에 대한 다음 탭으로 가봅시다!\n"
                example_code: "```\npassword {is} {ask} 'What is the correct password?'\n```\n"
            6:
                start_code: "{print} '5 times 5 is ' 5 * 5"
                story_text: "이전 단계에서는 '{ask}'와 '{if}'로 연습한 적이 있다. 예를 들어, 손님들에게 무엇을 먹고 싶은지 물어볼 수 있다. 하지만 아직은 할 수 없는 것은 모든 사람들의 저녁 식사 가격을 계산하는 것이다. 다음 단계에서는 프로그램에서 덧셈, 뺄셈, 곱셈을 사용하는 것이 가능하다. 이렇게 하면 식당의 가격을 계산할 수 있지만, 친구나 가족에게 할인을 주기 위해 비밀 코드를 추가할 수도 있다. 다음 단계에서는 남동생이나 여동생이 곱셈을 연습할 수 있도록 자신만의 수학 게임을 프로그래밍하는 것이다. 직접 가서 보세요!\n"
                example_code: "```\n{print} '5 plus 5 is ' 5 + 5\n{print} '5 minus 5 is ' 5 - 5\n{print} '5 times 5 is ' 5 * 5\n```\n"
            7:
                start_code: "{print} 'happy birthday to you'\n{print} 'happy birthday to you'\n{print} 'happy birthday dear Hedy'\n{print} 'happy birthday to you'\n"
                story_text: "잘했어요! 다음 단계에 도달했으니 {if}과 {else}로 연습한 셈이죠. 코드가 점점 더 길어지고 있음을 알아차렸을 거예요. 예를 들어, 생일 축하 프로그램을 만들고 싶다면 같은 단어를 몇 번이고 반복하는 코드가 많습니다. 다행히도 다음 탭에서 코드 한 줄을 여러 번 반복할 수 있는 {repeat} 명령어를 사용한 해결책을 배울 수 있을 거예요.\n"
                example_code: "```\n{repeat} 3 {times} {print} 'Hedy is fun!'\n```\n"
            9:
                story_text: "수고했어요! 또 새로운 단계에 도달했네요!\n"
                example_code: "```\n{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    {else}\n        {print} 'pizza is better'\n```\n"
                start_code: "{print} Lets go to the next tab!"
            8:
                start_code: "{repeat} 5 {times}\n    {print} 'Hello folks'\n    {print} 'This will be printed 5 times'"
                story_text: "이제 여러분은 한 줄의 코드를 반복하는 방법에 대해 배웠습니다. 이것은 유용하지만, 항상 충분하지는 않습니다. 때때로 여러분은 여러 줄의 코드를 한 번에 반복하고 싶어합니다. 이 레벨을 사용하면 두 줄의 코드를 그룹화하여 그 작은 줄의 그룹을 한 번에 반복할 수 있습니다!\n"
                example_code: "```\n{repeat} 5 {times} {print} 'In the next tab you can repeat multiple lines of code at once!'\n```\n"
            10:
                start_code: "animals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal"
                story_text: "잘하고 있어요! 이전 단계에서 우리는 여전히 작은 문제에 직면했어요. 대사를 반복하는 법을 배웠지만, 대사를 약간 바꾸고 싶다면 어떻게 하죠. 예를 들어, 만약 여러분이 행복하고 그것을 안다면'이라는 노래를 부르고 싶다면요. 다음 소절과 다음 소절, 그리고 다음 소절까지 원한다면, 여러분은 코드를 완전히 바꿔야 할 것입니다. 이 레벨에서 여러분은 동작 목록을 만들고 매번 다른 동작으로 코드를 반복할 수 있는 '{for}' 명령어를 배울 것입니다. 한번 보세요!\n"
                example_code: "```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal\n```\n"
            11:
                start_code: "{for} counter {in} {range} 1 {to} 5\n    {print} counter"
                story_text: "레벨 10에 도달하셨네요, 잘 하고 계십니다! 상위 레벨에서는 헤디가 점점 더 파이썬 프로그래밍 언어를 가르치는데 집중하고 있습니다. 파이썬에는 {repeat} 명령어가 없지만 {repeat}과 같은 동작을 하는 명령어가 있습니다. 파이썬 언어로 {repeat}을(를) 어떻게 말해야 하는지 궁금하신가요? 얼른 찾아보세요!\n"
            12:
                start_code: "{print} 'decimal numbers now need to use a dot'\n{print} 2.5 + 2.5"
                story_text: "아마 당신은 레스토랑 모험에서 십진법 숫자들을 사용해 보았을 것이다. 만약 사용했다면, 당신은 헤디가 숫자들을 아직 이해하지 못했고 항상 반올림했다는 것을 알아차렸을 것이다. 이 단계부터 당신은 십진법 숫자들을 사용할 수 있다.\n"
                example_code: "```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n"
            13:
                start_code: "name = {ask} 'what is your name?'\nage = {ask} 'what is your age?'\n{if} name {is} 'Hedy' {and} age {is} 2\n    {print} 'You are the real Hedy!'"
                story_text: "이전 수준에서 여러분은 두 개의 {if} 명령어를 서로 안에 넣는 방법을 배웠습니다. 이것은 잘 작동하지만, 이것과 같이 매우 길고 다루기 어려운 코드를 제공합니다. 이 시스템에서 여러분은 올바른 사용자 이름과 올바른 비밀번호를 모두 가르쳐야 합니다. 이 수준에서 여러분은 이 코드를 훨씬 더 짧고 이해하기 쉽게 만드는 {and} 명령어를 배울 것입니다. 이것을 확인하세요!\n"
                example_code: "```\nname = {ask} 'what is your name?'\nage = {ask} 'what is your age?'\n{if} name {is} 'Hedy' {and} age {is} 2\n    {print} 'You are the real Hedy!'\n```\n"
            15:
                start_code: "answer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'"
                story_text: "아래의 이 게임에서는 플레이어가 원하는 만큼 게임을 할 수 있도록 보장하는 코드가 만들어졌다... 하지만 코드는 효과가 없고 너무 길다. 또한 플레이어가 100 게임 대신 101 게임을 하고 싶다면 어떻게 할 것인가? 무한대로 게임을 할 수는 없다? 이 레벨에서 당신은 이 모든 것을 훨씬 쉽게 만드는 명령어를 배울 것이다!\n"
                example_code: "```\nanswer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'\n```\n"
            16:
                start_code: "fruit = ['apple', 'banana', 'cherry']\n{print} fruit"
                story_text: "이 수준에서 우리는 실제 파이썬 코드를 향해 조금 더 성장할 것이다. 당신은 또한 두 목록을 어떻게 함께 맞추는지 배울 것이다. 이 방법으로 당신은 올바른 소리에 맞는 동물을 맞추는 코드를 프로그래밍할 수 있다. 왜냐하면 아래의 두 코드는... 명백하게 넌센스이다!\n"
                example_code: "```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
            17:
                start_code: "{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Ready or not, here I come!'"
                story_text: "헤디의 마지막 레벨에 거의 다 도달했습니다. 잘했어요! 이 레벨에서는 {print}을(를) 사용하는 실제 파이썬 방법을 배울 수 있습니다.\n"
            18:
                start_code: "name = 'Hedy'\n{print}('My name is ', name)"
                story_text: "축하해요! 당신이 헤디의 마지막 레벨에 도달했어요! 당신이 여기서 만든 코드는 replit나 PyCharm과 같은 실제 파이썬 환경에 복사할 수 있고, 당신은 거기서 계속 배울 수 있어요! 그러나 파이썬은 오직 영어 명령어만 읽을 수 있어서, 다른 언어를 사용해 왔다면, 지금 영어로 바꿔야 할 것입니다.\n"
        name: 소개
        description: 레벨 설명
        default_save_name: 소개
    story:
        levels:
            9:
                story_text: "이 레벨에서는 다른 {if} 및 {repeat} 명령어 안에 {if} 및 {repeat} 명령어를 사용할 수 있습니다. 이를 통해 다양한 옵션을 선택할 수 있으며 대화형 스토리를 만드는 데 실질적인 도움이 됩니다. ### 연습문제 1 코드를 완료하면 {if}가 올바르게 작동합니다. ## 연습문제 2 Robin이 집으로 돌아가는 이야기 부분에도 {if}와 {else}를 추가합니다. ## # 연습문제 3 레벨 8의 이야기로 돌아가서 다른 {if} 안에 있는 {if}를 적어도 두 개 사용합니다.\n"
                example_code: "```\n{print} 'Robin is walking downtown'\nlocation = {ask} 'Is Robin going into a shop, or does she go home?'\n{if} location {is} shop\n    {print} 'She enters the shop.'\n    {print} 'Robin sees an interesting looking book'\n    book = {ask} 'Does Robin buy the book?'\n    {if} book {is} yes\n        {print} 'Robin buys the book and goes home'\n    {else}\n        {print} 'Robin leaves the shop and goes home'\n{else}\n    {print} 'Robin goes home'\n```\n"
                start_code: '# place your code here'
            15:
                start_code: '# place your code here'
                story_text: "{while} 루프를 사용하면 이야기가 더 재미있을 수 있습니다. 예를 들어 {while} game {is} on을 사용하면 게임이 끝날 때까지 게임을 할 수 있습니다. 또는 {while} sword {is} lost를 사용하면 플레이어가 무언가를 찾을 때까지 게임을 계속할 수 없습니다.\n"
                example_code: "```\nkeys = 'lost'\n{print} 'You are standing in your garden and you have lost your keys.'\n{print} 'Where do you want to look for them?'\n{print} 'You can choose: tree, flowerbed, rock, postbox'\n{while} keys == 'lost'\n    location = {ask} 'Where do you want to look?'\n    {if} location == 'flowerbed'\n        {print} 'Here they are!'\n        keys = 'found'\n    {else}\n        {print} 'Nope they are not at the ' location\n{print} 'Now you can enter the house!'\n```\n"
            1:
                story_text: "레벨 1단계에서 입력한 다른 주요 특성을 가진 이야기를 만들 수 있습니다.첫 번째 라인에서는 {ask}을(를) 사용하고 있는지 물어봅니다.그 첫 번째 선을 인쇄해야 할 경우 {print}을(를)으로 시작합니다.문장의 마지막 캐릭터가 끝날 때 {echo}을(를) 사용합니다.\n"
                example_code: "```\n{ask} The main character of this story is\n{print} The main character is now going to walk in the forest\n{echo} He's a bit scared,\n{print} He hears crazy noises everywhere\n{print} He's afraid this is a haunted forest\n```\n"
                start_code: '{print} Your story starts here'
                story_text_2: "### 이제 운동은 적어도 6선 코드 중 적어도 6선의 이야기를 만듭니다.이 이야기는 예를 들면, 예를 들어 볼 수 없습니다.최소 {print}의 명령어를 사용하여 {echo}을(를) 사용합니다.당신이 좋아하는 주제들을 만들 수 있습니다.주제를 생각할 수 없다면, 우리 선택 중 하나는 동물원에서 운동이나 하루에 스포츠 시합을 사용합니다.\n"
            2:
                story_text: "레벨 2에서 더 재미있게 만들 수 있습니다.주인공의 이름은 이제 문장에서 어디에 있을 수 있습니다.당신은 그것에 대해 조금 추가해야 합니다.이제 메인 문자를 먼저 지정해야 합니다.그 다음 문장에서 그 이름을 넣을 수 있습니다.\n"
                example_code: "```\nname {is} {ask} What is the name of the main character?\n{print} name is now going to run in the woods\n{print} name is a bit scared\n{print} Suddenly he hears a crazy noise...\n{sleep}\n{print} name is afraid this is a haunted forest\n```"
                start_code: '{print} Your story'
                story_text_2: "### 현재 레벨에서 만들어진 자신만의 이야기를 추가할 수 있습니다.'내 프로그램'에 가서 코드를 복사하고 코드를 복사하십시오.이 수준에서 코드를 붙여넣습니다.이 코드는 아직 사용되지 않았기 때문에 이 코드를 사용할 수 없습니다.이 수준에서 {print} 명령과 {echo}의 명령과(를) 명령으로 변경합니다.***** 확장 명령을 추가하려면 Num 명령을 추가합니다.\n"
            3:
                story_text: "레벨 3단계에서 더 재미있게 만들 수 있습니다.괴물, 동물 또는 다른 장애에 대한 랜덤성을 사용할 수 있습니다.\n"
                example_code: "```\nanimals {is} 🦔, 🐿, 🦉, 🦇\n{print} He now hears the sound of an animals {at} {random}\n```\n"
                story_text_2: "{add}이(가)는 또한 당신의 이야기에 도움이 될 수 있습니다.\n"
                example_code_2: "```\n{print} He hears a sound\nanimals {is} 🐿, 🦔, 🦇, 🦉\nanimal {is} {ask} What do you think it is?\n{add} animal {to_list} animals\n{print} it was a animals {at} {random}\n```\n"
                story_text_3: "스토리에 있는 '{remove}' 명령의 예입니다\n\n### 운동을\n이전 레벨에서 이 레벨로 스토리를 복사합니다.\n이 레벨에서는 '{at} {random}', '{add} {to}' 및 '{remove} {from}' 명령 3개를 새로 배웠습니다.\n스토리에 새 코드 줄을 추가하여 모든 새 명령이 스토리에 한 번 이상 포함되도록 합니다.\n"
                example_code_3: "```\n{print} His backpack got way too heavy.\n{print} Inside were a bottle of water, a flashlight and a brick.\nbag {is} water, flashlight, brick\ndump {is} {ask} Which item should he dump?\n{remove} dump {from} bag\n```\n"
                start_code: '{print} Your story'
            4:
                story_text: "이전 수준에서 문제가 있다는 것을 알게 될 수도 있습니다.이름 이름이 포함된 문장을 인쇄하려고 했습니까? 프린트'라는 이름을 인쇄하려고 했어요.이 수준에서 그것을 해결할 수 있습니다.인쇄하려는 모든 것에 대한 견적 표시를 사용해야 합니다.  ### 연습 복사본은 1과 2의 빈칸의 빈칸에 대한 견적 표시를 추가하여 완료하십시오.3호선 빈칸은 인용표표표표와 4명, Num의 명령이다.일을 할 수 있나요?\n"
                example_code: "```\nname {is} {ask} _ What is your name? _\n{print}  _ The main character is called _ name\n_\n_\n{print} name  _ is now going to walk in the woods _\n{print} name _ is a bit scared _\nanimals {is} 🦔, 🐿, 🦉, 🦇\n{print} _ He hears the sound of a _ animals {at} {random}\n{print} name _ is afraid this is a haunted forest _\n```\n"
                start_code: "{print} 'Your story will be printed here!'"
            5:
                story_text: "이 레벨에서는 서로 다른 엔딩을 프로그래밍할 수 있으므로 이야기가 더욱 재미있을 것이다. 예제 코드에서 두 가지 다른 엔딩을 만드는 방법을 볼 수 있다. ## 연습문제 1 자신이 선택한 주제에 대해 최소 6줄의 코드를 새로 작성한다. 영감이 없습니까? 다음 주제 중 하나를 선택하라: 슈퍼히어로, 지루한 학창시절, 무인도에 발이 묶인 채. 이제 예제 코드에서처럼 플레이어에게 행복한 결말이나 나쁜 결말을 선택할 수 있도록 변화를 준다. 두 엔딩을 모두 프로그래밍한다. ## 연습문제 2 자신의 이야기 모험에서 이전 레벨에 만든 이야기를 복사한다. 자신의 이야기에 최소한 두 개의 {if} 명령과 {else} 명령을 추가하는 방법을 찾아라. 이것은 행복한 결말일 수도 있고 나쁜 결말일 수도 있지만, 명령을 통합하는 다른 방법을 시도해 볼 수도 있다.\n"
                start_code: "{print} 'Here your story will start!'"
                example_code: "```\nname {is} {ask} 'Who is walking in the forest?'\n{print} name 'walks through the forest'\n{print} name 'encounter a monster'\nend {is} {ask} 'Would you like a good or a bad ending?'\n{if} end {is} good {print} name 'takes the sword and the monster quickly runs away'\n{else} {print} 'The monster eats' name\n```\n"
            7:
                story_text: "이야기 속에서 누군가는 여러 번 말을 합니다. 예를 들어 누군가가 도움을 요청하거나 노래를 부를 때 말이죠. 이런 반복을 이야기에 {repeat} 수준으로 넣을 수 있습니다. ### 연습 자신의 이야기에 반복을 추가합니다. 저장한 프로그램으로 돌아가서 6단계에서 이야기 프로그램을 선택하고 {print}가 포함된 줄을 찾아 반복합니다!\n"
                example_code: "```\n{print} 'The prince kept calling for help'\n{repeat} 5 {times} {print} 'Help!'\n{print} 'Why is nobody helping me?'\n```\n"
                start_code: "{repeat} 5 {times} {print} 'Help!'"
            8:
                story_text: "이 레벨에서는 {if} 명령어에 여러 줄을 사용할 수 있으므로 행복하거나 슬픈 엔딩을 업그레이드할 수 있습니다. ### 연습 1 예제 코드는 두 개의 다른 엔딩을 보여줍니다: 하나는 등장인물들이 타임머신을 타고 점프하는 것이고 다른 하나는 그렇지 않은 것입니다. 엔딩 당 최소 한 문장으로 빈칸을 완성하세요. **Extra** 이야기를 길게 만들어 보세요. 이야기에서는 어떻게 될까요? 다른 옵션을 가진 두 번째 {ask}를 추가할 수도 있습니다. ## 연습 2 저장된 프로그램으로 돌아가서 5단계에서 이야기 프로그램을 선택하세요. 이제 최소 세 줄의 좋은 결말과 나쁜 결말을 각각 써보세요!\n"
                example_code: "```\n{print} 'OH NO! The T-rex is closing in!'\nend = {ask} 'Do you want a happy or a sad ending?'\n{if} end {is} happy\n    {print} 'Just in time Richard jumps back into the time machine!'\n    {print} 'Michael types in the code and...'\n    {print} '💥ZAP!💥'\n    {print} 'They are back in their garage'\n{else}\n    {print} 'Michael yells COME ON RICHARD! RUN FASTER!'\n    {print} 'But Richard is too slow...'\n    {print} 'The T-rex closes in and eats him in one big bite!🦖'\n```\n"
                start_code: '# place your code here'
            10:
                story_text: "이 레벨에서 이야기에서 {for} 명령을 사용할 수 있다. 이렇게 하면 어린이 책 '갈색곰, 갈색곰, 무엇이 보이니'를 쉽게 프로그래밍할 수 있다.\n\n### Exercise\n\n모르는 사람은 <a href=\"https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf\"> the story</a>를 보고, 책에서처럼 인쇄되어 있는지 확인한다.\n"
                example_code: "```\nanimals = _ , _ , _ \n{print} 'Brown bear, Brown bear'\n{print} 'What do you see?'\n```\n"
                start_code: '# place your code here'
            12:
                story_text: "이 수준에서는 변수에 여러 단어를 저장하기 위해 따옴표가 필요할 것이다. ### 연습 이전 수준의 이야기를 찾으십시오. 이제 따옴표가 올바른 위치에 추가되었는지 확인하십시오."
                example_code: "```\nname = 'The Queen of England'\n{print} name ' was eating a piece of cake, when suddenly...'\n```\n"
                start_code: '# place your code here'
            13:
                story_text: "'{and}'와 '{or}' 명령어를 사용하면 자신의 이야기를 좀 더 다재다능하게 만들 수 있다. 두 가지 질문을 하고 답변의 조합에 응답할 수 있다. ### 연습문제 1 예제 코드를 보고 끝낸다. 그런 다음 '{and}' 또는 '{or}'와 함께 '{if}' 코드를 최소 2개 더 추가한다. ## 연습문제 2 이전 단계의 이야기를 찾아서 '{and}' 또는 '{or}' 중 하나를 추가한다.\n"
                example_code: "```\nsword = 'lost'\ngame = 'on'\n{print} 'Our hero is walking through the forest'\n{print} 'The path splits two ways'\n{for} i {in} {range} 0 {to} 2\n    {if} game {is} 'on'\n        path = {ask} 'Which path should she choose?'\n        {if} path {is} 'left' {and} sword {is} 'found'\n            {print} 'Our hero comes across a dragon!'\n            {print} 'Luckily our hero has a sword to defeat the beast!'\n            game = 'over'\n        {if} path {is} 'left' {and} sword {is} 'lost'\n            {print} 'Our hero finds a dragon, but she doesnt have any weapons!'\n            {print} 'Our hero is beaten by the dragon...'\n            {print} 'Try again'\n            game = 'over'\n        {if} path {is} 'right' {and} sword {is} 'found'\n            {print} 'You have already found the sword. There is nothing left here.'\n            {print} 'She walks back'\n        {if} path {is} 'right' {and} sword {is} 'lost'\n            {print} 'Our hero finds a sword'\n            {print} 'This could come in very handy'\n            sword = 'found'\n```\n"
                start_code: '# place your code here'
            18:
                start_code: '# Schrijf jouw code hier'
                story_text: "이야기를 하나 더 인쇄할 건데 이제 {print}가 있는 괄호를 써야 해요. ## 연습문제 1 최소 5개 문장으로 된 이야기를 만들어 보세요. 아직 'name'을 쓰지 않아도 돼요.\n"
                story_text_2: "### 연습문제 2 우리는 당신을 위해 '{input}'을 이미 준비했다. 먼저 당신의 이야기에 'name' 변수를 사용하라. 그런 다음 두 번째 '{ask}'를 추가하고 그 변수도 사용하라. 팁: 텍스트와 변수 사이의 '{print}'에 있는 쉼표를 기억하라!\n"
                example_code: "```\n{print}('Welcome to this story!')\n```\n"
                example_code_2: "```\nnaam = {input}(\"What's your name?\")\n{print}('Welcome to this story!')\n```\n"
        name: Story
        description: Story
        default_save_name: Story
    songs:
        levels:
            6:
                start_code: "{print} 'Baby shark'"
                story_text: "노래들은 종종 많은 반복을 포함합니다. 때때로 반복은 또한 세는 것에 기초합니다. 예를 들어, 잘 알려진 노래 '맥주병'에서. 여러분은 약간의 수학을 가지고 그 노래를 프로그래밍 할 수 있습니다. 팁: 큰 소리로 읽기 기능을 사용하여 헤디가 그 노래를 불러주도록 하세요! ### 운동 이제 여러분은 대사를 복사하여 여러분이 원하는 만큼 2번부터 7번까지 반복할 수 있습니다.\n"
                example_code: "```\nverse = 99\n{print} verse ' bottles of beer on the wall'\n{print} verse ' bottles of beer'\n{print} 'Take one down, pass it around'\nverse = verse - 1\n{print} verse ' bottles of beer on the wall'\n```\n\nYou can now repeat lines 2 to 9 as many times as you want by copying the lines.\n"
                story_text_2: "이 동요는 5마리의 작은 원숭이부터 1마리의 원숭이까지 카운트다운 합니다. 만약 여러분이 2-7번 줄을 복사해서 코드 아래에 붙이면, 여러분은 전체 노래를 부를 수 있습니다!\n"
                example_code_2: "```\nnumber = 6\nnumber = number - 1\nprint number ' little monkeys jumping on the bed'\nprint 'One fell off and bumped his head'\nprint 'Mama called the doctor and the doctor said'\nprint 'NO MORE MONKEYS JUMPING ON THE BED!'\nsleep\n```\n"
            7:
                start_code: "{print} 'Baby Shark'"
                story_text: "노래들은 종종 많은 반복을 포함합니다. 예를 들어, 아기 상어! 만약 여러분이 그것을 부르면, 여러분은 계속 같은 것을 부릅니다: 아기 상어 tutututudutudu <br> 아기 상어 tutututudu <br> 아기 상어 tutututudu <br> 아기 상어 tutututudu <## 운동 여러분은 '{repeat}'으로 노래를 인쇄할 수 있습니다. 빈칸을 바꿈으로써 코드를 완성합니까? **Extra** 아기 상어 이후에 여러분은 물론 다른 노래들도 프로그래밍할 수 있습니다. 반복되는 노래들이 많습니다! 한 곡 더 생각해서 인쇄할 수 있나요?\n"
                example_code: "```\n{repeat} _ _ {print} 'Baby Shark tututudutudu'\n{print} 'Baby Shark'\n```\n\nAfter Baby Shark you can of course also program other songs. There are many songs with repetition.\n"
            16:
                start_code: '# place your code here'
                story_text: "이 레벨에서는 올드맥도날드와 같은 노래를 훨씬 더 빠르게 프로그래밍 할 수 있습니다. 목록의 같은 장소에 동물을 단순히 배치함으로써 올바른 소리에 연결할 수 있습니다. 드렁큰 세일러도 이 레벨에서 빠르게 만들어집니다. 전체 노래에 8개의 대사만 있으면 됩니다, 확인해보세요!\n"
                example_code: "```\nanimals = ['pig', 'dog', 'cow']\nsounds = ['oink', 'woof', 'moo']\n{for} i {in} {range} 1 {to} 3\n    animal = animals[i]\n    sound = sounds[i]\n    {print} 'Old McDonald had a farm'\n    {print} 'E I E I O!'\n    {print} 'and on that farm he had a ' animal\n    {print} 'E I E I O!'\n    {print} 'with a ' sound sound ' here'\n    {print} 'and a ' sound sound ' there'\n    {print} 'here a ' sound\n    {print} 'there a ' sound\n    {print} 'everywhere a ' sound sound\n```\n\n```\nlines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']\n{for} line {in} lines\n    {for} i {in} {range} 1 {to} 3\n        {print} line\n    {print} 'early in the morning'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'way hay and up she rises'\n    {print} 'early in the morning'\n```\n"
            8:
                story_text: "이전 단계에서는 'Bottles of beer'라는 곡을 프로그래밍했지만 '{repeat}' 명령이 없으면 여러 번 가사를 복사해야 했다. 이 단계에서는 간단한 한 줄만 추가해도 99번 반복할 수 있다. ### 연습 빈칸에 올바른 명령을 추가하고 코드를 정확하게 입력한다.\n"
                example_code: "```\nverse = 99\n_ 99 {times}\n{print} verse ' bottles of beer on the wall'\n{print} verse ' bottles of beer'\n{print} 'Take one down, pass it around'\nverse = verse - 1\n{print} verse ' bottles of beer on the wall'\n```\n"
                start_code: '# place your code here'
            10:
                story_text: "{for}을(를) 사용하면 모든 상어를 포함한 전체 아기 상어 노래를 6줄로만 인쇄할 수 있다. ### 연습문제1 {for} 명령을 사용하여 아기 상어 코드를 더욱 짧게 만들 수 있습니까? 예제 코드를 완성합니다.\n"
                example_code: "```\nfamily = baby, mammy, daddy, grandma, grandpa\n_ _ _ _ \n  {print} _\n```\n"
                start_code: '# place your code here'
                example_code_2: "```\nmonkeys = 5, 4, 3, 2, 1\n```\n"
                story_text_2: "### 연습문제 2 침대 위로 뛰어오르는 다섯 개의 작은 돈. 기억이 안 나면 텍스트를 찾아보세요. **추가** 올드 맥도날드에 농장이 있었다는 노래를 인쇄하고 모든 동물들이 '{if}'를 사용하여 다른 소리를 내도록 하세요.\n"
            11:
                story_text: "이 단계에서는 {range}와 함께 {for}를 사용하여 다섯 마리의 원숭이처럼 숫자를 세는 노래를 만들 수 있습니다. ### 연습1 빈칸을 채우고 코드를 맞추세요! 노래 텍스트가 기억나지 않으면 직접 찾아보세요. ## 연습2 노래의 마지막 줄은 다른 것들과 다릅니다. 이 줄을 {for} 안에 인쇄하고 {if}를 사용하여 올바르게 동작합니다.\n"
                example_code: "```\n{for} i {in} {range} 5 {to} 1\n    {print} i ' little monkeys jumping on the bed'\n    {print} 'One fell off and bumped his head'\n    {print} 'Mama called the doctor and the doctor said'\n    {if} i {is} 1\n        {print} 'PUT THOSE MONKEYS RIGHT TO BED!'\n    {else}\n        {print} 'NO MORE MONKEYS JUMPING ON THE BED!'\n```\n"
                start_code: '# place your code here'
            12:
                story_text: "이 노래에서 우리는 '만약 당신이 행복하고 당신이 그것을 안다면, 손뼉을 쳐라'를 프로그래밍하는 것을 훨씬 더 쉽게 만들 수 있다. 우리는 모든 동작을 변수에 넣을 수 있기 때문에, 그것을 확인해보라: ## 운동 노래가 정확하게 재생되도록 각 줄에 적절한 들여쓰기 양을 더할 수 있는가? 팁: 모든 줄이 들여쓰기를 필요로 하는 것은 아니다\n"
                example_code: "```\nactions = 'clap your hands', 'stomp your feet', 'shout Hurray!'\n{for} action {in} actions\n    {for} i {in} {range} 1 {to} 2\n        {print} 'if youre happy and you know it'\n        {print} action\n    {print} 'if youre happy and you know it and you really want to show it'\n    {print} 'if youre happy and you know it'\n    {print} action\n```\n"
                start_code: '# place your code here'
            18:
                start_code: '# Schrijf jouw code hier'
                story_text: "레벨 16에서는 목록을 이용하여 노래를 만들었다. 그러나 이 프로그램들은 더 이상 이 레벨에서 제대로 작동하지 않는다. 레벨 17의 콜론과 레벨 18의 괄호는 여전히 추가해야 한다. ### 연습 1 드렁큰 선원 노래는 샘플 코드로 주어졌지만 아직 작동하지 않는다. 모든 것이 다시 작동하는지 확인할 수 있나요? 여러분을 돕기 위해 몇 가지 오류를 대신하여 삽입했다. ## 연습 2 이제 레벨 16의 올드 맥도널드 노래도 찾아보고 수정해 보세요.\n"
                example_code: "```\nlines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']\n{for} line {in} lines _\n    {for} i {in} {range} 1 {to} 3 _\n        {print} _ line _\n    {print} 'early in the morning'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'way hay and up she rises'\n    {print} 'early in the morning'\n```\n"
        name: Sing a song!
        description: Print a song
        default_save_name: Song
    turtle:
        levels:
            5:
                start_code: "{print} 'Drawing Figures'\nfigure {is} {ask} 'Do you want a square or a triangle?'\n{if} figure {is} triangle angle {is} 120 {else} angle {is} 90\n{turn} angle\n{forward} 25"
                story_text: "레벨 5에서는 '{if}'로 선택할 수 있다. 예를 들어 다른 형태의 도형들 사이에서 말이다.\n"
                example_code: "```\n{print} 'Drawing Figures'\nfigure {is} {ask} 'Do you want a square or a triangle?'\n{if} figure {is} triangle angle {is} 120\n{else} angle {is} 90\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n```\n"
                example_code_2: "```\ndirection {is} {ask} 'Do you want to go left, right, or straight ahead?'\nif direction is left turn _\nif direction is right turn _\nforward 100\n```\n"
                story_text_2: "### 연습 이 코드에 정확한 숫자를 입력하면 프로그램이 작동합니다. 이 작업을 마친 후에는 옵션을 뒤로 추가할 수 있습니다. **Extra** 왼쪽과 오른쪽을 사용하는 대신 프로그램을 북쪽, 동쪽, 남쪽, 서쪽으로 다시 만들어 보세요. 이렇게 하면 북동쪽과 남서쪽 등의 방향을 더 추가할 수 있습니다.\n"
            1:
                story_text: "여러분은 또한 헤디를 사용하여 그림을 그릴 수 있습니다. 회전과 선을 조합하여 사각형이나 계단을 만들 수 있습니다! {forward}을 사용하여 앞으로 선을 그립니다. 뒤의 숫자에 따라 거북이가 얼마나 멀리 걸을 것인지가 결정됩니다. {turn} {right}은 시계 방향으로 1/4회전 하고 {turn} {left}은 시계 반대 방향으로 돌립니다. 뒤로 가고 싶다면 음수일 때 {forward} 명령을 사용합니다. 따라서 예를 들어 {forward} -100 ### 연습 이것이 작은 계단의 시작입니다. 5단계로 만들 수 있나요?\n"
                example_code: "```\n{forward} 20\n{turn} {right}\n{forward} 20\n{turn} {left}\n{forward} 20\n```\n"
                start_code: "{forward} 50\n{turn} {left}"
            2:
                story_text: "이 수준에서 변수를 사용하여 거북이가 상호작용하도록 만들 수 있다. 예를 들어 플레이어에게 거북이가 몇 걸음을 걸어야 하는지 물어볼 수 있다.\n"
                example_code: "```\nanswer {is} {ask} How many steps should the turtle make?\n{forward} answer\n```\n"
                story_text_2: "또한, 레벨 1에서는 거북이가 왼쪽이나 오른쪽으로만 돌 수 있었습니다. 조금 지루하네요! 레벨 2에서는 거북이가 코를 모든 방향으로 향하게 할 수 있습니다. 4분의 1을 돌릴 때 90을 사용하세요. 우리는 이 정도라고 부릅니다. 만회전은 360도 입니다. ##운동 이 코드로 도형을 만들 수 있나요? 아마도 삼각형이나 원?\n"
                example_code_2: "```\n{print} Drawing figures\nangle {is} 90\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n```\n"
                start_code: "{print} Turtle race!\nhoek {is} 90\n{turn} hoek\n{forward} 25"
            3:
                story_text: "이 수준에서 그림 거북이와 함께 {at} {random}을 사용할 수 있다. 임의의 선택으로 거북이는 매번 다른 길을 걷게 된다. 목록에서 값을 선택하려면 '{at} {random}'을 사용한다. ### 연습 더 긴 임의의 길을 만들기 위해 줄 2와 3을 복사하여 붙여넣을 수 있는가?\n"
                example_code: "```\nangles {is} 10, 50, 90, 150, 250\n{turn} angles {at} {random}\n{forward} 25\n```\n"
                start_code: "angles {is} 10, 50, 90, 150, 250\n{turn} angles {at} {random}\n{forward} 25"
            4:
                story_text: "레벨 4에서는 '{print}' 와 '{ask}' 가 있는 따옴표를 사용해야 합니다. 그림을 그릴 때도 마찬가지입니다!\n"
                example_code: "```\n{print} 'Drawing figures'\nangle {is} 90\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n```\n"
                start_code: "{print} 'Drawing figures'\nangle {is} 90\n{turn} angle\n{forward} 25"
                example_code_2: "```\n{color} {white}\n{forward} -80\n{color} {green}\n{forward} 50\n{color} {yellow}\n{forward} 50\n{color} {red}\n{forward} 50\n```\n"
                story_text_2: "{color} 명령어를 사용하여 선의 색을 바꿀 수도 있다. 예제를 확인해보라. {color} {white} 명령어를 사용하여 보이지 않는 선을 만들 수도 있다. 그림을 그리기 전에 화면의 어느 곳에서나 거북이를 이동시킬 수 있다.\n"
            6:
                story_text: "이 수준에서 여러분은 다른 도형을 그리기 위해 계산을 사용할 수 있습니다. 여러분은 아마도 학교에서 원을 완전히 돌리면 360도라는 것을 배운 적이 있을 것입니다. 그렇지 않다면, 이제 여러분은 알게 된 것입니다! 이것이 여러분이 정사각형에 90도를 사용하는 이유입니다. 360을 4로 나눈 것은 90입니다. 이제 우리는 헤디와 함께 수학을 할 수 있으므로, 우리는 우리가 원하는 모든 도형을 그릴 수 있습니다!\n"
                example_code: "```\nangles = {ask} 'How many angles do you want?'\nangle = 360 / angles\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n```\n"
                start_code: "{print} 'Drawing figures'"
            8:
                story_text: "이제 우리는 여러 선을 반복할 수 있게 되었으므로 도형을 더 쉽게 만들 수 있습니다. 각도를 한 번만 설정한 다음 '{repeat}'에서 해당 변수를 사용하면 됩니다. ### 연습 1 예제 코드는 정사각형을 만듭니다. 코드를 변경하여 삼각형이나 육각형 같은 또 다른 도형을 만듭니다. 이를 위해서는 두 줄의 코드로 변경해야 합니다. 팁: 원 전체는 360도입니다. ## 연습 2 이제 최소 두 개의 다각형으로 구성된 도면을 만듭니다.\n"
                example_code: "```\nangle = 90\n{repeat} 10 {times}\n    {turn} angle\n    {forward} 50\n```\n"
                story_text_2: "**Extra** 다양한 도형을 그리는 프로그램을 개선할 수 있습니다. 코드를 완성하면 원하는 다각형을 그릴 수 있습니다!\n"
                example_code_2: "```\nangles = {ask} 'How many angles should I draw?'\nangle = 360 / angles\n{repeat} angle {times}\n    {turn} _\n    {forward} _\n```\n"
                start_code: angles = {ask} 'How many angles should I draw?'
            9:
                story_text: "이제 {repeat} 안에 {repeat}을(를) 사용할 수 있게 되었으므로 더 복잡한 도형을 만들 수 있습니다. ### 연습 1 이 코드는 세 개의 검은 삼각형을 만들고, 그것을 다섯 개의 분홍색 사각형으로 바꿉니다. **Extra** 최소 두 개의 다른 도형 유형으로 구성된 자신이 선택한 도형을 만듭니다.\n"
                example_code: "```\n{color} {black}\n{repeat} 3 {times}\n    {repeat} 3 {times}\n        {forward} 10\n        {turn} 120\n    {color} {white}\n    {forward} 50\n    {color} {black}\n```\n"

                start_code: '# place your code here'
        name: 거북이
        description: Make your own drawing
        default_save_name: 거북이
    dishes:
        levels:
            6:
                start_code: "{print} 'Who does the dishes?'"
                story_text: "얼마나 자주 설거지를 할까요? 공평한가요? 이 정도면 계산할 수 있어요.\n"
                example_code: "```\npeople = mom, dad, Emma, Sophie\nemma_washes = 0\ndishwasher = people {at} {random}\n{print} 'The dishwasher is' dishwasher\n{if} dishwasher {is} Emma emma_washes = emma_washes + 1\n{print} 'Emma will do the dishes this week' emma_washes 'times'\n```\n\nNow you can copy lines 3 to 5 a few times (e.g. 7 times for a whole week) to calculate for a whole week again.\nDo you make the code for the whole week?\n"
                story_text_2: "만일 당신이 극도로 운이 나쁘다면, 이전 프로그램은 당신을 일주일 내내 요리를 하도록 선택했을지도 모른다! 그것은 공정하지 않다! 공정한 시스템을 만들기 위해, 당신은 '{remove}' 명령을 사용하여 선택된 사람을 목록에서 제거할 수 있다. 이렇게 하면, 모든 사람이 차례가 있을 때까지 당신은 설거지를 다시 할 필요가 없다. 월요일과 화요일이 준비가 되었다! 남은 한 주를 추가할 수 있겠는가? 그리고... 당신은 목록이 비어있을 때의 해결책을 생각해 낼 수 있는가?\n"
                example_code_2: "```\npeople = mom, dad, Emma, Sophie\ndishwasher = people {at} {random}\n{print} 'Monday the dishes are done by: ' dishwasher\n{remove} dishwasher {from} people\ndishwasher = people {at} {random}\n{print} 'Tuesday the dishes are done by: ' dishwasher\n{remove} dishwasher {from} people\ndishwasher = people {at} {random}\n```\n"
            3:
                story_text: "여러분은 집에서 오늘 누가 설거지를 하거나 쓰레기통을 바꿔야 하는지에 대해 항상 의견이 일치하지 않나요? 그러면 여러분은 컴퓨터가 매우 공정하게 선택하도록 할 수 있습니다. 여러분은 이 수준에서 프로그램을 할 수 있습니다!\n"
                example_code: "```\npeople {is} mom, dad, Emma, Sophie\n{print} people {at} {random}\n```\n"
                story_text_2: "### 연습 여러분만의 식기세척기 프로그램을 만드세요. 먼저 가족 목록을 만드세요. 그런 다음 해야 할 일을 생각하고, 컴퓨터가 {at} {random} 명령으로 누가 그 일을 해야 하는지 결정하게 하세요. **Extra** 직접 설거지를 하고 싶지 않나요? {remove} {from} 명령으로 목록에서 여러분의 이름을 제거하여 프로그램을 해킹하세요.\n"
                start_code: '{print} Who does the dishes?'
            4:
                story_text: "따옴표를 사용하면 설거지 프로그램을 훨씬 더 잘 만들 수 있다. ### 연습 먼저 빈칸에 올바른 기호나 명령어를 입력하여 이 예제 프로그램이 작동하도록 한다. 이해했어? 좋아! 이제 이전 레벨에서 자신의 코드를 복사하고 올바른 자리에 따옴표를 추가하여 이 레벨에서 작동하도록 만든다.\n"
                example_code: "```\npeople {is} mom, dad, Emma, Sophie\n{print} _ the dishes are done by _\n{sleep}\n{print} people {at} _\n```\n"
                start_code: "{print} 'Who does the dishes?'"
            5:
                story_text: "{if}을(를) 사용하면 프로그램의 선택에 보다 재미를 느낄 수 있습니다. 컴퓨터가 내린 선택에 프로그램이 응답하도록 할 수 있습니다. ### 연습 자신의 차례가 되면 '너무 나빠', 아니면 '네!'라고 인쇄되도록 코드를 끝낼 수 있나요? 인용구를 잊지 마세요!\n"
                example_code: "```\npeople {is} mom, dad, Emma, Sophie\ndishwasher {is} people {at} {random}\n{if} dishwasher {is} Sophie {print} _ too bad I have to do the dishes _ {else} {print} 'luckily no dishes because' _ 'is already washing up'\n```\n"
                start_code: "{print} 'Who does the dishes?'"
            7:
                story_text: "{repeat}'을 사용하면 코드 조각들을 반복할 수 있습니다. 이것을 사용하여 누가 며칠 동안 설거지를 할 것인지 계산할 수 있습니다. ## 연습 일주일 동안 설거지를 할 사람을 결정하려면 '{repeat}' 명령을 사용합니다. 각 빈칸은 하나의 명령이나 숫자로 채워져야 합니다! **추가** 집안의 다른 일들도 생각해 볼 수 있나요? 코드를 조정해서 세 가지 집안일을 결정하도록 하세요. 어떤 일들에 관한 것인지 인쇄하는 것을 잊지 마세요!\n"
                example_code: "```\npeople = mom, dad, Emma, Sophie\n{repeat} _ _ {print} 'the dishwasher is' _\n```\n"
                start_code: "{print} 'Who does the dishes?'"
            10:
                story_text: "이 수준에서 여러분은 한 주 전체의 일정을 쉽게 짤 수 있습니다! ### 운동 진공청소기나 정리정돈과 같은 두 번째 안무를 추가하고, 그것 또한 한 주 동안 나누어 하도록 하세요. <br> **Extra** 프로그램은 공정하지 않습니다, 여러분은 한 주 내내 운이 없고 씻을 수 있습니다. 어떻게 프로그램을 더 공정하게 만들 수 있나요?\n"
                example_code: "```\ndays = Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday\nnames = mom, dad, Emma, Sophie\n{for} day {in} days\n    {print} names {at} {random} ' does the dishes on ' day\n```\n"
                start_code: '# place your code here'
        name: Dishes?
        description: Use the computer to see who does the dishes (Start at level 2)
        default_save_name: Dishes
    rock:
        levels:
            4:
                start_code: "{print} 'Welcome to your own rock scissors paper!'"
                story_text: "이 단계에서는 가위바위보를 더 프로그래밍할 수 있다. 하지만 텍스트를 추가하려면 여기에도 따옴표를 사용해야 한다. ### 연습 코드를 이전 단계에서 복사한 다음 {print} 명령이나 {ask} 명령 뒤에 따옴표를 사용하여 동작하게 만든다.\n"
            1:
                story_text: "레벨 1에서는 가위바위보 게임으로 시작할 수 있다. {ask}에서는 선택을 할 수 있고 {echo}에서는 선택을 반복할 수 있다.\n"
                example_code: "```\n{print} what do you choose?\n{ask} choose from rock, paper or scissors\n{echo} so your choice was:\n```\nInstead of using words, you could also use emojis of course: ✊✋✌\n"
                start_code: '{print} Welcome to your own rock scissors paper!

                    {ask} What will you choose?

                    '
                story_text_2: "### 운동 단어를 사용하는 대신 이모티콘을 사용할 수도 있습니다: ✊✋✌ 이모티콘을 사용하여 코드를 만들 수 있나요?\n"
                example_code_2: "```\n{print} what do you choose?\n{ask} choose from _\n{echo} so your choice was:\n```\n"
            2:
                example_code: "```\nchoice {is} _\n{print} I choose choice\n```\n"
                story_text: "이 레벨에서는 변수를 사용하여 연습하면 다음 레벨의 가위바위보 게임을 만들 수 있습니다. ### 연습 빈칸에 **변수**를 입력하여 코드를 완성합니다. 이 게임은 상호작용적이지는 않지만 걱정할 필요는 없습니다! 다음 탭에서는 '{ask}' 명령어로 변수를 사용하여 게임을 상호작용적으로 만드는 방법을 배울 것입니다!\n"
                start_code: '# place your code here'
            3:
                story_text: "{at} {random} 명령을 사용하여 컴퓨터가 가위, 바위, 보, 보를 고르도록 할 수 있습니다. ### 연습 '{at} {random} 명령을 사용하여 코드를 마무리합니다.\n"
                example_code: "```\nchoices {is} rock, paper, scissors\n{print} choices {at} {random}\n```\n"
                start_code: '{print} Welcome to your own rock scissors paper!'
                story_text_2: "**추가** 두 플레이어가 게임을 하도록 하세요. 먼저 두 플레이어에게 이름을 입력해달라고 요청하고 컴퓨터가 임의로 선택하도록 하세요.\n"
                example_code_2: "```\nchoices {is} rock, paper, scissors\n{print} player 1 chooses... choices {at} {random}\n{print} player 2 _\n```\n"
            5:
                story_text: "이 수준에서 우리는 동점인지 아닌지 판단할 수 있다. 이를 위해서는 새로운 {if} 코드가 필요하다. ## 연습 빈칸을 채워 코드를 완성한다. * 컴퓨터가 임의의 옵션을 선택하도록 한다 * 플레이어에게 무엇을 선택할 것인지 물어본다 * 4번과 5번 행에 정확한 변수를 입력한다 * 6번 행을 마무리하면 헤디가 동점인지 아닌지 확인할 수 있다.\n"
                example_code: "```\noptions {is} rock, paper, scissors\ncomputer_choice {is} _\nchoice {is} {ask} 'What do you choose?'\n{print} 'you chose ' _\n{print} 'computer chose ' _\n{if} _ {is} _ {print} 'tie!' {else} {print} 'no tie'\n```\n\nFill in the correct code on the blanks to see {if} it is a draw.\n"
                start_code: "{print} 'Welcome to your own rock scissors paper!'"
            9:
                example_code: "```\nchoices {is} rock, paper, scissors\nyour_choice {is} {ask} 'What do you choose?'\n{print} 'You choose ' your_choice\ncomputer_choice {is} choices {at} {random}\n{print} 'The computer chooses ' computer_choice\n{if} computer_choice {is} your_choice\n    {print} 'Tie'\n{if} computer_choice {is} rock\n    {if} your_choice {is} paper\n        {print} 'You win!'\n    {if} your_choice {is} scissors\n        {print} 'You lose!'\n# finish this code\n```\n"
                story_text: "이 레벨에서는 {if} 명령을 둥지를 틀어서 전체 가위바위보 게임을 프로그래밍할 수 있습니다. ### 연습 코드를 끝낼 수 있나요? 프로그램은 모든 조합에서 누가 이겼는지 알려주어야 합니다. **Extra** 한 게임 이상을 플레이하시겠습니까? 코드를 확장하여 여러 라운드를 플레이할 수 있습니다. {ask}를 사용하여 몇 라운드를 플레이할 것인지 물어볼 수도 있습니다.\n"
                start_code: '# place your code here'
            10:
                story_text: "### 운동 이전 레벨에서는 자주 자신만의 가위바위보 게임을 만들어 왔다. 코드를 완성하고 {for} 명령을 적절하게 사용하여 게임을 시작할 수 있는가?\n"
                example_code: "```\nchoices = rock, paper, scissors\nplayers = Marleen, Michael\n{for} player {in} players\n     {print} player ' chooses ' choices {at} {random}\n```\n"
                start_code: '# place your code here'
            13:
                story_text: "{and} 명령어를 사용하면 가위바위보 코드를 줄일 수 있습니다! 예제 코드를 확인해보세요. ### 연습 항상 승자가 결정되도록 코드를 마무리하세요. 항상 승자가 인쇄되어 있는지 확인하기 위해 코드를 몇 번 실행하세요.\n"
                example_code: "```\noptions = 'rock', 'paper', 'scissors'\nyour_choice = {ask} 'What do you choose?'\ncomputer_choice = options {at} {random}\n{print} 'You choose ' your_choice\n{print} 'The computer chooses ' computer_choice\n{if} computer_choice {is} your_choice\n    {print} 'Tie'\n{if} computer_choice {is} 'rock' {and} your_choice {is} 'paper'\n    {print} 'You win!'\n{if} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'\n    {print} 'The computer wins!'\n```\n"
                start_code: '# place your code here'
            15:
                story_text: "컴퓨터를 이길 때까지 게임을 해! 하지만 일단 예제 코드를 완성하고...\n"
                example_code: "```\nwon = 'no'\noptions = 'rock', 'paper', 'scissors'\n{while} won == 'no'\n    your_choice = {ask} 'What do you choose?'\n    computer_choice = options {at} {random}\n    {print} 'you chose ' your_choice\n    {print} 'the computer chose ' computer_choice\n    {if} computer_choice == your_choice\n        {print} 'Tie!'\n    {if} computer_choice == 'rock' {and} your_choice == 'scissors'\n        {print} 'You lose!'\n    {if} computer_choice == 'rock' {and} your_choice == 'paper'\n        {print} 'You win!'\n        won = 'yes'\n```\n"
                start_code: '# place your code here'
        name: 가위바위보
        description: 가위바위보
        default_save_name: Rock
    calculator:
        default_save_name: Calculator
        levels:
            6:
                story_text: "이제 수학을 할 수 있게 되었으니, 계산기를 직접 만들 수 있을 거야!\n"
                example_code: "```\ncorrect_answer = 11 * 27\nanswer = {ask} 'How much is 11 times 27?'\n{if} answer {is} correct_answer {print} 'good job!'\n{else} {print} 'Wrong! It was ' correct_answer\n```\n"
                story_text_2: "### 운동 위의 계산기가 여러분을 위해 정답을 계산해 줄 것이지만, 여러분은 또한 다음과 같이 여러분 자신의 수학 실력을 시험해 볼 수 있는 프로그램을 만들 수도 있습니다: 그것을 완성하기 위해 빈칸을 채우세요!\n"
                example_code_2: "```\ntables = 4, 5, 6, 8\nnumbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\ntable = tables {at} {random}\nnumber = numbers {at} {random}\ncorrect_answer = table * number\nanswer = {ask} 'how much is ' table ' times ' number '?'\n{if} answer {is} correct_answer {print} 'okay'\n{else} {print} 'mistake! it was ' correct_answer\n```\n"
                start_code: "{print} 'Welcome to this calculator!'"
                story_text_3: "\n    **Extra** 컴퓨터가 임의의 값을 사용하여 스스로 임의의 값을 계산하도록 할 수도 있다. 이것이 당신이 연습할 많은 표를 고르는 방법이며, 그로부터 당신은 항상 다른 값을 얻는다:\n"
            9:
                story_text: "레벨 6에서는 계산기를 만들었고, 이 레벨에서는 코드를 확장하여 여러 개의 질문을 하도록 할 수 있다. ### 연습 1 프로그램 작업에 필요한 라인 10을 끝낼 수 있는가? ## 연습 2 가 정답 또는 오답을 입력할 때 플레이어에게 피드백을 준다. 이를 위해서 '{else}' 를 사용하여 프로그램을 확장한다.\n"
                example_code: "```\nscore = 0\n{repeat} 10 {times}\n    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    number1 = numbers {at} {random}\n    number2 = numbers {at} {random}\n    correct_answer = number1 * number2\n    {print} 'What is ' number1 ' times ' number2 '?'\n    answer = {ask} 'Type your answer here...'\n    {print} 'Your answer is' answer\n    {if} _ {is} _\n        score = score + 1\n{print} 'Great job! Your score is... ' score ' out of 10!'\n```\n"
                start_code: "{print} 'Welcome to this calculator!'"
            10:
                story_text: "이 계산기 게임은 여러분이 곱셈표를 연습하는데 도움을 줍니다! ### 운동 여러분은 곱셈표를 10까지 연습할 수 있도록, 목록에 숫자를 더 추가할 수 있나요?\n"
                example_code: "```\nnumbers = 1, 2, 3\n{for} number1 {in} numbers\n    {for} number2 {in} numbers\n        answer = {ask} 'How much is ' number2 ' times ' number1 '?'\n        correct = number1 * number2\n        {if} answer {is} correct\n            {print} 'Great job!'\n        {else}\n            {print} 'Thats wrong. The right answer is ' correct\n```\n"
                start_code: '# place your code here'
            12:
                story_text: "이 레벨에서는 십진법 숫자에 적합한 계산기를 만들 수 있습니다. ### 연습량 1 빈칸을 채우면 계산기가 완성됩니다. 십진법 숫자는 쉼표가 아니라 마침표를 사용해야 하는 것을 기억하세요. ## 연습량 2 새로운 수학 연습 프로그램을 만들되, 이제 십진법 숫자를 사용하세요. 숫자 목록을 만들고, 두 개를 선택하거나 배수를 선택하여 플레이어가 답을 하도록 하세요. 그리고 당연히 정답을 확인해야 합니다! **추가** 생명을 추가하여 난이도를 높입니다: 플레이어는 오답으로 인해 생명을 잃고 세 번의 오답 후 게임은 끝납니다.\n"
                example_code: "```\nnumber1 = {ask} 'What is the first number?'\nnumber2 = {ask} 'What is the second number?'\nanswer = number1 + number2\n{print} number1 ' plus ' number2 ' is ' answer\n```\n"
                start_code: '# place your code here'
            14:
                story_text: "이 레벨에서 게임 '숫자 맞추기'를 프로그래밍할 수 있습니다\n"
                example_code: "```\n{print} 'Guess which number'\nnumbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nnumber = numbers {at} {random}\ngame = 'on'\n{for} i {in} {range} 1 {to} 10\n    {if} game == 'on'\n        guess = {ask} 'Which number do you think it is?'\n        {if} guess > number\n            {print} 'Lower!'\n        {if} guess < number\n            {print} 'Higher!'\n        {if} guess == number\n            {print} 'You win!'\n            game = 'over'\n```\n"
                start_code: '# place your code here'
            15:
                story_text: "이전 단계에서 배운 계산기 게임에 '{while}' 루프를 추가하면 된다. 이것은 플레이어가 틀린 답을 할 경우 다음 질문으로 넘어가지 않도록 해준다.\n"
                example_code: "```\nscore = 0\n{for} i {in} {range} 0 {to} 9\n    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    number1 = numbers {at} {random}\n    number2 = numbers {at} {random}\n    correct = number1 * number2\n    answer = 0\n    {while} answer != correct\n        {print} 'How much is ' number1 ' times ' number2 '?'\n        answer = {ask} 'Fill in your answer:'\n        {print} 'Your answer is ' answer\n    {print} 'Good job!'\n{print} 'You win!'\n```\n"
                start_code: '# place your code here'
            11:
                example_code: "```\nnumber = 10\n{for} i {in} {range} 1 to 10\n    {print} i * number\n```\n"
                story_text: "{for}을(를) 사용하면 곱셈 연습 프로그램의 표를 단순화할 수 있다. ### 연습문제 1 예제 코드를 개선하여 멋진 곱셈 표를 인쇄한다: <br> \"1 곱하기 10은 10이다\" \"2 곱하기 10은 20이다\" ## 연습문제 2 10단계 곱셈 코드로 돌아가서 {for}와 {range}를 사용하도록 수정한다.\n"
                start_code: '# place your code here'
            13:
                example_code: "```\nanswer1 = {ask} 'What is 10 times 7?'\nanswer2 = {ask} 'What is 6 times 7?'\n{if} _ _ _ _ _ _ _\n    {print} _\n```\n"
                story_text: "\n### 연습문제 1 연습문제를 좀 더 어렵게 만들어 보자. 이제 플레이어는 두 문제에 정확하게 답해야 한다. 빈칸을 채워야 프로그램이 완성된다. ## 연습문제 2 추가 때로는 계산에도 여러 개의 정답이 있다. 예를 들어 10을 5로 나누고 2로 나눌 수 있다. 따라서 '10을 나누는 숫자는 무엇인가?'라는 질문에는 2로, 5로 답할 수 있다. 정답이 여러 개인 계산을 요청하고 플레이어에게 답을 요구한 후 '{or}'를 사용하여 정답이 맞는지 판별한다. 프로그래밍 필드를 비우고 자신만의 해를 작성한다.\n"
                start_code: '# Schrijf jouw code hier'
        name: Calculator
        description: Create a calculator
    restaurant:
        levels:
            3:
                start_code: '# place your code here'
                story_text: "저녁으로 무엇을 먹고 싶은지 결정하는데 어려움을 겪고 있나요? 여러분은 헤디가 여러분을 위해 선택하도록 할 수 있어요! 간단히 여러분이 가장 좋아하는(또는 가장 싫어하는) 식사 목록을 추가하면, 헤디는 임의로 여러분의 저녁을 선택할 수 있어요. 또한 헤디가 여러분의 저녁 식사 가격을 선택하도록 함으로써, 여러분은 좀 더 재미를 느낄 수 있어요! 무엇을 얻을 수 있을까요?\n"
                example_code: "```\n{print} Welcome to Hedy's Random Restaurant!\n{print} The only restaurant that will randomly choose your meal and its price for you!\nstarters {is} salad, soup, carpaccio\nmains {is} pizza, brussels sprouts, spaghetti\ndesserts {is} brownies, ice cream, french cheeses\ndrinks {is} cola, beer, water\nprices {is} 1 dollar, 10 dollars, 100 dollars\n{print} You will start with: starters {at} {random}\n{print} Then we'll serve: mains {at} {random}\n{print} And as dessert: desserts {at} {random}\n{print} You will get a drinks {at} {random} to drink\n{print} That will be: prices {at} {random}\n{print} Thank you and enjoy your meal!\n```\n"
                story_text_2: "### 연습 이제 당신만의 방식으로 랜덤 레스토랑을 만들어 보세요. 시작품, 메인 요리, 디저트, 음료, 가격 등을 스스로 나열해 보세요. 그런 다음 {print} 명령과 {at} {random} 명령을 사용하여 오늘 밤 메뉴가 무엇인지 고객에게 알려줍니다.\n"
                example_code_2: "```\n{print} Mystery milkshake\nflavors {is} strawberry, chocolate, vanilla\nallergies {is} {ask} Are you allergic to any falvors?\n{remove} allergies {from} flavors\n{print} You get a flavors {at} {random} milkshake\n```\n"
            4:
                start_code: '# place your code here'
                story_text: "이 레벨에서는 '{print}' 또는 '{ask}' 명령을 사용할 때 따옴표를 사용해야 합니다. ### 연습 이 코드에 따옴표를 추가하면 작동합니다! 주의: 변수는 따옴표에 없어야 합니다. 그런 다음 '{clear}' 명령을 사용하여 출력 화면에 한 줄씩만 표시합니다. ### 연습 2 이전 레벨로 돌아가서 레스토랑 코드를 복사합니다. 올바른 자리에 따옴표를 추가하여 코드가 이 레벨에서 작동하도록 하고 '{clear}' 명령을 추가합니다.\n"
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\n{print} 'Today we are serving pizza or lasagna.'\nfood {is} {ask} 'What would you like to eat?'\n{print} 'Great choice! The ' food ' is my favorite!'\ntopping {is} {ask} 'Would you like meat or veggies on that?'\n{print} food ' with ' topping ' is on its way!'\ndrinks {is} {ask} 'What would you like to drink with that?'\n{print} 'Thank you for your order.'\n{print} 'Your ' food ' and ' drinks ' will be right there!'\n```\n"
            5:
                start_code: '# place your code here'
                story_text: "### 연습 예제 코드는 레스토랑의 메뉴 항목이 부족한 것을 프로그래밍하는 방법을 보여준다. 이전 수준에서 자신의 레스토랑 코드를 복사한다. 예제 코드가 했던 것처럼 레스토랑에 문제를 만들고 코드를 작성한다. 예를 들어, 메뉴 항목이 부족하거나, 신용카드를 받지 않거나, 아이스크림 기계가 고장날 수 있다. **추가** 문제를 프로그래밍하고 적절한 응답을 프로그래밍했습니까? 그런 다음 코드에 '{if}' 명령과 '{else}' 명령을 더 추가해 보십시오. 코드의 모든 {ask} 명령 뒤에 {if} 명령을 추가하여 가능한 한 대화형 코드를 만들어 보십시오!\n"
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\nspecial {is} {ask} 'Would you like to hear our specials today?'\n{if} special {is} yes {print} 'Todays special is chicken piri piri and rice.' {else} {print} 'No problem.'\nfood {is} {ask} 'What would you like to eat?'\n{print} 'One ' food ', coming right up!'\ndrink {is} {ask} 'What would you like to drink with that?'\n{if} drink {is} cola {print} 'Im sorry, we are out of cola!' {else} {print} 'Great choice!'\nanything {is} {ask} 'Would you like anything {else}?'\n{print} 'Let me repeat your order...'\n{print} 'One ' food\n{if} drink {is} cola {print} 'and...' {else} {print} 'One ' drink\n{if} anything {is} no {print} 'Thats it!' {else} {print} 'One ' anything\n{print} 'Thank you for your order and enjoy your meal!'\n```\n"
            7:
                start_code: '# place your code here'
                story_text: "이 레벨에서는 코드의 한 줄을 특정 시간 동안 반복하는 '{repeat}' 명령을 사용하는 방법을 배웠습니다. 레스토랑에서 이 명령을 사용하여 여러 사람이 먹고 싶은 음식을 '{질문}'할 수 있습니다. ### 운동 코드를 완성할 수 있나요? 헤디는 이 질문을 사람 수만큼 반복해야 합니다. 따라서 5명이 있으면 질문을 5번 해야 합니다. **추가** 음료나 소스 등과 같은 더 많은 질문으로 코드를 확장합니다.\n"
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\npeople = {ask} 'How many people are joining us today?'\n{repeat} people times food = {ask} 'What would you like to eat?'\n{print} 'Thanks for your order! Its coming right up!'\n```\n"
            9:
                start_code: '# place your code here'
                story_text: "이 수준에서 당신은 당신의 식당을 더 현실적이고 재미있게 만들기 위해 둥지를 사용할 수 있다! ### 연습 예제 코드에서 움푹 들어간 곳이 제거되었다. 코드가 제대로 작동하기 위해서는 각 줄에 얼마나 많은 움푹 들어간 곳이 필요한지 알아낼 수 있는가? 만약 고객이 피자를 주문한다면, 헤디는 고객이 원하는 소스가 무엇인지 물어보지 말아야 한다. **Extra** 레스토랑이 모든 소스를 비축하고 있는 것은 아니다. 사용 가능한 소스 목록을 작성하고 판매 여부를 주문할 때마다 답변을 준다. <br> **Extra** 피자에는 토핑이 있다. 고객에게 무엇을 원하는지 물어본다. <br> **Extra** 고객이 마실 것을 원하는가? 그들에게도 물어본다! <br>\n"
                example_code: "```\n{print} 'Welcome to Restaurant Chez Hedy!'\npeople = {ask} 'How many people will be joining us today?'\n{print} 'Great!'\nprice = 0\n{repeat} people {times}\n_ food = {ask} 'What would you like to order?'\n_ {print} food\n_ {if} food {is} fries\n_ price = price + 3\n_ sauce = {ask} 'What kind of sauce would you like with your fries?'\n_ {if} sauce {is} no\n_ {print} 'no sauce'\n_ {else}\n_ price = price + 1\n_ {print} 'with ' sauce\n_ {if} food {is} pizza\n_ price = price + 4\n{print} 'That will be ' price ' dollar'\n{print} 'Enjoy your meal!'\n```\n"
            1:
                story_text: "레벨 1에서는 가상 레스토랑을 직접 만들어 손님들의 주문을 받아볼 수 있다.\n"
                example_code: "```\n{print} Welcome to Hedy's restaurant 🍟\n{ask} What would you like to order?\n{echo} So you would like to order\n{print} Thanks you for your order!\n{print} It's on its way!\n```\n"
                story_text_2: "### 연습 노란색 단추를 클릭하여 예제 코드를 입력 화면에 복사합니다. 먼저 빈칸에 올바른 명령어를 입력하여 코드가 제대로 작동하도록 합니다. 그런 다음 레스토랑 프로그램에 최소한 4줄의 코드를 더 추가합니다. 고객에게 무엇을 마시고 싶은지 물어보고 현금이나 카드로 지불하고 싶은지 물어보세요. 마지막으로 고객에게 작별 인사를 할 수 있는 좋은 방법을 생각해보세요.\n"
                start_code: '# place your code here'
            2:
                story_text: "레벨 2에서는 변수를 사용하여 레스토랑을 확장할 수 있습니다. 레벨 1에서 헤디는 주문을 {echo} 한 번만 수행하고 마지막으로 주문한 것만 기억할 수 있습니다. 이제 변수를 사용하면 헤디는 음식과 토핑을 모두 기억할 수 있습니다!\n"
                example_code: "```\n{print} Welcome to Hedy's restaurant!\n{print} Today we're serving pizza or lasagna.\nfood {is} {ask} What would you like to eat?\n{print} Great choice! The food is my favorite!\ntopping {is} {ask} Would you like meat or veggies on that?\n{print} food with topping is on its way!\ndrinks {is} {ask} What would you like to drink with that?\n{print} Thank you for your order.\n{print} Your food and drinks will be right there!\n```\n"
                start_code: '# place your code here'
                story_text_2: "### 연습 자신의 레스토랑 코드를 아래의 입력 화면에 이전 레벨에서 이전 레벨로 복사한다. 이 레벨에서 배운 것처럼 '{ask}' 명령과 '{echo}' 명령을 바꾸고 변수를 사용하여 코드를 수정한다. 이제 코드가 다시 작동하므로 무언가를 더 추가해야 할 때이다. 예제 코드의 마지막 줄을 보라: 토핑이 있는 {print}개의 음식이 오고 있다!' 이 한 줄에서 2개의 변수가 주문의 요약을 만드는 데 사용되었다. 이제 고객이 주문한 음식과 음료에 대한 자신의 요약을 추가한다. **Extra** 이제 변수 사용법을 배웠으니 한 줄에서 원하는 만큼의 변수를 사용할 수 있다. 빨대가 있든 없든, 기내식, 현금, 카드 등의 변수를 코드에 더 추가할 수 있는가?\n"
            6:
                story_text: "이 수준에서 당신은 수학을 사용하여 고객이 주문한 총 가격을 계산할 수 있고, 이것은 당신의 가상 레스토랑을 더 현실적으로 만들 수 있다. 그러나 당신은 또한 당신의 가상 레스토랑에 더 많은 것을 추가할 수 있다. ### 운동 당신은 당신의 가상 레스토랑에 더 많은 것을 추가할 수 있다. 예를 들어, 당신은... - 얼마나 많은 사람들이 와서 가격에 그 정도를 곱하는지 물어봐 줄 수 있나요? - 다른 코스를 추가하나요? - 사람들이 (비밀) 쿠폰 코드를 입력하면 할인을 해준다고요? - 어린이 메뉴를 추가하나요? - 추가할 다른 재미있는 것들을 생각해보세요?\n"
                example_code: "You can make a simple restaurant code, like this:\n```\n{print} 'Welcome to Restaurant Chez Hedy'\n{print} 'Here is our menu:'\n{print} 'Our main courses are pizza, lasagne, or spaghetti'\nmain = {ask} 'Which main course would you like?'\nprice = 0\n{if} main {is} pizza price = 10\n{if} main {is} lasagne price = 12\n{if} main {is} spaghetti price = 8\n{print} 'You have ordered ' main\n{print} 'That will be ' price ' dollars, please'\n{print} 'Thank you, enjoy your meal!'\n```\n"
                start_code: '# place your code here'
            8:
                story_text: "이 수준에서 당신은 여러 줄의 코드를 반복함으로써 가상 레스토랑을 더 정교하게 만들 수 있다. 다음과 같이:\n"
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\npeople = {ask} 'How many people will be joining us today?'\n{print} 'Great!'\n{repeat} people {times}\n    food = {ask} 'What would you like to order?'\n    {print} food\n{print} 'Thank you for ordering!'\n{print} 'Enjoy your meal!'\n```\n"
                story_text_2: "### 연습 이 코드는 음료, 또는 여러 코스 또는 디저트를 제공하는 것과 같이 메뉴에 더 많은 항목으로 확장될 수 있습니다. 적어도 하나의 항목을 더 추가하세요. **추가** 원하는 만큼 항목을 더 추가하세요!\n"
                start_code: '# place your code here'
            10:
                story_text: "이 레벨에서는 다양한 코스의 주문을 쉽게 물어보는 방법을 배울 것이다. ## 연습문제 1 빈칸에 '{ask}'로 코드를 마무리하여 고객이 코스별로 먹고 싶은 음식을 묻게 한다.\n"
                example_code: "```\ncourses = appetizer, main course, dessert\n{for} course {in} courses\n    food = {ask} 'What would you like to eat as your ' course '?'\n    {print} food ' will be your ' course\n```\n"
                story_text_2: "### 운동 물론, 여러분은 또한 여러 명이 주문할 수도 있습니다! 코드가 제대로 작동하도록 각 줄 앞에 올바른 들여쓰기 양을 더할 수 있나요? 팁: 어떤 줄들은 들여쓰기가 전혀 필요하지 않습니다.\n"
                example_code_2: "```\ncourses = appetizer, main course, dessert\nnames = Timon, Onno\n{for} name {in} names\n    {for} course {in} courses\n        food = {ask} name ', what would you like to eat as your ' course '?'\n        {print} name ' orders ' food ' as their ' course\n```\n"
                start_code: courses = appetizer, main course, dessert
            11:
                story_text: "{range}와 함께 {for}를 사용하여 여러 고객의 주문을 순서대로 인쇄할 수 있습니다. ## 연습 식당 코드를 완성하면 여러 명의 주문을 요청할 수 있습니다. 매번 주문 번호를 인쇄합니다: '주문 1', '주문 2' 등. 어떻게 해야 할지 잘 모르시나요? 레벨 8 코드를 살짝 보세요. **Extra** 레벨 9에서는 식당도 가격을 사용했습니다. 여기에 추가할 수 있습니다!\n"
                example_code: "```\n{print} 'Welcome to Restaurant Hedy!'\npeople = {ask} 'For how many people would you like to order?'\n{print} 'So you want to order for ' people ' people.'\n{print} \"Let's go!\"\n```\n"
                start_code: '# place your code here'
            12:
                story_text: "이 단계부터 여러분은 메뉴를 더 현실적으로 만들기 위해 십진법을 사용할 수 있습니다. ### 운동 여러분은 친구들과 가족들에게 15% 할인을 해주는 코드를 생각해낼 수 있나요?\n"
                example_code: "```\nprice = 0\nfood = {ask} 'What would you like to order?'\ndrink = {ask} 'What would you like to drink?'\n{if} food {is} 'hamburger'\n    price = price + 6.50\n{if} food {is} 'pizza'\n    price = price + 5.75\n{if} drink {is} 'water'\n    price = price + 1.20\n{if} drink {is} 'soda'\n    price = price + 2.35\n{print} 'That will be ' price ' dollar, please'\n```\n"
                start_code: '# place your code here'
            13:
                story_text: "이 레벨에서는 코드를 더욱 확장하기 위한 새로운 명령어를 배울 것이다. ### 연습 1 프로그램의 논리적 위치에 '{and}'와 '{or}'를 배치한다. ## 연습 2 적어도 하나 이상의 '{and}'와 '{or}'를 사용하여 레스토랑을 확장한다. 예를 들어, 피자에만 적용되는 특별 할인 쿠폰을 만들거나, 고객에게 감자튀김과 팬케이크를 곁들인 무료 음료를 제공한다. 또는 완전히 다른 것도 물론이다!\n"
                example_code: "```\nprice = 10\nfood = {ask} 'What would you like to eat?'\ndrinks = {ask} 'What would you like to drink?'\n{if} food {is} 'sandwich' {and} drinks {is} 'juice'\n    {print} 'Thats our discount menu'\n    price = price - 3\n{print} 'That will be ' price ' dollars'\n```\n"
                start_code: '# place your code here'
            15:
                story_text: "'{while}'를 사용하면 고객이 주문이 완료될 때까지 주문을 계속 추가할 수 있습니다.\n"
                example_code: "```\n{print} 'Welcome at McHedy'\nmore = 'yes'\n{while} more == 'yes'\n    order = {ask} 'What would you like to order?'\n    {print} order\n    more = {ask} 'Would you like to order anything {else}?'\n{print} 'Thank you!'\n```\n"
                start_code: '# place your code here'
        name: Restaurant
        description: Create your own virtual restaurant
        default_save_name: Restaurant
    fortune:
        name: Fortune teller
        description: Let Hedy predict the future
        levels:
            1:
                start_code: '# place your code here'
                story_text: "카니발에 가서 점쟁이에게 당신의 미래를 점쳐 본 적이 있나요? 아니면 마법의 8구를 가지고 놀아본 적이 있나요? 그러면 그들이 당신의 미래를 정말 예측할 수 없다는 것을 알 수 있겠지만, 그래도 점쳐 보는 것은 즐겁습니다! 다음 단계에서는 당신만의 점술 기계를 만드는 방법을 배울 수 있습니다! 레벨 1에서는 헤디가 자신을 점쟁이라고 소개하고 선수들의 답을 '에코'하게 함으로써 쉽게 시작할 수 있습니다. 다음과 같이:\n"
                example_code: "```\n{print} Hello, I'm Hedy the fortune teller!\n{ask} Who are you?\n{print} Let me take a look in my crystal ball\n{print} I see... I see...\n{echo} Your name is\n```\n"
                story_text_2: "### 연습 예제 코드를 입력 화면에 복사하고 빈칸을 채워 코드가 작동하도록 하세요. **추가** 코드를 바꿔서 점쟁이가 여러분의 이름뿐만 아니라 여러분의 나이, 여러분이 가장 좋아하는 스포츠 팀, 혹은 여러분 자신에 관한 다른 것들도 예측하게 하세요.\n"
            3:
                story_text: "이전 수준에서 당신은 첫 번째 점을 치는 기계를 만들었지만, 헤디는 아무것도 예측하지 못했고 단지 '{echo}'만 예측할 수 있었다. 이 수준에서 당신은 변수와 {at} {random} 명령을 사용하여 헤디가 당신에게 맞는 답을 고르도록 할 수 있다. 예를 들어 이 코드를 확인해 보자:\n"
                story_text_2: "### 이제 운동을 해보세요. 헤디는 '네', '아니오' 또는 '다시 물어보기'와 같은 대답을 더 많이 해주실 수 있나요.\n"
                start_code: '# place your code here'
                example_code: "```\n{print} I’m Hedy the fortune teller!\nquestion {is} {ask} What do you want to know?\n{print} This is what you want to know: question\nanswers {is} yes, no, maybe\n{print} My crystal ball says...\n{sleep} 2\n{print} answers {at} {random}\n```\n"
            4:
                start_code: '# place your code here'
                story_text: "이 레벨에서는 새로운 기능이 없지만 따옴표를 사용하여 연습할 수 있다. 레벨 3 코드를 다시 만들고, 반드시 따옴표를 올바른 위치에 추가할 수 있다! 레벨 3에서는 '질문'이라는 단어를 변수의 이름과 인쇄할 수 있는 일반적인 단어로 사용할 수 없음을 유의하라. 레벨 4의 따옴표는 이것을 가능하게 한다! ### 연습 이 예제 코드에서 따옴표를 모두 제거했는데, 모든 올바른 위치에 추가할 수 있는가? ## 연습 2 이전 레벨로 돌아가서 점쟁이 코드를 복사한다. 올바른 자리에 따옴표를 추가함으로써 코드가 이 레벨에서 작동하도록 하라.\n"
                example_code: "```\n{print} 'Im Hedy the fortune teller!'\nquestion {is} {ask} 'What do you want to know?'\n{print} 'This is your question: ' question\nanswers {is} yes, no, maybe\n{print} 'My crystal ball says...'\n{sleep} 2\n{print} answers {at} {random}\n```\n"
            5:
                start_code: '# place your code here'
                story_text: "### 운동 예시 코드에서 여러분은 여러분이 자신에게 유리한 쪽으로 확률을 팁으로 줄 수 있는 점쟁이 프로그램을 만드는 방법을 볼 수 있습니다. 이 부정행위 프로그램은 항상 여러분에게 복권에 당첨될 것이지만 여러분의 친구들은 절대 당첨되지 않을 것이라고 알려줍니다. 이것을 이용하여 여러분만의 프로그램을 만들고 창의적이 되십시오! 예를 들어, 여러분은 다음과 같이 예측하는 코드를 만들 수 있습니다: * 여러분이 가장 좋아하는 스포츠 팀이 모든 경쟁자들을 이길 것입니다! * 여러분이 가장 좋아하는 영화는 영화의 밤을 위해 선택됩니다! * 여러분은 백설공주의 마법 거울처럼 모든 것 중에서 가장 공정합니다. 여러분의 상상력이 작용하게 하세요! 여러분의 프로그램은 적어도 10줄의 코드가 있어야 하고 적어도 하나의 {if}와 {else} 명령이 있어야 합니다.\n"
                example_code: "```\n{print} 'Im Hedy the fortune teller!'\n{print} 'I can predict {if} youll win the lottery tomorrow!'\nperson {is} {ask} 'Who are you?'\n{if} person {is} Hedy {print} 'You will definitely win!🤩' {else} {print} 'Bad luck! Someone {else} will win!😭'\n```\n"
            7:
                start_code: '# place your code here'
                story_text: "### 연습 당신이 좋아하는 사람이 당신을 다시 사랑하는지 아닌지를 말해주는 이 프로그램을 끝내라.\n"
                example_code: "```\n{print} 'Im Hedy the fortune teller!'\n{print} 'You can {ask} 3 questions!'\n{repeat} 3 {times} question = {ask} 'What do you want to know?'\nanswer = yes, no, maybe\n{repeat} 3 {times} {print} 'My crystal ball says... ' answer {at} {random}\n```\n"
            6:
                story_text: "이 수준에서 당신은 점쟁이로써 당신의 예측에 수학을 사용할 수 있다. 이것은 당신이 미래를 계산하기 위해 공식을 만들 수 있게 한다. 예를 들어 당신은 당신이 얼마나 부자가 될 것인지 혹은 당신이 커서 얼마나 많은 아이들을 가질 것인지를 계산할 수 있다. ### 운동 당신은 당신만의 점쟁이를 생각할 수 있는가?\n"
                example_code: "```\n{print} 'I am Hedy the fortune teller!'\n{print} 'I can predict how many kids youll get when you grow up!'\nage = {ask} 'How old are you?'\nsiblings = {ask} 'How many siblings do you have?'\nlength = {ask} 'How tall are you in centimetres?'\nkids = length / age\nkids = kids - siblings\n{print} 'You will get ...'\n{sleep}\n{print} kids ' kids!'\n```\n\nIf the previous example wasn't silly enough for you, take a look at this one!\n\n```\n{print} 'Im Hedy the silly fortune teller!'\n{print} 'I will predict how smart you are!'\nfootball = {ask} 'On a scale 1-10 how much do you love football?'\nbananas = {ask} 'How many bananas did you eat this week?'\nhygiene = {ask} 'How many times did you wash your hands today?'\nresult = bananas + hygiene\nresult = result * football\n{print} 'You are ' result ' percent smart.'\n```\n"
                start_code: '# place your code here'
            8:
                story_text: "다음 예제에서 여러분은 점쟁이에게 여러 질문을 하고 또한 그것들을 인쇄하게 할 수 있습니다. ### 연습 빈칸에 올바른 명령어를 입력할 수 있나요?\n"
                example_code: "```\n{print} 'I am Hedy the fortune teller!'\n{print} 'You can {ask} me 3 questions.'\nanswers = yes, no, maybe\n{repeat} 3 {times}\n   question = {ask} 'What do you want to know?'\n   {print} question\n   {sleep}\n   {print} 'My crystal ball says...' answers {at} {random}\n```\n"
                start_code: '# place your code here'
            10:
                story_text: "이 레벨에서는 게임 MASH(맨션, 아파트, 판잣집, 집)를 프로그래밍하는 방법을 배울 것이다. 이 게임에서는 모든 플레이어가 한 번에 미래가 어떻게 될지 예측할 수 있다. ### 이 레벨에서 학습한 새로운 명령어를 사용하여 빈칸에 연습 파일을 작성한다.\n"
                example_code: "```\nhouses = mansion, apartment, shack, house\nloves = nobody, a royal, their neighbour, their true love\npets = dog, cat, elephant\nnames = Jenna, Ryan, Jim\n{for} name {in} names\n    {print} name ' lives in a ' houses {at} {random}\n    {print} name ' will marry ' loves {at} {random}\n    {print} name ' will get a ' pets {at} {random} ' as their pet.'\n    {sleep}\n```\n"
                start_code: '# place your code here'
            12:
                story_text: "레벨 12부터는 각 항목의 앞뒤 목록에도 따옴표를 사용해야 합니다. ### 연습 목록에 두 개의 예측을 추가합니다"
                example_code: "```\nfortunes = 'you will be rich', 'you will fall in love', 'you will slip on a banana peel'\n{print} 'I will take a look in my crystall ball for your future.'\n{print} 'I see... I see...'\n{sleep}\n{print} fortunes {at} {random}\n```\n"
                start_code: '# place your code here'
        default_save_name: Fortune Teller
    haunted:
        levels:
            1:
                story_text: "이 모험에서 당신은 정확한 문을 선택하여 유령의 집에서 탈출해야 하는 게임을 만들기 위해 노력하고 있다. 만약 당신이 오른쪽 문을 선택한다면 당신은 살아남겠지만, 끔찍한 괴물이 아니라면... 레벨 1에서는 무서운 이야기를 지어내는 것으로 유령의 집 게임을 시작하고 플레이어에게 유령의 집에서 어떤 괴물을 보게 될지 물어본다.\n"
                example_code: "```\n{print} How did I get here?\n{print} I remember my friend telling me to go into the old mansion...\n{print} and suddenly everything went black.\n{print} But how did I end up on the floor...?\n{print} My head hurts like Ive been hit by a baseball bat!\n{print} What's that sound?\n{print} Oh no! I feel like Im not alone in this house!\n{print} I need to get out of here!\n{print} There are 3 doors in front of me..\n{ask} Which door should i pick?\n{echo} I choose door\n{print} ...?\n```\n"
                story_text_2: "### 연습 노란색 버튼을 클릭하여 예시 코드를 입력 화면에 복사한다. 이제 최소 5줄의 코드를 추가함으로써 이야기를 마무리한다. 코드의 각 줄은 '{print}' 명령으로 시작하는 것을 기억하라.\n"
                start_code: '{print} How did I get here?'
            2:
                story_text: "이 귀신이 나오는 집에서는 이모지로 몬스터를 고를 수 있습니다. 물론 단어도 사용할 수 있습니다.\n"
                example_code: "```\nmonster_1 {is} 👻\nmonster_2 {is} 🤡\nmonster_3 {is} 👶\n{print} You enter the haunted house.\n{print} Suddenly you see a monster_1\n{print} You run into the other room, but a monster_2 is waiting there for you!\n{print} Oh no! Quickly get to the kitchen.\n{print} But as you enter monster_3 attacks you!\n```\n"
                start_code: monster1 {is} _
                example_code_2: "```\nmonster_1 {is} _\nmonster_2 {is} _\nmonster_3 {is} _\n{print} You enter the haunted house.\n{print} Suddenly you see a monster_1\n{print} You run into the other room, but a monster_2 is waiting there for you!\n{print} Oh no! Quickly get to the kitchen.\n{print} But as you enter monster_3 attacks you!\n```\n"
                story_text_2: "### 연습 위의 예제에서 몬스터들은 미리 결정되어 있다. 따라서 코드를 실행할 때마다 출력은 동일합니다. {ask} 명령어를 추가하여 유령의 집을 대화식으로 만들고 플레이어들이 마주치는 몬스터를 선택하도록 할 수 있나요?\n"
            3:
                start_code: '# place your code here'
                story_text: "이전 레벨에서 당신은 당신의 귀신의 집 게임에 대해 소개를 했지만, 당신이 알아차렸을 수 있듯이 그 이야기는 항상 끔찍한 결말을 가질 것이다. 이 레벨에서 당신은 게임의 결과를 바꿈으로써 당신의 이야기를 더 상호적으로 만들 수 있다; 때로는 당신은 먹힐 것이고, 때로는 당신은 탈출할 것이다! 헤디가 무작위로 결정하도록 하라! ## 연습 예제 코드를 복사하고 빈칸을 채워야 작동할 수 있다! **추가** 이 이야기는 꽤 간단하다, 아마도 당신은 더 흥미로운 이야기를 추가함으로써 그것을 조금 놀라게 할 수 있다. 또한 당신은 지금 매우 제한된 결과를 가지고 있고, 문 뒤에 무엇이 있는지에 대한 선택의 세 가지 밖에 없다. 아마도 당신은 목록에 추가할 더 많은 괴물들을 생각할 수 있을 것이다!\n"
                example_code: "```\n_ Escape from the haunted house!\n_ There are 3 doors in front of you...\n_ _ _ Which door do you choose?\n_ You picked door ... choice\nmonsters _ a zombie, a vampire, NOTHING YOUVE ESCAPED\n_ You see...\n{sleep}\n_ _ _ _\n```\n"
            4:
                start_code: '# place your code here'
                story_text: "이 레벨에서 여러분은 게임에서 따옴표를 사용하는 방법을 배웁니다. ### 운동 여러분은 여러분의 유령의 집 레벨 4를 증명할 수 있나요? ### 운동 2 이전 레벨로 돌아가서 여러분의 유령의 집 코드를 복사하세요. 알맞은 자리에 따옴표를 추가함으로써 코드가 이 레벨에서 작동하도록 하세요.\n"
                example_code: "```\n{print} _Escape from the haunted house!_\n{print} _There are 3 doors in front of you..._\nchoice {is} {ask} _Which door do you choose?_\n{print} _You picked door ..._ choice\nmonsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED\n{print} _You see..._\n{sleep}\n{print} monsters {at} {random}\n ```\n"
            5:
                start_code: '# place your code here'
                story_text: "이 수준까지 귀신의 집 게임은 항상 플레이어에게 문을 선택하도록 요구했지만, 여러분이 알아차렸을 수도 있듯이, 그들은 실제로 정확하게 대답할 필요가 없었다. 플레이어가 완전히 무작위로 대답을 입력했다면, 게임은 여전히 작동하고 플레이어는 (문을 선택하지 않았음에도 불구하고) 이길 수도 있다. 이 수준에서는 헤디가 무작위로 선택한 것과 같은 문을 선택해야만 게임에서 이길 수 있다. ### 연습 코드를 완성하기 위해 누락된 4개의 단어를 찾을 수 있는가?\n"
                example_code: "```\n{print} 'Escape from the haunted house!'\n{print} 'There are 3 doors in front of you...'\ndoors {is} 1, 2, 3\nmonsters {is} werewolf, mummy, vampire, zombie\nchosen_door {is} {ask} 'Which door do you choose?'\n{print} 'You chose door...' chosen_door\n{sleep}\ncorrect_door {is} doors {at} {random}\n{if} chosen_door {is} correct_door {print} 'Great! Youve escaped!'\n{else} {print} 'Oh no! You are being eaten by a...' monsters {at} {random}\n```\n"
            9:
                story_text: "이 레벨에서 여러분은 둥지를 사용할 수 있고, 이것은 여러분이 유령의 집을 더욱 상호작용적으로 만들 수 있게 해줍니다. ##운동 이제 게임에서 이기는 것은 매우 어려운데, 여러분은 게임에서 이기기 쉽게 만들 수 있나요? 코드를 바꿔서 올바른 문 하나와 잘못된 문 두 개 대신 잘못된 문 하나와 올바른 문 두 개만 갖도록 하세요. 팁: 이것은 변수 correct_door를 wrong_door로 바꾸고, {if}와 {else} 코드를 바꾸는 것을 의미합니다. 그리고 물론 여러분은 이야기를 바꿔서 여러분만의 것으로 만들 수도 있습니다. 괴물들을 바꾸거나 선물을 받는 행복한 게임 쇼로 만들어 보세요!\n"
                example_code: "```\n{print} 'Escape from the Haunted House!'\nplayer = alive\ndoors = 1, 2, 3\nmonsters = zombie, vampire, giant spider\n{repeat} 3 {times}\n    {if} player {is} alive\n        correct_door {is} doors {at} {random}\n        {print} 'There are 3 doors in front of you...'\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} chosen_door {is} correct_door\n            {print} 'No monsters here!'\n        {else}\n            {print} 'You are eaten by a ' monsters {at} {random}\n            player = dead\n    {else}\n        {print} 'GAME OVER'\n{if} player {is} alive\n    {print} 'Great! You survived!'\n```\n"
                start_code: "{print} 'Escape from the haunted house!'"
            11:
                story_text: "이 레벨에서는 {for} 명령을 변경하여 플레이어에게 위치를 알 수 있습니다. ### 연습 1 플레이어가 자신이 어느 방에 있는지 알 수 있도록 프로그램을 마칩니다. ## 연습 2 다음 단계를 수행하여 프로그램을 모험으로 만듭니다. 1. 선택 목록(예: 싸움 또는 도피)을 작성합니다. 2. 플레이어가 '{ask}' 옵션을 선택할 수 있는지 확인하십시오. 정답이 맞습니까? 그러면 다음 몬스터로 이동할 수 있습니다. 오답을 주는 것일까요? 플레이어에게 '{print}'로 알려줍니다. **추가** 잘못된 선택을 하면 몬스터가 여전히 표시됩니다! 어떻게 이를 변경할 수 있나요?\n"
                example_code: "```\n{print} 'Escape from the Haunted House!'\nplayer {is} alive\ndoors = 1, 2, 3\nmonsters = zombie, vampire, giant spider\n{for} i {in} {range} 1 {to} 3\n    {if} player {is} alive\n        correct_door = doors {at} {random}\n        {print} 'Room ' i\n        {print} 'There are 3 doors in front of you...'\n        chosendoor = {ask} 'Which door do you choose?'\n        {if} chosendoor {is} correct_door\n            {print} 'No monsters here!'\n        {else}\n            {print} 'You are eaten by a ' monsters {at} {random}\n            player = dead\n    {else}\n        {print} 'GAME OVER'\n{if} player {is} alive\n    {print} 'Great! You survived!'\n```\n"
                start_code: "{print} 'Escape from the haunted house!'"
            14:
                story_text: "이 단계에서는 <<>와 <> 기호를 사용하여 게임에 대한 삶을 소개할 수 있습니다.\n"
                example_code: "```\n{print} 'Escape from the haunted house'\nlives = 3\ndoors = 1, 2, 3\nmonsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'\n{for} i {in} {range} 1 {to} 10\n    {if} lives > 0\n        good_door = doors {at} {random}\n        monster = monsters {at} {random}\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} good_door == chosen_door\n            {print} 'You have chosen the correct door'\n        {else}\n            {print} 'You see...' monster\n            {if} monster == 'a sleeping 3 headed dog'\n                {print} 'Pffieuw.... Its asleep'\n            {else}\n                {print} 'You lose one life'\n                lives = lives -1\n    {else}\n        {print} 'GAME OVER'\n```\n"
                start_code: '# place your code here'
            16:
                story_text: "이 유령의 집 게임은 이 레벨에서 사용할 수 있는 목록 사이의 연결을 사용합니다. 예를 들어, 좀비에 속하는 모든 속성이 모든 목록에서 1위, 마녀가 2위, 뱀파이어가 3위입니다. 코드를 확인하세요!\n"
                example_code: "```\nnumbers = [1, 2, 3]\ni = numbers[{random}]\nhint = ['growling', 'a cackling laugh', 'fluttering batwings']\nmonsters = ['zombie', 'witch', 'vampire']\nbad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']\ngood_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']\nweapons = ['ham', 'lighter', 'garlic']\n{print} 'You are standing in front of an old mansion'\n{print} 'Something is not right here'\n{print} 'You hear ' hint[i]\n{print} 'You are going to explore it'\n{print} 'You enter the kitchen and see a lighter, a raw ham and a garlic.'\nyour_weapon = {ask} 'What do you bring with you?'\n{print} 'With your ' your_weapon ' you enter the living room'\n{print} 'There you find a ' monsters[i]\nneeded_weapon = weapons[i]\n{if} your_weapon == needed_weapon\n    {print} 'You use your ' your_weapon\n    {print} good_fate[i]\n    {print} 'YOU WIN!'\n{else}\n    {print} 'You have chosen the wrong weapon...'\n    {print} bad_fate[i]\n    {print} 'GAME OVER'\n```\n"
                start_code: '# place your code here'
        name: Haunted House
        description: Escape from the haunted house
        default_save_name: Haunted House
    piggybank:
        levels:
            12:
                start_code: '# place your code here'
                story_text: "이 모험에서 여러분은 디지털 돼지 저금통을 만드는 법을 배웁니다. ### 연습 여러분이 얼마나 많은 돈을 가지고 있는지 그리고 여러분이 원하는 것을 사기 위해 얼마나 오랫동안 모아야 하는지를 계산하기 위한 코드를 마칩니다. **추가** 아마도 여러분은 이미 약간의 돈을 모았을 수도 있습니다? 여러분이 모아야 할 돈에서 그것을 빼세요.\n"
                example_code: "```\n{print} 'The digital piggy bank'\nwish = {ask} 'What would you like to buy?'\nprice = {ask} 'How much does that cost?'\nsaved = {ask} 'How much money have you saved already?'\nallowance = {ask} 'How much pocket money do you get per week?'\nto_save = price - saved\nweeks = to_save / allowance\n{print} 'You can buy a ' wish ' in ' weeks ' weeks.'\n```\n"
            14:
                story_text: "이 정도면 헤디에게 돈을 충분히 모았는지 말해줄 수 있을 거야!\n"
                example_code: "```\nmoney = {ask} 'How much money have you saved?'\nwish = {ask} 'How much money do you need?'\nallowance = {ask} 'How much pocket money do you get each week?'\nto_save = wish - money\nweeks = to_save / allowance\n{if} wish > money\n    {print} 'You need to save up some more!'\n    {print} 'Youll need ' weeks ' more weeks.'\n{else}\n    {print} 'Great! You have enough'\n    {print} 'Lets go shopping!'\n```\n"
                start_code: '# place your code here'
        name: Piggy Bank
        description: Count your pocketmoney!
        default_save_name: Piggy Bank
    quizmaster:
        levels:
            14:
                start_code: '# place your code here'
                story_text: "이 모험에서 여러분은 여러분만의 퀴즈를 만들 수 있습니다! 빈칸을 채우고, 질문을 더 추가하고, 여러분만의 퀴즈를 즐기세요! 여러분은 여러분이 좋아하는 어떤 것이든 - 여러분의 취미, 여러분이 가장 좋아하는 동물, 여러분이 가장 좋아하는 책, 혹은 어떤 것이든 - 에 대해 퀴즈를 만들 수 있습니다!\n"
                example_code: "```\n{print} 'Make your own quiz'\npoints_a = 0\npoints_b = 0\n{print} 'Question'\n{print} 'Answer option A'\n{print} 'Answer option B'\nanswer = {ask} 'Which answer?'\n{if} answer == 'A'\n    points_a = points_a + 1\n{if} answer == 'B'\n    points_b = points_b + 1\n{print} 'End of the quiz!'\n{print} 'Lets see the results!'\n{if} points_a > points_b\n    {print} 'You belong to the A club'\n{if} points_b > points_a\n    {print} 'You belong to the B club'\n```\n"
        name: Quizmaster
        description: Make your own quiz!
        default_save_name: Quizmaster
    language:
        name: Language
        description: Practice words in a foreign language
        default_save_name: Language
        levels:
            5:
                story_text: "새로운 언어의 어휘를 연습할 수 있는 자신만의 프로그램을 만드십시오. ### 연습 플레이어가 학습할 수 있는 단어를 최소 3개 더 추가하여 코드를 길게 만듭니다. **추가** 물론, 프랑스어가 아닌 다른 언어를 사용하도록 선택할 수 있습니다. 배우고 싶은 모든 언어의 코드로 변경할 수 있습니다.\n"
                example_code: "```\n{print} 'Learn French!'\ncat {is} {ask} '🐱'\n{if} cat {is} chat {print} 'Terrific!'\n{else} {print} 'No, cat is chat'\nfrog {is} {ask} '🐸'\n{if} frog {is} grenouille {print} 'Super!'\n{else} {print} 'No, frog is grenouille'\n```\n"
                start_code: '# place your code here'
            16:
                story_text: "새로운 언어로 당신의 어휘를 연습할 수 있는 당신만의 프로그램을 만드세요.\n"
                example_code: "```\nfrench_words = ['bonjour', 'ordinateur', 'pomme de terre']\ntranslation = ['hello', 'computer', 'potato']\nscore = 0\n{for} i {in} {range} 1 {to} 3\n    answer = {ask} 'What does ' french_words[i] ' mean?'\n    correct = translation[i]\n    {if} answer == correct\n        {print} 'Correct!'\n        score = score + 1\n    {else}\n        {print} 'Wrong, ' french_words[i] ' means ' translation[i]\n{print} 'You gave ' score ' correct answers.'\n```\n"
                start_code: '# place your code here'
    blackjack:
        default_save_name: Blackjack
        levels:
            17:
                start_code: '# place your code here'
                story_text: "블랙잭은 여러분이 가능한 한 21점에 근접해야 하는 간단한 카드 게임입니다. 여러분은 두 장의 카드를 얻습니다. 각각의 카드는 숫자만큼 가치가 있고, 페이스 카드(잭, 퀸, 킹)는 10점의 가치가 있습니다. 에이스는 1점 또는 11점의 가치가 있습니다 (여러분이 선택할 수 있습니다). 상대방인 딜러도 두 장의 카드를 받습니다. 원한다면, 다른 카드를 얻을 수 있고, 그 카드의 포인트는 여러분의 총계에 더해집니다. 딜러는 또한 다른 카드를 가져갈 것을 선택할 수 있습니다. 하지만 21점 이상을 받지 않도록 조심하세요, 왜냐하면 만약 여러분이 카드를 얻는다면, 여러분은 지니까요! 21점에 가장 근접한 선수가, 그것을 검토하지 않고, 승리합니다! 재미있게 놀아요!\n"
                example_code: "```\n{print} 'BLACKJACK'\ncards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen','King', 'Ace']\npoints = 0\ndealer_points = 0\ncard_1 = cards[{random}]\ncard_2 = cards[{random}]\ncard_3 = cards [{random}]\ndealer_card_1 = cards[{random}]\ndealer_card_2 = cards[{random}]\ndealer_card_3 = cards[{random}]\n# Points for card 1\n{if} card_1 == 'Jack' {or} card_1 == 'Queen' {or} card_1 == 'King':\n    points = points + 10\n{elif} card_1 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_1\n# Points for card 2\n{if} card_2 == 'Jack' {or} card_2 == 'Queen' {or} card_2 == 'King':\n    points = points + 10\n{elif} card_2 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_2\n# Points for dealer card 1\n{if} dealer_card_1 == 'Jack' {or} dealer_card_1 == 'Queen' {or} dealer_card_1 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_1 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_1\n# Points for dealer card 2\n{if} dealer_card_2 == 'Jack' {or} dealer_card_2 == 'Queen' {or} dealer_card_2 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_2 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_2\n# Two Aces\n{if} card_1 == 'Ace' {and} card_2 == 'Ace':\n    points = 12\n{if} dealer_card_1 == 'Ace' {and} dealer_card_2 == 'Ace':\n    dealer_points = 12\n# Scoreboard\n{print} 'You have a ' card_1 ' and a ' card_2 ' (' points ' points)'\n{print} 'The dealer has a ' dealer_card_1 ' and a ' dealer_card_2 ' (' dealer_points ' points)'\n# Extra card for the player\nhit = {ask} 'Do you want an extra card?'\n{if} hit == 'yes':\n    {if} card_3 == 'Jack' {or} card_3 == 'Queen' {or} card_3 == 'King':\n        points = points + 10\n    {elif} card_3 == 'Ace':\n        {if} points > 11:\n            points = points + 11\n        {else}:\n            points = points + 1\n    {else}:\n        points = points + card_3\n    print 'You get an extra ' card_3 ' (' points ' points)'\n{else}:\n    print 'No extra cards'\n# Winner\n{if} points > 21 {or} dealer_points > points {or} dealer_points == 21:\n    {print} 'You lose'\n{elif} dealer_points < 17:\n    {print} 'The dealer takes an extra card. It is a... ' dealer_card_3\n    {if} dealer_card_3 == 'Jack' {or} dealer_card_3 == 'Queen' {or} dealer_card_3 == 'King':\n        dealer_points = dealer_points + 10\n    {elif} dealer_card_3 == 'Ace':\n        {if} dealer_points < 11:\n            dealer_points = dealer_points + 11\n        {else}:\n            dealer_points = dealer_points + 1\n    {else}:\n        dealer_points = dealer_points + dealer_card_3\n    {print} 'The dealer has ' dealer_points ' points now'\n    {if} dealer_points < 21 {and} dealer_points > points:\n        {print} 'You lose'\n    {else}:\n        {print} 'You win'\n{elif} points > dealer_points {and} points < 21:\n    {print} 'You win!'\n```\n"
        name: Blackjack
        description: Try to get as close to 21 as you can
    parrot:
        name: Parrot
        description: Create your own online pet parrot that will copy you!
        default_save_name: Parrot
        levels:
            1:
                story_text: "당신을 따라 할 당신만의 온라인 애완 앵무새를 만들어 보세요!\n"
                example_code: "```\n{print} Im Hedy the parrot\n{ask} whats your name?\n{echo}\n{echo}\n```\n"
                start_code: '{print} Im Hedy the parrot

                    {ask} What is your name?

                    {echo}

                    {echo}

                    '
                story_text_2: "### 연습 노란색 단추를 클릭하여 예제 코드를 입력 화면에 복사합니다. 앵무새가 다른 질문을 하도록 하세요. 예제의 빈칸을 채우세요! **Extra** 앵무새가 여러 개의 질문을 하도록 할 수도 있습니다. 자신의 코드 아래에 몇 줄의 코드를 더 입력하세요.\n"
                example_code_2: "```\n{print} Im Hedy the parrot\n{ask} _\n{echo}\n{echo}\n"
            2:
                story_text: "이전 수준에서 당신은 당신 다음에 반복되는 앵무새를 만들었다. 이 수준에서는 변수와 {ask} 명령을 사용하여 앵무새를 상호작용적으로 만들 것이다. 또한 우리는 어떤 말이 나온 후에 {sleep} 명령을 추가함으로써 앵무새를 더 살아있는 사람처럼 만들 것이다.\n"
                example_code: "```\n{print} Im Hedy the parrot\nname {is} {ask} whats your name?\n{print} name\n{sleep}\n{print} squawk\n{sleep}\n{print} name\n```\n"
                start_code: '{print} Im Hedy the parrot!'
                story_text_2: "### 연습 먼저, '{is}'와 '{ask}' 명령으로 2번 행을 마칩니다. 그런 다음 4번 행과 6번 행에 '{sleep}' 명령을 입력하여 앵무새가 잠시 동안 조용히 있을 수 있도록 합니다. **Extra** 코드 줄을 더 추가하여 앵무새가 자신의 이름보다 더 많은 것을 요구하도록 만들 수 있나요?\n"
            3:
                story_text: "앵무새에게 '{add}'로 새 단어를 가르쳐 줍니다. ### 연습 코드를 작동시키기 위해 '{add} {to}' 명령을 추가할 수 있나요?\n"
                example_code: "```\nwords {is} squawk, Hedy\n{print} Train your parrot!\nnew_word {is} {ask} Which word do you want to teach them?\n{add} new_word {to_list} words\n{print} 🧒 Say new_word , Hedy!\n{print} 🦜 words {at} {random}\n```\n"
                start_code: '# place your code here'
            5:
                story_text: "앵무새가 정확한 단어를 말하면 보상을 해주세요! ## 연습 부족한 4개의 명령어를 입력하여 코드를 마무리합니다.\n"
                example_code: "```\nwords {is} squawk, Hedy\n{print} 'Train your parrot!'\nnew_word {is} {ask} 'Which word do you want to teach them?'\n{add} new_word {to_list} words\nsaid_word {is} words {at} {random}\n{print} '🧒 Say ' new_word ', Hedy!'\n{print} '🦜 ' said_word\n_ said_word {is} new_word _ '🧒 Great job, Hedy! 🍪'\n_ _ '🧒 No, Hedy! Say ' new_word\n```\n"
                start_code: '# place your code here'
            4:
                story_text: "이 수준에서는 '{ask}'와 '{print}' 명령어가 포함된 따옴표를 사용해야 한다. ### 연습 빈칸에 따옴표를 입력하여 코드를 완성한다.\n"
                start_code: '# Write your code here'
                example_code: "```\nwords {is} squawk, Hedy\n{print} _ Train your parrot! _\nnew_word {is} {ask} _ Which word do you want to teach them? _\n{add} new_word {to_list} words\n{print} _ 🧒 Say _ new_word _, Hedy!_\n{print} _ 🦜 _ words {at} {random}\n```\n"
    dice:
        name: Dice
        description: Make your own dice
        default_save_name: Dice
        levels:
            3:
                story_text: "이 수준에서 우리는 목록에서 선택할 수 있다. 이것으로 우리는 컴퓨터가 주사위의 한 면을 선택하도록 할 수 있다. 집에서 여러분의 옷장에 있는 게임을 살펴보자. 특별한 주사위를 가진 주사위가 있는가? 여러분은 이 코드로 그것을 복사할 수도 있다. 예를 들어, 숫자 1부터 5까지 있는 지렁이 게임의 주사위와 그 위에 지렁이가 그려져 있다. ![1부터 5까지 있는 지렁이와 그 위에 지렁이가 그려져 있다] (https://cdn.jsdelivr.net/gh/felienne/hedy @24f19e9ac16c9817e7243120bc714912407eb5/marg/dobbelsteen.jpeg)\n"
                example_code: "```\nchoices {is} 1, 2, 3, 4, 5, earthworm\n{print} choices {at} {random}\n```\n"
                start_code: '{print} What will the die indicate this time?'
                story_text_2: "### 연습 위의 예제에 있는 주사위는 특정한 게임을 위한 주사위이다. 당신은 일반적인 주사위를 만들 수 있는가? 아니면 다른 게임의 다른 특별한 주사위를 만들 수 있는가?\n"
                example_code_2: "```\nchoices {is} _\n```\n"
            4:
                story_text: "이 레벨에서 여러분은 주사위를 만들 수도 있습니다. 하지만 이번에는 예제 코드 없이 직접 주사위를 만들어 볼 수 있습니다. ### 연습 이 레벨에서 여러분만의 주사위를 만들어 보세요. 팁: 주사위를 어떻게 만드는지 전혀 모르신다면. 이전 레벨에서 여러분의 주사위를 살짝 살펴보되, 따옴표를 추가하는 것을 잊지 마세요.\n"
                start_code: "{print} 'What will the die indicate this time?'"
            5:
                story_text: "주사위에 '{if}' 명령어와 '{else}' 명령어를 추가합니다. ### 연습 일단 지렁이를 던지면 \"던지는 것을 멈출 수 있다\"는 코드가 나오도록 샘플 코드를 완성합니다. 다른 것을 던지면 \"다시 던져야 해\"라고 쓰여질 것입니다. **Extra** 아마도 여러분은 완전히 다른 게임에서 주사위를 다시 만들고 싶을 것입니다. 그것도 괜찮습니다! 그리고 나서 여러분 자신의 반응을 만들어 보세요. 예를 들어 6에 대해서는 \"네\", 다른 것에 대해서는 \"안타깝다\"는 식으로 말이죠.\n"
                example_code: "```\nchoices {is} 1, 2, 3, 4, 5, earthworm\nthrow {is} _\n{print} 'you have' _ 'thrown'\n{if} _ {is} earthworm {print} 'You can stop throwing.' _ {print} 'You have to hear it again!'\n```\n"
                start_code: "{print} 'What will the die indicate this time?'"
            6:
                story_text: "여러분은 이 과정에서 지렁이를 다시 죽게 만들 수도 있지만, 이제 얼마나 많은 점들이 굴러갔는지도 계산할 수 있습니다. 여러분은 지렁이가 지렁이의 점을 5개나 세는다는 것을 알 것입니다. 이제 굴린 후에 여러분은 몇 점을 던졌는지 즉시 계산할 수 있습니다. 이것은 주사위 하나에 대한 점들을 계산하기 위한 코드입니다. ### 연습 8개의 주사위에 대한 총 점수를 얻을 수 있도록 코드를 만들 수 있나요? 그러기 위해서는 코드의 몇 줄을 자르고 붙여 넣어야 합니다.\n"
                example_code: "```\nchoices = 1, 2, 3, 4, 5, earthworm\npoints = 0\nthrow = choices {at} {random}\n{print} 'you threw' throw\n{if} throw {is} earthworm points = points + 5 {else} points = points + throw\n{print} 'those are' points ' point'\n```\nCan you make the code so that you get the total score for 8 dice? To do that, you have to cut and paste some lines of the code.\n"
                example_code_2: "\nDid you manage to calculate the score for 8 dice? That required a lot of cutting and pasting, right? We are going to make that easier in level 7!\n"
                start_code: "{print} 'What will the die indicate this time?'"
            7:
                story_text: "이 레벨에서는 주사위를 다시 만들 수도 있습니다. {repeat} 코드를 사용하면 손쉽게 주사위 한 손을 통째로 굴릴 수 있습니다. ### 연습 샘플 코드를 완성해 보십시오! **Extra** 주사위와 {repeat}을(를) 사용하는 프로그램이 포함된 게임을 생각해 보십시오.\n"
                example_code: "```\nchoices = 1, 2, 3, 4, 5, earthworm\n{repeat} _ _ {print} _ _ _\n```\n"
                start_code: "{print} 'What will the die indicate this time?'"
            10:
                story_text: "### 운동 모두가 주사위를 던지는데 너무 많은 시간이 걸리는가? 이 레벨에서는 헤디가 모든 주사위를 한 번에 던지게 할 수 있다! 친구나 가족의 이름으로 이름을 바꾸고, 각각 굴릴 수 있도록 코드를 완성하라.\n"
                example_code: "```\nplayers = Ann, John, Jesse\nchoices = 1, 2, 3, 4, 5, 6\n{for} player {in} players\n    {print} player ' throws ' choices {at} {random}\n    {sleep}\n```\n"
                start_code: '# place your code here'
            15:
                story_text: "이 게임에서는 가능한 한 적은 시도로 6개를 던져야 한다.\n"
                example_code: "```\noptions = 1, 2, 3, 4, 5, 6\n{print} 'Throw 6 as fast as you can!'\nthrown = 0\ntries = 0\n{while} thrown != 6\n    thrown = options {at} {random}\n    {print} 'You threw ' thrown\n    tries = tries + 1\n{print} 'Yes! You have thrown 6 in ' tries ' tries.'\n```\n"
                start_code: '# place your code here'
    secret:
        name: SuperSpy
        description: Make your own spy code
        default_save_name: SuperSpy
        levels:
            12:
                story_text: "이 모험에서 당신은 당신 자신만의 슈퍼 스파이 코드를 만들 수 있다. 오직 적합한 요원이 해독할 수 있는 메시지를 부호화하라. 적이 코드를 해독하려고 하면, 그들은 시간을 낭비하기 위해 약간의 거짓 정보를 얻게 될 것이다. ### 연습 1 당신의 슈퍼 스파이를 위한 당신만의 비밀 코드를 만들고 두 부분 모두 진짜 스파이에게만 돌려준다. ## 연습 2 옷이나 물체 같은 세 번째 구성 요소를 코드에 추가한다.\n"
                example_code: "```\nname is ask 'What is your name?'\nif name is 'Agent007'\n    a is 'Go to the airport '\nelse\n    a is 'Go to the trainstation '\npassword is ask 'What is the password?'\nif password is 'TOPSECRET'\n    b is 'tomorrow at 02.00'\nelse\n    b is 'today at 10.00'\nprint a + b\n```\n"
                start_code: '# place your code here'
            13:
                story_text: "우리는 '{and}'로 수퍼스파이 코드를 단순화해서 '{if}' 하나만 입력하면 된다. ### 연습 1 빈칸에 알맞은 명령어를 채워 코드를 완성한다. 팁: 수퍼스파이는 기밀 정보를 얻기 전에 두 질문에 모두 정확하게 대답해야 한다! ## 연습 2 우리는 적을 더욱 혼란스럽게 만들고 싶다! 가짜 답변이 있는 목록을 만들고 오답이 주어졌을 때 무작위로 하나를 선택한다.\n"
                example_code: "```\nname is ask 'What is your name?'\npassword is ask 'What is your password?'\nif name is 'Agent007' and password is 'TOPSECRET'\n    print 'Go to the airport at 02.00'\nelse\n    print 'Go to the trainstation at 10.00'\n ```\n"
                start_code: '# place your code here'
    years:
        default_save_name: New Year's Countdown
        name: New Year's
        description: Countdown to the new year!
        levels:
            11:
                story_text: "이 레벨에서는 '{for}' number '{in}' '{range}' 명령을 사용하여 새해를 카운트다운할 수 있습니다. ### 연습 빈칸을 채우고 코드를 작동시킵니다!\n"
                example_code: "```\nfor _ in _ 10 to 1\n    {print} i\n{print} 'Happy New Year!'\n```\n"
                start_code: '# place your code here'
    pressit:
        levels:
            7:
                story_text: "이제 {repeat}에 대해 알아보셨으니 키를 여러 번 누를 수 있습니다. 거북이가 앞으로 걸어가 회전할 때 사용할 수 있습니다. ### 연습 레벨 5에서 본 코드는 키를 한 번만 확인합니다. 예제 코드를 복사하고 키에 {repeat}을 추가하면 키를 여러 번 누를 수 있습니다. 이 코드를 사용하여 멋진 그림을 그릴 수 있습니다.\n"
                start_code: '# place your code here'
                example_code: "```\n{if} x {is} {pressed} {forward} 15 {else} {turn} 90\n```\n"
            5:
                example_code_2: "```\n{if} y {is} {pressed} {forward} 15\n{else} {turn} 90\n```\n"
                start_code: '# place your code here'
                story_text: "이 수준에는 또 다른 새로운 키워드인 '{pressed}'가 있다. '{pressed}'를 사용하면 키보드의 키를 사용하여 사용되는 줄을 제어할 수 있다. ### 연습 예제를 보고 키 누름에 반응하는 코드 줄을 하나 더 추가한다.\n"
                story_text_2: "거북이 명령을 키에 연결할 수도 있습니다. ### 연습 더 큰 그림을 만들 수 있도록 선을 몇 번 복사합니다.\n"
                example_code: "```\n{print} 'Do you want a good (g) or bad (b) ending?'\n{if} g {is} {pressed} {print} 'They lived happily ever after ❤'\n{else} {print} 'The prince was eaten by a hippopotamus 😭'\n```\n"
            9:
                example_code: "```\npoints = 0\nletters = a, b, c, d, e\n{repeat} 10 {times}\n    letter = _ _ _\n    {print} 'Press the letter ' letter\n    {if} letter {is} {pressed}\n    _\n    _\n    _\n```\n"
                start_code: '# place your code here'
                story_text: "이제 문장을 결합하는 방법을 배웠으니 {pressed}({pressed})로 터치 유형 도구를 만들 수 있습니다. ### 연습 코드를 완성합니다. 매번 임의의 글자를 선택해야 하고, 이 글자를 눌러야 합니다. 올바르게 눌렀을 때는 점수를 얻고, 잘못 눌렀을 때는 점수를 2점 차감합니다. **Extra** 각 글자 뒤의 화면을 지우고, 몇 점을 득점했는지 사용자에게 보여줍니다.\n"
        name: Key presses
        description: Try linking a keyboard key to a command!
        default_save_name: Pressed
    print_command:
        name: "{print}"
        description: Introduction print command
        default_save_name: print
        levels:
            1:
                story_text: "## print 명령 '{print}' 명령을 사용하여 화면에 텍스트를 인쇄할 수 있습니다.\n"
                story_text_2: "### 연습문제 헤디에서 당신은 모든 모험에서 연습문제를 발견할 수 있을 것이다. 연습문제는 당신이 새로운 명령과 개념을 연습할 수 있게 해 주고, 예제 코드에 당신만의 반전을 줄 수 있게 해 준다. 이 연습문제에서 당신은 분홍색 빈 칸을 보게 될 것이다. 당신은 빈 칸의 자리에 무언가를 채워야만 코드를 실행할 수 있다. 빈 칸에 '{print}' 명령을 입력한 다음 다섯 줄의 코드를 더 추가한다. 각 줄은 '{print}' 명령으로 시작해야 한다. 재미있게 놀아라!\n"
                example_code: "```\n{print} Hi there, programmer!\n{print} Welcome to Hedy!\n```\n"
                example_code_2: "```\n_ Hello!\n```\n"
                start_code: "{print} Welcome to Hedy!\n"
            17:
                start_code: "{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Ready or not, here I come!'"
                story_text: "이제 들여쓰기를 조금 바꿀 것이다. 들여쓰기가 필요할 때마다 우리는 들여쓰기 앞 줄에 ':'가 필요하다.\n"
                example_code: "```\n{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Ready or not, here I come!'\n```\n"
            18:
                start_code: "name = 'Hedy'\n{print}('My name is ', name)"
                story_text: "진짜 파이썬 코드에 도달했어요! 이제부터는 {print}, {range}가 있는 괄호를 사용해야 합니다. 영어 명령어만 사용하면 파이썬 환경에서 이런 수준의 헤디 코드를 사용할 수 있다는 뜻이기도 합니다. 지금까지 사용하지 않았다면 명령어 메뉴의 토글을 바꿔 사용할 수 있습니다."
                example_code: "```\n{print}('Hello!')\n{for} i {in} {range}(1, 10):\n    {print}('This is line ', i)\n```\n"
                story_text_2: 두 개 이상의 항목을 인쇄하려면 쉼표로 구분해야 합니다.
                example_code_2: "```\ntemperature = 25\n{print}('It is ', temperature, ' degrees outside')\n```\n"
                story_text_3: 파이썬 코드를 얻기 위해 우리가 해야 할 마지막 변화는 '{ask}'를 '{input}'으로 바꾸는 것이다.
                example_code_3: "```\n{print}('My name is Hedy!')\nname = {input}('What is your name?')\n{print}('So your name is ', name)\n```\n"
    ask_command:
        name: "{ask}"
        levels:
            1:
                story_text_3: "### 연습문제 {ask}와 {echo} 명령어를 사용해 보세요. 먼저 빈칸을 채워야 이 프로그램이 작동합니다. 그런 다음 {ask} 명령어를 사용하여 답을 화면에 출력한 후, {ask} 명령어를 사용하여 2개의 질문을 더 합니다.\n"
                example_code_2: "```\n{print} Hello!\n{ask} What is your name?\n{echo} hello\n```\n"
                example_code_3: "```\n_ How are you doing?\n_\n```\n"
                start_code: "{print} Hello!\n{ask} What is your name?\n{echo} hello\n"
                story_text: "## ask 명령 이제 '{print}' 명령을 사용할 수 있게 되었으므로 다음 명령인 '{ask}'를 배울 준비가 되었습니다. '{ask}' 명령을 사용하면 질문을 할 수 있습니다. 이것을 확인해 보세요:\n"
                example_code: "```\n{print} Hello!\n{ask} What is your name?\n```\n"
                story_text_2: "## echo 명령 컴퓨터가 대답을 다시 반복하도록 하려면 {echo} 명령을 사용하면 된다. 대답은 문장의 마지막에 다시 메아리치므로 hello 다음에 이 예를 사용한다.\n"
            2:
                story_text: "## ask 명령어 이제 **variable**를 코드에 사용할 수 있게 되었으므로 더 이상 {echo} 명령어가 필요 없다. 우리는 변수를 사용하여 질문에 대한 답을 저장할 수 있고, 이 방법으로 우리는 코드에 여러 질문의 답을 사용할 수 있다. 이것을 확인해보라: 이것이 당신의 코드가 상호작용하는 방법이다!\n"
                example_code: "```\nname {is} {ask} What is your name?\n{print} Hello name\nage {is} {ask} How old are you?\n{print} name is age years old.\n```\n"
                story_text_2: "### 연습 이전 탭에서 당신은 '{is}' 명령어로 변수를 설정하는 연습을 했다. 당신은 적어도 3개의 변수를 만들어서 인쇄 명령어로 사용했다. 이제 우리는 예제에서 했던 것처럼 변수를 설정하는 대신 변수를 상호작용적으로 만들기를 원한다. 이전 탭에서 코드를 복사하고 '{ask}' 명령어를 사용하여 변수를 상호작용적으로 만든다.\n"
                example_code_2: "```\nfavorite_animals is ask What is your favorite animal?\nprint I like favorite_animals\n```\n"
                start_code: "name {is} {ask} What is your name?\n{print} Hello name\nage {is} {ask} How old are you?\n{print} name is age years old."
        description: Introduction ask command
        default_save_name: ask_command
    is_command:
        name: "{is}"
        description: introducing is command
        default_save_name: is_command
        levels:
            2:
                story_text: "## 변수 '{is}'로 단어의 이름을 지정할 수 있다. 이를 **variable**라고 한다. 이 예제에서 name이라는 변수와 age라는 변수를 만들었다. name이라는 단어는 코드 어디에서나 사용할 수 있으며 다음과 같이 Hedy로 대체된다:\n"
                example_code: "```\nname {is} Hedy\nage {is} 15\n{print} name is age years old\n```\n"
                story_text_2: "### 자신만의 변수를 만들기 위한 연습 시간! 예제 코드에서 우리는 변수 'favorite_animals'의 예제를 만들었다. 1행에서 변수가 설정되고, 2행에서 우리는 변수를 인쇄 명령에 사용했다. 먼저 빈칸에 여러분이 가장 좋아하는 동물을 입력하는 것으로 예제를 마무리한다. 그리고 나서 이 코드들 중 적어도 3개를 직접 만들어라. 변수를 골라서 {is} 명령으로 변수를 설정한다. 그런 다음 우리가 했던 것처럼 {print} 명령으로 사용한다.\n"
                example_code_2: "```\nfavorite_animals is _\n{print} I like favorite_animals\n```\n"
                start_code: "name {is} Hedy\nage {is} 15\n{print} name is age years old"
            14:
                start_code: "age = {ask} 'How old are you?'\n{if} age < 13\n    {print} 'You are younger than me!'\n{else}\n    {print} 'You are older than me!'"
                story_text: "우리는 더 많은 새로운 항목들을 배울 것이다. 여러분은 아마도 수학, 즉 <<>와 <>에서 이 항목들을 이미 알고 있을 것이다. <<>는 첫 번째 숫자가 두 번째 숫자보다 작은지, 예를 들어 나이 <<> 12가 12보다 작은지를 확인한다. 첫 번째 숫자가 두 번째 숫자보다 작거나 같은지를 확인하려면 <=>, 예를 들어 나이 <<=> 11을 사용하면 된다. <>는 첫 번째 숫자가 두 번째 숫자보다 큰지, 예를 들어 점 <> 10이 10보다 큰지를 확인한다. 첫 번째 숫자가 두 번째 숫자보다 큰지 아니면 같은지를 확인하려면 <>=> 11을 사용하면 된다. 다음과 같이 {if}의 비교를 사용하면 된다:\n"
                example_code: "```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n"
                story_text_2: "이 단계부터는 정확하게 비교하고 싶다면 두 개의 등호를 사용할 수 있다. 대부분의 프로그래밍 언어는 다음과 같이 한다:\n"
                example_code_2: "```\nname = {ask} 'What is your name?'\n{if} name == 'Hedy'\n    {print} 'You are cool!'\n```\n"
                story_text_3: "다음과 같이 '!='을 사용하여 어떤 것이 다른 것과 *not* 같은지 비교할 수도 있습니다:\n"
                example_code_3: "```\nname = {ask} 'What is your name?'\n{if} name != 'Hedy'\n    {print} 'You are not Hedy'\n```\n"
    random_command:
        levels:
            3:
                story_text_2: "문장에서도 '{at} {random}' 명령을 사용할 수 있습니다.\n"
                example_code_2: "```\nfood {is} sandwich, slice of pizza, salad, burrito\n{print} I am going to have a food {at} {random} for lunch.\n```\n"
                story_text: "## 임의 이 수준에서 당신은 '{is}' 명령을 사용하여 목록을 만들 수 있다. 당신은 그 목록에서 컴퓨터가 임의의 항목을 선택하도록 할 수 있다. 당신은 '{at} {random}'로 그것을 한다.\n"
                example_code: "```\nanimals {is} dogs, cats, kangaroos\n{print} animals {at} {random}\n```\n"
                start_code: "animals {is} dog, cat, kangaroo\n{print} animals {at} {random}\n"
                story_text_3: "### 연습 여러분이 문이나 여행 가방을 고르는 게임쇼(TV에 나오는 것과 같은)를 만들어서 {at} {random} 명령어를 사용해 보세요. 할 수 있나요? 우리는 이미 예제 코드에 첫 줄을 넣었습니다.\n"
                example_code_3: "```\n{print} The big gameshow!\n{print} There are 3 suitcases in front of you...\nchosen {is} {ask} Which suitcase do you choose?\nprices {is} _\n_\n```\n"
            16:
                start_code: "fruit = ['apple', 'banana', 'cherry']\n{print} fruit[random]"
                story_text: "우리는 목록을 파이썬 방식으로 만들 것이다. 우리는 또한 이전 수준에서 배운 것처럼 각 항목의 주변에 따옴표를 유지한다. 우리는 목록의 한 자리를 가리키기 위해 대괄호를 사용한다. {at} {random} 명령은 더 이상 사용할 수 없다."
                example_code: "```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
        name: "{random}"
        description: introducing at random command
        default_save_name: random_command
    add_remove_command:
        name: "{add} {to} & {remove} {from}"
        description: introducing add to and remove from
        default_save_name: add_remove_command
        levels:
            3:
                story_text: "## Add to You는 {add} {to} 명령을 사용하여 아이템을 리스트에 추가할 수 있다. 아이템을 리스트에 추가하려면 간단히 {add} penguin {to} animals라고 입력하거나 예제 코드처럼 {ask} 명령을 사용하면 된다.\n"
                example_code: "```\nanimals {is} dog, cat, kangaroo\nlike {is} {ask} What is your favorite animal?\n{add} like {to_list} animals\n{print} I choose animals {at} {random}\n```\n"
                story_text_2: "## Remove from 목록에 항목을 추가할 수 있다면 당연히 항목을 삭제할 수도 있습니다. 이 작업은 '{remove} {from}' 명령으로 완료됩니다.\n"
                example_code_2: "```\nanimals {is} dog, cat, kangaroo\ndislike {is} {ask} What animal do you not like?\n{remove} dislike {from} animals\n{print} I choose animals {at} {random}\n```\n"
                story_text_3: "### 운동 이 가상 레스토랑에서 새로운 명령을 사용해 보십시오. 플레이어가 원하는 맛을 목록에 추가하고 알레르기가 있는 맛을 제거하십시오.\n"
                example_code_3: "```\n{print} Mystery milkshake\nflavors {is} strawberry, chocolate, vanilla\nhope {is} {ask} What flavor are you hoping for?\n_\nallergies {is} {ask} Are you allergic to any flavors?\n_\n{print} You get a flavors {at} {random} milkshake\n```\n"
                start_code: "animals {is} dog, cat, kangaroo\nlike {is} {ask} What is your favorite animal?\n{add} like {to_list} animals\ndislike {is} {ask} What animal do you not like?\n{remove} dislike {from} animals\n{print} I choose animals {at} {random}"
    sleep_command:
        name: "{sleep}"
        description: introducing sleep command
        default_save_name: sleep_command
        levels:
            2:
                story_text: "이 수준의 또 다른 새로운 명령어는 '{sleep}'으로 프로그램을 잠시 일시 중지한다. {sleep} 명령 뒤에 숫자를 입력하면 해당 시간 동안 프로그램이 일시 중지된다. ### 연습 {sleep} 명령어를 적어도 3번 사용하는 자신만의 코드를 만들어 이 새로운 명령어를 연습한다. {sleep} 명령어마다 일시 중지 시간이 달라야 한다.\n"
                example_code: "```\n{print} My favorite colour is...\n{sleep} 2\n{print} green!\n```\n"
                start_code: "{print} My favorite colour is...\n{sleep} 2\n{print} green!"
    if_command:
        name: "{if} & {else}"
        description: Introducing the if command
        default_save_name: if_command
        levels:
            5:
                story_text: "## 만약... 그렇지 않다면... 레벨 5에는 새로운 {if}! {if} 라는 두 가지 다른 옵션 중에서 하나를 선택할 수 있다. 이름으로 헤디를 입력하면 이 코드가 잘 인쇄되고, 다른 것을 입력하면 boo! 된다. {ask} 와 {print} 는 레벨 4 에서와 마찬가지로 여전히 작동한다.\n"
                example_code: "```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'\n```\n"
                story_text_2: "{if}인 코드가 정말 길어져서 행에 잘 맞지 않을 때도 있다. <br> 코드를 두 줄에 걸쳐 나눌 수도 있는데, 두 번째 줄은 다음과 같이 'else'에서 시작한다:\n"
                example_code_2: "```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice'\n{else} {print} 'boo!'\n```\n"
                story_text_3: "### 연습 '{if}'와 '{else}'로 자신만의 코드를 만들어 보자. 원한다면 예제 코드를 사용할 수 있다.\n"
                example_code_3: "```\nanswer {is} {ask} '2 + 2 = ?'\n_ _ _ 4 _ 'Great job!'\n_ _ 'No 2 + 2 = 4'\n```\n"
                start_code: "name {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice'\n{else} {print} 'boo!'"
            8:
                start_code: "name {is} {ask} 'What is your name?'\n{if} name {is} Hedy\n    {print} 'Welcome Hedy'\n    {print} 'You can play on your computer!'\n"
                example_code: "```\nname {is} {ask} 'What is your name?'\n{if} name {is} Hedy\n    {print} 'Welcome Hedy'\n    {print} 'You can play on your computer!'\n```\n"
                story_text: "## If... Else... 당신은 '{repeat}' 명령 뒤에 코드 줄 블록을 반복하는 법을 배웠다. 이제 들여쓰기를 사용하여 {if} 또는 {else} 명령 뒤에 블록을 만들 수도 있다. 예제 코드를 확인해보라. ### 연습 예제 코드에 {else} 명령을 추가하라. 들여쓰기를 사용하여 줄 블록을 만든다. 이것은 각 줄을 4개의 공백으로 시작함으로써 한다.\n"
    in_command:
        levels:
            5:
                example_code_2: "```\nanimals is dog, cow, sheep\nanswer is ask 'What is your favorite animal?'\n_ answer _ animals _ 'Mine too!'\n_ _ 'My favorite animals are dogs, cows and sheep'\n```\n"
                story_text: "## 목록 목록에 무엇인가가 있는지 확인하고 싶을 때, 이제 '{in}' 명령을 사용할 수 있습니다. 이 코드는 예쁘게 인쇄됩니다! 녹색 또는 노란색을 선택하면, 그리고 나는 그렇지 않으면 인쇄됩니다.\n"
                example_code: "```\npretty_colors {is} green, yellow\nfavorite_color {is} {ask} 'What is your favorite color?'\n{if} favorite_color {in} pretty_colors {print} 'pretty!'\n{else} {print} 'meh'\n```\n"
                story_text_2: "### 연습 학습한 명령어를 빈칸에 채움으로써 예제 코드를 마친다. 코드를 마쳤으면 자신만의 코드를 만들고 자신에 대해 생각해 본 질문을 사용해보라.\n"
                start_code: "pretty_colors {is} green, yellow\nfavorite_color {is} {ask} 'What is your favorite color?'\n{if} favorite_color {in} pretty_colors {print} 'pretty!'\n{else} {print} 'meh'"
        name: "{in}"
        description: Introducing the in command
        default_save_name: in_command
    quotation_marks:
        name: "'quotation marks'"
        levels:
            12:
                example_code_4: "```\nscore = 25\n{print} 'You got ' score\n```\n"
                start_code: "name = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'"
                story_text: "**모든 텍스트는 따옴표로 표시되어야 합니다** 이 레벨에서는 '='로 텍스트를 저장할 때 따옴표를 사용해야 합니다:\n"
                example_code: "```\nname = 'Hedy the Robot'\n{print} 'Hello ' name\n```\n"
                story_text_2: "**목록의 모든 항목에도 따옴표가 필요합니다** 목록은 텍스트이므로 따옴표도 필요합니다. 목록의 각 항목에는 따옴표가 있습니다. 그러면 '아이언맨'과 같이 두 단어를 목록의 하나의 항목으로 저장할 수 있습니다.\n"
                example_code_2: "```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n"
                story_text_3: "**'{if}' 비교 후의 모든 텍스트에도 따옴표가 필요함**\n"
                example_code_3: "```\nname = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n"
                story_text_4: "**숫자에는 따옴표가 필요 없습니다** 숫자의 경우 '='에서 따옴표를 사용하지 않습니다:\n"
            4:
                story_text: "## 따옴표 4단계에서는 따옴표 {ask}와 {print}가 바뀌었습니다. 따옴표 사이에 인쇄할 텍스트를 넣어야 합니다. 이제 원하는 단어를 모두 인쇄할 수 있기 때문에 유용합니다. {is}과(와) 함께 저장할 때 사용한 단어도 있습니다. 대부분의 프로그래밍 언어에서도 따옴표를 사용하기 때문에 실제 프로그래밍에 한 걸음 더 다가가고 있습니다!\n"
                story_text_2: "## 수축이 중요해요! 이제 따옴표를 사용하게 되었으니, 헤디는 'I'나 'What's'와 같은 수축에 아포스트로피를 사용할 때 혼동할 것임을 명심하세요. 반드시 이러한 아포스트로피를 제거하고 철자법을 'I' 또는 'What is'로 바꾸세요. 예시 코드를 확인하여 아포스트로피를 사용하는 잘못된 방법을 알아보세요.\n"
                example_code: "```\n{print} 'You need to use quotation marks from now on!'\nanswer {is} {ask} 'What do we need to use from now on?'\n{print} 'We need to use ' answer\n```\n"
                example_code_2: "```\n_ This is the wrong way of using apostrophes _\n{print} 'I'm babysitting my sister's kids'\n{print} 'What's more fun than that?'\n```\n"
                start_code: "{print} 'You need to use quotation marks from now on!'\nanswer {is} {ask} 'What do we need to use from now on?'\n{print} 'We need to use ' answer"
        description: Introduction quotation marks
        default_save_name: quotation_marks
    for_command:
        name: "{for}"
        description: for command
        default_save_name: for
        levels:
            10:
                start_code: "animals {is} dog, cat, blobfish\n{for} animal {in} animals\n    {print} 'I love ' animal"
                story_text: "## 이 수준에서 우리는 {for}라는 새로운 코드를 배운다. {for}를 사용하면 목록을 만들고 모든 요소를 사용할 수 있다. {for}는 {repeat}과 {if} 같은 블록을 만들기 때문에 블록의 모든 행은 4개의 공백으로 시작해야 한다."
                example_code: "```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n    {print} 'I love ' animal\n```\n"
            11:
                start_code: "{for} counter {in} {range} 1 {to} 5\n    {print} counter"
                story_text: "이 수준에서는 {for}의 새로운 형태를 추가한다. 이전 수준에서는 {for}를 목록과 함께 사용했지만 {for}를 숫자와 함께 사용할 수도 있다. 변수 이름 뒤에 {in} {range}를 붙여서 사용한다. 그리고 나서 우리는 {to}에서 시작하는 숫자와 끝에서 끝나는 숫자를 쓴다. 무슨 일이 일어나는지 보기 위해서 예제를 시도해보라! 이 수준에서는 {for} 문 아래 줄에 들여쓰기를 사용할 필요가 있을 것이다."
                example_code: "```\n{for} counter {in} {range} 1 {to} 5\n    {print} counter\n```\n"
    and_or_command:
        levels:
            13:
                example_code: "```\nname = {ask} 'what is your name?'\nage = {ask} 'what is your age?'\n{if} name {is} 'Hedy' {and} age {is} 2\n    {print} 'You are the real Hedy!'\n```\n"
                start_code: "name = {ask} 'what is your name?'\nage = {ask} 'what is your age?'\n{if} name {is} 'Hedy' {and} age {is} 2\n    {print} 'You are the real Hedy!'"
                story_text: "이제 {and}와 {or}를 공부하겠습니다! 두 문장을 확인하려면 {if}를 두 개 사용할 필요가 없고 {and}와 {or}를 사용할 수 있습니다. {and}를 사용하면 {and}의 왼쪽과 오른쪽 문장이 모두 참이어야 합니다. {or}를 사용할 수도 있습니다. 그러면 하나의 문장만 맞으면 됩니다."
        name: "{and} & {or}"
        description: introducing and or
        default_save_name: and or
    while_command:
        name: "{while}"
        description: while
        default_save_name: while_command
        levels:
            15:
                start_code: "answer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'"
                story_text: "우리는 새로운 고리인 {while} 고리에 대해 배울 것이다! 우리는 문장이 참인 한 고리를 계속한다. 그러니 고리의 값을 바꾸는 것을 잊지 마라. 예제 코드에서 우리는 정답이 주어질 때까지 계속한다. 정답이 주어지지 않으면 고리는 절대로 끝나지 않는다!"
                example_code: "```\nanswer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'\n```\n"
    elif_command:
        levels:
            17:
                example_code: "```\nprices = ['1 million dollars', 'an apple pie', 'nothing']\nyour_price = prices[{random}]\n{print} 'You win ' your_price\n{if} your_price == '1 million dollars' :\n    {print} 'Yeah! You are rich!'\n{elif} your_price == 'an apple pie' :\n    {print} 'Lovely, an apple pie!'\n{else}:\n    {print} 'Better luck next time..'\n```\n"
                start_code: "prices = ['1 million dollars', 'an apple pie', 'nothing']\nyour_price = prices[{random}]\n{print} 'You win ' your_price\n{if} your_price == '1 million dollars' :\n    {print} 'Yeah! You are rich!'\n{elif} your_price == 'an apple pie' :\n    {print} 'Lovely, an apple pie!'\n{else}:\n    {print} 'Better luck next time..'"
                story_text: "이 수준에서 새 명령을 사용할 수 있습니다. {if}을(가)를)를 사용할 수 있습니다.{else}이(가) 을(를)로 만들고 싶다면 3(또는 더 이상) 옵션을 선택해야 합니다.이것 좀 봐!\n"
        name: "{elif}"
        description: elif
        default_save_name: elif
    rock_2:
        name: Rock, paper, scissors 2
        description: Part 2 of rock, paper, scissors
        default_save_name: rock_2
        levels:
            2:
                story_text: "이제 {ask} 명령어 사용법을 배웠으니 가위바위보 코드도 대화형으로 만들 수 있어요! ## 운동 가위바위보 코드에 {ask} 명령어와 질문을 추가하여 가위바위보 코드를 대화형으로 만들 수 있어요.\n"
                example_code: "```\nchoice is _\n{print} I choose choice\n```\n"
                start_code: "# place your code here"
    harry_potter:
        name: Harry Potter
        description: Harry Potter adventures
        default_save_name: Harry Potter
        levels:
            10:
                start_code: '# place your code here'
                story_text: "### 연습 해리포터를 주제로 한 점쟁이도 만들 수 있습니다. 빈칸을 채워 9줄이 인쇄되도록 하세요. **추가** 점쟁이의 주제를 여러분이 가장 좋아하는 책, 영화 또는 TV쇼와 같은 다른 것으로 바꾸세요.\n"
                example_code: "```\nhouses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw\nsubjects = potions, defence against the dark arts, charms, transfiguration\nfears = Voldemort, spiders, failing your OWL test\nnames = Harry, Ron, Hermione\n_\n_ {print} name ' is placed in ' houses {at} {random}\n_ {print} name ' is great at ' subjects {at} {random}\n_ {print} name 's greatest fear is ' fears {at} {random}\n```\n"
    repeat_command:
        name: "{repeat}"
        description: repeat command
        default_save_name: repeat_command
        levels:
            7:
                story_text: "## 반복! 반복! 반복! 레벨 7은 '{repeat}' 명령어를 추가한다. '{repeat}'은 한 줄의 코드를 여러 번 실행할 때 사용할 수 있다. 이와 같이 ### 연습 리피트 명령어를 가지고 장난을 쳐라. 생일 축하 노래를 지금 4줄이 아닌 3줄의 코드로만 만들 수 있는가?\n"
                example_code: "```\n{repeat} 3 {times} {print} 'Hedy is fun!'\n```\n"
                start_code: "{print} 'happy birthday to you'\n{print} 'happy birthday to you'\n{print} 'happy birthday dear Hedy'\n{print} 'happy birthday to you'\n"
            8:
                start_code: "{repeat} 5 {times}\n    {print} 'Hello everyone'\n    {print} 'This will be printed 5 times'"
                story_text: "### 반복 명령 및 들여쓰기 이 레벨에서는 1개의 반복 명령만으로 여러 줄의 코드를 반복할 수 있다. 이 작업은 반복할 줄의 블록을 만들어서 수행한다. 이 블록의 줄에는 **indentation**가 필요하다. 각 줄의 시작에 4개의 공백을 넣는 것을 의미한다. 한 줄의 블록을 만들고 싶을 때도 들여쓰기를 해야 한다.\n"
                example_code: "```\n{repeat} 5 {times}\n    {print} 'Hello everyone'\n    {print} 'This is all repeated 5 times'\n```\n"
            9:
                start_code: "{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    {else}\n        {print} 'pizza is better'"
                story_text: "이 수준에서는 {if}와 {repeat}이 있는 여러 줄을 사용할 수 있을 뿐만 아니라 이들을 조합할 수도 있다! 예제에서 {repeat} 명령어 안에 {if} 명령어가 있다. 또한 이 명령어의 반대도 허용되며 {if}에서는 {if}이, {repeat}에서는 {repeat}이 허용된다. 한번 시도해보라!\n"
                example_code: "```\n{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    {else}\n        {print} 'pizza is better'\n```\n"
    repeat_command_2:
        name: "{repeat} 2"
        description: repeat command 2
        default_save_name: repeat_command_2
        levels:
            7:
                story_text: "## 다른 명령 및 변수와 함께 반복 이제 {print} 명령과 함께 {repeat} 명령을 연습했지만 {repeat} 명령과 함께 다른 명령도 사용할 수 있다는 사실을 알고 있었나요? 이 예제 코드에서 {repeat}은(는) {ask}, {if} 또는 {else} 명령과도 사용할 수 있음을 알 수 있습니다.\n"
                story_text_2: "{repeat} 명령어로 할 수 있는 또 다른 흥미로운 것은 변수를 사용하여 어떤 일이 반복되어야 하는 횟수를 설정하는 것이다. 예제 코드에서 볼 수 있는 것은 우리가 먼저 사람에게 몇 살인지 묻는 것이다. 그런 다음 줄 3에서는 나이라는 질문을 반복한다. 그래서 우리는 변수 '나이'를 {repeat} 명령어와 함께 사용해 보았다.\n"
                example_code: "```\n{repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'\n{if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'\n{else} {repeat} 3 {times} {print} 'You have learned something new!'\n```\n"
                example_code_2: "```\n{print} 'Yay! It is your birthday!'\nage = {ask} 'How old are you now?'\n{repeat} age {times} {print} 'Hip Hip Hurray!'\n```\n"
                start_code: "{repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'\n{if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'\n{else} {repeat} 3 {times} {print} 'You have learned something new!'"
            8:
                story_text: "### 블록 안에 있을까 말까? 이 수준에서 여러분은 어떤 코드 라인이 블록 안에 있어야 하고 어떤 코드 라인이 없어야 하는지 신중하게 생각해야 한다. 예를 들어, 만약 여러분이 *머핀 맨*이라는 노래를 부르고 싶다면. 여러분은 오직 '머핀 맨'이 있는 대사를 두 번만 반복하기를 원한다. 이것은 마지막 줄이 블록에 속하지 않으므로 들여쓰기로 시작해서는 안 된다는 것을 의미한다. 만약 여러분이 들여쓰기로 마지막 줄을 시작한다면, 노래는 틀리게 될 것이다. ## 연습 예제 코드의 각 줄은 빈 칸으로 시작한다. 빈 칸을 없애고 어떤 줄이 들여쓰기가 필요하고 어떤 줄이 머핀 맨 노래가 되지 않는지 알아낸다.\n"
                example_code: "```\n_ {print} 'Do you know the muffin man?'\n_ {repeat} 2 {times}\n_ {print} 'The muffin man'\n_ {print} 'Do you know the muffin man, who lives on Drury Lane?'\n```\n"
                start_code: "{repeat} 3 {times}\n    {print} 'This line will be repeated...'\n    {print} 'This one too...'\n{print} 'but this one will not!'"
    maths:
        name: maths
        description: Introducing maths
        default_save_name: maths
        levels:
            6:
                start_code: "{print} '5 times 5 is ' 5 * 5"
                story_text: "## 1 + 1 이 단계에서 여러분은 새로운 것을 배울 수 있습니다. 이제 여러분은 계산도 할 수 있습니다. 플러스는 쉽습니다. 수학과 같이 쓸 때 '5 + 5'와 같이 쓸 수 있습니다. 마이너스도 잘 작동합니다. 5 - 5입니다. 키보드에 타임스 기호가 없기 때문에 시대가 좀 다릅니다. 그냥 검색해보세요. 그래서 우리는 8: 5 * 5 위의 별표를 곱합니다. 여러분이 가장 잘 기억할 수 있도록 도와주는 5 곱하기 5로 읽어보세요.\n"
                example_code: "```\n{print} '5 plus 5 is ' 5 + 5\n{print} '5 minus 5 is ' 5 - 5\n{print} '5 times 5 is ' 5 * 5\n```\n"
                story_text_2: "우리는 단어를 변수에 저장할 때에도 변화를 준다! 이제 우리가 이름이나 숫자를 변수에 저장할 때 {is} 대신 =를 사용할 수 있다:\n"
                example_code_2: "```\nname = Hedy\nanswer = 20 + 4\n```\n"
            12:
                start_code: "{print} 'decimal numbers now need to use a dot'\n{print} 2.5 + 2.5"
                story_text: "**십진수** 지금까지 헤디는 1.5와 같은 십진수를 허용하지 않았지만 이제는 허용한다. 컴퓨터는 십진수에 'decause'를 사용한다."
                example_code: "```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n"
    clear_command:
        levels:
            4:
                example_code: "```\nprint '3'\nsleep\nclear\nprint '2'\nsleep\nclear\nprint '1'\nsleep\nclear\nprint 'SURPRISE!'\n```\n"
                start_code: "print '3'\nsleep\nclear\nprint '2'\nsleep\nclear\nprint '1'\nsleep\nclear\nprint 'SURPRISE!'\n"
                story_text: "새 명령 시간 보내세요!Num이(를)으로 모든 텍스트 양식을 삭제할 수 있습니다.이 방법은 화면을 너무 꽉 찼습니다.조심해!Num의 명령을 사용하는 경우 위의 Num을(를) 사용하시면 됩니다.그렇지 않으면 화면을 삭제하지 않고 화면을 지우도록 하겠습니다!\n"
        name: '{clear}'
        description: clear command
        default_save_name: clear_command
