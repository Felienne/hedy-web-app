1:
-   name: "{print}"
    explanation: "Affiche quelque chose avec `{print}`."
    demo_code: "{print} Bonjour et bienvenue √† Hedy!"
-   name: "{ask}"
    explanation: "Demande quelque chose avec `{ask}`."
    demo_code: "{ask} Quelle est ta couleur pr√©f√©r√©e?"
-   name: "{echo}"
    explanation: "R√©p√®te quelque chose avec `{echo}`."
    demo_code: |-
        {ask} Quelle est ta couleur pr√©f√©r√©e?
        {echo} donc ta couleur pr√©f√©r√©e est
-   name: '{print} emojis'
    explanation: afficher un emoji avec `{print}`
    demo_code: '{print} üôã üåç ‚ùó'
-   demo_code: '{forward} 100'
    name: '{forward}'
    explanation: Dessiner une ligne avec `{forward}`.
-   name: '{turn}'
    explanation: tourner la tortue qui dessine avec `{turn}`
    demo_code: "{forward} 25\n{turn} left\n{forward} 25\n{turn} right"
2:
-   name: "{is}"
    explanation: "Donne un nom √† un mot que tu peux utiliser dans le programme avec `{is}`"
    demo_code: |-
        nom {is} Hedy
        {print} bienvenue nom
-   name: "{ask}"
    explanation: "Demande quelque chose avec `{ask}`. Attention! Tu dois donner √† la r√©ponse un nom avec `{is}`."
    demo_code: |-
        couleur {is} {ask} Quelle est ta couleur pr√©f√©r√©e?
        {print} couleur est ton pr√©f√©r√© !
-   explanation: Laissez Hedy faire une pause d'une (ou plusieurs) seconde(s).
    name: '{sleep}'
    demo_code: "{print} Laissez-moi r√©fl√©chir une seconde...\n{sleep}\n{print} Hmm... Il me faut encore 3 secondes...\n{sleep} 3\n{print} Eureka ! Je l'ai eu !"
-   name: is - turtle
    explanation: Donnez un nom √† un num√©ro en utilisant `{is}`. Tu peux choisir le nom toi-m√™me.
    demo_code: "angle {is} 90\n{turn} angle\n{forward} 100"
3:
-   name: "choisi_au hasard"
    explanation: "Choisi un mot au hasard dans un groupe avec `{at} {random}`"
    demo_code: |-
        animaux {is} chien, chat, kangourou
        {print} animaux {at} {random}
-   demo_code: "animaux {is} vache, chat\n{add} chien {to_list} animaux"
    explanation: add an item to a list
    name: '{add}'
-   name: '{remove}'
    explanation: supprimer un √©l√©ment d'une liste
    demo_code: "animaux {is} chat, chien, vache\n{remove} chien {from} animaux"
4:
-   name: "{print}"
    explanation: "Afficher exactement ce qui est entre les guilllemets"
    demo_code: "{print} 'Bonjour et bienvenue √† Hedy.'"
-   name: "{is}"
    explanation: "Donne un nom √† un mot que tu peux utiliser dans le programme sans guillemets"
    demo_code: |-
        nom {is} Hedy
        {print} 'mon nom est ' nom
-   name: "{ask}"
    explanation: "Demande quelque chose avec `{ask}`."
    demo_code: |-
        couleur {is} {ask} 'Quelle est ta couleur pr√©f√©r√©e?'
        {print} couleur ' est ta couleur pr√©f√©r√©e!'
5:
-   name: "{print}"
    explanation: "Affiche exactement ce qui est entre les guilllemets"
    demo_code: "{print} 'Bonjour et bienvenue √† Hedy.'"
-   name: "{ask}"
    explanation: "Demande quelque chose avec `{ask}`."
    demo_code: |-
        couleur {is} {ask} 'Quelle est ta couleur pr√©f√©r√©e?'
        {print} couleur ' est ta couleur pr√©f√©r√©e!'
-   name: "{if}"
    explanation: "Fait un choix avec `{if}`."
    demo_code: |-
        couleur {is} {ask} 'Quelle est ta couleur pr√©f√©r√©e?'
        {if} couleur {is} vert {print} 'joli!' {else} {print} 'bof'
-   name: '{if} avec la tortue'
    demo_code: "answer {is} {ask} 'How far should I walk?'\n{if} answer {is} far {forward} 100 {else} {forward} 5"
    explanation: Faites un choix avec `{if}`.
-   name: '{in}'
    explanation: Check elements with `{in}`
    demo_code: "pretty_colors {is} green, yellow\ncolor {is} {ask} 'What {is} your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
6:
-   name: "{print}"
    explanation: "Affiche exactement ce qui est entre les guilllemets"
    demo_code: "{print} '5 fois 5 font ' 5 * 5"
-   name: "{ask} et {if} avec des calculs"
    explanation: "Pose une question sur un calcul avec `{ask}` et compare le r√©sultat..."
    demo_code: |-
        reponse = {ask} 'Combien font 10 plus 10?'
        {if} reponse {is} 20 {print} 'Oui!' {else} {print} 'Oups'
-   name: "`{ask}` and `{if}` turtle"
    explanation: "Ask the user how many angles they want"
    demo_code: |-
        angles = {ask} 'How many angles?'
        angle = 360 / angles
        {forward} 50
7:
-   name: "{print}"
    explanation: "Affiche exactement ce qui est entre les guilllemets"
    demo_code: "{print} 'Bonjour et bienvenue √† Hedy.'"
-   name: "{ask}"
    explanation: "Demande quelque chose avec `{ask}`."
    demo_code: |-
        couleur = {ask} 'Quelle est ta couleur pr√©f√©r√©e?'
        {print} couleur ' est ta couleur pr√©f√©r√©e!'
-   name: "{if}"
    explanation: "Fait un choix avec `{if}`."
    demo_code: |-
        couleur = {ask} 'Quelle est ta couleur pr√©f√©r√©e?'
        {if} couleur {is} vert {print} 'joli!' {else} {print} 'bof'
-   name: "{repeat} - turtle"
    explanation: "Repeat a line of code with `{repeat}`."
    demo_code: |-
        {repeat} 3 {times} {forward} 10
8:
-   name: "{print}"
    explanation: "Affiche quelque chose. N‚Äôoublies pas les guillemets pour afficher exactement ce qui est saisi."
    demo_code: "{print} '5 fois 5 font ' 5 * 5"
-   name: "`{if}` sur plusieurs lignes"
    explanation: "Demande la r√©ponse d‚Äôune addition et v√©rifie si elle est correcte. Tu peux d√©sormais imprimer sur 2 lignes."
    demo_code: |-
        reponse = {ask} 'Combien font 5 plus 5?'
        {if} reponse {is} 10
            {print} 'Bien jou√©!'
            {print} 'En effet, la r√©ponse est ' reponse
        {else}
            {print} 'Oups!'
            {print} 'La r√©ponse devrait √™tre 10.'
-   demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
    name: '`{repeat}` with turtle'
    explanation: '{repeat} multiple lines'
9:
-   name: "`{if}` with multiple lines"
    explanation: "The answer of a sum of questions with '{ask}' and see if it is correct. Now we print out two lines."
    demo_code: |-
        answer = {ask} 'What is 20 plus 20?'
        {if} answer {is} 20
            {print} 'Well done!!'
            {print} 'The answer is indeed' answer
        else
            {print} 'Wrong'
            {print} 'The answer is 20'
-   name: "`{repeat}` and turtle"
    explanation: "{repeat} multiple lines"
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
10:
-   name: "{print}"
    explanation: "print something. Remember to use a quotation mark for literal printing."
    demo_code: "{print} '5 times 5 is ' 5 * 5"
-   name: "{for} with a list"
    explanation: "print all things in a list "
    demo_code: |-
        animals {is} dog, cat, blobfish
        {for} animal {in} animals
          {print} 'I love ' animal
11:
-   name: " nouveau `{repeat}`"
    explanation: " `{for}` au lieu de `{repeat}`"
    demo_code: |
        {for} i {in} {range} 1 {to_list} 11
            {print} i
        {print} ' Cache toi ou je te verrai !'
-   name: '{ask}'
    explanation: ask for the answer to a sum and check if it is correct. We can now print 2 lines.
    demo_code: "answer = {ask} 'What is 5 plus 5?'\n{if} answer {is} 10\n    {print} 'Well done!'\n    {print} 'Indeed, the answer was ' answer\nelse\n    {print} 'Oops!'\n    {print} 'The answer is 10'"
12:
-   name: "float directly"
    explanation: "Decimal numbers"
    demo_code: |
        {print} 'Calculate away!'
        {print} 'Two and a half plus two and a half is...'
        {print} 2.5 + 2.5
-   name: "assign text"
    explanation: "Text with quotation marks after ="
    demo_code: |
        name = 'Hedy the Robot'
        {print} 'Hello ' name
-   name: "quotes after {if} comparison"
    explanation: "Text with quotation marks after {if}"
    demo_code: |
        name = {ask} 'Who are you?'
        {if} name = 'Hedy'
            {print} 'Hi there!'
-   name: "quotes in list"
    explanation: "A list with quotation marks"
    demo_code: |
        superheroes = 'Iron Man', 'Batman', 'Superman'
        {print} superheroes {at} {random}
13:
-   name: "{and}"
    explanation: "Two parts both need to be correct"
    demo_code: |-
        answer1 = {ask} 'What is 3+2?'
        answer2 = {ask} 'What is 2+2?'
        {if} answer1 {is} 5 {and} answer2 {is} 4
            {print} 'Both answers are correct!'
        else
            {print} 'At least one answer is wrong!'
-   name: "{or}"
    explanation: "At least 1 of the two parts need to be correct. If both are correct, it is also fine."
    demo_code: |-
        answer1 = {ask} 'What is 3+2?'
        answer2 = {ask} 'What is 2+2?'
        {if} answer1 {is} 5 {or} answer2 {is} 4
            {print} 'At least one answer is correct!'
        else
            {print} 'Both answers are wrong!'
14:
-   name: "Smaller"
    explanation: "We use the `<` to check if the first number is smaller than the second number."
    demo_code: |-
        age = {ask} 'How old are you?'
        {if} age < 13
            {print} 'You are younger than me!'
-   name: "Bigger"
    explanation: "We use the `>` to check if the first number is bigger than the second number."
    demo_code: |-
        age = {ask} 'How old are you?'
        {if} age > 13
            {print} 'You are older than me!'
-   name: "Equal"
    explanation: "We use the `==` to check if two things are the same."
    demo_code: |-
        answer = {ask} 'What is 5 * 5?'
        {if} answer == 25
            {print} 'That {is} correct!'
-   name: "Not equal"
    explanation: "We use the `!=` to check if two things are not the same. "
    demo_code: |-
        answer = {ask} 'What is 5 * 5?'
        {if} answer != 25
            {print} 'That is not correct!'

-   name: "Smaller {or} equal"
    explanation: "We use the `<=` to check if the first number is smaller than or equal to the second number."
    demo_code: |-
        age = {ask} 'How old are you?'
        {if} age <= 12
            {print} 'You are younger than me!'

-   name: "Bigger or equal"
    explanation: "We use the `>=` to check if the first number is bigger than or equal to the second number."
    demo_code: |-
        age = {ask} 'How old are you?'
        {if} age >= 14
            {print} 'You are older than me!'
15:
-   name: "{while}"
    explanation: "We can use the `{while}` loop with not equal"
    demo_code: |-
        answer = 0
        {while} answer != 25
            answer = {ask} 'What is 5 times 5?'
        {print} 'A correct answer has been given'
-   name: "Smaller {while}"
    explanation: "We can also use the `{while}` loop with `<` and `>`. "
    demo_code: |-
        count = 1
        {while} count < 3
            {print} 'We do this ' 3 - count ' more times'
            count = count + 1
        {print} 'We are done'
16:
-   name: "square brackets"
    explanation: "Lists with square brackets"
    demo_code: |-
        fruit = ['apple', 'banana', 'cherry']
        {print} fruit
-   name: "Get an item from a list"
    explanation: "To get an item from a list we use [number] so fruit[1] means, get the first fruit from the list!"
    demo_code: |-
        fruit = ['banana', 'apple', 'cherry']
        firstfruit = fruit[1]
        {print} firstfruit
-   name: "Get a random item from a list"
    explanation: "To get a random item from a list we use [random] so fruit[random] means, get a random fruit from the list!"
    demo_code: |-
        fruit = ['banana', 'apple', 'cherry']
        random_fruit = fruit[random]
        {print} random_fruit
17:
-   name: "`{for}` avec `:`"
    explanation: "Utilisant un `{for}` sur plusieurs lignes, il te faut un `:` √† la fin"
    demo_code: |-
        {for} i {in} {range} 1 {to_list} 10:
            {print} i
        {print} ' Cache toi ou je te verrai !.'
-   name: "`{if}` avec `:`"
    explanation: "Nous faisons de la m√™me mani√®re avec tous nos commandes `{if}`."
    demo_code: |-
        couleur = {ask} 'Quelle couleur pr√©f√®res-tu ?'
        {if} couleur {is} 'vert':
            {print} 'Tu as choisi le vert.'
        {else}:
            {print} 'Tu as choisi un autre couleur que le vert.'
-   name: "(Optionnel) `{elif}`"
    explanation: "Nous devons faire de m√™me avec toutes nos `{if}` d√©clarations."
    demo_code: |-
        a = 2
        {if} a {is} 1:
            {print} 'a est √©gal √† 1'
        {elif} a {is} 2:
            {print} 'a est √©gal √† 2'
        {else}:
            {print} 'a est ni 1 ni 2'
18:
-   name: "{print}"
    explanation: "With `{print}` you need to use parentheses"
    demo_code: |-
        {print}('hi!')
-   name: "{print} with var"
    explanation: "With `{print}` you need to use parentheses and commas if you {print} more items"
    demo_code: |-
        name = 'Hedy'
        {print}('my name is ', name)
-   name: '{print} with var'
    explanation: With `{print}` you need to use parentheses and commas if you {print} more items
    demo_code: "name = 'Hedy'\n{print}('my name is ', name)"
-   name: ask something with {input}
    explanation: Use `{input}` instead of `{ask}` to ask something
    demo_code: "name = {input}('What is your name?')\n{print}('So your name is ', name)"
