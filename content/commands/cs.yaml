1:
-   explanation: Vypi≈° nƒõco pomoc√≠ `print`.
    example: 'P≈ô√≠klad: print V√≠tej v Hedy!'
    demo_code: print V√≠tej v Hedy!
    name: '{print}'
-   explanation: Zeptej se na nƒõco pomoc√≠ `ask`.
    example: 'P≈ô√≠klad: ask Jak√° je tvoje nejobl√≠benƒõj≈°√≠ barva?'
    demo_code: ask Jak√° je tvoje nejobl√≠benƒõj≈°√≠ barva?
    name: '{ask}'
-   explanation: Zopakuj nƒõco pomoc√≠ `echo`.
    example: 'P≈ô√≠klad: echo Tvoje nejobl√≠benƒõj≈°√≠ barva tedy je'
    demo_code: |-
        ask Jak√° je tvoje nejobl√≠benƒõj≈°√≠ barva?
        echo Tvoje nejobl√≠benƒõj≈°√≠ barva tedy je
    name: '{echo}'
-   name: '{print} emojis'
    explanation: print an emoji with `{print}`
    example: 'Example: {print} üôã‚Äç üåç ‚ùó'
    demo_code: '{print} üôã üåç ‚ùó'
-   explanation: Draw a line with `{forward}`.
    example: 'Example: {forward} 100'
    demo_code: '{forward} 100'
    name: '{forward}'
-   demo_code: "{forward} 25\n{turn} left\n{forward} 25\n{turn} right"
    name: '{turn}'
    explanation: turn the drawing turtle with `{turn}`
    example: 'Example: {turn}'
2:
-   explanation: Pojmenuj slovo pomoc√≠ `is` pro dal≈°√≠ pou≈æit√≠ v k√≥du.
    example: 'P≈ô√≠klad: jmeno is Hedy'
    demo_code: |-
        jmeno is Hedy
        print Ahoj jmeno
    name: '{is}'
-   explanation: Zeptej se na nƒõco p≈ô√≠kazem `ask`. Pozor! Mus√≠≈° odpovƒõƒè pojmenovat pomoc√≠ `is`.
    example: 'P≈ô√≠klad: barva is ask Jak√° je tvoje nejobl√≠benƒõj≈°√≠ barva?'
    demo_code: |-
        barva is ask Jak√° je tvoje nejobl√≠benƒõj≈°√≠ barva?
        print barva je tvoje nejobl√≠benƒõj≈°√≠!
    name: '{ask}'
-   name: '{sleep}'
    example: 'Example: {sleep} 2 '
    explanation: Let Hedy pause for a (couple of) second(s).
    demo_code: "{print} Let me think for one second...\n{sleep}\n{print} Hmm.. I need 3 more seconds...\n{sleep} 3\n{print} Eureka! Ive got it!"
-   name: is - turtle
    demo_code: "angle {is} 90\n{turn} angle\n{forward} 100"
    explanation: Give a number a name using `{is}`. You can choose the name yourself.
    example: 'Example: angle {is} 90'
3:
-   explanation: Vyber n√°hodn√© slovo ze seznamu pomoc√≠ `at` a `random`.
    example: 'P≈ô√≠klad: zvirata is pes, koƒçka, klokan'
    demo_code: |-
        zvirata is pes, koƒçka, klokan
        print zvirata at random
    name: choose_random
-   name: '{add}'
    explanation: add an item to a list
    example: 'Example: {add} dog {to_list} animals'
    demo_code: "animals {is} cow, cat\n{add} dog {to_list} animals"
-   name: '{remove}'
    explanation: remove an item from a list
    example: 'Example: {remove} dog {from} animals'
    demo_code: "animals {is} cat, dog, cow\n{remove} dog {from} animals"
4:
-   explanation: Vypi≈° text s jednoduch√Ωmi uvozovkami.
    example: "P≈ô√≠klad: print 'Ahoj, v√≠tej v Hedy!'"
    demo_code: print 'Ahoj, v√≠tej v Hedy!'
    name: '{print}'
-   explanation: Pojmenuj nƒõjak√© slovo a vypi≈° jej pomoc√≠ `print` bez uvozovek.
    example: 'P≈ô√≠klad: jmeno is Hedy'
    demo_code: |-
        jmeno is Hedy
        print 'Jmenuji se ' jmeno
    name: '{is}'
-   explanation: Zeptej se na nƒõco pomoc√≠ `ask`.
    example: 'P≈ô√≠klad: barva is ask Jak√° je tvoje nejobl√≠benƒõj≈°√≠ barva?'
    demo_code: |-
        barva is ask 'Jak√° je tvoje nejobl√≠benƒõj≈°√≠ barva?'
        print barva ' je tvoje nejobl√≠benƒõj≈°√≠ barva.'
    name: '{ask}'
5:
-   explanation: P≈ôipome≈à si `print` s uvozovkami.
    example: "P≈ô√≠klad: print 'Ahoj, v√≠tej v Hedy!'"
    demo_code: print 'Ahoj, v√≠tej v Hedy!'
    name: '{print}'
-   explanation: Zopakuj si p≈ô√≠kaz `ask`.
    example: "P≈ô√≠klad: barva is ask 'Jak√° je tvoje nejobl√≠benƒõj≈°√≠ barva?'"
    demo_code: |-
        barva is ask 'Jak√° je tvoje nejobl√≠benƒõj≈°√≠ barva?'
        print barva ' je tvoje nejobl√≠benƒõj≈°√≠ barva.'
    name: '{ask}'
-   explanation: Rozhodni se pomoc√≠ `if`.
    example: "P≈ô√≠klad: if barva is r≈Ø≈æov√° print 'Moje taky!' else print 'Fuj'"
    demo_code: |-
        barva is ask 'Jak√° je tvoje nejobl√≠benƒõj≈°√≠ barva?'
        if barva is r≈Ø≈æov√° print 'Moje taky!' else print 'Fuj'
    name: '{if}'
-   example: 'Example: {if} answer {is} far {forward} 100 {else} {forward} 5'
    demo_code: "answer {is} {ask} 'How far should I walk?'\n{if} answer {is} far {forward} 100 {else} {forward} 5"
    name: '{if} with turtle'
    explanation: Make a choice with `{if}`
-   name: '{in}'
    demo_code: "pretty_colors {is} green, yellow\ncolor {is} {ask} 'What {is} your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
    explanation: Check elements with `{in}`
    example: "Example: {if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
6:
-   explanation: Zkus si p≈ôesn√Ω v√Ωpis pomoc√≠ uvozovek.
    example: "P≈ô√≠klad: print '5 kr√°t 5 je ' 5 * 5"
    demo_code: print '5 kr√°t 5 je ' 5 * 5
    name: '{print}'
-   explanation: Zadej p≈ô√≠klad a ovƒõ≈ô v√Ωsledek.
    example: "P≈ô√≠klad: vysledek = ask 'Kolik je 10 plus 10?'"
    demo_code: |-
        vysledek = ask 'Kolik je 10 plus 10?'
        if answer is 20 print 'Ano!' else print 'Tƒõsnƒõ  vedle...'
    name: '{ask}'
-   name: "`ask` and `if` turtle"
    explanation: "Ask the user how many angles they want"
    example: "Example: angles = ask 'How many angles?'"
    demo_code: |-
        angles = ask 'How many angles?'
        angle = 360 / angles
        forward 50
7:
-   explanation: P≈ôipome≈à si `print` s uvozovkami.
    example: "P≈ô√≠klad: print 'Ahoj, v√≠tej v Hedy!'"
    demo_code: print 'Ahoj, v√≠tej v Hedy!'
    name: '{print}'
-   explanation: Zopakuj si p≈ô√≠kaz `ask`.
    example: 'P≈ô√≠klad: barva = ask Jak√° je tvoje nejobl√≠benƒõj≈°√≠ barva?'
    demo_code: |-
        barva = ask 'Jak√° je tvoje nejobl√≠benƒõj≈°√≠ barva?'
        print barva ' je tvoje nejobl√≠benƒõj≈°√≠ barva.'
    name: '{ask}'
-   explanation: Rozhodni se pomoc√≠ `if`.
    example: "P≈ô√≠klad: if barva is r≈Ø≈æov√° print 'Moje taky!' else print 'Fuj...'"
    demo_code: |-
        barva = ask 'Jak√° je tvoje nejobl√≠benƒõj≈°√≠ barva?'
        if barva is r≈Ø≈æov√° print 'Moje taky!' else print 'Fuj...'
    name: '{if}'
-   name: "repeat - turtle"
    explanation: "Repeat a line of code with `repeat`."
    example: "Example: repeat 3 times forward 10"
    demo_code: |-
        repeat 3 times forward 10
8:
-   explanation: Nƒõco vypi≈° a hlavnƒõ nezapome≈à na uvozovky!
    example: "P≈ô√≠klad: print '5 kr√°t 5 je ' 5 * 5"
    demo_code: print '5 kr√°t 5 je ' 5 * 5
    name: '{print}'
-   explanation: Zeptej se na v√Ωsledek p≈ô√≠kladu a zkontroluj, zda je spr√°vn√Ω. Teƒè u≈æ m≈Ø≈æe≈° vypsat v√≠ce ≈ô√°dk≈Ø.
    example: "P≈ô√≠klad: vysledek = ask 'Kolik je 5 plus 5?'"
    demo_code: |-
        vysledek = ask 'Kolik je 5 plus 5?'
        if vysledek is 10
            print 'Skvƒõl√° pr√°ce!'
            print 'V√Ωsledek opravdu je ' vysledek
        else
            print 'Ups, tƒõsnƒõ vedle...'
            print 'Spr√°vn√Ω v√Ωsledek je 10.'
    name: '{ask}'
-   name: '`{repeat}` with turtle'
    explanation: '{repeat} multiple lines'
    example: 'Example: draw a square'
    demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
9:
-   name: "`{if}` with multiple lines"
    explanation: "The answer of a sum of questions with '{ask}' and see if it is correct. Now we print out two lines."
    example: "Example: answer = {ask} 'What is 20 plus 20?'"
    demo_code: |-
        answer = {ask} 'What is 20 plus 20?'
        {if} answer {is} 20
            {print} 'Well done!!'
            {print} 'The answer is indeed' answer
        else
            {print} 'Wrong'
            {print} 'The answer is 20'
-   name: "`{repeat}` and turtle"
    explanation: "{repeat} multiple lines"
    example: "Example: create a square"
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
10:
-   name: "{print}"
    explanation: "print something. Remember to use a quotation mark for literal printing."
    example: "Example: {print} '5 times 5 is ' 5 * 5"
    demo_code: "{print} '5 times 5 is ' 5 * 5"
-   name: "{for} with a list"
    explanation: "print all things in a list "
    example: "Example: {for} animal {in} animals"
    demo_code: |-
        animals {is} dog, cat, blobfish
        {for} animal {in} animals
          {print} 'I love ' animal
11:
-   name: for loop
    explanation: Nahrad√≠me `repeat` za `for` a p≈ôid√°me rozsah.
    example: for pocitadlo in range 1  to 5
    demo_code: |-
        for pocitadlo in range 1  to 5
            print pocitadlo
-   explanation: Zeptej se na v√Ωsledek p≈ô√≠kladu a zkontroluj, zda je spr√°vn√Ω. Teƒè u≈æ m≈Ø≈æe≈° vypsat v√≠ce ≈ô√°dk≈Ø.
    example: "P≈ô√≠klad: vysledek = ask 'Kolik je 5 plus 5?'"
    demo_code: |-
        vysledek = ask 'Kolik je 5 plus 5?'
        if vysledek is 10
            print 'Skvƒõl√° pr√°ce!'
            print 'V√Ωsledek opravdu je ' vysledek
        else
            print 'Ups, tƒõsnƒõ vedle...'
            print 'Spr√°vn√Ω v√Ωsledek je 10.'
    name: '{ask}'
12:
-   name: "float directly"
    explanation: "Decimal numbers"
    example: "{print} 2.5 + 2.5"
    demo_code: |
        {print} 'Calculate away!'
        {print} 'Two and a half plus two and a half is...'
        {print} 2.5 + 2.5
-   name: "assign text"
    explanation: "Text with quotation marks after ="
    example: "name = 'Hedy'"
    demo_code: |
        name = 'Hedy the Robot'
        {print} 'Hello ' name
-   name: "quotes after {if} comparison"
    explanation: "Text with quotation marks after {if}"
    example: "name = 'Hedy'"
    demo_code: |
        name = {ask} 'Who are you?'
        {if} name = 'Hedy'
            {print} 'Hi there!'
-   name: "quotes in list"
    explanation: "A list with quotation marks"
    example: "name = 'Hedy', 'Felienne'"
    demo_code: |
        superheroes = 'Iron Man', 'Batman', 'Superman'
        {print} superheroes {at} {random}
13:
-   name: and
    explanation: Obƒõ tvrzen√≠ (nalevo i napravo od `and`) mus√≠ b√Ωt pravdiv√©.
    example: if 3+2 is 5 and 2+2 is 4
    demo_code: |-
        odpoved1 = ask 'Kolik je 3 + 2?'
        odpoved2 = ask 'Kolik je 2 + 2?'
        if odpoved1 is 5 and odpoved2 is 4
            print 'Obƒõ odpovƒõdi jsou spr√°vnƒõ!'
        else
            print 'Minim√°lnƒõ jedna z odpovƒõd√≠ je ≈°patnƒõ!'
-   name: or
    explanation: Alespo≈à jedno z tvrzen√≠ (nalevo a napravo od `or`) mus√≠ b√Ωt pravdiv√©, pokud plat√≠ obƒõ, je to taky v po≈ô√°dku.
    example: if 3+2 is 5 or 2+2 is 4
    demo_code: |-
        odpoved1 = ask 'Kolik je 3 + 2?'
        odpoved2 = ask 'Kolik je 2 + 2?'
        if odpoved1 is 5 or odpoved2 is 4
            print 'Alespo≈à jedna odpovƒõƒè je spr√°vnƒõ!'
        else
            print 'Obƒõ odpovƒõdi jsou ≈°patnƒõ!'
14:
-   name: Men≈°√≠
    explanation: Pou≈æ√≠v√°me `<`, abychom zjistili, jestli je prvn√≠ ƒç√≠slo men≈°√≠ ne≈æ druh√©. Nap≈ô√≠klad pokud chceme ovƒõ≈ôit, ≈æe je promƒõnn√° men≈°√≠ ne≈æ 15, pou≈æijeme `promenna < 15`.
    example: 'P≈ô√≠klad: vek < 13'
    demo_code: |-
        vek = ask 'Kolik je ti let?'
        if vek < 13
            print 'Jsi mlad≈°√≠ ne≈æ j√°!'
-   name: Vƒõt≈°√≠
    explanation: Pou≈æ√≠v√°me `>`, abychom zjistili, jestli je prvn√≠ ƒç√≠slo vƒõt≈°√≠ ne≈æ druh√©. Nap≈ô√≠klad pokud chceme ovƒõ≈ôit, ≈æe je promƒõnn√° vƒõt≈°√≠ ne≈æ 15, pou≈æijeme `promenna > 15`.
    example: 'P≈ô√≠klad: vek > 13'
    demo_code: |-
        vek = ask 'Kolik je ti let?'
        if vek > 13
            print 'Jsi mlad≈°√≠ ne≈æ j√°!'
-   name: Equal
    explanation: We use the `==` to check if two things are the same.
    example: 'For example: answer == 25'
    demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer == 25\n    {print} 'That {is} correct!'"
-   name: Not equal
    example: 'For example: answer != 25'
    explanation: 'We use the `!=` to check if two things are not the same. '
    demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer != 25\n    {print} 'That is not correct!'"
-   example: 'For example: age <= 12'
    explanation: We use the `<=` to check if the first number is smaller than or equal to the second number.
    name: Smaller {or} equal
    demo_code: "age = {ask} 'How old are you?'\n{if} age <= 12\n    {print} 'You are younger than me!'"
-   name: Bigger or equal
    explanation: We use the `>=` to check if the first number is bigger than or equal to the second number.
    example: 'For example: age >= 14'
    demo_code: "age = {ask} 'How old are you?'\n{if} age >= 14\n    {print} 'You are older than me!'"
15:
-   name: Pravdivostn√≠ while
    explanation: M≈Ø≈æeme pou≈æ√≠t `while` cyklus s `True` a `False`.
    example: 'P≈ô√≠klad: while spravna_odpoved is False'
    demo_code: |-
        odpoved = 0
        while odpoved != 25
            odpoved = ask 'Kolik je 5 * 5?'
        print 'Dostala jsem spr√°vnou odpovƒõƒè!'
-   name: While s oper√°tory men≈°√≠/vƒõt≈°√≠ ne≈æ
    explanation: Taky m≈Ø≈æeme pou≈æ√≠t `while` s oper√°tory `<` a `>`. Pozor, je pot≈ôeba porovn√°van√© ƒç√≠slo mƒõnit, aby cyklus nƒõkdy skonƒçil! Tady to dƒõl√°me pomoc√≠ `pocet + 1`.
    example: 'P≈ô√≠klad: while pocet < 3'
    demo_code: |-
        pocet = 1
        while pocet < 3
            print 'Toto zopakujeme je≈°tƒõ ' 3 - pocet 'kr√°t'
            pocet = pocet + 1
        print 'Hotovo'
16:
-   explanation: Seznamy teƒè p√≠≈°eme do hranat√Ωch z√°vorek a jejich polo≈æky do uvozovek.
    example: "P≈ô√≠klad: ovoce = ['jablko', 'ban√°n', 't≈ôe≈°nƒõ']"
    demo_code: |-
        ovoce = ['jablko', 'ban√°n', 't≈ôe≈°nƒõ']
        print ovoce
    name: square brackets
-   name: Vyber polo≈æku ze seznamu.
    explanation: Abychom dostali polo≈æku ze seznamu, pou≈æijeme [ƒç√≠slo], tak≈æe ovoce[1] n√°m vr√°t√≠ prvn√≠ho ƒçlena seznamu!
    example: 'P≈ô√≠klad: prvniovoce = ovoce[1]'
    demo_code: |-
        ovoce = ['jablko', 'ban√°n', 't≈ôe≈°nƒõ']
        prvni_ovoce = ovoce[1]
        print prvni_ovoce
-   name: Z√≠skej n√°hodnou polo≈æku ze seznamu.
    explanation: Abychom dostali n√°hodnou polo≈æku ze seznamu, pou≈æijeme [random]. Nap≈ô. ovoce[random] n√°m vr√°t√≠ n√°hodn√©ho ƒçlena seznamu!
    example: 'P≈ô√≠klad: nahodneovoce is ovoce[random]'
    demo_code: |-
        ovoce = ['jablko', 'ban√°n', 't≈ôe≈°nƒõ']
        nahodne_ovoce = ovoce[random]
        print nahodne_ovoce
17:
-   explanation: Kdy≈æ pou≈æ√≠v√°me `for`, mus√≠me na konec p≈ô√≠kazu s n√≠m d√°t `:`!
    example: 'for i in range 1 to 10:'
    demo_code: |-
        for i in range 1 to 10:
            print i
        print 'U≈æ jdu!'
    name: '{elif}'
-   explanation: To stejn√© mus√≠me udƒõlat i u `if`.
    example: 'if barva is zelen√°:'
    demo_code: |-
        barva = ask 'Jak√° je tvoje nejobl√≠benƒõj≈°√≠ barva?'
        if barva is 'zelen√°':
            print 'Barva je zelen√°.'
        else:
            print 'Barva nen√≠ zelen√°.'
    name: '{print}'
-   explanation: 'Teƒè ti uk√°≈æeme nov√Ω p≈ô√≠kaz, kter√Ω m≈Ø≈æe≈° zaƒç√≠t pou≈æ√≠vat: `elif`. `elif` je zkratka pro "else if", ƒçesky to znamen√° "jinak pokud". Nejd≈ô√≠v zkontrolujeme, jestli plat√≠ `if`, pokud ne, zjist√≠me, jestli je pravdiv√Ω `elif` a pokud i ten neplat√≠, vykon√° se p≈ô√≠kaz v `else`.'
    example: 'elif a is 5:'
    demo_code: |-
        a = 2
        if a is 1:
            print 'a je 1'
        elif a is 2:
            print 'a je 2'
        else:
            print 'a nen√≠ ani 1 ani 2'
    name: '{if}'
18:
-   name: "{print}"
    explanation: "With `{print}` you need to use parentheses"
    example: "{print}"
    demo_code: |-
        {print}('hi!')
-   name: "{print} with var"
    explanation: "With `{print}` you need to use parentheses and commas if you {print} more items"
    example: "{print}"
    demo_code: |-
        name = 'Hedy'
        {print}('my name is ', name)
-   name: '{print} with var'
    explanation: With `{print}` you need to use parentheses and commas if you {print} more items
    example: '{print}'
    demo_code: "name = 'Hedy'\n{print}('my name is ', name)"
-   name: ask something with {input}
    explanation: Use `{input}` instead of `{ask}` to ask something
    example: '{input}'
    demo_code: "name = {input}('What is your name?')\n{print}('So your name is ', name)"
