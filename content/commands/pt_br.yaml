1:
    -   name: "print"
        explanation: "printa algo com `print`."
        example: "Exemplo: print Ol√°! Seja bem-vindo(a) √† Hedy!"
        demo_code: "print Ol√°! Seja bem-vindo(a) √† Hedy!"
    -   name: "ask"
        explanation: "Pergunte algo com `ask`."
        example: "Exemplo: ask Qual a sua cor favorita?"
        demo_code: "ask Qual a sua cor favorita?"
    -   name: "echo"
        explanation: "Repita algo usando `echo`."
        example: "Exemplo: echo ent√£o a sua cor favorita √© "
        demo_code: |-
            ask Qual a sua cor favorita?
            echo ent√£o a sua cor favorita √©
    -   name: '{print} emojis'
        explanation: print an emoji with `{print}`
        example: 'Example: {print} üôã‚Äç üåç ‚ùó'
        demo_code: '{print} üôã üåç ‚ùó'
    -   name: '{forward}'
        explanation: Draw a line with `{forward}`.
        example: 'Example: {forward} 100'
        demo_code: '{forward} 100'
    -   name: '{turn}'
        explanation: turn the drawing turtle with `{turn}`
        example: 'Example: {turn}'
        demo_code: "{forward} 25\n{turn} left\n{forward} 25\n{turn} right"
2:
    -   name: "is"
        explanation: "D√™ um nome para uma palavra para usar no programa com `is`."
        example: "Exemplo: nome is Hedy."
        demo_code: |-
            nome is Hedy
            print bem-vindo(a) nome
    -   name: "ask"
        explanation: "Pergunte algo com `ask`. Cuidado! Voc√™ precisa dar √† resposta um nome com `is`."
        example: "Exemplo: cor is ask Qual a sua cor favorita?"
        demo_code: |-
            cor is ask Qual a sua cor favorita?
            print cor √© a sua favorita!
    -   explanation: Let Hedy pause for a (couple of) second(s).
        name: '{sleep}'
        example: 'Example: {sleep} 2 '
        demo_code: "{print} Let me think for one second...\n{sleep}\n{print} Hmm.. I need 3 more seconds...\n{sleep} 3\n{print} Eureka! Ive got it!"
    -   name: is - turtle
        explanation: Give a number a name using `{is}`. You can choose the name yourself.
        example: 'Example: angle {is} 90'
        demo_code: "angle {is} 90\n{turn} angle\n{forward} 100"
3:
    -   name: "choose_random"
        explanation: "Escolha uma palavra aleat√≥ria para formar um grupo com `at` e `random`"
        example: "Exemplo: animais is cachorro, gato, canguru."
        demo_code: |-
            animais is cachorro, gato, canguru
            print animais at random
    -   name: '{add}'
        explanation: add an item to a list
        example: 'Example: {add} dog {to_list} animals'
        demo_code: "animals {is} cow, cat\n{add} dog {to_list} animals"
    -   demo_code: "animals {is} cat, dog, cow\n{remove} dog {from} animals"
        name: '{remove}'
        explanation: remove an item from a list
        example: 'Example: {remove} dog {from} animals'
4:
    -   name: "print"
        explanation: "Para printar um texto usando aspas simples"
        example: "Exemplo: print 'Ol√° seja bem-vindo(a) √† Hedy.'"
        demo_code: "print 'Ol√° seja bem-vindo(a) √† Hedy.'"
    -   name: "is"
        explanation: "D√° um nome para um texto qualquer e printe sem aspas"
        example: "Exemplo: nome is Hedy."
        demo_code: |-
            nome is Hedy
            print 'meu nome is ' nome
    -   name: "ask"
        explanation: "Pergunta algo com `ask`."
        example: "Exemplo: cor is ask 'Qual a sua cor favorita?'"
        demo_code: |-
            cor is ask 'Qual a sua cor favorita?'
            print cor ' √© a sua favorita!'
5:
    -   name: "print"
        explanation: "Printa o texto usando aspas simples"
        example: "Exemplo: print 'Ol√° seja bem-vindo(a) √† Hedy.'"
        demo_code: "print 'Ol√° seja bem-vindo(a) √† Hedy.'"
    -   name: "ask"
        explanation: "Pergunta algo com `ask`."
        example: "Exemplo: cor is ask 'Qual a sua cor favorita?'"
        demo_code: |-
            cor is ask 'Qual a sua cor favorita?'
            print cor ' √© a sua favorita!'
    -   name: "if"
        explanation: "Fa√ßa uma escolha com `if`."
        example: "Exemplo: if cor is verde print 'bonita!' else print 'n√£o gostei'"
        demo_code: |-
            cor is ask 'Qual a sua cor favorita?'
            if cor is verde print 'bonita!' else print 'n√£o gostei'
    -   name: "in"
        explanation: "Confira itens de listas com `in`"
        example: "Exemplo: if cor in cores_bonitas print 'bonita!' else print 'certo'"
        demo_code: |-
            cores_bonitas is amarelo, verde
            cor is ask 'Qual sua cor favorita?'
            if cor in cores_bonitas print 'bonita!' else print 'certo'
    -   name: '{in}'
        explanation: Check elements with `{in}`
        example: "Example: {if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
        demo_code: "pretty_colors {is} green, yellow\ncolor {is} {ask} 'What {is} your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
6:
    -   name: "print"
        explanation: "Printa o texto usando aspas simples"
        example: "Exemplo: print '5 vezes 5 √© ' 5 * 5"
        demo_code: "print '5 vezes 5 √© ' 5 * 5"
    -   name: "ask 'e if com opera√ß√µes'"
        explanation: "Pede por uma opera√ß√£o e verifique se est√° correta."
        example: "Exemplo: resposta = ask 'Quanto √© 10 mais 10?'"
        demo_code: |-
            resposta = ask 'Quanto √© 10 mais 10?'
            if resposta is 20 print 'Acertou!' else print 'Errou! Tente de novo'
    -   name: "`ask` and `if` turtle"
        explanation: "Ask the user how many angles they want"
        example: "Example: angles = ask 'How many angles?'"
        demo_code: |-
            angles = ask 'How many angles?'
            angle = 360 / angles
            forward 50
7:
    -   name: "print"
        explanation: "Printa o texto usando aspas simples"
        example: "Exemplo: print 'Ol√° seja bem-vindo(a) √† Hedy.'"
        demo_code: "print 'Ol√° seja bem-vindo(a) √† Hedy.'"
    -   name: "ask"
        explanation: "Pergunta algo com `ask`."
        example: "Exemplo: cor = ask 'Qual a sua cor favorita?'"
        demo_code: |-
            cor = ask 'Qual a sua cor favorita?'
            print cor ' is your favorite!'
    -   name: "if"
        explanation: "Faz uma escolha com `if`."
        example: "Exemplo: if cor is verde print 'bonita!' else print 'n√£o gostei'"
        demo_code: |-
            cor = ask 'Qual a sua cor favorita?'
            if cor is verde print 'bonita!' else print 'n√£o gostei'
    -   name: "repeat - turtle"
        explanation: "Repeat a line of code with `repeat`."
        example: "Example: repeat 3 times forward 10"
        demo_code: |-
            repeat 3 times forward 10
8:
    -   name: "print"
        explanation: "Printa alguma coisa. Lembre-se de usar aspas simples para printar literais."
        example: "Exemplo: print '5 vezes 5 √© ' 5 * 5"
        demo_code: "print '5 vezes 5 √© ' 5 * 5"
    -   name: "if com m√∫ltiplas linhas"
        explanation: "Pergunta √† resposta de uma soma e verifica se est√° correta. Agora n√≥s podemos printar 2 linhas."
        example: "Exemplo: resposta = ask 'Quanto √© 5 mais 5?'"
        demo_code: |-
            resposta = ask 'Quanto √© 5 mais 5?'
            if resposta is 10
                print 'Muito bem!'
                print 'De fato, a resposta foi ' resposta
            else
                print 'Opa!'
                print 'A resposta √© 10'
    -   name: '`{repeat}` with turtle'
        example: 'Example: draw a square'
        explanation: '{repeat} multiple lines'
        demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
9:
    -   name: "`if` com m√∫ltiplas linhas"
        explanation: "Pedimos a resposta de uma soma com 'ask' e conferimos se est√° correto. Depois imprimos duas linhas."
        example: "Exemplo: resposta = ask 'Quanto √© 20 mais 20?'"
        demo_code: |-
            resposta = ask 'Quanto √© 40 mais 40?'
            if resposta is 40
                print 'Muito bem!!'
                print 'A resposta √© realmente' resposta
            else
                print 'Errado'
                print 'A resposta √© 40'
    -   name: "`repeat` e a tartaruga"
        explanation: "Repeat de m√∫ltiplas linhas"
        example: "Exemplo: criar um quadrado"
        demo_code: |-
            repeat 4 times
                turn 90
                forward 50
10:
    -   name: "print"
        explanation: "Exiba algo. Lembre de usar as aspas para exibir literais."
        example: "Exemplo: print '5 vezes 5 is ' 5 * 5"
        demo_code: "print '5 vezes 5 is ' 5 * 5"
    -   name: "for com lista"
        explanation: "exibir tudo de uma lista"
        example: "Exemplo: for animal in animais"
        demo_code: |-
            animais is dog, cat, blobfish
            for animal in animais
              print 'I love ' animal
11:
    -   name: "for loop"
        explanation: "Trocamos `repeat` por `for` e acrescentamos uma faixa de valores"
        example: "for contador in range 1 to 5"
        demo_code: |-
            for contador in range 1 to 5
                print contador
    -   name: '{ask}'
        explanation: ask for the answer to a sum and check if it is correct. We can now print 2 lines.
        example: "Example: answer = {ask} 'What is 5 plus 5?'"
        demo_code: "answer = {ask} 'What is 5 plus 5?'\n{if} answer {is} 10\n    {print} 'Well done!'\n    {print} 'Indeed, the answer was ' answer\nelse\n    {print} 'Oops!'\n    {print} 'The answer is 10'"
12:
    -   name: "float directly"
        explanation: "C√°lculos com decimais"
        example: "print 2.5 + 2.5"
        demo_code: |
            print 'V√° calcular!'
            print 'Dois e meios mais dois e meio s√£o...'
            print 2.5 + 2.5
    -   name: "float in var"
        explanation: "Armazenar um c√°lculo com decimais"
        example: "resposta = 2.5 + 2.5"
        demo_code: |
            resposta = 2.5 + 2.5
            print 'V√° calcular!'
            print 'Dois e meios mais dois e meio s√£o...'
            print resposta
    -   example: name = 'Hedy'
        demo_code: "name = {ask} 'Who are you?'\n{if} name = 'Hedy'\n    {print} 'Hi there!'\n"
        name: quotes after {if} comparison
        explanation: Text with quotation marks after {if}
    -   name: quotes in list
        explanation: A list with quotation marks
        example: name = 'Hedy', 'Felienne'
        demo_code: "superheroes = 'Iron Man', 'Batman', 'Superman'\n{print} superheroes {at} {random}\n"
13:
    -   name: "And"
        explanation: "Ambas as instru√ß√µes (√† esquerda e √† direita do `and`) t√™m de ser verdadeiras."
        example: "if 3+2 is 5 and 2+2 is 4"
        demo_code: |-
            resposta1 = ask 'Quanto √© 3+2?'
            resposta2 = ask 'Quanto √© 2+2?'
            if resposta1 is 5 and resposta2 is 4
                print 'Ambas as respostas est√£o corretas!'
            else
                print 'Pelo menos uma resposta est√° errada!'
    -   name: "Or"
        explanation: "Pelo menos uma das instru√ß√µes √† esquerda e √† direita do `or`, tem de estar correta. Se ambas estiverem corretas, tamb√©m n√£o tem problema."
        example: "if 3+2 is 5 or 2+2 is 4"
        demo_code: |-
            resposta1 = ask 'Quanto √© 3+2?'
            resposta2 = ask 'Quanto √© 2+2?'
            if resposta1 is 5 or resposta2 is 4
                print 'Pelo menos uma resposta est√° correta!'
            else
                print 'Ambas as respostas est√£o erradas!'
14:
    -   name: "Menor"
        explanation: "Usamos o `<` para verificar se o primeiro n√∫mero √© menor que o segundo n√∫mero. Por exemplo, se quisermos saber se uma vari√°vel √© menor que 15, usamos `variavel < 15`"
        example: "Por exemplo: idade < 13"
        demo_code: |-
            idade = ask 'Quantos anos voc√™ tem?'
            if idade < 13
                print 'Voc√™ √© mais novo a do que eu!'
    -   name: "Maior"
        explanation: "Usamos `>` para verificar se o primeiro n√∫mero √© maior que o segundo n√∫mero. Por exemplo, se quisermos saber se uma vari√°vel √© maior do que 15, usamos `variavel > 15`."
        example: "Por exemplo: idade > 13"
        demo_code: |-
            idade = ask 'Quantos anos voc√™ tem?'
            if idade > 13
                print 'Voc√™ √© mais velho a do que eu!'
    -   name: Equal
        example: 'For example: answer == 25'
        explanation: We use the `==` to check if two things are the same.
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer == 25\n    {print} 'That {is} correct!'"
    -   name: Not equal
        example: 'For example: answer != 25'
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer != 25\n    {print} 'That is not correct!'"
        explanation: 'We use the `!=` to check if two things are not the same. '
    -   demo_code: "age = {ask} 'How old are you?'\n{if} age <= 12\n    {print} 'You are younger than me!'"
        example: 'For example: age <= 12'
        name: Smaller {or} equal
        explanation: We use the `<=` to check if the first number is smaller than or equal to the second number.
    -   name: Bigger or equal
        explanation: We use the `>=` to check if the first number is bigger than or equal to the second number.
        example: 'For example: age >= 14'
        demo_code: "age = {ask} 'How old are you?'\n{if} age >= 14\n    {print} 'You are older than me!'"
15:
    -   name: "While booleano"
        explanation: "Podemos usar o ciclo `while` com `Verdadeiro` e `Falso`."
        example: "Exemplo: while resposta_certa is Falso"
        demo_code: |-
            resultado = 0
            while resultado != 25
                resultado = ask 'Quanto √© 5 vezes 5?'
            print 'Foi dada uma boa resposta'
    -   name: "while menor"
        explanation: |-
            Tamb√©m podemos utilizar o ciclo `while` com `<` e `>`. Mas
            cuidado, √© preciso mudar o n√∫mero para que ciclo termine.
            Aqui n√≥s fazemos isso com `contagem = contagem + 1`.
        example: "Por exemplo: while contagem < 3"
        demo_code: |-
            contagem = 1
            while contagem < 3
                print 'Fazemos isto mais ' 3 - contagem ' vezes.'
                contagem = contagem + 1
            print 'Acabamos!'
16:
    -   explanation: "Vamos colocar as listas entre colchetes! Tamb√©m vamos ter de colocar cada elemento da lista entre aspas simples (')."
        example: "Por exemplo: fruta = ['ma√ß√£', 'banana', 'cereja']"
        demo_code: |-
            fruta = ['ma√ß√£', 'banana', 'cereja']
            print fruta
        name: square brackets
    -   name: "Obt√©m um elemento da lista."
        explanation: "Para obter um elemento da lista usamos [n√∫mero] onde fruta[1] significa: obtenha a primeira fruta da lista!"
        example: "Por exemplo: primeirafruta is fruta[1]"
        demo_code: |-
            fruta = ['banana', 'ma√ß√£', 'cereja']
            primeira_fruta = fruta[1]
            print primeira_fruta
    -   name: "Obt√©m um elemento aleat√≥rio da lista."
        explanation: "Para obter um elemento aleat√≥rio da lista usamos [random], pelo que, fruta[random] significa: obt√©m uma fruta ao calhas da lista!"
        example: "For example: randomfruit is fruit[random]"
        demo_code: |-
            fruta = ['banana', 'ma√ß√£', 'cereja']
            qualquer_fruta = fruta[random]
            {print} qualquer_fruta
17:
    -   explanation: "Quando usamos um `for`, temos de colocar `:` ap√≥s a instru√ß√£o `for`!"
        example: "for i in range 1 to 10:"
        demo_code: |-
            for i in range 1 to 12:
                print i
            print 'Preparados ou n√£o, aqui vou eu!'
        name: '{elif}'
    -   explanation: "Precisamos fazer a mesma coisa para todas as instru√ß√µes `if`."
        example: "if cor is verde:'"
        demo_code: |-
            cor = ask 'Qual a sua cor favorita?'
            if cor is 'verde':
                print 'A cor √© verde.'
            else:
                print 'A cor n√£o √© verde.'
        name: '{print}'
    -   explanation: "Vamos mostrar um novo comando que pode ser usado: `elif`. `elif` significa \"else if\". Come√ßamos por verificar se o `if` √© verdadeiro, se n√£o for o caso, verificamos em seguida o `elif`, e se esse tamb√©m n√£o for verdadeiro, avan√ßamos para o `else`."
        example: "elif a is 5:"
        demo_code: |-
            a = 2
            if a is 1:
                print 'a √© 1'
            elif a is 2:
                print 'a √© 2'
            else:
                print 'a n√£o √© 1 nem 2'
        name: '{if}'
18:
  - name: "{print}"
    explanation: "With `{print}` you need to use parentheses"
    example: "{print}"
    demo_code: |-
      {print}('hi!')
  - name: "{print} with var"
    explanation: "With `{print}` you need to use parentheses and commas if you {print} more items"
    example: "{print}"
    demo_code: |-
      name = 'Hedy'
      {print}('my name is ', name)