1:
-   name: "{print}"
    explanation: "imprima algo com `{print}`."
    example: "Exemplo: {print} Ol√° bem-vindo(a) √† Hedy!"
    demo_code: "{print} Ol√° bem-vindo(a) √† Hedy!"
-   name: "{ask}"
    explanation: "pergunte algo com `{ask}`."
    example: "Exemplo: {ask} Qual a sua cor favorita?"
    demo_code: "{ask} Qual a sua cor favorita?"
-   name: "{echo}"
    explanation: "repita algo usando `{echo}`."
    example: "Exemplo: {echo} ent√£o a sua cor favorita √© "
    demo_code: |-
        {ask} Qual a sua cor favorita?
        {echo} ent√£o a sua cor favorita √©
-   name: '{print} emojis'
    explanation: imprima um emoji com `{print}`
    example: 'Exemplo: {print} üôã‚Äç üåç ‚ùó'
    demo_code: '{print} üôã üåç ‚ùó'
-   name: '{forward}'
    explanation: Desenhe uma linha com `{forward}`.
    example: 'Exemplo: {forward} 100'
    demo_code: '{forward} 100'
-   name: '{turn}'
    explanation: gire a tartaruga que desenha com `{turn}`
    example: 'Exemplo: {turn}'
    demo_code: "{forward} 25\n{turn} {left}\n{forward} 25\n{turn} {right}"
2:
-   name: "{is}"
    explanation: "D√™ um nome para uma palavra ser usada no programa com `{is}`."
    example: "Exemplo: nome {is} Hedy."
    demo_code: |-
        nome {is} Hedy
        {print} bem-vindo(a) nome
-   name: "{ask}"
    explanation: "pergunte algo com `{ask}`. Cuidado! Voc√™ precisa dar √† resposta um nome com `{is}`."
    example: "Exemplo: cor {is} {ask} Qual a sua cor favorita?"
    demo_code: |-
        cor {is} {ask} Qual a sua cor favorita?
        {print} cor √© a sua favorita!
-   explanation: Faz Hedy pausar por um (par de) segundo(s).
    name: '{sleep}'
    example: 'Exemplo: {sleep} 2 '
    demo_code: "{print} Deixe-me pensar por um segundo...\n{sleep}\n{print} Hmm.. Eu preciso de mais 3 segundos...\n{sleep} 3\n{print} Eureka! Eu entendi!"
-   name: √© - tartaruga
    explanation: D√™ um nome para um n√∫mero usando `{is}`. Voc√™ mesmo pode escolher o nome.
    example: 'Exemplo: √¢ngulo {is} 90'
    demo_code: "√¢ngulo {is} 90\n{turn} √¢ngulo\n{forward} 100"
3:
-   name: "escolhe_aleat√≥rio"
    explanation: "Escolha uma palavra aleat√≥ria de um grupo com `{at}` e `{random}`"
    example: "Exemplo: animais {is} cachorro, gato, canguru."
    demo_code: |-
        animais {is} cachorro, gato, canguru
        {print} animais {at} {random}
-   name: '{add}'
    explanation: adicionar um item a uma lista
    example: 'Exemplo: {add} cachorro {to_list} animais'
    demo_code: "animais {is} vaca, gato\n{add} cachorro {to_list} animais"
-   demo_code: "animais {is} gato, cachorro, vaca\n{remove} cachorro {from} animais"
    name: '{remove}'
    explanation: remover um item de uma lista
    example: 'Exemplo: {remove} cachorro {from} animais'
4:
-   name: "{print}"
    explanation: "imprime exatamente usando aspas simples"
    example: "Exemplo: {print} 'Ol√° bem-vindo(a) √† Hedy.'"
    demo_code: "{print} 'Ol√° bem-vindo(a) √† Hedy.'"
-   name: "{is}"
    explanation: "D√™ um nome para um texto qualquer e `{print}` sem aspas"
    example: "Exemplo: nome {is} Hedy."
    demo_code: |-
        nome {is} Hedy
        {print} 'meu nome √© ' nome
-   name: "{ask}"
    explanation: "pergunte algo com `{ask}`."
    example: "Exemplo: cor {is} {ask} 'Qual a sua cor favorita?'"
    demo_code: |-
        cor {is} {ask} 'Qual a sua cor favorita?'
        {print} cor ' √© a sua favorita!'
5:
-   name: "{print}"
    explanation: "imprime exatamente usando aspas simples"
    example: "Exemplo: {print} 'Ol√° bem-vindo(a) √† Hedy.'"
    demo_code: "{print} 'Ol√° bem-vindo(a) √† Hedy.'"
-   name: "{ask}"
    explanation: "pergunte algo com `{ask}`."
    example: "Exemplo: cor {is} {ask} 'Qual a sua cor favorita?'"
    demo_code: |-
        cor {is} {ask} 'Qual a sua cor favorita?'
        {print} cor ' √© a sua favorita!'
-   name: "{if}"
    explanation: "Fa√ßa uma escolha com `{if}`"
    example: "Exemplo: {if} cor {is} verde {print} 'bonita!' {else} {print} 'n√£o gostei'"
    demo_code: |-
        cor {is} {ask} 'Qual a sua cor favorita?'
        {if} cor {is} verde {print} 'bonita!' {else} {print} 'n√£o gostei'
-   name: "{if} com tartaruga"
    explanation: "Fa√ßa uma escolha com `{if}`"
    example: "Exemplo: {if} resposta {is} longe {forward} 100 {else} {forward} 5"
    demo_code: |-
        resposta {is} {ask} 'At√© onde eu devo andar?'
        {if} resposta {is} longe {forward} 100 {else} {forward} 5
-   name: '{in}'
    explanation: Verifique elementos com `{in}`
    example: "Exemplo: {if} cor {in} cores_bonitas {print} 'bonita!' {else} {print} 'n√£o gostei'"
    demo_code: "cores_bonitas {is} verde, amarelo\ncor {is} {ask} 'Qual √© a sua cor favorita?'\n{if} cor {in} cores_bonitas {print} 'bonita!' {else} {print} 'n√£o gostei'"
6:
-   name: "{print}"
    explanation: "imprime exatamente usando aspas simples"
    example: "Exemplo: {print} '5 vezes 5 √© ' 5 * 5"
    demo_code: "{print} '5 vezes 5 √© ' 5 * 5"
-   name: "{ask}"
    explanation: "pede por um c√°lculo e verifica se est√° correto."
    example: "Exemplo: resposta {is} {ask} 'Quanto √© 10 mais 10?'"
    demo_code: |-
        resposta = {ask} 'Quanto √© 10 mais 10?'
        {if} resposta {is} 20 {print} 'Acertou!' {else} {print} 'Ops'
-   name: "`{ask}` e `{if}` com tartaruga"
    explanation: "pergunte ao usu√°rio quantos √¢ngulos ele deseja"
    example: "Exemplo: √¢ngulos {is} {ask} 'Quantos √¢ngulos?'"
    demo_code: |-
        √¢ngulos = {ask} 'Quantos √¢ngulos?'
        √¢ngulo = 360 / √¢ngulos
        {forward} 50
7:
-   name: "{print}"
    explanation: "imprime exatamente usando aspas simples"
    example: "Exemplo: {print} 'Ol√° bem-vindo(a) √† Hedy.'"
    demo_code: "{print} 'Ol√° bem-vindo(a) √† Hedy.'"
-   name: "{ask}"
    explanation: "pergunte algo com `{ask}`."
    example: "Exemplo: cor = {ask} 'Qual a sua cor favorita?'"
    demo_code: |-
        cor = {ask} 'Qual a sua cor favorita?'
        {print} cor ' √© a sua favorita!'
-   name: "{if}"
    explanation: "Fa√ßa uma escolha com `{if}`"
    example: "Exemplo: {if} cor {is} verde {print} 'bonita!' {else} {print} 'n√£o gostei'"
    demo_code: |-
        cor = {ask} 'Qual a sua cor favorita?'
        {if} cor {is} verde {print} 'bonita!' {else} {print} 'n√£o gostei'
-   name: "{repeat} - tartaruga"
    explanation: "repita uma linha de c√≥digo com `{repeat}`."
    example: "Exemplo: {repeat} 3 {times} {forward} 10"
    demo_code: |-
        {repeat} 3 {times} {forward} 10
8:
-   name: "{print}"
    explanation: "imprima alguma coisa. Lembre-se de usar aspas simples para imprimir exatamente."
    example: "Exemplo: {print} '5 vezes 5 √© ' 5 * 5"
    demo_code: "{print} '5 vezes 5 √© ' 5 * 5"
-   name: "{ask}"
    explanation: "pergunte pela resposta de uma soma e verifique se est√° correta. Agora n√≥s podemos imprimir 2 linhas."
    example: "Exemplo: resposta {is} {ask} 'Quanto √© 5 mais 5?'"
    demo_code: |-
        resposta = {ask} 'Quanto √© 5 mais 5?'
        {if} resposta {is} 10
            {print} 'Muito bem!'
            {print} 'De fato, a resposta foi ' resposta
        {else}
            {print} 'Ops!'
            {print} 'A resposta √© 10'
-   name: '`{repeat}` com tartaruga'
    example: 'Exemplo: desenhar um quadrado'
    explanation: '{repeat} m√∫ltiplas linhas'
    demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
9:
-   name: "`{if}` com m√∫ltiplas linhas"
    explanation: "Pedimos pela resposta de uma soma com '{ask}' e verificamos se est√° correta. Agora vamos imprimir duas linhas."
    example: "Exemplo: resposta = {ask} 'Quanto √© 20 mais 20?'"
    demo_code: |-
        resposta = {ask} 'Quanto √© 10 mais 10?'
        {if} resposta {is} 20
            {print} 'Muito bem!!'
            {print} 'A resposta √© realmente' resposta
        {else}
            {print} 'Errado'
            {print} 'A resposta √© 20'
-   name: "`{repeat}` e tartaruga"
    explanation: "{repeat} m√∫ltiplas linhas"
    example: "Exemplo: criar um quadrado"
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
10:
-   name: "{print}"
    explanation: "imprima algo. Lembre-se de usar aspas para imprimir exatamente."
    example: "Exemplo: {print} '5 vezes 5 is ' 5 * 5"
    demo_code: "{print} '5 vezes 5 is ' 5 * 5"
-   name: "{for} com uma lista"
    explanation: "imprimir tudo em uma lista "
    example: "Exemplo: {for} animal {in} animais"
    demo_code: |-
        animais {is} cachorro, gato, peixe
        {for} animal {in} animais
          {print} 'Em amo ' animal
11:
-   name: "la√ßo {for}"
    explanation: "N√≥s podemos usar `{for}` com um {range}"
    example: "{for} contador {in} {range} 1 {to} 5"
    demo_code: |-
        {for} contador {in} {range} 1 {to} 5
            {print} contador
-   name: '{ask}'
    explanation: pergunte pela resposta de uma soma e verifique se est√° correta. Agora n√≥s podemos imprimir duas linhas.
    example: "Exemplo: resposta = {ask} 'Quanto √© 5 mais 5?'"
    demo_code: "resposta = {ask} 'Quanto √© 5 mais 5?'\n{if} resposta {is} 10\n    {print} 'Muito bem!'\n    {print} 'De fato, a resposta era ' resposta\n{else}\n    {print} 'Ops!'\n    {print} 'A resposta √© 10'"
12:
-   name: "n√∫meros reais"
    explanation: "C√°lculos com decimais"
    example: "{print} 2.5 + 2.5"
    demo_code: |
        {print} 'V√° calcular!'
        {print} 'Dois e meio mais dois e meio s√£o...'
        {print} 2.5 + 2.5
-   name: "atribui√ß√£o de texto"
    explanation: "Texto com aspas simples depois ="
    example: "nome = 'Hedy'"
    demo_code: |
        nome = 'Hedy a Rob√¥'
        {print} 'Ol√° ' nome
-   example: nome = 'Hedy'
    demo_code: "nome = {ask} 'Quem √© voc√™?'\n{if} nome = 'Hedy'\n    {print} 'Ol√°!'\n"
    name: aspas simples depois da compara√ß√£o com {if}
    explanation: Texto com aspas simples depois de {if}
-   name: texto com aspas dentro de uma lista
    explanation: Uma lista com aspas simples
    example: nome = 'Hedy', 'Felienne'
    demo_code: "super_her√≥is = 'Homem de Ferro', 'Batman', 'Super-Homem'\n{print} super_her√≥is {at} {random}\n"
13:
-   name: "{and}"
    explanation: "Ambas as partes precisam ser verdadeiras"
    example: "{if} 3+2 {is} 5 {and} 2+2 {is} 4"
    demo_code: |-
        resposta1 = {ask} 'Quanto √© 3+2?'
        resposta2 = {ask} 'Quanto √© 2+2?'
        {if} resposta1 {is} 5 {and} resposta2 {is} 4
            {print} 'Ambas as respostas est√£o corretas!'
        {else}
            {print} 'Pelo menos uma resposta est√° errada!'
-   name: "{or}"
    explanation: "Pelo menos uma das partes precisa estar correta. Se ambas estiverem corretas, tamb√©m n√£o tem problema."
    example: "{if} 3+2 {is} 5 {or} 2+2 {is} 4"
    demo_code: |-
        resposta1 = {ask} 'Quanto √© 3+2?'
        resposta2 = {ask} 'Quanto √© 2+2?'
        {if} resposta1 {is} 5 {or} resposta2 {is} 4
            {print} 'Pelo menos uma resposta est√° correta!'
        {else}
            {print} 'Ambas as respostas est√£o erradas!'
14:
-   name: "Menor"
    explanation: "N√≥s usamos o `<` para verificar se o primeiro n√∫mero √© menor que o segundo n√∫mero."
    example: "Por exemplo: idade < 12"
    demo_code: |-
        idade = {ask} 'Quantos anos voc√™ tem?'
        {if} idade < 13
            {print} 'Voc√™ √© mais novo do que eu!'
-   name: "Maior"
    explanation: "N√≥s usamos `>` para verificar se o primeiro n√∫mero √© maior que o segundo n√∫mero."
    example: "Por exemplo: idade > 12"
    demo_code: |-
        idade = {ask} 'Quantos anos voc√™ tem?'
        {if} idade > 13
            {print} 'Voc√™ √© mais velho do que eu!'
-   name: Igual
    example: 'Por exemplo: resposta == 25'
    explanation: N√≥s usamos o `==` para verificar se duas coisas s√£o id√™nticas.
    demo_code: "resposta = {ask} 'Quanto √© 5 * 5?'\n{if} resposta == 25\n    {print} 'Est√° correto!'"
-   name: Diferente
    example: 'Por exemplo: resposta != 25'
    demo_code: "resposta = {ask} 'Quanto √© 5 * 5?'\n{if} resposta != 25\n    {print} 'N√£o est√° correto!'"
    explanation: 'N√≥s usamos o `!=` para verificar se duas coisas s√£o diferentes. '
-   demo_code: "idade = {ask} 'Quantos anos voc√™ tem?'\n{if} idade <= 12\n    {print} 'Voc√™ √© mais novo do que eu!'"
    example: 'Por exemplo: idade <= 12'
    name: Menor ou igual
    explanation: N√≥s usamos o `<=` para verificar se o primeiro n√∫mero √© menor ou igual ao segundo n√∫mero.
-   name: Maior ou igual
    explanation: N√≥s podemos usar o `>=` para verificar se o primeiro n√∫mero √© maior ou igual ao segundo n√∫mero.
    example: 'Por exemplo: idade >= 14'
    demo_code: "idade = {ask} 'Quantos anos voc√™ tem?'\n{if} idade >= 14\n    {print} 'Voc√™ √© mais velho do que eu!'"
15:
-   name: "{while}"
    explanation: "N√≥s podemos usar o la√ßo `{while}` com diferente"
    example: "Exemplo: {while} resposta_certa != 25"
    demo_code: |-
        resposta = 0
        {while} resposta != 25
            resposta = {ask} 'Quanto √© 5 vezes 5?'
        {print} 'Foi dada uma boa resposta'
-   name: "{while} menor"
    explanation: |-
        N√≥s tamb√©m podemos usar o la√ßo `{while}` com `<` e `>`. 
    example: "Por exemplo: {while} contagem < 3"
    demo_code: |-
        contagem = 1
        {while} contagem < 3
            {print} 'Fazemos isto mais ' 3 - contagem ' vezes.'
            contagem = contagem + 1
        {print} 'Acabamos'
16:
-   explanation: "Listas com colchetes"
    example: "Por exemplo: fruta = ['ma√ß√£', 'banana', 'cereja']"
    demo_code: |-
        fruta = ['ma√ß√£', 'banana', 'cereja']
        {print} fruta
    name: colchetes
-   name: "Obter um elemento de uma lista"
    explanation: "Para obter um elemento de uma lista n√≥s usamos [n√∫mero] onde fruta[1] significa: obtenha a primeira fruta da lista!"
    example: "Por exemplo: primeira_fruta = fruta[1]"
    demo_code: |-
        fruta = ['banana', 'ma√ß√£', 'cereja']
        primeira_fruta = fruta[1]
        {print} primeira_fruta
-   name: "Obter um elemento aleat√≥rio de uma lista"
    explanation: "Para obter um elemento aleat√≥rio de uma lista n√≥s usamos [random], ent√£o fruta[random] significa obter uma fruta qualquer da lista!"
    example: "Por exemplo: qualquer_fruta {is} fruta[random]"
    demo_code: |-
        fruta = ['banana', 'ma√ß√£', 'cereja']
        qualquer_fruta = fruta[random]
        {print} qualquer_fruta
17:
-   explanation: "`{elif}`."
    example: "{elif} a {is} 5:"
    demo_code: |-
        a = 2
        {if} a == 1:
            {print} 'a √© 1'
        {elif} a == 2:
            {print} 'a √© 2'
        {else}:
            {print} 'a n√£o √© 1 nem 2'
    name: '{elif}'
-   explanation: "Quando n√≥s usamos um `{for}`, precisamos colocar um `:` depois do comando `{for}`!"
    example: "{for} i {in} {range} 1 {to} 10:"
    demo_code: |-
        {for} i {in} {range} 1 {to} 12:
            {print} i
        {print} 'Pronto ou n√£o, aqui vou eu!'
    name: '{print}'
-   explanation: "N√≥s precisamos fazer o mesmo com todos os nossos comandos `{if}`"
    example: "{if} cor {is} verde:"
    demo_code: |-
        cor = {ask} 'Qual a sua cor favorita?'
        {if} cor == 'verde':
            {print} 'Sua cor favorita √© verde'
        {else}:
            {print} 'Sua cor favorita n√£o √© verde'
    name: '{if}'
18:
-   name: "{print}"
    explanation: "Depois de `{print}` voc√™ precisa usar par√™nteses"
    example: "{print}"
    demo_code: |-
        {print}('ol√°!')
-   name: "{range}"
    explanation: "Depois de `{range}` voc√™ precisa usar par√™nteses"
    example: "{range}"
    demo_code: |-
        {for} i {in} {range} (1,10):
            {print}('Ol√°, vezes ', i)
-   name: '{print} com vari√°vel'
    explanation: Com `{print}` voc√™ precisa usar par√™nteses e v√≠rgulas para um {print} com mais itens
    example: '{print}'
    demo_code: "nome = 'Hedy'\n{print}('meu nome √© ', nome)"
-   name: pergunte alguma coisa com {input}
    explanation: Use `{input}` ao inv√©s de `{ask}` para perguntar alguma coisa
    example: '{input}'
    demo_code: "nome = {input}('Qual √© o seu nome?')\n{print}('Ent√£o o seu nome √© ', nome)"
