import json
import os
current_directory = os.path.dirname(os.path.abspath(__file__))

# TODO:
# teacher content/answers

templates = {
    'text': '''**{icon} Vraag**: {question} <br>
{note}
{lines} <br>
''',
    'output': '''**{icon} Vraag**: Wat is de uitvoer van deze code? <br>
Code:									Uitvoer:
```hedy
{code}							
```
'''
}

line = '____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________<br>\n'


def convert_json(json):
    assignment_type = json['assignment']
    template = templates[assignment_type]

    if 'lines' in json.keys():
        number_of_lines = json['lines']

        numbered = 'numbered' in json.keys()
        if numbered:
            # replace the number of lines with actual lines
            json['lines'] = ''.join([str(x) + '. ' + line for x in range(1, number_of_lines+1)])
        else:
            # replace the number of lines with actual lines
            json['lines'] = line * number_of_lines

    if 'note' in json.keys():
        json['note'] += '<br>'  # add a newline if we have a note
    else:
        json['note'] = ''

    if 'code' in json.keys():
        code_with_output = ''
        current_line = 1

        for line_of_code in json['code'].split('\n'):
            # make the length with spaces, then with _ for the lines
            output_line = line_of_code.ljust(38, ' ')
            if current_line <= number_of_lines:
                output_line = output_line.ljust(76, '_')
                current_line += 1
            code_with_output += output_line + '\n'

        json['code'] = code_with_output
        # todo: add more empty lines if we need more (not an issue till we get to loops)

    return template.format(**json)


def process_workbook(file_path):
    workbook_output = ''
    json_found = ''
    inside_json = False

    try:
        with open(file_path, 'r') as file:
            for line in file:
                line = line.strip()  # Strip leading and trailing whitespace

                if not line.startswith('{'):
                    if inside_json:
                        json_found += line  # Add line to the buffer
                    else:
                        # this is not JSON, but markdown, just output
                        workbook_output += line + '\n'

                # Start of a JSON object
                else:
                    inside_json = True
                    json_found = line  # Start buffering JSON content

                # End of JSON
                if line.endswith('}'):
                    inside_json = False
                    # Try to parse the buffered content as JSON
                    try:
                        json_part = json.loads(json_found)
                        workbook_output += convert_json(json_part)
                        print(workbook_output)
                        f = open(current_directory + 'tester.md', "w")
                        f.write(workbook_output)
                        f.close()

                    except json.JSONDecodeError as E:
                        # Skip the buffer if it's not valid JSON
                        print(E)
                        print(json_part)
                    finally:
                        json_found = ""  # Reset buffer after attempting to parse

    except FileNotFoundError:
        print(f"File {file_path} not found.")

    return workbook_output


lesson = '1'

input_path = f"/lesson{lesson}/les{lesson}a.md"
json_data = process_workbook(current_directory+input_path)
print()

output_path = f"/lesson{lesson}/les{lesson}a-autogenerated.md"

f = open(current_directory+output_path, "w")
f.write(json_data)
f.close()
