sections:
-   title: "Introduction"
    key: "intro"
    subsections:
    -   title: "Vad är Hedy?"
        text: |
            Hedy is a textual programming language, specifically developed for (pre-)teens (10 to 15 years old).
            In contrast to programming languages for kids, like Scratch, Hedy doesn't use code blocks but textual code.
            So with Hedy you'll learn how to type code like the real programmers do, but in small steps with playful exercises.
            This way Hedy can function as a stepping stone to real programming languages like Python in an accessible and mostly fun way!
            If you want to know more, you can watch this <a href="https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s" target="_blank">video</a> about the development of Hedy as a programming language.
    -   title: "Målgrupp"
        text: |
            Hedy is developed with middle school and junior high school students in mind (ages 10 - 15).
            It's important for the students to be able to read well. We recommend not to start with Hedy before the students have achieved at least a 3rd grade reading level.
            Students (and teachers!) don't need any programming experience before starting with Hedy.
    -   title: "Hur fungerar Hedy?"
        text: |
            Hedy is divided into levels, in which new commands are taught. Each level contains a variety of adventures to practice the newly learned commands.
            As a teacher, you get to decide which adventures are available for your students. Will they be making a restaurant, a calculator or a haunted house this level? Within each level, the adventures are arranged from easiest to hardest.
            So your students keep getting challenged. The adventures can be done by the students individually, or you can use them in a classical instruction.

            The adventures also include a code example, to make sure the less digitally informed teachers are able to use Hedy too!
            Of course Hedy also caters to the creative teachers that love to make their own lessonplans and adventures!

            After programming all the adventures of a certain level, your students can test their knowledge in the quiz.
            You can track your students' work and their progress on the class page.
    -   title: "Devices"
        text: |
            Hedy är webbaserat, vilket betyder att det fungerar på alla enheter med en webbläsare (Google Chrome, Firefox, Edge etc), så bärbara datorer, Chromebooks, surfplattor och till och med mobiler är lämpliga för att använda Hedy.
            Du behöver inte ladda ner något innan du börjar arbeta med Hedy, det är bara att gå till webbplatsen så är du redo!
    -   title: "The Hedy Community"
        text: |
            Alla Hedy-lärare, -programmerare och andra fans är välkomna till vår Discord-server <a href="https://discord.gg/8yY7dEme9r" target="_blank"></a> . Detta är det perfekta stället att prata om Hedy: vi har kanaler där du kan visa dina coola projekt och lektioner, kanaler för att rapportera fel och kanaler för att prata med andra lärare och med Hedy-teamet.
            <a href="https://www.youtube.com/watch?v=Lyz_Lnd-_aI" target="_blank">Här</a> hittar du en video om hur du går med i Discord-gemenskapen.
-   title: "Tutorial"
    key: "tutorial"
    subsections:
    -   title: "Tutorial"
        text: |
            Vill du följa handledningen (igen)? Klicka <a href="https://hedycode.com/tutorial" target="_blank">här</a>.
-   title: "Teaching preparations"
    key: "preparations"
    subsections:
    -   title: "Creating a Class"
        text: |
            Som lärare kan du skapa en klass för dina elever. I den här klassen kan du se elevernas konton och program och du kan följa deras framsteg.
            Den här <a href="https://www.youtube.com/watch?v=Y3RTIWftJQg" target="_blank">videon</a> visar hur du snabbt skapar en klass i Hedy.
    -   title: "Customize your Class"
        text: |
            Du kan också anpassa din klass och välja vilka äventyr som är tillgängliga för dem. På så sätt blir dina elever inte överväldigade av mängden äventyr och nivåer, och de kan fokusera specifikt på de äventyr som du vill att de ska öva med.
            Den här <a href="https://www.youtube.com/watch?v=qva9gXBoUwY&t=10s" target="_blank">videon</a> visar hur du anpassar din klass.
    -   title: "Student Accounts"
        text: |
            Det finns två sätt att låta elever gå med i din klass: du kan skapa konton åt dem eller så kan de skapa sina egna konton.

            **Du skapar konton för dina elever**
            Det enklaste sättet att lägga till elever i din klass är att skapa ett konto åt dem. Detta gör du genom att klicka på knappen "skapa studentkonton" och fylla i användarnamn och lösenord för dem.
            Eleverna kan logga in med det användarnamn och lösenord som du har valt. Sen kan de ändra sitt användarnamn eller lösenord om de vill och de kommer fortfarande att finnas kvar i din klass.
            Den här <a href="https://www.youtube.com/watch?v=eEQvik-Ce5M" target="_blank">videon</a> visar hur du lägger till elever i din klass på det snabbaste och enklaste sättet.

            **Studenterna skapar sina egna konton**
            Dina elever kan också gå in på Hedy-sajten och skapa sina egna konton, precis som du gjorde. För att gå med i din klass behöver de bara klicka på inbjudningslänken.
            Inbjudningslänken hittar du på klassens sida och kan skicka den till dina elever. Tänk på att dina elever måste vara inloggade på Hedy när de klickar på länken för att det ska fungera smidigt.
            Du kan också manuellt bjuda in en elev till din klass med knappen "Bjud in efter användarnamn".

    -   title: "Setting preferred language"
        text: |
            När eleverna skapar profiler ska de välja ett "önskat språk". Hedy kommer alltid att laddas på det valda språket.
            Det går alltid att ändra detta språk senare genom att navigera till "Mitt konto" och "Mina personliga inställningar" igen.
            Från och med december 2021 är det obligatoriskt att ställa in ett önskat språk för varje Hedy-konto.
            Om ditt konto eller dina elevers konton skapades tidigare än detta datum kommer du att få ett meddelande om att ett önskat språk saknas.
            Inga bekymmer! Navigera till "Min profil" och ange ett språk i dina profilinställningar.
            Tills du ställer in ett språk kommer Hedy att visas på ditt webbläsarspråk och, när detta språk inte stöds, på engelska.

            **För personer som inte talar engelska**
            Du kan inte bara ändra språket i äventyren till ditt eget språk. Du kan också välja vilket språk nyckelorden (till exempel "print" eller "ask") ska vara på.
            På så sätt kan du lära dina elever att koda med engelska nyckelord, men du kan också låta dem programmera på sitt eget språk. Nederländska elever kan till exempel använda kommandot "vraag" i stället för "ask".

            **Video**
            Den här <a href="https://www.youtube.com/watch?v=QrVZETj4oLM" target="_blank">videon</a> visar hur du ställer in ett önskat språk och ändrar nyckelorden till ditt önskade språk också.

    -   title: "Storing programs"
        text: |
            When you are logged in, you'll see My programs next to your profile icon.
            This option exists for your students too. In My programs you can find all the programs that you've worked on.
            By default, programs will be saved to 'My programs' when you run the code, and every 10 seconds, under their default name
            and their level (for example: Story 5). If you want to store a program under a new name, just type the new name in the name bar.
            Currently, only one program can be saved per level, per tab.

            You (and your students) can also share programs using the share button next to program names.
            These programs will be posted on our <a href="https://hedy.org/explore" target="_blank">explore page</a>, for everybody to see and use.
            If you want to unshare your program, go to 'My programs' and click 'Unshare'.

            The paper plane icon can be used to hand in programs to the teacher of a class. Programs that have been handed is will no longer be editable.

-   title: "Teaching with Hedy"
    key: "teaching"
    subsections:
    -   title: "Undervisa med Hedy"
        text: |
            Hedy har många olika nivåer som var och en lär ut en ny färdighet. Vi rekommenderar att du lär ut en nivå per lektion.
            Det ger dina elever tid att fullt ut förstå ett nytt kommando eller begrepp och öva på det, innan de går vidare till nästa nivå.
            Vi använder den här strukturen i våra lektioner: Introduktion, Nya begrepp och kommandon, låt oss börja arbeta, pussel och quiz.
    -   title: "Slides"
        text: |
            **COMING SOON** Here you'll soon find slides to use in your lessons.
    -   title: "Introduction"
        text: |
            You can start your lessons by activating your students' prior knowledge: What do they already know about the subject, what did they learn in the previous lesson and which mistakes did they make that they've now learned from?
            This way all the previously learned commands and frequently made mistakes are fresh in your students' memories, when you start introducing the new lesson.
    -   title: "Introduction of new concepts and commands"
        text: |
            The new concepts and commands can be very hard for some students to fully understand.
            That's why it's of importance to model the proper use of the new commands to your students.
            Especially in the lower levels, where some students have no experience whith programming at all, it can be hard for them to understand the new abstract concepts.
            Showing a lot of examples makes an abstract concept (for instance: 'What is a variable?') more recognizable and easier to understand ('Look, the variable pet changed into dog').
    -   title: "Let's get to work"
        text: |
            Each level contains different adventures that you can find in the pink tabs. The first pink tab explains the new commands in this level.
            The following tabs are adventures that the students can try out and make their own.
            The adventures are arranged from easiest to hardest, so we recommend to start on the left and your your way to the right.
            The last tab 'what's next' gives a little teaser of what you'll learn in the next level. Of course, you can select the adventures you want your students to do for each level.
            They don't always have to make every adventure. Every adventure contains an example code, that the students can try out with the green button.
            The example code gets copied to the workfield, where the students can try out the code and adjust it to make it their own.
            Stimulate your students to turn the example codes into their own projects by adding their own ideas and making their own variation of the adventure.
    -   title: "Quizzes and puzzels"
        text: |
            Om du vill testa om eleverna har tagit till sig all ny information på nivån kan du låta dem göra ett quiz.
            Testet innehåller 10 flervalsfrågor om de nya begreppen och kommandon på den nivån.
            Alla nivåer har inte ett quiz än, eftersom vi fortfarande håller på att bygga upp dem.
            Vissa nivåer innehåller också pussel. Pussel visar eleverna ett par kodrader som eleverna måste sätta i rätt ordning.

            Den här <a href="https://www.youtube.com/watch?v=lNh5EdZVUwc" target="_blank">videon</a> visar quiz och pussel.
    -   title: "Evaluation"
        text: |
            Round up your lesson by having a brief evaluation. What did the students learn? Which hardships did they come across?
            How did they learn from their mistakes? And of course: What did they create?
            Students are often very proud of their own creations, so it's nice to save a little time and gove your students the opportunity to show their work to their classmates.
-   title: "Extra Hedy features"
    key: "features"
    subsections:
    -   title: "Teacher Statistics"
        text: |
            This [video](https://www.youtube.com/watch?v=iwHVG4NRKI4&t=5s) shows you more information on how to use the teacher statistics in your class.
    -   title: "Make your own adventure"
        text: |
            Läraren kan också skapa egna äventyr. Den här <a href="https://www.youtube.com/watch?v=A0zbXpxX4q4" target="_blank">videon</a> visar hur du som lärare gör ditt eget äventyr och lägger till det i din klass eller dina klasser.
    -   title: "Explore page"
        text: |
            På <a href="https://hedycode.com/explore" target="_blank">explore-sidan</a> kan du se andra Hedy-användares arbete. Du kan prova deras program och använda dem som inspiration för att skapa något häftigt själv.
            Du kan också själv lägga till ett program som du har gjort på utforskningssidan genom att klicka på "Save and share code" (spara och dela kod) i kodningsskärmen eller gå till My Programs (Mina program) och klicka på "Share" (dela).
            Vill du inte längre dela ditt arbete? Gå helt enkelt till "Mina program" och klicka på "Unshare".
            Om du vill ha mer information om utforskningssidan kan du titta på den här <a href="https://www.youtube.com/watch?v=26boFjqvS5Q" target="_blank">videon</a>.
    -   title: "My achievements"
        text: |
            Om du klickar på ditt användarnamn uppe till höger på skärmen kan du gå till <a href="https://hedycode.com/my-achievements" target="_blank">Mina prestationer</a>. På den här sidan samlas dina prestationer. Dina elever har också en sådan sida.
            När du för musen över märket ser du hur du kan ta märket. Det finns också dolda märken, som du själv måste ta reda på hur du kan ta dem.
            Om du vill ha mer information om prestationerna kan du kolla in den här <a href="https://www.youtube.com/watch?v=-FjmKejukCs" target="_blank">videon</a>.
    -   title: "High Scores"
        text: |
            På <a href="www.https://hedycode.com/highscores" target="_blank">den här sidan</a> kan du se alla Hedy-användares high score.
            I den här <a href="https://www.youtube.com/watch?v=IqTiUkBVTo8" target="_blank">videon</a>kan du lära dig mer om poängsättningen.
    -   title: "Debugger"
        text: |
            Is your (student's) code not working? There must be a bug (coding mistake) in it! You can use the debugger to find the mistake.
            The debugger is the ladybig button in your coding screen. If you press it, you can run your code line by line to find your mistake.
            Have you found the mistake? Press the red stop button and the debugger will shut off.
    -   title: "Read aloud"
        text: |
            Do you want the output of your program to be read aloud? Then you can use the read aloud function that is found under the 'run code' button in your coding screen.
    -   title: "Programmers mode"
        text: |
            Distracted by all the adventures, or do you want to make a long program? Then check out the 'Programmers Mode' switch at the bottom of your coding screen.
            Programmers mode allows you and your students to use a bigger coding screen.
    -   title: "Cheat sheets"
        text: |
            In every level there is a button with this emoji 🤔. You and your students can find the "cheat sheets" there. On this cheat sheet, you can find all the commands that are usable in this level in their correct form.
            So if you've forgotten how a command works, simply take a peek at the cheat sheet!
    -   title: "Other useful features"
        text: |
            Den här <a href="https://www.youtube.com/watch?v=c4MntPPgl1Y" target="_blank">videon</a> visar ännu fler funktioner i Hedy, som fusklappar och hur man växlar tangentbord.
-   title: "Common mistakes"
    key: "common_mistakes"
    intro: |
        You can learn from your mistakes, especially in coding!
        Making mistakes is unavoidable, and a great opportunity to learn, but for teachers it can be a challenge to find the correct fix for a mistake!
        Especially as the codes get longer and longer as the levels progress. That's why we've made a list with frequently made mistakes in each level, and their solutions.
    levels:
    -   level: '1'
        sections:
        -   title: "Students forget to type commandos"
            example:
                error_text: |
                    For example they type a sentence without using print.
                error_code: |
                    Hedy can't print this
                solution_text: |
                    Teach your students to always start a line of code with a command.
                solution_code: |
                    print Hedy can print this!
        -   title: "Students use capitals when typing commands"
            example:
                error_text: |
                    Commands won't work if they are in capitals.
                error_code: |
                    Ask Why does my code fail?
                    Print Because I'm using capitals.
                solution_text: |
                    Remove the capitals.
                solution_code: |
                    ask Why does my code work now?
                    print Because I removed the capitals!
        -   title: "Students use echo without ask"
            example:
                error_text: |
                    Echo is made to repeat an answer after an ask command. Without ask echo won't do anything.
                error_code: |
                    echo Your name is
                solution_text: |
                    Add an ask command to make it work.
                solution_code: |
                    ask What's your name?
                    echo Your name is
        -   title: "Students want their echo word (variable) to be in the middle of a sentence"
            example:
                error_text: |
                    And they are right! That's why they will learn to use proper variables in the next level.
                error_code: |
                    ask Which programming language is the most fun?
                    echo is the best!
                solution_text: |
                    In level 1 we have to keep it at this:
                solution_code: |
                    ask Which programming language is the most fun?
                    echo The best is...
        -   title: "Turtle: Students let the turtle walk off of the screen"
            example:
                error_text: |
                    Often students love to try out big numbers when using the turtle, which causes the arrow to walk off the screen.
                error_code: |
                    forward 300
                    turn 90
                solution_text: |
                    In the example. students tend to think that the turn command doesn't work. Eventhough is does work, but you can't see it happening off screen. Use smaller numbers to prevent this from happening.
                solution_code: |
                    forward 100
                    turn 90
        -   title: "Turtle: Students use the command backward, but that doesn't exist"
            example:
                error_text: |
                    Backward is not a command.
                error_code: |
                    backward 100
                solution_text: |
                    To make the turtle go backwards, you use the forward command and a negative number. For example:
                solution_code: |
                    forward -100
    -   level: '2'
        sections:
        -   title: "Students make typos in their commands"
            example:
                error_text: |
                    Hedy can't recognize a command with a typo.
                error_code: |
                    prinnt Don't make typos!
                solution_text: |
                    Teach your students to read the error messages. This way they can find out themselves what went wrong.
                solution_code: |
                    print Don't make typos!
        -   title: "Students forget that the ask command has changed"
            example:
                error_text: |
                    In this level students learn about variables. The ask command requires a variable as well, but students forget this.
                error_code: |
                    ask what would you like to eat?
                solution_text: |
                    In this level you have to tell Hedy where to save your answer, so it can be used later on. This is called a variable.
                solution_code: |
                    order is ask What would you like to eat?
        -   title: "Students try to use the echo command "
            example:
                error_text: |
                    For some students it might be frustrating to learn that the echo command doesn't work anymore. That's why it's very important to explain the advantages of using variables. For example you can use multiple variables in a code, and you can put them anywhere you like in a sentence!
                error_code: |
                    answer is ask Why doesn't echo work anymore?!
                    echo
                solution_text: |
                    Use a varible instead.
                solution_code: |
                    answer is ask Why doens't echo work anymore?!
                    print answer
        -   title: "Students use a variable name or as a normal word"
            example:
                error_text: |
                    In the example below the word 'name' is used a a variable, but also as a normal text. The output of this code will be 'Hi my Hedy is Hedy'.
                error_code: |
                    name is Hedy
                    print Hi my name is name
                solution_text: |
                    So don't use a word you want to use in the text as a variable name. In level 4 this is solved with quotation marks.
                solution_code: |
                    name is Hedy
                    print Hi I'm name
        -   title: "Students use long variable names containing two words."
            example:
                error_text: |
                    A variable should be named with one word. You could use an underscore to connect two words. That counts as one.
                error_code: |
                    chosen door is ask Which door do you pick?
                solution_text: |
                    Add an underscore.
                solution_code: |
                    chosen_door is ask which door do you pick?
        -   title: "Students might use two different names for the same variable"
            example:
                error_text: |
                    In this example the student has used 'horse' and 'name' for the same variables.
                error_code: |
                    horse is ask What is your horse called?
                    print Your horse is called name
                solution_text: |
                    Always check wheter the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.
                solution_code: |
                    name is ask What is your horse called?
                    print Your horse is called name
    -   level: '3'
        sections:
        -   title: "Students try to print whole lists"
            example:
                error_text: |
                    A list can't be printed. You can only print one item from the list with at random.
                error_code: |
                    groceries is apples, milk, chocolate
                    print groceries
                solution_text: |
                    To print a list of all the groceries, you simply need to put them after a print command. Else you can use the list to print one item with at random.
                solution_code: |
                    print apples, milk, chocolate

                    or

                    groceries is apples, milk, chocolate
                    print groceries at random
        -   title: "Students use the name of a variable or list as regular text"
            example:
                error_text: |
                    This problem probably occured in level 2 as well. Now it can happen with lists too.
                error_code: |
                    name is Hedy
                    print Hi my name is name

                    or

                    animal is rhino, bee, swan
                    print The best animal is... animal at random
                solution_text: |
                    Don't use the names of variables or lists in regular text to print. In level 4 this problem is solves with quotation marks.
                solution_code: |
                    name is Hedy
                    print Hi I'm name

                    or

                    animals is rhino, bee, swan
                    print The best animal is... animals at random
        -   title: "Students forget at in at random"
            example:
                error_text: |
                    Like in the example
                error_code: |
                    birds is sparrow, seagull, robin
                    print birds random
                solution_text: |
                    This problem is solved by adding the word at.
                solution_code: |
                    birds is sparrow, seagull, robin
                    print birds at random
        -   title: "Students forget to use the print command when also using the at random command"
            example:
                error_text: |
                    Or they will sometimes put at random at the beginning of the line.
                error_code: |
                    fruit is apple, cherry, banana
                    fruit at random
                solution_text: |
                    Emphasize to your students that you always need a print to print text.
                solution_code: |
                    fruit is apple, cherry, banana
                    print fruit at random
        -   title: "Students forget to use commas in their lists"
            example:
                error_text: |
                    In a list items are seperated with a comma.
                error_code: |
                    pizzas is funghi tonno quattro stagioni
                    print pizzas at random
                solution_text: |
                    After each item on your list, there should be a comma
                solution_code: |
                    pizzas is funghi, tonno, quattro stagioni
                    print pizzas at random
        -   title: "Students try to use at random without a list"
            example:
                error_text: |
                    For example
                error_code: |
                    clubs is Manchester United
                    print clubs at random
                solution_text: |
                    Hedy can't print anything at random, because there is no list to choose from.
                solution_code: |
                    clubs is Manchester United, Bayrn Munchen, FC Barcelona
                    print clubs at random
        -   title: "Students try to use add/remove without a list "
            example:
                error_text: |
                    In the example below 'names' is not a list, but a variable. You cannot add anything to it.
                error_code: |
                    names is Jake
                    your_name is ask Who are you?
                    add your_name to names
                    print names at random
                solution_text: |
                    There has to be a list first, so you have to add a second name to turn names into a list, for example Amy. If you don't want amy on your list, you can use remove to remove it after.
                solution_code: |
                    names is Jake, Amy
                    your_name is ask Who are you?
                    add your_name to names
                    print names at random
        -   title: "Students forget to use to/from in add/remove"
            example:
                error_text: |
                    Without to/from the add/remove command won't work.
                error_code: |
                    adventures is story, parrot, dice
                    choice is Which adventure do you like best?
                    add choice
                    remove dice
                    print I love adventures at random
                solution_text: |
                    Hedy has to know which list the item should be added to/removed from.
                solution_code: |
                    adventures is story, parrot, dice
                    choice is Which adventure do you like best?
                    add choice to adventures
                    remove dice from adventures
                    print I love adventures at random
    -   level: '4'
        sections:
        -   title: "Students forget to use quotation marks on both sides of the text"
            example:
                error_text: |
                    In this level print and ask need a set of quotation marks. One before of the text and one after.
                error_code: |
                    print Hello
                    mood is ask 'How are you?
                solution_text: |
                    Add the correct quotation marks.
                solution_code: |
                    print 'Hello'
                    mood is ask 'How are you?'
        -   title: "Students use the wrong quotation marks"
            example:
                error_text: |
                    It is important to start your lesson by checking if the students know how to type a quotation mark properly. Else they might use the "double quotes" or the skewed one `.
                error_code: |
                    print `Welcome to the restaurant`
                    food is ask "What would you like to order?"
                solution_text: |
                    These are the correct quotation marks:
                solution_code: |
                    print 'Welcome to the restaurant'
                    food is ask 'What would you like to order?'
        -   title: "Students use an apostrophe in their text"
            example:
                error_text: |
                    From this level on apostrophes are not allowed. They are often used in English when thyping contractions like you're, don't or what's.
                error_code: |
                    print 'You're not allowed to type this'
                solution_text: |
                    You can choose to use the wrong grammar and just leave the apostrophe out. Or you could use the ` as an apostrophe.
                solution_code: |
                    print 'Youre allowed to type this'
                    print 'And you`re able to do this'
    -   level: '5'
        sections:
        -   title: "Students forget to use print in an if command"
            example:
                error_text: |
                    After students use if or else they forget to use a second command like print or ask.
                error_code: |
                    if name is Hedy 'Great!'
                    else 'Hedy is better!'
                solution_text: |
                    Add the print command to fix it.
                solution_code: |
                    if name is Hedy print 'Great!'
                    else print 'Hedy is better!'
        -   title: "Students might use two different names for the same variable"
            example:
                error_text: |
                    In this example the student has used 'horse' and 'name' for the same variables.
                error_code: |
                    horse is ask 'What is your horse called?'
                    if name is Bonfire print 'cool'
                    else print 'less cool!'
                solution_text: |
                    Always check wheter the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.
                solution_code: |
                    horse is ask 'What is your horse called'
                    if horse is Bonfire print 'cool!'
                    else print 'less cool!'
        -   title: "Students still forget the quotes on both sides"
            example:
                error_text: |
                    Codes using the `if` commando can get very long and students tend to forget to use quotes.
                error_code: |
                    if name is Hedy print fun
                    else print 'meh!
                solution_text: |
                    Always use 2 quotes in a print command.
                solution_code: |
                    if name is Hedy print 'fun'
                    else print 'meh!'
        -   title: "Students use quotes around variable names"
            example:
                error_text: |
                    In this level there are no quotes around variable names.
                error_code: |
                    if 'name' is 'Hedy' print 'fun'
                    else print 'meh!'
                solution_text: |
                    Remove the quotes to get the code to work.
                solution_code: |
                    if name is Hedy print 'fun'
                    else print 'meh!
        -   title: "Students use long variable names containing two words"
            example:
                error_text: |
                    A variable should be named with one word. You could use an underscore to connect two words. That counts as one.
                error_code: |
                    chosen door is ask 'Which door do you pick?'
                solution_text: |
                    Add an underscore.
                solution_code: |
                    chosen_door is ask 'which door do you pick?'
        -   title: "Students want multiple answers to be correct"
            example:
                error_text: |
                    For example this student Hedy to tell all his friends that they are funny, but other classmates would be told that they are not.
                error_code: |
                    if name is Jesse, David, Souf print 'You are funny' else print 'You are not funny'
                solution_text: |
                    You could use the `in` command for that. It is explained in a higher level, but it does already work in level 5.
                    Another solution is to use multiple if commands and no else command. The disadvantage is that it won't tell the other classmates that they are not funny.
                solution_code: |
                    friends is Jesse, David, Souf
                    name is ask 'Who are you?'
                    if name in friends print 'You are funny'
                    else print 'You are not funny'

                    or

                    name is ask 'Who are you?'
                    if naam is Jesse print 'You are funny'
                    if naam is David print 'You are funny'
                    if naam is Souf print 'You are funny'
        -   title: "The students make the variable name the same as the value in the if statement"
            example:
                error_text: |
                    In the example below the password is 'password'. This will result in it always being correct.
                error_code: |
                    password is ask 'What is the password?'
                    if password is password print 'Access granted'
                    else print 'Acces denied!'
                solution_text: |
                    Pick a different name for your variable.
                solution_code: |
                    secret_password is ask 'What is the password'
                    if secret_password is password print 'Access granted!'
                    else print 'Access denied!'
    -   level: '6'
        sections:
        -   title: "Students struggle with quotation marks"
            example:
                error_text: |
                    Some students struggle with adding quotattion marks or not. If you add quotation marks, the output screen will literally show '5+5'.
                error_code: |
                    print '5 + 5'
                solution_text: |
                    In this code the output screen will print '10'.
                solution_code: |
                    print 5 + 5
        -   title: "Students struggle with the concept of doing maths with a variable"
            example:
                error_text: |
                    Some students will find it hard to do maths with variables. Try to show them very simple examples, like:
                error_code: |
                    age = ask 'How old are you?'
                    print 'Next year you will be ' age + 1
                solution_text: |
                    Or take it a step further like this.
                solution_code: |
                    price = 0
                    print 'Welcome to our burger restaurant'
                    burger = ask 'Would you like a burger?'
                    if burger = yes price = price + 10
                    drink = ask 'Would you like a drink?'
                    if drink = yes price = price + 4
                    print 'That will be ' price ' euros please'
    -   level: '7'
        sections:
        -   title: "Students forget one of the word of the repeat command, or they forget the print command"
            example:
                error_text: |
                    Make sure that the students know to use both the full repeat command and the print command.
                error_code: |
                    repeat 3 times 'For he`s a jolly good fellow'
                    repeat 3 print 'Which nobody can deny!'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    repeat 3 times print 'For he`s a jolly good fellow'
                    repeat 3 times print 'Which nobody can deny!'
        -   title: "Students try to repeat multiple lines"
            example:
                error_text: |
                    In this level you can only repeat one line of code multiple times. In this code the student wanted to print 3 different drinks, but it won't work. It will ask the question 3 times and only print the last answer.
                error_code: |
                    repeat 3 times drink = ask 'What would you like to drink?'
                    print drink
                solution_text: |
                    You should go to the next level to be able to repeat multiple lines. So on this level you'll have to print everything seperately.
                solution_code: |
                    drink = ask 'What would you like to drink?'
                    print drink
                    drink = ask 'What would you like to drink?'
                    print drink
                    drink = ask 'What would you like to drink?'
                    print drink
        -   title: "Students make programs that take too long to run"
            example:
                error_text: |
                    In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: |
                    repeat 100 times print 'How many times can I repeat this?'
                solution_text: |
                    Make sure the codes aren't too long
                solution_code: |
                    repeat 20 times print 'This is enough'
    -   level: '8'
        sections:
        -   title: "Students use the indentation wrong"
            example:
                error_text: |
                    Indentation is a new concept in this level, that is hard to use for some students. Make sure they practise some simple codes before making a whole program with it.
                error_code: |
                    repeat 3 times
                    print 'hello'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    repeat 3 times
                        print 'hello'
        -   title: "Students only repeat 1 line when they wanted to repeat multiple lines"
            example:
                error_text: |
                    For instance, in the code below the student wanted to take the drinks order of 3 people. But insted the program asked 3 times, but only wrote down one order.
                error_code: |
                    repeat 3 times
                        drink = ask 'What would you like to drink?'
                    print drink
                solution_text: |
                    In the correct code the third line starts with indentation too. This way it belongs to the repeat block and therefore it will be repeated 3 times.
                    Showing your students these differences can help them understand why we need indentation to make our programs work.
                solution_code: |
                    repeat 3 times
                        drink = ask 'What would you like to drink?'
                        print drink
        -   title: "Students want to nest if statements, or put if statements inside a loop"
            example:
                error_text: |
                    In this level students aren't allowed yet to put if statements inside other if statements or inside repeat loops.
                    In the next level this is allowed.
                error_code: |
                    birthday = ask 'Is it you birthday?'
                    if birthday = yes
                        repeat 3 times
                            print 'Hip Hip Hooray!'
                solution_text: |
                    This is the correct code for this level:
                solution_code: |
                    birthday = ask 'Is it you birthday?'
                    if birthday = yes
                        print 'Hip Hip Hooray!'
                        print 'Hip Hip Hooray!'
                        print 'Hip Hip Hooray!'
        -   title: "Students make programs that take too long to run"
            example:
                error_text: |
                    In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: |
                    repeat 100 times
                        print 'How many times can I repeat this?'
                solution_text: |
                    Make sure the codes aren't too long
                solution_code: |
                    repeat 20 times
                        print 'This is enough'
        -   title: "Students use the if command to check if the variable value is the same as the variable name"
            example:
                error_text: |
                    We have seen this mistake by some of our students. They make a password for their computer, but they make the password 'password'.
                    In line 2 the computer is asked to check wheter the variable password is the same as the variable password, so itself. Which means the answer is alway yes.
                    So with this code the answer will always be 'You can come in' no matter what the player fills in.
                error_code: |
                    password is ask 'What is the password?'
                    if password is password
                        print 'You can come in'
                    else
                        print 'You are not allowed'
                solution_text: |
                    You can fix this mistake by adding quotation marks. This way the computer knows that the second password in `if password is 'password'` is a string value (so normal text) and not the variable name.
                solution_code: |
                    password is ask 'What is the password?'
                    if password is 'password'
                        print 'You can come in'
                    else
                        print 'You are not allowed'
    -   level: '9'
        sections:
        -   title: "Students make mistakes with indentation"
            example:
                error_text: |
                    The hardest part about this level is getting the indentation right. Students love nesting if statements, sometimes even inside other nested if statements. Keeping track of indentation can get pretty tough.
                error_code: |
                    print 'Robin is walking downtown'
                    location = ask 'Is Robin going into a shop, or does she go home?'
                    if location is shop
                        print 'She enters the shop.'
                        print 'Robin sees an interesting looking book'
                        book = ask 'Does Robin buy the book?'
                            if book is yes
                    print 'Robin buys the book and goes home'
                    else
                        print 'Robin leaves the shop and goes home'
                    else
                        print 'Robin goes home'
                solution_text: |
                    This is the correct code. Try to keep track of all the different constructions when putting if statements inside other if statements.
                solution_code: |
                    print 'Robin is walking downtown'
                    location = ask 'Is Robin going into a shop, or does she go home?'
                    if location is shop
                        print 'She enters the shop.'
                        print 'Robin sees an interesting looking book'
                        book = ask 'Does Robin buy the book?'
                        if book is yes
                            print 'Robin buys the book and goes home'
                        else
                            print 'Robin leaves the shop and goes home'
                    else
                        print 'Robin goes home'

    -   level: '10'
        sections:
        -   title: "Students so not use the for command correctly"
            example:
                error_text: |
                    We often see that students try to print the list (in the example animals) instead of the items of the list.
                error_code: |
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animals
                solution_text: |
                    The word animals in the last line should be changed into animal.
                solution_code: |
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animal
        -   title: "Students forget the indentation"
            example:
                error_text: |
                    Students tend to forget to use indentation after a for command.
                error_code: |
                    animals is dog, cat, blobfish
                    for animal in animals
                    print 'I love ' animals
                solution_text: |
                    You should use indentation after a for command.
                solution_code: |
                    animals is dog, cat, blobfish
                    for animal in animals
                      print 'I love ' animal
    -   level: '11'
        sections:
        -   title: "Students forget to use indentation"
            example:
                error_text: |
                    Make sure that the students use indentation.
                error_code: |
                    for i in range 1 to 5
                    print i
                solution_text: |
                    This is the correct code:
                solution_code: |
                    for i in range 1 to 5
                        print i
        -   title: "Students don't understand the i"
            example:
                error_text: |
                    Some students don't understand that i is a variable. i is chosen, because it is used in Python programming, but you could just as easily use a different variable name.
                    For example, this code:
                error_code: |
                    for i in range 1 to 5
                    print i
                solution_text: |
                    Could just as well be replaced with this code. It works the same.
                solution_code: |
                    for banana in range 1 to 5
                        print banana
    -   level: '12'
        sections:
        -   title: "Students forget quotation marks"
            example:
                error_text: |
                    Students need more quotation marks now than in the previous levels. In this example quotation marks were forgotten in the list and in the if command.
                error_code: |
                    superheroes = Spiderman, Batman, Iron Man
                    superhero = superheroes at random
                    if superhero = Batman
                        print 'IM BATMAN!'

                solution_text: |
                    This is the correct code:
                solution_code: |
                    superheroes = 'Spiderman', 'Batman', 'Iron Man'
                    superhero = superheroes at random
                    if superhero is 'Batman'
                        print 'IM BATMAN!'
        -   title: "Students use quotation marks on numbers they want to use for calculations"
            example:
                error_text: |
                    You can use quotation marks on numbers, but only if you want the computer to think of them as text. This means you can't do calculations with the number.
                    In the example below, you can't do maths with the number 25, because it's in quotation marks.
                error_code: |
                    score = '25'
                    answer is ask 'Do you want a point?'
                    if answer is 'yes'
                        score = score + 1
                        print score
                solution_text: |
                    This is the correct code:
                solution_code: |
                    score = 25
                    answer is ask 'Do you want a point?'
                    if answer is 'yes'
                        score = score + 1
                        print score
        -   title: "Students use commas instead of periods in decimal numbers"
            example:
                error_text: |
                    Decimal numbers can be used from this level on, but you can't use commas.
                error_code: |
                    print 2,5 + 2,5
                solution_text: |
                    This is the correct code:
                solution_code: |
                    print 2.5 + 2.5
    -   level: '13'
        sections:
        -   title: "Students confuse `and` with `or`"
            example:
                error_text: |
                    Both commands might appear similar, but their functions are very different.
                error_code: |
                    game is ask 'Do you want to play a game?'
                    time is ask 'Do you have time to play?'
                    if game is 'yes' or time is 'yes'
                        print 'Lets play!'
                solution_text: |
                    In this case, the person should answer yes on both questions, so you should use `and`.
                solution_code: |
                    game is ask 'Do you want to play a game?'
                    time is ask 'Do you have time to play?'
                    if game is 'yes' and time is 'yes'
                        print 'Lets play!'
    -   level: '14'
        sections:
        -   title: "Students confuse the < and > signs"
            example:
                error_text: |
                    Often, students are already familiar with these signs from maths class. But if your students don't know these signs yet, they might have a challenge with it.
                error_code: |
                    age = ask 'How old are you?'
                    if age < 12
                        print 'You are older than I am!'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    age = ask 'How old are you?'
                    if age > 12
                        print 'You are older than I am!'
        -   title: "Students use the wrong signs for `!=` `<=` and `>=`"
            example:
                error_text: |
                    These signs are probably new for most students. Make sure to explain these signs to your students.
                error_code: |
                    name = ask 'What is your name?'
                    if name =< 'Hedy'
                        print 'You are not Hedy'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    name = ask 'What is your name?'
                    if name != 'Hedy'
                        print 'You are not Hedy'
        -   title: "Students forget to use the == sign"
            example:
                error_text: |
                    In this level, students are still allowed to use = or is. But on other levels, or in python, they might get in trouble for that. So it is best to train them to use it.
                error_code: |
                    name = ask 'What is your name?'
                    if name = 'Hedy'
                        print 'You are cool!'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    name = ask 'What is your name?'
                    if name == 'Hedy'
                        print 'You are cool!'
    -   level: '15'
        sections:
        -   title: "Students forget indentation in the while loop"
            example:
                error_text: |
                    Indentation is often hard for students.
                error_code: |
                    answer = 0
                    while answer != 25
                    answer = ask 'What is 5 times 5?'
                    print 'A correct answer has been given'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    answer = 0
                    while answer != 25
                        answer = ask 'What is 5 times 5?'
                    print 'A correct answer has been given'
    -   level: '16'
        sections:
        -   title: "Students forget the brackets"
            example:
                error_text: |
                    From this level on lists should be in brackets.
                error_code: |
                    icecream = 'starwberry', 'chocolate'
                    print 'I love ' icecream[random] ' icecream'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: "Students use the wrong brackets"
            example:
                error_text: |
                    From this level on lists should be in brackets.
                error_code: |
                    icecream = ('starwberry', 'chocolate'}
                    print 'I love ' icecream[random] ' icecream'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: "Students forget the quotation marks while focussing on the brackets"
            example:
                error_text: |
                    Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream[random] ' icecream'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: "Students still use the old at random command"
            example:
                error_text: |
                    Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream at random ' icecream'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
        -   title: "Students forget the quotation marks while focussing on the brackets"
            example:
                error_text: |
                    Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |
                    icecream = [starwberry, chocolate]
                    print 'I love ' icecream[random] ' icecream'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    icecream = ['starwberry', 'chocolate']
                    print 'I love ' icecream[random] ' icecream'
    -   level: '17'
        sections:
        -   title: "Students use elif like else, so without a condition"
            example:
                error_text: |
                    The elif command needs a condition behind it. It cannot be used like else, without a condition.
                error_code: |
                    color = ask 'What is your favorite color?'
                    if color == 'green':
                        print 'green is nice'
                    elif:
                        print 'I like green'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    color = ask 'What is your favorite color?'
                    if color == 'green':
                        print 'green is nice'
                    elif color == yellow:
                        print 'yellow is alright'
                    else:
                        print 'I like green'
        -   title: "Students forget the colon"
            example:
                error_text: |
                    After each command that requires indentation, a colon should be used.
                error_code: |
                    answer = ask 'How are you doing?'
                    if answer is 'great'
                        print 'Me too!'
                    elif answer is 'bad'
                        print 'Let me cheer you up!'
                    else
                        print 'Im great!'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    answer = ask 'How are you doing?'
                    if answer is 'great':
                        print 'Me too!'
                    elif answer is 'bad':
                        print 'Let me cheer you up!'
                    else:
                        print 'Im great!'
    -   level: '18'
        sections:
        -   title: "Students forget to use the brackets"
            example:
                error_text: |
                    Students will forget to put brackets around their text.
                error_code: |
                    print 'my name is Hedy!'
                solution_text: |
                    This is the correct code:
                solution_code: |
                    print('my name is Hedy!')
        -   title: "Students will still use the ask command"
            example:
                error_text: |
                    The ask command has been used since level 1. So it might be hard for the students to switch to input instead of ask.
                error_code: |
                    print('My name is Hedy!')
                    name = ask('What is your name?')
                    print('So your name is ', name)
                solution_text: |
                    This is the correct code:
                solution_code: |
                    print('My name is Hedy!')
                    name = input('What is your name?')
                    print('So your name is ', name)
        -   title: "Students might use the brackets as quotation marks"
            example:
                error_text: |
                    They have learned to keep the variables outside of the quotation marks, so they might do the same with the brackets. Which is not the correct way to use them.
                error_code: |
                    temperature = 25
                    print('It is ') temperature ('degrees outside')
                solution_text: |
                    This is the correct code:
                solution_code: |
                    temperature = 25
                    print('It is ', temperature, 'degrees outside')
learn-more-sections:
-   text: "Vi vill gärna höra från dig! Det bästa sättet att komma i kontakt med oss är att gå med i vår Discord-server <a href=\"https://discord.gg/8yY7dEme9r\" target=\"_blank\"></a> .\n\nDu kan också [skicka ett mejl till oss] (mailto:hello@hedy.org \"Om Hedy\").\n"
    title: Gå med i Hedy-gemenskapen
-   title: En djupdykning!
    text: "Vill du veta mer om Hedys filosofi och design? Kolla in det här föredraget som Felienne höll på StrangeLoop-konferensen 2022:\n\n<iframe width=\"560\" height=\"315\" class=\"mx-auto mt-4\" src=\"https://www.youtube.com/embed/fmF7HpU_-9k?wmode=opaque\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n"
-   title: Hedy i nyheterna
    text: "En del webbplatser och tidningar har skrivit om Hedy sedan vi släpptes i början av 2020. Vi har en lista här:\n* [Tech Optimism - A Solution to the IT Shortage (Dutch), August 2022](https://pom.show/2022/08/12/een-oplossing-voor-het-it-tekort/)\n* [Codeweek Podcast, July 2022](https://codeweek.eu/podcast/26)\n* [Heise.de (German), Januari 2022](https://www.heise.de/news/Hedy-die-mitwachsende-Programmiersprache-6336264.html)\n* [Strumenta, November 2021](https://tomassetti.me/teaching-programming-with-hedy/)\n* [Vives (Dutch), CodeWeek Special October 2021](images/Vives-174-Codeweek.pdf)\n* [CodeWeek.eu - Haunted House Challenge, September 2021](https://codeweek.eu/2021/challenges/haunted-house)\n* [Opensource.com, April 2021](https://opensource.com/article/21/4/hedy-teach-code)\n* [IO Magazine, April 2021](https://ict-research.nl/wordpress/wp-content/uploads/2021/04/IO-magazine-NR1-2021_web.pdf)\n* [Ingeniería De Software (Spanish), February 2021](https://ingenieriadesoftware.es/hedy-mejor-lenguaje-ensenar-programacion-ninos/)\n* [Hello World Magazine, February 2021](images/Hello_World_15_Hedy.pdf)\n* [Discoro, January 2021](https://discoro.wordpress.com/2021/01/09/hedy-gradually-learning-a-programming-language/)\n* [Felienne wins the Dutch award for ICT research for Hedy, January 2021](https://www.nwo.nl/en/news/felienne-hermans-receives-dutch-prize-ict-research-2021)\n* [SlashDot, August 2020](https://news.slashdot.org/story/20/08/17/024248/scientist-proposes-a-new-programming-language-for-teaching-coding-and-python)\n* [GenBeta (Spanish), August 2020](https://www.genbeta.com/desarrollo/nuevo-lenguaje-para-ensenar-programacion-a-ninos-como-se-ensena-a-leer-escribir-forma-gradual-niveles)\n* [Developpez (French), August 2020](https://programmation.developpez.com/actu/308095/Une-scientifique-propose-un-nouveau-langage-de-programmation-pour-enseigner-aux-enfants-le-codage-informatique-au-travers-d-une-approche-graduelle-implementee-en-Python-sur-13-paliers/)\n* [Vives (Dutch), October 2020](images/artikel_vives.pdf) \"Met Hedy stap voor stap leren programmeren\"\n* [Leiden University, April 2020](https://www.universiteitleiden.nl/en/news/2020/03/looking-to-distract-the-kids-while-you-work-from-home-get-them-programming)\n* [Mare (Dutch), April 2020](https://www.mareonline.nl/cultuur/computercode-voor-de-kids/)\n* [AG Connect (Dutch), April 2020](https://www.agconnect.nl/artikel/stapsgewijs-python-leren-programmeren-met-nieuwe-taal-hedy)\n"
title: Dokumentation för Hedy
start-sections:
-   title: "Textual programming made easy!"
    text: |
        Many schools and teachers around the world want to teach their students programming. Initially this is often done with playful tools, ranging from the Beebot robot to
        Scratch Junior or Scratch. After using such tools, kids often want to move to more powerful, textual programming languages, like Python.

        Python however is hard, because it is only available in English, and requires learners to learn complex programming concepts and syntax at once.
        Hedy is the easy way to get started with textual programming languages! Hedy is free to use, open source, and unlike any other textual programming language in three ways.

        1. Hedy is multi-lingual, you can use Hedy in your own language
        2. Hedy is gradual, so you can learn one concept and its syntax a time
        3. Hedy is built for the classroom, allowing teachers to fully customize their student's experience
-   title: "Multi-lingual programming"
    text: |
        While almost all textual programming language have keywords in English, such as `for` or `repeat`, Hedy can be used in any language! We currently support 39 different languages, including Spanish, Arabic, Simplified Chinese and Hindi. If your language is not available you can always start a a new translation.
-   title: "Step by step learning"
    text: |
        Learning a programming language can be overwhelming, since learners have to learn concepts (for example if-else or loops) and syntax (like quotation marks or round brackets) at the same time. In Hedy, concepts are first introduced with little syntax and then refined. A scientifically proven way to learn!
-   title: "Built for the classroom"
    text: |
        Hedy is suitable for kids aged 10 and up and designed for classroom use.
        Teachers can use our free, built-in lesson plans, but can also author their own lessons and load these into the Hedy user interface.
-   title: "Programming in context"
    text: |
        Hedy shows programming in the broadest way possible, and can be used in variety of exciting ways. Hedy allows for the creation of digital and interactive stories, colorful drawings that can be shown on the screen but also drawn with a pen plotter or embroidered on a shirt, and can be used to create games or apps with buttons and keyboard actions.
-   title: "Is Hedy free?"
    text: |
        Ja! Hedy är 'öppen källkod', vilket betyder att alla kan hjälpa oss att förbättra Hedy.
        Du kan hitta vår kod på <a href="https://github.com/hedyorg/hedy" target="_blank">Github</a>.
        Om du gillar Hedy och vill bidra, tar vi emot (och är mycket tacksamma för) <a href="https://github.com/sponsors/hedyorg" target="_blank">donationer</a>!

-   title: "Do I need to install anything?"
    text: |-
        No. Hedy works in the browser, which is the program you are using to look at this page. Probably Chrome or Edge or Firefox. Hedy also works on phones and tablets.
-   title: "Do I need programming experience to teach with Hedy?"
    text: |-
        No, that is not needed. All concepts are explained in the slides and in the interface for learners.
        If you create a free teacher's account, you also get access to the teacher's manual with information on how to teach
        and frequently made mistakes.

join-sections:
-   text: "# There are three ways in which you can support Hedy!\n"
    title: Supporting Hedy
-   title: Improving the language
    text: "Hedys stegvisa och flerspråkiga karaktär skapar många intressanta tekniska utmaningar.\nDu hittar dessa frågor på <a href=\"https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage\" target=\"_blank\">Github</a>.\n"
-   title: Translating Hedy
    text: "Är du ingen programmerare? Inga problem! Ett annat sätt att stödja Hedy är att <a href=\"https://github.com/hedyorg/hedy/blob/main/TRANSLATING.md\" target=\"_blank\">översätta nyckelord, felmeddelanden, äventyr och annat innehåll</a>.\nDetta är den nuvarande statusen; hjälp oss att göra klart ett språk eller lägga till ett nytt!\n<a href=\"https://hosted.weblate.org/engage/hedy/\">\n<img src=\"https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg\" alt=\"Translation status\" /></a>\n"
-   title: Help teachers get started
    text: "Hedy är utformat för att hjälpa lärare att ge programmeringslektioner i klassrummet. Vi har särskilda lärarfunktioner som möjligheten att skapa en klass, anpassa den och följa dina elever.\nOm du gillar Hedy kan du nå ut till skolor som du känner för att hjälpa lärare att komma igång! Vi kan hjälpa dig att hitta skolor eller lärare via <a href=\"https://discord.gg/8yY7dEme9r\" target=\"_blank\">Discord</a>.\n"
