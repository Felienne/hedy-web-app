title: Hedy документација
home-sections:
-   title: Текстуално програмирање учињено лаким!
    text: |-
        Многе школе и наставници широм света желе да науче своје ученике програмирању. У почетку се то често ради са разиграним алатима, од робота Beebot до Scratch Junior или Scratch. Након коришћења таквих алата, деца често желе да пређу на моћније, текстуалне програмске језике, као што је Python.

        Међутим, Python је тежак, јер је доступан само на енглеском и захтева од ученика да истовремено науче сложене програмске концепте и синтаксу.
        Hedy је лак начин да започнете са текстуалним програмским језицима! Hedy је бесплатан за коришћење, отвореног кода, и за разлику од било ког другог текстуалног програмског језика у три начина.

        1. Hedy је вишејезичан, можете користити Hedy на свом језику
        2. Hedy је постепен, тако да можете научити један концепт и његову синтаксу у једном тренутку
        3. Hedy је направљен за учионицу, омогућавајући наставницима да у потпуности прилагоде искуство својих ученика
-   title: Вишејезично програмирање
    text: Док скоро сви текстуални програмски језици имају кључне речи на енглеском, као што су `for` или `repeat`, Hedy се може користити на било ком језику! Тренутно подржавамо 47 различитих језика, укључујући холандски, шпански, арапски, турски, кинески и хинди. Ако ваш језик није доступан, увек можете започети нови превод.
-   title: Учење корак по корак
    text: Учење програмског језика може бити преоптерећујуће, јер ученици морају истовремено да уче концепте (на пример if-else или петље) и синтаксу (као што су наводници или округле заграде). У Хедију, концепти се прво уводе са мало синтаксе, а затим се усавршавају. Научно доказан начин учења!
-   title: Направљено за учионицу
    text: |-
        Хеди је погодан за децу узраста од 10 година и више и дизајниран је за употребу у учионици.
        Наставници могу користити наше бесплатне, уграђене планове лекција, али могу и сами креирати своје лекције и учитати их у кориснички интерфејс Хедија.
-   title: Програмирање у контексту
    text: Хеди приказује програмирање на најширем могућем начину и може се користити на различите узбудљиве начине. Хеди омогућава креирање дигиталних и интерактивних прича, шарених цртежа који се могу приказати на екрану, али и нацртати помоћу пен плотера или извезати на мајици, и може се користити за креирање игара или апликација са дугмадима и акцијама на тастатури.
-   title: Да ли је Хеди бесплатан?
    text: |-
        Да! Хеди је 'отвореног кода', што значи да свако може помоћи да Хеди буде бољи.
        Наш код можете пронаћи на <a href="https://github.com/hedyorg/hedy" target="_blank">Github</a>.
        Ако вам се свиђа Хеди и желите да допринесете, прихватамо (и веома смо захвални за) <a href="https://github.com/sponsors/hedyorg" target="_blank">донације</a>!
-   title: Да ли треба да инсталирам нешто?
    text: Не. Хеди ради у прегледачу, што је програм који користите за гледање ове странице. Вероватно Chrome или Edge или Firefox. Хеди такође ради на телефонима и таблетима.
-   title: Да ли ми је потребно програмерско искуство да бих предавао са Хедијем?
    text: |-
        Не, то није потребно. Сви концепти су објашњени у слајдовима и у интерфејсу за ученике.
        Ако направите бесплатан налог за наставнике, добијате и приступ приручнику за наставнике са информацијама о томе како предавати
        и честим грешкама.
join-sections:
-   title: Подршка за Hedy
    text: '# Постоје три начина на која можете подржати Hedy!'
-   title: Унапређење језика
    text: |-
        Постепена и вишејезична природа Hedy-а ствара много занимљивих техничких изазова.
        Пронађите те проблеме на <a href="https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage" target="_blank">Github-у</a>.
-   title: Превођење Хеди
    text: |-
        Нисте програмер? Нема проблема! Још један начин да подржите Hedy је <a href="https://github.com/hedyorg/hedy/wiki/Hedy-Translation-Tutorial" target="_blank">превођење кључних речи, порука о грешкама, авантура и другог садржаја</a>.
        Ово је тренутни статус, помозите нам да завршимо језик или додамо нови!
        <a href="https://hosted.weblate.org/engage/hedy/">
        <img src="https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg" alt="Статус превода" /></a>
-   title: Помоћ наставницима да започну
    text: |-
        Hedy је дизајниран да подржи наставнике у пружању часова програмирања у учионици. Имамо специфичне функције за наставнике као што је опција за креирање разреда, прилагођавање и праћење напретка ученика.
        Ако вам се свиђа Hedy, можете контактирати школе које познајете да помогнете наставницима да започну! Можемо вам помоћи да пронађете школе или наставнике преко <a href="https://discord.gg/8yY7dEme9r" target="_blank">Discord-а</a>.
learn-more-sections:
-   title: Придружите се Hedy заједници
    text: "Волимо да чујемо ваше мишљење! Најбољи начин да нас контактирате је придруживањем нашем <a href=\"https://discord.gg/8yY7dEme9r\" target=\"_blank\">Discord серверу</a>.\n\nТакође нам можете [послати имејл](mailto:hello@hedy.org \"О Hedy\").\n\nДа бисте били у току са најновијим вестима, [претплатите се на наш билтен](/subscribe)."
-   title: Дубинско истраживање!
    text: |-
        Желите да сазнате више о Hedy филозофији и дизајну? Погледајте овај говор који је Felienne одржала на StrangeLoop конференцији 2022. године:

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/fmF7HpU_-9k?wmode=opaque" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
-   title: Hedy у вестима
    text: |-
        Неке веб странице и новине су писале о Hedy од нашег издања почетком 2020. године. Овде водимо списак:
        * [Java Magazine 04.2023](images/Hedy_Javamagazine2023.pdf)
        * [Tech Optimism - Решение за недостатак ИТ стручњака (холандски), август 2022](https://pom.show/2022/08/12/een-oplossing-voor-het-it-tekort/)
        * [Codeweek Podcast, јул 2022](https://codeweek.eu/podcast/26)
        * [Heise.de (немачки), јануар 2022](https://www.heise.de/news/Hedy-die-mitwachsende-Programmiersprache-6336264.html)
        * [Strumenta, новембар 2021](https://tomassetti.me/teaching-programming-with-hedy/)
        * [Vives (холандски), CodeWeek Special октобар 2021](images/Vives-174-Codeweek.pdf)
        * [CodeWeek.eu - Haunted House Challenge, септембар 2021](https://codeweek.eu/2021/challenges/haunted-house)
        * [Opensource.com, април 2021](https://opensource.com/article/21/4/hedy-teach-code)
        * [IO Magazine, април 2021](https://ict-research.nl/wordpress/wp-content/uploads/2021/04/IO-magazine-NR1-2021_web.pdf)
        * [Ingeniería De Software (шпански), фебруар 2021](https://ingenieriadesoftware.es/hedy-mejor-lenguaje-ensenar-programacion-ninos/)
        * [Hello World Magazine, фебруар 2021](images/Hello_World_15_Hedy.pdf)
        * [Discoro, јануар 2021](https://discoro.wordpress.com/2021/01/09/hedy-gradually-learning-a-programming-language/)
        * [Felienne осваја холандску награду за ИКТ истраживање за Hedy, јануар 2021](https://www.nwo.nl/en/news/felienne-hermans-receives-dutch-prize-ict-research-2021)
        * [SlashDot, август 2020](https://news.slashdot.org/story/20/08/17/024248/scientist-proposes-a-new-programming-language-for-teaching-coding-and-python)
        * [GenBeta (шпански), август 2020](https://www.genbeta.com/desarrollo/nuevo-lenguaje-para-ensenar-programacion-a-ninos-como-se-ensena-a-leer-escribir-forma-gradual-niveles)
        * [Developpez (француски), август 2020](https://programmation.developpez.com/actu/308095/Une-scientifique-propose-un-nouveau-langage-de-programmation-pour-enseigner-aux-enfants-le-codage-informatique-au-travers-d-une-approche-graduelle-implementee-en-Python-sur-13-paliers/)
        * [Vives (холандски), октобар 2020](images/artikel_vives.pdf) "Met Hedy stap voor stap leren programmeren"
        * [Leiden University, април 2020](https://www.universiteitleiden.nl/en/news/2020/03/looking-to-distract-the-kids-while-you-work-from-home-get-them-programming)
        * [Mare (холандски), април 2020](https://www.mareonline.nl/cultuur/computercode-voor-de-kids/)
        * [AG Connect (холандски), април 2020](https://www.agconnect.nl/artikel/stapsgewijs-python-leren-programmeren-met-nieuwe-taal-hedy)
start-sections:
-   title: Почетак рада са Hedy
    text: 'Добродошли у Hedy, драго нам је да вам помогнемо да започнете са Hedy.


        Наш [Приручник за наставнике](https://www.hedy.org/for-teachers/manual) садржи детаљан преглед свих функција, али ова страница има кратак преглед како бисте знали шта је шта пре него што се упустите у рад.


        Неколико важних истакнутих тачака:

        * Hedy је алат дизајниран да помогне у управљању учионицом деце која програмирају! Можете креирати своје часове, планове лекција и пратити како деца напредују.

        * Не морате знати много о програмирању ако тек почињете, Hedy ради корак по корак, и за вас!

        * Можете користити Hedy на свом матерњем језику јер је преведен на многе друге језике!

        * Свако дете може програмирати!! Hedy је посебно користан за децу која имају проблеме са видом јер може читати материјал наглас без потребе за мишем.

        * Овде смо да помогнемо, можете нас пронаћи на пример на [Discord-у](https://discord.gg/8yY7dEme9r) или нам можете [послати имејл](hello@hedy.org).'
-   title: Наставници о Hedy
    text: "Разни наставници широм света изразили су своју страст према Hedy, као што су неки поделили са нама:\n\n*Невероватно инспиративно! Супер добар начин да програмирање учините много приступачнијим за себе, али и за ученике. Веома забавно за играње и пуно потенцијала за коришћење са ученицима. Мислим да је ово веома леп алат! Верујем да је ово вредан начин за децу да почну учити програмирање. Python и кодирање су увек били веома узбудљиви, јер је баријера за учење веома висока. Сада је све мало ниже и објашњено је да може бити веома лако. Уживао сам гледајући како Hedy покушава да учини програмирање што приступачнијим за кориснике!*\nХоландија: Наставници математике у обуци (средња школа)\n\n*Једноставан интерфејс и добри примери.* Наставник: 3. - 6. разред (основна школа)\n\n*Вишејезично програмирање и сам концепт постепеног програмирања.* САД: средња школа, 6. - 8. разред\n\n*Постепена природа увођења програмирања.* Аустралија: средња школа\n\n*Аутоматски наставља.* Холандија: 2 HAVO-VWO\n\n*И то што објашњење може бити на холандском (а код на енглеском), и то што се гради са све више могућности.* Холандија: Плус група\n\n*Али Hedy и њени постепени нивои...какав идеја, желео сам лично да вам захвалим што сте ово створили. Не могу вам довољно захвалити. Такође, никада нисам видео ниво ангажовања и ентузијазма мојих ученика, као што сам видео са Hedy. Покрили смо до нивоа 5, и планирамо да проведемо још једну недељу на томе у часовима и лабораторијама, пре него што почнемо са Python-ом.* Пакистан\n\n*'Реалност' програмирања, подсећа на то како је у стварности.* Холандија: Плус група 4 до 8\n\n*Корак по корак активности. Забавне активности.* Холандија: 1е Сви нивои, 2е VWO/HAVO 2е VWO +, 3е HAVO 3е VWO\n\n*Веома ми се свиђа Hedy и такође је лепо постављен, што га чини добрим за коришћење у основној школи. Постепени приступ Hedy-а ради веома добро. Кратко објашњење на почетку сваког нивоа и кратки пример програми помажу да деца брзо схвате шта је ново у изабраном нивоу. Различити задаци које деца могу изабрати такође раде веома добро. Видите како деца бирају задатке који им се допадају и онда раде на њима, кроз нивое. Hedy је веома забаван за децу која су добра у програмирању и желе да окусе прави програмски језик. То је добра припрема за средњу школу чим се тамо почне давати више ИКТ образовања.* Холандија: Оегстгеест Монтесори школа\n\n*Конструкција је тако добра.* Холандија: Нижи разреди средње школе HAVO-VWO\n\n*Могу да пратим темпо разреда.* Холандија: група 7 и 8\n\n![Felienne учи децу](/images/teacherfeedback/Fkids1.JPG) *Felienne учи децу*\n\n\n![Деца уче о Hedy](/images/teacherfeedback/Fkids2.JPG) *Деца уче о Hedy*"
teacher-guide:
-   title: Увод
    key: увод
    subsections:
    -   title: Шта је Хеди?
        text: |-
            Хеди је текстуални програмски језик, посебно развијен за (пред)тинејџере (10 до 15 година).
            За разлику од програмских језика за децу, као што је Scratch, Хеди не користи блокове кода већ текстуални код.
            Тако ћете са Хедијем научити како да куцате код као прави програмери, али у малим корацима са разиграним вежбама.
            На овај начин Хеди може функционисати као корак ка правим програмским језицима као што је Python на приступачан и углавном забаван начин!
            Ако желите да сазнате више, можете погледати овај <a href="https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s" target="_blank">видео</a> о развоју Хедија као програмског језика.
    -   title: Циљна публика
        text: |-
            Хеди је развијен са ученицима основних и нижих средњих школа на уму (узраста 10 - 15 година).
            Важно је да ученици могу добро да читају. Препоручујемо да не почињете са Хедијем пре него што ученици достигну најмање ниво читања трећег разреда.
            Ученицима (и наставницима!) није потребно никакво програмерско искуство пре почетка рада са Хедијем.
    -   title: Како функционише Хеди?
        text: |-
            Хеди је подељен на нивое, у којима се уче нове команде. Сваки ниво садржи разне авантуре за вежбање новоусвојених команди.
            Као наставник, ви одлучујете које авантуре ће бити доступне вашим ученицима. Да ли ће правити ресторан, калкулатор или уклету кућу на овом нивоу? У оквиру сваког нивоа, авантуре су распоређене од најлакших до најтежих.
            Тако ваши ученици стално добијају нове изазове. Авантуре могу радити појединачно или их можете користити у класичној настави.

            Авантуре такође укључују пример кода, како би се осигурало да и наставници са мање дигиталног искуства могу користити Хеди!
            Наравно, Хеди је такође прилагођен креативним наставницима који воле да праве своје планове лекција и авантуре!

            Након програмирања свих авантура одређеног нивоа, ваши ученици могу тестирати своје знање у квизу.
            Можете пратити рад и напредак својих ученика на страници разреда.
    -   title: Уређаји
        text: |-
            Хеди је веб-базиран, што значи да ради на било ком уређају са прегледачем (Google Chrome, Firefox, Edge итд.), тако да су лаптопови, Chromebooks, таблети и чак паметни телефони погодни за коришћење Хедија.
            Нема потребе да преузимате било шта пре рада са Хедијем, само идите на вебсајт и спремни сте!
    -   title: Хеди заједница
        text: |-
            Сви наставници Хедија, програмери и други обожаваоци су добродошли да се придруже нашем <a href="https://discord.gg/8yY7dEme9r" target="_blank">Discord серверу</a>. Ово је идеално место за разговор о Хедију: имамо канале где можете показати своје кул пројекте и лекције, канале за пријаву грешака и канале за ћаскање са другим наставницима и са Хеди тимом.
            <a href="https://www.youtube.com/watch?v=Lyz_Lnd-_aI" target="_blank">Овде</a> можете пронаћи видео о томе како се придружити Discord заједници.
    -   title: Хеди и GDPR
        text: |-
            Организације у ЕУ морају да се придржавају GDPR (Општа уредба о заштити података) приликом обраде личних података.
            Пошто је ово сложено питање за многе школе, можете користити све функције програмирања Хедија без дељења личних података.
            Најлакши начин да то урадите је да користите Хеди без креирања налога за наставника и ученике. Без налога, све функције су доступне, осим персонализације нивоа, чувања програма ученика и прегледа њиховог напретка. То је ограничење, али постоје школе које користе Хеди на тај начин.

            Други начин је да наставник креира налог са имејл адресом без личних података, на пример "docent25@email.com". Поред имејл адресе, која је потребна само за ресетовање лозинке, не морате делити никакве информације када креирате налог наставника.
            Са налогом наставника, можете креирати анонимне налоге за ученике, нпр. rainbow-student1, rainbow-student2, итд. (Погледајте 'Припреме за наставу' за детаљан приручник). На овај начин можете користити све функције Хедија, укључујући чување напретка, без дељења личних података о себи или својим ученицима.

            Ако горе наведено није довољно за ваш контекст, можемо потписати уговор о обради за обраду ваших личних података.
-   title: Туторијал
    key: туторијал
    subsections:
    -   title: Туторијал
        text: Желите ли да пратите туторијал (поново)? Кликните <a href="https://hedy.org/tutorial" target="_blank">овде</a>.
-   title: Припреме за наставу
    key: припреме
    subsections:
    -   title: За наставнике
        text: Можете припремити своје часове на <a href="https://hedy.org/for-teachers" target="_blank">страници за наставнике</a>. На овој страници ћете пронаћи све што вам је потребно за предавање са Хедијем, као што су ваши часови, ваше авантуре и слајдови. Све функције странице за наставнике су објашњене у наставку.
    -   title: Креирање разреда
        text: |-
            Као наставник, можете креирати разред за своје ученике. У овом разреду можете видети налоге ученика и њихове програме и можете пратити њихов напредак.
            Овај <a href="https://www.youtube.com/watch?v=Y3RTIWftJQg" target="_blank">видео</a> вам показује како брзо креирати разред у Хедију.
    -   title: Дуплирање разреда
        text: |-
            Да ли предајете више разреда? Тада не морате прилагођавати сваки разред појединачно. Једноставно направите разред, прилагодите разред (погледајте "Прилагоди свој разред" да бисте сазнали како) и затим дуплирајте овај разред колико год пута желите.
            Можете дуплирати разред на страници 'За наставнике'. Ако дуплирате разред, сва подешавања разреда ће бити дуплирана. То значи да ће сви нивои и авантуре које сте учинили недоступним за први разред сада бити недоступни и за нови разред(е).
            Налози ученика и други наставнички налози у вашем разреду неће бити дуплирани у нови разред.
    -   title: Додавање другог наставника
        text: |-
            Да ли нисте једини наставник који предаје ваш разред? Сада можете додати још једног наставника у разред. Идите на страницу 'За наставнике' и кликните на разред. Затим изаберите 'Позови наставника' и унесите корисничко име вашег колеге.
            Ваш колега ће добити позив на свом налогу да се придружи вашем разреду. Они могу видети ту поруку позива кликом на своје корисничко име у горњем десном углу екрана и избором 'Мој налог'.
            Када други наставник прихвати позив, такође може прилагодити разред.
            Да бисте уклонили другог наставника из вашег разреда, идите на страницу разреда и уклоните другог наставника. Наставник који је креирао разред не може бити уклоњен.
    -   title: Прилагодите свој разред
        text: |-
            Можете прилагодити свој разред и изабрати које авантуре ће бити доступне вашим ученицима. На овај начин ваши ученици неће бити преоптерећени количином авантура и нивоа, и могу се специфично фокусирати на авантуре које желите да вежбају.
            Кликните на свој разред на страници за наставнике и изаберите 'прилагоди разред'. На овој страници можете изабрати нивое, поставити датуме отварања, откључати прагове нивоа и још много тога.

            **Изаберите и наручите авантуре**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/df38cbb2-468e-4317-ac67-92eaf4212adc" width="1000">
            У овом одељку можете изабрати и наручити авантуре. Розе табови су авантуре са новим командама. Сиви табови су обичне авантуре. Да бисте променили редослед авантура, можете превући табове. Међутим, саветујемо вам да користите редован редослед авантура јер је тим Хеди осигурао да авантуре иду од најлакших до најтежих.
            Ако желите да уклоните авантуру за своје ученике, једноставно кликните на крст на табу авантуре.
            <img src="https://github.com/hedyorg/hedy/assets/80678586/0ddd10b5-ef60-4480-a0c4-fc9a0f323baa" width="300">
            Ако желите да додате авантуре, на пример своју авантуру или авантуру коју сте случајно уклонили, користите овај мени да додате авантуру у авантуре ваших ученика. Једноставно кликните на авантуру коју желите да додате и она ће се (поново) појавити у линији авантура. Да бисте поништили све своје промене у авантурама, кликните 'Ресетуј'.

            **Датуми отварања**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/4e59acfa-4772-429f-8328-babb43c942d5" width="300">
            Са овом функцијом можете поставити датуме отварања за нивое. На овај начин можете направити план лекција пре него што ваш курс почне и не бринути о отварању нових нивоа сваке недеље. На слици изнад први ниво је отворен директно, други ће се отворити 23. септембра, а трећи ниво недељу дана касније. Остали нивои су затворени.
            Не желите да постављате датуме отварања? Нема проблема, само оставите овај одељак празан.

            **Откључавање прага нивоа**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/99a34dab-f112-459e-bfd1-07618be4715a" width = "1000">
            Ова функција вам омогућава да поставите праг за оцену квиза ваших ученика пре него што могу наставити на следећи ниво. На пример, ако унесете "80", ваши ученици морају постићи најмање 80% на квизу пре него што им буде дозвољено да пређу на следећи ниво. Ако нису испунили праг, није им дозвољено да наставе и морају поново полагати квиз.
            Не желите да користите праг? Нема бриге, само оставите овај одељак празан.

            **Остала подешавања**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/a8491d67-6d6e-42a7-b672-fd3d083a76f8"/>
            Постоје нека друга подешавања која би вам такође могла бити корисна. Наше прво додатно подешавање је 'Обавезни режим програмера'. У режиму програмера ученици виде само своје улазне и излазне екране и дугме за покретање. Авантуре су скривене и нема доступних листа за варање. Ово може бити корисно у ситуацији теста.
            Ако ова опција није изабрана, режим програмера је доступан и ученицима као добровољна опција.

            Ако желите да сви ваши ученици буду видљиви у разредном резултату, можете изабрати другу опцију.
            Са свим осталим опцијама можете изабрати да сакријете неке функције или садржај за своје ученике, што им може помоћи да се више фокусирају.

            **Сачувај**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/df179df3-3073-4d15-bba6-62e58fb675be" width="300">
            Не заборавите да сачувате своје промене када завршите са прилагођавањем свог разреда.
    -   title: Налози ученика
        text: |-
            Да бисте додали ученике у свој разред, идите на страницу разреда кликом на име разреда на страници 'за наставнике'. Затим кликните 'додај ученике'. Постоје 2 начина да ваши ученици приступе вашем разреду: Можете креирати налоге за њих, или они могу креирати своје налоге.

            **Ви креирате налоге за своје ученике**
            Најлакши начин да додате ученике у свој разред је креирањем налога за њих. Ово се може урадити кликом на дугме 'креирај ученичке налоге' и попуњавањем корисничких имена и лозинки за њих.
            Ученици могу да се пријаве са корисничким именом и лозинком коју сте изабрали. Након тога, могу променити своје корисничко име или лозинку ако желе и још увек ће остати у вашем разреду.
            Овај <a href="https://www.youtube.com/watch?v=eEQvik-Ce5M" target="_blank">видео</a> показује како да додате ученике у свој разред на најбржи и најлакши начин.

            **Ученици креирају своје налоге**
            Ваши ученици такође могу отићи на Хеди вебсајт и креирати своје налоге, баш као што сте ви урадили. Да би ушли у ваш разред, једноставно морају кликнути на линк за позив.
            Можете пронаћи линк за позив на страници разреда и послати га својим ученицима. Имајте на уму да ваши ученици морају бити пријављени на Хеди када кликну на линк, како би све функционисало глатко.
            Такође можете ручно позвати ученика у свој разред помоћу дугмета 'Позови по корисничком имену'.
    -   title: Постављање преферираног језика
        text: |-
            Када ученици креирају профиле, треба да изаберу 'преферирани језик'. Хеди ће увек бити учитан на овом изабраном језику.
            Промена овог језика увек се може извршити касније тако што ћете поново отићи на 'Мој налог' и 'Моја лична подешавања'.

            **За оне који не говоре енглески**
            Не само да можете променити језик авантура на свој језик. Такође можете изабрати на ком језику ће бити кључне речи (на пример 'print' или 'ask').
            На овај начин можете научити своје ученике да програмирају са енглеским кључним речима, али их такође можете пустити да програмирају на свом језику. На пример, холандски ученици могу користити команду 'vraag' уместо 'ask'.
            Ако ученик жели да промени језик, може кликнути на прекидач за кључне речи. Он ће променити кључне речи са енглеског на преферирани језик и назад.
            Занимљива чињеница! Ученицима је дозвољено да програмирају и на енглеском и на свом језику у исто време! Дакле, ако имају проблема да запамте неке кључне речи на енглеском, али лако памте друге, могу користити оба језика истовремено.
            <img src="https://github.com/hedyorg/hedy/assets/80678586/0b3122e6-ff22-43d7-b8b6-62f47f485293" width="100">

            **Видео**
            Овај <a href="https://www.youtube.com/watch?v=QrVZETj4oLM" target="_blank">видео</a> показује како да поставите преферирани језик и промените кључне речи на свој преферирани језик.
    -   title: Чување програма
        text: |-
            Када сте пријављени, видећете Моји програми поред иконе вашег профила.
            Ова опција постоји и за ваше ученике. У Моји програми можете пронаћи све програме на којима сте радили.
            По подразумеваној вредности, програми ће бити сачувани у 'Моји програми' када покренете код, и сваких 10 секунди, под њиховим подразумеваним именом
            и њиховим нивоом (на пример: Прича 5). Ако желите да сачувате програм под новим именом, само унесите ново име у траку за име.
            Тренутно, само један програм може бити сачуван по нивоу, по табу.

            Ви (и ваши ученици) такође можете делити програме користећи дугме за дељење поред имена програма.
            Ови програми ће бити објављени на нашој <a href="https://hedy.org/explore" target="_blank">страници за истраживање</a>, да их сви виде и користе.
            Ако желите да престанете да делите свој програм, идите на 'Моји програми' и кликните 'Престани делити'.

            Икона папирног авиона може се користити за предају програма наставнику разреда. Програми који су предати више неће бити могући за уређивање.
-   title: Предавање са Хеди
    key: предавање
    subsections:
    -   title: Предавање са Хеди
        text: |-
            Хеди садржи много различитих нивоа који сваки уче нову вештину. Препоручујемо да предајете један ниво по лекцији.
            Ово даје вашим ученицима време да у потпуности схвате нову команду или концепт и вежбају са њим, пре него што пређу на следећи ниво.
            Користимо ову структуру у нашим лекцијама: Увод, Нови концепти и команде, хајде да радимо, загонетке и квизови.
    -   title: Слајдови
        text: "Када дајете упутства, можда ћете желети да користите наше слајдове. Наши слајдови су доступни на страници 'За наставнике'. Постоји сет слајдова за сваки ниво. У слајдовима су објашњене све нове команде за тај ниво. Циљ нам је био да објаснимо зашто су ове промене неопходне или како нове команде могу бити корисне.\nТакође дајемо неке примере како се нове команде могу користити. Наравно, можете користити и своје слајдове, или само отворити Хеди и показати својим ученицима вебсајт. Шта год да преферирате да бисте дали најбоље Хеди лекције!"
    -   title: Увод
        text: |-
            Можете започети своје лекције активирањем претходног знања својих ученика: Шта већ знају о теми, шта су научили на претходној лекцији и које грешке су направили из којих су сада научили?
            На овај начин све претходно научене команде и често прављене грешке су свеже у сећању ваших ученика када почнете да уводите нову лекцију.
    -   title: Увођење нових концепата и команди
        text: |-
            Нови концепти и команде могу бити веома тешки за неке ученике да их у потпуности разумеју.
            Зато је важно да моделујете правилну употребу нових команди својим ученицима.
            Посебно на нижим нивоима, где неки ученици уопште немају искуства са програмирањем, може бити тешко за њих да разумеју нове апстрактне концепте.
            Показивање много примера чини апстрактни концепт (на пример: 'Шта је променљива?') препознатљивијим и лакшим за разумевање ('Погледај, променљива pet се променила у dog'). Наше слајдове могу вам помоћи у томе.
    -   title: Хајде да се бацимо на посао
        text: |-
            Сваки ниво садржи различите авантуре које можете пронаћи у розе табовима. Први розе таб објашњава нове команде у овом нивоу.
            Следећи табови су авантуре које ученици могу испробати и прилагодити себи.
            Авантуре су распоређене од најлакших до најтежих, па препоручујемо да почнете са леве стране и кренете ка десној.
            Последњи таб 'шта је следеће' даје мали тизер о томе шта ћете научити у следећем нивоу. Наравно, можете одабрати авантуре које желите да ваши ученици раде за сваки ниво.
            Не морају увек да ураде сваку авантуру. Свака авантура садржи пример кода који ученици могу испробати зеленим дугметом.
            Пример кода се копира у радно поље, где ученици могу испробати код и прилагодити га да буде њихов.
            Подстакните своје ученике да претворе пример кода у своје пројекте додавањем својих идеја и прављењем своје варијације авантуре.
    -   title: Квизови и слагалице
        text: |-
            Да бисте тестирали да ли су ваши ученици усвојили све нове информације у нивоу, можете им дозволити да положе квиз.
            Квиз садржи 10 питања са вишеструким избором о новим концептима и командама за тај ниво.
            Нису сви нивои још увек имају квиз, јер још увек градимо квизове.
            Неки нивои такође садрже слагалице. Слагалице показују ученицима неколико линија кода које ученици морају да ставе у прави редослед.

            Овај <a href="https://www.youtube.com/watch?v=lNh5EdZVUwc" target="_blank">видео</a> показује квизове и слагалице.
    -   title: Евалуација
        text: |-
            Завршите свој час кратком евалуацијом. Шта су ученици научили? Са којим тешкоћама су се сусрели?
            Како су научили из својих грешака? И наравно: Шта су створили?
            Ученици су често веома поносни на своје креације, па је лепо сачувати мало времена и дати својим ученицима прилику да покажу свој рад својим другарима из разреда.
-   title: Статистика наставника
    key: статистика_наставника
    subsections:
    -   title: Live Dashboard
        text: |-
            Ако желите да пратите напредак својих ученика, можете користити ливе дасхбоард. Можете пронаћи ливе дасхбоард кликом на 'Ливе статистика' на страници ваше класе.
            <img src="https://github.com/hedyorg/hedy/assets/80678586/97a54679-b1d6-46b4-a633-ab0161114642" width="1000">
            Све функције овог дасхбоарда су објашњене у наставку.
    -   title: Избор нивоа
        text: |-
            <img src="https://github.com/hedyorg/hedy/assets/80678586/94dc891d-cdd6-4311-91f2-51900eaf4c2a" width="500">
            Прво, можете одабрати нивое које желите да видите на дасхбоарду. Одаберите нивое на којима ваши ученици тренутно раде кликом на број тог нивоа. Поништите избор нивоа које не желите да видите кликом на њих поново.
            У овом примеру су одабрани нивои 1 и 2. Можете кликнути на освежи да бисте освежили дасхбоард и добили најновије статистике.
    -   title: Преглед класе
        text: |-
            <img src="https://github.com/hedyorg/hedy/assets/80678586/b2c30ef9-6eba-4c02-92a3-9669504a54a8" width="1000">
            У прегледу класе можете видети на којој авантури ваши ученици тренутно раде. Можете видети да један ученик ради на авантури 'Камен, папир, маказе' у нивоу 1, један ради на 'Пророчанство' у нивоу 1 и један ученик ради на авантури 'Камен, папир, маказе' у нивоу 2.
            Ако желите да знате који од ваших ученика ради на авантури, једноставно кликните на број и њихова корисничка имена ће се појавити.
            Такође можете видети колико ваших ученика је завршило квиз. У овом случају, један ученик је завршио квиз у нивоу 1. Поново, можете кликнути на 1 да видите који од ваших ученика је то.

            Такође можете видети да један од ученика 'недостаје' у овом прегледу. То је зато што ради на авантури у нивоу 4, који није одабран.
    -   title: Листа ученика
        text: |-
            <img src="https://github.com/hedyorg/hedy/assets/80678586/693e976c-199f-46f4-abae-3f18f9854cd0" width="1000">
            Овде можете пронаћи листу својих ученика и видети њихов индивидуални напредак. Плави прстен вам показује на чему ваши ученици тренутно раде.
            <img src="https://github.com/hedyorg/hedy/assets/80678586/c7e2150f-60de-4ef7-8862-5901a7fb6609" width="150">
            Важно је приметити да плаве тачке значе да је ученик 'покушао' авантуру. То значи да су покренули код у овој авантури и прешли на следећу авантуру, тако да то не значи аутоматски да су добро урадили!
            Ако желите да видите како се појединачни ученик сналази, можете кликнути на његово име у овом прегледу. Ово је оно што видите ако кликнете на marleen_h3a на пример:
            <img src="https://github.com/hedyorg/hedy/assets/80678586/f8c2480d-c724-46f9-a702-33532828de70" width="800">
            Видите да Марлин има неких проблема са програмирањем. Покушала је да покрене програм који садржи празнине више пута, тако да можда не схвата да мора да промени примере кода пре него што их покрене.
            На овај начин овај преглед вам може дати боље разумевање са чим се ученик бори.
    -   title: Уобичајене грешке
        text: |-
            <img src="https://github.com/hedyorg/hedy/assets/80678586/e7af5ce3-ca74-48e7-9654-f17435596fbc" width="500">
            Ако вас не занимају само индивидуалне борбе ваших ученика, већ желите да знате шта цела класа изгледа ради погрешно, можете користити овај преглед уобичајених грешака.
            Најчешће поруке о грешкама које ваши ученици добијају ће се појавити у овом прегледу за вас, тако да можете дати додатна упутства целој класи ако је потребно.
            Кликом на грешку, можете видети који ученици имају проблема са том грешком. Кликом на реши, уклонићете ову грешку са листе.
    -   title: Преглед програма по авантури
        text: |-
            <img src="https://github.com/hedyorg/hedy/assets/80678586/f07bf714-7250-4711-82a1-616f9f7b55e8" width="1000">
            Још један користан преглед свих програма које су ваши ученици направили у нивоу можете пронаћи на страници ваше класе. Идите на страницу класе и кликните на 'Преглед програма по авантури'. Овде ћете пронаћи овај преглед.
            Можете користити овај преглед да проверите рад својих ученика. Ако су направили програм у авантури, око се појављује у вашем прегледу. Кликните на око да бисте видели њихов рад. Да ли вам се допало? Тада можете означити поље и појавиће се зелена квачица.
            На овај начин креирате леп преглед за себе о резултатима својих ученика.
-   title: Додатне Hedy функције
    key: карактеристике
    subsections:
    -   title: Направите своју авантуру
        text: Такође је могуће за наставнике да креирају своју авантуру. Овај <a href="https://www.youtube.com/watch?v=A0zbXpxX4q4" target="_blank">видео</a> вам показује како да креирате своју авантуру као наставник и додате је својој класи(ама).
    -   title: Страница за истраживање
        text: |-
            На <a href="https://hedy.org/explore" target="_blank">страници за истраживање</a> можете видети рад других Hedy корисника. Можете испробати њихове програме и користити их као инспирацију да сами креирате нешто кул.
            Такође можете додати програм који сте направили на страницу за истраживање кликом на 'Сачувај и подели код' на екрану за кодирање или идите на Моји програми и кликните на 'Подели'.
            Не желите више да делите свој рад? Једноставно идите на 'Моји програми' и кликните на 'Уклони дељење'.
            Ако желите више информација о страници за истраживање, погледајте овај <a href="https://www.youtube.com/watch?v=26boFjqvS5Q" target="_blank">видео</a>.
    -   title: Моја достигнућа
        text: |-
            Ако кликнете на своје корисничко име у горњем десном углу екрана, можете отићи на <a href="https://hedy.org/my-achievements" target="_blank">Моја достигнућа</a>. На овој страници се прикупљају ваша достигнућа. Ваши ученици такође имају такву страницу.
            Када пређете мишем преко значке, видећете како да зарадите значку. Постоје и скривене значке, за које ћете морати сами да откријете како да их зарадите.
            Ако желите више информација о достигнућима, погледајте овај <a href="https://www.youtube.com/watch?v=-FjmKejukCs" target="_blank">видео</a>.
    -   title: Високи резултати
        text: |-
            На <a href="www.https://hedy.org/highscores" target="_blank">овој страници</a> можете видети најбоље резултате свих корисника Hedy.
            У овом <a href="https://www.youtube.com/watch?v=IqTiUkBVTo8" target="_blank">видеу</a> можете научити нешто више о најбољим резултатима.
    -   title: Дебагер
        text: |-
            Да ли ваш (учеников) код не ради? Мора да постоји грешка (грешка у кодирању) у њему! Можете користити дебагер да пронађете грешку.
            Дебагер је дугме са бубамаром на вашем екрану за кодирање. Ако га притиснете, можете покренути свој код линију по линију да бисте пронашли грешку.
            Да ли сте пронашли грешку? Притисните црвено дугме за заустављање и дебагер ће се искључити.
    -   title: Читање наглас
        text: Да ли желите да излаз вашег програма буде прочитан наглас? Тада можете користити функцију читања наглас која се налази испод дугмета 'покрени код' на вашем екрану за кодирање.
    -   title: Режим програмера
        text: |-
            Да ли вас ометају све авантуре, или желите да направите дугачак програм? Онда погледајте прекидач 'Режим програмера' на дну вашег екрана за кодирање.
            Режим програмера омогућава вама и вашим ученицима да користите већи екран за кодирање.
    -   title: Варалице
        text: |-
            На сваком нивоу постоји дугме са овим емоџијем 🤔. Ви и ваши ученици можете пронаћи "варалице" тамо. На овој варалици можете пронаћи све команде које су употребљиве на овом нивоу у њиховом исправном облику.
            Дакле, ако сте заборавили како команда функционише, једноставно завирите у варалицу!
    -   title: Видео
        text: Овај <a href="https://www.youtube.com/watch?v=c4MntPPgl1Y" target="_blank">видео</a> вам показује још више карактеристика Hedy, као што су варалице и прекидач за кључне речи.
-   title: После Hedy
    key: после
    subsections:
    -   title: Шта радити после Hedy?
        text: |-
            Честитамо на достизању краја Hedy! Ваши ученици су сада научили како да креирају своје основне програме у програмском језику Python.
            Наравно, могли бисте наставити програмирање у нашем Hedy компајлеру, али можда би било узбудљивије за ваше ученике да пређу на "прави" Python интерфејс.
            Да ли бисте желели да наставите са предавањем Python-а? Онда посетите <a href="https://www.python.org/about/gettingstarted/" target="_blank">Python вебсајт</a> да научите како да започнете у другом компајлеру.

            Сада када ваши ученици имају основно знање о програмирању уопште, могли бисте их упознати и са другим текстуалним програмским језицима. Језик се може променити, али концепти не, тако да ће им Hedy и даље пружити велику предност.
-   title: Одговори на вежбе
    key: одговори
    intro: |-
        Одговори на све вежбе могу се наћи на јавном профилу корисничког налога 'Hedy_answers'. Често охрабрујемо ученике да користе своју креативност у својим одговорима, тако да су ови одговори само смерница како би могао изгледати могући тачан одговор.

        Да бисте отишли на профил 'Hedy_answers', кликните <a href="https://hedy.org/user/hedy_answers" target="_blank">овде</a>.
-   title: Уобичајене грешке
    key: уобичајене_грешке
    intro: |-
        Можете научити из својих грешака, посебно у кодирању! Прављење грешака је неизбежно и одлична прилика за учење, али за наставнике може бити изазов пронаћи исправно решење за грешку! Посебно како програми постају све дужи и дужи како ученици напредују кроз нивое. Зато смо направили листу са често прављеним грешкама на сваком нивоу и њиховим решењима.
    levels:
    -   level: '1'
        sections:
        -   title: Ученици заборављају да укуцају команде
            example:
                error_text: На пример, укуцају реченицу без коришћења {print}.
                error_code: Hedy не може да одштампа ово
                solution_text: Научите своје ученике да увек започну линију кода са командом.
                solution_code: '{print} Hedy може да одштампа ово!'
        -   title: Ученици користе велика слова када укуцавају команде
            example:
                error_text: Команде неће радити ако су написане великим словима.
                error_code: |-
                    {ask} Зашто мој код не ради?
                    {print} Зато што користим велика слова.
                solution_text: Уклоните велика слова.
                solution_code: |-
                    {ask} Зашто мој код сада ради?
                    {print} Зато што сам уклонио велика слова!
        -   title: Ученици користе {echo} без {ask}
            example:
                error_text: '{echo} је направљен да понавља одговор након {ask} команде. Без {ask} {echo} неће радити ништа.'
                error_code: '{echo} Твоје име је'
                solution_text: Додајте {ask} команду да би радила.
                solution_code: |-
                    {ask} Како се зовеш?
                    {echo} Твоје име је
        -   title: Ученици желе да њихова {echo} реч (променљива) буде у средини реченице
            example:
                error_text: И у праву су! Зато ће научити да користе исправне променљиве у следећем нивоу.
                error_code: |-
                    {ask} Који програмски језик је најзабавнији?
                    {echo} је најбољи!
                solution_text: 'На нивоу 1 морамо се задржати на овоме:'
                solution_code: |-
                    {ask} Који програмски језик је најзабавнији?
                    {echo} Најбољи је...
        -   title: 'Корњача: Ученици пуштају корњачу да хода ван екрана'
            example:
                error_text: Често ученици воле да испробавају велике бројеве када користе корњачу, што узрокује да стрелица хода ван екрана.
                error_code: |-
                    {forward} 300
                    {turn} 90
                solution_text: У примеру, ученици имају тенденцију да мисле да команда за окретање није успела; иако је урадила оно што је требало. Оно што се догодило је да је корњача прошла границе екрана. Користите мање бројеве да бисте то спречили.
                solution_code: |-
                    {forward} 100
                    {turn} 90
        -   title: "Корњача: Ученици користе команду backward, али таква команда не постоји."
            example:
                error_text: Backward није команда.
                error_code: назад 100
                solution_text: 'Да би корњача ишла уназад, користите команду {forward} и негативан број. На пример:'
                solution_code: '{forward} -100'
    -   level: '2'
        sections:
        -   title: Ученици праве типографске грешке у својим командама
            example:
                error_text: Hedy не може препознати команду са типографском грешком.
                error_code: prinnt Don't make typos
                solution_text: Научите своје ученике да читају поруке о грешкама. На тај начин могу сами открити шта је пошло наопако.
                solution_code: "{print} Don't make typos"
        -   title: Ученици заборављају да је команда ask промењена
            example:
                error_text: На овом нивоу ученици уче о променљивама. Команда ask такође захтева променљиву, али ученици то заборављају.
                error_code: '{ask} шта би желео да једеш'
                solution_text: На овом нивоу мораш рећи Хеди где да сачува твој одговор, како би могао бити коришћен касније. То се зове променљива.
                solution_code: наруџбина {is} {ask} Шта би желео да једеш
        -   title: Ученици покушавају да користе команду `{echo}`
            example:
                error_text: За неке ученике може бити фрустрирајуће да науче да команда `{echo}` више не ради. Зато је веома важно објаснити предности коришћења променљивих. На пример, можеш користити више променљивих у коду и можеш их ставити било где у реченици!
                error_code: |-
                    одговор {is} {ask} Зашто {echo} више не ради?!
                    {echo}
                solution_text: Користи променљиву уместо тога.
                solution_code: |-
                    одговор {is} {ask} Зашто {echo} више не ради?!
                    {print} одговор
        -   title: Ученици користе име променљиве или као обичну реч
            example:
                error_text: У примеру испод реч 'име' се користи као променљива, али и као обичан текст. Излаз овог кода ће бити 'Здраво моје Хеди је Хеди'.
                error_code: |-
                    име {is} Хеди
                    {print} Здраво моје име је име
                solution_text: Зато немој користити реч коју желиш да користиш у тексту као име променљиве. На нивоу 4 ово је решено са наводницима.
                solution_code: |-
                    име {is} Хеди
                    {print} Здраво ја сам име
        -   title: Ученици користе дуга имена променљивих која садрже две речи.
            example:
                error_text: Променљива треба да буде именована једном речју. Можеш користити подвлаку да повежеш две речи. То се рачуна као једна.
                error_code: изабрана врата {is} {ask} Која врата би изабрао
                solution_text: Додај подвлаку.
                solution_code: изабрана_врата {is} {ask} која врата би изабрао
        -   title: Ученици могу користити два различита имена за исту променљиву
            example:
                error_text: У овом примеру ученик је користио 'коњ' и 'име' за исте променљиве.
                error_code: |-
                    коњ {is} {ask} Како се зове твој коњ
                    {print} Твој коњ се зове име
                solution_text: Увек провери да ли променљива има исто име кроз цео код. Мале разлике могу бити тешке за уочавање (на пример множина), али ће ометати код.
                solution_code: |-
                    име {is} {ask} Како се зове твој коњ
                    {print} Твој коњ се зове име
    -   level: '3'
        sections:
        -   title: Ученици покушавају да прикажу целе листе
            example:
                error_text: Листа не може бити приказана. Можеш приказати само један елемент са листе са {at} {random}.
                error_code: |-
                    намирнице {is} јабуке, млеко, чоколада
                    {print} намирнице
                solution_text: Да би приказао листу свих намирница, једноставно их стави после команде `{print}`. Иначе можеш користити листу да прикажеш један елемент са `{at}` `{random}`.
                solution_code: |-
                    {print} јабуке, млеко, чоколада

                    # или

                    намирнице {is} јабуке, млеко, чоколада
                    {print} намирнице {at} {random}
        -   title: Ученици користе име променљиве или листе као обичан текст
            example:
                error_text: Овај проблем се вероватно појавио и на нивоу 2. Сада се може десити и са листама.
                error_code: |-
                    име {is} Хеди
                    {print} Здраво моје име је име

                    # или

                    животиња {is} носорог, пчела, лабуд
                    {print} Најбоља животиња је... животиња {at} {random}
                solution_text: Немој користити имена променљивих или листа у обичном тексту за приказивање. На нивоу 4 овај проблем је решен са наводницима.
                solution_code: |-
                    име {is} Хеди
                    {print} Здраво ја сам име

                    # или

                    животиње {is} носорог, пчела, лабуд
                    {print} Најбоља животиња је... животиње {at} {random}
        -   title: Ученици заборављају `{at}` у `{at}` `{random}`
            example:
                error_text: Као у примеру
                error_code: |-
                    птице {is} врабац, галеб, црвендаћ
                    {print} птице random
                solution_text: Овај проблем је решен додавањем речи at.
                solution_code: |-
                    птице {is} врабац, галеб, црвендаћ
                    {print} птице {at} {random}
        -   title: Ученици заборављају да користе команду `{print}` када такође користе команду `{at}` `{random}`
            example:
                error_text: Or they will sometimes put `{at}` `{random}` at the beginning of the line.
                error_code: |-
                    fruit {is} apple, cherry, banana
                    fruit {at} {random}
                solution_text: Emphasize to your students that you always need a print to print text.
                solution_code: |-
                    fruit {is} apple, cherry, banana
                    {print} fruit {at} {random}
        -   title: Students forget to use commas in their lists
            example:
                error_text: In a list items are seperated with a comma.
                error_code: |-
                    pizzas {is} funghi tonno quattro stagioni
                    {print} pizzas {at} {random}
                solution_text: After each item on your list, there should be a comma
                solution_code: |-
                    pizzas {is} funghi, tonno, quattro stagioni
                    {print} pizzas {at} {random}
        -   title: Students try to use `{at}` `{random}` without a list
            example:
                error_text: For example
                error_code: |-
                    clubs {is} Manchester United
                    {print} clubs {at} {random}
                solution_text: Hedy can't print anything at random, because there is no list to choose from.
                solution_code: |-
                    clubs {is} Manchester United, Bayrn Munchen, FC Barcelona
                    {print} clubs {at} {random}
        -   title: Students try to use add/remove without a list
            example:
                error_text: In the example below 'names' is not a list, but a variable. You cannot add anything to it.
                error_code: |-
                    names {is} Jake
                    your_name {is} {ask} Who are you?
                    {add} your_name {to} names
                    {print} names {at} {random}
                solution_text: There has to be a list first, so you have to add a second name to turn names into a list, for example Amy. If you don't want amy on your list, you can use remove to remove it after.
                solution_code: |-
                    names {is} Jake, Amy
                    your_name {is} {ask} Who are you?
                    {add} your_name {to} names
                    {print} names {at} {random}
        -   title: Students forget to use to/from in add/remove
            example:
                error_text: Without to/from the add/remove command won't work.
                error_code: |-
                    adventures {is} story, parrot, dice
                    choice {is} Which adventure do you like best?
                    {add} choice
                    {remove} dice
                    {print} I love adventures {at} {random}
                solution_text: Hedy has to know which list the item should be added to/removed from.
                solution_code: |-
                    adventures {is} story, parrot, dice
                    choice {is} Which adventure do you like best?
                    {add} choice {to_list} adventures
                    {remove} dice {from} adventures
                    {print} I love adventures {at} {random}
    -   level: '4'
        sections:
        -   title: Students forget to use quotation marks on both sides of the text
            example:
                error_text: In this level print and ask need a set of quotation marks. One before of the text and one after.
                error_code: |-
                    {print} Hello
                    mood {is} {ask} 'How are you?
                solution_text: Add the correct quotation marks.
                solution_code: |-
                    {print} 'Hello'
                    mood {is} {ask} 'How are you?'
        -   title: Students use the wrong quotation marks
            example:
                error_text: It is important to start your lesson by checking if the students know how to type a quotation mark properly. Else they might use the "double quotes" or the skewed one `.
                error_code: |-
                    {print} `Welcome to the restaurant`
                    food {is} {ask} "What would you like to order?"
                solution_text: 'These are the correct quotation marks:'
                solution_code: |-
                    {print} 'Welcome to the restaurant'
                    food {is} {ask} 'What would you like to order?'
        -   title: Students use an apostrophe in their text
            example:
                error_text: From this level on apostrophes are not allowed. They are often used in English when typing contractions like you're, don't or what's.
                error_code: "{print} 'You're not allowed to type this'"
                solution_text: You can choose to use the wrong grammar and just leave the apostrophe out. Or you could use the ` as an apostrophe.
                solution_code: |-
                    {print} 'Youre allowed to type this'
                    {print} 'And you`re able to do this'
    -   level: '5'
        sections:
        -   title: Students forget to use `{print}` in an `{if}` command
            example:
                error_text: After students use `{if}` or `{else}` they forget to use a second command like `{print}` or `{ask}`.
                error_code: |-
                    {if} name {is} Hedy 'Great!'
                    {else}  Hedy {is} better!
                solution_text: Add the print command to fix it.
                solution_code: |-
                    {if} name {is} Hedy {print} 'Great!'
                    {else} {print} 'Hedy is better!'
        -   title: Students might use two different names for the same variable
            example:
                error_text: In this example the student has used 'horse' and 'name' for the same variables.
                error_code: |-
                    horse {is} {ask} 'What is your horse called?'
                    {if} name {is} Bonfire {print} 'cool'
                    {else} {print} 'less cool!'
                solution_text: Always check whether the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.
                solution_code: |-
                    horse {is} {ask} 'What is your horse called'
                    {if} horse {is} Bonfire {print} 'cool!'
                    {else} {print} 'less cool!'
        -   title: Students still forget the quotes on both sides
            example:
                error_text: Using the `if` command can make the code lines very long and students tend to forget to use quotes.
                error_code: |-
                    {if} name {is} Hedy {print} fun
                    {else} {print} 'meh!
                solution_text: Always use 2 quotes in a print command.
                solution_code: |-
                    {if} name {is} Hedy {print} 'fun'
                    {else} {print} 'meh!'
        -   title: Students use quotes around variable names
            example:
                error_text: In this level there are no quotes around variable names.
                error_code: |-
                    {if}  name  {is} 'Hedy' {print} 'fun'
                    {else} {print} 'meh!'
                solution_text: Remove the quotes to get the code to work.
                solution_code: |-
                    {if} name {is} Hedy {print} 'fun'
                    {else} {print} 'meh!
        -   title: Students use long variable names containing two words
            example:
                error_text: A variable should be named with one word. You could use an underscore to connect two words. That counts as one.
                error_code: chosen door is ask  Which door do you pick?
                solution_text: Add an underscore.
                solution_code: chosen_door {is} {ask} 'which door do you pick?'
        -   title: Students want multiple answers to be correct
            example:
                error_text: For example this student Hedy to tell all his friends that they are funny, but other classmates would be told that they are not.
                error_code: "{if} name {is} Jesse, David, Souf print  You are funny  {else} {print} 'You are not funny'"
                solution_text: |-
                    You could use the `in` command for that. It is explained in a higher level, but it does already work in level 5.
                    Another solution is to use multiple if commands and no else command. The disadvantage is that it won't tell the other classmates that they are not funny.
                solution_code: |-
                    friends {is} Jesse, David, Souf
                    name {is} {ask} 'Who are you?'
                    {if} name {in} friends {print} 'You are funny'
                    {else} {print} 'You are not funny'

                    # or

                    name {is} {ask} 'Who are you?'
                    {if} naam {is} Jesse {print} 'You are funny'
                    {if} naam {is} David {print} 'You are funny'
                    {if} naam {is} Souf {print} 'You are funny'
        -   title: The students make the variable name the same as the value in the `{if}` statement
            example:
                error_text: In the example below the password is 'password'. This will result in it always being correct.
                error_code: |-
                    password {is} {ask} 'What is the password?'
                    {if} password {is} password {print} 'Access granted'
                    {else} {print} 'Acces denied!'
                solution_text: Pick a different name for your variable.
                solution_code: |-
                    secret_password {is} {ask} 'What is the password'
                    {if} secret_password {is} password {print} 'Access granted!'
                    {else} {print} 'Access denied!'
    -   level: '6'
        sections:
        -   title: Students struggle with quotation marks
            example:
                error_text: Some students struggle with adding quotation marks or not. If you add quotation marks, the output screen will literally show '5+5'.
                error_code: "{print} '5 + 5'"
                solution_text: In this code the output screen will print '10'.
                solution_code: '{print} 5 + 5'
        -   title: Students struggle with the concept of doing maths with a variable
            example:
                error_text: 'Some students will find it hard to do maths with variables. Try to show them very simple examples, like:'
                error_code: |-
                    age = {ask} 'How old are you?'
                    {print} 'Next year you will be ' age + 1
                solution_text: Or take it a step further like this.
                solution_code: |-
                    price = 0
                    {print} 'Welcome to our burger restaurant'
                    burger = {ask} 'Would you like a burger?'
                    {if} burger = yes price = price + 10
                    drink = {ask} 'Would you like a drink?'
                    {if} drink = yes price = price + 4
                    {print} 'That will be ' price ' euros please'
    -   level: '7'
        sections:
        -   title: Students forget one of the word of the repeat command, or they forget the print command
            example:
                error_text: Make sure that the students know to use both the full repeat command and the print command.
                error_code: |-
                    {repeat} 3 {times}  For he`s a jolly good fellow
                    {repeat} 3 print
                solution_text: 'This is the correct code:'
                solution_code: |-
                    {repeat} 3 {times} {print} 'For he`s a jolly good fellow'
                    {repeat} 3 {times} {print} 'Which nobody can deny!'
        -   title: Students try to repeat multiple lines
            example:
                error_text: In this level you can only repeat one line of code multiple times. In this code the student wanted to print 3 different drinks, but it won't work. It will ask the question 3 times and only print the last answer.
                error_code: |-
                    {repeat} 3 {times} drink = {ask} 'What would you like to drink?'
                    {print} drink
                solution_text: You should go to the next level to be able to repeat multiple lines. So on this level you'll have to print everything seperately.
                solution_code: |-
                    drink = {ask} 'What would you like to drink?'
                    {print} drink
                    drink = {ask} 'What would you like to drink?'
                    {print} drink
                    drink = {ask} 'What would you like to drink?'
                    {print} drink
        -   title: Students make programs that take too long to run
            example:
                error_text: In this level it's very easy to make long-running programs. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: "{repeat} 100 {times} {print} 'How many times can I repeat this?'"
                solution_text: Make sure the programs aren't too long
                solution_code: "{repeat} 20 {times} {print} 'This is enough'"
    -   level: '8'
        sections:
        -   title: Students use the indentation wrong
            example:
                error_text: Indentation is a new concept in this level, that is hard to use for some students. Make sure they practise some simple snippets before making a whole program with it.
                error_code: |-
                    {repeat} 3 {times}
                    {print} 'hello'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    {repeat} 3 {times}
                        {print} 'hello'
        -   title: Students only repeat 1 line when they wanted to repeat multiple lines
            example:
                error_text: For instance, in the code below the student wanted to take the drinks order of 3 people. But instead the program asked 3 times, but only wrote down one order.
                error_code: |-
                    {repeat} 3 {times}
                        drink = {ask} 'What would you like to drink?'
                    {print} drink
                solution_text: |-
                    In the correct code the third line starts with indentation too. This way it belongs to the repeat block and therefore it will be repeated 3 times.
                    Showing your students these differences can help them understand why we need indentation to make our programs work.
                solution_code: |-
                    {repeat} 3 {times}
                        drink = {ask} 'What would you like to drink?'
                        {print} drink
        -   title: Students want to nest `{if}` statements, or put `{if}` statements inside a loop
            example:
                error_text: |-
                    In this level students aren't allowed yet to put `{if}` statements inside other `{if}` statements or inside repeat loops.
                    In the next level this is allowed.
                error_code: |-
                    birthday = {ask} 'Is it you birthday?'
                    {if} birthday = yes
                        {repeat} 3 {times}
                            {print} 'Hip Hip Hooray!'
                solution_text: 'This is the correct code for this level:'
                solution_code: |-
                    birthday = {ask} 'Is it you birthday?'
                    {if} birthday = yes
                        {print} 'Hip Hip Hooray!'
                        {print} 'Hip Hip Hooray!'
                        {print} 'Hip Hip Hooray!'
        -   title: Students make programs that take too long to run
            example:
                error_text: In this level it's very easy to make long-running programs. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: |-
                    {repeat} 100 {times}
                        {print} 'How many times can I repeat this?'
                solution_text: Make sure the programs aren't too long
                solution_code: |-
                    {repeat} 20 {times}
                        {print} 'This is enough'
        -   title: Students use the `{if}` command to check if the variable value is the same as the variable name
            example:
                error_text: |-
                    We have seen this mistake by some of our students. They make a password for their computer, but they make the password 'password'.
                    In line 2 the computer is asked to check whether the variable password is the same as the variable password, so itself. Which means the answer is always yes.
                    So with this code the answer will always be 'You can come in' no matter what the player fills in.
                error_code: |-
                    password {is} {ask} 'What is the password?'
                    {if} password {is} password
                        {print} 'You can come in'
                    {else}
                        {print} 'You are not allowed'
                solution_text: You can fix this mistake by adding quotation marks. This way the computer knows that the second password in `{if} password {is} 'password'` is a string value (so normal text) and not the variable name.
                solution_code: |-
                    password {is} {ask} 'What is the password?'
                    {if} password {is} 'password'
                        {print} 'You can come in'
                    {else}
                        {print} 'You are not allowed'
    -   level: '9'
        sections:
        -   title: Students make mistakes with indentation
            example:
                error_text: The hardest part about this level is getting the indentation right. Students love nesting `{if}` statements, sometimes even inside other nested `{if}` statements. Keeping track of indentation can get pretty tough.
                error_code: |-
                    {print} 'Robin is walking downtown'
                    location = {ask} 'Is Robin going into a shop, or does she go home?'
                    {if} location {is} shop
                        {print} 'She enters the shop.'
                        {print} 'Robin sees an interesting looking book'
                        book = {ask} 'Does Robin buy the book?'
                            {if} book {is} yes
                    {print} 'Robin buys the book and goes home'
                    {else}
                        {print} 'Robin leaves the shop and goes home'
                    {else}
                        {print} 'Robin goes home'
                solution_text: This is the correct code. Try to keep track of all the different constructions when putting `{if}` statements inside other `{if}` statements.
                solution_code: |-
                    {print} 'Robin is walking downtown'
                    location = {ask} 'Is Robin going into a shop, or does she go home?'
                    {if} location {is} shop
                        {print} 'She enters the shop.'
                        {print} 'Robin sees an interesting looking book'
                        book = {ask} 'Does Robin buy the book?'
                        {if} book {is} yes
                            {print} 'Robin buys the book and goes home'
                        {else}
                            {print} 'Robin leaves the shop and goes home'
                    {else}
                        {print} 'Robin goes home'
    -   level: '10'
        sections:
        -   title: Students do not use the for command correctly
            example:
                error_text: We often see that students try to print the list (in the example animals) instead of the items of the list.
                error_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                      {print} 'I love ' animals
                solution_text: The word animals in the last line should be changed into animal.
                solution_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                      {print} 'I love ' animal
        -   title: Students forget the indentation
            example:
                error_text: Students tend to forget to use indentation after a for command.
                error_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                    {print} 'I love ' animals
                solution_text: You should use indentation after a for command.
                solution_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                      {print} 'I love ' animal
    -   level: '11'
        sections:
        -   title: Students forget to use indentation
            example:
                error_text: Make sure that the students use indentation.
                error_code: |-
                    {for} i {in} {range} 1 {to} 5
                    {print} i
                solution_text: 'This is the correct code:'
                solution_code: |-
                    {for} i {in} {range} 1 {to} 5
                        {print} i
        -   title: Students don't understand the i
            example:
                error_text: |-
                    Some students don't understand that i is a variable. i is chosen, because it is used in Python programming, but you could just as easily use a different variable name.
                    For example, this code:
                error_code: |-
                    {for} i {in} {range} 1 {to} 5
                    {print} i
                solution_text: Could just as well be replaced with this code. It works the same.
                solution_code: |-
                    {for} banana {in} {range} 1 {to} 5
                        {print} banana
    -   level: '12'
        sections:
        -   title: Students forget quotation marks
            example:
                error_text: Students need more quotation marks now than in the previous levels. In this example quotation marks were forgotten in the list and in the `{if}` command.
                error_code: |-
                    superheroes = Spiderman, Batman, Iron Man
                    superhero = superheroes {at} {random}
                    {if} superhero = Batman
                        {print} 'IM BATMAN!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    superheroes = 'Spiderman', 'Batman', 'Iron Man'
                    superhero = superheroes {at} {random}
                    {if} superhero {is} 'Batman'
                        {print} 'IM BATMAN!'
        -   title: Students use quotation marks on numbers they want to use for calculations
            example:
                error_text: |-
                    You can use quotation marks on numbers, but only if you want the computer to think of them as text. This means you can't do calculations with the number.
                    In the example below, you can't do maths with the number 25, because it's in quotation marks.
                error_code: |-
                    score = '25'
                    answer {is} {ask} 'Do you want a point?'
                    {if} answer {is} 'yes'
                        score = score + 1
                        {print} score
                solution_text: 'This is the correct code:'
                solution_code: |-
                    score = 25
                    answer {is} {ask} 'Do you want a point?'
                    {if} answer {is} 'yes'
                        score = score + 1
                        {print} score
        -   title: Students use commas instead of periods in decimal numbers
            example:
                error_text: Decimal numbers can be used from this level on, but you can't use commas.
                error_code: '{print} 2,5 + 2,5'
                solution_text: 'This is the correct code:'
                solution_code: '{print} 2.5 + 2.5'
    -   level: '13'
        sections:
        -   title: Students confuse `and` with `or`
            example:
                error_text: Both commands might appear similar, but their functions are very different.
                error_code: |-
                    game {is} {ask} 'Do you want to play a game?'
                    time {is} {ask} 'Do you have time to play?'
                    {if} game {is} 'yes' {or} time {is} 'yes'
                        {print} 'Lets play!'
                solution_text: In this case, the person should answer yes on both questions, so you should use `and`.
                solution_code: |-
                    game {is} {ask} 'Do you want to play a game?'
                    time {is} {ask} 'Do you have time to play?'
                    {if} game {is} 'yes' {and} time {is} 'yes'
                        {print} 'Lets play!'
    -   level: '14'
        sections:
        -   title: Students confuse the < and > signs
            example:
                error_text: Often, students are already familiar with these signs from maths class. But if your students don't know these signs yet, they might have a challenge with it.
                error_code: |-
                    age = {ask} 'How old are you?'
                    {if} age < 12
                        {print} 'You are older than I am!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
        -   title: Students use the wrong signs for `!=` `<=` and `>=`
            example:
                error_text: These signs are probably new for most students. Make sure to explain these signs to your students.
                error_code: |-
                    name = {ask} 'What is your name?'
                    {if} name =  'Hedy'
                        {print} 'You are not Hedy'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
        -   title: Students forget to use the == sign
            example:
                error_text: In this level, students are still allowed to use = or is. But on other levels, or in python, they might get in trouble for that. So it is best to train them to use it.
                error_code: |-
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy'
                        {print} 'You are cool!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    name = {ask} 'What is your name?'
                    {if} name == 'Hedy'
                        {print} 'You are cool!'
    -   level: '15'
        sections:
        -   title: Students forget indentation in the while loop
            example:
                error_text: Indentation is often hard for students.
                error_code: |-
                    answer = 0
                    {while} answer != 25
                    answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
    -   level: '16'
        sections:
        -   title: Students forget the brackets
            example:
                error_text: From this level on lists should be in brackets.
                error_code: |-
                    icecream = 'starwberry', 'chocolate'
                    {print} 'I love ' icecream[{random}] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    {print} 'I love ' icecream[{random}] ' icecream'
        -   title: Students use the wrong brackets
            example:
                error_text: From this level on lists should be in brackets.
                error_code: |-
                    icecream = ('starwberry', 'chocolate')
                    {print} 'I love ' icecream[{random}] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    {print} 'I love ' icecream[{random}] ' icecream'
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    {print} 'I love ' icecream[{random}] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    {print} 'I love ' icecream[{random}] ' icecream'
        -   title: Students still use the old at random command
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    {print} 'I love ' icecream at random ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    {print} 'I love ' icecream[{random}] ' icecream'
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    {print} 'I love ' icecream[{random}] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    {print} 'I love ' icecream[{random}] ' icecream'
    -   level: '17'
        sections:
        -   title: Students use `{elif}` like `{else}`, so without a condition
            example:
                error_text: The `{elif}` command needs a condition behind it. It cannot be used like `{else}`, without a condition.
                error_code: |-
                    color = ask 'What is your favorite color?'
                    {if} color == 'green':
                        {print} 'green is nice'
                    {elif}:
                        {print} 'I like green'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    color = {ask} 'What is your favorite color?'
                    {if} color == 'green':
                        {print} 'green is nice'
                    {elif} color == yellow:
                        {print} 'yellow is alright'
                    {else}:
                        {print} 'I like green'
        -   title: Students forget the colon
            example:
                error_text: After each command that requires indentation, a colon should be used.
                error_code: |-
                    answer = ask 'How are you doing?'
                    {if} answer {is} 'great'
                        {print} 'Me too!'
                    {elif} answer {is} 'bad'
                        {print} 'Let me cheer you up!'
                    {else}
                        {print} 'Im great!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    answer = {ask} 'How are you doing?'
                    {if} answer {is} 'great':
                        {print} 'Me too!'
                    {elif} answer {is} 'bad':
                        {print} 'Let me cheer you up!'
                    {else}:
                        {print} 'Im great!'
    -   level: '18'
        sections:
        -   title: Students forget to use the brackets
            example:
                error_text: Students will forget to put brackets around their text.
                error_code: "{print} 'my name is Hedy!'"
                solution_text: 'This is the correct code:'
                solution_code: "{print}('my name is Hedy!')"
        -   title: Students will still use the ask command
            example:
                error_text: The ask command has been used since level 1. So it might be hard for the students to switch to input instead of ask.
                error_code: |-
                    {print}('My name is Hedy!')
                    name = ask('What is your name?')
                    {print}('So your name is ', name)
                solution_text: 'This is the correct code:'
                solution_code: |-
                    {print}('My name is Hedy!')
                    name = {input}('What is your name?')
                    {print}('So your name is ', name)
        -   title: Students might use the brackets as quotation marks
            example:
                error_text: They have learned to keep the variables outside of the quotation marks, so they might do the same with the brackets. Which is not the correct way to use them.
                error_code: |-
                    temperature = 25
                    {print}('It is ') temperature ('degrees outside')
                solution_text: 'This is the correct code:'
                solution_code: |-
                    temperature = 25
                    {print}('It is ', temperature, 'degrees outside')
