title: "Hedy dokumentation"
sections:
-   title: "Einführung zu Hedy"
    key: "intro"
    subsections:
    -   title: "Was ist Hedy?"
        text: |
            Hedy ist eine textuelle Programmiersprache, die speziell für (Pre-)Teens (10 bis 15 Jahre alt) entwickelt wurde.
            Im Gegensatz zu Programmiersprachen für Kinder, wie Scratch, verwendet Hedy keine Codeblöcke, sondern textuellen Code.
            Mit Hedy lernt man also, Code zu tippen, wie es echte Programmierer tun, aber in kleinen Schritten mit spielerischen Übungen.
            Auf diese Weise kann Hedy als Sprungbrett zu echten Programmiersprachen wie Python dienen, und das auf eine zugängliche und vor allem spaßige Weise!
            Hier können Sie sich ein [Video](https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s) über die Entwicklung von Hedy als Programmiersprache ansehen.
    -   title: "Zielgruppe"
        text: |
            Hedy wurde für Schüler der Mittel- und Oberstufe entwickelt (10 – 15 Jahre).
            Es ist wichtig, dass die Schüler gut lesen können. Wir empfehlen, erst mit Hedy anzufangen, wenn die Schüler mindestens das Leseniveau der 3. Klasse erreicht haben.
            Schüler (und Lehrer!) brauchen keine Programmiererfahrung, bevor sie mit Hedy beginnen.
    -   title: "Wie funktioniert Hedy?"
        text: |
            <Todo>
    -   title: "Lehren mit Hedy"
        text: |
            Hedy ist in Level unterteilt, in denen neue Befehle gelehrt werden. Jedes Level enthält eine Vielzahl von Übungen, um die neu erlernten Befehle zu üben.
            Die Übungen können von den Schülern einzeln durchgeführt werden, oder Sie können sie im klassischen Unterricht verwenden.
            Die Unterrichtspläne für jede Stufe sind in diesem Lehrerhandbuch enthalten. Die Unterrichtspläne und Übungen werden Schritt für Schritt erklärt, so dass auch die weniger digital versierten Lehrer in der Lage sein sollten, Hedy zu benutzen!
            Natürlich kommt Hedy auch den kreativen Lehrern entgegen, die gerne ihre eigenen Unterrichtspläne und Übungen erstellen!
    -   title: "Geräte"
        text: |
            Hedy ist webbasiert, d.h. es funktioniert auf jedem Gerät mit einem Browser (Chrome, Firefox, Edge usw.), so dass Laptops, ChromeBuhks, Tablets und sogar Smartphones geeignet sind, um Hedy zu verwenden.
            Sie müssen nichts herunterladen, bevor Sie mit Hedy arbeiten, gehen Sie einfach auf die Website und schon können Sie loslegen!
-   title: "Vorbereitungen"
    key: "vorbereitungen"
    subsections:
    -   title: "Programme speichern"
        text: |
            Sobald Sie eingeloggt sind, sehen Sie das blaue Banner mit "Mein Profil" und "Meine Programme".
            In "Meine Programme" finden Sie alle Programme, die Sie gespeichert haben.
            Sie können Ihre Projekte ganz einfach speichern, indem Sie Ihrem Projekt in der weißen Leiste einen Namen geben und die grüne Taste "Programm speichern" drücken.
            Der Programmierspaß kann beginnen!
    -   title: Programme speichern
        text: "Because you are now logged in, you'll see the blue banner with My profile and My programs.\nThese tabs exist for you students too. In My programs you can find all the codes that have been saved.\n\nYou can save your projects easily by giving your project a name in the white bar and pressing the green button Save Code.\n\nLet the programming fun begin!\n"
    -   title: Setting preferred language
        text: "When students create profile they are supposed to choose a 'preferred language'. Hedy will always be loaded in this selected language.\nChanging this language can always be done later on by navigation to 'My account' and 'My personal settings' again.\nFrom December 2021 on setting a preferred language is obligatory for each Hedy account.\nWhen your account or the accounts of your students have being created earlier than this date you will receive a message that a preferred language is missing.\nDon't worry! Navigate to 'My profile' and set a language in your profile settings.\nUntil you set a language Hedy will be shown in your browser language and, when this language is not supported, in English.\n\n**For non-English speakers**\nNot only can you change the language of the adventures to your own language. You can also choose which language the keywords (for example 'print' or 'ask') should be in.\nThis way you can teach your students to code with English keywords, but you can also let them program in their own laguage. For example Dutch students can use the command 'vraag' instead of 'ask'.\n"
    -   title: Storing programs
        text: "Because you are now logged in, you'll see the blue banner with My profile and My programs.\nThese tabs exist for your students too. In My programs you can find all the codes that you've saved.\n\nYou can save your projects easily by giving your project a name in the white bar and pressing the green button Save Code.\nYou (and your students) can also share programs. These programs will be posted on our explore page, for everybody to see and use.\nIf you want to unshare your program, go to 'My programs' and click 'Unshare'.\n"
-   title: "Unterricht mit Hedy"
    key: "unterricht"
    subsections:
    -   title: " "
        text: |
            Hedy contains a lot of different levels that each teach a different new skill. We recommend to teach one level per lesson.
            This gives your students the time to fully grasp a new command or concept and practice with it, before moving on to the next level.
            We use this structure in our lessons:
    -   title: "Introduction"
        text: |
            You can start your lessons by activating your students' prior knowledge: What do they already know about the subject, what did they learn in the previous lesson and which mistakes did they make that they've now learned from?
            This way all the previously learned commands and frequently made mistakes are fresh in your students' memories, when you strat introducing the new lesson.
    -   title: "Introduction of new concepts and commands"
        text: |
            The new concepts and commands can be very hard for some students to fully understand.
            That's why it's of importance to model the proper use of the new commands to your students.
            Especially in the lower levels, where some students have no experience whith programming at all, it can be hard for them to understand the new abstract concepts.
            Showing a lot of examples makes an abstract concept (for instance: 'What is a variable?') more recognizable and easier to understand ('Look, the variable pet changed into dog').
    -   title: "Let's get to work"
        text: |
            Each level contains different adventures that you can find in the pink tabs. The first pink tab explains the new commands in this level.
            The following tabs are adventures that the students can try out and make their own.
            The adventures are arranged from easiest to hardest, so we recommend to start on the left and your your way to the right.
            The last tab 'what's next' gives a little teaser of what you'll learn in the next level. Of course, you can select the adventures you want your students to do for each level.
            They don't always have to make every adventure. Every adventure contains an example code, that the students can try out with the green button.
            The example code gets copied to the workfield, where the students can try out the code and adjust it to make it their own.
            Stimulate your students to turn the example codes into their own projects by adding their own ideas and making their own variation of the adventure.
    -   title: "Quiz"
        text: |
            To test whether your students have picked up all the new info in the level, you can let them make the quiz.
            The quiz contains 10 multiple choice questions about the new concepts and command to that level.
            Not every level has a quiz yet, as we are still building the quizzes.
    -   title: "Evaluation"
        text: |
            Round up your lesson by having a brief evaluation. What did the students learn? Which hardships did they come across?
            How did they learn from their mistakes? And of course: What did they create?
            Students are often very proud of their own creations, so it's nice to save a little time and gove your students the opportunity to show their work to their classmates.
-   title: "Frequently made mistakes"
    key: "common_mistakes"
    intro: |
        You can learn from your mistakes, especially in coding!
        Making mistakes is unavoidable, and a great opportunity to learn, but for teachers it can be a challenge to find the correct fix for a mistake!
        Especially as the codes get longer and longer as the levels progress. That's why we've made a list with frequently made mistakes in each level, and their solutions.
    levels:
    -   level: '1'
        sections:
        -   title: "Students forget to type commandos"
            example:
                error_text: |
                    For example they type a sentence without using print.
                error_code: |
                    Hedy can't print this
                solution_text: |
                    Teach your students to always start a line of code with a command.
                solution_code: |
                    print Hedy can print this!
        -   title: "Students use capitals when typing commands"
            example:
                error_text: |
                    Commands won't work if they are in capitals.
                error_code: |
                    Ask Why does my code fail?
                    Print Because I'm using capitals.
                solution_text: |
                    Remove the capitals.
                solution_code: |
                    ask Why does my code work now?
                    print Because I removed the capitals!
        -   title: "Students use echo without ask"
            example:
                error_text: |
                    Echo is made to repeat an answer after an ask command. Without ask echo won't do anything.
                error_code: |
                    echo Your name is
                solution_text: |
                    Add an ask command to make it work.
                solution_code: |
                    ask What's your name?
                    echo Your name is
        -   title: "Students want their echo word (variable) to be in the middle of a sentence"
            example:
                error_text: |
                    And they are right! That's why they will learn to use proper variables in the next level.
                error_code: |
                    ask Which programming language is the most fun?
                    echo is the best!
                solution_text: |
                    In level 1 we have to keep it at this:
                solution_code: |
                    ask Which programming language is the most fun?
                    echo The best is...
        -   title: "Turtle: Students let the turtle walk off of the screen"
            example:
                error_text: |
                    Often students love to try out big numbers when using the turtle, which causes the arrow to walk off the screen.
                error_code: |
                    forward 300
                    turn 90
                solution_text: |
                    In the example. students tend to think that the turn command doesn't work. Eventhough is does work, but you can't see it happening off screen. Use smaller numbers to prevent this from happening.
                solution_code: |
                    forward 100
                    turn 90
        -   title: "Turtle: Students use the command backward, but that doens't exist"
            example:
                error_text: |
                    Backward is not a command.
                error_code: |
                    backward 100
                solution_text: |
                    To make the turtle go backwards, you use the forward command and a negative number. For example:
                solution_code: |
                    forward -100
    -   level: '2'
        sections:
        -   title: "Students make typos in their commands"
            example:
                error_text: |
                    Hedy can't recognize a command with a typo.
                error_code: |
                    prinnt Don't make typos!
                solution_text: |
                    Teach your students to read the error messages. This way they can find out themselves what went wrong.
                solution_code: |
                    print Don't make typos!
        -   title: "Students forget that the ask command has changed"
            example:
                error_text: |
                    In this level students learn about variables. The ask command requires a variable as well, but students forget this.
                error_code: |
                    ask what would you like to eat?
                solution_text: |
                    In this level you have to tell Hedy where to save your answer, so it can be used later on. This is called a variable.
                solution_code: |
                    order is What would you like to eat?
        -   title: "Students try to use the echo command. "
            example:
                error_text: |
                    For some students it might be frustrating to learn that the echo command doesn't work anymore. That's why it's very important to explain the advantages of using variables. For example you can use multiple variables in a code, and you can put them anywhere you like in a sentence!
                error_code: |
                    answer is ask Why doesn't echo work anymore?!
                    echo
                solution_text: |
                    Use a varible instead.
                solution_code: |
                    answer is ask Why doens't echo work anymore?!
                    print answer
        -   title: "Students use a variable name or as a normal word"
            example:
                error_text: |
                    In the example below the word 'name' is used a a variable, but also as a normal text. The output of this code will be 'Hi my Hedy is Hedy'.
                error_code: |
                    name is Hedy
                    print Hi my name is name
                solution_text: |
                    So don't use a word you want to use in the text as a variable name. In level 4 this is solved with quotation marks.
                solution_code: |
                    name is Hedy
                    print Hi I'm name
        -   title: "Students use long variable names containing two words."
            example:
                error_text: |
                    A variable should be named with one word. You could use an underscore to connect two words. That counts as one.
                error_code: |
                    chosen door is ask Which door do you pick?
                solution_text: |
                    Add an underscore.
                solution_code: |
                    chosen_door is ask which door do you pick?
        -   title: "Students might use two different names for the same variable"
            example:
                error_text: |
                    In this example the student has used 'horse' and 'name' for the same variables.
                error_code: |
                    horse is ask What is your horse called?
                    print Your horse is called name
                solution_text: |
                    Always check wheter the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.
                solution_code: |
                    name is ask What is your horse called?
                    print Your horse is called name
    -   level: '3'
        sections:
        -   title: "Students try to print whole lists"
            example:
                error_text: |
                    A list can't be printed. You can only print one item from the list with at random.
                error_code: |
                    groceries is apples, milk, chocolate
                    print groceries
                solution_text: |
                    To print a list of all the groceries, you simply need to put them after a print command. Else you can use the list to print one item with at random.
                solution_code: |
                    print apples, milk, chocolate

                    or

                    groceries is apples, milk, chocolate
                    print groceries at random
        -   title: "Students use the name of a variable or list as regular text."
            example:
                error_text: |
                    This problem probably occured in level 2 as well. Now it can happen with lists too.
                error_code: |
                    name is Hedy
                    print Hi my name is name

                    or

                    animal is rhino, bee, swan
                    print The best animal is... animal at random
                solution_text: |
                    Don;t use the names of variables or lists in regular text to print. In level 4 this problem is solves with quotation marks.
                solution_code: |
                    name is Hedy
                    print Hi I'm name

                    or

                    animals is rhino, bee, swan
                    print The best animal is... animals at random
        -   title: "Students forget at in at random"
            example:
                error_text: |
                    Like in the example
                error_code: |
                    birds is sparrow, seagull, robin
                    print birds random
                solution_text: |
                    This problem is solved by adding the word at.
                solution_code: |
                    birds is sparrow, seagull, robin
                    print birds at random
        -   title: "Students forget to use the print command when also using the at random command."
            example:
                error_text: |
                    Or they will sometimes put at random at the beginning of the line.
                error_code: |
                    fruit is apple, cherry, banana
                    fruit at random
                solution_text: |
                    Emphasize to your students that you always need a print to print text.
                solution_code: |
                    fruit is apple, cherry, banana
                    print fruit at random
        -   title: "Students forget to use commas in their lists"
            example:
                error_text: |
                    In a list items are seperated with a comma.
                error_code: |
                    pizzas is funghi tonno quattro stagioni
                    print pizzas at random
                solution_text: |
                    After each item on your list, there should be a comma
                solution_code: |
                    pizzas is funghi, tonno, quattro stagioni
                    print pizzas at random
        -   title: "Students try to use at random without a list."
            example:
                error_text: |
                    For example
                error_code: |
                    clubs is Manchester United
                    print clubs at random
                solution_text: |
                    Hedy can't print anything at random, because there is no list to choose from.
                solution_code: |
                    clubs is Manchester United, Bayrn Munchen, FC Barcelona
                    print clubs at random
        -   title: "Students try to use add/remove without a list "
            example:
                error_text: |
                    In the example below 'names' is not a list, but a variable. You cannot add anything to it.
                error_code: |
                    names is Jake
                    your_name is ask Who are you?
                    add your_name to names
                    print names at random
                solution_text: |
                    There has to be a list first, so you have to add a second name to turn names into a list, for example Amy. If you don't want amy on your list, you can use remove to remove it after.
                solution_code: |
                    names is Jake, Amy
                    your_name is ask Who are you?
                    add your_name to names
                    print names at random
        -   title: "Students forget to use to/from in add/remove."
            example:
                error_text: |
                    Without to/from the add/remove command won't work.
                error_code: |
                    adventures is story, parrot, dice
                    choice is Which adventure do you like best?
                    add choice
                    remove dice
                    print I love adventures at random
                solution_text: |
                    Hedy has to know which list the item should be added to/removed from.
                solution_code: |
                    adventures is story, parrot, dice
                    choice is Which adventure do you like best?
                    add choice to adventures
                    remove dice from adventures
                    print I love adventures at random
    -   level: '4'
        sections:
        -   title: "Students forget to use quotation marks on both sides of the text"
            example:
                error_text: |
                    In this level print and ask need a set of quotation marks. One before of the text and one after.
                error_code: |
                    print Hello
                    mood is ask 'How are you?
                solution_text: |
                    Add the correct quotation marks.
                solution_code: |
                    print 'Hello'
                    mood is ask 'How are you?'
        -   title: "Students use the wrong quotation marks"
            example:
                error_text: |
                    It is important to start your lesson by checking if the students know how to type a quotation mark properly. ELse they might use the "double quotes" or the `skewed one`.
                error_code: |
                    print `Welcome to the restaurant`
                    food is ask "What would you like to order?"
                solution_text: |
                    These are the correct quotation marks:
                solution_code: |
                    print 'Welcome to the restaurant'
                    food is ask 'What would you like to order?'
        -   title: "Students use an apostrophe in their text"
            example:
                error_text: |
                    From this level on apostrophes are not allowed. They are often used in English when thyping contractions like you're, don't or what's.
                error_code: |
                    print 'You're not allowed to type this'
                solution_text: |
                    You can choose to use the wrong grammar and just leave the apostrophe out. Or you could use the ` as an apostrophe.
                solution_code: |
                    print 'Youre allowed to type this'
                    print 'And you`re able to do this'
    -   level: '5'
        sections:
        -   title: "Students forget to use print in an if command"
            example:
                error_text: |
                    After students use if or else they forget to use a second command like print or ask.
                error_code: |
                    if name is Hedy 'Great!'
                    else 'Hedy is better!'
                solution_text: |
                    Add the print command to fix it.
                solution_code: |
                    if name is Hedy print 'Great!'
                    else print 'Hedy is better!'
        -   title: "Students might use two different names for the same variable"
            example:
                error_text: |
                    In this example the student has used 'horse' and 'name' for the same variables.
                error_code: |
                    horse is ask 'What is your horse called?'
                    if name is Bonfire print 'cool'
                    else print 'less cool!'
                solution_text: |
                    Always check wheter the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.
                solution_code: |
                    horse is ask 'What is your horse called'
                    if horse is Bonfire print 'cool!'
                    else print 'less cool!'
        -   title: "Students still forget the quotes on both sides."
            example:
                error_text: |
                    If commandos can get very long and students tend to forget to use quotes.
                error_code: |
                    if name is Hedy print fun
                    else print 'meh!
                solution_text: |
                    Always use 2 quotes in a print command.
                solution_code: |
                    if name is Hedy print 'fun'
                    else print 'meh!'
        -   title: "Students use quotes around variable names."
            example:
                error_text: |
                    In this level there are no quotes around variable names.
                error_code: |
                    if 'name' is 'Hedy' print 'fun'
                    else print 'meh!'
                solution_text: |
                    Remove the quotes to get the code to work.
                solution_code: |
                    if name is Hedy print 'fun'
                    else print 'meh!
        -   title: "Students use long variable names containing two words."
            example:
                error_text: |
                    A variable should be named with one word. You could use an underscore to connect two words. That counts as one.
                error_code: |
                    chosen door is ask 'Which door do you pick?'
                solution_text: |
                    Add an underscore.
                solution_code: |
                    chosen_door is ask 'which door do you pick?'
        -   title: "Students want multiple answers to be correct"
            example:
                error_text: |
                    For example this student Hedy to tell all his friends that they are funny, but other classmates would be told that they are not.
                error_code: |
                    if name is Jesse, David, Souf print 'You are funny' else print 'You are not funny'
                solution_text: |
                    You could use the `in` command for that. It is explained in a higher level, but it does already work in level 5.
                    Another solution is to use multiple if commands and no else command. The disadvantage is that it won't tell the other classmates that they are not funny.
                solution_code: |
                    friends is Jesse, David, Souf
                    name is ask 'Who are you?'
                    if name in friends print 'You are funny'
                    else print 'You are not funny'

                    or

                    name is ask 'Who are you?'
                    if naam is Jesse print 'You are funny'
                    if naam is David print 'You are funny'
                    if naam is Souf print 'You are funny'
        -   title: "The students make the variable name the same as the value in the if statement"
            example:
                error_text: |
                    In the example below the password is 'password'. This will result in it always being correct.
                error_code: |
                    password is ask 'What is the password?'
                    if password is password print 'Access granted'
                    else print 'Acces denied!'
                solution_text: |
                    Pick a different name for your variable.
                solution_code: |-
                    secret_password is ask 'What is the password'
                    if secret_password is password print 'Access granted!'
                    else print 'Access denied!'
learn-more-sections:
-   title: "Gefällt dir Hedy?"
    text: |
        Wir hören gerne von dir!

        [Klick hier, um uns eine Nachricht zu senden](mailto:hedy@felienne.com "Über Hedy")
-   title: "Einen Fehler gefunden?"
    text: |
        [Melde ihn uns auf GitHub](https://github.com/Felienne/hedy/issues/new/choose)
-   title: "Möchtest du mithelfen?"
    text: |
        Am einfachsten kannst du mithelfen indem du [Hedy übersetzt](https://github.com/Felienne/hedy/blob/main/TRANSLATING.md)

        Den aktuellen Fortschritt der Übersetzung siehst du unten. Hilf uns eine Sprache zu vervollständigen oder füge eine neue Sprache hinzu.
        <a href="https://hosted.weblate.org/engage/hedy/">
        <img src="https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg" alt="Translation status" /></a>
-   title: "Vortrag auf der Code Week"
    text: |
        Möchtest du mehr über Hedy erfahren? Schau dir diesen Vortrag an, den Felienne auf der European Code Week 2020 gehalten hat (dieses Video ist nur auf Englisch verfügbar):

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/R2U9MEowYag?wmode=opaque" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
-   title: "Forschungsarbeit über Hedy"
    text: |
        Möchtest du noch mehr erfahren? Lies die [Forschungsarbeit](https://www.felienne.com/wp-content/uploads/2020/07/Hedy_paper_website_draft.pdf) über Hedys Design.
-   title: Hedy in den Nachrichten
    text: "Einige Websites und Zeitungen haben seit unserer Veröffentlichung Anfang 2020 über Hedy geschrieben. Wir führen hier eine Liste:\n* [Heise.de, Januari 2022](https://www.heise.de/news/Hedy-die-mitwachsende-Programmiersprache-6336264.html)\n* [Vives(Niederländisch), CodeWeek Special October 2021](images/Vives-174-Codeweek.pdf)\n* [CodeWeek.eu - Haunted House Challenge (Englisch), September 2021](https://codeweek.eu/2021/challenges/haunted-house)\n* [Opensource.com (Englisch), April 2021](https://opensource.com/article/21/4/hedy-teach-code)\n* [IO Magazine (Englisch), April 2021](https://ict-research.nl/wordpress/wp-content/uploads/2021/04/IO-magazine-NR1-2021_web.pdf)\n* [Ingeniería De Software (Spanisch), Februar 2021](https://ingenieriadesoftware.es/hedy-mejor-lenguaje-ensenar-programacion-ninos/)\n* [Hello World Magazine (Englisch), Februar 2021](images/Hello_World_15_Hedy.pdf)\n* [Discoro (Englisch), Januar 2021](https://discoro.wordpress.com/2021/01/09/hedy-gradually-learning-a-programming-language/)\n* [Felienne wins the Niederländisch award for ICT research for Hedy (Englisch), Januar 2021](https://www.nwo.nl/en/news/felienne-hermans-receives-dutch-prize-ict-research-2021)\n* [SlashDot (Englisch), August 2020](https://news.slashdot.org/story/20/08/17/024248/scientist-proposes-a-new-programming-language-for-teaching-coding-and-python)\n* [GenBeta (Spanisch), August 2020](https://www.genbeta.com/desarrollo/nuevo-lenguaje-para-ensenar-programacion-a-ninos-como-se-ensena-a-leer-escribir-forma-gradual-niveles)\n* [Developpez (Französisch), August 2020](https://programmation.developpez.com/actu/308095/Une-scientifique-propose-un-nouveau-langage-de-programmation-pour-enseigner-aux-enfants-le-codage-informatique-au-travers-d-une-approche-graduelle-implementee-en-Python-sur-13-paliers/)\n* [Vives (Niederländisch), Oktober 2020](images/artikel_vives.pdf) \"Met Hedy stap voor stap leren programmeren\"\n* [Leiden University (Englisch), April 2020](https://www.universiteitleiden.nl/en/news/2020/03/looking-to-distract-the-kids-while-you-work-from-home-get-them-programming)\n* [Mare (Niederländisch), April 2020](https://www.mareonline.nl/cultuur/computercode-voor-de-kids/)\n* [AG Connect (Niederländisch), April 2020](https://www.agconnect.nl/artikel/stapsgewijs-python-leren-programmeren-met-nieuwe-taal-hedy)\n"
start-sections:
-   title: "Was ist eine mitwachsende Programmiersprache?"
    text: |
        Programmieren lernen kann schwer sein. Nicht, dass Programmieren selbst *schwer* wäre! Aber es gibt eine Menge Regeln, die du dir einprägen musst, genau wie beim Erlernen einer neuen Sprache.
        Genauso musst du viel üben, um Programmieren zu lernen.

        Du kannst diese Sätze mit Leichtigkeit lesen. Aber weißt du noch, als du lesen gelernt hast? Damals hast du für jeden Buchstaben etwas Zeit gebraucht!
        Das gilt auch für das Programmieren, es mag am Anfang schwer sein, aber es wird einfacher!

        Das Schöne an Hedy ist, dass die Programmiersprache *mitwächst*. Das bedeutet, dass du nicht alle Regeln auf einmal lernen musst.
        Die ersten Level haben nicht so viele Regeln, so dass du dich bequem an das Programmieren gewöhnen kannst.
        Mit jedem Level kommen neue Regeln hinzu, wodurch die Anzahl der Befehle, die du kennst, steigt. Befehle sind Anweisungen für einen Computer. Zusammengesetzt bilden sie Programmcode mit dem du Programme erstellen kannst.
-   title: "Warum wächst Hedy mit?"
    text: |
        In diesem Video erklärt Felienne, die Schöpferin von Hedy, warum Hedy eine mitwachsende Programmiersprache ist. Das Video ist derzeit nur auf Englisch verfügbar.

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/EdqT313rM40" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
-   title: "Für wen ist Hedy?"
    text: |
        Hedy ist für alle Kinder gedacht, die programmieren lernen wollen! Du solltest schon gut lesen können.
-   title: "Brauche ich Programmiererfahrung?"
    text: |
        Nein, das ist nicht erforderlich. Wenn du jedoch schon mit Scratch oder Python programmiert hast, werden dir einige Befehle bekannt vorkommen.
-   title: "Ist Hedy kostenlos?"
    text: |
        Ja! Die Universität Leiden erlaubt uns, es gratis zur Verfügung zu stellen. Hedy ist außerdem 'Open Source'. Das bedeutet, dass jeder, der programmieren kann, uns helfen kann, Hedy besser zu machen.
        Du kannst den Code auf [GitHub](https://github.com/Felienne/hedy) finden.
        Wenn dir Hedy gefällt, würden wir uns über eine [Spende](https://www.steunleiden.nl/project/hedy?locale=en) freuen!
-   title: "Muss ich etwas installieren?"
    text: |-
        Nein. Hedy funktioniert im Browser, also in dem Programm, mit dem du diese Seite ansiehst. Wahrscheinlich Chrome oder Edge oder Firefox. Hedy funktioniert auch auf dem Handy oder Tablet.
