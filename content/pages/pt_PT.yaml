title: Documentação da Hedy
home-sections:
-   title: Programação textual facilitada!
    text: |-
        Muitas escolas e professores, por todo o mundo, querem ensinar programação aos seus alunos. Habitualmente, começam com ferramentas divertidas , que vão desde o robot Beebot até ao
        Scratch Junior ou Scratch. Após utilizarem estas ferramentas, as crianças frequentemente querem passar para linguagens de programação textual mais poderosas, como Python.

        No entanto, Python é difícil, porque apenas está disponível em Inglês e requer que os alunos aprendam conceitos de programação complexos e síntaxe, em simultâneo.
        A Hedy é a forma fácil para começar a aprender linguagens de programação textual! A Hedy é gratuita, em código aberto e diferente de qualquer outra linguagem de programação textual em três aspectos.

        1. A Hedy é multilingue, podes usar a Hedy na tua própria língua
        2. A Hedy é gradual, por isso, podes aprender um conceito e a sua síntaxe de cada vez
        3. A Hedy foi construída para a sala de aula, permitindo aos professores personalizar a experiência dos seus alunos por completo
-   title: Programação multilingue
    text: Enquanto quase todas as linguagens de programação textual têm palavras-chave em Inglês, como `for` ou `repeat`, a Hedy pode ser usada em qualquer idioma! Atualmente suportamos 47 idiomas diferentes, incluindo Holandês, Espanhol, Árabe, Turco, Chinês e Hindi. Se o teu idioma não está disponível podes sempre começar uma nova tradução.
-   title: Aprendizagem passo a passo
    text: Aprender uma linguagem de programação pode ser desafiante, dado que os alunos tem de aprender, ao mesmo tempo, conceitos (por exemplo, if-else ou ciclos) e síntaxe (como aspas ou parênteses curvos). Com a Hedy, começamos por introduzir conceitos com o mínimo de síntaxe e refinámo-los, em seguida. Um método de aprendizagem cientificamente comprovado!
-   title: Construída para a sala de aula
    text: |-
        A Hedy é indicada para crianças a partir dos 10 anos de idade e concebida para a sala de aula.
        Os professores podem usar os nosso planos de aula gratuitos, integrados na plataforma, mas podem também criar as suas próprias lições e adicioná-las à interface de utilizador da Hedy.
-   title: Programação em contexto
    text: A Hedy expõe a programação na forma mais abrangente possível e pode ser utilizada de várias maneiras interessantes. A Hedy permite a criação de histórias digitais e interactivas, desenhos coloridos que podem ser apresentados no ecrã, mas também desenhados com impressora de caneta ou bordados numa camisola e pode ainda ser usada para criar jogos ou aplicações com botões e ações de teclado.
-   title: A Hedy é gratuita?
    text: |-
        Sim! A Hedy é em código aberto, o que significa que as pessoas podem ajudar-nos a tornar a Hedy ainda melhor.
        Podes encontrar o nosso código em <a href="https://github.com/hedyorg/hedy" target="_blank">Github</a>.
        Se gostaste da Hedy e gostarias de contribuir, aceitamos (e ficamos muito agradecidos por) <a href="https://github.com/sponsors/hedyorg" target="_blank">donativos</a>!
-   title: Preciso de instalar alguma coisa?
    text: Não. A Hedy funciona no navegador, que é o programa que estás a usar para ver esta página. Provavelmente, Chrome ou Edge ou Firefox. A Hedy também funciona nos telemóveis e tablets.
-   title: Preciso de experiência em programação para ensinar com a Hedy?
    text: |-
        Não, não é preciso. Todos os conceitos são explicados nos slides e na interface para os alunos.
        Se criares uma conta gratuita de professor, também obténs acesso ao manual do professor com informação sobre como ensinar 
        e os erros mais comuns.
join-sections:
-   title: Apoiar a Hedy
    text: '# Existem três formas de apoiares a Hedy!'
-   title: Melhorar a linguagem
    text: |-
        A natureza gradual e multilingue da Hedy cria muitos desafios técnicos interessantes.
        Podes encontrar esses obstáculos em <a href="https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage" target="_blank">Github</a>.
-   title: Traduzir a Hedy
    text: |-
        Não é um programador? Não há problema! Outra forma de apoiar a Hedy é <a href="https://github.com/hedyorg/hedy/wiki/Hedy-Translation-Tutorial" target="_blank">traduzindo palavras-chave, mensagens de erro, aventuras e outros conteúdos</a>.
        Este é o estado atual, ajude-nos a completar uma língua ou a acrescentar uma nova!
        <a href="https://hosted.weblate.org/engage/hedy/">
        <img src="https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg" alt="Translation status" /></a>
-   title: Ajudar os professores a começar
    text: |-
        Hedy está desenhada para apoiar professores na tarefa de ensinar programação na sala de aula. Temos funcionalidades específicas para professores, tais como a opção de criar uma turma, customizá-la e acompanhar a evolução dos seus alunos.
        Se gostas da Hedy, podes contactar escolas que conheces e oferecer-te para ajudar os professores a começar! Nós também te podemos ajudar a encontrar escolas ou professores através do <a href="https://discord.gg/8yY7dEme9r" target="_blank">Discord</a>.
learn-more-sections:
-   title: The Hedy foundation
    text: |-
        Hedy is maintained by the Hedy Foundation (Stichting Hedy), Sportmanstaat 8, 2341 JG Oegstgeest, Dutch Chamber of Commerce number 94013985.

        The board of the foundation consists of:

          * Felienne Hermans, president
          * Eelko Huizing, finance
          * Renée Merbis, secretary

        The board of Stichting Hedy does not get any financial compensation for their tasks.
-   title: Um mergulho profundo!
    text: 'Queres saber mais sobre a filosofia de Hedy e o seu design? Aproveita para dar uma vista de olhos por esta conferência que a Felienne deu no StrangeLoop em 2022. <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/fmF7HpU_-9k?wmode=opaque" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>'
-   title: Hedy nas notícias
    text: |-
        Algumas páginas de internet e jornais escreveram sobre a Hedy desde o nosso lançamento no início de 2020. Mantemos uma lista aqui:
        * [Java Magazine 04.2023](images/Hedy_Javamagazine2023.pdf)
        * [Tech Optimism - A Solution to the IT Shortage (Dutch), August 2022](https://pom.show/2022/08/12/een-oplossing-voor-het-it-tekort/)
        * [Codeweek Podcast, July 2022](https://codeweek.eu/podcast/26)
        * [Heise.de (German), Januari 2022](https://www.heise.de/news/Hedy-die-mitwachsende-Programmiersprache-6336264.html)
        * [Strumenta, November 2021](https://tomassetti.me/teaching-programming-with-hedy/)
        * [Vives (Dutch), CodeWeek Special October 2021](images/Vives-174-Codeweek.pdf)
        * [CodeWeek.eu - Haunted House Challenge, September 2021](https://codeweek.eu/2021/challenges/haunted-house)
        * [Opensource.com, April 2021](https://opensource.com/article/21/4/hedy-teach-code)
        * [IO Magazine, April 2021](https://ict-research.nl/wordpress/wp-content/uploads/2021/04/IO-magazine-NR1-2021_web.pdf)
        * [Ingeniería De Software (Spanish), February 2021](https://ingenieriadesoftware.es/hedy-mejor-lenguaje-ensenar-programacion-ninos/)
        * [Hello World Magazine, February 2021](images/Hello_World_15_Hedy.pdf)
        * [Discoro, January 2021](https://discoro.wordpress.com/2021/01/09/hedy-gradually-learning-a-programming-language/)
        * [Felienne wins the Dutch award for ICT research for Hedy, January 2021](https://www.nwo.nl/en/news/felienne-hermans-receives-dutch-prize-ict-research-2021)
        * [SlashDot, August 2020](https://news.slashdot.org/story/20/08/17/024248/scientist-proposes-a-new-programming-language-for-teaching-coding-and-python)
        * [GenBeta (Spanish), August 2020](https://www.genbeta.com/desarrollo/nuevo-lenguaje-para-ensenar-programacion-a-ninos-como-se-ensena-a-leer-escribir-forma-gradual-niveles)
        * [Developpez (French), August 2020](https://programmation.developpez.com/actu/308095/Une-scientifique-propose-un-nouveau-langage-de-programmation-pour-enseigner-aux-enfants-le-codage-informatique-au-travers-d-une-approche-graduelle-implementee-en-Python-sur-13-paliers/)
        * [Vives (Dutch), October 2020](images/artikel_vives.pdf) "Met Hedy stap voor stap leren programmeren"
        * [Leiden University, April 2020](https://www.universiteitleiden.nl/en/news/2020/03/looking-to-distract-the-kids-while-you-work-from-home-get-them-programming)
        * [Mare (Dutch), April 2020](https://www.mareonline.nl/cultuur/computercode-voor-de-kids/)
        * [AG Connect (Dutch), April 2020](https://www.agconnect.nl/artikel/stapsgewijs-python-leren-programmeren-met-nieuwe-taal-hedy)
start-sections:
-   title: Começar a utilizar a Hedy
    text: 'Bem-vindo à Hedy, teremos todo o gosto em ajudá-lo a começar a utilizar a Hedy.


        O nosso [Manual do Professor](https://www.hedy.org/for-teachers/manual) tem uma visão geral de todas as funcionalidades em pormenor, mas esta página tem uma breve visão geral para que saiba o que é o quê antes de começar.


        Alguns destaques que são importantes conhecer:

        * A Hedy é uma ferramenta concebida para ajudar a gerir uma sala de aula com crianças a programar! Pode criar as suas próprias turmas, planos de aula e acompanhar o desempenho das crianças.

        * Não precisa de saber muito de programação para começar, o Hedy trabalha passo a passo, também para si!

        * Pode utilizar a Hedy na sua língua materna porque foi traduzida para muitas outras línguas!

        * Todas as crianças podem programar!! A Hedy é especialmente útil para as crianças que têm problemas de visão, porque pode ler o material em voz alta sem a necessidade de um rato.

        * Estamos aqui para ajudar, pode encontrar-nos, por exemplo, no [Discord](https://discord.gg/8yY7dEme9r) ou pode [enviar-nos um e-mail](hello@hedy.org).'
-   title: Professores sobre a Hedy
    text: "Vários professores de todo o mundo expressaram a sua paixão pela Hedy, como alguns partilharam connosco:\n\n*Incrívelmente inspirador! É uma óptima maneira de tornar a programação muito mais acessível para si, mas também para os alunos. É muito divertido brincar com ela e tem muito potencial para ser utilizada com os alunos. Penso que é uma ferramenta muito boa! Penso que esta é uma forma valiosa para as crianças começarem a aprender programação. Python e a programação sempre foram muito interessantes, porque a barreira à aprendizagem é muito elevada. Agora tudo está um pouco mais baixo e foi-me explicado que pode ser muito fácil. Gostei de ver como a Hedy tenta tornar a programação tão acessível quanto possível para os utilizadores!\nPaíses Baixos: Professores de matemática em formação (ensino secundário)\n\n*Interface simples e bons exemplos.* Professor: 3º - 6º ano (ensino básico)\n\n*Programação multilingue e apenas o próprio conceito de programação gradual em si. EUA: escola
        secundária, 6º-8º ano\n\n*A natureza gradual da introdução à programação.* Austrália: Ensino secundário\n\n*Continua automaticamente.* Países Baixos: 2 HAVO-VWO\n\n*Tanto o fato da explicação poder ser dada em neerlandês (e o código em inglês), como o facto de se desenvolverem cada vez mais possibilidades.* Países Baixos: Grupo de turma Plus\n\n*Mas a Hedy e os seus níveis graduais... que ideia, queria agradecer-vos pessoalmente por terem criado isto. Não tenho palavras para vos agradecer. Além disso, nunca vi o nível de envolvimento e entusiasmo dos meus alunos, como tenho visto com a Hedy. Cobrimos até o nível 5 e planeamos passar mais uma semana nele em aulas e laboratórios, antes de começar Python.* Paquistão\n\n*A \"realidade\" da programação, assemelha-se ao que é na realidade.* Países Baixos: Grupo de turmas Plus 4 a 8\n\n*Atividades passo-a-passo. Atividades divertidas.* Países Baixos: 1e Todos os níveis, 2e VWO/HAVO 2e VWO +, 3e HAVO 3e VWO\n\n*Gosto muito da Hedy e está
        muito bem organizada, o que a torna adequada para ser utilizada na escola primária. A abordagem gradual da Hedy funciona muito bem. A breve explicação no início de cada nível e os pequenos programas de exemplo ajudam a dar às crianças uma visão rápida do que há de novo no nível escolhido. As diferentes tarefas que as crianças podem escolher também funcionam muito bem. As crianças escolhem tarefas que lhes agradam e depois trabalham com elas, ao longo dos níveis. A Hedy é muito divertida para as crianças que são boas em programação e que querem experimentar uma verdadeira linguagem de programação. É uma boa preparação para a escola secundária, logo que nela seja ministrado mais ensino das TIC.* Países Baixos: Escola Montessori de Oegstgeest\n\n*A construção é muito boa... Países Baixos: Escola secundária inferior HAVO-VWO\n\n*Consigo manter o ritmo da aula.* Países Baixos: grupo 7 e 8\n\n![Felienne a ensinar crianças](/images/teacherfeedback/Fkids1.JPG) *Felienne a ensinar crianças*\n
        \n\n![Crianças a aprender sobre a Hedy](/images/teacherfeedback/Fkids2.JPG) *Crianças a aprender sobre a Hedy*"
teacher-guide:
-   title: Introdução
    key: intro
    subsections:
    -   title: O que é a Hedy?
        text: |-
            A Hedy é uma linguagem de programação textual, especificamente desenvolvida para (pré-)adolescentes (dos 10 aos 15 anos de idade).
            Ao contrário das linguagens de programação para crianças, como o Scratch, a Hedy não utiliza blocos de código, mas código textual.
            Assim, com a Hedy, vais aprender a escrever código como os programadores realmente o fazem, mas em pequenos passos com exercícios lúdicos.
            Desta forma, a Hedy pode funcionar como um trampolim para linguagens de programação reais, como Python, de uma forma acessível e acima de tudo divertida!
            Aqui, podes ver um <a href="https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s" target="_blank">vídeo</a> sobre o desenvolvimento da Hedy como uma linguagem de programação.
    -   title: Público-alvo
        text: |-
            A Hedy foi desenvolvida a pensar nos estudantes do ensino básico e secundário (entre os 10 e os 15 anos de idade).
            É importante que os estudantes sejam capazes de ler bem. Não recomendamos que se comece com a Hedy antes dos estudantes terem atingido pelo menos um nível de leitura do 3º ano.
            Os estudantes (e professores!) não precisam de qualquer experiência em programação antes de começarem com a Hedy.
    -   title: Como funciona a Hedy?
        text: "A Hedy é dividida em níveis, nos quais são ensinados novos comandos. Cada nível contém uma variedade de aventuras para praticar os novos comandos aprendidos.\nComo professor, pode decidir que aventuras estão disponíveis para os seus alunos. Irão criar um restaurante, uma calculadora ou uma casa assombrada neste nível? Dentro de cada nível, as aventuras estão organizadas da mais fácil para a mais difícil.\nAssim, os seus alunos continuarão a ser desafiados. As aventuras podem ser completadas, individualmente, pelos alunos ou pode usá-las numa instrução clássica.\n\nAs aventuras também incluem um código exemplo, para garantir que os professores menos digitalmente informados, possam utilizar a Hedy também!\nClaro que a Hedy também serve os professores que adoram criar os seus próprios planos de aula e aventuras.\n\nApós programar todas as aventuras de um determinado nível, os seus alunos podem testar os seus conhecimento num breve questionário.\nPode acompanhar o trabalho dos
            seus alunos e a sua evolução na página da turma."
    -   title: Dispositivos
        text: |-
            A Hedy é baseada na web, o que significa que funciona em qualquer dispositivo com um navegador (Google Chrome, Firefox, Edge, entre outros), portanto, portáteis, Chromebooks, tablets e até telemóveis são apropriados para usar a Hedy.
            Não existe necessidade de descarregar nada antes de começar a trabalhar com a Hedy, basta aceder à página de internet e está pronto(a)!
    -   title: A Comunidade Hedy
        text: |-
            Todos os professores Hedy, programadores e outros fãs são convidados a juntar-se ao nosso <a href="https://discord.gg/8yY7dEme9r" target="_blank">servidor Discord </a>. Este é o espaço ideal para conversar sobre a Hedy: nós temos canais onde pode apresentar os seus projetos e aulas incríveis, canais para reportar problemas e canais onde pode conversar com outros professores e com a equipa Hedy.
            <a href="https://www.youtube.com/watch?v=Lyz_Lnd-_aI" target="_blank">Aqui</a> encontra um vídeo que mostra como aderir à Comunidade Discord.
    -   title: Hedy e o RGPD
        text: |-
            Organizações na UE devem cumprir com o RGPD (Regulamento Geral sobre a Proteção de Dados) quando processam dados pessoais.
            Como este é um tema complexo para muitas escolas, pode usar todas as funcionalidades de programação da Hedy sem partilhar dados pessoais.
            A forma mais simples para tal, é usar a Hedy sem criar contas para o professor e os alunos. Sem contas, todas as funcionalidades estão disponíveis, com a excepção da personalização de níveis, guardar os programas dos alunos e observar o seu progresso. Pode ser limitante, mas existem escolas que usam a Hedy desta forma.

            Outra maneira passa pelo professor criar uma conta com um email sem dados pessoais, por exemplo, "docente25@email.com". Para além de um endereço de email, que apenas é necessário para reiniciar a sua palavra-passe, não precisa partilhar qualquer informação quando cria uma conta de professor.
            Com uma conta de professor, pode criar contas anónimas para os seus alunos, e.g. aluno-unicornio1, aluno-unicornio2, etc (Aceda a 'Preparações para ensino' para um manual detalhado). Desta forma, pode usar todas as funcionalidades da Hedy, incluindo guardar o progresso, sem partilhar os seus dados ou dos seus alunos.

            Se a explicação acima é insuficiente para o contextualizar, podemos assinar um acordo de processamento para processar os seus dados pessoais.
-   title: Tutorial
    key: tutorial
    subsections:
    -   title: Tutorial
        text: Quer ver o tutorial (outra vez)? Clica <a href="https://hedy.org/tutorial" target="_blank">aqui</a>.
-   title: Preparações para ensino
    key: preparações
    subsections:
    -   title: Para professores
        text: Pode preparar as suas turmas na <a href="https://hedy.org/for-teachers" target="_blank">página Para professores</a>. Nesta página irá encontrar tudo o que necessita para ensinar com a Hedy, como as suas turmas, as suas aventuras e slides. Todas as funcionalidades da página Para professores são explicadas abaixo.
    -   title: Criar uma Turma
        text: |-
            Como professor, pode criar uma turma para os seus alunos. Nesta turma, pode ver as contas dos seus alunos e os seus programas e pode monitorizar a evolução deles.
            Este <a href="https://www.youtube.com/watch?v=Y3RTIWftJQg" target="_blank">vídeo</a> mostra como pode criar, rapidamente, uma turma na Hedy.
    -   title: Duplicar uma turma
        text: |-
            Está a leccionar várias turmas? Então, não precisa de personalizar cada turma individualmente. Simplesmente, crie uma turma, personalize a turma(aceda a "Personalize a sua turma" para saber como) e, em seguida, duplique a turma as vezes que forem necessárias.
            Pode duplicar a turma na página 'Para Professores'. Se duplicar uma turma, todas as definições dessa turma serão, igualmente, duplicadas. Isso significa que todos os níveis e aventuras que definiu como indisponíveis para a primeira turma, irão estar também indisponíveis para a(s) nova(s) turma(s).
            As contas de alunos e a segunda conta de professor na sua turma, não serão duplicadas para a nova turma.
    -   title: Adicione um segundo professor
        text: |-
            Não é o único professor a leccionar a sua turma? Então, agora pode adicionar outro professor à turma. Navegue para a página 'Para professores' e clique na turma. Em seguida, escolha "Convide um professor" e preencha o nome de utilizador do seu colega.
            O seu colega receberá um convite para se juntar à turma, na sua respectiva conta. Pode aceder à mensagem de convite, clicando no nome de utilizador no canto superior direito do ecrã, seleccionando "A minha conta".
            Assim que o outro professor aceita o convite, pode também personalizar a turma.
            Para remove um segundo professor da sua turma, navegue até à página da turam e remove o segundo professor. O professor que criou a turma não pode ser removido.
    -   title: Personalize a sua turma
        text: |-
            Pode personalizar a sua turma e escolher quais aventuras estarão disponíveis para os seus alunos. Desta forma, os seus alunos não serão sobrecarregados pela quantidade de aventuras e níveis, podendo focar-se, especificamente, nas aventuras que prefere que eles pratiquem.
            Clique na sua turma, na página 'Para Professores' e escolha 'Personalize a turma'. Nesta página, pode seleccionar níveis, definir datas de início, limites para desbloqueio dos níveis e muito mais.

            **Seleccionar e ordenar aventuras**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/df38cbb2-468e-4317-ac67-92eaf4212adc" width="1000">
            Nesta secção, pode seleccionar e ordenar aventuras. Os separadores cor-de-rosa são aventuras com novos comandos. Os separadores cinzentos são aventuras normais. Para reorganizar a ordem das aventuras, pode arrastar separadores. No entanto, aconselhamos a utilizar a ordem original das aventuras, uma vez que, a equipa Hedy assegurou que as aventuras progridam da mais fácil para a mais difícil.
            Se pretender remover uma aventura para os seus alunos, basta clicar na cruz no separador dessa aventura.
            <img src="https://github.com/hedyorg/hedy/assets/80678586/0ddd10b5-ef60-4480-a0c4-fc9a0f323baa" width="300">
            Se quiser adicionar aventuras, tal como as suas aventuras ou uma aventura removida acidentalmente, utilize este menu para adicionar a aventura, às aventuras disponíveis para os seus alunos. Simplesmente, clique na aventura que pretende adicionar e esta (re)aparecerá na linha de aventuras. Para anular todas as alterações nas aventuras, clique em 'Reset'.

            **Datas de abertura**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/4e59acfa-4772-429f-8328-babb43c942d5" width="300">
            Com esta funcionalidade pode definir a data de abertura para os níveis. Desta forma, pode construir um plano de aulas antes do início do seu curso e sem preocupar-se em abrir novos níveis a cada semana. Na imagem acima, o primeiro nível é aberto de imediato, o segundo nível abre a 23 de setembro e o terceiro nível na semana a seguir. Os restantes níveis estão fechados.
            Não quer definir datas de abertura? Sem problema, basta deixar esta secção em branco.

            **Limites de desbloqueio dos níveis**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/99a34dab-f112-459e-bfd1-07618be4715a" width = "1000">
            Este componente permite estabelecer o limite para nota mínima no questionário dos seus alunos, antes que estes possam avançar para o próximo nível. Por exemplo, se introduzir "80", os seus alunos terão de pontuar pelo menos 80% no questionário, antes de serem autorizados a progredir para o próximo nível. Se não atingirem este limite mínimo, não serão autorizados a prosseguir e terão de repetir o questionário.
            Não quer utilizar este limite? Sem preocupação, apenas deixe esta secção em branco.


            **Outras definições**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/a8491d67-6d6e-42a7-b672-fd3d083a76f8"/>
            Existem outras definições que podem ser, igualmente, úteis. A nossa primeira definição adicional é 'Modo programador obrigatório'. No modo programador, os alunos apenas vêem as janelas de introdução e de resultado e o botão de executar. As aventuras estão ocultas e não estão disponíveis as dicas rápidas. Isto poderá ser útil numa situação de exame.
            Se esta opção não estiver seleccionada, o modo programador também está disponível para os alunos como uma opção voluntária.

            Se pretender que todos os seus alunos estejam visíveis na tabela de pontuação da turma, pode seleccionar a segunda opção.
            Com as restantes opções, pode escolher ocultar algumas funções ou conteúdo para os seus alunos, pois pode ajudá-los a concentrarem-se melhor.

            **Guardar**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/df179df3-3073-4d15-bba6-62e58fb675be" width="300">
            Não se esqueça de guardar as suas alterações assim que terminar a customização da sua turma.
    -   title: Contas de alunos
        text: |-
            Para adicionar alunos à sua turma, navegue até à página da turma, clicando no nome da turma dentro da página 'Para Professores'. Em seguida, clique em 'Adicionar Alunos'. Existem duas formas para permitir os seus alunos juntarem-se à turma: pode criar contas para eles ou os alunos podem criar as suas próprias contas.

            **Pode criar contas para os seus alunos**
            A forma mais simples para adicionar alunos à sua turma, passa por criar contas para eles. Pode fazê-lo clicando no botão 'Criar conta de aluno' e preenchendo o nome de utilizador e palavra-chave pretendida.
            Os alunos poderão aceder com o nome de utilizador e palavra-chave que escolheu. Posteriormente, os alunos podem alterar os nomes de utilizador e as palavras-chave, caso pretendam, continuando a permanecer na sua turma.
            Este <a href="https://www.youtube.com/watch?v=eEQvik-Ce5M" target="_blank">vídeo</a> demonstra como adicionar alunos à sua turma da maneira mais simples e rápida.

            **Os alunos criam as suas próprias contas**
            Os seus alunos podem aceder à página de internet da Hedy e criar as suas próprias contas, tal como fez. Para os incluir na sua turma, eles apenas tem de clicar no link de convite.
            Pode encontrar o link de convite na página da turma e enviá-lo para os seus alunos. Tenha em atenção que os seus alunos têm de estar autenticados na página da Hedy, quando clicarem no link, para que este funcione na perfeição.
            Pode também convidar manualmente um estudante para a sua turma através do botão 'Convidar por nome de utilizador'.
    -   title: Definir língua preferencial
        text: |-
            Quando os alunos criam perfis, devem escolher a 'língua preferencial'. A Hedy será sempre carregada na língua selecionada.
            Alterar esta língua pode sempre ser feito mais tarde, navegando, novamente, para a 'Minha conta' e 'Minhas definições pessoais'.

            **Para não-falantes de língua inglesa**
            Não só pode mudar a língua das aventura para a sua própria língua, como pode escolher em que língua as palavras chave (por exemplo, 'print' ou 'ask') devem ser apresentadas.
            Desta maneira, pode ensinar os seus alunos a programar com palavras chave em inglês, mas também pode deixá-los programar na sua própria língua. Por exemplo, alunos holandeses podem usar o comando 'vraag' em vez de 'ask'.
            Se um aluno pretender mudar a língua, podem clicar no comutador de palavras chave. Irá alterar as palavras chave do inglês para a língua preferencial e vice-versa.
            Curiosidade interessante! Os alunos podem programar tanto em inglês com na sua própria língua, ao mesmo tempo! Assim, se tiverem dificuldade em lembrarem-se de algumas palavras chave em inglês, mas lembram-se facilmente de outras, podem usar ambas as línguas ao mesmo tempo.
            <img src="https://github.com/hedyorg/hedy/assets/80678586/0b3122e6-ff22-43d7-b8b6-62f47f485293" width="100">

            **Vídeo**
            Este <a href="https://www.youtube.com/watch?v=QrVZETj4oLM" target="_blank">vídeo</a> mostra-lhe como definir a língua preferencial e como alterar as palavras chave para a língua preferencial também.
    -   title: Armazenar programas
        text: |-
            Quando está autenticado, irá ver 'Os meus programas' junto do ícone do seu perfil.
            Esta opção existe também para os seus alunos. Em 'Os meus programas' pode encontrar todos os programas em que trabalhou.
            Por defeito, os programas serão guardados para 'Os meus programas' quando executar o código e a cada 10 segundos, segundo o seu nome predefinido.
            e o seu nível (por exemplo: História 5). Se pretender armazenar um programa sob um novo nome, basta digitar o novo nome na barra do nome.
            De momento, apenas pode salvar um programa por cada nível e por cada separador.

            Você (e os seus alunos) podem também partilhar programas utilizando o botão de partilha, junto aos nomes dos programas.
            Estes programas serão publicados na nossa <a href="https://hedy.org/explore" target="_blank">página de exploração</a>, para todos verem e utilizarem.
            Se quiser parar de partilhar o seu programa, navegue até 'Os meus programas' e clique em 'Parar partilha'.

            O ícone do avião de papel pode ser usado para enviar programas para o professor de uma turma. Programas que foram entregues, deixarão de ser editáveis.
-   title: Teaching with Hedy
    key: teaching
    subsections:
    -   title: Teaching with Hedy
        text: |-
            Hedy contains a lot of different levels that each teach a different new skill. We recommend to teach one level per lesson.
            This gives your students the time to fully grasp a new command or concept and practice with it, before moving on to the next level.
            We use this structure in our lessons:
    -   title: Slides
        text: |-
            When giving instructions you might want to use our slides. Our slides are available on the 'For teachers' page. There is a set of slides for each level. In the slides all the new commands for that level are explained. We have aimed to explain why these changes are nessecary or how the new commands come in handy.
            We also give some examples of how the new commands can be used. You could of course also use your own slides, or just open Hedy and show your students around the website. Whichever you prefer to give the best Hedy lessons!
    -   title: Introduction
        text: |-
            You can start your lessons by activating your students' prior knowledge: What do they already know about the subject, what did they learn in the previous lesson and which mistakes did they make that they've now learned from?
            This way all the previously learned commands and frequently made mistakes are fresh in your students' memories, when you strat introducing the new lesson.
    -   title: Introduction of new concepts and commands
        text: |-
            The new concepts and commands can be very hard for some students to fully understand.
            That's why it's of importance to model the proper use of the new commands to your students.
            Especially in the lower levels, where some students have no experience whith programming at all, it can be hard for them to understand the new abstract concepts.
            Showing a lot of examples makes an abstract concept (for instance: 'What is a variable?') more recognizable and easier to understand ('Look, the variable pet changed into dog'). Our slides could help you with that.
    -   title: Let's get to work
        text: |-
            Each level contains different adventures that you can find in the pink tabs. The first pink tab explains the new commands in this level.
            The following tabs are adventures that the students can try out and make their own.
            The adventures are arranged from easiest to hardest, so we recommend to start on the left and your your way to the right.
            The last tab 'what's next' gives a little teaser of what you'll learn in the next level. Of course, you can select the adventures you want your students to do for each level.
            They don't always have to make every adventure. Every adventure contains an example code, that the students can try out with the green button.
            The example code gets copied to the workfield, where the students can try out the code and adjust it to make it their own.
            Stimulate your students to turn the example code into their own projects by adding their own ideas and making their own variation of the adventure.
    -   title: Quiz
        text: |-
            To test whether your students have picked up all the new info in the level, you can let them make the quiz.
            The quiz contains 10 multiple choice questions about the new concepts and command to that level.
            Not every level has a quiz yet, as we are still building the quizzes.
    -   title: Evaluation
        text: |-
            Round up your lesson by having a brief evaluation. What did the students learn? Which hardships did they come across?
            How did they learn from their mistakes? And of course: What did they create?
            Students are often very proud of their own creations, so it's nice to save a little time and gove your students the opportunity to show their work to their classmates.
-   title: Teacher Statistics
    key: teacher_statistics
    subsections:
    -   title: Live Dashboard
        text: |-
            If you would like to keep track of your students' progress, you can make use of the live dashboard. You can find the live dashboard by clicking 'Live statistics' on your class page.
            <img src="https://github.com/hedyorg/hedy/assets/80678586/97a54679-b1d6-46b4-a633-ab0161114642" width="1000">
            All the features of this dashboard are explained below.
    -   title: Level Selection
        text: |-
            <img src="https://github.com/hedyorg/hedy/assets/80678586/94dc891d-cdd6-4311-91f2-51900eaf4c2a" width="500">
            Firstly, you can select the levels you'd like to see on the dahsboard. Select the levels your students are currently working on by clicking on the number of that level. Deselect levels that you do not want to see by clicking them again.
            In this example level 1 and 2 are selected. You can click on refresh to refresh the dashboard and get the most current stats.
    -   title: Class Overview
        text: |-
            <img src="https://github.com/hedyorg/hedy/assets/80678586/b2c30ef9-6eba-4c02-92a3-9669504a54a8" width="1000">
            In the class overview you can see which adventure your students are working on right now. You can see that one student is working on the 'Rock, Paper, Scissors' adventure in level 1, one is working on the 'Fortune Teller' in level 1 and one student is working on the 'Rock, Paper, Scissors' adventure in level 2.
            If you'd like to know which of your students is working on the adventure, simply click the number and their accountnames will appear.
            You can also see how many of your students have finished the quiz. In this case, one student finished the quiz in level 1. Again, you can click the 1 to see which of your students it is.

            You can also see one of the students is 'missing' from this overview. That's because he's working on an adventure in level 4, which is not selected.
    -   title: Student List
        text: |-
            <img src="https://github.com/hedyorg/hedy/assets/80678586/693e976c-199f-46f4-abae-3f18f9854cd0" width="1000">
            Here you can find a list of your students and you can see their individual progress. The blue ring shows you what your students are currently working on.
            <img src="https://github.com/hedyorg/hedy/assets/80678586/c7e2150f-60de-4ef7-8862-5901a7fb6609" width="150">
            It is important to notice that the blue dots means that a students 'attempted' the adventure. This means that they ran a code in this adventure and went on to the next adventure, so this does not automatically mean that they did a good job!
            If you want to see how an individual student is getting along, you can click their name in this overview. This is what you see if you click on marleen_h3a for example:
            <img src="https://github.com/hedyorg/hedy/assets/80678586/f8c2480d-c724-46f9-a702-33532828de70" width="800">
            You see that Marleen is having some trouble programming. She tried to run a program that contains blanks multiple times, so she probably doesn't know that she has to change something in the example code before running it.
            In this way this overview can give you a better understanding of what a student is struggling with.
    -   title: Common Errors
        text: |-
            <img src="https://github.com/hedyorg/hedy/assets/80678586/e7af5ce3-ca74-48e7-9654-f17435596fbc" width="500">
            If you're not only interested in individual struggles of your students, but you'd like to know what the whole class seems to be doing wrong, you can use this oversight of common errors.
            The most common error messages that your students are recieving will appear in this oversight for you, so you could give some more instructions to the whole class if needed.
            By clicking the error, you can see which students are having trouble with this error. By clicking resolve, you'll remove this error from the list.
    -   title: Overview of programs per adventure
        text: |-
            <img src="https://github.com/hedyorg/hedy/assets/80678586/f07bf714-7250-4711-82a1-616f9f7b55e8" width="1000">
            Another useful overview of all the programs your students made in a level can be found on your class page. Go to the class page and click 'Overview of programs per adventure'. Here you'll find this overview.
            You could use this overview to check your students' work. If they have made a program in an adventure, an eye appears in your overview. Click the eye to view their work. Did you like it? Then you can check the box and a green tick will appear.
            This way you create a nice overview for yourself of your students' results.
-   title: Extra Hedy features
    key: features
    subsections:
    -   title: Make your own adventure
        text: It is also possible for teachers to create your own adventure. [This video](https://www.youtube.com/watch?v=A0zbXpxX4q4) shows you how to create your own adventure as a teacher and add it to your class(es).
    -   title: Explore page
        text: |-
            On the [explore](https://hedy.org/explore) page you can view the work of other Hedy users. You can try out their programs and use them as inspiration to create something cool yourself.
            You can also add a program you've made to the explore page yourself by clicking 'Save and share code' in the coding screen or go to My Programs and click 'Share'.
            Don't want to share your work anymore? Simply go to 'My Programs' and click 'Unshare'.
            If you want more information about the explore page, check out this [video](https://www.youtube.com/watch?v=26boFjqvS5Q).
    -   title: My achievements
        text: |-
            If you click on your username in the topright corner of your screen, you can go to [My achievements](https://hedy.org/my-achievements). On this page you achievements are collected. Your students have such a page as well.
            When you hover over the badge with your mouse, you'll see how to earn the badge. There are hidden badges too, of which you'll have to find out yourself how to earn them.
            If you want more information on the achievements, check out this [video](https://www.youtube.com/watch?v=-FjmKejukCs).
    -   title: High Scores
        text: |-
            On [this page](https://hedy.org/highscores) you can see the high scores of all Hedy users.
            In this [video](https://www.youtube.com/watch?v=IqTiUkBVTo8) you can learn some more about the high scores.
    -   title: Debugger
        text: |-
            Is your (student's) code not working? There must be a bug (coding mistake) in it! You can use the debugger to find the mistake.
            The debugger is the ladybig button in your coding screen. If you press it, you can run your code line by line to find your mistake.
            Have you found the mistake? Press the red stop button and the debugger will shut off.
    -   title: Read aloud
        text: Do you want the output of your program to be read aloud? Then you can use the read aloud function that is found under the 'run code' button in your coding screen.
    -   title: Programmers mode
        text: |-
            Distracted by all the adventures, or do you want to make a long program? Then check out the 'Programmers Mode' switch at the bottom of your coding screen.
            Programmers mode allows you and your students to use a bigger coding screen.
    -   title: Cheat sheets
        text: |-
            In every level there is a button with this emoji 🤔. You and your students can find the "cheat sheets" there. On this cheat sheet, you can find all the commands that are usable in this level in their correct form.
            So if you've forgotten how a command works, simply take a peek at the cheat sheet!
    -   title: Other useful features
        text: This [video](https://www.youtube.com/watch?v=c4MntPPgl1Y) shows you even more features of Hedy, like the cheatsheets and the keyword switcher.
-   title: After Hedy
    key: after
    subsections:
    -   title: What to do after Hedy?
        text: |-
            Congratulations on reaching the end of Hedy! Your students have now learned how to create their own basic code in the Python programming language.
            Of course, you could keep programming in our Hedy compiler, but it might be more exciting for your students to transfer to a "real" Python interface.
            Would you like to continue teaching Python? Then please visit <a href="https://www.python.org/about/gettingstarted/" target="_blank">the Python website</a> to learn how to get started in another compiler.

            Now that your students have a basic knowledge of programming in general, you could also show them around in other textual programming languages. The language might change but the concepts do not, so Hedy will still give them a big advantage.
-   title: Answers to the exercises
    key: answers
    intro: |-
        The answers to all the exercises can be found on the public profile of the useraccount 'Hedy_answers'. We often encourage students to use their own creativity in their answers, so these answers are merely a guideline as to what a possible correct answer could look like.

        To go to the 'Hedy_answers' profile, please click <a href="https://hedy.org/user/hedy_answers" target="_blank">here</a>.
-   title: Frequently made mistakes
    key: common_mistakes
    intro: |-
        You can learn from your mistakes, especially in coding!
        Making mistakes is unavoidable, and a great opportunity to learn, but for teachers it can be a challenge to find the correct fix for a mistake!
        Especially as the programs get longer and longer as the levels progress. That's why we've made a list with frequently made mistakes in each level, and their solutions.
    levels:
    -   level: '1'
        sections:
        -   title: Students forget to type commands
            example:
                error_text: For example they type a sentence without using print.
                error_code: Hedy can't print this
                solution_text: Teach your students to always start a line of code with a command.
                solution_code: '{print} Hedy can print this!'
        -   title: Students use capitals when typing commands
            example:
                error_text: Commands won't work if they are in capitals.
                error_code: |-
                    Ask Why does my code fail?
                    Print Because I'm using capitals.
                solution_text: Remove the capitals.
                solution_code: |-
                    {ask} Why does my code work now?
                    {print} Because I removed the capitals!
        -   title: Students use echo without ask
            example:
                error_text: Echo is made to repeat an answer after an ask command. Without ask echo won't do anything.
                error_code: '{echo} Your name is'
                solution_text: Add an ask command to make it work.
                solution_code: |-
                    {ask} What's your name?
                    {echo} Your name is
        -   title: Students want their echo word (variable) to be in the middle of a sentence
            example:
                error_text: And they are right! That's why they will learn to use proper variables in the next level.
                error_code: |-
                    {ask} Which programming language is the most fun?
                    {echo} is the best!
                solution_text: 'In level 1 we have to keep it at this:'
                solution_code: |-
                    {ask} Which programming language is the most fun?
                    {echo} The best is...
        -   title: 'Turtle: Students let the turtle walk off of the screen'
            example:
                error_text: Often students love to try out big numbers when using the turtle, which causes the arrow to walk off the screen.
                error_code: |-
                    {forward} 300
                    {turn} 90
                solution_text: In the example, students tend to think that the turn command doesn't work. Even though it does work, you can't see it happening off screen. Use smaller numbers to prevent this from happening.
                solution_code: |-
                    {forward} 100
                    {turn} 90
        -   title: "Turtle: Students use the command backward, but that doesn't exist"
            example:
                error_text: Backward is not a command.
                error_code: backward 100
                solution_text: 'To make the turtle go backwards, you use the forward command and a negative number. For example:'
                solution_code: '{forward} -100'
    -   level: '2'
        sections:
        -   title: Students make typos in their commands
            example:
                error_text: Hedy can't recognize a command with a typo.
                error_code: prinnt Don't make typos
                solution_text: Teach your students to read the error messages. This way they can find out themselves what went wrong.
                solution_code: "{print} Don't make typos"
        -   title: Students forget that the ask command has changed
            example:
                error_text: In this level students learn about variables. The ask command requires a variable as well, but students forget this.
                error_code: ask what would you like to eat
                solution_text: In this level you have to tell Hedy where to save your answer, so it can be used later on. This is called a variable.
                solution_code: order {is} {ask} What would you like to eat
        -   title: Students try to use the `{echo}` command
            example:
                error_text: For some students it might be frustrating to learn that the `{echo}` command doesn't work anymore. That's why it's very important to explain the advantages of using variables. For example you can use multiple variables in a code, and you can put them anywhere you like in a sentence!
                error_code: |-
                    answer {is} {ask} Why doesn't {echo} work anymore?!
                    {echo}
                solution_text: Use a variable instead.
                solution_code: |-
                    answer {is} {ask} Why doens't {echo} work anymore?!
                    {print} answer
        -   title: Students use a variable name or as a normal word
            example:
                error_text: In the example below the word 'name' is used as a variable, but also as a normal text. The output of this code will be 'Hi my Hedy is Hedy'.
                error_code: |-
                    name {is} Hedy
                    {print} Hi my name is name
                solution_text: So don't use a word you want to use in the text as a variable name. In level 4 this is solved with quotation marks.
                solution_code: |-
                    name {is} Hedy
                    {print} Hi I'm name
        -   title: Students use long variable names containing two words.
            example:
                error_text: A variable should be named with one word. You could use an underscore to connect two words. That counts as one.
                error_code: chosen door is ask Which door do you pick
                solution_text: Add an underscore.
                solution_code: chosen_door {is} {ask} which door do you pick
        -   title: Students might use two different names for the same variable
            example:
                error_text: In this example the student has used 'horse' and 'name' for the same variables.
                error_code: |-
                    horse {is} {ask} What is your horse called
                    {print} Your horse is called name
                solution_text: Always check whether the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.
                solution_code: |-
                    name {is} {ask} What is your horse called
                    {print} Your horse is called name
    -   level: '3'
        sections:
        -   title: Students try to print whole lists
            example:
                error_text: A list can't be printed. You can only print one item from the list with {at} {random}.
                error_code: |-
                    groceries {is} apples, milk, chocolate
                    {print} groceries
                solution_text: To print a list of all the groceries, you simply need to put them after a `{print}` command. Else you can use the list to print one item with `{at}` `{random}`.
                solution_code: |-
                    {print} apples, milk, chocolate

                    # or

                    groceries {is} apples, milk, chocolate
                    {print} groceries {at} {random}
        -   title: Students use the name of a variable or list as regular text
            example:
                error_text: This problem probably occured in level 2 as well. Now it can happen with lists too.
                error_code: |-
                    name {is} Hedy
                    {print} Hi my name is name

                    # or

                    animal {is} rhino, bee, swan
                    {print} The best animal is... animal {at} {random}
                solution_text: Don't use the names of variables or lists in regular text to print. In level 4 this problem is solved with quotation marks.
                solution_code: |-
                    name {is} Hedy
                    {print} Hi I'm name

                    # or

                    animals {is} rhino, bee, swan
                    {print} The best animal is... animals {at} {random}
        -   title: Students forget `{at}` in `{at}` `{random}`
            example:
                error_text: Like in the example
                error_code: |-
                    birds {is} sparrow, seagull, robin
                    {print} birds random
                solution_text: This problem is solved by adding the word at.
                solution_code: |-
                    birds {is} sparrow, seagull, robin
                    {print} birds {at} {random}
        -   title: Students forget to use the `{print}` command when also using the `{at}` `{random}` command
            example:
                error_text: Or they will sometimes put `{at}` `{random}` at the beginning of the line.
                error_code: |-
                    fruit {is} apple, cherry, banana
                    fruit {at} {random}
                solution_text: Emphasize to your students that you always need a print to print text.
                solution_code: |-
                    fruit {is} apple, cherry, banana
                    {print} fruit {at} {random}
        -   title: Students forget to use commas in their lists
            example:
                error_text: In a list items are seperated with a comma.
                error_code: |-
                    pizzas {is} funghi tonno quattro stagioni
                    {print} pizzas {at} {random}
                solution_text: After each item on your list, there should be a comma
                solution_code: |-
                    pizzas {is} funghi, tonno, quattro stagioni
                    {print} pizzas {at} {random}
        -   title: Students try to use `{at}` `{random}` without a list
            example:
                error_text: For example
                error_code: |-
                    clubs {is} Manchester United
                    {print} clubs {at} {random}
                solution_text: Hedy can't print anything at random, because there is no list to choose from.
                solution_code: |-
                    clubs {is} Manchester United, Bayrn Munchen, FC Barcelona
                    {print} clubs {at} {random}
        -   title: Students try to use add/remove without a list
            example:
                error_text: In the example below 'names' is not a list, but a variable. You cannot add anything to it.
                error_code: |-
                    names {is} Jake
                    your_name {is} {ask} Who are you?
                    {add} your_name {to} names
                    {print} names {at} {random}
                solution_text: There has to be a list first, so you have to add a second name to turn names into a list, for example Amy. If you don't want amy on your list, you can use remove to remove it after.
                solution_code: |-
                    names {is} Jake, Amy
                    your_name {is} {ask} Who are you?
                    {add} your_name {to} names
                    {print} names {at} {random}
        -   title: Students forget to use to/from in add/remove
            example:
                error_text: Without to/from the add/remove command won't work.
                error_code: |-
                    adventures {is} story, parrot, dice
                    choice {is} Which adventure do you like best?
                    {add} choice
                    {remove} dice
                    {print} I love adventures {at} {random}
                solution_text: Hedy has to know which list the item should be added to/removed from.
                solution_code: |-
                    adventures {is} story, parrot, dice
                    choice {is} Which adventure do you like best?
                    {add} choice {to_list} adventures
                    {remove} dice {from} adventures
                    {print} I love adventures {at} {random}
    -   level: '4'
        sections:
        -   title: Students forget to use quotation marks on both sides of the text
            example:
                error_text: In this level print and ask need a set of quotation marks. One before of the text and one after.
                error_code: |-
                    {print} Hello
                    mood {is} {ask} 'How are you?
                solution_text: Add the correct quotation marks.
                solution_code: |-
                    {print} 'Hello'
                    mood {is} {ask} 'How are you?'
        -   title: Students use the wrong quotation marks
            example:
                error_text: It is important to start your lesson by checking if the students know how to type a quotation mark properly. Else they might use the "double quotes" or the skewed one `.
                error_code: |-
                    {print} `Welcome to the restaurant`
                    food {is} {ask} "What would you like to order?"
                solution_text: 'These are the correct quotation marks:'
                solution_code: |-
                    {print} 'Welcome to the restaurant'
                    food {is} {ask} 'What would you like to order?'
        -   title: Students use an apostrophe in their text
            example:
                error_text: From this level on apostrophes are not allowed. They are often used in English when typing contractions like you're, don't or what's.
                error_code: "{print} 'You're not allowed to type this'"
                solution_text: You can choose to use the wrong grammar and just leave the apostrophe out. Or you could use the ` as an apostrophe.
                solution_code: |-
                    {print} 'Youre allowed to type this'
                    {print} 'And you`re able to do this'
    -   level: '5'
        sections:
        -   title: Students forget to use `{print}` in an `{if}` command
            example:
                error_text: After students use `{if}` or `{else}` they forget to use a second command like `{print}` or `{ask}`.
                error_code: |-
                    {if} name {is} Hedy 'Great!'
                    {else}  Hedy {is} better!
                solution_text: Add the print command to fix it.
                solution_code: |-
                    {if} name {is} Hedy {print} 'Great!'
                    {else} {print} 'Hedy is better!'
        -   title: Students might use two different names for the same variable
            example:
                error_text: In this example the student has used 'horse' and 'name' for the same variables.
                error_code: |-
                    horse {is} {ask} 'What is your horse called?'
                    {if} name {is} Bonfire {print} 'cool'
                    {else} {print} 'less cool!'
                solution_text: Always check whether the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.
                solution_code: |-
                    horse {is} {ask} 'What is your horse called'
                    {if} horse {is} Bonfire {print} 'cool!'
                    {else} {print} 'less cool!'
        -   title: Students still forget the quotes on both sides
            example:
                error_text: Using the `if` command can make the code lines very long and students tend to forget to use quotes.
                error_code: |-
                    {if} name {is} Hedy {print} fun
                    {else} {print} 'meh!
                solution_text: Always use 2 quotes in a print command.
                solution_code: |-
                    {if} name {is} Hedy {print} 'fun'
                    {else} {print} 'meh!'
        -   title: Students use quotes around variable names
            example:
                error_text: In this level there are no quotes around variable names.
                error_code: |-
                    {if}  name  {is} 'Hedy' {print} 'fun'
                    {else} {print} 'meh!'
                solution_text: Remove the quotes to get the code to work.
                solution_code: |-
                    {if} name {is} Hedy {print} 'fun'
                    {else} {print} 'meh!
        -   title: Students use long variable names containing two words
            example:
                error_text: A variable should be named with one word. You could use an underscore to connect two words. That counts as one.
                error_code: chosen door is ask  Which door do you pick?
                solution_text: Add an underscore.
                solution_code: chosen_door {is} {ask} 'which door do you pick?'
        -   title: Students want multiple answers to be correct
            example:
                error_text: For example this student Hedy to tell all his friends that they are funny, but other classmates would be told that they are not.
                error_code: "{if} name {is} Jesse, David, Souf print  You are funny  {else} {print} 'You are not funny'"
                solution_text: |-
                    You could use the `in` command for that. It is explained in a higher level, but it does already work in level 5.
                    Another solution is to use multiple if commands and no else command. The disadvantage is that it won't tell the other classmates that they are not funny.
                solution_code: |-
                    friends {is} Jesse, David, Souf
                    name {is} {ask} 'Who are you?'
                    {if} name {in} friends {print} 'You are funny'
                    {else} {print} 'You are not funny'

                    # or

                    name {is} {ask} 'Who are you?'
                    {if} naam {is} Jesse {print} 'You are funny'
                    {if} naam {is} David {print} 'You are funny'
                    {if} naam {is} Souf {print} 'You are funny'
        -   title: The students make the variable name the same as the value in the `{if}` statement
            example:
                error_text: In the example below the password is 'password'. This will result in it always being correct.
                error_code: |-
                    password {is} {ask} 'What is the password?'
                    {if} password {is} password {print} 'Access granted'
                    {else} {print} 'Acces denied!'
                solution_text: Pick a different name for your variable.
                solution_code: |-
                    secret_password {is} {ask} 'What is the password'
                    {if} secret_password {is} password {print} 'Access granted!'
                    {else} {print} 'Access denied!'
    -   level: '6'
        sections:
        -   title: Students struggle with quotation marks
            example:
                error_text: Some students struggle with adding quotation marks or not. If you add quotation marks, the output screen will literally show '5+5'.
                error_code: "{print} '5 + 5'"
                solution_text: In this code the output screen will print '10'.
                solution_code: '{print} 5 + 5'
        -   title: Students struggle with the concept of doing maths with a variable
            example:
                error_text: 'Some students will find it hard to do maths with variables. Try to show them very simple examples, like:'
                error_code: |-
                    age = {ask} 'How old are you?'
                    {print} 'Next year you will be ' age + 1
                solution_text: Or take it a step further like this.
                solution_code: |-
                    price = 0
                    {print} 'Welcome to our burger restaurant'
                    burger = {ask} 'Would you like a burger?'
                    {if} burger = yes price = price + 10
                    drink = {ask} 'Would you like a drink?'
                    {if} drink = yes price = price + 4
                    {print} 'That will be ' price ' euros please'
    -   level: '7'
        sections:
        -   title: Students forget one of the word of the repeat command, or they forget the print command
            example:
                error_text: Make sure that the students know to use both the full repeat command and the print command.
                error_code: |-
                    {repeat} 3 {times}  For he`s a jolly good fellow
                    {repeat} 3 print
                solution_text: 'This is the correct code:'
                solution_code: |-
                    {repeat} 3 {times} {print} 'For he`s a jolly good fellow'
                    {repeat} 3 {times} {print} 'Which nobody can deny!'
        -   title: Students try to repeat multiple lines
            example:
                error_text: In this level you can only repeat one line of code multiple times. In this code the student wanted to print 3 different drinks, but it won't work. It will ask the question 3 times and only print the last answer.
                error_code: |-
                    {repeat} 3 {times} drink = {ask} 'What would you like to drink?'
                    {print} drink
                solution_text: You should go to the next level to be able to repeat multiple lines. So on this level you'll have to print everything seperately.
                solution_code: |-
                    drink = {ask} 'What would you like to drink?'
                    {print} drink
                    drink = {ask} 'What would you like to drink?'
                    {print} drink
                    drink = {ask} 'What would you like to drink?'
                    {print} drink
        -   title: Students make programs that take too long to run
            example:
                error_text: In this level it's very easy to make long-running programs. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: "{repeat} 100 {times} {print} 'How many times can I repeat this?'"
                solution_text: Make sure the programs aren't too long
                solution_code: "{repeat} 20 {times} {print} 'This is enough'"
    -   level: '8'
        sections:
        -   title: Students use the indentation wrong
            example:
                error_text: Indentation is a new concept in this level, that is hard to use for some students. Make sure they practise some simple snippets before making a whole program with it.
                error_code: |-
                    {repeat} 3 {times}
                    {print} 'hello'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    {repeat} 3 {times}
                        {print} 'hello'
        -   title: Students only repeat 1 line when they wanted to repeat multiple lines
            example:
                error_text: For instance, in the code below the student wanted to take the drinks order of 3 people. But instead the program asked 3 times, but only wrote down one order.
                error_code: |-
                    {repeat} 3 {times}
                        drink = {ask} 'What would you like to drink?'
                    {print} drink
                solution_text: |-
                    In the correct code the third line starts with indentation too. This way it belongs to the repeat block and therefore it will be repeated 3 times.
                    Showing your students these differences can help them understand why we need indentation to make our programs work.
                solution_code: |-
                    {repeat} 3 {times}
                        drink = {ask} 'What would you like to drink?'
                        {print} drink
        -   title: Students want to nest `{if}` statements, or put `{if}` statements inside a loop
            example:
                error_text: |-
                    In this level students aren't allowed yet to put `{if}` statements inside other `{if}` statements or inside repeat loops.
                    In the next level this is allowed.
                error_code: |-
                    birthday = {ask} 'Is it you birthday?'
                    {if} birthday = yes
                        {repeat} 3 {times}
                            {print} 'Hip Hip Hooray!'
                solution_text: 'This is the correct code for this level:'
                solution_code: |-
                    birthday = {ask} 'Is it you birthday?'
                    {if} birthday = yes
                        {print} 'Hip Hip Hooray!'
                        {print} 'Hip Hip Hooray!'
                        {print} 'Hip Hip Hooray!'
        -   title: Students make programs that take too long to run
            example:
                error_text: In this level it's very easy to make long-running programs. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: |-
                    {repeat} 100 {times}
                        {print} 'How many times can I repeat this?'
                solution_text: Make sure the programs aren't too long
                solution_code: |-
                    {repeat} 20 {times}
                        {print} 'This is enough'
        -   title: Students use the `{if}` command to check if the variable value is the same as the variable name
            example:
                error_text: |-
                    We have seen this mistake by some of our students. They make a password for their computer, but they make the password 'password'.
                    In line 2 the computer is asked to check whether the variable password is the same as the variable password, so itself. Which means the answer is always yes.
                    So with this code the answer will always be 'You can come in' no matter what the player fills in.
                error_code: |-
                    password {is} {ask} 'What is the password?'
                    {if} password {is} password
                        {print} 'You can come in'
                    {else}
                        {print} 'You are not allowed'
                solution_text: You can fix this mistake by adding quotation marks. This way the computer knows that the second password in `{if} password {is} 'password'` is a string value (so normal text) and not the variable name.
                solution_code: |-
                    password {is} {ask} 'What is the password?'
                    {if} password {is} 'password'
                        {print} 'You can come in'
                    {else}
                        {print} 'You are not allowed'
    -   level: '9'
        sections:
        -   title: Students make mistakes with indentation
            example:
                error_text: The hardest part about this level is getting the indentation right. Students love nesting `{if}` statements, sometimes even inside other nested `{if}` statements. Keeping track of indentation can get pretty tough.
                error_code: |-
                    {print} 'Robin is walking downtown'
                    location = {ask} 'Is Robin going into a shop, or does she go home?'
                    {if} location {is} shop
                        {print} 'She enters the shop.'
                        {print} 'Robin sees an interesting looking book'
                        book = {ask} 'Does Robin buy the book?'
                            {if} book {is} yes
                    {print} 'Robin buys the book and goes home'
                    {else}
                        {print} 'Robin leaves the shop and goes home'
                    {else}
                        {print} 'Robin goes home'
                solution_text: This is the correct code. Try to keep track of all the different constructions when putting `{if}` statements inside other `{if}` statements.
                solution_code: |-
                    {print} 'Robin is walking downtown'
                    location = {ask} 'Is Robin going into a shop, or does she go home?'
                    {if} location {is} shop
                        {print} 'She enters the shop.'
                        {print} 'Robin sees an interesting looking book'
                        book = {ask} 'Does Robin buy the book?'
                        {if} book {is} yes
                            {print} 'Robin buys the book and goes home'
                        {else}
                            {print} 'Robin leaves the shop and goes home'
                    {else}
                        {print} 'Robin goes home'
    -   level: '10'
        sections:
        -   title: Students do not use the for command correctly
            example:
                error_text: We often see that students try to print the list (in the example animals) instead of the items of the list.
                error_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                      {print} 'I love ' animals
                solution_text: The word animals in the last line should be changed into animal.
                solution_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                      {print} 'I love ' animal
        -   title: Students forget the indentation
            example:
                error_text: Students tend to forget to use indentation after a for command.
                error_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                    {print} 'I love ' animals
                solution_text: You should use indentation after a for command.
                solution_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                      {print} 'I love ' animal
    -   level: '11'
        sections:
        -   title: Students forget to use indentation
            example:
                error_text: Make sure that the students use indentation.
                error_code: |-
                    {for} i {in} {range} 1 {to} 5
                    {print} i
                solution_text: 'This is the correct code:'
                solution_code: |-
                    {for} i {in} {range} 1 {to} 5
                        {print} i
        -   title: Students don't understand the i
            example:
                error_text: |-
                    Some students don't understand that i is a variable. i is chosen, because it is used in Python programming, but you could just as easily use a different variable name.
                    For example, this code:
                error_code: |-
                    {for} i {in} {range} 1 {to} 5
                    {print} i
                solution_text: Could just as well be replaced with this code. It works the same.
                solution_code: |-
                    {for} banana {in} {range} 1 {to} 5
                        {print} banana
    -   level: '12'
        sections:
        -   title: Students forget quotation marks
            example:
                error_text: Students need more quotation marks now than in the previous levels. In this example quotation marks were forgotten in the list and in the `{if}` command.
                error_code: |-
                    superheroes = Spiderman, Batman, Iron Man
                    superhero = superheroes {at} {random}
                    {if} superhero = Batman
                        {print} 'IM BATMAN!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    superheroes = 'Spiderman', 'Batman', 'Iron Man'
                    superhero = superheroes {at} {random}
                    {if} superhero {is} 'Batman'
                        {print} 'IM BATMAN!'
        -   title: Students use quotation marks on numbers they want to use for calculations
            example:
                error_text: |-
                    You can use quotation marks on numbers, but only if you want the computer to think of them as text. This means you can't do calculations with the number.
                    In the example below, you can't do maths with the number 25, because it's in quotation marks.
                error_code: |-
                    score = '25'
                    answer {is} {ask} 'Do you want a point?'
                    {if} answer {is} 'yes'
                        score = score + 1
                        {print} score
                solution_text: 'This is the correct code:'
                solution_code: |-
                    score = 25
                    answer {is} {ask} 'Do you want a point?'
                    {if} answer {is} 'yes'
                        score = score + 1
                        {print} score
        -   title: Students use commas instead of periods in decimal numbers
            example:
                error_text: Decimal numbers can be used from this level on, but you can't use commas.
                error_code: '{print} 2,5 + 2,5'
                solution_text: 'This is the correct code:'
                solution_code: '{print} 2.5 + 2.5'
    -   level: '13'
        sections:
        -   title: Students confuse `and` with `or`
            example:
                error_text: Both commands might appear similar, but their functions are very different.
                error_code: |-
                    game {is} {ask} 'Do you want to play a game?'
                    time {is} {ask} 'Do you have time to play?'
                    {if} game {is} 'yes' {or} time {is} 'yes'
                        {print} 'Lets play!'
                solution_text: In this case, the person should answer yes on both questions, so you should use `and`.
                solution_code: |-
                    game {is} {ask} 'Do you want to play a game?'
                    time {is} {ask} 'Do you have time to play?'
                    {if} game {is} 'yes' {and} time {is} 'yes'
                        {print} 'Lets play!'
    -   level: '14'
        sections:
        -   title: Students confuse the < and > signs
            example:
                error_text: Often, students are already familiar with these signs from maths class. But if your students don't know these signs yet, they might have a challenge with it.
                error_code: |-
                    age = {ask} 'How old are you?'
                    {if} age < 12
                        {print} 'You are older than I am!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
        -   title: Students use the wrong signs for `!=` `<=` and `>=`
            example:
                error_text: These signs are probably new for most students. Make sure to explain these signs to your students.
                error_code: |-
                    name = {ask} 'What is your name?'
                    {if} name =  'Hedy'
                        {print} 'You are not Hedy'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
        -   title: Students forget to use the == sign
            example:
                error_text: In this level, students are still allowed to use = or is. But on other levels, or in python, they might get in trouble for that. So it is best to train them to use it.
                error_code: |-
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy'
                        {print} 'You are cool!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    name = {ask} 'What is your name?'
                    {if} name == 'Hedy'
                        {print} 'You are cool!'
    -   level: '15'
        sections:
        -   title: Students forget indentation in the while loop
            example:
                error_text: Indentation is often hard for students.
                error_code: |-
                    answer = 0
                    {while} answer != 25
                    answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
    -   level: '16'
        sections:
        -   title: Students forget the brackets
            example:
                error_text: From this level on lists should be in brackets.
                error_code: |-
                    icecream = 'starwberry', 'chocolate'
                    {print} 'I love ' icecream[{random}] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    {print} 'I love ' icecream[{random}] ' icecream'
        -   title: Students use the wrong brackets
            example:
                error_text: From this level on lists should be in brackets.
                error_code: |-
                    icecream = ('starwberry', 'chocolate')
                    {print} 'I love ' icecream[{random}] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    {print} 'I love ' icecream[{random}] ' icecream'
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    {print} 'I love ' icecream[{random}] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    {print} 'I love ' icecream[{random}] ' icecream'
        -   title: Students still use the old at random command
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    {print} 'I love ' icecream at random ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    {print} 'I love ' icecream[{random}] ' icecream'
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    {print} 'I love ' icecream[{random}] ' icecream'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    {print} 'I love ' icecream[{random}] ' icecream'
    -   level: '17'
        sections:
        -   title: Students use `{elif}` like `{else}`, so without a condition
            example:
                error_text: The `{elif}` command needs a condition behind it. It cannot be used like `{else}`, without a condition.
                error_code: |-
                    color = ask 'What is your favorite color?'
                    {if} color == 'green':
                        {print} 'green is nice'
                    {elif}:
                        {print} 'I like green'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    color = {ask} 'What is your favorite color?'
                    {if} color == 'green':
                        {print} 'green is nice'
                    {elif} color == yellow:
                        {print} 'yellow is alright'
                    {else}:
                        {print} 'I like green'
        -   title: Students forget the colon
            example:
                error_text: After each command that requires indentation, a colon should be used.
                error_code: |-
                    answer = ask 'How are you doing?'
                    {if} answer {is} 'great'
                        {print} 'Me too!'
                    {elif} answer {is} 'bad'
                        {print} 'Let me cheer you up!'
                    {else}
                        {print} 'Im great!'
                solution_text: 'This is the correct code:'
                solution_code: |-
                    answer = {ask} 'How are you doing?'
                    {if} answer {is} 'great':
                        {print} 'Me too!'
                    {elif} answer {is} 'bad':
                        {print} 'Let me cheer you up!'
                    {else}:
                        {print} 'Im great!'
    -   level: '18'
        sections:
        -   title: Students forget to use the brackets
            example:
                error_text: Students will forget to put brackets around their text.
                error_code: "{print} 'my name is Hedy!'"
                solution_text: 'This is the correct code:'
                solution_code: "{print}('my name is Hedy!')"
        -   title: Students will still use the ask command
            example:
                error_text: The ask command has been used since level 1. So it might be hard for the students to switch to input instead of ask.
                error_code: |-
                    {print}('My name is Hedy!')
                    name = ask('What is your name?')
                    {print}('So your name is ', name)
                solution_text: 'This is the correct code:'
                solution_code: |-
                    {print}('My name is Hedy!')
                    name = {input}('What is your name?')
                    {print}('So your name is ', name)
        -   title: Students might use the brackets as quotation marks
            example:
                error_text: They have learned to keep the variables outside of the quotation marks, so they might do the same with the brackets. Which is not the correct way to use them.
                error_code: |-
                    temperature = 25
                    {print}('It is ') temperature ('degrees outside')
                solution_text: 'This is the correct code:'
                solution_code: |-
                    temperature = 25
                    {print}('It is ', temperature, 'degrees outside')
