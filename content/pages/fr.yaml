title: "Documentation de Hedy"
sections:
-   title: "Introduction"
    subsections:
    -   title: "Qu'est-ce qu'Hedy ?"
        text: |
            Hedy est un langage de programmation textuel, spécifiquement développé pour les (pré-)ados (10 à 15 ans).
            Contrairement aux langages de programmation pour les enfants, comme Scratch, Hedy n'utilise pas de blocs de code.
            Ainsi, avec Hedy vous apprendrez à taper du code comme les vrais programmeurs, mais en petites étapes avec des exercices ludiques.
            De cette façon, Hedy peut fonctionner comme un tremplin vers de vrais langages de programmation comme Python d'une manière accessible et surtout amusante !
            Ici vous pouvez regarder une [vidéo] (https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s) sur le développement d'Hedy comme un langage de programmation.
    -   title: "Audience cible"
        text: |
            Hedy a été développée en pensant aux élèves du collège et du lycée (âgés de 10 à 15 ans).
            Il est important que les élèves soient capables de bien lire. Nous recommandons de ne pas commencer avec Hedy avant que les élèves aient atteint au moins un niveau de lecture de niveau 6ème.
            Les élèves (et les professeurs !) n'ont pas besoin d'expérience de programmation avant de commencer avec Hedy.
    -   title: "Comment fonctionne Hedy ?"
        text: |
            Hedy est séparé en plusieurs niveaux, chacun permettant d'apprendre de nouvelles commandes. Chaque niveau comprends une variété d'aventures pour pratiquer ces nouvelles commandes.
            En tant que professeur, vous décidez des aventures disponibles à vos élèves. Feront-ils un restaurant, une calculatrice ou une maison hantée, ce niveau-ci ? À chaque niveau, les aventures sont classé par ordre de difficulté croissante, de la plus simple à la plus difficile.
            Vos élèves ont relèveront ainsi continuellement de nouveaux défis. Les aventures peuvent être effectuées par les élèves par eux-même, ou vous pouvez les effectuer en groupe devant la classe. 

            Les aventures incluent du code exemple, pour que les professeurs moins technologiquement habiles puissent aussi tiliser Hedy !
            Bien sûr, Hedy est aussi pour les professeurs créatifs qui adorent créer leur propres aventures et plan d'études !

            Après avoir programmé toutes les aventures d'un certain niveau, vos élèves peuvent tester leurs connaissance dans un quiz.
            Vous pouvez suivre le progrès et le travail de vos étudiant depuis la page Classe.
    -   title: "Appareils"
        text: |
            Hedy est basé sur le web, cela signifie qu'il peut fonctionner sur n'importe quel objet avec un navigateur internet (Firefox, Google Chrome, Edge, etc) donc les portables, les chromebooks, les tablettes et même les smartphones fonctionnent avec Hedy.
            Il n'y a pas besoin de télécharger quoi que ce soit pour faire marcher Hedy, il faut juste aller sur le site web et c'est parti !
    -   title: "La communauté d'Hedy"
        text: |
            Tous les enseignants Hedy, programmeurs et autres fans sont les bienvenus sur notre [server Discord](https ://discord.gg/8yY7dEme9r). C'est l'endroit idéal pour chatter à propos d'Hedy : nos avons des channels où vous pouvez montrer vos projets cools et vos lessons, des channels pour remonter les bugs et des channels pour chatter avec d'autres enseignants et l'équipe Hedy.
    key: intro
-   title: "Préparatifs"
    subsections:
    -   title: "Création d’une classe"
        text: |
            Comme enseignant, tu peux créer une classe pour tes élèves. Dans cette classe, tu peux voir les comptes des élèves et leurs programmes et tu peux suivre leurs progrès. 
            Tu peux aussi personaliser ta classe et choisir quelles aventures sont disponibles pour eux. De cette manière, tes étudiants ne seront pas submergé par la quantité d'aventures et de niveaux et ils pourront se concentrer sur les aventures que tu veux qu'ils pratiquent.
    -   title: "Comptes des élèves"
        text: |
            Il y a deux façons de permettre à tes élèves de rejoindre ta classe : Tu peux les laisser créer leurs propres comptes ou tu peux créer les comptes pour eux.

            **Les élèves créent leurs propres comptes**
            Tes élèves peuvent aller au site Web d'Hedy et créer leurs propres comptes, exactement comme tu as fait. Pour les faire entrer dans ta classe, ils doivent simplement cliquer sur le lien d'invitation.
            Tu peux trouver le lien d'invitation sur la page de la classe et l'envoyer à tes élèves. Gardes à l'esprit que tes élèves doivent être connectés à Hedy quand ils cliquent sur le lien.

            **Tu crées les comptes pour tes élèves**
            Parfois, il est plus facile de créer toi-même un grand nombre de comptes pour tes élèves. Ceci peut être fait en cliquant sur le bouton "créer des comptes d'élève" et en remplissant des noms d'utilisateur et des mots de passe pour eux.
            Les élèves peuvent se connecter avec le nom d'utilisateur et le mot de passe que tu as choisis. Par la suite, ils pourront changer leur nom d'utilisateur ou leur mot de passe s'ils le souhaitent et ils resteront dans ta classe.
    -   title: Réglage de la langue
        text: "Quand les élèves créent un profil ils sont censés choisir une langue. Hedy sera toujours affiché dans cette langue.\nCette langue peut toujours être changée plus tard dans 'Mon compte' et 'Mes paramètres personnels'.\nÀ partir de décembre 2021, le choix d'une langue est obligatoire pour chaque compte d'Hedy.\nSi ton compte ou les comptes de tes élèves ont été créés avant cette date, vous recevrez un message indiquant que la langue doit être renseignée.\nNe vous inquiétez pas ! Naviguez dans 'Mon profil' et définissez une langue dans les paramètres de votre profil.\nJusqu'à ce que vous définissez une langue, Hedy sera montré dans la langue de votre navigateur et, quand cette langue n'est pas supportée, en anglais.\n\n**Pour les non-anglophones**\nNon seulement tu peux changer la langue des aventures dans ta propre langue. Tu peux également choisir la langue dans laquelle les mots-clés (par exemple \"print\" ou \"ask\") doivent être utilisés.\nAinsi, tu peux apprendre à tes élèves à coder avec des mots-clés anglais, mais tu peux aussi les laisser programmer dans leur propre langue. Par exemple, les étudiants français peuvent utiliser la commande \"demander\" au lieu de \"ask\".\n"
    -   title: Sauvegarde des programmes
        text: "Comme tu es maintenant connecté, tu verras la bannière bleue avec Mon profil et Mes programmes.\nCes onglets existent aussi pour tes élèves. Dans Mes programmes, tu peux trouver tous les programmes que tu as enregistrés.\n\nTu peux sauvegarder tes projets facilement en leur donnant un nom dans la barre blanche et en appuyant sur le bouton vert Enregistrer le code.\nToi (et tes élèves) pouvez également partager des programmes. Ces programmes seront publiés sur notre page d'exploration, pour que tout le monde puisse les voir et les utiliser.\nSi vous voulez annuler le partage de votre programme, allez dans \"Mes programmes\" et cliquez sur \"Annuler le partage\".\n"
    key: préparations
-   title: "L'enseignement avec Hedy"
    subsections:
    -   title: " "
        text: |
            Hedy contient beaucoup de niveaux différents qui enseignent chacun une nouvelle compétence. Nous recommandons d'enseigner un niveau par leçon.
            Cela donne à vos élèves le temps de saisir pleinement une nouvelle commande ou un nouveau concept et de s'exercer avec lui, avant de passer au niveau suivant.
            Nous utilisons cette structure dans nos leçons :
    -   title: "Introduction"
        text: |
            Vous pouvez commencer vos leçons en activant les connaissances préalables de vos élèves : Que savent-ils déjà sur le sujet, qu'ont-ils appris dans la leçon précédente et quelles erreurs ont-ils commises dont ils ont maintenant tiré les leçons ?
            De cette façon, toutes les commandes apprises précédemment et les erreurs fréquemment commises sont fraîches dans la mémoire de vos élèves, lorsque vous commencez à présenter la nouvelle leçon.
    -   title: "Introduction de nouveaux concepts et de nouvelles commandes"
        text: |
            Les nouveaux concepts et commandes peuvent être très difficiles à comprendre pour certains élèves.
            C'est pourquoi il est important de montrer à vos élèves comment utiliser correctement les nouvelles commandes.
            En particulier dans les niveaux inférieurs, où certains élèves n'ont aucune expérience de la programmation, il peut être difficile pour eux de comprendre les nouveaux concepts abstraits.
            Montrer de nombreux exemples rend un concept abstrait (par exemple : "Qu'est-ce qu'une variable ?") plus reconnaissable et plus facile à comprendre ("Regardez, la variable animal à été changé en chien").
    -   title: "Commençons le travail"
        text: |
            Chaque niveau contient différentes aventures que vous pouvez trouver dans les onglets roses. Le premier onglet rose explique les nouvelles commandes de ce niveau.
            Les onglets suivants sont des aventures que les élèves peuvent essayer et créer eux-mêmes.
            Les aventures sont classées du plus facile au plus difficile, nous vous recommandons donc de commencer par la gauche et de vous diriger vers la droite.
            Le dernier onglet "What's next" donne une petite idée de ce que vous apprendrez dans le niveau suivant. Bien entendu, vous pouvez sélectionner les aventures que vous voulez faire faire à vos élèves pour chaque niveau.
            Ils ne sont pas obligés de faire toutes les aventures. Chaque aventure contient un exemple de code, que les élèves peuvent essayer à l'aide du bouton vert.
            Le code d'exemple est copié dans le champ de travail, où les élèves peuvent essayer le code et l'adapter pour se l'approprié.
            Encouragez vos élèves à transformer les codes d'exemple en leurs propres projets en ajoutant leurs propres idées et en créant leur propre variation de l'aventure.
    -   title: "Quiz"
        text: |
            Pour vérifier si vos élèves ont assimilé toutes les nouvelles informations du niveau, vous pouvez les laisser faire le quiz.
            Le quiz contient 10 questions à choix multiple sur les nouveaux concepts et la commande de ce niveau.
            Il n'y a pas encore de quiz pour tous les niveaux, car nous sommes encore en train de les rajouter.
    -   title: "Évaluation"
        text: |
            Terminez votre leçon par une brève évaluation. Qu'ont appris les élèves ? Quelles difficultés ont-ils rencontrées ?
            Comment ont-ils appris de leurs erreurs ? Et bien sûr : Qu'ont-ils créé ?
            Les élèves sont souvent très fiers de leurs propres créations, il est donc souhaitable de garder un peu de temps pour donner à vos élèves l'occasion de montrer leur travail à leurs camarades de classe.
    key: enseigner
-   title: "Erreurs fréquemment commises"
    key: "common_mistakes"
    intro: |
        Vous pouvez apprendre de vos erreurs, surtout en codage !
        Il est inévitable de faire des erreurs, et c'est une excellente occasion d'apprendre, mais pour les enseignants, il peut être difficile de trouver la bonne solution à une erreur !
        D'autant plus que les codes deviennent de plus en plus longs au fil des niveaux. C'est pourquoi nous avons dressé une liste des erreurs fréquemment commises dans chaque niveau, ainsi que leurs solutions.
    levels:
    -   level: '1'
        sections:
        -   title: "Les élèves oublient de taper les commandes"
            example:
                error_text: |
                    Par exemple, ils tapent une phrase sans `{print}`.
                error_code: |
                    Hedy ne peut pas afficher ça.
                solution_text: |
                    Apprenez à vos élèves à toujours commencer une ligne par une commande.
                solution_code: |
                    imprimer Hedy peut imprimer ceci !
        -   title: "Les élèves utilisent des majuscules lorsqu'ils tapent des commandes"
            example:
                error_text: |
                    Les commandes ne fonctionneront pas si elles sont en majuscules.
                error_code: |
                    Demander Pourquoi mon code échoue-t-il ?
                    Imprime Parce que j'utilise des majuscules.
                solution_text: |
                    Enlevez les majuscules.
                solution_code: |
                    {ask} Pourquoi mon code marche-t-il ?
                    {print} Parce que j'ai enlevé les majuscules !
        -   title: "Les élèves utilisent echo sans ask"
            example:
                error_text: |
                    Echo est fait pour répéter une réponse après une commande ask. Sans ask, echo ne fera rien.
                error_code: |
                    echo Ton nom est
                solution_text: |
                    Ajoutes une commande ask pour que cela fonctionne.
                solution_code: |
                    demander Quel est ton nom ? 
                    echo Ton nom est
        -   title: "Les élèves veulent que leur mot echo (variable) se place au milieu de la phrase"
            example:
                error_text: |
                    Et ils ont raison ! Ils apprendront à utiliser les bonnes variables au niveau suivant.
                error_code: |
                    ask Quel langage de programmation est le plus amusant ? 
                    echo est le meilleur !
                solution_text: |
                    Au niveau 1, on doit s'en tenir à ça :
                solution_code: |
                    ask Quel langage de programmation est le plus amusant ? 
                    echo Le meilleur est...
        -   title: "Tortue : Les élèves font sortir la tortue de l'écran"
            example:
                error_text: |
                    Souvent, les élèves aiment essayer de grands nombres lorsqu’ils utilisent la tortue, ce qui fait que la flèche sort de l’écran.
                error_code: |
                    forward 300
                    turn 90
                solution_text: |
                    Dans l'exemple, les élèves ont tendance à penser que la commande de rotation ne fonctionne pas. Elle fonctionne bien, mais en dehors de l'écran. Utilisez des chiffres plus petits pour éviter que cela ne se produise.
                solution_code: |
                    forward 100 
                    turn 90
        -   title: "Tortue : les élèves utilisent la commande backward, mais celle-ci n'existe pas"
            example:
                error_text: |
                    Backward n'est pas une commande.
                error_code: |
                    backward 100
                solution_text: |
                    Pour faire reculer la tortue, utilises la commande forward et un nombre négatif. Par exemple :
                solution_code: |
                    forward -100
    -   level: '2'
        sections:
        -   title: "Les élèves font des fautes de frappe dans leurs commandes"
            example:
                error_text: |
                    Hedy ne peut pas reconnaître une commande avec une faute de frappe.
                error_code: |
                    prinnt Ne fait pas de fautes de frappe !
                solution_text: |
                    Apprends à tes élèves à lire les messages d'erreur. Ils pourront ainsi savoir d'eux-mêmes ce qui n'a pas fonctionné.
                solution_code: |
                    print Ne fait pas de fautes de frappe !
        -   title: "Les élèves oublient que la commande ask a changé"
            example:
                error_text: |
                    Dans ce niveau, les élèves apprennent les variables. La commande ask nécessite elle aussi une variable, mais les élèves l'oublient.
                error_code: |
                    ask que veux-tu manger ?
                solution_text: |
                    Dans ce niveau, tu doit dire à Hedy où enregistrer ta réponse, afin qu’elle puisse être utilisée plus tard. C’est ce qu’on appelle une variable.
                solution_code: |
                    commande is ask Que veux-tu manger ?
        -   title: "Les élèves essaient d'utiliser la commande echo "
            example:
                error_text: |
                    Pour certains élèves, il peut être frustrant d'apprendre que la commande echo ne fonctionne plus. C'est pourquoi il est très important d'expliquer les avantages de l'utilisation des variables. Par exemple, tu peux utiliser plusieurs variables dans un code, et tu peux les placer où tu veux dans une phrase !
                error_code: |
                    reponse is ask Pourquoi echo ne fonctionne plus ? ! 
                    echo
                solution_text: |
                    Utilises une variable à la place.
                solution_code: |
                    reponse is ask Pourquoi echo ne fonctionne plus ? ! 
                    print reponse
        -   title: "Les élèves utilisent une variable comme un mot"
            example:
                error_text: |
                    Dans l'exemple ci-dessous, le mot 'nom' est utilisé comme une variable, mais aussi comme un morceau de texte. La sortie de ce code sera 'Bonjour mon Hedy est Hedy'.
                error_code: |
                    nom is Hedy
                    print Bonjour mon nom is nom
                solution_text: |
                    N'utilises donc pas un mot que tu veux utiliser dans le texte comme nom de variable. Au niveau 4, ce problème est résolu avec les guillemets.
                solution_code: |
                    nom is Hedy
                    print Bonjour je suis nom
        -   title: "Les élèves utilisent des noms de variable longs contenant deux mots."
            example:
                error_text: |
                    Une variable doit être nommée avec un seul mot. Tu peux utiliser un trait de soulignement pour relier deux mots. Ça compte pour un mot.
                error_code: |
                    porte choisie is ask Quelle porte choisis-tu ?
                solution_text: |
                    Ajoutes un trait de soulignement.
                solution_code: |
                    porte_choisie is ask Quelle porte choisis-tu ?
        -   title: "Les élèves peuvent utiliser deux noms différents pour la même variable"
            example:
                error_text: |
                    Dans cet exemple, l’élève a utilisé 'cheval' et 'nom' pour les mêmes variables.
                error_code: |
                    cheval is ask Comme s'appelle ton cheval ?
                    print Ton cheval s’appelle nom
                solution_text: |
                    Vérifies toujours si la variable a le même nom dans tout le code. De légères différences peuvent être difficiles à repérer (par exemple les pluriels) mais elles interfèrent avec le code.
                solution_code: |
                    nom is ask Comment s'appelle ton cheval ?
                    print Ton cheval s'appelle nom
    -   level: '3'
        sections:
        -   title: "Les élèves essaient d'imprimer des listes entières"
            example:
                error_text: |
                    Une liste ne peut pas être imprimée. Tu ne peux imprimer qu'un seul élément de la liste au hasard.
                error_code: |
                    courses is pommes, lait, chocolat
                    print courses
                solution_text: |
                    Pour imprimer une liste de toutes les courses, il te suffis de les placer après une commande print. Sinon, tu peux utiliser la liste pour imprimer un élément avec at random.
                solution_code: |
                    print pommes, lait, chocolat

                    or

                    courses is pommes, lait, chocolat
                    print courses at random
        -   title: "Le élèves utilises le nom d'une variable ou d'une liste comme du texte normal"
            example:
                error_text: |
                    Ce problème est probablement survenu au niveau 2 aussi. Ça peut aussi arriver avec les listes.
                error_code: |
                    nom is Hedy
                    print Bonjour mon nom est nom

                    or

                    animal is rhino, abeille, cygne
                    print Le meilleur animal est... animal at random
                solution_text: |
                    N'utilises pas les noms des variables ou des listes dans du texte normal à imprimer. Au niveau 4, ce problème est résolu avec des guillemets.
                solution_code: |
                    nom is Hedy
                    print Bonjour je suis nom

                    or

                    animaux is rhino, abeille, cygne
                    print Le meilleur animal est... animaux at random
        -   title: "Les élèves oublient at random"
            example:
                error_text: |
                    Comme dans l'exemple
                error_code: |
                    oiseaux is moineau, mouette, rouge-gorge
                    print oiseaux random
                solution_text: |
                    Ce problème est résolu en ajoutant le mot at.
                solution_code: |
                    oiseaux is moineau, mouette, rouge-gorge
                    print oiseaux at random
        -   title: "Les élèves oublient d'utiliser la commande print alors qu'ils utilisent la commande at random"
            example:
                error_text: |
                    Ou ils vont parfois mettre at random au début de la ligne.
                error_code: |
                    fruit is pomme, cerise, banane
                    fruit at random
                solution_text: |
                    Insistes auprès de tes élèves sur le fait que tu as toujours besoin d'un print pour imprimer un texte.
                solution_code: |
                    fruit is pomme, cerise, banane
                    print fruit at random
        -   title: "Les élèves oublient d'utiliser les virgules dans leurs listes"
            example:
                error_text: |
                    Dans une liste, les éléments sont séparés par une virgule.
                error_code: |
                    pizzas is funghi tonno quattro stagioni
                    print pizzas at random
                solution_text: |
                    Après chaque élément de ta liste, il doit y avoir une virgule.
                solution_code: |
                    pizzas is funghi, tonno, quattro stagioni
                    print pizzas at random
        -   title: "Les élèves essaient d'utiliser at random sans liste"
            example:
                error_text: |
                    Par exemple
                error_code: |
                    clubs is Manchester United
                    print clubs at random
                solution_text: |
                    Hedy ne peut pas imprimer quelque chose au hasard, car la variable n'est pas une liste.
                solution_code: |
                    clubs is Manchester United, Bayrn Munchen, FC Barcelona
                    print clubs at random
        -   title: "Les élèves essaient d'utiliser la commande add/remove sans liste. "
            example:
                error_text: |
                    Dans l'exemple ci-dessous, 'noms' n'est pas une liste, mais une variable. Tu ne peux rien y ajouter.
                error_code: |
                    noms is Jake
                    ton_nom is ask Qui es-tu ?
                    add ton_nom to noms
                    print noms at random
                solution_text: |
                    Il faut d'abord qu'il y ait une liste, tu dois donc ajouter un deuxième nom pour transformer noms en liste, par exemple Amy. Si tu ne veux pas d'Amy dans ta liste, tu peux utiliser remove pour l'enlever après.
                solution_code: |
                    noms is Jake, Amy
                    ton_nom is ask Qui es-tu ?
                    add ton_nom to noms
                    print noms at random
        -   title: "Les élèves oublient d'utiliser to/from avec add/remove"
            example:
                error_text: |
                    Sans to/from, la commande add/remove ne fonctionnera pas.
                error_code: |
                    aventures is histoire, perroquet, dés
                    choix is Quelle aventure préfères-tu ?
                    add choix
                    remove dés
                    print J'aime aventures at random
                solution_text: |
                    Hedy doit savoir à quelle liste l'élément doit être ajouté/supprimé.
                solution_code: |
                    aventures is histoire, perroquet, dés
                    choix is Quelle aventure préfères-tu ?
                    add choix to aventures
                    remove dés from aventures
                    print J'aime aventures at random
    -   level: '4'
        sections:
        -   title: "Les élèves oublient d'utiliser les guillemets des deux côtés du texte"
            example:
                error_text: |
                    Dans ce niveau, print et ask ont besoin d'un ensemble de guillemets. Un avant le texte et un après.
                error_code: |
                    print Bonjour
                    humeur is ask 'Comment vas-tu ?
                solution_text: |
                    Ajoutes les bons guillemets.
                solution_code: |
                    print 'Bonjour'
                    humeur is ask 'Comment vas-tu ?'
        -   title: "Les élèves utilisent les mauvais guillemets"
            example:
                error_text: |
                    Il est important de commencer ta leçon en vérifiant si les élèves savent comment taper correctement un guillemet. Sinon, ils risquent d'utiliser les "doubles guillemets" ou les guillemets obliques `.
                error_code: |
                    print `Bienvenue au restaurant`
                    commande is ask "Que veux-tu commander ?"
                solution_text: |
                    Voici les bons guillemets :
                solution_code: |
                    print 'Bienvenue au restaurant'
                    commande is ask 'Que veux-tu commander ?'
        -   title: "Les élèves utilisent une apostrophe dans leur texte"
            example:
                error_text: |
                    À partir de ce niveau, les apostrophes ne sont plus autorisées. Elles sont souvent utilisées en Français lors de la rédaction de contractions comme n'es, j'aime ou l'orage.
                error_code: |
                    print 'Tu n'es pas autorisé à écrire ça'
                solution_text: |
                    Tu peux choisir d'utiliser la mauvaise grammaire et laisser l'apostrophe de côté. Ou tu peux utiliser le ` comme une apostrophe.
                solution_code: |
                    print 'T es autorisé à écrire ça'
                    print 'Et ça, c`est aussi possible'
    -   level: '5'
        sections:
        -   title: "Les élèves oublient d'utiliser print dans une commande if"
            example:
                error_text: |
                    Après avoir utilisé if ou else, les élèves oublient d'utiliser une deuxième commande comme print ou ask.
                error_code: |
                    if nom is Hedy 'Super !'
                    else 'Hedy est mieux !'
                solution_text: |
                    Corriges le problème en ajoutant la commande print.
                solution_code: |
                    if nom is Hedy print 'Super !'
                    else print 'Hedy est mieux !'
        -   title: "Les élèves peuvent utiliser deux noms différents pour la même variable"
            example:
                error_text: |
                    Dans cet exemple, l'élève a utilisé 'cheval' et 'nom' pour les mêmes variables.
                error_code: |
                    cheval is ask 'Comment s appelle ton cheval ?'
                    if nom is Bonfire print 'cool'
                    else print 'moins cool !'
                solution_text: |
                    Vérifies toujours si la variable a le même nom dans tout le code. De légères différences peuvent être difficiles à repérer (par exemple les pluriels) mais elles interfèrent avec le code.
                solution_code: |
                    cheval is ask 'Comment s appelle ton cheval ? '
                    if cheval is Bonfire print 'cool !'
                    else print 'moins cool !'
        -   title: "Les élèves oublient encore les guillemets des deux côtés"
            example:
                error_text: |
                    Les codes utilisant la commande `if` peuvent devenir très longs et les étudiants ont tendance à oublier d'utiliser les guillemets.
                error_code: |
                    if nom is Hedy print fun
                    else print 'beurk !
                solution_text: |
                    Utilises toujours 2 guillemets avec la commande print.
                solution_code: |
                    if nom is Hedy print 'fun'
                    else print 'beurk !'
        -   title: "Les élèves utilisent des guillemets autour des noms de variables"
            example:
                error_text: |
                    Dans ce niveau, il n’y a pas de guillemets autour des noms de variables.
                error_code: |
                    if 'nom' is 'Hedy' print 'fun'
                    else print 'beurk !'
                solution_text: |
                    Enlèves les guillemets pour que le code fonctionne.
                solution_code: |
                    if nom is Hedy print 'fun'
                    else print 'beurk !
        -   title: "Les élèves utilisent des noms de variable longs contenant 2 mots"
            example:
                error_text: |
                    Une variable doit être nommée avec un seul mot. Tu peux utiliser un trait de soulignement pour relier deux mots. Ça compte pour un mot.
                error_code: |
                    porte choisie is ask 'Quelle porte choisis-tu ?'
                solution_text: |
                    Ajoutez un trait de soulignement.
                solution_code: |
                    porte_choisie is ask 'quelle porte choisis-tu ?'
        -   title: "Les élèves veulent que plusieurs réponses soient correctes"
            example:
                error_text: |
                    Dans cet exemple, l'élève veux qu'Hedy dise que tous ses amis sont drôles, mais aucun ne le sera.
                error_code: |
                    if nom is Jesse, David, Souf print 'Tu es drôle' else print 'Tu n es pas drôle'
                solution_text: |
                    Tu peux utiliser la commande `in` pour résoudre ce problème. Elle est expliquée dans un niveau supérieur, mais elle fonctionne déjà au niveau 5.
                    Une autre solution consiste à utiliser plusieurs commandes if sans commande else. Le programme ne dira pas que les autre personnes ne sont pas drôle par contre.
                solution_code: |
                    amis is Jesse, David, Souf
                    nom is ask 'Qui es-tu ?'
                    if nom in amis print 'Tu es drôle'
                    else print 'Tu n es pas drôle'

                    ou

                    nom is ask 'Qui es-tu?'
                    if nom is Jesse print 'Tu es drôle'
                    if nom is David print 'Tu es drôle'
                    if nom is Souf print 'Tu es drôle'
        -   title: "Les élèves utilisent un nom de variable identique à la valeur comparée dans l'instruction if"
            example:
                error_text: |
                    Dans l'exemple ci-dessous, la variable mot_de_passe est comparée à elle-même, le résultat de la comparaison sera donc toujours vrai.
                error_code: |
                    mot_de_passe is ask 'Quel est le mot de passe?'
                    if mot_de_passe is mot_de_passe print 'Accès autorisé'
                    else print Accès refusé !'
                solution_text: |
                    Choisis un nom different pour ta variable.
                solution_code: |
                    mot_de_passe_secret is ask 'Quel est le mot de passe ?'
                    if mot_de_passe_secret is mot_de_passe print 'Accès accordé !'
                    else print 'Accès refusé !'
    -   level: '6'
        sections:
        -   title: Les élèves ont du mal avec les guillemets
            example:
                error_text: "Certains élèves ont des difficultés à ajouter ou non des guillemets. Si tu ajoutes des guillemets, l'écran de sortie affichera littéralement '5+5'.\n"
                error_code: "print '5 + 5'\n"
                solution_text: "Dans ce code, l'écran de sortie affichera '10'.\n"
                solution_code: "print 5 + 5\n"
        -   title: Les élèves ont du mal avec le concept de faire des mathématiques avec une variable
            example:
                error_code: "age = ask 'Quel age as-tu ?'\nprint 'L année prochaine ton age sera ' age + 1\n"
                error_text: "Certains élèves auront du mal à faire des mathématiques avec des variables. Essayes de leur montrer des exemples très simples, comme :\n"
                solution_text: "Ou un échelon au dessus comme ceci.\n"
                solution_code: "prix = 0 \nprint 'Bienvenue dans le restaurant de hamburgers' \nburger = ask 'Veux-tu un burger ?' \nif burger = oui prix = prix + 10 \nboisson = ask 'Veux-tu une boisson ?' \nif boisson = oui prix = prix + 4 \nprint 'Ce sera ' prix ' s il te plaît'\n"
    -   level: '7'
        sections:
        -   title: Les élèves oublient l’un des mots de la commande repeat ou oublient la commande print
            example:
                error_text: "Assures-toi que tes élèves savent utiliser la commande repeat complète et la commande print.\n"
                error_code: "repeat 3 times 'Car c`est un bon camarade'\nrepeat 3 print 'personne ne dira le contraire !'\n"
                solution_text: "Voici le code correct :\n"
                solution_code: "repeat 3 times print 'Car c`est un bon camarade'\nrepeat 3 times print 'personne ne dira le contraire !'\n"
        -   title: Les élèves essaient de répéter plusieurs lignes
            example:
                error_code: "repeat 3 times boisson = ask 'Que veux-tu boire ?'\nprint boisson\n"
                solution_text: "Tu dois passer au niveau suivant pour pouvoir répéter plusieurs lignes de code. À ce niveau, tu dois tout imprimer séparément.\n"
                solution_code: "boisson = ask 'Que veux-tu boire ?'\nprint boisson\nboisson = ask 'Que veux-tu boire ?'\nprint boisson\nboisson = ask 'Que veux-tu boire ?'\nprint boisson\n"
                error_text: "Dans ce niveau, tu ne peux seulement répéter qu'une ligne de code plusieurs fois. Dans ce code, l'élève voulait imprimer 3 boissons différentes, mais cela ne fonctionnera pas. Hedy posera la question 3 fois et n'imprimera que la dernière réponse.\n"
        -   title: Les élèves créent des programmes qui prennent trop de temps à s'exécuter
            example:
                error_text: "Dans ce niveau, il est très facile de créer des programmes à temps d’exécution long. Les élèves sont restreints à faire des programmes à temps d’exécution court (pour ménager nos serveurs).\n"
                error_code: "repeat 100 times print 'Ou est la limite de répétition ?'\n"
                solution_text: "Assures toi que les programmes ne prennent pas trop de temps\n"
                solution_code: "repeat 20 times print 'C`est suffisant'\n"
    -   sections:
        -   example:
                error_code: "repeat 3 times\nprint 'bonjour'\n"
                error_text: "L’indentation est un nouveau concept à ce niveau, difficile à utiliser pour certains élèves. Fais les s'exercer sur des bouts de code simples avant de passer sur un programme complet.\n"
                solution_text: "Voici le code correct :\n"
                solution_code: "repeat 3 times\n    print 'bonjour'\n"
            title: Les élèves utilisent mal l’indentation
        -   title: Students only repeat 1 line when they wanted to repeat multiple lines
            example:
                solution_text: "In the correct code the third line starts with indentation too. This way it belongs to the repeat block and therefore it will be repeated 3 times.\nShowing your students these differences can help them understand why we need indentation to make our programs work.\n"
                solution_code: "repeat 3 times\n    drink = ask 'What would you like to drink?'\n    print drink\n"
                error_text: "For instance, in the code below the student wanted to take the drinks order of 3 people. But insted the program asked 3 times, but only wrote down one order.\n"
                error_code: "repeat 3 times\n    drink = ask 'What would you like to drink?'\nprint drink\n"
        -   title: Students want to nest if statements, or put if statements inside a loop
            example:
                error_text: "In this level students aren't allowed yet to put if statements inside other if statements or inside repeat loops.\nIn the next level this is allowed.\n"
                error_code: "birthday = ask 'Is it you birthday?'\nif birthday = yes\n    repeat 3 times\n        print 'Hip Hip Hooray!'\n"
                solution_text: "This is the correct code for this level:\n"
                solution_code: "birthday = ask 'Is it you birthday?'\nif birthday = yes\n    print 'Hip Hip Hooray!'\n    print 'Hip Hip Hooray!'\n    print 'Hip Hip Hooray!'\n"
        -   title: Students make programs that take too long to run
            example:
                error_text: "In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).\n"
                error_code: "repeat 100 times\n    print 'How many times can I repeat this?'\n"
                solution_text: "Make sure the codes aren't too long\n"
                solution_code: "repeat 20 times\n    print 'This is enough'\n"
        -   example:
                solution_text: "You can fix this mistake by adding quotation marks. This way the computer knows that the second password in `if password is 'password'` is a string value (so normal text) and not the variable name.\n"
                solution_code: "password is ask 'What is the password?'\nif password is 'password'\n    print 'You can come in'\nelse\n    print 'You are not allowed'\n"
                error_text: "We have seen this mistake by some of our students. They make a password for their computer, but they make the password 'password'.\nIn line 2 the computer is asked to check wheter the variable password is the same as the variable password, so itself. Which means the answer is alway yes.\nSo with this code the answer will always be 'You can come in' no matter what the player fills in.\n"
                error_code: "password is ask 'What is the password?'\nif password is password\n    print 'You can come in'\nelse\n    print 'You are not allowed'\n"
            title: Students use the if command to check if the variable value is the same as the variable name
        level: '8'
    -   sections:
        -   title: Students make mistakes with indentation
            example:
                error_text: "The hardest part about this level is getting the indentation right. Students love nesting if statements, sometimes even inside other nested if statements. Keeping track of indentation can get pretty tough.\n"
                error_code: "print 'Robin is walking downtown'\nlocation = ask 'Is Robin going into a shop, or does she go home?'\nif location is shop\n    print 'She enters the shop.'\n    print 'Robin sees an interesting looking book'\n    book = ask 'Does Robin buy the book?'\n        if book is yes\nprint 'Robin buys the book and goes home'\nelse\n    print 'Robin leaves the shop and goes home'\nelse\n    print 'Robin goes home'\n"
                solution_text: "This is the correct code. Try to keep track of all the different constructions when putting if statements inside other if statements.\n"
                solution_code: "print 'Robin is walking downtown'\nlocation = ask 'Is Robin going into a shop, or does she go home?'\nif location is shop\n    print 'She enters the shop.'\n    print 'Robin sees an interesting looking book'\n    book = ask 'Does Robin buy the book?'\n    if book is yes\n        print 'Robin buys the book and goes home'\n    else\n        print 'Robin leaves the shop and goes home'\nelse\n    print 'Robin goes home'\n"
        level: '9'
    -   sections:
        -   title: Students so not use the for command correctly
            example:
                error_text: "We often see that students try to print the list (in the example animals) instead of the items of the list.\n"
                error_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animals\n"
                solution_text: "The word animals in the last line should be changed into animal.\n"
                solution_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animal\n"
        -   example:
                solution_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animal\n"
                error_text: "Students tend to forget to use indentation after a for command.\n"
                error_code: "animals is dog, cat, blobfish\nfor animal in animals\nprint 'I love ' animals\n"
                solution_text: "You should use indentation after a for command.\n"
            title: Students forget the indentation
        level: '10'
    -   level: '11'
        sections:
        -   title: Students forget to use indentation
            example:
                error_text: "Make sure that the students use indentation.\n"
                error_code: "for i in range 1 to 5\nprint i\n"
                solution_text: "This is the correct code:\n"
                solution_code: "for i in range 1 to 5\n    print i\n"
        -   title: Students don't understand the i
            example:
                error_text: "Some students don't understand that i is a variable. i is chosen, because it is used in Python programming, but you could just as easily use a different variable name.\nFor example, this code:\n"
                error_code: "for i in range 1 to 5\nprint i\n"
                solution_text: "Could just as well be replaced with this code. It works the same.\n"
                solution_code: "for banana in range 1 to 5\n    print banana\n"
    -   sections:
        -   example:
                error_text: "Students need more quotation marks now than in the previous levels. In this example quotation marks were forgotten in the list and in the if command.\n"
                solution_text: "This is the correct code:\n"
                error_code: "superheroes = Spiderman, Batman, Iron Man\nsuperhero = superheroes at random\nif superhero = Batman\n    print 'IM BATMAN!'\n"
                solution_code: "superheroes = 'Spiderman', 'Batman', 'Iron Man'\nsuperhero = superheroes at random\nif superhero is 'Batman'\n    print 'IM BATMAN!'\n"
            title: Students forget quotation marks
        -   title: Students use quotation marks on numbers they want to use for calculations
            example:
                error_text: "You can use quotation marks on numbers, but only if you want the computer to think of them as text. This means you can't do calculations with the number.\nIn the example below, you can't do maths with the number 25, because it's in quotation marks.\n"
                error_code: "score = '25'\nanswer is ask 'Do you want a point?'\nif answer is 'yes'\n    score = score + 1\n    print score\n"
                solution_text: "This is the correct code:\n"
                solution_code: "score = 25\nanswer is ask 'Do you want a point?'\nif answer is 'yes'\n    score = score + 1\n    print score\n"
        -   title: Students use commas instead of periods in decimal numbers
            example:
                error_text: "Decimal numbers can be used from this level on, but you can't use commas.\n"
                error_code: "print 2,5 + 2,5\n"
                solution_text: "This is the correct code:\n"
                solution_code: "print 2.5 + 2.5\n"
        level: '12'
    -   level: '13'
        sections:
        -   title: Students confuse `and` with `or`
            example:
                error_text: "Both commands might appear similar, but their functions are very different.\n"
                error_code: "game is ask 'Do you want to play a game?'\ntime is ask 'Do you have time to play?'\nif game is 'yes' or time is 'yes'\n    print 'Lets play!'\n"
                solution_text: "In this case, the person should answer yes on both questions, so you should use `and`.\n"
                solution_code: "game is ask 'Do you want to play a game?'\ntime is ask 'Do you have time to play?'\nif game is 'yes' and time is 'yes'\n    print 'Lets play!'\n"
    -   level: '14'
        sections:
        -   title: Students confuse the < and > signs
            example:
                error_text: "Often, students are already familiar with these signs from maths class. But if your students don't know these signs yet, they might have a challenge with it.\n"
                error_code: "age = ask 'How old are you?'\nif age < 12\n    print 'You are older than I am!'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "age = ask 'How old are you?'\nif age > 12\n    print 'You are older than I am!'\n"
        -   title: Students use the wrong signs for `!=` `<=` and `>=`
            example:
                error_text: "These signs are probably new for most students. Make sure to explain these signs to your students.\n"
                error_code: "name = ask 'What is your name?'\nif name =< 'Hedy'\n    print 'You are not Hedy'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "name = ask 'What is your name?'\nif name != 'Hedy'\n    print 'You are not Hedy'\n"
        -   title: Students forget to use the == sign
            example:
                error_text: "In this level, students are still allowed to use = or is. But on other levels, or in python, they might get in trouble for that. So it is best to train them to use it.\n"
                error_code: "name = ask 'What is your name?'\nif name = 'Hedy'\n    print 'You are cool!'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "name = ask 'What is your name?'\nif name == 'Hedy'\n    print 'You are cool!'\n"
    -   level: '15'
        sections:
        -   title: Students forget indentation in the while loop
            example:
                error_text: "Indentation is often hard for students.\n"
                error_code: "answer = 0\nwhile answer != 25\nanswer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "answer = 0\nwhile answer != 25\n    answer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n"
    -   level: '16'
        sections:
        -   title: Students forget the brackets
            example:
                error_text: "From this level on lists should be in brackets.\n"
                error_code: "icecream = 'starwberry', 'chocolate'\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   title: Students use the wrong brackets
            example:
                error_text: "From this level on lists should be in brackets.\n"
                error_code: "icecream = ('starwberry', 'chocolate'}\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   example:
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream[random] ' icecream'\n"
            title: Students forget the quotation marks while focussing on the brackets
        -   title: Students still use the old at random command
            example:
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream at random ' icecream'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
    -   level: '17'
        sections:
        -   title: Students use elif like else, so without a condition
            example:
                error_text: "The elif command needs a condition behind it. It cannot be used like else, without a condition.\n"
                error_code: "color = ask 'What is your favorite color?'\nif color == 'green':\n    print 'green is nice'\nelif:\n    print 'I like green'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "color = ask 'What is your favorite color?'\nif color == 'green':\n    print 'green is nice'\nelif color == yellow:\n    print 'yellow is alright'\nelse:\n    print 'I like green'\n"
        -   title: Students forget the colon
            example:
                error_text: "After each command that requires indentation, a colon should be used.\n"
                error_code: "answer = ask 'How are you doing?'\nif answer is 'great'\n    print 'Me too!'\nelif answer is 'bad'\n    print 'Let me cheer you up!'\nelse\n    print 'Im great!'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "answer = ask 'How are you doing?'\nif answer is 'great':\n    print 'Me too!'\nelif answer is 'bad':\n    print 'Let me cheer you up!'\nelse:\n    print 'Im great!'\n"
    -   level: '18'
        sections:
        -   title: Students forget to use the brackets
            example:
                error_text: "Students will forget to put brackets around their text.\n"
                error_code: "print 'my name is Hedy!'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "print('my name is Hedy!')\n"
        -   title: Students will still use the ask command
            example:
                error_text: "The ask command has been used since level 1. So it might be hard for the students to switch to input instead of ask.\n"
                error_code: "print('My name is Hedy!')\nname = ask('What is your name?')\nprint('So your name is ', name)\n"
                solution_text: "This is the correct code:\n"
                solution_code: "print('My name is Hedy!')\nname = input('What is your name?')\nprint('So your name is ', name)\n"
        -   title: Students might use the brackets as quotation marks
            example:
                error_text: "They have learned to keep the variables outside of the quotation marks, so they might do the same with the brackets. Which is not the correct way to use them.\n"
                error_code: "temperature = 25\nprint('It is ') temperature ('degrees outside')\n"
                solution_text: "This is the correct code:\n"
                solution_code: "temperature = 25\nprint('It is ', temperature, 'degrees outside')\n"
learn-more-sections:
-   title: "Appréciez vous Hedy ?"
    text: |
        Nous aimerions en apprendre plus sur votre expérience !
        [Cliquez ici pour nous envoyer un message](mailto :hello@hedy.org "About Hedy")
-   title: "Vous avez trouvé une erreur ?"
    text: |
        [Remontez-la sur GitHub](https://github.com/Felienne/hedy/issues/new/choose)
-   title: "Semaine européenne du code 2020"
    text: |
        Vous voulez en savoir plus sur Hedy ? Consultez cette conférence que Felienne a donnée à la Semaine européenne du code 2020 :

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/R2U9MEowYag?wmode=opaque" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
-   title: "Article scientifique sur Hedy"
    text: |
        Vous voulez en savoir encore plus ? Lisez [l'article de recherche](https://www.felienne.com/wp-content/uploads/2020/07/Hedy_paper_website_draft.pdf) sur la conception d'Hedy.
start-sections:
-   title: "Qu’est-ce qu’un langage de programmation progressif ?"
    text: |
        Apprendre à programmer peut être difficile. Non pas que programmer *est* difficile en soit ! Mais il y a beaucoup de règles à mémoriser, comme quand on apprend le français. 
        De la même manière que quand on apprend à lire ou à écrire, tu auras besoin de beaucoup d’entraînement pour apprendre à programmer.

        Aujourd'hui, tu peux lire ce texte facilement. Mais te souviens-tu de quand tu as appris à lire ? Au début ça te prenait un peu de temps de lire syllabe par syllabe ! 
        C’est vrai pour la programmation aussi : ça peut être difficile au début, mais ça devient de plus en plus facile !

        Le bon côté de Hedy, c’est qu’il est *progressif*. Ça veut dire que tu ne dois pas apprendre toutes les règles en même temps. 
        Les premiers niveaux n’ont que quelques règles, ce qui te permet de t’y habituer tranquillement.
        À chaque nouveau niveau, nous introduisons de nouvelles règles, nous ajoutons de nouvelles commandes à celle que tu as déjà apprises. Ces commandes sont des instructions pour l’ordinateur.
-   title: "Pourquoi Hedy est progressif ?"
    text: |
        Felienne, la créatrice de Hedy, explique dans cette vidéo (en anglais) pourquoi Hedy est progressif.

        <iframe width="560" height="315" class="mx-auto mt-4" src="https ://www.youtube.com/embed/EdqT313rM40" frameborder="0" allow="accelerometer ; autoplay ; encrypted-media ; gyroscope ; picture-in-picture" allowfullscreen></iframe>
-   title: "À qui est destiné Hedy ?"
    text: |
        Hedy est destiné à tous les enfants qui veulent apprendre à programmer ! Il suffit de savoir lire le français.
-   title: "Dois-je déjà savoir programmer ?"
    text: |
        Non, ce n'est pas nécessaire. Cependant, si tu as déjà programmé avec Scratch ou Python, certaines commandes te seront familières.
-   title: "Hedy est-il gratuit ?"
    text: |
        Oui ! L’Université de Leiden aux Pays-Bas nous permet de le partager gratuitement. Hedy est aussi 'Open
        source', ce qui signifie que n’importe qui sachant programmer peut nous aider à améliorer Hedy.
        Si vous aimez Hedy, nous aimerions un [don](https ://www.steunleiden.nl/project/hedy ?locale=en) !
-   title: "Que dois-je installer ?"
    text: |-
        Rien. Hedy fonctionne dans le navigateur avec lequel tu lis cette page. Probablement Chrome, Edge, ou Firefox. Hedy fonctionne aussi sur ton smartphone ou ta tablette.
join-sections:
-   text: "# There are three ways in which you can support Hedy!\n"
-   title: Improving the language
    text: "The gradual and multi-lingual nature of Hedy create a lot of interesting technical challenges.\nFind those issues on [Github](https://github.com/Felienne/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage).\n"
-   title: Translating Hedy
    text: "Not a programmer? No problem! Another way to support Hedy is by [translating keywords, error messages, adventures are other content](https://github.com/Felienne/hedy/blob/main/TRANSLATING.md)\n\nThis is the current status, help us complete a language, or add a new one!\n<a href=\"https://hosted.weblate.org/engage/hedy/\">\n<img src=\"https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg\" alt=\"Translation status\" /></a>\n"
-   title: Help teachers get started
    text: "Hedy is designed to support teachers in providing programming lessons in class. We have specific teacher features like the option to create a class, customize it and see how your students are doing.\nIf you like Hedy, you can reach out to schools that you know to help teachers get started! We can help you find schools or teachers via [Discord](https://discord.gg/8yY7dEme9r).\n"
