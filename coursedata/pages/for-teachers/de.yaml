title: "Hedy documentation"
sections:
    - title: "Einführung zu Hedy"
      key: "intro"
      subsections:
        - title: "Was ist Hedy?"
          text: |
            Hedy ist eine textuelle Programmiersprache, die speziell für (Pre-)Teens (10 bis 15 Jahre alt) entwickelt wurde.
            Im Gegensatz zu Programmiersprachen für Kinder, wie Scratch, verwendet Hedy keine Codeblöcke, sondern textuellen Code.
            Mit Hedy lernt man also, Code zu tippen, wie es echte Programmierer tun, aber in kleinen Schritten mit spielerischen Übungen.
            Auf diese Weise kann Hedy als Sprungbrett zu echten Programmiersprachen wie Python dienen, und das auf eine zugängliche und vor allem spaßige Weise!
            Hier können Sie sich ein [Video](https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s) über die Entwicklung von Hedy als Programmiersprache ansehen.
        - title: "Zielgruppe"
          text: |
            Hedy wurde für Schüler der Mittel- und Oberstufe entwickelt (10 – 15 Jahre).
            Es ist wichtig, dass die Schüler gut lesen können.
            Wir empfehlen, erst mit Hedy anzufangen, wenn die Schüler mindestens das Leseniveau der 3. Klasse erreicht haben.
            Schüler (und Lehrer!) brauchen keine Programmiererfahrung, bevor sie mit Hedy beginnen.
        - title: "How does Hedy work?"
          text: |
            <Todo>
        - title: "Lehren mit Hedy"
          text: |
            Hedy ist in Level unterteilt, in denen neue Befehle gelehrt werden. Jedes Level enthält eine Vielzahl von Übungen, um die neu erlernten Befehle zu üben.
            Die Übungen können von den Schülern einzeln durchgeführt werden, oder Sie können sie im klassischen Unterricht verwenden.
            Die Unterrichtspläne für jede Stufe sind in diesem Lehrerhandbuch enthalten.  Die Unterrichtspläne und Übungen werden Schritt für Schritt erklärt, so dass auch die weniger digital versierten Lehrer in der Lage sein sollten, Hedy zu benutzen!
            Natürlich kommt Hedy auch den kreativen Lehrern entgegen, die gerne ihre eigenen Unterrichtspläne und Übungen erstellen!
        - title: "Geräte"
          text: |
            Hedy ist webbasiert, d.h. es funktioniert auf jedem Gerät mit einem Browser (Chrome, Firefox, Edge usw.), so dass Laptops, ChromeBuhks, Tablets und sogar Smartphones geeignet sind, um Hedy zu verwenden.
            Sie müssen nichts herunterladen, bevor Sie mit Hedy arbeiten, gehen Sie einfach auf die Website und schon können Sie loslegen!
    - title: "Vorbereitungen"
      key: "preparations"
      subsections:
        - title: "Programme speichern"
          text: |
            Sobald Sie eingeloggt sind, sehen Sie das blaue Banner mit "Mein Profil" und "Meine Programme".
            In "Meine Programme" finden Sie alle Programme, die Sie gespeichert haben.
            Sie können Ihre Projekte ganz einfach speichern, indem Sie Ihrem Projekt in der weißen Leiste einen Namen geben und die grüne Taste "Programm speichern" drücken.
            Der Programmierspaß kann beginnen!
    - title: "Teaching with Hedy"
      key: "teaching"
      subsections:
        - title: ""
          text: |
            Hedy contains a lot of different levels that each teach a different new skill. We recommend to teach one level per lesson.
            This gives your students the time to fully grasp a new command or concept and practice with it, before moving on to the next level.
            We use this structure in our lessons:
        - title: "Introduction"
          text: |
            You can start your lessons by activating your students' prior knowledge: What do they already know about the subject, what did they learn in the previous lesson and which mistakes did they make that they've now learned from?
            This way all the previously learned commands and frequently made mistakes are fresh in your students' memories, when you strat introducing the new lesson.
        - title: "Introduction of new concepts and commands"
          text: |
            The new concepts and commands can be very hard for some students to fully understand.
            That's why it's of importance to model the proper use of the new commands to your students.
            Especially in the lower levels, where some students have no experience whith programming at all, it can be hard for them to understand the new abstract concepts.
            Showing a lot of examples makes an abstract concept (for instance: 'What is a variable?') more recognizable and easier to understand ('Look, the variable pet changed into dog').
        - title: "Let's get to work"
          text: |
            Each level contains different adventures that you can find in the pink tabs. The first pink tab explains the new commands in this level.
            The following tabs are adventures that the students can try out and make their own.
            The adventures are arranged from easiest to hardest, so we recommend to start on the left and your your way to the right.
            The last tab 'what's next' gives a little teaser of what you'll learn in the next level. Of course, you can select the adventures you want your students to do for each level.
            They don't always have to make every adventure. Every adventure contains an example code, that the students can try out with the green button.
            The example code gets copied to the workfield, where the students can try out the code and adjust it to make it their own.
            Stimulate your students to turn the example codes into their own projects by adding their own ideas and making their own variation of the adventure.
        - title: "Quiz"
          text: |
            To test whether your students have picked up all the new info in the level, you can let them make the quiz.
            The quiz contains 10 multiple choice questions about the new concepts and command to that level.
            Not every level has a quiz yet, as we are still building the quizzes.
        - title: "Evaluation"
          text: |
            Round up your lesson by having a brief evaluation. What did the students learn? Which hardships did they come across?
            How did they learn from their mistakes? And of course: What did they create?
            Students are often very proud of their own creations, so it's nice to save a little time and gove your students the opportunity to show their work to their classmates.
    - title: "Frequently made mistakes"
      key: "common_mistakes"
      intro: |
          You can learn from your mistakes, especially in coding!
          Making mistakes is unavoidable, and a great opportunity to learn, but for teachers it can be a challenge to find the correct fix for a mistake!
          Especially as the codes get longer and longer as the levels progress. That's why we've made a list with frequently made mistakes in each level, and their solutions.
      levels:
        - level: 1
          text: |
            These are the frequently made mistakes by students in level 1:

            - Students forget to type the commands and write a code without starting with `print` for example.
            - Students start the commands with a capital letter, even though all letters should be lowercase.
            - Sometimes students will get error messages from their browser that Hedy doesn't work as it's supposed to. The solution is to refresh the webpage.

            Turtle:
            - Students let their arrow walk out of the screen, and think the code doesn't work. They should use smaller numbers.
            - Students don't know how to let the turtle walk backwards. The turtle can walk backwards by using negative numbers, for example -100.
        - level: 2
          text: |
            These are the frequently made mistakes in level 2:

            - Students make typos in the commands.
            - Students often forget to type the variable when using the ask command (like they were able to do in level 1).
            - Students sometimes tend to forget to type the commands at all, for instance they start their code without typing print first.
            - Students use the command echo, which only works in level 1. In level 2 you can repeat a given answer by using the variable.
            - Students forget to use commas when making a list. For instance, they would make this code:
             `animals is dog cat` instead of `animals is dog, cat`
            - Students tend to use commas after a `print` command, this is not possible.
            E.g. they program: `print Hello, I'm Hedy` instead of `print Hello I'm Hedy`

            - Students use the name of a variable as a word in a print command, this is allowed from level 3 on.

            E.g. They program:

            <pre class="no-copy-button" id="2">
            animals is dog, cat, cow
            print the best animals are…
            print animals at random
            </pre>
            Instead they should change the word animals in the second line into something other than animals. For example:

            <pre class="no-copy-button" id="2">
            animals is dog, cat, cow
            print the best animal is…
            print animals at random
            </pre>
        - level: 3
          text: |
            These are the frequently made mistakes by students in level 3

            - The same mistakes as level 2.
            - Students forget putting the quotation marks on both sides of the text after a print command.
            - Students use the wrong quotation marks. The correct quotation mark is ' you find in next to the enter button on most keyboards. Different quotation marks like the double marks &quot; or the skewed quotation mark ` (found in the left corner with ~) will not work.
            - Students forget to use quotation marks in the `ask` command.
        - level: 4
          text: |
            These are the frequently made mistakes by students in level 4:

            - Mistake: Students put else on the next line, but it should be in the same line as the if command.
            Code:
            <pre class="no-copy-button" id="4">
            if name is Hedy print 'nice'
            else print 'boo!'
            </pre>
            Solution: Else should be in the same line as if.

            <pre class="no-copy-button" id="4">
            if name is Hedy print 'nice' else print 'boo!'
            </pre>
            - Mistake: Students use apostrophes after a print command.
            <pre class="no-copy-button" id="4">
            print 'I'm Hedy'
            </pre>
            Solution: Don't use apostrophes.
            <pre class="no-copy-button" id="4">
            print 'Im Hedy'
            </pre>
            - Mistake: Students forget to use the print command when using an if command.
            <pre class="no-copy-button" id="4">
            if name is Hedy 'nice' else 'boo!'
            </pre>
            Solution: Use print twice when using both if and else.
            <pre class="no-copy-button" id="4">
            if name is Hedy print 'nice' else print 'boo!'
            </pre>

            - Mistake: Students use different names for the same variable.
            <pre class="no-copy-button" id="4">
            horse is ask What is your horse called?
            if me is Bonfire print 'nice' else print 'boo!'
            </pre>

            Solution: Always use the same name for your variable (also check whether the variable name is singular or plural (answer/answers)).
            <pre class="no-copy-button" id="4">
            horse is ask what is your horse called?
            if horse is Bonfire print 'nice' else print 'boo!'
            </pre>

            - Mistake: Students forget to type both of the quotation marks after print, when using if and else.
            <pre class="no-copy-button" id="4">
            if name is Hedy print nice else print 'boo!
            </pre>
            Solution: Always use two quotation marks (both in front of and behind the text) for each print command in your code.
            <pre class="no-copy-button" id="4">
            if name is Hedy print 'nice' else print 'boo!'
            </pre>

            - Mistake: Students use quotation marks around a variable.
            <pre class="no-copy-button" id="4">
            if 'name' is 'Hedy' print 'nice' else print 'boo!'
            </pre>
            Solution: Don't use quotation marks around a variable.
            <pre class="no-copy-button" id="4">
            if name is Hedy print 'nice' else print 'boo!'
            </pre>

            - Mistake: Students give names to variables that consist of multiple words.
            <pre class="no-copy-button" id="4">
            Chosen door is ask Which door do you choose?
            </pre>
            Solution: A variable name should always just be one word.
            <pre class="no-copy-button" id="4">
            chosendoor is ask Which door do you choose?
            </pre>

            - Mistake: Students want multiple answers to be correct, when using if.
            <pre class="no-copy-button" id="4">
            if name is Jesse, David, Souf print 'you are funny' else print 'you are not funny'
            </pre>
            Solution: Unfortunately, this is not allowed. You can only pick one name for each if command. On the other hand, you can use multiple if commands in one code, like the example beneath:
            <pre class="no-copy-button" id="4">
            name is ask What is your name?

            if name is Jesse print 'you are funny'

            if name is David print 'you are funny'

            if name is Souf print 'you are funny'
            </pre>
            - Mistake: Students give the same answer in ask as the variable name. For example this student made the password 'password'.
            <pre class="no-copy-button" id="4">
            password is ask What is the secret password?
            If password is password print 'You can enter!' else print 'Access denied!'
            </pre>
            Solution: Choose a different name for the variable.
            <pre class="no-copy-button" id="4">
            secretpassword is ask What is the secret password?
            If secretpassword is password print 'You can enter!' else print 'Access denied!'
            </pre>
        - level: 5
          text: |
            These are the frequently made mistakes by students in level 5:

            - The same mistakes as in level 4 (see level 4)
            - Students tend to forget words in this command: repeat 3 times print. Especially the words print or times are easily forgotten.