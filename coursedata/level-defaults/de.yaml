1:
    intro_text: |
        ## Willkommen bei Hedy!
        In Level 1 kannst du die Befehle `print`, `ask` und `echo` verwenden.
        Tippe den Code in das Programmierfeld. Oder drücke den grünen Knopf beim Beispielcode um ihn in dein Programm zu übernehmen!
        Probiere den Code selbst mit der grünen Schaltfläche 'Code ausführen' unter dem linken Programmierfeld aus.

        Du kannst Text auf dem Bildschirm ausgeben lassen indem du den Befehl `{print}` verwendest.
    start_code: "print Hallo Welt!"
    example_code: "## Hedy Beispiel-Code\n```\n{print} Hallo!\n{print} Willkommen bei Hedy!\n```\n"
    intro_text_2: "Du kannst auch nach Eingaben fragen und sie dir zurückgeben lassen, mit dem Befehl `{echo}`.\n"
    example_code_2: "## Hedy Beispiel-Code\n```\n{ask} Wie heißt du?\n{echo} Hallo\n```\n"
    intro_text_3: "Lass uns loslegen! Weißt du nicht was du programmieren sollst? In den nächsten Tabs warten Ideen für Programme auf dich.\n"
2:
    intro_text: |
        ## Variablen
        In Level 2 lernen wir zwei neue Befehle: `{is}`und `{sleep}`.
        Du kannst ein Wort mit `is` benennen. Das nennt man eine Variable. In diesem Beispiel machen wir eine Variable die sich Name nennt, und eine Variable die sich Alter nennt. Du kannst das Wort Name irgendwo in deinem Code verwenden und es wird dann durch Hedy ersetzt, und zwar so:

        Deswegen benötigst du den Befehl `echo` nicht mehr!
    start_code: "print Hallo Welt!"
    example_code: "## Example code\n```\nName {is} Hedy\nAlter {is} 15\n{print} Name ist Alter Jahre alt\n```\n"
    intro_text_2: "`{print}` funktioniert genauso wie vorher, aber der Befehl `{ask}` hat sich verändert. Du brauchst jetzt auch für den Befehl `{ask}` eine Variable. Das sieht so aus:\n"
    example_code_2: "```\nAntwort {is} {ask} Wie heißt du?\n{print} Hallo Antwort\n```\n"
    intro_text_3: "Ein weiterer neuer Befehl in diesem Level ist `{sleep}`, was das Programm für eine Sekunde anhält. Wenn du hinter {sleep} eine Zahl tippst, wartet das Programm so viele Sekunden.\n"
    example_code_3: "```\n{print} Meine Lieblingsfarbe ist...\n{sleep} 2\n{print} grün!\n```\n"
3:
    intro_text: |
        ## Erstelle eine Liste!
        In Level 3 kannst Du eine Liste erstellen. Du kannst den Computer etwas zufällig aus der Liste auswählen lassen. Du machst dies mit `at random` (es bedeutet zufällig und man spricht es "ät rän-dum" aus).
    start_code: "print Hallo Welt!"
    example_code: "## Hedy Beispiel-Code\n\n```\nTiere {is} Hund, Katze, Känguru\n{print} Tiere {at} {random}\n```\n"
    intro_text_2: Du kannst auch Elemente der Liste mit `{add}` hinzufügen und Elemente mit`{remove}` entfernen.
    example_code_2: "## Hedy Beispiel-Code\n\n```\nTiere {is} Hund, Katze, Känguru\n{add} Pinguin {to_list} Tiere\n{remove} Katze {from} Tiere\n{print} Tiere {at} {random}\n```\n"
4:
    start_code: "print 'Hallo Welt'"
    intro_text: |
        ## 'Anführungszeichen'
        In Level 4 haben sich `print` und `ask` geändert.

        Du musst Text, den du genau so mit `print` ausgeben möchtest, in Anführungszeichen setzen.

        Das ist nützlich, denn nun kannst du alle Wörter ausgeben, die du möchtest. Auch die Wörter, mit denen du etwas mit `is` gespeichert hast.

        Die meisten Programmiersprachen verwenden beim `print`-Befehl Anführungszeichen, sodass wir dem echten Programmieren einen Schritt näher kommen!
    example_code: "## Hedy Beispiel-Code\n```\nprint 'Ab jetzt musst du Anführungszeichen verwenden!'\nAntwort is ask 'Was müssen wir ab jetzt verwenden?'\nprint 'Wir müssen ' Antwort ' verwenden.'\n```\n"
    intro_text_2: "## Abenteuer werden immer schwieriger\nDie Abenteuer werden jetzt immer schwieriger in den nächsten Tabs.\nDeswegen ist es am Besten wenn du dich mit der Geschichte von links nach rechts vorarbeitest, um immer mehr herausgefordert zu werden.\n"
5:
    start_code: |-
        name is ask 'Wie heisst du?'
        if name is Hedy print 'Toll!' else print 'Blöd'
    intro_text: |
        ## Falls... sonst...
        In Level 5 gibt es etwas neues, nämlich das `if`! Mit `if` kannst du zwischen zwei verschiedenen Möglichkeiten wählen.
        Dieser Code gibt 'Toll!' aus, wenn du Hedy als Namen eingibst, und 'Blöd!', wenn du etwas anderes eingibst.
        `ask` und `print` funktionieren immer noch wie in Level 4.
    example_code: "## Hedy Beispiel-Code\n```\nName {is} {ask} 'Wie heißt du?'\n{if} Name {is} Hedy {print} 'Schön' {else} {print} 'Buh!'\n```\n"
    intro_text_3: "## Lists\nWenn wir überprüfen möchten ob etwas in einer Liste ist, können wir das mit dem Befehl `{in}` machen.\nDieser Code gibt schön! aus wenn du grün oder gelb auswählst, und na ja wenn du dich für eine andere Farbe entscheidest.\n"
    example_code_3: "```\nschöne_Farben {is} grün, gelb\nFarbe {is} {ask} 'Was ist deine Lieblingsfarbe?'\n{if} Farbe {in} schöne_Farben {print} 'schön!'\n{else} {print} 'na ja'\n```\n"
    intro_text_2: "Machmal wir Code mit einem`{if}`ziemlich lang und passt nicht gut in eine Zeile. <br> Du kannst den Code auch auf zwei Teilen aufteilen, beginnend mit der zweiten Zeile beim `{else}` Befehl, und zwar so:\n"
    example_code_2: "```\nName {is} {ask} 'Wie heißt du?'\n{if} Name {is} Hedy {print} 'Schön'\n{else} {print} 'Buh!'\n```\n"
6:
    start_code: "print '5 mal 5 ist ' 5 * 5"
    intro_text: |
        ## 1 + 1
        In diesem Level lernst du etwas neues: du kannst jetzt auch rechnen.

        Das Plus ist leicht, das schreibst du wie in Mathe: `5 + 5` zum Beispiel. Das Minus funktioniert genauso, zum Beispiel `5 - 5`.

        Das Mal ist etwas anders, da auf deiner Tastatur kein Malzeichen (`·`) vorhanden ist. Suche mal, das gibt es wirklich nicht!
        Deshalb multiplizieren wir mit dem Stern (auf der Tastatur über dem Plus): `5 * 5`. Lies das mal als "5 mal 5", dann kannst du dich am einfachsten daran erinnern.
    example_code: "## Hedy Beispiel-Code\n```\n{print} '5 plus 5 macht ' 5 + 5\n{print} '5 minus 5 macht ' 5 - 5\n{print} '5 {times} 5 macht ' 5 * 5\n```\n"
    intro_text_2: "Wir verändern auch wie du ein Wort in einer Variable speichern kannst! Du darfst jetzt `=`anstatt `{is}` verwenden, wenn du ein Wort oder eine Zahl in einer Variable speicherst, und zwar so:\n"
    example_code_2: "```\nName = Hedy\nAntwort = 20 + 4\n```\n"
7:
    start_code: "repeat 3 times print 'Hedy macht Spaß!'"
    intro_text: |
        ## Level 7! Level 7!
        In Level 7 kommt der Befehl `{repeat}`dazu. Mit {repeat} kannst du eine Zeile Code mehrmals ausführen.
    example_code: "## Hedy Beispiel-Code\n```\n{repeat} 3 {times} {print} 'Hedy {is} cool!'\n```\n"
8:
    start_code: |-
        repeat 5 times
            print 'Hello Leute'
            print 'Das wird 5 mal ausgegeben'
    intro_text: |
        ## Die Einrückung
        `ask` und `print` funktionieren immer noch wie du es gewohnt bist. Aber `if` und `repeat` haben sich verändert!
        Du kannst jetzt Befehlsgruppen zusammen ausführen, aber du musst den Code dafür *einrücken*.
        Das bedeutet dass du die Befehlszeilen mit vier Leerzeichen beginnen musst. Das gilt auch, wenn du einen Block mit nur einer Zeile schreiben möchtest.
    example_code: "## Hedy Beispiel-Code\n```\n{repeat} 5 {times}\n    {print} 'Hallo zusammen'\n    {print} 'Das hier wird fünf Mal wiederholt'\n```\n"
9:
    start_code: |-
        repeat 3 times
            Essen = ask 'Was möchtest du gern?'
            if Essen is 'Pizza'
                print 'Gut!'
            else
                print 'Pizza ist besser'
    intro_text: |
        ## Jetzt alles auf einmal!
        In diesem Level kannst du nicht nur mehrere Zeilen mit `if` und `repeat` verwenden, du kannst sie auch kombinieren!
        Im Beispiel siehst du einen `if` Befehl innerhalb eines `repeat` Befehls. Es ist auch anders herum erlaubt. Und ebenso ist `if` innerhalb eines anderen `if` Befehls erlaubt, genau wie `repeat` in einem anderen `repeat` Befehl.
        Versuch es mal!
    example_code: "## Hedy Beispiel-Code\n```\n{repeat} 3 {times}\n    Essen = {ask} 'Was würden Sie gerne essen?'\n    {if} Essen {is} Pizza\n        {print} 'Schön!'\n    else\n        {print} 'Pizza ist leckerer'\n```\n"
10:
    start_code: |-
        animals is dog, cat, blobfish
        for animal in animals
          print 'I love ' animal
    intro_text: |
        ## Für jedes Element in meiner Liste...
        In diesem Level lernen wir den neuen Befehl `for`. Mit `for` kannst du eine Liste machen und alle ihre Elemente verwenden.
        `for` erstellt einen Block, so wie `repeat` und `if`, daher müssen alle Zeilen in dem Block mit Leerzeichen beginnen.
    example_code: "## Hedy Beispiel-Code\n```\nTiere {is} Hund, Katze, Kugelfisch\n{for} Tier {in} Tiere\n  {print} 'Ich mag ' Tier\n```\n"
11:
    start_code: |-
        for Zähler in range 1 to 5
            print Zähler
    intro_text: |
        ## Schleifen!
        `print` funktioniert exakt genauso, aber wir verwenden jetzt die neue Form des Befehls `for`. Du kannst jetzt `{for} Zähler {in} {range} 1 {to} 5` schreiben und `Zähler` in deinem Programm verwenden.
        Probier es mal aus, und schau was passiert! Denke daran, Einrückungen nach den `for`- und `if`-Anweisungen zu verwenden (Das bedeutet, einen Satz mit vier Leerzeichen zu beginnen).
    example_code: "## Hedy Beispiel-Code\n```\nfor Zähler in range 1 to 5\n    print Zähler\n```\n"
12:
    start_code: |-
        print 'decimal numbers now need to use a dot'
        print 2.5 + 2.5
    intro_text: |
        ## Zahlen und Texte
        **Dezimalzahlen**
        Bis jetzt konntest du mit Hedy keine Dezimalzahlen (das sind Kommazahlen) wie 1.5 verwenden, aber jetzt geht das. Denke daran, dass Computer anstatt des Kommas einen Punkt ('.') verwenden.
    example_code: "## Hedy Beispiel-Code\n```\n{print} 'Zweieinhalb plus zweieinhalb macht...'\n{print} 2.5 + 2.5\n```\n"
    intro_text_2: "**Jeder Text muss zwischen Anführungszeichen stehen**\nAb diesem Level musst du auch Anführungszeichen verwenden wenn du Text mit einem `=` abspeicherst:\n"
    example_code_2: "```\nName = 'Hedy der Roboter'\n{print} 'Hallo ' name\n```\n"
    intro_text_3: "**Auch alle Elemente in Listen brauchen Anführungszeichen**\nListen sind Texte, also brauchen auch sie Anführungszeichen. Achte darauf dass jedes einzelne Element in einer Liste Anführungszeichen hat.\nSo kannst du zwei Wörter als ein Listenelement speichern, zum Beispiel 'Iron Man'.\n"
    example_code_3: "```\nSuperhelden = 'Spiderman', 'Batman', 'Iron Man'\n{print} Superhelden {at} {random}\n```\n"
    intro_text_4: "**Auch jeder Text nach einem `{if}` Vergleich braucht Anführungszeichen**\n"
    example_code_4: "```\nName = {ask} 'Wie heißt du?'\n{if} Name = 'Hedy der Roboter'\n    {print} 'Hallo!'\n```\n"
    intro_text_5: "**Zahlen brauchen keine Anführungszeichen**\nFür Zahlen verwendest du keine Anführungszeichen mit dem `=`:\n"
    example_code_5: "```\nPunkte = 25\n{print} 'Du hast ' score\n```\n"
    intro_text_6: "**Mathe in Worten** In diesem Level ist es auch erlaubt das + Zeichen mit Texten zu benutzen. Zum Beispiel:\n"
    example_code_6: "```\na = 'Hallo '\nb = 'Welt!'\nprint a + b\n```\n"
13:
    start_code: |-
        Name = ask 'Wie heißt Du?'
        Alter = ask 'Wie alt bist Du?'
        if Name is 'Hedy' and Alter is 2
            print 'Du bist die echte Hedy!'
    intro_text: |
        ## Und... oder...?
        Wir werden jetzt `{and}` und `{or}` lernen! Wenn du zwei Angaben überprüfen willst, musst du nicht zwei `{if}` verwenden, sondern kannst `{and}` und `{or}` benutzen. Wenn du `{and}` verwendest, müssen beide Angaben, also links und rechts vom `{and}`, wahr sein. Du kannst auch `{or}` verwenden. Dann muss nur eine der beiden Aussage wahr sein.
#16:
#    start_code: |-
#        # Dieses Programm wird ein paar mathematische Fragen stellen
#        for i in range(1,10):
#            # Wir werden die Multiplikationstabelle der 5 abfragen
#            antwort is input('Was ergibt ' i ' mal 5?')
#            # Wir prüfen ob die Antwort mit unserer übereinstimmt
#            korrekte_antwort is i * 5
#            if antwort is korrekte_antwort:
#                print(antwort ' ist korrekt!')
#            else:
#                print('Das ist falsch. Die richtige Antwort lautet: ' i*5)
#    intro_text: |-
#        Wenn du größere Programme erstellst, brauchst du einen Weg, um dir zu merken, was jedes Codestück tut.
#        Wir verwenden dafür Kommentare.
#        Ein Kommentar sieht folgendermaßen aus:\n ` # Dies ist ein Kommentar`.
#        Alles nach dem `#` wird für den Code unsichtbar.
#    commands:
#    -   name: "Kommentar"
#        explanation: "Wir können Kommentare platzieren, wo immer wir wollen."
#        example: "# Dies ist ein Kommentar"
#        demo_code: |-
#            # Dieses Programm gibt Hallo! aus
#            # Es ist in Hedy erstellt worden
#            # Es macht nichts außer Hallo! zu auszugeben
#            print('Hallo!')
    example_code: "```\nName = ask 'Wie heißt du?'\nAlter = ask 'Wie alt bist du?'\nif Name is 'Hedy' and Alter is 2\n    print 'Du bist die echte Hedy!'\n```\n"
14:
    start_code: |-
        alter = ask 'Wie alt bist du?'
        if alter < 13
            print 'Du bist jünger als ich!'
        else
            print 'Du bist älter als ich!'
    intro_text: |
        ## Groß, größer, am größten!
        Wir lernen weitere neue Elemente kennen! Du kennst sie vielleicht schon aus der Mathematik, das `<` und das `>` Zeichen.
        Das `<` prüft, ob die erste Zahl kleiner ist als die zweite, so überprüft `Alter < 12` zum Beispiel ob `Alter` kleiner als 12 ist.
        Wenn du überprüfen willst, ob die erste Zahl kleiner oder gleich der zweiten ist, kannst du `<=`verwenden, zum Beispiel `Alter <= 11`.
        Das `>` prüft, ob die erste Zahl größer als die zweite ist, so überprüft `Punkte > 10` zum Beispiel ob `Punkte` größer als 10 ist.
        Wenn du überprüfen willst, ob die erste Zahl größer oder gleich der zweiten ist, kannst du `>=`verwenden, also zum Beispiel `Punkte >= 11`.
        All diese Vergleiche kannst du mit einem `{if}`verwenden, das geht so:
    example_code: "## Hedy Beispiel-Code\n```\nAlter = {ask} 'Wie alt bist du?'\n{if} Alter > 12\n    {print} 'Du bist älter als ich!'\n```\n"
    intro_text_2: "Ab diesem Level, wenn du überprüfen willst ob etwas genau gleich ist, kannst du zwei Gleichheitszeichen verwenden. So machen das die meisten Programmiersprachen:\n"
    example_code_2: "```\nName = {ask} 'Wie heißt du?'\n{if} Name == 'Hedy'\n    {print} 'Du bist cool!'\n```\n"
    intro_text_3: "Du kannst auch überprüfen ob etwas *nicht* gleich wie etwas anderes ist, mit `!=`und zwar so:\n"
    example_code_3: "```\nName = {ask} 'Wie heißt du?'\n{if} Name != 'Hedy'\n    {print} 'Du bist nicht Hedy'\n```\n"
15:
    start_code: |-
        antwort = 0
        while antwort != 25
            antwort = ask 'Wieviel ist 5 mal 5?'
            print 'Das ist die richtge Antwort!'
    intro_text: |
        ## Mehr Schleifen!
        Wir lernen eine neue Schleife kennen, die `{while}`-Schleife! Wir setzen die Schleife so lange fort, wie die Aussage wahr ist!
        Also vergiss nicht den Wert innerhalb der Schleife zu ändern.

        Im Beispielcode fahren wir also fort, bis eine korrekte Antwort gegeben wurde.
        Wenn die richtige Antwort nie gegeben wird, endet die Schleife nie!
    example_code: "## Hedy Beispiel-Code\n```\nAntwort = 0\nwhile Antwort != 25\n    Antwort = ask 'Was macht 5 mal 5?'\nprint 'Es wurde eine richtige Antwort abgegeben'\n```\n"
16:
    start_code: |-
        früchte = ['Apfel', 'Banane', 'Kirsche']
        print früchte
    intro_text: |
        ## Wir kommen dem richtigem Code immer näher!
        Wir setzen jetzt eckige Klammern um Listen, so wie das in Python gemacht wird! Außerdem müssen wir jetzt einfache Anführungszeichen `'` um jedes Element einer Liste setzen, wie wir es in den vorherigen Leveln gelernt haben.
        Du kannst die eckigen Klammern auch verwenden um eine Stelle in der Liste zu benennen.
    example_code: "## Hedy Beispiel-Code\n```\nFreunde = ['Ahmed', 'Ben', 'Clemens']\nGlückszahlen = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'Die Glückszahl von ' Freunde[i]\n    {print} 'ist ' Glückszahlen[i]\n```\n"
17:
    start_code: |-
        for i in range 1 to 10:
            print i
        print 'Bereit oder nicht, hier komme ich!'
    intro_text: |
        Jetzt werden wir ein wenig an der Einrückung ändern. Jedes Mal, wenn wir eine Einrückung benötigen, brauchen wir `:` in der Zeile vor der Einrückung.

        In diesem Level kannst du außerdem einen neuen Befehl benutzen: `{elif}`. `{elif}` ist eine Abkürzung für {else} {if} und du brauchst ihn wenn du drei (oder Mehr!) Optionen machen willst.
        Probier es mal aus!
        ```
        Preise = ['1 Million Euro', 'ein Apfelkuchen', 'nichts']
        dein_Preis = Preise[random]
        {print} 'Du gewinnst ' dein_Preis
        {if} dein_Preis == '1 Million Euro' :
            {print} 'Juhuu! Du bist reich!'
        {elif} dein_Preis == 'ein Apfelkuchen' :
            {print} 'Wunderbar, ein Apfelkuchen!'
        {else}:
            {print} 'Viel Glück beim nächsten Mal...'
        ```
18:
    start_code: "Name = 'Hedy'\n{print}('Ich heiße ', Name)"
    intro_text: "## Level 18\nWir sind bei richtigem Python Code angekommen! Das bedeutet dass wir ab jetzt rund Klammern mit den Befehlen {print} und {range} benutzen müssen.\nDas sieht so aus:\n```\n{print}('Ich heiße Hedy!')\n```\nWenn du mehr als ein Element ausgeben möchtest, musst du sie mit Kommas trennen.\n```\nName = 'Hedy'\n{print}('Ich heiße ', Name)\n```"
