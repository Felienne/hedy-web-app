1:
    intro_text: |
        Willkommen bei Hedy! In Level 1 kannst du die Befehle `print`, `ask` und `echo` verwenden. 
        
        Hedy benutzt englische Wörter für Befehle wie die meisten Programmiersprachen. `print` bedeutet drucken oder auf den Bildschirm ausgeben, `ask` bedeutet fragen und `echo` bedeutet wiederholen.

        Auf der linken Seite deines Bildschirms befinden sich alle Befehle des Level 1.

        Drücke den blauen Knopf und der Code wird für dich ausgegeben!

        Probiere den Code selbst mit der grünen Schaltfläche 'Code ausführen' unter dem linken Programmierfeld aus.

        Du weißt nicht, was du erstellen sollst? Auf den nächsten Tabs findest du einige Ideen, was du erstellen kannst.
    start_code: "print Hallo Welt!"
    commands:
    -   name: "print"
        explanation: "Gib etwas mit `print` aus."
        example: "Beispiel: print Hallo willkommen bei Hedy!"
        demo_code: "print Hallo willkommen bei Hedy!"
    -   name: "ask"
        explanation: "Frage etwas mit `ask`."
        example: "Beispiel: ask Was ist deine Lieblingsfarbe?"
        demo_code: "ask Was ist deine Lieblingsfarbe?"
    -   name: "echo"
        explanation: "Wiederhole etwas mit `echo`."
        example: "Beispiel: echo Also deine Lieblingsfarbe ist ..."
        demo_code: |-
            ask Was ist deine Lieblingsfarbe?
            echo Also deine Lieblingsfarbe ist ...
2:
    intro_text: |
        In Level 2 lernen wir etwas Neues. Du kannst ein Wort mit `is` benennen. `is` bedeutet ist. 

        Wenn Du den Code `name is Hedy` oben in Dein Programm einfügst, kannst du `name` überall verwenden. Er wird dann durch "Hedy" ersetzt.

        `ask` hat sich in Level 2 geändert. Die Antwort speicherst Du auch unter einem Namen ab:

        ```
        antwort is Wie heißt du?
        ```

        `print` funktioniert immer noch wie in Level 1, und Du benötigst `echo` nicht mehr.

        In Level 2 kannst Du auch eine Liste erstellen. Du kannst den Computer etwas zufällig aus der Liste auswählen lassen. Du machst dies mit `at random` (es bedeutet zufällig und man spricht es "ät rän-dum" aus).

        Du findest alle Befehle des Level 2 in der linken Leiste. Weitere Aufgaben findest du auf den folgenden Tabs.
    start_code: "print Hallo Welt!"
    commands:
    -   name: "is"
        explanation: "Gib einem Wort einen Namen mit `is`, den du in deinem Programm wiederverwenden kannst."
        example: "Beispiel: name is Hedy."
        demo_code: |-
            name is Hedy
            print Willkommen name
    -   name: "ask"
        explanation: "Frage etwas mit `ask`. Aber pass auf! Du musst der Antwort einen Namen mit `is` geben."
        example: "Beispiel: farbe is ask Was ist deine Lieblingsfarbe?"
        demo_code: |-
            farbe is ask Was ist deine Lieblingsfarbe?
            print Du magst am liebsten farbe
    -   name: "choose_random"
        explanation: "Wähle mit `at` und `random` zufällig ein Wort aus einer Gruppe aus."
        example: "Beispiel: tiere is Hund, Katze, Känguru."
        demo_code: |-
            tiere is Hund, Katze, Känguru
            print tiere at random
3:
    start_code: "print 'Hallo Welt'"
    intro_text: |
        `ask` ist in Level 3 immer noch dasselbe, aber `print` ist jetzt anders.

        Du musst Text, den du genau so mit `print` ausgeben möchtest, in Anführungszeichen setzen.

        Du kannst du jetzt alle Wörter ausgeben, die du möchtest. Auch die Wörter, mit denen du etwas mit `is` gespeichert hast.

        Die meisten Programmiersprachen verwenden beim `print` Befehl Anführungszeichen, sodass wir dem echten Programmieren einen Schritt näher kommen!

        ## Aufgaben werden immer schwieriger
        Du findest die Befehle wieder auf der linken Seite und die Aufgaben auf den folgenden Tabs. Die Aufgaben werden immer etwas schwieriger.
        Beginne darum links mit der Geschichte und arbeite dich für größere Herausforderungen weiter nach rechts vor.
    commands:
    -   name: "print"
        explanation: "Benutze Anführungszeichen, um einen Text genau so auszugeben."
        example: "Beispiel: print 'Hallo. Willkommen bei Hedy.'"
        demo_code: "print 'Hallo. Willkommen bei Hedy.'"
    -   name: "is"
        explanation: "Gib einem Text einen Namen und gib ihn ohne Anführungszeichen aus."
        example: "Beispiel: name is Hedy."
        demo_code: |-
            name is Hedy
            print 'Ich heisse ' name
    -   name: "ask"
        explanation: "Frage etwas mit `ask`."
        example: "Beispiel: farbe is ask Was ist deine Lieblingsfarbe?"
        demo_code: |-
            farbe is ask Was ist deine Lieblingsfarbe?
            print 'Du magst am liebsten ' farbe
4:
    start_code: |-
        name is ask Wie heisst du?
        if name is Hedy print 'Toll!' else print 'Blöd'
    intro_text: |
        `ask` und `print` funktionieren immer noch wie in Level 3.

        In Level 4 gibt es etwas Neues, `if` und `else`! `if` ist Englisch für wenn, `else` bedeutet sonst. Mit `if` und `else` kannst du zwischen zwei verschiedenen Möglichkeiten wählen.

        ## Beispiel Hedy Code
        ```
        Name ist ask wie ist Ihr Name?
        if Name is Hedy print 'Toll!' else print 'Blöd!'
        ```

        Dieser Code gibt 'Toll!' aus, wenn du Hedy als Namen eingibst, und 'Blöd!', wenn de etwas anderes eingibst.

        ## Aufgaben werden immer schwieriger

        Auch in Stube 4 werden die Aufgaben in den Tabs immer etwas schwieriger. Löse sie also von links nach rechts.

    commands:
    -   name: "print"
        explanation: "Benutze Anführungszeichen, um einen Text genau so auszugeben."
        example: "Beispiel: print 'Hallo. Willkommen bei Hedy.'"
        demo_code: "print 'Hallo. Willkommen bei Hedy.'"
    -   name: "ask"
        explanation: "Frage etwas mit `ask`."
        example: "Beispiel: farbe is ask Was ist deine Lieblingsfarbe?"
        demo_code: |-
            farbe is ask Was ist deine Lieblingsfarbe?
            print 'Du magst am liebsten ' farbe
    -   name: "if"
        explanation: "Treffe eine Auswahl mit `if` und `else`"
        example: "Beispiel: if farbe is grün print 'Hübsch!' else print 'Bäh'"
        demo_code: |-
            farbe is ask Was ist deine Lieblingsfarbe?
            if farbe is grün print 'Hübsch!' else print 'Bäh'
5:
    start_code: "repeat 3 times print 'Hedy macht Spaß!'"
    intro_text: |
        `ask`, `print` und `if` funktionieren genau wie in Stufe 4.
        Aber in Stufe 5 kommt der `repeat` Befehl dazu. 
        `repeat` bedeutet wiederhole.
        Mit `repeat` kannst du eine Befehlszeile mehrmals auszuführen. 
        Dabei kannst du angeben, wie oft etwas wiederholt werden soll.
        `repeat 3 times` bedeutet zum Beispiel wiederhole 3 mal.

        ## Beispiel Hedy code
        ```
        repeat 3 times print 'Hedy macht Spaß!'
        ```
    commands:
    -   name: "print"
        explanation: "Benutze Anführungszeichen, um einen Text genau so auszugeben."
        example: "Beispiel: print 'Hallo. Willkommen bei Hedy.'"
        demo_code: "print 'Hallo. Willkommen bei Hedy.'"
    -   name: "ask"
        explanation: "Frage etwas mit `ask`."
        example: "Beispiel: farbe is ask Was ist deine Lieblingsfarbe?"
        demo_code: |-
            farbe is ask Was ist deine Lieblingsfarbe?
            print 'Du magst am liebsten ' farbe
    -   name: "if"
        explanation: "Treffe eine Auswahl mit `if` und `else`"
        example: "Beispiel: if farbe is grün print 'Hübsch!' else print 'Bäh'"
        demo_code: |-
            farbe is ask Was ist deine Lieblingsfarbe?
            if farbe is grün print 'Hübsch!' else print 'Bäh'
    -   name: "repeat"
        explanation: "`repeat` und `if` kombiniert"
        example: "Beispiel: if farbe is grün repeat 3 times print 'Hübsch!' else repeat 5 times print 'Bäh'"
        demo_code: |-
            farbe is ask Was ist deine Lieblingsfarbe?
            if farbe is grün repeat 3 times print 'Hübsch!' else repeat 5 times print 'Bäh'
6:
    start_code: "print '5 mal 5 ist ' 5 * 5"
    intro_text: |
        `ask`,` print`, `if` und `repeat` funktionieren immer noch wie in Level 4 und 5.
        Aber in Level 6 gibt es etwas Neues, das du jetzt auch berechnen kannst.

        In Level 6 werden neue Befehle hinzugefügt. Damit kannst du in deinem Code rechnen.

        Das Plus schreibst du wie in Mathe: `5 + 5` zum Beispiel. Das Minus funktioniert genauso, zum Beispiel `5 - 5`.

        Das Mal sind etwas anders, da auf deiner Tastatur kein Malzeichen (`·`) vorhanden ist. Suche mal, das gibt es wirklich nicht!
        Deshalb multiplizieren wir mit dem Stern über dem Plus: `5 * 5`. Lies dies als 5 mal 5, dann kannst du dich am einfachsten daran erinnern.
        ## Beispiel Hedy Code
        ```
        print '5 plus 5 ist ' 5 + 5
        print '5 minus 5 ist ' 5 - 5
        print '5 mal 5 ist ' 5 * 5
        ```

    commands:
    -   name: "print"
        explanation: "Benutze Anführungszeichen, um einen Text genau so auszugeben."
        example: "Beispiel: print '5 mal 5 ist ' 5 * 5"
        demo_code: "print '5 mal 5 ist ' 5 * 5"
    -   name: "`ask` und `if` mit Berechnungen"
        explanation: "Frage nach einer Rechenaufgabe."
        example: "Beispiel: antwort is ask Was ist 10 plus 10?"
        demo_code: |-
            antwort is ask Was ist 10 plus 10?
            if answer is 20 print 'Ja!' else print 'Ups'
    -   name: "repeat"
        explanation: "`repeat` und `if` kombiniert"
        example: "Beispiel: if antwort is 50 repeat 3 times print 'Richtig!' else repeat 5 times print 'Ups'"
        demo_code: |-
            antwort is ask Was ist 5 mal 10?
            if antwort is 50 repeat 3 times print 'Richtig!' else repeat 5 times print 'Ups'
7:
    start_code: |-
        repeat 5 times
            print 'Hello Leute'
            print 'Das wird 5 mal ausgegeben'
    intro_text: |
        `ask` und `print` funktionieren immer noch wie du sie kennst.
        Aber `if` und `repeat` haben sich verändert!
        Du kannst jetzt Befehlsgruppen zusammen ausführen, aber du musst die Befehle einrücken.
        Das heisst, du musst die Befehlszeile mit vier Leerzeichen beginnen.
        Das gilt auch, wenn du einen Block mit nur einer Zeile schreiben möchtest.
        ## Beispiel Hedy-Code
        ```
        repeat 5 times
            print 'Hallo Leute'
            print 'Dies wird 5 mal wiederholt'
        ```

        Wenn du einen `repeat` mit einem `if` Befehl kombinierst, musst du jeden Block einrücken. Schau dir die Beispiele an, um es genauer zu sehen!"

        ## Beispiel Hedy-Code
        ```
        farbe is ask Was ist deine Lieblingsfarbe?
        if farbe is grün
            repeat 3 times
                print 'Hübsch!'
        else
            repeat 5 times
                print 'Bäh'
        ```

    commands:
    -   name: "print"
        explanation: "Gib etwas aus. Denke daran, Anführungszeichen für eine wörtliche Ausgabe zu verwenden."
        example: "Beispiel: print '5 mal 5 ist ' 5 * 5"
        demo_code: "print '5 mal 5 ist ' 5 * 5"
    -   name: "`if` mit mehreren Zeilen"
        explanation: "Frage nach einer Summe und prüfe, ob die Antwort richtig ist. Wir können jetzt zwei Zeilen ausgeben."
        example: "Beispiel: antwort is ask Was ist 5 plus 5?"
        demo_code: |-
            antwort is ask Was ist 5 plus 5?
            if antwort is 10
                print 'Gut gemacht!'
                print 'Die Antwort ist wirklich ' antwort
            else
                print 'Ups!'
                print 'Die Antwort is 10'
    -   name: "`if` und `repeat` kombiniert"
        explanation: "`if` und `repeat` kombiniert"
        example: "Beispiel: if farbe is grün repeat 3 times print 'Hübsch!' else repeat 5 times print 'Bäh'"
        demo_code: |-
            farbe is ask Was ist deine Lieblingsfarbe?
            if farbe is grün
                repeat 3 times
                    print 'Hübsch!'
            else
                repeat 5 times
                    print 'Bäh'
