1:
    intro_text: |+
        Üdvözlünk a Hedynél! Az első szinten a `print`, `ask` és `echo` parancsokat használhatod.

        A baloldali sávban az 1. szint összes parancsát láthatod.

        Nyomd meg a kék gombot és a kód megjelenik a programozási ablakban!

        Próbáld ki a kódot a 'Kód futtatása' gomb megnyomásával a bal oldali programozási
        ablak alatt.

        Nem tudod mit is csinálj? A következő füleken találsz néhány ötletet.

    start_code: "print Helló világ!"
    commands:
    -   name: "print"
        explanation: "Írass ki valamit vele: `print`."
        example: "Példa: print Szia, üdvözlünk a Hedynél!"
        demo_code: "print Szia, üdvözlünk a Hedynél!"
    -   name: "ask"
        explanation: "Kérdezz valamit vele: `ask`."
        example: "ask 'Mi a kedvenc színed?'"
        demo_code: "ask 'Mi a kedvenc színed?'"
    -   name: "echo"
        explanation: "Ismételj valamit: `echo`."
        example: "Példa: echo a kedvenc színed "
        demo_code: |-
            ask Mi a kedvenc színed?
            echo a kedvenc színed 
    -   name: forward
        explanation: Rajzolj egy vonalat a `forward` utasítással.
        example: 'Példa: forward 100'
        demo_code: forward 100
    -   name: turn
        explanation: Fordulj a rajzoló teknőssel a `turn` utasítással
        example: 'Példa: turn'
        demo_code: |-
            forward 25
            turn left
            forward 25
            turn right
    -   name: '{turn}'
        explanation: turn the drawing turtle with `{turn}`
        example: 'Example: {turn}'
        demo_code: "{forward} 25\n{turn} left\n{forward} 25\n{turn} right"
    example_code: "## Example code\n```\n{print} Hello!\n{print} Welcome to Hedy!\n```\n"
    intro_text_2: "You can also ask for input and repeat it back with an `{echo}` command.\nTry the code to your left again.\n\nDon't know what to create? In the next tabs you will find ideas for programs to build.\n"
    example_code_2: "## Example code\n```\n{ask} What is your name?\n{echo} hello\n```\n"
    intro_text_3: "Let's get started! Don't know what to create? In the next tabs you will find ideas for programs to build.\n"
2:
    intro_text: |
        A 2. szinten valami újat tanulunk. El tudsz nevezni egy szót az 'is' utasítással.

        Ha azt a kódot írod, hogy 'nev is Hedy' akkor a nev (nem használunk ékezetet) szót
        mindenhol használhatod a kódodban és a Hedy értéket kapja.

        Jegyezd meg: 'ask' megváltozott, egy szó segítségével elmentheted a választ, mint itt:
        ```
        valasz is ask Mi a neved?
        ```

        A print utasítás úgy működik, mint az 1. szinten, de az echo utasításra már nem lesz
        szükséged.
    start_code: "print Helló világ!"
    commands:
    -   name: "is"
        explanation: "Az `is` használatához adj egy nevet (ne legyen benne ékezet) a szónak, amit ki akarsz íratni."
        example: "Példa: nev is Hedy."
        demo_code: |-
            nev is Hedy
            print szia nev
    -   name: "ask"
        explanation: "Kérdezz valami az `ask` utasítással. Vigyázz! A válaszodnak nevet kell adnod az `is` segítségével."
        example: "Példa: szin is ask Mi a kedvenc színed?"
        demo_code: |-
            szin is ask Mi a kedvenc színed?
            print szin a kedvenc színed!
    -   explanation: Let Hedy pause for a (couple of) second(s).
        name: '{sleep}'
        example: 'Example: {sleep} 2 '
        demo_code: "{print} Let me think for one second...\n{sleep}\n{print} Hmm.. I need 3 more seconds...\n{sleep} 3\n{print} Eureka! Ive got it!"
    -   name: is - turtle
        explanation: Give a number a name using `{is}`. You can choose the name yourself.
        example: 'Example: angle {is} 90'
        demo_code: "angle {is} 90\n{turn} angle\n{forward} 100"
    example_code: "## Example code\n```\nname {is} Hedy\nage {is} 15\n{print} name is age years old\n```\n"
    intro_text_2: "`{print}` still works the same, but the `{ask}` command has changed. You need to use a variable in the `{ask}` command as well. It looks like this:\n"
    example_code_2: "```\nanswer {is} {ask} What is your name?\n{print} Hello answer\n```\n"
    intro_text_3: "Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.\n"
    example_code_3: "```\n{print} My favorite colour is...\n{sleep} 2\n{print} green!\n```\n"
3:
    intro_text: |
        A 3. szinten készíthetsz listát is. Kérheted a számítógépet, hogy véletlenszerűen
        válasszon valamit a listából. Ezt az `at random` utasítással teheted meg.

        ```
        allatok is kutya, cica, kenguru
        print allatok at random
        ```

        A baloldali sávban a 3. szint összes parancsát láthatod. A következő füleken különböző
        feladatokat találsz.
    start_code: "print Helló világ!"
    commands:
    -   name: choose_random
        explanation: Válassz véletlenszerűen egy szót az `at` és a `random` utasításokkal
        example: 'Példa: allatok is kutya, cica, kenguru.'
        demo_code: |-
            allatok is kutya, cica, kenguru
            print allatok at random
    -   explanation: add an item to a list
        example: 'Example: {add} dog {to_list} animals'
        demo_code: "animals {is} cow, cat\n{add} dog {to_list} animals"
        name: '{add}'
    -   name: '{remove}'
        explanation: remove an item from a list
        example: 'Example: {remove} dog {from} animals'
        demo_code: "animals {is} cat, dog, cow\n{remove} dog {from} animals"
    intro_text_2: You can also add items to the list with `{add}` and remove items with `{remove}`.
    example_code: "## Example Hedy Code\n\n```\nanimals {is} dog, cat, kangaroo\n{print} animals {at} {random}\n```\n"
    example_code_2: "## Example Hedy Code\n\n```\nanimals {is} dog, cat, kangaroo\n{add} penguin {to_list} animals\n{remove} cat {from} animals\n{print} animals {at} {random}\n```\n"
4:
    start_code: "print 'Helló világ'"
    intro_text: |-
        `ask` ugyanolyan, a 4. szinten, mint eddig, de `print` most más lesz.

        Amit ki akarsz íratni, idézőjelbe kell tenned.

        Ez hasznos, mert most már mindent kiírathatsz, amit csak akarsz. Az 'is' utasítással
        definiálhatod azt a szót, amiben a szöveget tárolod.

        A legtöbb programozási nyelv idézőjelet (szimpla idézőjel, más néven aposztróf) használ
        a kiíratáshoz, így egy kicsit közelebb kerülünk az igazi programozáshoz.

        ## A feladatok egyre nehezebbek lesznek. 
        Most is megtalálod a parancsokat a baloldalon, a feladatokat pedig a füleken. A feladatok egyre nehezebbé válnak az egymást követő füleken. A legjobb, ha a baloldalon kezded a feladatokat a történettel és így haladsz jobbra a nagyobb kihívást jelentő feladatok felé.
    commands:
    -   name: "print"
        explanation: "Kiíratás idézőjelekkel"
        example: "Példa: print Szia, üdvözlünk a Hedy-nél.'"
        demo_code: "print 'Szia, üdvözlünk a Hedy-nél.'"
    -   name: "is"
        explanation: "Adj nevet a szövegnek és írasd ki `print`segítségével idézőjelek nélkül"
        example: "Példa: nev is Hedy."
        demo_code: |-
            nev is Hedy
            print 'A nevem ' nev
    -   name: "ask"
        explanation: "Kérdezz valamit `ask`segítségével."
        example: "Példa: szin is ask Mi a kedvenc színed?"
        demo_code: |
            szin is ask 'Mi a kedvenc színed?'
            print szin ' a kedvenc színed !'
    example_code: "## Example Hedy code\n```\nprint 'You need to use quotation marks from now on!'\nanswer is ask 'What do we need to use from now on?'\nprint 'We need to use ' answer\n```\n"
    intro_text_2: "## Adventures are getting more and more difficult\nThe adventures are now getting more and more difficult in the successive tabs.\nSo it is best to start on the left with the story, and work to the right, in order to be challenged more and more.\n"
5:
    start_code: |-
        nev is ask 'Hogy hívnak?'
        if nev is Hedy print 'klassz!' else print 'ajaj'
    intro_text: |-
        `ask` és `print` ugyanúgy működnek, mint a 4. szinten. A 5. szinten hozzájön az `if`
        parancs! Az 'if' paranccsal két különböző lehetőség között választhatsz.

        ## Hedy Code példa

        ```
        nev is ask mi a neved?
        if nev is Hedy print 'klassz' else print 'úhh'
        ```
        Ez a kód kiírja, hogy klassz, ha a Hedy nevet adod meg névként, és úhh-t, ha valami
        mást írsz be.

        ## A feladatok egyre nehezebbek lesznek.

        A feladatok a 5. szinten a füleken egyre nehezebbek lesznek. Csináld őket balról jobbra
        haladva.
    commands:
    -   name: "print"
        explanation: "Pontos kiíratás idézójelekkel."
        example: "Példa: print 'Szia, üdvözlünk a Hedy-nél.'"
        demo_code: "print 'Szia, üdvözlünk a Hedy-nél.'"
    -   name: "ask"
        explanation: "Kérdezz valamit az `ask`utasítással."
        example: "Példa: szin is ask Mi a kedvenc színed?"
        demo_code: |-
            szin is ask Mi a kedvenc színed?
            print szin ' a kedvenced!'
    -   name: "if"
        explanation: "Válassz az `if` utasítással"
        example: "Példa: if szin is zöld print 'szép!' else print 'csúnya'"
        demo_code: |-
            szin is ask Mi a kedvenc színed?
            if szin is zöld print 'szép!' else print 'csúnya'
    -   name: if utasítás a teknőssel
        explanation: Válassz az `if` utasítással
        example: 'Példa: if valasz is messze forward 100 else forward 5'
        demo_code: |-
            valasz is ask 'Milyen messze menjek?'
            if valasz is messze forward 100 else forward 5
    -   name: '{in}'
        explanation: Check elements with `{in}`
        example: "Example: {if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
        demo_code: "pretty_colors {is} green, yellow\ncolor {is} {ask} 'What {is} your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
    intro_text_2: "Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:\n"
    example_code_2: "```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice'\n{else} {print} 'boo!'\n```\n"
    example_code: "## Example Hedy Code\n```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'\n```\n"
    intro_text_3: "## Lists\nWhen we want to check if something is in a list, we can now use the `{in}` command.\nThis code prints pretty! if you choose green or yellow, and meh otherwise.\n"
    example_code_3: "```\npretty_colors {is} green, yellow\ncolor {is} {ask} 'What is your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!'\n{else} {print} 'meh'\n```\n"
6:
    start_code: "print '5-ször 5 az ' 5 * 5"
    intro_text: |-
        `ask`, `print` és `if` még mindig ugyanolyanok, mint a 5. szinten.
        De a 6. szinten jön valami új, tudsz majd számolni.

        Az összeadás könnyű, ugyanúgy írod, mint a matekban: `5+5`. A kivonás is jól működik,
        így írjuk: `5-5`

        A szorzás egy kicsit különbözik, ugyanis nincs szorzásjel a billentyűzeten. Nézd meg,
        tényleg nincs! Ezért használjuk a *-t: `5*5`. Olvasd ezt "5-ször 5-nek", így könnyen
        megjegyzed.
        ## Hedy Code példa
        ```
        print '5 plusz 5 egyenlő ' 5 + 5
        print '5 mínusz 5 egyenlő ' 5 - 5
        print '5 ször 5 egyenlő ' 5 * 5
        ```
    commands:
    -   name: "print"
        explanation: " Pontos kiíratás aposztrófokkal "
        example: "Példa: print '5-ször 5 az ' 5 * 5"
        demo_code: "print '5-ször 5 az ' 5 * 5"
    -   name: "`ask` és `if` számolásokkal"
        explanation: "Kérdezz egy számolást és ellenőrizd, hogy jó-e."
        example: "Példa: valasz = ask Mennyi 10+10?"
        demo_code: |-
            valasz = ask 'Mennyi 10+10?'
            if valasz is 20 print 'Igen!' else print 'Hoppá'
    -   name: "`ask` és `if` teknős"
        explanation: "Kérdezd meg a felhasználót mennyi szöget akar"
        example: "Example: szogek = ask 'Hány szög?'"
        demo_code: |-
            szogek = ask 'Hány szög?'
            szog = 360 / szogek
            forward 50
    example_code: "## Example Hedy code\n```\n{print} '5 plus 5 is ' 5 + 5\n{print} '5 minus 5 is ' 5 - 5\n{print} '5 {times} 5 is ' 5 * 5\n```\n"
    intro_text_2: "We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:\n"
    example_code_2: "```\nname = Hedy\nanswer = 20 + 4\n```\n"
7:
    start_code: "repeat 3 times print 'A Hedy szórakoztató!'"
    intro_text: |
        	
        `ask`, `print` és `if` ugyanúgy működik mint a 5. és az 6. szinten szinten.
        De az 7. szinten megjelenik a `repeat` parancs. A ‘repeat’ utasítást parancsok
        ismételt végrehajtásánál lehet használni.

        ## Hedy code példa
        ```
        repeat 3 times print 'A Hedy vicces'
        ```
    commands:
    -   name: "print"
        explanation: "Pontos kiíratás idézójelekkel."
        example: "Példa: print Szia, üdvözlünk a Hedy-nél.'"
        demo_code: "print 'Szia, üdvözlünk a Hedy-nél.'"
    -   name: "ask"
        explanation: "Kérdezz valamit az `ask`utasítással."
        example: "Példa: szin = ask Mi a kedvenc színed?"
        demo_code: |-
            szin = ask 'Mi a kedvenc színed?'
            print szin ' a kedvenced!'
    -   name: "if"
        explanation: "Készíts elágazást az `if` utasítással"
        example: "Példa: if szin is zöld print 'szép!' else print 'csúnya'"
        demo_code: |-
            szin = ask 'Mi a kedvenc színed?'
            if szin is zöld print 'szép!' else print 'csúnya'
    -   name: "repeat - teknős"
        explanation: "Ismétej meg egy kódsort `repeat` utasítással."
        example: "Példa: repeat 3 times forward 10"
        demo_code: |-
            repeat 3 times forward 10
    example_code: "## Example Hedy code\n```\n{repeat} 3 {times} {print} 'Hedy {is} fun!'\n```\n"
8:
    start_code: |-
        repeat 5 times
            print 'Sziasztok'
            print 'Ez 5-szor lett kiírva'
    intro_text: |-
        `ask` és `print` még mindig úgy működik, ahogyan ismered. De az `if` és a `repeat` utasítások megváltoztak!
        Most különböző utasítások egy csoportját futtathatod egyszerre, de behúzással
        tagolnod kell a kódot.
        Ez azt jelenti, hogy négy szóközt kell tennünk a sor elejére. Ez akkor is érvényes, ha csak
        egy sor blokkját akarod létrehozni.

        ## Hedy Code példa
        ```
        repeat 5 times
          print 'Sziasztok'
          print 'Ez 5-ször ismétlődik'
        ```
    commands:
    -   name: "print"
        explanation: "Írass ki valamit. Ne felejts el a posztrófot használni a helyes kiíratáshoz."
        example: "Példa: print '5-ször 5 az ' 5 * 5"
        demo_code: "print '5-ször 5 az ' 5 * 5"
    -   name: "`if` több sorral"
        explanation: "Kérdezz egy műveletet és ellenőrizd, hogy jó-e a válasz. Most két sort fogunk kiíratni."
        example: " Példa: valasz = ask Mennyi 5 + 5?"
        demo_code: |-
            valasz = ask 'Mennyi 5 + 5?'
            if valasz is 10
                print 'Nagyszerű!'
                print 'Valóban a válasz ' valasz
            else
                print 'Hoppá!'
                print 'A válasz 10'
    -   example: 'Example: draw a square'
        name: '`{repeat}` with turtle'
        explanation: '{repeat} multiple lines'
        demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
    example_code: "## Example Hedy code\n```\n{repeat} 5 {times}\n    {print} 'Hello everyone'\n    {print} 'This is all repeated 5 times'\n```\n"
9:
    start_code: |-
        repeat 3 times
            food = ask 'What do you want?'
            if food is 'pizza'
                print 'nice!'
            else
                print 'pizza is better'
    intro_text: |
        In this level you can not only use multiple lines with `if` and `repeat`, but you can also put them together!
        In the example you see an `if` command within a `repeat` command. It is also allowed the other way around, and an `if` is also allowed in an `if` and a `repeat` in a `repeat`.
        Give it a try!

        ## Example Hedy code
        ```
        repeat 3 times
            food = ask 'What do you want?'
            if food is 'pizza'
                print 'nice!'
            else
                print 'pizza is better'
        ```

    commands:
    -   name: "`if` with multiple lines"
        explanation: "The answer of a sum of questions with 'ask' and see if it is correct. Now we print out two lines."
        example: "Example: answer = ask 'What is 20 plus 20?'"
        demo_code: |-
            answer = ask 'What is 20 plus 20?'
            if answer is 20
                print 'Well done!!'
                print 'The answer is indeed' answer
            else
                print 'Wrong'
                print 'The answer is 20'
    -   name: "`repeat` and turtle"
        explanation: "Repeat multiple lines"
        example: "Example: create a square"
        demo_code: |-
            repeat 4 times
                turn 90
                forward 50
    example_code: "## Example Hedy code\n```\n{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    else\n        {print} 'pizza is better'\n```\n"
10:
    start_code: |-
        animals is dog, cat, blobfish
        for animal in animals
          print 'I love ' animal
    intro_text: |
        In this level we learn a new code called `for`. With `for` you can make a list and use all elements.
        `for` creates a block, like `repeat` and `if` so all lines in the block need to start with spaces.

        ## Example Hedy code
        ```
        animals is dog, cat, blobfish
        for animal in animals
          print 'I love ' animal
        ```
    commands:
    -   name: "print"
        explanation: "Print something. Remember to use a quotation mark for literal printing."
        example: "Example: print '5 times 5 is ' 5 * 5"
        demo_code: "print '5 times 5 is ' 5 * 5"
    -   name: "for with a list"
        explanation: "print all things in a list "
        example: "Example: for dier in dieren"
        demo_code: |-
            animals is dog, cat, blobfish
            for animal in animals
              print 'I love ' animal
    example_code: "## Example Hedy code\n```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal\n```\n"
11:
    start_code: |-
        for i in range 1 to 10
            print i
        print 'Aki bújt, aki nem, megyek!'
    intro_text: "`print` ugyanúgy működik, mint eddig, de a `repeat` utasítást `for` helyettesíti! `for i in range 1 to 5` utasításokat fogod használni, `repeat 5 times` helyett. Használhatsz `i` -t is a programban! Ne felejts el behúzásokat használni a `for` és `if` utasítások után (ez azt jelenti, hogy egy sort négy szóközzel kell kezdned) "
    commands:
    -   name: "repeat"
        explanation: "a `repeat` utasítást `for` utasítással helyettesítjük "
        example: "for i in range 1 to 10"
        demo_code: |
            for i in range 1 to 10
              print i
            print 'Aki bújt, aki nem, megyek!'
    -   explanation: Kérdezz rá egy összegre, és ellenőrizd, hogy helyes -e. Most 2 sort írathatunk ki.
        example: |-
            	
            Példa: valasz = ask 'Mennyi 5+5?'
        demo_code: |-
            valasz = ask 'Mennyi 5+5?'
            if valasz is 10
                print 'Jól van!'
                print 'Valóban, a válasz ez volt ' valasz
            else
                print 'Juj!'
                print 'A válasz 10'
        name: ask
    example_code: "## Example Hedy code\n```\nfor counter in range 1 to 5\n    print counter\n```\n"
12:
    start_code: |-
        print 'decimal numbers now need to use a dot'
        print 2.5 + 2.5
    intro_text: |
        So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that cmputers use the . for decimal numbers.

        For this level on you will also have to use quotation marks when storing a text with `is`:

        ```
        name = 'Hedy'
        print 'Hello ' name
        ```

        For numbers, you do not use quotation marks in the `is`:
        ```
        score = 25
        print 'You got ' score
        ```
# Marleen, deze tekst hierboven en commands hieronder moet voor Engels nog uitgebreid worden (zoals bij Nederlands)
    # jaja hermans, ik ben al bezig!
    commands:
    -   name: "float directly"
        explanation: "Calculation with decimals"
        example: "print 2.5 + 2.5"
        demo_code: |
            print 'Calculate away!'
            print 'Two and a half plus two and a half is...'
            print 2.5 + 2.5
    -   name: "float in var"
        explanation: "Storing a calculation with decimals"
        example: "antwoord = 2.5 + 2.5"
        demo_code: |
            answer = 2.5 + 2.5
            print 'Calculate away!'
            print 'Two and a half plus two and a half is...'
            print answer

    -   name: quotes after {if} comparison
        example: name = 'Hedy'
        explanation: Text with quotation marks after {if}
        demo_code: "name = {ask} 'Who are you?'\n{if} name = 'Hedy'\n    {print} 'Hi there!'\n"
    -   name: quotes in list
        explanation: A list with quotation marks
        example: name = 'Hedy', 'Felienne'
        demo_code: "superheroes = 'Iron Man', 'Batman', 'Superman'\n{print} superheroes {at} {random}\n"
    example_code_2: "```\nname = 'Hedy the Robot'\n{print} 'Hello ' name\n```\n"
    intro_text_4: "**All text after `{if}` comparisons need quotation marks too**\n"
    example_code_4: "```\nname = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n"
    intro_text_5: "**Numbers don't need quotation marks**\nFor numbers, you do not use quotation marks in the `=`:\n"
    example_code_5: "```\nscore = 25\n{print} 'You got ' score\n```\n"
    example_code: "## Example Hedy code\n```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n"
    intro_text_2: "**All texts need to be in quotation marks**\nFor this level on you will also have to use quotation marks when storing a text with `=`:\n"
    intro_text_3: "**All items in lists need quotation marks too**\nLists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.\nThis allows you to save two words as 1 item on the list, for example 'Iron Man'.\n"
    example_code_3: "```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n"
13:
    start_code: |
        name = ask 'what is your name?'
        leeftijd = ask 'what is your age?'
        if name is 'Hedy' and age is 2
            print 'You are the real Hedy!'
    intro_text: |
        Most megtanuljuk `and` és ` or` kifejezések használatát! Ha két állítást szeretnél
        ellenőrizni, akkor nem kell kettő `if` utasítást használnod, használhatod az `and` és
        az  `or` parancsokat. Ha az `and` parancsot használod, akkor az `and` bal és jobb
        oldalán mindkét állításnak igaznak kell lennie. Használhatjuk az `or` kifejezést is.
        Ekkor csak egy állításnak kell helyesnek lennie.
    commands:
    -   name: És
        explanation: |
            Mindkét állításnak (az `and` bal és jobb oldalán) igaznak kell lenni.
        example: |
            if 3+2 is 5 and 2+2 is 4
        demo_code: |-
            valasz1 = ask 'Mennyi 3+2?'
            valasz2 = ask 'Mennyi 2+2?'
            if valasz1 is 5 and valasz2 is 4
             print 'Mindkét válasz helyes'
            else
             print 'Legalább egy válasz hibás!'
    -   name: Vagy
        explanation: |
            `Or` Az `or` jobb vagy baloldalán legalább az egyik válasznak igaznak kell lenni, ha
            mindkettő igaz, az is jó.
        example: if 3+2 is 5 or 2+2 is 4
        demo_code: |-
            valasz1 = ask 'Mennyi 3+2?'
            valasz2 = ask 'Mennyi 2+2?'
            if valasz1 is 5 or valasz2 is 4
             print 'Legalább egy válasz helyes!'
            else
             print 'Mindkét válasz hibás!'
#16:
#    start_code: |-
#        # Ez egy olyan program amely néhány matematikai kérdést fog feltenni
#        for i in range(1, 10):
#            # Ki fogjuk kérdezni az 5 ös szorzótáblát
#            valasz is input('Mennyi ' i ' szorozva 5-tel?')
#            # Leellenőrizzük hogy a valasz megegyezik-e a mi eredményünkkel
#            helyes_valasz is i * 5
#            if valasz is helyes_valasz:
#                print(valasz ' helyes')
#            else:
#                print ('Ez hibás, feltételezem ennyi: ' i*5)
#    intro_text: |-
#        Ha nagyobb programokat készítesz, meg kell találnod a módját, hogy emlékezz
#        arra, melyik kódrészlet mit csinál. Ehhez megjegyzéseket használunk. Egy
#        megjegyzés a következőképpen néz ki:
#         "# Ez egy megjegyzés". A # után minden láthatatlan lesz a kód számára
#    commands:
#    -   name: Megjegyzés
#        explanation: |
#            Oda teszünk megjegyzést, ahova csak akarunk.
#        example: |
#            #Ez egy megjegyzés
#        demo_code: |
#            # Ez a program kiírja hogy szia
#            # Ez Hedy-ben készült
#            # Ez nem csinál mást mint kiírja Szia
#            print('szia!')
#20:
#    start_code: |-
#        gyumolcs = ['alma', 'banán', 'cseresznye']
#        for i in range(1, 3):
#            print(gyumolcs[i])
#    intro_text: A for ciklussal egy listában is mindent láthatunk. Mivel a listában három dolog van, a ciklust 1-től 3-ig vesszük. Most mindent kiíratunk a ciklusban.
#    commands:
#    -   name: Lista hossza
#        explanation: A `length` utasítással láthatjuk a lista méretét. A példában szereplő lista hossza 3, mert három dolog van a listában
#        example: length(lista)
#        demo_code: |-
#            gyumolcs = ['alma', 'banán', 'cseresznye']
#            print('a lista hossza ' length(gyumolcs))
#            for i in range(1, length(gyumolcs)):
#                print(gyumolcs[i])
#21:
#    start_code: |-
#        print('Mennyi 5+3?')
#        valasz = 5+3
#        print('a válasz:')
#        print(valasz)
#        if valasz == 8:
#            print('Ez helyes')
#        else:
#            print('Ó nem, ez hibás!')
#    intro_text: 'Most megváltoztatjuk a következőt: "=" és "==". A "=" kifejezést akkor használjuk, ha értéket szeretnénk hozzárendelni egy változóhoz. Ha 8 -at szeretnél rendelni az valasz nevű változóhoz, akkor valasz = 8. `==` jelet akkor használjuk, ha azt akarjuk látni, hogy két dolog ugyanaz-e.'
#    commands:
#    -   name: Összehasonlítás
#        explanation: Ha összehasonlítani akarunk, akkor a == jelet használjuk. 5+3 == 8 ellenőrzi, hogy az 5+3 egyenlő -e 8 -cal
#        example: 'Például: 5+3 == 8'
#        demo_code: |-
#            if 5+3 == 8:
#                print('5+3 valóban 8')
#            else:
#                print('Ezt nem íratjuk ki, mert az 5+3 az 8!')
#    -   name: Érték hozzárendelése
#        explanation: Ha azt akarjuk mondani, hogy a valasz nevű változó értéke 8, akkor a valasz = 8 utasítást használjuk.
#        example: |-
#            Például: valasz = 8
#        demo_code: |-
#            print('Mennyi 5+3?')
#            valasz = 5+3
#            print('a válasz most:')
#            print(valasz)
#    -   name: Összehasonlítás és érték hozzárendelése
#        explanation: Ha két értéket akarunk összehasonlítani, akkor a "==" jelet használjuk. Ha változót akarunk hozzárendelni, akkor a "=" karaktert használjuk.
#        example: 'Például: 5+3 == 8, valasz=8'
#        demo_code: |-
#            print('Mennyi 5+3?')
#            valasz = 5+3
#            print('a válasz:')
#            print(valasz)
#            if valasz == 8:
#                print('Ez helyes')
#            else:
#                print('Ó nem, ez hibás!')
    example_code: "```\nname = ask 'what is your name?'\nage = ask 'what is your age?'\nif name is 'Hedy' and age is 2\n    print 'You are the real Hedy!'\n```\n"
14:
    start_code: |
        kor = ask 'Hány éves vagy?'
        if kor < 13
         print 'Fiatalabb vagy nálam!'
        else
         print 'Idősebb vagy nálam!'
    intro_text: |
        További új elemeket fogunk megtanulni! Lehet, hogy már a matematikából ismered
        ezeket a jeleket, a `<` és a `>`. A `<` ellenőrzi, hogy az első szám kisebb-e, mint a
        második, például `4 < 5`. A `>` ellenőrzi, hogy az első szám nagyobb-e, mint a
        második, például `6 > 5`.
    commands:
    -   name: Kisebb
        explanation: |
            A `<` ellenőrzi, hogy az első szám kisebb-e, mint a második. Például, ha le akarjuk
            ellenőrizni, hogy valtozo kisebb-e, mint 15, akkor `valtozo< 15` utasítást használjuk.
        example: |
            Például: kor<13
        demo_code: |
            kor = ask 'Hány éves vagy?'
            if kor < 13
             print 'Fiatalabb vagy, mint én!'
    -   name: Nagyobb
        explanation: |
            A `>` ellenőrzi, hogy az első szám nagyobb-e, mint a második. Például, ha le akarjuk
            ellenőrizni, hogy valtozo nagyobb-e, mint 15, akkor `valtozo>15` utasítást használjuk.
        example: |
            Például: kor>13
        demo_code: |
            kor = ask 'Hány éves vagy?'
            if kor < 13
             print 'Idősebb vagy, mint én!'
    -   name: Equal
        explanation: We use the `==` to check if two things are the same.
        example: 'For example: answer == 25'
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer == 25\n    {print} 'That {is} correct!'"
    -   name: Not equal
        explanation: 'We use the `!=` to check if two things are not the same. '
        example: 'For example: answer != 25'
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer != 25\n    {print} 'That is not correct!'"
    -   explanation: We use the `<=` to check if the first number is smaller than or equal to the second number.
        example: 'For example: age <= 12'
        name: Smaller {or} equal
        demo_code: "age = {ask} 'How old are you?'\n{if} age <= 12\n    {print} 'You are younger than me!'"
    -   name: Bigger or equal
        example: 'For example: age >= 14'
        demo_code: "age = {ask} 'How old are you?'\n{if} age >= 14\n    {print} 'You are older than me!'"
        explanation: We use the `>=` to check if the first number is bigger than or equal to the second number.
    intro_text_2: "From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:\n"
    example_code_2: "```\nname = {ask} 'What is your name?'\n{if} name == 'Hedy'\n    {print} 'You are coo!'\n```\n"
    example_code: "## Example Hedy Code\n```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n"
    intro_text_3: "You can also compare if something is *not* equal to something else using `!=` like this:\n"
    example_code_3: "```\nname = {ask} 'What is your name?'\n{if} name != 'Hedy'\n    {print} 'You are not Hedy'\n```\n"
15:
    start_code: |-
        valasz = 0
        while valasz != 25
          valasz = ask 'Mennyi 5-ször 5?'
        print 'A helyes válasz megadásra került'
    intro_text: |
        Tanulni fogunk egy új ciklust, a `while` ciklust! Addig folytatjuk a ciklust, amíg az állítás
        igaz / érvényes! Tehát a példakódnál addig folytatjuk, amíg meg nem adják a helyes
        választ. Ha soha nem adják meg a helyes választ, akkor a ciklus soha nem ér véget!
    commands:
    -   name: |
            Logikai amíg
        explanation: A `while` ciklust `True` és `False` segítségével használhatjuk.
        example: |
            while valasz is False
        demo_code: |
            valasz = 0
            while valasz != 25
              valasz = ask 'Mennyi 5-ször 5?'
            print 'A helyes válasz megadásra került'
    -   name: |
            Kisebb amíg
        explanation: |-
            Használhatjuk a `while` ciklust a `<` és `>` karakterekkel is. Légy óvatos, meg kell
            változtatnod a számot, hogy a ciklus véget érjen. Ezt úgy tesszük, hogy a szam
            változó értéke szam + 1 lesz.
        example: 'For example: while szam < 3'
        demo_code: |
            szam = 1
            while szam < 3
              print 'Ezt ' 3 - szam ' alkalommal ismételjük'
              szam = szam + 1
            print 'Készen vagyunk'

    example_code: "## Example Hedy code\n```\nanswer = 0\nwhile answer != 25\n    answer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n```\n"
16:
    start_code: |-
        gyumolcs = ['alma', 'banán', 'cseresznye']
        print gyumolcs 
    intro_text: "Listáknál szögletes zárójelet fogunk használni! A lista egyes elemeit aposztrófok (') közé tesszük. "
    commands:
    -   name: "Szögletes zárójel listák körül"
        explanation: " Listáknál szögletes zárójelet fogunk használni! A lista egyes elemeit aposztrófok (') közé tesszük."
        example: "Példa: gyumolcs = ['alma', 'banán', 'cseresznye']"
        demo_code: |-
            gyumolcs = ['alma', 'banán', 'cseresznye']
            print gyumolcs 
    -   name: "Vegyünk ki egy elemet a listából"
        explanation: "Egy elem kivételéhez egy [szám] jelölést használunk, pédául a gyumolcs[1] azt jelenti, hogy az első elemet kapjuk meg a gyumolcs nevű listából!"
        example: "Példa: elsogyumolcs = gyumolcs[1]"
        demo_code: |-
            gyumolcs = ['alma', 'banán', 'cseresznye']
            elsogyumolcs = gyumolcs[1]
            print gyumolcs 
    -   name: "Elem véletlenszerű kiválasztása listából"
        explanation: " Véletlenszerű elem kiválasztása listából a [random] utasítással történik, például gyumolcs[random] utasítás azt jelenti, hogy véletlenszerűen kapjuk vissza a gyümölcs nevű lista egyik elemét!"
        example: "Példa: veletlengyumolcs = gyumolcs[random]"
        demo_code: |-
            gyumolcs = ['alma', 'banán', 'cseresznye']
            veletlengyumolcs = gyumolcs[random]
            print veletlengyumolcs 
    example_code: "## Example Hedy Code\n```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
17:
    start_code: |-
        for i in range 1 to 10:
            print i
        print 'Aki bújt, aki nem, megyek!'
    intro_text: "Most egy kicsit meg fogjuk változtatni a behúzást. Minden alkalommal, amikor behúzást használunk, az előző sor végére`:` jelet teszünk."
    commands:
    -   name: "for ezzel:"
        explanation: "Ha a `for` utasítást használjuk, egy  `:`-ot teszünk a `for` utasítás végére!"
        example: "for i in range 1 to 10:"
        demo_code: |-
            for i in range 1 to 12:
                print i
            print 'Aki bújt, aki nem, megyek!'
    -   name: "if ezzel:"
        explanation: "Ugyanúgy kell eljárnunk `if` állítás esetén"
        example: "if szin is zöld:'"
        demo_code: |-
            szin = ask 'Mi a kedvenc színed?'
            if szin is zöld:
                print 'a szín zöld'
            else:
                print 'A szin nem zöld'
    -   name: "elif"
        explanation: "Mutatunk neked egy új utasítást, amit ezután használhatsz: `elif`. Az `elif` azt jelenti \"else if\". Először leellenőrizzük hogy `if` helyes-e, ha nem helyes, megnézzük az `elif` feltételt és ha ez sem helyes, akkor `else` utasításhoz megyünk."
        example: "elif a is 5:"
        demo_code: |-
            a = 2
            if a is 1:
                print 'a értéke 1'
            elif a is 2:
                print 'a értéke 2'
            else:
                print 'a értéke nem 1 vagy 2'
18:
    start_code: "naam = 'Hedy'\n{print}('My name is ', naam)"
    commands:
    -   name: '{print}'
        explanation: With `{print}` you need to use parentheses
        example: '{print}'
        demo_code: "{print}('hi!')"
    -   demo_code: "naam = 'Hedy'\n{print}('my name is ', naam)"
        name: '{print} with var'
        explanation: With `{print}` you need to use parentheses and commas if you {print} more items
        example: '{print}'
    intro_text: "We arrived at real pythoncode! That means we need to use parentheses with {print} and {range} from now on.\nThat looks like this:\n```\n{print}('my name is Hedy!')\n```\nIf you want to print more thant one items, you need to separate them by commas.\n```\nnaam = 'Hedy'\n{print}('my name is ', naam)\n```"
