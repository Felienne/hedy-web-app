1:
    intro_text: |+
        Üdvözlünk a Hedynél! Az első szinten a `print`, `ask` és `echo` parancsokat használhatod.

        A baloldali sávban az 1. szint összes parancsát láthatod.

        Nyomd meg a kék gombot és a kód megjelenik a programozási ablakban!

        Próbáld ki a kódot a 'Kód futtatása' gomb megnyomásával a bal oldali programozási
        ablak alatt.

        Nem tudod mit is csinálj? A következő füleken találsz néhány ötletet.

    start_code: "print Helló világ!"
    commands:
    -   name: "print"
        explanation: "Írass ki valamit vele: `print`."
        example: "Példa: print Szia, üdvözlünk a Hedynél!"
        demo_code: "print Szia, üdvözlünk a Hedynél!"
    -   name: "ask"
        explanation: "Kérdezz valamit vele: `ask`."
        example: "ask 'Mi a kedvenc színed?'"
        demo_code: "ask 'Mi a kedvenc színed?'"
    -   name: "echo"
        explanation: "Ismételj valamit: `echo`."
        example: "Példa: echo a kedvenc színed "
        demo_code: |-
            ask Mi a kedvenc színed?
            echo a kedvenc színed 
    -   name: forward
        explanation: Rajzolj egy vonalat a `forward` utasítással.
        example: 'Példa: forward 100'
        demo_code: forward 100
    -   name: turn
        explanation: Fordulj a rajzoló teknőssel a `turn` utasítással
        example: 'Példa: turn'
        demo_code: |-
            forward 25
            turn left
            forward 25
            turn right
2:
    intro_text: |
        A 2. szinten valami újat tanulunk. El tudsz nevezni egy szót az 'is' utasítással.

        Ha azt a kódot írod, hogy 'nev is Hedy' akkor a nev (nem használunk ékezetet) szót
        mindenhol használhatod a kódodban és a Hedy értéket kapja.

        Jegyezd meg: 'ask' megváltozott, egy szó segítségével elmentheted a választ, mint itt:
        ```
        valasz is ask Mi a neved?
        ```

        A print utasítás úgy működik, mint az 1. szinten, de az echo utasításra már nem lesz
        szükséged.

        A 2. szinten készíthetsz listát is. Kérheted a számítógépet, hogy véletlenszerűen
        válasszon valamit a listából. Ezt az `at random` utasítással teheted meg.

        A baloldali sávban a 2. szint összes parancsát láthatod. A következő füleken különböző
        feladatokat találsz.
    start_code: "print Helló világ!"
    commands:
    -   name: "is"
        explanation: "Az `is` használatához adj egy nevet (ne legyen benne ékezet) a szónak, amit ki akarsz íratni."
        example: "Példa: nev is Hedy."
        demo_code: |-
            nev is Hedy
            print szia nev
    -   name: "ask"
        explanation: "Kérdezz valami az `ask` utasítással. Vigyázz! A válaszodnak nevet kell adnod az `is` segítségével."
        example: "Példa: szin is ask Mi a kedvenc színed?"
        demo_code: |-
            szin is ask Mi a kedvenc színed?
            print szin a kedvenc színed!
    -   name: "choose_random"
        explanation: "Válassz egy véletlen szót egy csoportból az `at` és `random` utasítással."
        example: "Példa: állatok is kutya, macska, kenguru."
        demo_code: |-
            állatok is kutya, macska, kenguru
            print állatok at random
    -   name: choose_random
        explanation: Válassz véletlenszerűen egy szót az `at` és a `random` utasításokkal
        example: 'Példa: allatok is kutya, cica, kenguru.'
        demo_code: |-
            allatok is kutya, cica, kenguru
            print allatok at random
3:
    start_code: "print 'Helló világ'"
    intro_text: |-
        `ask` ugyanolyan, a 3. szinten, mint eddig, de `print` most más lesz.

        Amit ki akarsz íratni, idézőjelbe kell tenned.

        Ez hasznos, mert most már mindent kiírathatsz, amit csak akarsz. Az 'is' utasítással
        definiálhatod azt a szót, amiben a szöveget tárolod.

        A legtöbb programozási nyelv idézőjelet (szimpla idézőjel, más néven aposztróf) használ
        a kiíratáshoz, így egy kicsit közelebb kerülünk az igazi programozáshoz.

        ## A feladatok egyre nehezebbek lesznek. 
        Most is megtalálod a parancsokat a baloldalon, a feladatokat pedig a füleken. A feladatok egyre nehezebbé válnak az egymást követő füleken. A legjobb, ha a baloldalon kezded a feladatokat a történettel és így haladsz jobbra a nagyobb kihívást jelentő feladatok felé.
    commands:
    -   name: "print"
        explanation: "Kiíratás idézőjelekkel"
        example: "Példa: print Szia, üdvözlünk a Hedy-nél.'"
        demo_code: "print 'Szia, üdvözlünk a Hedy-nél.'"
    -   name: "is"
        explanation: "Adj nevet a szövegnek és írasd ki `print`segítségével idézőjelek nélkül"
        example: "Példa: nev is Hedy."
        demo_code: |-
            nev is Hedy
            print 'A nevem ' nev
    -   name: "ask"
        explanation: "Kérdezz valamit `ask`segítségével."
        example: "Példa: szin is ask Mi a kedvenc színed?"
        demo_code: |
            szin is ask 'Mi a kedvenc színed?'
            print szin ' a kedvenc színed !'
4:
    start_code: |-
        nev is ask 'Hogy hívnak?'
        if nev is Hedy print 'klassz!' else print 'ajaj'
    intro_text: |-
        `ask` és `print` ugyanúgy működnek, mint a 3. szinten. A 4. szinten hozzájön az `if`
        parancs! Az 'if' paranccsal két különböző lehetőség között választhatsz.

        ## Hedy Code példa

        ```
        nev is ask mi a neved?
        if nev is Hedy print 'klassz' else print 'úhh'
        ```
        Ez a kód kiírja, hogy klassz, ha a Hedy nevet adod meg névként, és úhh-t, ha valami
        mást írsz be.

        ## A feladatok egyre nehezebbek lesznek.

        A feladatok a 4. szinten a füleken egyre nehezebbek lesznek. Csináld őket balról jobbra
        haladva.
    commands:
    -   name: "print"
        explanation: "Pontos kiíratás idézójelekkel."
        example: "Példa: print 'Szia, üdvözlünk a Hedy-nél.'"
        demo_code: "print 'Szia, üdvözlünk a Hedy-nél.'"
    -   name: "ask"
        explanation: "Kérdezz valamit az `ask`utasítással."
        example: "Példa: szin is ask Mi a kedvenc színed?"
        demo_code: |-
            szin is ask Mi a kedvenc színed?
            print szin ' a kedvenced!'
    -   name: "if"
        explanation: "Válassz az `if` utasítással"
        example: "Példa: if szin is zöld print 'szép!' else print 'csúnya'"
        demo_code: |-
            szin is ask Mi a kedvenc színed?
            if szin is zöld print 'szép!' else print 'csúnya'
    -   name: if utasítás a teknőssel
        explanation: Válassz az `if` utasítással
        example: 'Példa: if valasz is messze forward 100 else forward 5'
        demo_code: |-
            valasz is ask 'Milyen messze menjek?'
            if valasz is messze forward 100 else forward 5
5:
    start_code: "print '5-ször 5 az ' 5 * 5"
    intro_text: |-
        `ask`, `print` és `if` még mindig ugyanolyanok, mint a 4. szinten.
        De a 5. szinten jön valami új, tudsz majd számolni.

        Az összeadás könnyű, ugyanúgy írod, mint a matekban: `5+5`. A kivonás is jól működik,
        így írjuk: `5-5`

        A szorzás egy kicsit különbözik, ugyanis nincs szorzásjel a billentyűzeten. Nézd meg,
        tényleg nincs! Ezért használjuk a *-t: `5*5`. Olvasd ezt "5-ször 5-nek", így könnyen
        megjegyzed.
        ## Hedy Code példa
        ```
        print '5 plusz 5 egyenlő ' 5 + 5
        print '5 mínusz 5 egyenlő ' 5 - 5
        print '5 ször 5 egyenlő ' 5 * 5
        ```
    commands:
    -   name: "print"
        explanation: " Pontos kiíratás aposztrófokkal "
        example: "Példa: print '5-ször 5 az ' 5 * 5"
        demo_code: "print '5-ször 5 az ' 5 * 5"
    -   name: "`ask` és `if` számolásokkal"
        explanation: "Kérdezz egy számolást és ellenőrizd, hogy jó-e."
        example: "Példa: valasz is ask Mennyi 10+10?"
        demo_code: |-
            valasz is ask 'Mennyi 10+10?'
            if valasz is 20 print 'Igen!' else print 'Hoppá'
    -   name: "`ask` és `if` teknős"
        explanation: "Kérdezd meg a felhasználót mennyi szöget akar"
        example: "Example: szogek is ask 'Hány szög?'"
        demo_code: |-
            szogek is ask 'Hány szög?'
            szog is 360 / szogek
            forward 50
6:
    start_code: "repeat 3 times print 'A Hedy szórakoztató!'"
    intro_text: |
        	
        `ask`, `print` és `if` ugyanúgy működik mint a 4. és az 5. szinten szinten.
        De az 6. szinten megjelenik a `repeat` parancs. A ‘repeat’ utasítást parancsok
        ismételt végrehajtásánál lehet használni.

        ## Hedy code példa
        ```
        repeat 3 times print 'A Hedy vicces'
        ```
    commands:
    -   name: "print"
        explanation: "Pontos kiíratás idézójelekkel."
        example: "Példa: print Szia, üdvözlünk a Hedy-nél.'"
        demo_code: "print 'Szia, üdvözlünk a Hedy-nél.'"
    -   name: "ask"
        explanation: "Kérdezz valamit az `ask`utasítással."
        example: "Példa: szin is ask Mi a kedvenc színed?"
        demo_code: |-
            szin is ask 'Mi a kedvenc színed?'
            print szin ' a kedvenced!'
    -   name: "if"
        explanation: "Készíts elágazást az `if` utasítással"
        example: "Példa: if szin is zöld print 'szép!' else print 'csúnya'"
        demo_code: |-
            szin is ask 'Mi a kedvenc színed?'
            if szin is zöld print 'szép!' else print 'csúnya'
    -   name: "repeat - teknős"
        explanation: "Ismétej meg egy kódsort `repeat` utasítással."
        example: "Példa: repeat 3 times forward 10"
        demo_code: |-
            repeat 3 times forward 10
7:
    start_code: |-
        repeat 5 times
            print 'Sziasztok'
            print 'Ez 5-szor lett kiírva'
    intro_text: |-
        `ask` és `print` még mindig úgy működik, ahogyan ismered. De az `if` és a `repeat` utasítások megváltoztak!
        Most különböző utasítások egy csoportját futtathatod egyszerre, de behúzással
        tagolnod kell a kódot.
        Ez azt jelenti, hogy négy szóközt kell tennünk a sor elejére. Ez akkor is érvényes, ha csak
        egy sor blokkját akarod létrehozni.

        ## Hedy Code példa
        ```
        repeat 5 times
          print 'Sziasztok'
          print 'Ez 5-ször ismétlődik'
        ```
    commands:
    -   name: "print"
        explanation: "Írass ki valamit. Ne felejts el a posztrófot használni a helyes kiíratáshoz."
        example: "Példa: print '5-ször 5 az ' 5 * 5"
        demo_code: "print '5-ször 5 az ' 5 * 5"
    -   name: "`if` több sorral"
        explanation: "Kérdezz egy műveletet és ellenőrizd, hogy jó-e a válasz. Most két sort fogunk kiíratni."
        example: " Példa: valasz is ask Mennyi 5 + 5?"
        demo_code: |-
            valasz is ask 'Mennyi 5 + 5?'
            if valasz is 10
                print 'Nagyszerű!'
                print 'Valóban a válasz ' valasz
            else
                print 'Hoppá!'
                print 'A válasz 10'
9:
    start_code: |-
        animals is dog, cat, blobfish
        for animal in animals
          print 'I love ' animal
    intro_text: |
        In this level we learn a new code called `for`. With `for` you can make a list and use all elements.
        `for` creates a block, like `repeat` and `if` so all lines in the block need to start with spaces.

        ## Example Hedy code
        ```
        animals is dog, cat, blobfish
        for animal in animals
          print 'I love ' animal
        ```
    commands:
    -   name: "print"
        explanation: "Print something. Remember to use a quotation mark for literal printing."
        example: "Example: print '5 times 5 is ' 5 * 5"
        demo_code: "print '5 times 5 is ' 5 * 5"
    -   name: "for with a list"
        explanation: "print all things in a list "
        example: "Example: for dier in dieren"
        demo_code: |-
            animals is dog, cat, blobfish
            for animal in animals
              print 'I love ' animal
10:
    start_code: |-
        for i in range 1 to 10
            print i
        print 'Aki bújt, aki nem, megyek!'
    intro_text: "`print` ugyanúgy működik, mint eddig, de a `repeat` utasítást `for` helyettesíti! `for i in range 1 to 5` utasításokat fogod használni, `repeat 5 times` helyett. Használhatsz `i` -t is a programban! Ne felejts el behúzásokat használni a `for` és `if` utasítások után (ez azt jelenti, hogy egy sort négy szóközzel kell kezdned) "
    commands:
    -   name: "repeat"
        explanation: "a `repeat` utasítást `for` utasítással helyettesítjük "
        example: "for i in range 1 to 10"
        demo_code: |
            for i in range 1 to 10
              print i
            print 'Aki bújt, aki nem, megyek!'
    -   explanation: Kérdezz rá egy összegre, és ellenőrizd, hogy helyes -e. Most 2 sort írathatunk ki.
        example: |-
            	
            Példa: valasz is ask 'Mennyi 5+5?'
        demo_code: |-
            valasz is ask 'Mennyi 5+5?'
            if valasz is 10
                print 'Jól van!'
                print 'Valóban, a válasz ez volt ' valasz
            else
                print 'Juj!'
                print 'A válasz 10'
        name: ask
12:
    start_code: |
        kor is ask 'Hány éves vagy?'
        if kor < 13:
         print 'Fiatalabb vagy nálam!'
        else
         print 'Idősebb vagy nálam!'
    intro_text: |
        További új elemeket fogunk megtanulni! Lehet, hogy már a matematikából ismered
        ezeket a jeleket, a `<` és a `>`. A `<` ellenőrzi, hogy az első szám kisebb-e, mint a
        második, például `4 < 5`. A `>` ellenőrzi, hogy az első szám nagyobb-e, mint a
        második, például `6 > 5`.
    commands:
    -   name: Kisebb
        explanation: |
            A `<` ellenőrzi, hogy az első szám kisebb-e, mint a második. Például, ha le akarjuk
            ellenőrizni, hogy valtozo kisebb-e, mint 15, akkor `valtozo< 15` utasítást használjuk.
        example: |
            Például: kor<13
        demo_code: |
            kor is ask 'Hány éves vagy?'
            if kor < 13
             print 'Fiatalabb vagy, mint én!'
    -   name: Nagyobb
        explanation: |
            A `>` ellenőrzi, hogy az első szám nagyobb-e, mint a második. Például, ha le akarjuk
            ellenőrizni, hogy valtozo nagyobb-e, mint 15, akkor `valtozo>15` utasítást használjuk.
        example: |
            Például: kor>13
        demo_code: |
            kor is ask 'Hány éves vagy?'
            if kor < 13
             print 'Idősebb vagy, mint én!'
13:
    start_code: |-
        valasz is 0
        while jo_valasz != 25
          valasz is ask 'Mennyi 5-ször 5?'
        print 'A helyes válasz megadásra került'
    intro_text: |
        Tanulni fogunk egy új ciklust, a `while` ciklust! Addig folytatjuk a ciklust, amíg az állítás
        igaz / érvényes! Tehát a példakódnál addig folytatjuk, amíg meg nem adják a helyes
        választ. Ha soha nem adják meg a helyes választ, akkor a ciklus soha nem ér véget!
    commands:
    -   name: |
            Logikai amíg
        explanation: A `while` ciklust `True` és `False` segítségével használhatjuk.
        example: |
            while jo_valasz is False
        demo_code: |
            valasz is 0
            while jo_valasz != 25
              valasz is ask 'Mennyi 5-ször 5?'
            print 'A helyes válasz megadásra került'
    -   name: |
            Kisebb amíg
        explanation: |-
            Használhatjuk a `while` ciklust a `<` és `>` karakterekkel is. Légy óvatos, meg kell
            változtatnod a számot, hogy a ciklus véget érjen. Ezt úgy tesszük, hogy a szam
            változó értéke szam + 1 lesz.
        example: 'For example: while szam < 3'
        demo_code: |
            szam is 1
            while szam < 3
              print 'Ezt ' 3 - szam ' alkalommal ismételjük'
              szam is szam + 1
            print 'Készen vagyunk'

14:
    start_code: |-
        gyumolcs is ['alma', 'banán', 'cseresznye']
        print gyumolcs 
    intro_text: "Listáknál szögletes zárójelet fogunk használni! A lista egyes elemeit aposztrófok (') közé tesszük. "
    commands:
    -   name: "Szögletes zárójel listák körül"
        explanation: " Listáknál szögletes zárójelet fogunk használni! A lista egyes elemeit aposztrófok (') közé tesszük."
        example: "Példa: gyumolcs is ['alma', 'banán', 'cseresznye']"
        demo_code: |-
            gyumolcs is ['alma', 'banán', 'cseresznye']
            print gyumolcs 
    -   name: "Vegyünk ki egy elemet a listából"
        explanation: "Egy elem kivételéhez egy [szám] jelölést használunk, pédául a gyumolcs[1] azt jelenti, hogy az első elemet kapjuk meg a gyumolcs nevű listából!"
        example: "Példa: elsogyumolcs is gyumolcs[1]"
        demo_code: |-
            gyumolcs is ['alma', 'banán', 'cseresznye']
            elsogyumolcs is gyumolcs[1]
            print gyumolcs 
    -   name: "Elem véletlenszerű kiválasztása listából"
        explanation: " Véletlenszerű elem kiválasztása listából a [random] utasítással történik, például gyumolcs[random] utasítás azt jelenti, hogy véletlenszerűen kapjuk vissza a gyümölcs nevű lista egyik elemét!"
        example: "Példa: veletlengyumolcs is gyumolcs[random]"
        demo_code: |-
            gyumolcs is ['alma', 'banán', 'cseresznye']
            veletlengyumolcs is gyumolcs[random]
            print veletlengyumolcs 
15:
    start_code: |
        meg_itt_vagy is False
        itt_vagy_meg is input('Itt vagy még? igen vagy nem?')
        if itt_vagy_meg is True:
         meg_itt_vagy is True
        valasz is input('What is 5*5?')
        if meg_itt_vagy is True and valasz is 25:
         print('azt mondtad, hogy igen és ez a helyes válasz')
    intro_text: |
        Most megtanuljuk `and` és ` or` kifejezések használatát! Ha két állítást szeretnél
        ellenőrizni, akkor nem kell kettő `if` utasítást használnod, használhatod az `and` és
        az  `or` parancsokat. Ha az `and` parancsot használod, akkor az `and` bal és jobb
        oldalán mindkét állításnak igaznak kell lennie. Használhatjuk az `or` kifejezést is.
        Ekkor csak egy állításnak kell helyesnek lennie.
    commands:
    -   name: És
        explanation: |
            Mindkét állításnak (az `and` bal és jobb oldalán) igaznak kell lenni.
        example: |
            if 3+2 is 5 and 2+2 is 4
        demo_code: |-
            valasz1 is input('Mennyi 3+2?')
            valasz2 is input('Mennyi 2+2?')
            if valasz1 is 5 and valasz2 is 4:
             print('Mindkét válasz helyes')
            else:
             print('Legalább egy válasz hibás!')
    -   name: Vagy
        explanation: |
            `Or` Az `or` jobb vagy baloldalán legalább az egyik válasznak igaznak kell lenni, ha
            mindkettő igaz, az is jó.
        example: if 3+2 is 5 or 2+2 is 4
        demo_code: |-
            valasz1 is input('Mennyi 3+2?')
            valasz2 is input('Mennyi 2+2?')
            if valasz1 is 5 or valasz2 is 4:
             print('Legalább egy válasz helyes!')
            else:
             print('Mindkét válasz hibás!')
16:
    start_code: |-
        # Ez egy olyan program amely néhány matematikai kérdést fog feltenni
        for i in range(1, 10):
            # Ki fogjuk kérdezni az 5 ös szorzótáblát
            valasz is input('Mennyi ' i ' szorozva 5-tel?')
            # Leellenőrizzük hogy a valasz megegyezik-e a mi eredményünkkel
            helyes_valasz is i * 5
            if valasz is helyes_valasz:
                print(valasz ' helyes')
            else:
                print ('Ez hibás, feltételezem ennyi: ' i*5)
    intro_text: |-
        Ha nagyobb programokat készítesz, meg kell találnod a módját, hogy emlékezz
        arra, melyik kódrészlet mit csinál. Ehhez megjegyzéseket használunk. Egy
        megjegyzés a következőképpen néz ki:
         "# Ez egy megjegyzés". A # után minden láthatatlan lesz a kód számára
    commands:
    -   name: Megjegyzés
        explanation: |
            Oda teszünk megjegyzést, ahova csak akarunk.
        example: |
            #Ez egy megjegyzés
        demo_code: |
            # Ez a program kiírja hogy szia
            # Ez Hedy-ben készült
            # Ez nem csinál mást mint kiírja Szia
            print('szia!')
20:
    start_code: |-
        gyumolcs is ['alma', 'banán', 'cseresznye']
        for i in range(1, 3):
            print(gyumolcs[i])
    intro_text: A for ciklussal egy listában is mindent láthatunk. Mivel a listában három dolog van, a ciklust 1-től 3-ig vesszük. Most mindent kiíratunk a ciklusban.
    commands:
    -   name: Lista hossza
        explanation: A `length` utasítással láthatjuk a lista méretét. A példában szereplő lista hossza 3, mert három dolog van a listában
        example: length(lista)
        demo_code: |-
            gyumolcs is ['alma', 'banán', 'cseresznye']
            print('a lista hossza ' length(gyumolcs))
            for i in range(1, length(gyumolcs)):
                print(gyumolcs[i])
21:
    start_code: |-
        print('Mennyi 5+3?')
        valasz = 5+3
        print('a válasz:')
        print(valasz)
        if valasz == 8:
            print('Ez helyes')
        else:
            print('Ó nem, ez hibás!')
    intro_text: 'Most megváltoztatjuk a következőt: "=" és "==". A "=" kifejezést akkor használjuk, ha értéket szeretnénk hozzárendelni egy változóhoz. Ha 8 -at szeretnél rendelni az valasz nevű változóhoz, akkor valasz = 8. `==` jelet akkor használjuk, ha azt akarjuk látni, hogy két dolog ugyanaz-e.'
    commands:
    -   name: Összehasonlítás
        explanation: Ha összehasonlítani akarunk, akkor a == jelet használjuk. 5+3 == 8 ellenőrzi, hogy az 5+3 egyenlő -e 8 -cal
        example: 'Például: 5+3 == 8'
        demo_code: |-
            if 5+3 == 8:
                print('5+3 valóban 8')
            else:
                print('Ezt nem íratjuk ki, mert az 5+3 az 8!')
    -   name: Érték hozzárendelése
        explanation: Ha azt akarjuk mondani, hogy a valasz nevű változó értéke 8, akkor a valasz = 8 utasítást használjuk.
        example: |-
            Például: valasz = 8
        demo_code: |-
            print('Mennyi 5+3?')
            valasz = 5+3
            print('a válasz most:')
            print(valasz)
    -   name: Összehasonlítás és érték hozzárendelése
        explanation: Ha két értéket akarunk összehasonlítani, akkor a "==" jelet használjuk. Ha változót akarunk hozzárendelni, akkor a "=" karaktert használjuk.
        example: 'Például: 5+3 == 8, valasz=8'
        demo_code: |-
            print('Mennyi 5+3?')
            valasz = 5+3
            print('a válasz:')
            print(valasz)
            if valasz == 8:
                print('Ez helyes')
            else:
                print('Ó nem, ez hibás!')
colon:
    start_code: |-
        for i in range 1 to 10:
            print i
        print 'Aki bújt, aki nem, megyek!'
    intro_text: "Most egy kicsit meg fogjuk változtatni a behúzást. Minden alkalommal, amikor behúzást használunk, az előző sor végére`:` jelet teszünk."
    commands:
    -   name: "for ezzel:"
        explanation: "Ha a `for` utasítást használjuk, egy  `:`-ot teszünk a `for` utasítás végére!"
        example: "for i in range 1 to 10:"
        demo_code: |-
            for i in range 1 to 12:
                print i
            print 'Aki bújt, aki nem, megyek!'
    -   name: "if ezzel:"
        explanation: "Ugyanúgy kell eljárnunk `if` állítás esetén"
        example: "if szin is zöld:'"
        demo_code: |-
            szin is zöld
            if szin is zöld:
                print 'a szín zöld'
            else:
                print 'A szin nem zöld'
    -   name: "(Optional) elif"
        explanation: "Mutatunk neked egy új utasítást, amit ezután használhatsz: `elif`. Az `elif` azt jelenti \"else if\". Először leellenőrizzük hogy `if` helyes-e, ha nem helyes, megnézzük az `elif` feltételt és ha ez sem helyes, akkor `else` utasításhoz megyünk."
        example: "elif a is 5:"
        demo_code: |-
            a is 2
            if a is 1:
                print 'a értéke 1'
            elif a is 2:
                print 'a értéke 2'
            else:
                print 'a értéke nem 1 vagy 2'
