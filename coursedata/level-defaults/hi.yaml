1:
    intro_text: "‡§π‡•á‡§°‡•Ä ‡§Æ‡•á ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à! ‡§∏‡•ç‡§§‡§∞ 1 ‡§Æ‡•á‡§Ç ‡§Ü‡§™ `print`, `ask` ‡§î‡§∞ `echo` ‡§ú‡•à‡§∏‡•á ‡§Ü‡§¶‡•á‡§∂‡•ã‡§Ç  ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡•§ ‡§®‡•Ä‡§≤‡•á ‡§¨‡§ü‡§® ‡§ï‡•ã ‡§¶‡§¨‡§æ‡§®‡•á ‡§∏‡•á ‡§Ü‡§™‡§ï‡§æ ‡§ï‡•ã‡§° ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§Ø‡•á ‡§ü‡§æ‡§á‡§™ ‡§π‡•ã ‡§ú‡§æ‡§è‡§ó‡§æ‡•§ ‡§Ö‡§¨ ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ‡§ø‡§Ç‡§ó ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§®‡•Ä‡§ö‡•á ‡§¨‡§æ‡§è‡§Ç  ‡§ú‡§æ‡§ï‡§∞ ‡§π‡§∞‡•á ‡§¨‡§ü‡§® ‚Äú‡§∞‡§® ‡§¶  ‡§ï‡•ã‡§° ‡§¶‡§¨‡§æ‡§è‡§Ç ‡•§"
    start_code: "print ‡§π‡•á‡§≤‡•ã ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ!"
    commands:
    -   name: "print"
        explanation: "Print something with `print`."
        example: "Example: print Hello welcome to Hedy!"
        demo_code: "print Hello welcome to Hedy!"
    -   explanation: ask something with `{ask}`.
        example: 'Example: {ask} What is your favorite color?'
        demo_code: '{ask} What is your favorite color?'
        name: '{ask}'
    -   name: '{echo}'
        explanation: repeat something using `{echo}`.
        example: 'Example: {echo} so your favorite color is '
        demo_code: "{ask} What is your favorite color?\n{echo} so your favorite color is"
    -   explanation: print an emoji with `{print}`
        example: 'Example: {print} üôã‚Äç üåç ‚ùó'
        demo_code: '{print} üôã üåç ‚ùó'
        name: '{print} emojis'
    -   example: 'Example: {forward} 100'
        demo_code: '{forward} 100'
        explanation: Draw a line with `{forward}`.
        name: '{forward}'
    -   demo_code: "{forward} 25\n{turn} left\n{forward} 25\n{turn} right"
        name: '{turn}'
        explanation: turn the drawing turtle with `{turn}`
        example: 'Example: {turn}'
    example_code: "## Example code\n```\n{print} Hello!\n{print} Welcome to Hedy!\n```\n"
    intro_text_2: "You can also ask for input and repeat it back with an `{echo}` command.\nTry the code to your left again.\n\nDon't know what to create? In the next tabs you will find ideas for programs to build.\n"
    example_code_2: "## Example code\n```\n{ask} What is your name?\n{echo} hello\n```\n"
2:
    intro_text: "print ‡§µ‡•à‡§∏‡•á ‡§π‡•Ä ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§ó‡§æ ‡§ú‡•à‡§∏‡•á ‡§∏‡•ç‡§§‡§∞ ‡•ß ‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§Ø‡§æ, ‡§≤‡•á‡§ï‡§ø‡§® ask ‡§¨‡§¶‡§≤ ‡§ó‡§Ø‡§æ ‡§π‡•à ‡§î‡§∞ ‡§Ö‡§¨ ‡§â‡§∏‡§ï‡•ã ‡§ï‡§ø‡§∏‡•Ä ‡§®‡§æ‡§Æ ‡§ï‡•Ä ‡•õ‡§∞‡•Ç‡§∞‡§§ ‡§π‡•à, ‡§ú‡•ã ‡§ï‡§ø ‡§Ü‡§™ `print` ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç| `echo` ‡§ï‡•Ä ‡§Ö‡§¨ ‡§ï‡•ã‡§à ‡•õ‡§∞‡•Ç‡§∞‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à| ‡§Ö‡§¨ ‡§Ü‡§™ ‡§á‡§® ‡§Ü‡§¶‡•á‡§∂‡•ã‡§Ç ‡§ï‡§æ ‡§≠‡•Ä ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç:"
    start_code: "print ‡§π‡•á‡§≤‡•ã ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ  !"
    commands:
    -   name: "print"
        explanation: "Print something with `print`."
        example: "Example: print Hello welcome to Hedy!"
        demo_code: "print Hello welcome to Hedy!"
    -   name: '{ask}'
        explanation: ask something with `{ask}`. Beware! You need to give the answer a name with `{is}`.
        example: 'Example: color {is} {ask} What is your favorite color?'
        demo_code: "color {is} {ask} What is your favorite color?\n{print} color is your favorite!"
    -   explanation: Let Hedy pause for a (couple of) second(s).
        name: '{sleep}'
        example: 'Example: {sleep} 2 '
        demo_code: "{print} Let me think for one second...\n{sleep}\n{print} Hmm.. I need 3 more seconds...\n{sleep} 3\n{print} Eureka! Ive got it!"
    -   name: is - turtle
        explanation: Give a number a name using `{is}`. You can choose the name yourself.
        example: 'Example: angle {is} 90'
        demo_code: "angle {is} 90\n{turn} angle\n{forward} 100"
3:
    intro_text: "print ‡§µ‡•à‡§∏‡•á ‡§π‡•Ä ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§ó‡§æ ‡§ú‡•à‡§∏‡•á ‡§∏‡•ç‡§§‡§∞ ‡•ß ‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§Ø‡§æ, ‡§≤‡•á‡§ï‡§ø‡§® ask ‡§¨‡§¶‡§≤ ‡§ó‡§Ø‡§æ ‡§π‡•à ‡§î‡§∞ ‡§Ö‡§¨ ‡§â‡§∏‡§ï‡•ã ‡§ï‡§ø‡§∏‡•Ä ‡§®‡§æ‡§Æ ‡§ï‡•Ä ‡•õ‡§∞‡•Ç‡§∞‡§§ ‡§π‡•à, ‡§ú‡•ã ‡§ï‡§ø ‡§Ü‡§™ `print` ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç| `echo` ‡§ï‡•Ä ‡§Ö‡§¨ ‡§ï‡•ã‡§à ‡•õ‡§∞‡•Ç‡§∞‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à| ‡§Ö‡§¨ ‡§Ü‡§™ ‡§á‡§® ‡§Ü‡§¶‡•á‡§∂‡•ã‡§Ç ‡§ï‡§æ ‡§≠‡•Ä ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç:"
    start_code: "print ‡§π‡•á‡§≤‡•ã ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ  !"
    commands:
    -   name: "print"
        explanation: "Print something with `print`."
        example: "Example: print Hello welcome to Hedy!"
        demo_code: "print Hello welcome to Hedy!"
    -   demo_code: "animals {is} cow, cat\n{add} dog {to_list} animals"
        name: '{add}'
        explanation: add an item to a list
        example: 'Example: {add} dog {to_list} animals'
    -   name: '{remove}'
        explanation: remove an item from a list
        example: 'Example: {remove} dog {from} animals'
        demo_code: "animals {is} cat, dog, cow\n{remove} dog {from} animals"
4:
    start_code: "print '‡§π‡•á‡§≤‡•ã  ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ'"
    intro_text: "`ask` ‡§Ö‡§≠‡•Ä ‡§≠‡•Ä ‡§∏‡•ç‡§§‡§∞ ‡•© ‡§Æ‡•á‡§Ç ‡§¨‡§ø‡§≤‡•ç‡§ï‡•Å‡§≤ ‡§µ‡•à‡§∏‡§æ ‡§π‡•Ä ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® `print` ‡§Ö‡§¨ ‡§Ö‡§≤‡§ó ‡§π‡•à| ‡§ú‡•ã ‡§≠‡•Ä ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§Ü‡§™‡§ï‡•ã `print` ‡§ï‡§∞‡§µ‡§æ‡§®‡§æ ‡§π‡•à ‡§â‡§∏‡§ï‡•ã ‡§¶‡•ã‡§π‡§∞‡§æ ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§ö‡§ø‡§®‡•ç‡§π ‡§Æ‡•á‡§Ç ‡§∞‡§ñ‡§®‡§æ ‡§π‡•ã‡§ó‡§æ| "
    commands:
    -   name: "print"
        explanation: "Print something with `print`."
        example: "Example: print Hello welcome to Hedy!"
        demo_code: "print 'Hello welcome to Hedy!'"
    -   name: '{is}'
        explanation: Give a name to some text and `{print}` without quotation marks
        example: 'Example: name {is} Hedy.'
        demo_code: "name {is} Hedy\n{print} 'my name is ' name"
    -   demo_code: "color {is} {ask} 'What is your favorite color?'\n{print} color ' is your favorite!'"
        name: '{ask}'
        example: "Example: color {is} {ask} 'What is your favorite color?'"
        explanation: ask something with `{ask}`.
5:
    start_code: |-
        ‡§®‡§æ‡§Æ is ask ‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?
        if ‡§®‡§æ‡§Æ is ‡§π‡•á‡§°‡•Ä print '‡§ï‡•Ç‡§≤!' else print '‡§Æ‡•á‡§π'
    intro_text: "`ask` ‡§î‡§∞ `print` ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§¨‡§ø‡§≤‡•ç‡§ï‡•Å‡§≤ ‡§µ‡•à‡§∏‡§æ ‡§π‡•Ä ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à ‡§ú‡•à‡§∏‡§æ ‡§∏‡•ç‡§§‡§∞ ‡•© ‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§•‡§æ| ‡§∏‡•ç‡§§‡§∞ ‡•™ ‡§Æ‡•á‡§Ç `if` ‡§Ü‡§¶‡•á‡§∂ ‡§ú‡•Å‡•ú‡§æ ‡§π‡•à|"
    commands:
    -   name: "print"
        explanation: "Print something with `print`."
        example: "Example: print Hello welcome to Hedy!"
        demo_code: "print 'Hello welcome to Hedy!'"
    -   name: '{ask}'
        example: "Example: color {is} {ask} 'What is your favorite color?'"
        demo_code: "color {is} {ask} 'What is your favorite color?'\n{print} color ' {is} your favorite!'"
        explanation: ask something with `{ask}`.
    -   explanation: Make a choice with `{if}`
        name: '{if}'
        example: "Example: {if} color {is} green {print} 'pretty!' {else} {print} 'meh'"
        demo_code: "color {is} {ask} 'What is your favorite color?'\n{if} color {is} green {print} 'pretty!' {else} {print} 'meh'"
    -   demo_code: "answer {is} {ask} 'How far should I walk?'\n{if} answer {is} far {forward} 100 {else} {forward} 5"
        name: '{if} with turtle'
        explanation: Make a choice with `{if}`
        example: 'Example: {if} answer {is} far {forward} 100 {else} {forward} 5'
    -   name: '{in}'
        explanation: Check elements with `{in}`
        example: "Example: {if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
        demo_code: "pretty_colors {is} green, yellow\ncolor {is} {ask} 'What {is} your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
6:
    start_code: "print '‡•´ ‡§ó‡•Å‡§£‡§æ ‡•´ ‡§π‡•à ' 5 * 5"
    intro_text: "`ask`, `print` ‡§î‡§∞  `if` ‡§µ‡•à‡§∏‡•á ‡§π‡•Ä ‡§π‡•à‡§Ç ‡§ú‡•à‡§∏‡•á ‡§∏‡•ç‡§§‡§∞ ‡•™ ‡§Æ‡•á‡§Ç ‡§π‡•à‡§Ç| ‡§∏‡•ç‡§§‡§∞ ‡•´ ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§®‡§Ø‡§æ ‡§π‡•à ... ‡§Ö‡§¨ ‡§Ü‡§™ ‡§π‡§ø‡§∏‡§æ‡§¨ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç|"
    commands:
    -   name: "print"
        explanation: "Print something with `print`."
        example: "Example: print Hello welcome to Hedy!"
        demo_code: "print 'Hello welcome to Hedy!'"
    -   demo_code: "answer = {ask} 'What is 10 plus 10?'\n{if} answer {is} 20 {print} 'Yes!' {else} {print} 'Oops'"
        name: '{ask}'
        explanation: '{ask} for a calculation and check whether it is correct.'
        example: "Example: answer {is} {ask} 'What is 10 plus 10?'"
    -   demo_code: "angles = {ask} 'How many angles?'\nangle = 360 / angles\n{forward} 50"
        explanation: '{ask} the user how many angles they want'
        example: "Example: angles {is} {ask} 'How many angles?'"
        name: '`{ask}` {and} `{if}` turtle'
7:
    start_code: "repeat 3 times print '‡§π‡•á‡§°‡•Ä ‡§Æ‡§ú‡•á‡§¶‡§æ‡§∞ ‡§π‡•à!'"
    intro_text: "`ask`, `print` ‡§î‡§∞ `if` ‡§µ‡•à‡§∏‡•á ‡§π‡•Ä ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à ‡§ú‡•à‡§∏‡§æ ‡§∏‡•ç‡§§‡§∞ ‡•™ ‡§î‡§∞ ‡•´ ‡§Æ‡•á‡§Ç ‡§ï‡§∞‡§§‡•á ‡§•‡•á| ‡§≤‡•á‡§ï‡§ø‡§® ‡§∏‡•ç‡§§‡§∞ ‡•¨ ‡§Æ‡•á‡§Ç `repeat` ‡§Ü‡§¶‡•á‡§∂ ‡§ú‡•Å‡•ú ‡§ú‡§æ‡§§‡§æ ‡§π‡•à| repeat ‡§è‡§ï ‡§ï‡•ã‡§° ‡§ï‡•Ä ‡§≤‡§æ‡§á‡§® ‡§ï‡•ã ‡§¨‡§π‡•Å‡§§ ‡§¨‡§æ‡§∞ ‡§®‡§ø‡§∑‡•ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§ï‡§æ‡§Æ ‡§Ü‡§§‡§æ ‡§π‡•à|"
    commands:
    -   name: "print"
        explanation: "Print something with `print`."
        example: "Example: print Hello welcome to Hedy!"
        demo_code: "print 'Hello welcome to Hedy!'"
    -   name: '{ask}'
        explanation: ask something with `{ask}`.
        example: "Example: color = {ask} 'What is your favorite color?'"
        demo_code: "color = {ask} 'What is your favorite color?'\n{print} color ' is your favorite!'"
    -   name: '{if}'
        explanation: Make a choice with `{if}`
        example: "Example: {if} color {is} green {print} 'pretty!' {else} {print} 'meh'"
        demo_code: "color = {ask} 'What is your favorite color?'\n{if} color {is} green {print} 'pretty!' {else} {print} 'meh'"
    -   name: '{repeat} - turtle'
        explanation: repeat a line of code with `{repeat}`.
        example: 'Example: {repeat} 3 {times} {forward} 10'
        demo_code: '{repeat} 3 {times} {forward} 10'
8:
    start_code: |
        repeat 5 times
          print '‡§π‡•á‡§≤‡•ã ‡§¶‡•ã‡§∏‡•ç‡§§‡•ã‡§Ç'
          print '‡§Ø‡•á ‡§∏‡§¨ ‡•´ ‡§¨‡§æ‡§∞ ‡§™‡•ç‡§∞‡§ø‡§Ç‡§ü ‡§π‡•ã‡§Ç‡§ó‡•á'
    intro_text: "ask ‡§î‡§∞ print ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§µ‡•à‡§∏‡§æ ‡§π‡•Ä ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á ‡§ú‡•à‡§∏‡•á ‡§π‡§Æ‡•á‡§Ç ‡§™‡§§‡§æ ‡§π‡•à|‡§≤‡•á‡§ï‡§ø‡§® if ‡§î‡§∞ repeat ‡§¨‡§¶‡§≤ ‡§ö‡•Å‡§ï‡•á ‡§π‡•à! ‡§Ö‡§¨ ‡§Ü‡§™ ‡§è‡§ï ‡§∏‡§æ‡§• ‡§ï‡•ã‡§° ‡§ï‡•á ‡§∏‡§Æ‡•Ç‡§π‡•ã‡§Ç ‡§ï‡•ã ‡§ö‡§≤‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç, ‡§≤‡•á‡§ï‡§ø‡§® ‡§Ü‡§™‡§ï‡•ã ‡§ï‡•ã‡§° ‡§ï‡•ã ‡§á‡§Ç‡§°‡•á‡§Ç‡§ü ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã‡§ó‡§æ| ‡§á‡§∏‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨ ‡§π‡•à ‡§ï‡§ø ‡§≤‡§æ‡§á‡§® ‡§ï‡•Ä ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§Æ‡•á‡§Ç ‡§ö‡§æ‡§∞ ‡§∞‡§ø‡§ï‡•ç‡§§ ‡§∏‡•ç‡§•‡§æ‡§® ‡§°‡§æ‡§≤‡§®‡•á ‡§π‡•ã‡§Ç‡§ó‡•á |‡§Ø‡§π ‡§§‡§¨ ‡§≠‡•Ä ‡§≤‡§æ‡§ó‡•Ç ‡§π‡•ã‡§ó‡§æ ‡§ú‡§¨ ‡§Ü‡§™ ‡§ï‡•á‡§µ‡§≤ ‡§è‡§ï ‡§™‡§Ç‡§ï‡•ç‡§§‡§ø ‡§ï‡§æ ‡§è‡§ï ‡§¨‡•ç‡§≤‡•â‡§ï ‡§¨‡§®‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç| ‡§Ø‡§¶‡§ø ‡§Ü‡§™ ‡§è‡§ï repeat ‡§î‡§∞ if ‡§ï‡•ã ‡§ú‡•ã‡§°‡§º‡§§‡•á ‡§π‡•à‡§Ç, ‡§§‡•ã ‡§Ü‡§™‡§ï‡•ã ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§¨‡•ç‡§≤‡•â‡§ï ‡§ï‡•ã ‡§á‡§Ç‡§°‡•á‡§Ç‡§ü ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã‡§ó‡§æ| ‡§Ö‡§ß‡§ø‡§ï ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§ï‡•ã‡§° ‡§™‡§∞ ‡§è‡§ï ‡§®‡§ú‡§º‡§∞ ‡§°‡§æ‡§≤‡•á‡§Ç!"
    commands:
    -   name: "print"
        explanation: "Print something with `print`."
        example: "Example: print Hello welcome to Hedy!"
        demo_code: "print 'Hello welcome to Hedy!'"
    -   example: "Example: answer {is} {ask} 'What is 5 plus 5?'"
        explanation: ask for the answer to a sum and check if it is correct. We can now print 2 lines.
        demo_code: "answer = {ask} 'What is 5 plus 5?'\n{if} answer {is} 10\n    {print} 'Well done!'\n    {print} 'Indeed, the answer was ' answer\nelse\n    {print} 'Oops!'\n    {print} 'The answer is 10'"
        name: '{ask}'
    -   example: 'Example: draw a square'
        name: '`{repeat}` with turtle'
        explanation: '{repeat} multiple lines'
        demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
9:
    start_code: |-
        repeat 3 times
            repeat 3 times
                print 'looping!'
    intro_text: ‡§Ö‡§¨ ‡§∏‡•á ‡§π‡§Æ, ‡§≤‡•Ç‡§™ ‡§ï‡•ã ‡§Ö‡§ï‡•ç‡§∏‡§∞ ‡§¶‡•ã‡§π‡§∞‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç| ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§Æ‡•á‡§Ç ‡§π‡§Æ ‡•´ ‡§§‡§ï ‡§ó‡§ø‡§®‡§§‡•á ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§µ‡§π ‡•© ‡§¨‡§æ‡§∞ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç| ‡§§‡•ã ‡§π‡§Æ ‡•© ‡§¶‡•å‡§∞ ‡§≤‡§ó‡§æ‡§§‡•á  ‡§π‡•à‡§Ç ‡§î‡§∞ ‡•´ ‡§§‡§ï ‡§ó‡§ø‡§®‡§§‡•á ‡§π‡•à‡§Ç ‡§π‡§∞ ‡§¨‡§æ‡§∞|
    commands:
    -   name: "print"
        explanation: "Print something with `print`."
        example: "Example: print Hello welcome to Hedy!"
        demo_code: "print 'Hello welcome to Hedy!'"
    -   example: 'Example: create a square'
        name: '`{repeat}` and turtle'
        explanation: '{repeat} multiple lines'
        demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
10:
    start_code: |-
        ‡§ú‡§æ‡§®‡§µ‡§∞‡•ã‡§Ç is ‡§ï‡•Å‡§§‡•ç‡§§‡§æ, ‡§¨‡§ø‡§≤‡•ç‡§≤‡•Ä, ‡§¨‡•ç‡§≤‡•â‡§¨‡§´‡§ø‡§∂
        for ‡§ú‡§æ‡§®‡§µ‡§∞ in ‡§ú‡§æ‡§®‡§µ‡§∞‡•ã‡§Ç
            print '‡§Æ‡•Å‡§ù‡•á ‡§™‡§∏‡§Ç‡§¶ ‡§π‡•à ' ‡§ú‡§æ‡§®‡§µ‡§∞
    intro_text: |-
        ‡§á‡§∏ ‡§∏‡•ç‡§§‡§∞ ‡§Æ‡•á‡§Ç ‡§π‡§Æ ‡§è‡§ï ‡§®‡§Ø‡§æ ‡§ï‡•ã‡§° ‡§∏‡•Ä‡§ñ‡•á‡§Ç‡§ó‡•á ‡§ú‡•ã `for` ‡§ï‡§π‡§≤‡§æ‡§§‡§æ ‡§π‡•à| `for` ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ü‡§™ ‡§è‡§ï ‡§∏‡•Ç‡§ö‡•Ä ‡§¨‡§®‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§∏‡§æ‡§∞‡•á ‡§§‡§§‡•ç‡§µ‡•ã‡§Ç ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç|
        `for` ‡§è‡§ï ‡§¨‡•ç‡§≤‡•â‡§ï ‡§¨‡§®‡§æ‡§§‡§æ ‡§π‡•à, `repeat` ‡§î‡§∞ 'if' ‡§ï‡•Ä ‡§§‡§∞‡§π, ‡§§‡•ã ‡§¨‡•ç‡§≤‡•â‡§ï ‡§ï‡•Ä ‡§∏‡§≠‡•Ä ‡§™‡§Ç‡§ï‡•ç‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§∞‡§ø‡§ï‡•ç‡§§ ‡§∏‡•ç‡§•‡§æ‡§®‡•ã‡§Ç ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã‡§®‡•á ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•à|

        ##‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§π‡•á‡§°‡•Ä ‡§ï‡•ã‡§°
        ```
        ‡§ú‡§æ‡§®‡§µ‡§∞‡•ã‡§Ç is ‡§ï‡•Å‡§§‡•ç‡§§‡§æ, ‡§¨‡§ø‡§≤‡•ç‡§≤‡•Ä, ‡§¨‡•ç‡§≤‡•â‡§¨‡§´‡§ø‡§∂
        for ‡§ú‡§æ‡§®‡§µ‡§∞ in ‡§ú‡§æ‡§®‡§µ‡§∞‡•ã‡§Ç
            print '‡§Æ‡•Å‡§ù‡•á ‡§™‡§∏‡§Ç‡§¶ ‡§π‡•à ' ‡§ú‡§æ‡§®‡§µ‡§∞
        ```
    commands:
    -   name: "print"
        explanation: "Print something with `print`."
        example: "Example: print Hello welcome to Hedy!"
        demo_code: "print 'Hello welcome to Hedy!'"
    -   name: '{for} with a list'
        explanation: 'print all things in a list '
        example: 'Example: {for} animal {in} animals'
        demo_code: "animals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal"
11:
    start_code: |-
        for ‡§ï‡§æ‡§â‡§Ç‡§ü‡§∞ in range 1 to 5
            print ‡§ï‡§æ‡§â‡§Ç‡§ü‡§∞
    intro_text: |-
        `print` ‡§µ‡•à‡§∏‡§æ ‡§π‡•Ä ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§ó‡§æ ‡§ú‡•à‡§∏‡§æ ‡§π‡§Æ‡•á‡§Ç ‡§™‡§§‡§æ ‡§π‡•à ‡§≤‡•á‡§ï‡§ø‡§® `repeat` ‡§ï‡•á ‡§∏‡•ç‡§•‡§æ‡§® ‡§™‡§∞ ‡§Ö‡§¨ `for` ‡§π‡•à !
        ‡§Ö‡§¨ ‡§Ü‡§™ 'for  ‡§ï‡§æ‡§â‡§Ç‡§ü‡§∞  in range ‡•ß-‡•´' ‡§≤‡§ø‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§Ü‡§™‡§ï‡•á ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§Æ‡•á‡§Ç '‡§ï‡§æ‡§â‡§Ç‡§ü‡§∞' ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç| ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡§ï‡•á ‡§¶‡•á‡§ñ‡•ã ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•ã‡§§‡§æ ‡§π‡•à!
        `for` ‡§î‡§∞ 'if' ‡§™‡§Ç‡§ï‡•ç‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§á‡§Ç‡§°‡•á‡§Ç‡§ü‡•á‡§∂‡§® ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§®‡§æ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§∞‡§ñ‡•á‡§Ç (‡§ú‡§ø‡§∏‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨ ‡§π‡•à ‡§ï‡§ø ‡§∏‡•á‡§Ç‡§ü‡•á‡§Ç‡§∏ ‡§≤‡§ø‡§ñ‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡•™ ‡§∞‡§ø‡§ï‡•ç‡§§ ‡§∏‡•ç‡§•‡§æ‡§® ‡§°‡§æ‡§≤ ‡§¶‡•á‡§Ç|)
    commands:
    -   name: "print"
        explanation: "Print something with `print`."
        example: "Example: print Hello welcome to Hedy!"
        demo_code: "print 'Hello welcome to Hedy!'"
    -   name: '{ask}'
        explanation: ask for the answer to a sum and check if it is correct. We can now print 2 lines.
        example: "Example: answer = {ask} 'What is 5 plus 5?'"
        demo_code: "answer = {ask} 'What is 5 plus 5?'\n{if} answer {is} 10\n    {print} 'Well done!'\n    {print} 'Indeed, the answer was ' answer\nelse\n    {print} 'Oops!'\n    {print} 'The answer is 10'"
12:
    start_code: |-
        print 'decimal numbers now need to use a dot'
        print 2.5 + 2.5
    intro_text: |
        ## Decimal numbers
        So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.
        ```
        print 'Two and a half plus two and a half is...'
        print 2.5 + 2.5
        ```
        ## All texts need to be in quotation marks
        For this level on you will also have to use quotation marks when storing a text with `=`:

        ```
        name = 'Hedy the Robot'
        print 'Hello ' name
        ```
        ## All items in lists need quotation marks too
        Lists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.
        This allows you to save two words as 1 item on the list, for example 'Iron Man'.

        ```
        superheroes = 'Spiderman', 'Batman', 'Iron Man'
        print superheroes at random
        ```
        ## All text after `if` comparisons need quotation marks too
        ```
        name = ask 'What is your name?'
        if name = 'Hedy the Robot'
            print 'Hi there!'
        ```
        ## Numbers don't need quotation marks
        For numbers, you do not use quotation marks in the `=`:
        ```
        score = 25
        print 'You got ' score
        ```
    commands:
    -   name: "float directly"
        explanation: "Decimal numbers"
        example: "print 2.5 + 2.5"
        demo_code: |
            print 'Calculate away!'
            print 'Two and a half plus two and a half is...'
            print 2.5 + 2.5
    -   name: "assign text"
        explanation: "Text with quotation marks after ="
        example: "name = 'Hedy'"
        demo_code: |
            name = 'Hedy the Robot'
            print 'Hello ' name
    -   name: "quotes after if comparison"
        explanation: "Text with quotation marks after if"
        example: "name = 'Hedy'"
        demo_code: |
            name = ask 'Who are you?'
            if name = 'Hedy'
                print 'Hi there!'
    -   name: "quotes in list"
        explanation: "A list with quotation marks"
        example: "name = 'Hedy', 'Felienne'"
        demo_code: |
            superheroes = 'Iron Man', 'Batman', 'Superman'
            print superheroes at random

13:
    start_code: |-
        name = ask 'what is your name?'
        age = ask 'what is your age?'
        if name is 'Hedy' and age is 2
            print 'You are the real Hedy!'
    intro_text: "We are now going to learn `and` and `or`! If you want to check two statements, you don't have to use two if's but can use `and` and `or`. If you use `and`, both statements, left and right of the `and` need to be true. We can also use `or`. Then only one statement needs to be correct."
    commands:
    -   name: "And"
        explanation: "Two parts both need to be correct"
        example: "if 3+2 is 5 and 2+2 is 4"
        demo_code: |-
            answer1 = ask 'What is 3+2?'
            answer2 = ask 'What is 2+2?'
            if answer1 is 5 and answer2 is 4
                print 'Both answers are correct!'
            else
                print 'At least one answer is wrong!'
    -   name: "Or"
        explanation: "At least 1 of the two parts need to be correct. If both are correct, it is also fine."
        example: "if 3+2 is 5 or 2+2 is 4"
        demo_code: |-
            answer1 = ask 'What is 3+2?'
            answer2 = ask 'What is 2+2?'
            if answer1 is 5 or answer2 is 4
                print 'At least one answer is correct!'
            else
                print 'Both answers are wrong!'
14:
    start_code: |-
        ‡§â‡§Æ‡•ç‡§∞ is ask '‡§Ü‡§™ ‡§ï‡§ø‡§§‡§®‡•á ‡§∏‡§æ‡§≤ ‡§ï‡•á ‡§π‡•à‡§Ç?'
        if ‡§â‡§Æ‡•ç‡§∞ > 12
            print '‡§Ü‡§™ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§õ‡•ã‡§ü‡•á ‡§π‡•à‡§Ç!'
        else
            print '‡§Ü‡§™ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§¨‡•ú‡•á ‡§π‡•à‡§Ç!'
    intro_text: ‡§π‡§Æ ‡§®‡§è ‡§µ‡§ø‡§∑‡§Ø ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§∏‡•Ä‡§ñ‡§®‡•á ‡§ú‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç| ‡§Ü‡§™ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§ú‡§æ‡§®‡§§‡•á ‡§π‡•ã‡§Ç‡§ó‡•á ‡§ó‡§£‡§ø‡§§ ‡§Æ‡•á‡§Ç, '<' ‡§î‡§∞ '>'| '<' ‡§ú‡§æ‡§Ç‡§ö‡§§‡§æ ‡§π‡•à ‡§Ö‡§ó‡§∞ ‡§™‡§π‡§≤‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§¶‡•Ç‡§∏‡§∞‡•Ä ‡§∏‡•á ‡§õ‡•ã‡§ü‡•Ä ‡§π‡•à, ‡§ú‡•à‡§∏‡•á '‡•™<‡•´'| '>' ‡§ú‡§æ‡§Ç‡§ö‡§§‡§æ ‡§π‡•à ‡§Ö‡§ó‡§∞ ‡§™‡§π‡§≤‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§¶‡•Ç‡§∏‡§∞‡•Ä ‡§∏‡•á ‡§¨‡•ú‡•Ä ‡§π‡•à, ‡§ú‡•à‡§∏‡•á '‡•¨>‡•´'|
    commands:
    -   name: "print"
        explanation: "Print something with `print`."
        example: "Example: print Hello welcome to Hedy!"
        demo_code: "print 'Hello welcome to Hedy!'"
    -   name: Bigger
        explanation: We use the `>` to check if the first number is bigger than the second number.
        example: 'For example: age > 12'
        demo_code: "age = {ask} 'How old are you?'\n{if} age > 13\n    {print} 'You are older than me!'"
    -   name: Equal
        explanation: We use the `==` to check if two things are the same.
        example: 'For example: answer == 25'
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer == 25\n    {print} 'That {is} correct!'"
    -   name: Not equal
        explanation: 'We use the `!=` to check if two things are not the same. '
        example: 'For example: answer != 25'
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer != 25\n    {print} 'That is not correct!'"
    -   name: Smaller {or} equal
        explanation: We use the `<=` to check if the first number is smaller than or equal to the second number.
        example: 'For example: age <= 12'
        demo_code: "age = {ask} 'How old are you?'\n{if} age <= 12\n    {print} 'You are younger than me!'"
    -   demo_code: "age = {ask} 'How old are you?'\n{if} age >= 14\n    {print} 'You are older than me!'"
        name: Bigger or equal
        explanation: We use the `>=` to check if the first number is bigger than or equal to the second number.
        example: 'For example: age >= 14'
15:
    start_code: |-
        answer = 0
        while answer != 25
            answer = ask 'What is 5 times 5?'
        print 'A correct answer has been given'
    intro_text: |
        We are going to learn a new loop, the `while` loop! We continue the loop as long as the statement is true.
        So don't forget to change the value in the loop.

        In the example code, we continue until a correct answer has been given.
        If the correct answer is never given, the loop never ends!
    commands:
    -   name: "while"
        explanation: "We can use the `while` loop with not equal"
        example: "Example: while correct_answer != 25"
        demo_code: |-
            answer = 0
            while answer != 25
                answer = ask 'What is 5 times 5?'
            print 'A correct answer has been given'
    -   name: "Smaller while"
        explanation: "We can also use the `while` loop with `<` and `>`. "
        example: "For example: while count < 3"
        demo_code: |-
            count = 1
            while count < 3
                print 'We do this ' 3 - count ' more times'
                count = count + 1
            print 'We are done'


16:
    start_code: |
        ‡§´‡§≤ is ['‡§∏‡•á‡§¨', '‡§ï‡•á‡§≤‡§æ', '‡§ö‡•á‡§∞‡•Ä']
        for i in range 1 to 3
            print ‡§´‡§≤[i]
    intro_text: ‡§π‡§Æ ‡§∏‡•Ç‡§ö‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§Ü‡§∏ ‡§™‡§æ‡§∏ ‡§ö‡•ã‡§ï‡•ã‡§∞ ‡§¨‡•ç‡§∞‡•à‡§ï‡•á‡§ü‡•ç‡§∏ ‡§≤‡§ó‡§æ‡§®‡•á ‡§ú‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç! ‡§Ö‡§¨ ‡§π‡§Æ‡•á‡§Ç ‡§á‡§ï‡§π‡§∞‡§æ ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§ö‡§ø‡§®‡•ç‡§π(') ‡§≤‡§ó‡§æ‡§®‡•á ‡§ï‡•Ä ‡§≠‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•à ‡§∏‡•Ç‡§ö‡§ø‡§Ø‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§µ‡§∏‡•ç‡§§‡•Å‡§ì‡§Ç ‡§ï‡•á ‡§Ü‡§∏ ‡§™‡§æ‡§∏|
    commands:
    -   name: "print"
        explanation: "Print something with `print`."
        example: "Example: print Hello welcome to Hedy!"
        demo_code: "print 'Hello welcome to Hedy!'"

    -   name: Get an item from a list
        explanation: To get an item from a list we use [number] so fruit[1] means, get the first fruit from the list!
        example: 'For example: firstfruit = fruit[1]'
        demo_code: "fruit = ['banana', 'apple', 'cherry']\nfirstfruit = fruit[1]\n{print} firstfruit"
    -   name: Get a random item from a list
        explanation: To get a random item from a list we use [random] so fruit[random] means, get a random fruit from the list!
        example: 'For example: random_fruit {is} fruit[random]'
        demo_code: "fruit = ['banana', 'apple', 'cherry']\nrandom_fruit = fruit[random]\n{print} random_fruit"
17:
    start_code: |-
        for ‡§á in range 1 to 10:
            print ‡§á
        print '‡§§‡•à‡§Ø‡§æ‡§∞ ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç, ‡§Ø‡§π‡§æ‡§Å ‡§Æ‡•à‡§Ç  ‡§Ü‡§Ø‡§æ!'
    intro_text: ‡§Ö‡§¨ ‡§π‡§Æ ‡§á‡§Ç‡§°‡•á‡§Ç‡§ü‡•á‡§∂‡§® ‡§ï‡•á ‡§∏‡§æ‡§• ‡§•‡•ã‡•ú‡§æ ‡§¨‡§¶‡§≤‡§æ‡§µ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á| ‡§ú‡§¨ ‡§≠‡•Ä ‡§π‡§Æ‡•á‡§Ç ‡§á‡§Ç‡§°‡•á‡§Ç‡§ü‡•á‡§∂‡§® ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§™‡•ú‡§§‡•Ä ‡§π‡•à, ‡§π‡§Æ ':' ‡§ï‡§æ ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á ‡§á‡§Ç‡§°‡•á‡§Ç‡§ü‡•á‡§∂‡§® ‡§ï‡•á ‡§™‡§π‡§≤‡•á ‡§µ‡§æ‡§≤‡•Ä ‡§≤‡§æ‡§á‡§® ‡§™‡§∞|
    commands:
    -   name: "print"
        explanation: "Print something with `print`."
        example: "Example: print Hello welcome to Hedy!"
        demo_code: "print 'Hello welcome to Hedy!'"
#13:
#    start_code: |-
#        ‡§â‡§Æ‡•ç‡§∞ is input('‡§Ü‡§™‡§ï‡•Ä ‡§â‡§Æ‡•ç‡§∞ ‡§ï‡§ø‡§§‡§®‡•Ä ‡§π‡•à?')
#        print ('‡§§‡•ã ‡§Ü‡§™ ‡§Ø‡§π ‡§â‡§Æ‡•ç‡§∞ ‡§ï‡•á ‡§∞‡§π ‡§ö‡•Å‡§ï‡•á ‡§π‡•à‡§Ç:')
#        for ‡§á in range(0, ‡§â‡§Æ‡•ç‡§∞):
#            print(‡§á)
#    intro_text: ‡§π‡§Æ ‡§ó‡•ã‡§≤ ‡§¨‡•ç‡§∞‡•à‡§ï‡•á‡§ü‡•ç‡§∏ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§®‡•á ‡§ú‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç ‡§î‡§∞ ask ‡§ï‡•ã ‡§¨‡§¶‡§≤‡•á‡§Ç‡§ó‡•á! ‡§π‡§Æ ask ‡§ï‡•ã input ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤ ‡§¶‡•á‡§§‡•á ‡§π‡•à‡§Ç! print, input ‡§î‡§∞ for ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ö‡§¨ ‡§π‡§Æ ‡§ó‡•ã‡§≤ ‡§¨‡•ç‡§∞‡•à‡§ï‡•á‡§ü‡•ç‡§∏ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á|
#    commands:
#    -   name: ‡§¨‡•ç‡§∞‡•à‡§ï‡•á‡§ü‡•ç‡§∏
#        explanation: ‡§Ö‡§¨ ‡§π‡§Æ print ‡§ï‡•á ‡§∏‡§æ‡§• ‡§¨‡•ç‡§∞‡•à‡§ï‡•á‡§ü‡•ç‡§∏ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á!
#        example: "'‡§â‡§¶‡§æ‡§π‡§∞‡§£: print ('‡§π‡•á‡§≤‡•ã ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ')'"
#        demo_code: print ('‡§π‡•á‡§≤‡•ã ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ')
#    -   name: input
#        explanation: ‡§Ö‡§¨ ‡§π‡§Æ ask ‡§ï‡•ã ‡§π‡§ü‡§æ‡§§‡•á ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§â‡§∏‡•á `input` ‡§¨‡•ã‡§≤‡§§‡•á ‡§π‡•à‡§Ç| ‡§π‡§Æ ‡§¨‡•ç‡§∞‡•à‡§ï‡•á‡§ü‡•ç‡§∏ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§≠‡•Ä ‡§ï‡§∞‡§®‡•á ‡§ú‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç|
#        example: "'‡§â‡§¶‡§æ‡§π‡§∞‡§£: ‡§®‡§æ‡§Æ is input('‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?')'"
#        demo_code: |-
#            ‡§®‡§æ‡§Æ  is input('‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?')
#            print ('‡§§‡•ã ‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§π‡•à ' ‡§®‡§æ‡§Æ)
#    -   name: for
#        explanation: "‡§Ö‡§¨ ‡§π‡§Æ for ‡§≤‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§Ü‡§∏ ‡§™‡§æ‡§∏ ‡§¨‡•ç‡§∞‡•à‡§ï‡•á‡§ü‡•ç‡§∏ ‡§≤‡§ó‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç| for ‡§á in range(0, 10):"
#        example: "‡§â‡§¶‡§æ‡§π‡§∞‡§£: for ‡§á in range(0,10)"
#        demo_code: |-
#            for ‡§á in range(0,10):
#                print(‡§á)
#            print('‡§§‡•à‡§Ø‡§æ‡§∞ ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç, ‡§Ø‡§π‡§æ‡§Å ‡§Æ‡•à‡§Ç ‡§Ü‡§Ø‡§æ')

#16:
#    start_code: |-
#        #‡§Ø‡§π ‡§è‡§ï ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§π‡•à ‡§ú‡•ã ‡§ï‡§à ‡§ó‡§£‡§ø‡§§ ‡§ï‡•á ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§õ‡§®‡•á ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à
#        for ‡§á in range(1, 10):
#            #‡§π‡§Æ ‡•´ ‡§ï‡§æ ‡§™‡§π‡§æ‡•ú‡§æ ‡§™‡•Ç‡§õ‡§®‡•á ‡§ú‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç
#            ‡§â‡§§‡•ç‡§§‡§∞ is input(‡§á ' ‡§ó‡•Å‡§£‡§æ ‡•´ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?')
#             #‡§π‡§Æ ‡§ú‡§æ‡§Ç‡§ö‡§§‡•á ‡§π‡•à‡§Ç ‡§ï‡•Ä ‡§Ö‡§ó‡§∞ ‡§â‡§§‡•ç‡§§‡§∞ ‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§∞‡§æ‡§∂‡§ø ‡§ï‡•á ‡§∏‡§Æ‡§æ‡§® ‡§π‡•à
#              ‡§∏‡§π‡•Ä_‡§â‡§§‡•ç‡§§‡§∞ is i * 5
#              if ‡§â‡§§‡•ç‡§§‡§∞ is ‡§∏‡§π‡•Ä_‡§â‡§§‡•ç‡§§‡§∞:
#                  print(‡§â‡§§‡•ç‡§§‡§∞ ' ‡§∏‡§π‡•Ä ‡§π‡•à')
#               else:
#                   print('‡§µ‡§π ‡§ó‡§≤‡§§ ‡§π‡•à, ‡§Ø‡§π ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è: ' ‡§á*5)
#    intro_text: |-
#        ‡§ú‡§¨ ‡§Ü‡§™ ‡§¨‡•ú‡•á ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§¨‡§®‡§æ ‡§∞‡§π‡•á ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç, ‡§Ü‡§™‡§ï‡•ã ‡§Ø‡§π ‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡§®‡•á ‡§ï‡§æ ‡§è‡§ï ‡§§‡§∞‡•Ä‡§ï‡§æ ‡§¢‡•Ç‡§Å‡§¢‡§®‡§æ ‡§π‡•ã‡§ó‡§æ ‡§ï‡•Ä ‡§π‡§∞ ‡§è‡§ï ‡§ï‡•ã‡§° ‡§ï‡§æ ‡§ü‡•Å‡§ï‡•ú‡§æ ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à| ‡§â‡§∏‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡§Æ ‡§ü‡§ø‡§™‡•ç‡§™‡§£‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç| ‡§è‡§ï ‡§ü‡§ø‡§™‡•ç‡§™‡§£‡•Ä ‡§ê‡§∏‡•Ä ‡§¶‡§ø‡§ñ‡§§‡•Ä ‡§π‡•à:
#            ' # ‡§Ø‡§π ‡§è‡§ï ‡§ü‡§ø‡§™‡•ç‡§™‡§£‡•Ä ‡§π‡•à'| # ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§ï‡§æ ‡§∏‡§¨ ‡§ï‡•Å‡§õ ‡§ï‡•ã‡§° ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§¶‡•É‡§∂‡•ç‡§Ø ‡§π‡•ã ‡§ú‡§æ‡§è‡§ó‡§æ|
#    commands:
#    -   name: ‡§ü‡§ø‡§™‡•ç‡§™‡§£‡•Ä
#        explanation: "‡§π‡§Æ ‡§ü‡§ø‡§™‡•ç‡§™‡§£‡•Ä ‡§ú‡§π‡§æ‡§Å ‡§π‡§Æ ‡§ö‡§æ‡§π‡•á‡§Ç ‡§µ‡§π‡§æ‡§Ç ‡§°‡§æ‡§≤ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç "
#        example: "# ‡§Ø‡§π ‡§è‡§ï ‡§ü‡§ø‡§™‡•ç‡§™‡§£‡•Ä ‡§π‡•à"
#        demo_code: |-
#            # ‡§Ø‡§π ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§π‡•á‡§≤‡•ã ‡§õ‡§æ‡§™‡§§‡§æ ‡§π‡•à!
#            # ‡§Ø‡§π ‡§π‡•á‡§°‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§®‡§æ ‡§π‡•à
#            # ‡§Ø‡§π ‡§π‡•á‡§≤‡•ã ‡§õ‡§æ‡§™‡§®‡•á ‡§ï‡•á ‡§Ö‡§≤‡§æ‡§µ‡§æ ‡§î‡§∞ ‡§ï‡•Å‡§õ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡§æ!
#            print('‡§π‡•á‡§≤‡•ã!')
#
#19:
#    start_code: |-
#        ‡§∏‡•Ç‡§ö‡•Ä is ['‡§™‡§π‡§≤‡§æ', '‡§¶‡•Ç‡§∏‡§∞‡§æ', '‡§§‡•Ä‡§∏‡§∞‡§æ']
#        ‡§¶‡•Ç‡§∏‡§∞‡§æ‡§Æ‡•Ç‡§≤‡•ç‡§Ø is ‡§∏‡•Ç‡§ö‡•Ä[1]
#        print(‡§¶‡•Ç‡§∏‡§∞‡§æ‡§Æ‡•Ç‡§≤‡•ç‡§Ø)
#    intro_text: ‡§ú‡§¨ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§™‡§æ‡§∏ ‡§è‡§ï ‡§∏‡•Ç‡§ö‡•Ä ‡§π‡•ã‡§§‡•Ä ‡§π‡•à, ‡§â‡§∏‡§Æ‡•á‡§Ç ‡§∏‡•á ‡§π‡§Æ ‡§è‡§ï ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§≤‡•á ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç| ‡§Ö‡§ó‡§∞ ‡§π‡§Æ‡•á‡§Ç ‡§∏‡•Ç‡§ö‡•Ä ‡§Æ‡•á‡§Ç ‡§∏‡•á ‡§¶‡•Ç‡§∏‡§∞‡•Ä ‡§µ‡§∏‡•ç‡§§‡•Å ‡§ö‡§æ‡§π‡§ø‡§è, ‡§π‡§Æ ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç '‡§∏‡•Ç‡§ö‡•Ä[‡•®]'
#    commands:
#    -   name: ‡§ó‡§ø‡§®‡§§‡•Ä
#        explanation: ‡§π‡§Æ ‡§∏‡•Ç‡§ö‡•Ä ‡§Æ‡•á‡§Ç ‡§∏‡•á ‡§∏‡§æ‡§∞‡•á ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§ú‡•ã‡•ú ‡§≠‡•Ä ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç
#        example: ‡§∏‡•Ç‡§ö‡•Ä[1]
#        demo_code: |-
#            ‡§∏‡•Ç‡§ö‡•Ä is ['‡•ß', '‡•®', '‡•©']
#            ‡§ú‡•ã‡•ú is ‡§∏‡•Ç‡§ö‡•Ä[1] + ‡§∏‡•Ç‡§ö‡•Ä[2]
#            ‡§ú‡•ã‡•ú is ‡§ú‡•ã‡•ú + ‡§∏‡•Ç‡§ö‡•Ä[3]
#            # ‡§π‡§Æ ‡§Ø‡§π‡§æ‡§Å ‡§è‡§ï ‡•¨ ‡§ï‡•Ä ‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
#            print(‡§ú‡•ã‡•ú)
#20:
#    start_code: |-
#        ‡§´‡§≤ is ['‡§∏‡•á‡§¨', '‡§ï‡•á‡§≤‡§æ', '‡§ö‡•á‡§∞‡•Ä']
#        for ‡§á in range(1, 3):
#            print(‡§´‡§≤[‡§á])
#    intro_text: ‡§π‡§Æ ‡§∏‡•Ç‡§ö‡•Ä ‡§Æ‡•á‡§Ç ‡§∏‡§¨ ‡§¶‡•á‡§ñ ‡§≠‡•Ä ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç for ‡§≤‡•Ç‡§™ ‡§ï‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§∏‡•á| ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§∏‡•Ç‡§ö‡•Ä ‡§Æ‡•á‡§Ç ‡•© ‡§µ‡§∏‡•ç‡§§‡•Å‡§è‡§Ç ‡§π‡•à‡§Ç, ‡§á‡§∏‡§≤‡§ø‡§è ‡§π‡§Æ ‡§≤‡•Ç‡§™ ‡§ï‡•ã ‡•ß ‡§∏‡•á ‡•© ‡§§‡§ï ‡§≤‡•á‡§§‡•á ‡§π‡•à‡§Ç| ‡§Ö‡§¨ ‡§π‡§Æ ‡§≤‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§∏‡§¨ ‡§ï‡•Å‡§õ ‡§õ‡§æ‡§™ ‡§¶‡•á‡§§‡•á ‡§π‡•à‡§Ç|
#    commands:
#    -   name: ‡§∏‡•Ç‡§ö‡•Ä ‡§ï‡•Ä ‡§≤‡§Æ‡•ç‡§¨‡§æ‡§à
#        explanation: "`length` ‡§ï‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§∏‡•á ‡§π‡§Æ ‡§∏‡•Ç‡§ö‡•Ä ‡§ï‡§æ ‡§Æ‡§æ‡§™ ‡§¶‡•á‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç| ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§Æ‡•á‡§Ç ‡§∏‡•Ç‡§ö‡•Ä ‡•© ‡§π‡•à ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§∏‡•Ç‡§ö‡•Ä ‡§Æ‡•á‡§Ç ‡•© ‡§µ‡§∏‡•ç‡§§‡•Å‡§è‡§Ç ‡§π‡•à‡§Ç"
#        example: length(‡§∏‡•Ç‡§ö‡•Ä)
#        demo_code: |-
#            ‡§´‡§≤ is ['‡§∏‡•á‡§¨', '‡§ï‡•á‡§≤‡§æ', '‡§ö‡•á‡§∞‡•Ä']
#            print('‡§∏‡•Ç‡§ö‡•Ä ‡§ï‡•Ä ‡§≤‡§Æ‡•ç‡§¨‡§æ‡§à ‡§π‡•à ' length(‡§´‡§≤))
#            for ‡§á in range(1, length(‡§´‡§≤)):
#                print(‡§´‡§≤[‡§á])
#21:
#    start_code: |-
#        print('‡•´+‡•© ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à ?')
#        ‡§â‡§§‡•ç‡§§‡§∞ = 5+3
#        print('‡§Ö‡§¨ ‡§â‡§§‡•ç‡§§‡§∞ ‡§π‡•à:')
#        print(‡§â‡§§‡•ç‡§§‡§∞)
#        if ‡§â‡§§‡•ç‡§§‡§∞ == 8:
#            print('‡§Ø‡§π ‡§∏‡§π‡•Ä ‡§π‡•à!')
#        else:
#            print('‡§Ö‡§∞‡•á ‡§®‡§π‡•Ä‡§Ç! ‡§Ø‡§π ‡§ó‡§≤‡§§ ‡§π‡•à!')
#    intro_text: ‡§Ö‡§¨ ‡§π‡§Æ is ‡§ï‡•ã '=' ‡§î‡§∞ '==' ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡§®‡•á ‡§ú‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç| ‡§π‡§Æ '=' ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç ‡§Ö‡§ó‡§∞ ‡§π‡§Æ ‡§è‡§ï ‡§µ‡•á‡§∞‡§ø‡§è‡§¨‡§≤ ‡§ï‡•ã ‡§è‡§ï ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§®‡§ø‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç| ‡§Ö‡§ó‡§∞ ‡§Ü‡§™ ‡§µ‡•á‡§∞‡§ø‡§è‡§¨‡§≤ ‡§â‡§§‡•ç‡§§‡§∞ ‡§ï‡•ã ‡•Æ ‡§ï‡§æ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§®‡§ø‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç, ‡§§‡•ã ‡§π‡§Æ ‡§â‡§§‡•ç‡§§‡§∞ =‡•Æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç| '==' ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§π‡§Æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç ‡§ú‡§¨ ‡§π‡§Æ ‡§¶‡•á‡§ñ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç ‡§Ö‡§ó‡§∞ ‡§¶‡•ã ‡§µ‡§∏‡•ç‡§§‡•Å‡§è‡§Ç ‡§∏‡§Æ‡§æ‡§® ‡§π‡•ã‡§Ç|
#    commands:
#    -   name: ‡§§‡•Å‡§≤‡§®‡§æ ‡§ï‡§∞‡•ã
#        explanation: ‡§Ö‡§ó‡§∞ ‡§π‡§Æ ‡§§‡•Å‡§≤‡§®‡§æ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç, ‡§π‡§Æ == ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç| ‡•´+‡•©==‡•Æ ‡§ú‡§æ‡§Ç‡§ö‡§§‡§æ ‡§π‡•à ‡§Ö‡§ó‡§∞ ‡•´+‡•© ‡§¨‡§∞‡§æ‡§¨‡§∞ ‡§π‡•à ‡•Æ ‡§ï‡•á
#        example: '‡§â‡§¶‡§æ‡§π‡§∞‡§£: ‡•´+‡•© == ‡•Æ'
#        demo_code: |-
#            if 5+3 == 8:
#                print('‡•´+‡•© ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ ‡§Æ‡•á‡§Ç ‡•Æ ‡§π‡•à')
#            else:
#                 print('‡§Ø‡§π ‡§®‡§π‡•Ä‡§Ç ‡§õ‡§™‡•á‡§ó‡§æ ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡•´+‡•© ‡•Æ ‡§π‡•à!')
#    -   name: ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§®‡§ø‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§ï‡§∞‡•ã
#        explanation: ‡§Ö‡§ó‡§∞ ‡§π‡§Æ ‡§ï‡§π‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç ‡§ï‡§ø ‡§â‡§§‡•ç‡§§‡§∞ ‡§ï‡§π‡§≤‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§è‡§ï ‡§µ‡•á‡§∞‡§ø‡§è‡§¨‡§≤ ‡•Æ ‡§π‡•à, ‡§π‡§Æ ‡§â‡§§‡•ç‡§§‡§∞=‡•Æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
#        example: '‡§â‡§¶‡§æ‡§π‡§∞‡§£: ‡§â‡§§‡•ç‡§§‡§∞ = ‡•Æ'
#        demo_code: |-
#            print('‡•´+‡•© ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à ?')
#            ‡§â‡§§‡•ç‡§§‡§∞ = 5+3
#            print('‡§Ö‡§¨ ‡§â‡§§‡•ç‡§§‡§∞ ‡§π‡•à:')
#            print(‡§â‡§§‡•ç‡§§‡§∞)
#    -   name: ‡§§‡•Å‡§≤‡§®‡§æ ‡§î‡§∞ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§®‡§ø‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§ï‡§∞‡•ã
#        explanation: ‡§Ö‡§ó‡§∞ ‡§π‡§Æ ‡•® ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•Ä ‡§§‡•Å‡§≤‡§®‡§æ ‡§ï‡§∞‡§®‡•á ‡§ú‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç, ‡§π‡§Æ '==' ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç| ‡§Ö‡§ó‡§∞ ‡§π‡§Æ ‡§è‡§ï ‡§µ‡•á‡§∞‡§ø‡§è‡§¨‡§≤ ‡§ï‡•ã ‡§®‡§ø‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§ú‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç, ‡§π‡§Æ '=' ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç|
#        example: '‡§â‡§¶‡§æ‡§π‡§∞‡§£: ‡•´+‡•© == ‡•Æ, ‡§â‡§§‡•ç‡§§‡§∞ = ‡•Æ'
#        demo_code: |-
#            print('‡•´+‡•© ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à ?')
#            ‡§â‡§§‡•ç‡§§‡§∞ = 5+3
#            print('‡§Ö‡§¨ ‡§â‡§§‡•ç‡§§‡§∞ ‡§π‡•à:')
#            print(‡§â‡§§‡•ç‡§§‡§∞)
#            if ‡§â‡§§‡•ç‡§§‡§∞ == 8:
#                print('‡§Ø‡§π ‡§∏‡§π‡•Ä ‡§π‡•à!')
#            else:
#                print('‡§Ö‡§∞‡•á ‡§®‡§π‡•Ä‡§Ç! ‡§Ø‡§π ‡§ó‡§≤‡§§ ‡§π‡•à!')
#22:
#    start_code: |-
#        ‡§¶‡•á‡§∂ = input('‡§Ü‡§™ ‡§ï‡§π‡§æ‡§Å ‡§∞‡§π‡§§‡•á ‡§π‡•à‡§Ç?')
#        if ‡§≠‡•Ç‡§Æ‡§ø != ‡§®‡•á‡§•‡•á‡§∞‡§≤‡•à‡§Ç‡§°‡•ç‡§∏:
#            print('‡§¨‡•ù‡§ø‡§Ø‡§æ!')
#        else:
#            print('‡§Æ‡•à‡§Ç ‡§≠‡•Ä ‡§®‡•á‡§•‡•á‡§∞‡§≤‡•à‡§Ç‡§°‡•ç‡§∏ ‡§∏‡•á ‡§π‡•Ç‡§Å!')
#    intro_text: ‡§π‡§Æ ‡§è‡§ï ‡§®‡§Ø‡§æ ‡§µ‡§ø‡§∑‡§Ø ‡§∏‡•Ä‡§ñ‡§®‡•á ‡§ú‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç, `!=` | ! ‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨ ‡§π‡•ã‡§§‡§æ ‡§π‡•à ‡§®‡§π‡•Ä‡§Ç ‡§î‡§∞ = ‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨ ‡§π‡•ã‡§§‡§æ ‡§π‡•à ‡§¨‡§∞‡§æ‡§¨‡§∞, ‡§§‡•ã != ‡§ï‡§æ ‡§Æ‡§§‡§≤‡§¨ ‡§π‡•ã‡§§‡§æ ‡§π‡•à ‡§¨‡§∞‡§æ‡§¨‡§∞ ‡§®‡§π‡•Ä‡§Ç| ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡•´!=‡•™|
#    commands:
#    -   name: ‡§¨‡§∞‡§æ‡§¨‡§∞ ‡§®‡§π‡•Ä‡§Ç
#        explanation: ‡§Ö‡§ó‡§∞ ‡§π‡§Æ ‡§ú‡§æ‡§Ç‡§ö ‡§∞‡§π‡•á ‡§π‡•à‡§Ç ‡§ï‡§ø ‡§¶‡•ã ‡§µ‡§∏‡•ç‡§§‡•Å‡§è‡§Ç ‡§¨‡§∞‡§æ‡§¨‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç, ‡§π‡§Æ `!=` ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
#        example: '‡§â‡§¶‡§æ‡§π‡§∞‡§£: ‡•´+‡•© != 5'
#        demo_code: |-
#            ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ = input('‡§Ü‡§™‡§ï‡•ã ‡•´ ‡§¨‡•ã‡§≤‡§®‡•á ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§è‡§ï ‡§¨‡•ù‡§ø‡§Ø‡§æ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§ï‡•å‡§®‡§∏‡•Ä ‡§π‡•à?')
#            if ‡§ó‡•á‡§ü‡§≤ != 5:
#                print('‡§¨‡•ù‡§ø‡§Ø‡§æ ‡§ï‡§æ‡§Æ!')
#            else:
#                 print('‡§Ü‡§™‡§ï‡•ã ‡•´ ‡§¨‡•ã‡§≤‡§®‡•á ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§•‡•Ä!')
    -   explanation: When we use a `{for}`, we need to put a `:` behind the `{for}` statement!
        example: 'for i {in} {range} 1 {to} 10:'
        demo_code: "{for} i {in} {range} 1 {to} 12:\n    {print} i\n{print} 'Ready or not, here I come!'"
        name: '{print}'
    -   name: '{if}'
        explanation: We need to do the same with all of our `{if}` statements
        example: if colour {is} green:'
        demo_code: "colour = {ask} 'What is your favorite color?'\n{if} colour == green:\n    {print} 'Your favorite colour is green'\n{else}:\n    {print} 'Your favorite colour is not green'"
18:
    commands:
    -   demo_code: "{print}('hi!')"
        name: '{print}'
        explanation: With `{print}` you need to use parentheses
        example: '{print}'
    -   name: '{print} with var'
        explanation: With `{print}` you need to use parentheses and commas if you {print} more items
        example: '{print}'
        demo_code: "naam = 'Hedy'\n{print}('my name is ', naam)"
    start_code: "naam = 'Hedy'\n{print}('My name is ', naam)"
    intro_text: "We arrived at real pythoncode! That means we need to use parentheses with {print} and {range} from now on.\nThat looks like this:\n```\n{print}('my name is Hedy!')\n```\nIf you want to print more thant one items, you need to separate them by commas.\n```\nnaam = 'Hedy'\n{print}('my name is ', naam)\n```"
