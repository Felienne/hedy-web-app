1:
    start_code: '{print} witaj ≈õwiecie!'
    intro_text: "## Witaj w Hedy!\nNa Poziomie 1 nauczysz siƒô u≈ºywaƒá komend `{print}`, `{ask}` i `{echo}`.\nNapisz sw√≥j kod w polu programowania. Lub naci≈õnij zielony przycisk w przyk≈Çadowym bloku kodu aby kod wpisa≈Ç siƒô dla ciebie!\nSpr√≥b√≥j samo kodowania wraz z zielonym przyciskiem 'Uruchom kod' obecnym pod polem programowania.\n\nMo≈ºesz wypisaƒá tekst na ekran przy u≈ºyciu komendy `{print}`.\n"
    example_code: "## Przyk≈Çadowy kod\n```\n{print} Hej!\n{print} Witaj w Hedy!\n```\n"
    intro_text_2: "Mo≈ºesz r√≥wnie≈º zapytaƒá o dane za pomocƒÖ `{ask}` oraz powt√≥rzyƒá je z powrotem za pomocƒÖ komendy `{echo}`.\n"
    intro_text_3: "Zacznijmy! Nie wiesz co stworzyƒá? Na nastƒôpnych zak≈Çadkach znajdziesz pomys≈Çy na programy do stworzenia.\n"
    example_code_2: "## Przyk≈Çadowy kod\n```\n{ask} Jak masz na imiƒô?\n{echo} Hej\n```\n"
    commands:
    -   name: '{print}'
        explanation: '{print} co≈õ za pomocƒÖ `{print}`.'
        example: 'Przyk≈Çad: {print} Hej, witaj w Hedy!'
        demo_code: '{print} Hej, witaj w Hedy!'
    -   name: '{ask}'
        explanation: Zapytaj o co≈õ poprzez `{ask}`.
        example: 'Przyk≈Çad: {ask} Jaki jest tw√≥j ulubiony kolor?'
        demo_code: '{ask} Jaki jest tw√≥j ulubiony kolor?'
    -   name: '{echo}'
        explanation: Powt√≥rz co≈õ u≈ºywajƒÖc `{echo}`.
        example: 'Przyk≈Çad: {echo} wiƒôc twoim ulubionym kolorem jest '
        demo_code: "{ask} Jaki jest tw√≥j ulubiony kolor?\n{echo} wiƒôc twoim ulubionym kolorem jest"
    -   name: '{print} emod≈ºi'
        explanation: wypisz emod≈ºi poprzez `{print}`
        example: 'Przyk≈Çad: {print} üôã‚Äç üåç ‚ùó'
        demo_code: '{print} üôã üåç ‚ùó'
    -   name: '{forward}'
        explanation: Draw a line with `{forward}`.
        example: 'Example: {forward} 100'
        demo_code: '{forward} 100'
    -   name: '{turn}'
        explanation: turn the drawing turtle with `{turn}`
        example: 'Example: {turn}'
        demo_code: "{forward} 25\n{turn} left\n{forward} 25\n{turn} right"
2:
    commands:
    -   demo_code: "name {is} Hedy\n{print} welcome name"
        name: '{is}'
        explanation: Give a word a name to use in the program using `{is}`. You can choose the name yourself.
        example: 'Example: name {is} Hedy.'
    -   name: '{ask}'
        explanation: ask something with `{ask}`. Beware! You need to give the answer a name with `{is}`.
        example: 'Example: color {is} {ask} What is your favorite color?'
        demo_code: "color {is} {ask} What is your favorite color?\n{print} color is your favorite!"
    -   name: '{sleep}'
        explanation: Let Hedy pause for a (couple of) second(s).
        example: 'Example: {sleep} 2 '
        demo_code: "{print} Let me think for one second...\n{sleep}\n{print} Hmm.. I need 3 more seconds...\n{sleep} 3\n{print} Eureka! Ive got it!"
    -   explanation: Give a number a name using `{is}`. You can choose the name yourself.
        example: 'Example: angle {is} 90'
        demo_code: "angle {is} 90\n{turn} angle\n{forward} 100"
        name: is - turtle
    intro_text: "## Variables\nIn level 2 we learn two new commands: `{is}` and `{sleep}`.\nYou can name a word with `{is}`. This is called a variable. In this example we made a variable called name and a variable called age. You can use the word name anywhere in your code and it will be replaced by Hedy, like this:\n\nThis way you no longer need the `{echo}` command!\n"
    example_code: "## Example code\n```\nname {is} Hedy\nage {is} 15\n{print} name is age years old\n```\n"
    intro_text_2: "`{print}` still works the same, but the `{ask}` command has changed. You need to use a variable in the `{ask}` command as well. It looks like this:\n"
    example_code_2: "```\nanswer {is} {ask} What is your name?\n{print} Hello answer\n```\n"
    intro_text_3: "Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.\n"
    example_code_3: "```\n{print} My favorite colour is...\n{sleep} 2\n{print} green!\n```\n"
    start_code: '{print} hello world!'
3:
    commands:
    -   name: choose_random
        explanation: Choose a random word from a group with `{at}` and `{random}`
        example: 'Example: animals {is} dog, cat, kangaroo.'
        demo_code: "animals {is} dog, cat, kangaroo\n{print} animals {at} {random}"
    -   demo_code: "animals {is} cow, cat\n{add} dog {to_list} animals"
        name: '{add}'
        explanation: add an item to a list
        example: 'Example: {add} dog {to_list} animals'
    -   name: '{remove}'
        explanation: remove an item from a list
        example: 'Example: {remove} dog {from} animals'
        demo_code: "animals {is} cat, dog, cow\n{remove} dog {from} animals"
    intro_text: "## Make a list!\nIn level 3 you can make a list. You can let the computer choose something random from the list. You do that with `{at} {random}`.\n"
    example_code: "## Example Hedy Code\n\n```\nanimals {is} dog, cat, kangaroo\n{print} animals {at} {random}\n```\n"
    intro_text_2: You can also add items to the list with `{add}` and remove items with `{remove}`.
    example_code_2: "## Example Hedy Code\n\n```\nanimals {is} dog, cat, kangaroo\n{add} penguin {to_list} animals\n{remove} cat {from} animals\n{print} animals {at} {random}\n```\n"
    start_code: '{print} hello world!'
4:
    start_code: "{print} 'Hello world'"
    example_code: "## Example Hedy code\n```\nprint 'You need to use quotation marks from now on!'\nanswer is ask 'What do we need to use from now on?'\nprint 'We need to use ' answer\n```\n"
    intro_text: "## 'Quotation marks'\nIn level 4 `{ask}` and `{print}` have changed.\n\nYou must put text that you want to print between quotation marks.\n\nThis is useful, because now you can print all the words you want. Also the words you used to store something with `{is}`.\n\nMost programming languages also use quotation marks when printing, so we are also getting a step closer to real programming!\n"
    intro_text_2: "## Adventures are getting more and more difficult\nThe adventures are now getting more and more difficult in the successive tabs.\nSo it is best to start on the left with the story, and work to the right, in order to be challenged more and more.\n"
    commands:
    -   name: '{print}'
        explanation: print exactly using quotation marks
        example: "Example: {print} 'Hello welcome to Hedy.'"
        demo_code: "{print} 'Hello welcome to Hedy.'"
    -   name: '{is}'
        explanation: Give a name to some text and `{print}` without quotation marks
        example: 'Example: name {is} Hedy.'
        demo_code: "name {is} Hedy\n{print} 'my name is ' name"
    -   name: '{ask}'
        explanation: ask something with `{ask}`.
        example: "Example: color {is} {ask} 'What is your favorite color?'"
        demo_code: "color {is} {ask} 'What is your favorite color?'\n{print} color ' is your favorite!'"
6:
    start_code: "{print} '5 times 5 is ' 5 * 5"
    intro_text: "## 1 + 1\n In this level you learn something new: you can now also calculate.\n\n The plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.\n\n The {times} is a bit different, because there is no {times} symbol on your keyboard. Just search, there really isn't!\n That is why we multiply with the asterisk above 8: `5 * 5`. Read that as \"5 times 5\" that helps you remember it best.\n"
    example_code: "## Example Hedy code\n```\n{print} '5 plus 5 is ' 5 + 5\n{print} '5 minus 5 is ' 5 - 5\n{print} '5 {times} 5 is ' 5 * 5\n```\n"
    intro_text_2: "We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:\n"
    example_code_2: "```\nname = Hedy\nanswer = 20 + 4\n```\n"
    commands:
    -   name: '{print}'
        explanation: print exactly using quotation marks
        example: "Example: {print} '5 times 5 is ' 5 * 5"
        demo_code: "{print} '5 times 5 is ' 5 * 5"
    -   name: '{ask}'
        explanation: '{ask} for a calculation and check whether it is correct.'
        example: "Example: answer {is} {ask} 'What is 10 plus 10?'"
        demo_code: "answer = {ask} 'What is 10 plus 10?'\n{if} answer {is} 20 {print} 'Yes!' {else} {print} 'Oops'"
    -   name: '`{ask}` {and} `{if}` turtle'
        explanation: '{ask} the user how many angles they want'
        example: "Example: angles {is} {ask} 'How many angles?'"
        demo_code: "angles = {ask} 'How many angles?'\nangle = 360 / angles\n{forward} 50"
13:
    start_code: "name = {ask} 'what is your name?'\nage = {ask} 'what is your age?'\n{if} name {is} 'Hedy' {and} age {is} 2\n    {print} 'You are the real Hedy!'"
    example_code: "```\nname = ask 'what is your name?'\nage = ask 'what is your age?'\nif name is 'Hedy' and age is 2\n    print 'You are the real Hedy!'\n```\n"
    intro_text: "## And... Or..?\nWe are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two if's but can use `{and}` and `{or}`. If you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct.\n"
    commands:
    -   name: '{and}'
        explanation: Two parts both need to be correct
        example: if 3+2 {is} 5 {and} 2+2 {is} 4
        demo_code: "answer1 = {ask} 'What is 3+2?'\nanswer2 = {ask} 'What is 2+2?'\n{if} answer1 {is} 5 {and} answer2 {is} 4\n    {print} 'Both answers are correct!'\nelse\n    {print} 'At least one answer is wrong!'"
    -   name: '{or}'
        explanation: At least 1 of the two parts need to be correct. If both are correct, it is also fine.
        example: if 3+2 {is} 5 {or} 2+2 {is} 4
        demo_code: "answer1 = {ask} 'What is 3+2?'\nanswer2 = {ask} 'What is 2+2?'\n{if} answer1 {is} 5 {or} answer2 {is} 4\n    {print} 'At least one answer is correct!'\nelse\n    {print} 'Both answers are wrong!'"
14:
    commands:
    -   name: Smaller
        explanation: We use the `<` to check if the first number is smaller than the second number.
        example: 'For example: age < 12'
        demo_code: "age = {ask} 'How old are you?'\n{if} age < 13\n    {print} 'You are younger than me!'"
    -   name: Bigger
        explanation: We use the `>` to check if the first number is bigger than the second number.
        example: 'For example: age > 12'
        demo_code: "age = {ask} 'How old are you?'\n{if} age > 13\n    {print} 'You are older than me!'"
    -   name: Equal
        explanation: We use the `==` to check if two things are the same.
        example: 'For example: answer == 25'
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer == 25\n    {print} 'That {is} correct!'"
    -   name: Not equal
        explanation: 'We use the `!=` to check if two things are not the same. '
        example: 'For example: answer != 25'
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer != 25\n    {print} 'That is not correct!'"
    -   name: Smaller {or} equal
        explanation: We use the `<=` to check if the first number is smaller than or equal to the second number.
        example: 'For example: age <= 12'
        demo_code: "age = {ask} 'How old are you?'\n{if} age <= 12\n    {print} 'You are younger than me!'"
    -   name: Bigger or equal
        explanation: We use the `>=` to check if the first number is bigger than or equal to the second number.
        example: 'For example: age >= 14'
        demo_code: "age = {ask} 'How old are you?'\n{if} age >= 14\n    {print} 'You are older than me!'"
    start_code: "age = {ask} 'How old are you?'\n{if} age < 13\n    {print} 'You are younger than me!'\nelse\n    {print} 'You are older than me!'"
    intro_text: "## Great, Greater, Greatest!\nWe are going to learn more new items. You might know them already from mathematics, the `<` and `>`.\nThe `<` checks if the first number is smaller than the second, for example `age < 12` checks if `age` {is} smaller than 12.\nIf you want to check if the first number is smaller or equal to the second, you can use `<=`, for example `age <= 11`.\nThe `>` checks if the first number is bigger than the second, for example `points > 10` checks if `points` is larger than 10.\nIf you want to check if the first number is bigger or equal to the second, you can use `>=`, for example `points >= 11`.\nYou use these comparisons in an `{if}`, like this:\n"
    example_code: "## Example Hedy Code\n```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n"
    intro_text_2: "From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:\n"
    example_code_2: "```\nname = {ask} 'What is your name?'\n{if} name == 'Hedy'\n    {print} 'You are coo!'\n```\n"
    intro_text_3: "You can also compare if something is *not* equal to something else using `!=` like this:\n"
    example_code_3: "```\nname = {ask} 'What is your name?'\n{if} name != 'Hedy'\n    {print} 'You are not Hedy'\n```\n"
18:
    commands:
    -   name: '{print}'
        explanation: With `{print}` you need to use parentheses
        example: '{print}'
        demo_code: "{print}('hi!')"
    -   name: '{print} with var'
        explanation: With `{print}` you need to use parentheses and commas if you {print} more items
        example: '{print}'
        demo_code: "naam = 'Hedy'\n{print}('my name is ', naam)"
    start_code: "naam = 'Hedy'\n{print}('My name is ', naam)"
    intro_text: "## Level 18\nWe arrived at real pythoncode! That means we need to use parentheses with {print} and {range} from now on.\nThat looks like this:\n```\n{print}('my name is Hedy!')\n```\nIf you want to print more thant one items, you need to separate them by commas.\n```\nnaam = 'Hedy'\n{print}('my name is ', naam)\n```"
5:
    start_code: "name {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'cool!' {else} {print} 'meh'"
    intro_text: "## If... else....\nIn level 5 there is something new, the `{if}`! With the `{if}` you can choose between two different options.\nThis code prints nice if you enter Hedy as a name, and boo! if you enter something else.\n`{ask}` {and} `{print}` still work like they did in level 4.\n"
    example_code: "## Example Hedy Code\n```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'\n```\n"
    intro_text_3: "## Lists\nWhen we want to check if something is in a list, we can now use the `{in}` command.\nThis code prints pretty! if you choose green or yellow, and meh otherwise.\n"
    example_code_3: "```\npretty_colors {is} green, yellow\ncolor {is} {ask} 'What is your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!'\n{else} {print} 'meh'\n```\n"
    intro_text_2: "Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:\n"
    example_code_2: "```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice'\n{else} {print} 'boo!'\n```\n"
    commands:
    -   name: '{print}'
        explanation: print exactly using quotation marks
        example: "Example: {print} 'Hello welcome to Hedy.'"
        demo_code: "{print} 'Hello welcome to Hedy.'"
    -   name: '{ask}'
        explanation: ask something with `{ask}`.
        example: "Example: color {is} {ask} 'What is your favorite color?'"
        demo_code: "color {is} {ask} 'What is your favorite color?'\n{print} color ' {is} your favorite!'"
    -   name: '{if}'
        explanation: Make a choice with `{if}`
        example: "Example: {if} color {is} green {print} 'pretty!' {else} {print} 'meh'"
        demo_code: "color {is} {ask} 'What is your favorite color?'\n{if} color {is} green {print} 'pretty!' {else} {print} 'meh'"
    -   name: '{if} with turtle'
        explanation: Make a choice with `{if}`
        example: 'Example: {if} answer {is} far {forward} 100 {else} {forward} 5'
        demo_code: "answer {is} {ask} 'How far should I walk?'\n{if} answer {is} far {forward} 100 {else} {forward} 5"
    -   name: '{in}'
        explanation: Check elements with `{in}`
        example: "Example: {if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
        demo_code: "pretty_colors {is} green, yellow\ncolor {is} {ask} 'What {is} your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
8:
    commands:
    -   name: '{print}'
        explanation: print something. Remember to use a quotation mark for literal printing.
        example: "Example: {print} '5 times 5 is ' 5 * 5"
        demo_code: "{print} '5 times 5 is ' 5 * 5"
    -   name: '{ask}'
        explanation: ask for the answer to a sum and check if it is correct. We can now print 2 lines.
        example: "Example: answer {is} {ask} 'What is 5 plus 5?'"
        demo_code: "answer = {ask} 'What is 5 plus 5?'\n{if} answer {is} 10\n    {print} 'Well done!'\n    {print} 'Indeed, the answer was ' answer\nelse\n    {print} 'Oops!'\n    {print} 'The answer is 10'"
    -   name: '`{repeat}` with turtle'
        explanation: '{repeat} multiple lines'
        example: 'Example: draw a square'
        demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
    start_code: "{repeat} 5 {times}\n    {print} 'Hello folks'\n    {print} 'This will be printed 5 times'"
    intro_text: "## Indentation\n`{ask}` {and} `{print}` still work as you know them. But `{if}` {and} `{repeat}` have changed!\nYou can now execute groups of code together, but you will have to *indent* the code.\nThat means putting four spaces at the beginning of the line. You will also have to indent when you just want to create a block of one line.\n"
    example_code: "## Example Hedy code\n```\n{repeat} 5 {times}\n    {print} 'Hello everyone'\n    {print} 'This is all repeated 5 times'\n```\n"
7:
    start_code: "{repeat} 3 {times} {print} 'Hedy is fun!'"
    intro_text: "## Level 7! Level 7!\nLevel 7 adds the `{repeat}` command. {repeat} can be used to execute one line of code multiple times.\n"
    example_code: "## Example Hedy code\n```\n{repeat} 3 {times} {print} 'Hedy {is} fun!'\n```\n"
    commands:
    -   name: '{print}'
        explanation: print exactly using quotation marks
        example: "Example: {print} 'Hello welcome to Hedy.'"
        demo_code: "{print} 'Hello welcome to Hedy.'"
    -   name: '{ask}'
        explanation: ask something with `{ask}`.
        example: "Example: color = {ask} 'What is your favorite color?'"
        demo_code: "color = {ask} 'What is your favorite color?'\n{print} color ' is your favorite!'"
    -   name: '{if}'
        explanation: Make a choice with `{if}`
        example: "Example: {if} color {is} green {print} 'pretty!' {else} {print} 'meh'"
        demo_code: "color = {ask} 'What is your favorite color?'\n{if} color {is} green {print} 'pretty!' {else} {print} 'meh'"
    -   name: '{repeat} - turtle'
        explanation: repeat a line of code with `{repeat}`.
        example: 'Example: {repeat} 3 {times} {forward} 10'
        demo_code: '{repeat} 3 {times} {forward} 10'
9:
    start_code: "{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    else\n        {print} 'pizza is better'"
    intro_text: "## All together now!\nIn this level you can not only use multiple lines with `{if}` {and} `{repeat}`, but you can also put them together!\nIn the example you see an `{if}` command within a `{repeat}` command. It is also allowed the other way around, and an `{if}` is also allowed in an `{if}` and a `{repeat}` in a `{repeat}`.\nGive it a try!\n"
    example_code: "## Example Hedy code\n```\n{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    else\n        {print} 'pizza is better'\n```\n"
    commands:
    -   name: '`{if}` with multiple lines'
        explanation: The answer of a sum of questions with '{ask}' and see if it is correct. Now we print out two lines.
        example: "Example: answer = {ask} 'What is 20 plus 20?'"
        demo_code: "answer = {ask} 'What is 20 plus 20?'\n{if} answer {is} 20\n    {print} 'Well done!!'\n    {print} 'The answer is indeed' answer\nelse\n    {print} 'Wrong'\n    {print} 'The answer is 20'"
    -   name: '`{repeat}` and turtle'
        explanation: '{repeat} multiple lines'
        example: 'Example: create a square'
        demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
10:
    start_code: "animals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal"
    intro_text: "## For each item in my list...\nIn this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.\n`{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with spaces.\n"
    example_code: "## Example Hedy code\n```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal\n```\n"
    commands:
    -   name: '{print}'
        explanation: print something. Remember to use a quotation mark for literal printing.
        example: "Example: {print} '5 times 5 is ' 5 * 5"
        demo_code: "{print} '5 times 5 is ' 5 * 5"
    -   name: '{for} with a list'
        explanation: 'print all things in a list '
        example: 'Example: {for} animal {in} animals'
        demo_code: "animals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal"
11:
    start_code: "{for} counter {in} {range} 1 {to} 5\n    {print} counter"
    intro_text: "## Loops!\n`{print}` works just the same but the we add a new form of the `{for}`. You can now write `{for} counter {in} {range} 1 {to} 5` and use `counter` in your program.\nTry it out to see what happens! Remember to use indentations after the `{for}` and `{if}` statements (That means starting a sentence with four spaces)\n"
    example_code: "## Example Hedy code\n```\nfor counter in range 1 to 5\n    print counter\n```\n"
    commands:
    -   name: '{for} loop'
        explanation: We can use `{for}` with a {range}
        example: for counter {in} {range} 1 {to} 5
        demo_code: "{for} counter {in} {range} 1 {to} 5\n    {print} counter"
    -   name: '{ask}'
        explanation: ask for the answer to a sum and check if it is correct. We can now print 2 lines.
        example: "Example: answer = {ask} 'What is 5 plus 5?'"
        demo_code: "answer = {ask} 'What is 5 plus 5?'\n{if} answer {is} 10\n    {print} 'Well done!'\n    {print} 'Indeed, the answer was ' answer\nelse\n    {print} 'Oops!'\n    {print} 'The answer is 10'"
12:
    start_code: "{print} 'decimal numbers now need to use a dot'\n{print} 2.5 + 2.5"
    intro_text: "## Numbers and texts\n**Decimal numbers**\nSo far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.\n"
    example_code: "## Example Hedy code\n```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n"
    intro_text_2: "**All texts need to be in quotation marks**\nFor this level on you will also have to use quotation marks when storing a text with `=`:\n"
    example_code_2: "```\nname = 'Hedy the Robot'\n{print} 'Hello ' name\n```\n"
    intro_text_3: "**All items in lists need quotation marks too**\nLists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.\nThis allows you to save two words as 1 item on the list, for example 'Iron Man'.\n"
    example_code_3: "```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n"
    intro_text_4: "**All text after `{if}` comparisons need quotation marks too**\n"
    example_code_4: "```\nname = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n"
    intro_text_5: "**Numbers don't need quotation marks**\nFor numbers, you do not use quotation marks in the `=`:\n"
    example_code_5: "```\nscore = 25\n{print} 'You got ' score\n```\n"
    intro_text_6: "**Maths with words** In this level it is also allowed to use the + sign with texts. For example:\n"
    example_code_6: "```\na = 'Hello '\nb = 'world!'\nprint a + b\n```\n"
    commands:
    -   name: float directly
        explanation: Decimal numbers
        example: '{print} 2.5 + 2.5'
        demo_code: "{print} 'Calculate away!'\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n"
    -   name: assign text
        explanation: Text with quotation marks after =
        example: name = 'Hedy'
        demo_code: "name = 'Hedy the Robot'\n{print} 'Hello ' name\n"
    -   name: quotes after {if} comparison
        explanation: Text with quotation marks after {if}
        example: name = 'Hedy'
        demo_code: "name = {ask} 'Who are you?'\n{if} name = 'Hedy'\n    {print} 'Hi there!'\n"
    -   name: quotes in list
        explanation: A list with quotation marks
        example: name = 'Hedy', 'Felienne'
        demo_code: "superheroes = 'Iron Man', 'Batman', 'Superman'\n{print} superheroes {at} {random}\n"
16:
    example_code: "## Example Hedy Code\n```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
    start_code: "fruit = ['apple', 'banana', 'cherry']\n{print} fruit"
    intro_text: "## More and more like real code!\nWe are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.\nYou can use the square brackets as well to point out a place in the lists.\n"
    commands:
    -   name: square brackets
        explanation: Lists with square brackets
        example: "For example: fruit = ['apple', 'banana', 'cherry']"
        demo_code: "fruit = ['apple', 'banana', 'cherry']\n{print} fruit"
    -   name: Get an item from a list
        explanation: To get an item from a list we use [number] so fruit[1] means, get the first fruit from the list!
        example: 'For example: firstfruit = fruit[1]'
        demo_code: "fruit = ['banana', 'apple', 'cherry']\nfirstfruit = fruit[1]\n{print} firstfruit"
    -   name: Get a random item from a list
        explanation: To get a random item from a list we use [random] so fruit[random] means, get a random fruit from the list!
        example: 'For example: random_fruit {is} fruit[random]'
        demo_code: "fruit = ['banana', 'apple', 'cherry']\nrandom_fruit = fruit[random]\n{print} random_fruit"
15:
    start_code: "answer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'"
    intro_text: "## More loops!\nWe are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.\nSo don't forget to change the value in the loop.\n\nIn the example code, we continue until a correct answer has been given.\nIf the correct answer is never given, the loop never ends!\n"
    example_code: "## Example Hedy code\n```\nanswer = 0\nwhile answer != 25\n    answer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n```\n"
    commands:
    -   name: '{while}'
        explanation: We can use the `{while}` loop with not equal
        example: 'Example: {while} correct_answer != 25'
        demo_code: "answer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'"
    -   name: Smaller {while}
        explanation: 'We can also use the `{while}` loop with `<` and `>`. '
        example: 'For example: {while} count < 3'
        demo_code: "count = 1\n{while} count < 3\n    {print} 'We do this ' 3 - count ' more times'\n    count = count + 1\n{print} 'We are done'"
17:
    commands:
    -   name: '{elif}'
        explanation: '`{elif}`.'
        example: '{elif} a {is} 5:'
        demo_code: "a = 2\n{if} a == 1:\n    {print} 'a is 1'\n{elif} a == 2:\n    {print} 'a is 2'\n{else}:\n    {print} 'a is not 1 or 2'"
    -   name: '{print}'
        explanation: When we use a `{for}`, we need to put a `:` behind the `{for}` statement!
        example: 'for i {in} {range} 1 {to} 10:'
        demo_code: "{for} i {in} {range} 1 {to} 12:\n    {print} i\n{print} 'Ready or not, here I come!'"
    -   name: '{if}'
        explanation: We need to do the same with all of our `{if}` statements
        example: if colour {is} green:'
        demo_code: "colour = {ask} 'What is your favorite color?'\n{if} colour == 'green':\n    {print} 'Your favorite colour is green'\n{else}:\n    {print} 'Your favorite colour is not green'"
    start_code: "{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Ready or not, here I come!'"
    intro_text: "Now we are going to change a little bit with indentation. Every time that we need an indentation, we need `:` at the line before the indentation.\n\nIn this level you can also use a new command: `{elif}`. `{elif}` is short for {else} {if} and you need it when you you want to make 3 (or more!) options.\nCheck it out!\n```\nprices = ['1 million dollars', 'an apple pie', 'nothing']\nyour_price = prices[random]\n{print} 'You win ' your_price\n{if} your_price == '1 million dollars' :\n    {print} 'Yeah! You are rich!'\n{elif} your_price == 'an apple pie' :\n    {print} 'Lovely, an apple pie!'\n{else}:\n    {print} 'Better luck next time..'\n```\n"
