1:
    intro_text: |-
        Selamat datang di Hedy! Pada level 1 kamu dapat menggunakan perintah `print`, `ask` dan `echo`.

        Pada bagian kiri kamu dapat melihat semua perintah untuk level 1.

        Tekan tombol biru dan kodenya akan dituliskan secara otomatis untukmu!

        Coba jalankan kodenya sendiri dengan menekan tombol 'Run code' di bawah kiri tampilan kode.

        Tidak tahu apa yang mau dibuat? Pada tab-tab berikutnya kamu akan menemukan beberapa ide tentang apa yang bisa dibuat.
    start_code: print halo dunia!
    commands:
    -   explanation: Tampilkan sesuatu dengan `print`.
        example: 'Contoh: print Halo selamat datang di Hedy!'
        demo_code: print Halo selamat datang di Hedy!
    -   explanation: Tanyakan sesuatu dengan `ask`
        example: 'Contoh: ask Apa warna favoritmu?'
        demo_code: ask Apa warna favoritmu?
    -   explanation: Ulangi sesuatu dengan `echo`
        example: 'Contoh: echo maka warna favoritmu adalah '
        demo_code: |-
            ask Apa warna favoritmu?
            echo maka warna favoritmu adalah 
2:
    intro_text: |-
        Pada level 2, kita belajar hal baru. Kamu dapat menamai sebuah kata dengan `is`.

        Jika kamu menggunakan kode `nama is Hedy`, kamu dapat menggunakan 'nama' tersebut dimanapun pada kodemu dan semuanya akan digantikan dengan 'Hedy'.

        Catatan: perintah `ask` sudah diupdate. Kamu juga dapat menyimpan jawaban dari perintah tersebut dengan sebuah nama, seperti ini:
        ```
        jawaban is ask What is your name?
        ```

        `print` tetap berfungsi sama dengan di level 1, dan kamu tidak lagi membutuhkan `echo`.

        Pada level 2 kamu juga dapat membuat list. Kamu dapat meminta komputer memilih sesuatu secara acak dari list tersebut. Kamu dapat melakukan itu dengan `at random`.

        Kamu bisa menemukan semua kode contoh level 2 pada bagian kiri. Ada juga diberikan latihan pada tab-tab diatas.
    start_code: print halo dunia!
    commands:
    -   explanation: Berikan sebuah kata nama untuk digunakan di program dengan menggunakan `is`
        example: 'Contoh: nama is Hedy'
        demo_code: |-
            nama is Hedy
            print selamat datang nama
    -   explanation: Tanyakan sesuatu dengan `ask`. Ingat, kamu harus memberikan jawabannya sebuah nama menggunakan `is`
        example: 'Contoh: warna is ask Apa warna favoritmu?'
        demo_code: |-
            warna is ask Apa warna favoritmu?
            print warna ini kesukaanmu
    -   explanation: Pilih satu kata acak dari kumpulan kata dengan `at` dan `random`
        example: 'Contoh: hewan is anjing, kucing, kangguru'
        demo_code: |-
            hewan is anjing, kucing, kangguru
            print hewan at random
3:
    start_code: print 'Halo dunia'
    intro_text: |-
        Pada level 3 perintah `ask` dan `print` sudah diupdate.

        Kamu harus memasukkan teks yang mau kamu tampilkan diantara tanda kutip satu.

        Ini berguna, karena sekarang kamu bisa menampilkan semua kata yang kamu mau, termasuk kata yang sebelumnya digunakan untuk menyimpan sesuatu dengan `is`.

        Kebanyakan bahasa pemrograman juga menggunakan tanda kutip ketika menampilkan, jadi sebenarnya kita satu langkah lebih dekat dengan pemrograman yang sebenarnya!

        ### Tugas-tugas akan menjadi makin kompleks
        Kamu akan menemukan semua perintah di bagian kiri lagi dan tugas-tugas di tab-tab yang disediakan. Tugas-tugas tersebut sekarang akan menjadi lebih kompleks semakin ke kanan tabnya.
        Jadi adalah baik untuk memulai dari tab tugas paling kiri, dan mengerjakannya satu per satu ke kanan, supaya tantangan yang diberikan setara dengan kemampuan kamu.
    commands:
    -   explanation: Tampilkan sama persis dengan menggunakan tanda kutip
        example: "Contoh: print 'Halo selamat datang di Hedy'"
        demo_code: print 'Halo selamat datang di Hedy'
    -   explanation: Berikan sebuah nama ke sebuah teks dan `print` tanpa tanda kutip
        example: 'Contoh: nama is Hedy'
        demo_code: |-
            nama is Hedy
            print 'nama saya adalah ' nama
    -   explanation: Tanyakan sesuatu dengan `ask`
        example: "Contoh: warna is ask 'Apa warna favoritmu?'"
        demo_code: |-
            warna is ask 'Apa warna favoritmu?'
            print warna ' ini adalah kesukaanmu!'
4:
    start_code: |-
        nama is ask 'siapa nama kamu?'
        if nama is Hedy print 'keren' else print 'boo'
    intro_text: |-
        Perintah `ask` dan `print` tetap sama seperti pada level 3.

        Pada level 4, ada hal baru, `if`! Dengan `if` kamu bisa memilih antara dua pilihan.

        ## Contoh kode Hedy
        ```
        nama is ask 'siapa nama kamu?'
        if nama is Hedy print 'keren' else print 'boo'
        ```

        Kode ini menampilkan keren jika kamu memasukkan Hedy sebagai nama, dan boo jika kamu memasukkan yang lain.

        ## Tips
        Terkadang kode dengan `if` bisa menjadi sangat panjang dan tidak cukup menggunakan satu baris <br> 
        Kamu dapat memisah kodenya menjadi dua baris; baris kedua dimulai dengan `else` seperti ini:
        ```
        nama is ask 'siapa nama kamu?'
        if nama is Hedy print 'keren' 
        else print 'boo'
        ```

        ## Tugas-tugas akan menjadi semakin kompleks

        Pada level 4, tugas-tugas yang ada pada tab-tab terlampir akan menjadi makin kompleks semakin posisi tabnya ke kanan. Jadi, pastikan untuk mengerjakan mulai dari kiri ke kanan.
    commands:
    -   explanation: Tampilkan sama persis dengan menggunakan tanda kutip
        example: "Contoh: print 'Halo selamat datang di Hedy'"
        demo_code: print 'Halo selamat datang di Hedy'
    -   explanation: Tanyakan sesuatu dengan `ask`
        example: "Contoh: warna is ask 'Apa warna favoritmu?'"
        demo_code: |-
            warna is ask 'Apa warna favoritmu?'
            print warna ' ini adalah kesukaanmu!'
    -   explanation: Ambillah sebuah pilihan dengan `if`
        example: "Contoh: if warna is hijau print 'cantik!' else print 'meh!'"
        demo_code: |-
            warna is ask 'Apa warna favorit kamu?'
            if warna is hijau print 'cantik!' else print 'meh!'
5:
    start_code: print '5 kali 5 adalah ' 5 * 5
    intro_text: |-
        `ask`, `print`, dan `if` berfungsi sama persis dengan yang ada pada level 4 dan level 5.
        Tapi di level 6 ada sesuatu yang baru, kamu sekarang bisa melakukan perhitungan matematika.

        Pada level 6, kode baru sudah ditambahkan untuk perhitungan matematika.

        Penambahan itu mudah, kamu menuliskannya persis seperti di matematika: `5 + 5` sebagai contoh. Pengurangan juga mudah dituliskan, seperti `5 - 5`.

        Perkalian sedikit berbeda, karena tidak ada simbol perkalian di keyboard kita. Cobalah cari, ini beneran tidak ada!
        Karenanya kita melakukan perkalian dengan tanda bintang diatas tombol '8': `5 * 5`. Baca itu sebagai 5 kali 5 dan kamu akan lebih mudah mengingatnya.

        ## Contoh kode Hedy
        ```
        print '5 tambah 5 adalah ' 5 + 5
        print '5 kurang 5 adalah ' 5 - 5
        print '5 kali 5 adalah ' 5 * 5
        ```
    commands:
    -   explanation: Tampilkan sama persis menggunakan tanda kutip satu
        example: "Contoh: print '5 kali 5 adalah ' 5 * 5"
        demo_code: print '5 kali 5 adalah ' 5 * 5
    -   explanation: Tanyakan hasil suatu perhitungan dan cek apakah hasilnya benar
        example: "Contoh: jawaban is ask 'Apa hasil dari 10 tambah 10?'"
        demo_code: |-
            jawaban is ask 'Apa hasil dari 10 tambah 10?'
            if jawaban is 20 print 'Yeah!' else print 'Ups'
6:
    start_code: repeat 3 times print 'Hedy itu menyenangkan!'
    intro_text: |-
        `ask`, `print`, dan `if` berfungsi sama persis dengan yang ada pada level 4. 
        Tapi level 5 menambahkan perintah `repeat`. Perintah repeat dapat digunakan untuk menjalankan satu baris kode beberapa kali

        ## Contoh kode Hedy
        ```
        repeat 3 times print 'Hedy itu menyenangkan!'
        ```
    commands:
    -   explanation: Tampilkan sama persis menggunakan tanda kutip satu
        example: "Contoh: print 'Halo selamat datang di Hedy'"
        demo_code: print 'Halo selamat datang di Hedy'
    -   explanation: Tanyakan sesuatu dengan `ask`
        example: "Contoh: warna is ask 'Apa warna favoritmu?'"
        demo_code: |-
            warna is ask 'Apa warna favoritmu?'
            print warna ' adalah warna favoritmu!'
    -   explanation: Ambillah sebuah pilihan dengan `if`
        example: "Contoh: if warna is hijau print 'cantik!' else print 'meh!'"
        demo_code: |-
            warna is ask 'Apa warna favorit kamu?'
            if warna is hijau print 'cantik!' else print 'meh!'
    -   explanation: Gabungan `repeat` dan `if`
        example: "Contoh: if warna is hijau repeat 3 times print 'pretty!' else repeat 5 times print 'meh'"
        demo_code: |-
            warna is ask 'Apa warna favoritmu?'
            if warna is hijau repeat 3 times print 'pretty!' else repeat 5 times print 'meh'
7:
    start_code: |-
        repeat 5 times
            print 'Halo semua'
            print 'Ini akan ditampilkan lima kali'
    intro_text: |-
        `ask` dan `print` tetap berfungsi sama seperti sebelumnya. Tapi `if` dan `repeat` berubah. 
        Kamu sekarang dapat mengeksekusi kumpulan kode secara bersamaan, tapi kamu harus memberikan indentasi pada kode tersebut.
        Indentasi berarti memberikan empat spasi diawal baris. Ini juga berlaku ketika kamu hanya mau mengeksekusi satu baris kode saja.

        ## Contoh kode Hedy
        ```
        repeat 5 times
            print 'halo semua'
            print 'Ini akan ditampilkan lima kali'
        ```

    commands:
    -   explanation: Tampilkan sesuatu. Ingat untuk menggunakan tanda kutip satu jika ingin menampilkan teks sama persis.
        example: "Contoh: print '5 kali 5 adalah ' 5 * 5"
        demo_code: print '5 kali 5 adalah ' 5 * 5
    -   explanation: Tanyakan jawaban dari sebuah penjumlahan dan cek apakah itu benar. Kita sekarang bisa menampilkan dua baris.
        example: "Contoh: jawaban is ask 'Apa hasil dari 5 tambah 5?'"
        demo_code: |-
            jawaban is ask 'Apa hasil dari 5 tambah 5?'
            if jawaban is 10
                print 'Kerja bagus!'
                print 'Betul, jawabannya adalah ' jawaban
            else
                print 'Ups!'
                print 'Jawabannya adalah 10'
8:
    start_code: |-
        repeat 3 times
            makanan is ask 'Apa yang kamu mau?'
            if makanan is 'pizza'
                print 'bagus!'
            else
                print 'pizza lebih enak'
    intro_text: |-
        Pada level ini kamu tidak hanya bisa menggunakan beberapa baris baru untuk  `if` and `repeat`, namun juga dapat menggabungkan mereka!
        Pada contoh kamu lihat sebuah perintah `if` didalam perintah `repeat`. Kamu juga dimungkinkan untuk melakukan sebaliknya, dan `if` juga boleh didalam `if` dan `repeat` didalam `repeat`.
        Cobalah!

        ## Contoh kode Hedy
        ```
        repeat 3 times
            makanan is ask 'Apa yang kamu mau?'
            if makanan is 'pizza'
                print 'bagus!'
            else
                print 'pizza lebih enak'
        ```
    commands:
    -   name: '`if` dengan beberapa baris'
        explanation: Cek apakah jawaban dari penjumlahan yang ditanyakan dengan `ask` benar. Sekarang kita menampilkan dua baris.
        example: "Contoh: jawaban is ask 'Apa hasil dari 20 tambah 20?'"
        demo_code: |-
            jawaban is ask 'Apa hasil dari 20 tambah 20?'
            if jawaban is 20
                print 'Bagus!!'
                print 'Jawabannya betul' jawaban
            else
                print 'Salah'
                print 'Jawabannya adalah 20'
    -   name: '`repeat` dan kura-kura'
        explanation: Ulangi beberapa kali
        example: 'Contoh: buatlah sebuah kotak'
        demo_code: |-
            repeat 4 times
                turn 90
                forward 50
9:
    start_code: |-
        hewanhewan is anjing, kucing, ikan
        for hewan in hewanhewan
          print 'Aku suka ' hewan
    intro_text: |
        Pada level ini kita akan belajar perintah `for`. Dengan `for` kamu dapat membuat sebuah daftar dan mengakses semua isinya.
        `for` membentuk sebuah blok seperti `repeat` dan `if` jadi semua baris untuk aksi harus diawali dengan beberapa spasi.

        ## Contoh kode Hedy
        ```
        hewanhewan is anjing, kucing, ikan
        for hewan in hewanhewan
          print 'Aku suka ' hewan
        ```
    commands:
    -   name: print
        explanation: Menampilkan sesuatu. Ingat untuk menggunakan tanda kutip satu untuk menampilkan teks apa adanya.
        example: "Example: print '5 kali 5 adalah ' 5 * 5"
        demo_code: print '5 kali 5 adalah ' 5 * 5
    -   name: for dengan daftar
        explanation: menampilkan semua barang dari sebuah daftar
        example: 'Contoh: for hewan in hewanhewan'
        demo_code: |-
            hewanhewan is anjing, kucing, ikan
            for hewan in hewanhewan
              print 'Aku suka ' hewan
10:
    start_code: |-
        for pembilang in range 1 to 5
            print pembilang
    intro_text: "`print` berfungsi sama namun `repeat` kali ini diganti dengan `for`! Kamu sekarang dapat menulis `for pembilang in range 1 to 5` dan menggunakan `pembilang` pada program kamu. Cobalah lihat apa yang terjadi! Ingat untuk menggunakan indentasi sesudah perintah `for` dan `if` (Ini artinya mengawali baris dengan empat spasi)."
    commands:
    -   name: Pengulangan `for`
        explanation: Kami mengganti `repeat` dengan `for` dan menambahkan batasan untuk pembilang
        example: for pembilang in range 1 to 5
        demo_code: |-
            for pembilang in range 1 to 5
                print pembilang
    -   explanation: Tanyakan jawaban dari sebuah penjumlahan dan cek apakah itu benar. Kita sekarang bisa menampilkan dua baris.
        example: "Contoh: jawaban is ask 'Apa hasil dari 5 tambah 5?'"
        demo_code: |-
            jawaban is ask 'Apa hasil dari 5 tambah 5?'
            if jawaban is 10
                print 'Kerja bagus!'
                print 'Betul, jawabannya adalah ' jawaban
            else
                print 'Ups!'
                print 'Jawabannya adalah 10'
11:
    start_code: |-
        print 'angka-angka desimal kini harus menggunakan titik'
        print 2.5 + 2.5
    intro_text: |-
        Sejauh ini, Hedy tidak mengijinkan penggunaan angka desimal seperti 1.5, tapi sekarang bisa.
        Perlu diingat bahwa komputer menggunakan titik (.) untuk menandai angka desimal.

        Pada level ini kamu juga perlu menggunakan kutip satu ketika menyimpan teks dengan `is`:

        ```
        nama is 'Hedy'
        print 'Halo ' nama
        ```

        Untuk angka, kamu tidak perlu menggunakan kutip satu untuk `is`:
        ```
        skor is 25
        print 'Kamu mendapatkan ' skor
        ```
    commands:
    -   name: Angka desimal langsung
        explanation: Perhitungan dengan angka desimal
        example: print 2.5 + 2.5
        demo_code: |-
            print 'Hitung langsung!'
            print 'Dua setengah tambah dua setengah adalah...'
            print 2.5 + 2.5
    -   name: desimal di variabel
        explanation: Menyimpan hasil perhitungan desimal
        example: hasil is 2.5 + 2.5
        demo_code: |-
            jawaban is 2.5 + 2.5
            print 'Hitung langsung!'
            print 'Dua setengah tambah dua setengah adalah...'
            print jawaban
15:
    start_code: |-
        buah is ['apel', 'pisang', 'ceri']
        print buah 
    intro_text: Kita akan menggunakan kurung siku untuk membungkus nilai-nilai didalam list! Kita juga akan membutuhkan tanda kutip satu (') untuk membungkus setiap nilai didalam list.
    commands:
    -   name: Kurung siku
        explanation: Kita akan menggunakan kurung siku untuk membungkus nilai-nilai didalam list! Kita juga akan membutuhkan tanda kutip satu (') untuk membungkus setiap nilai didalam list.
        example: "Sebagai contoh: buah is ['apel', 'pisang', 'ceri']"
        demo_code: |-
            buah is ['apel', 'pisang', 'ceri']
            print buah 
    -   name: Mengambil sebuah nilai dari dalam list
        explanation: Untuk mengambil sebuah nilai dalam list, kita menggunakan [posisi] jadi buah[1] artinya mengambil buah pertama dari dalam list!
        example: 'Sebagai contoh: buahpertama is buah[1]'
        demo_code: |-
            buah is ['apel', 'pisang', 'ceri']
            buahpertama is buah[1]
            print buahpertama 
    -   name: Mengambil sebuah nilai dari dalam list secara acak
        explanation: Untuk mengambil sebuah nilai dalam list secara acak, kita menggunakan [random] jadi buah[random] artinya mengambil buah dari dalam list secara acak!
        example: 'Sebagai contoh: buahacak is buah[random]'
        demo_code: |-
            buah is ['apel', 'pisang', 'ceri']
            buahacak is buah[random]
            print buahacak 
#15:
#    start_code: |-
#        kamu_tetap_di_sini is False
#        apakah_kamu_tetap_disini is input('Apakah kamu tetap disini? ya atau tidak?')
#        if apakah_kamu_tetap_disini is ya:
#            kamu_tetap_di_sini is True
#        jawaban is input('Apa hasil dari 5*5?')
#        if kamu_tetap_di_sini is True and jawaban is 25:
#            print('Kamu menjawab iya dan memberi jawaban yang benar')
#    intro_text: "Kita sekarang akan belajar menggunakan perintah `and` dan `or`! Jika kamu mau mengecek apakah dua kondisi terpenuhi, kamu tidak perlu menggunakan dua `if`. Kamu dapat menggunakan `and` untuk menggabungkan kedua kondisi, sisi kiri dan kanan dari `and` harus terpenuhi keduanya. Kamu dapat menggunakan `or` jika hanya salah satu dari dua kondisi yang perlu dipenuhi. "
#    commands:
#    -   name: And
#        explanation: Kedua kondisi (kiri dan kanan dari perintah `and`) harus bernilai benar
#        example: if 3+2 is 5 and 2+2 is 4
#        demo_code: |-
#            jawaban1 is input('Apa hasil dari 3+2?')
#            jawaban2 is input('Apa hasil dari 2+2?')
#            if jawaban1 is 5 and jawaban2 is 4:
#                print('Kedua jawaban benar!')
#            else:
#                print('Paling tidak salah satu jawaban salah!')
#    -   name: Or
#        explanation: Perintah `or` memastikan bahwa paling tidak satu dari dua kondisi yang diberikan di kiri dan kanan `or` harus terpenuhi. Keduanya terpenuhi pun tidak masalah.
#        example: if 3+2 is 5 or 2+2 is 4
#        demo_code: |-
#            jawaban1 is input('Apa hasil dari 3+2?')
#            jawaban2 is input('Apa hasil dari 2+2?')
#            if jawaban1 is 5 or jawaban2 is 4:
#                print('Paling tidak salah satu jawaban benar!')
#            else:
#                print('Kedua jawaban salah!')
#16:
#    start_code: |-
#        # Ini adalah sebuah program yang akan menanyakan beberapa pertanyaan matematika
#        for i in range(1, 10):
#            # Kita akan mulai menanyakan tabel perkalian 5
#            jawaban is input('Apa hasil dari ' i ' kali 5?')
#            # Kita mengecek apakah jawaban tersebut benar
#            jawaban_benar is i * 5
#            if jawaban is jawaban_benar:
#                print(jawaban ' benar')
#            else:
#                print('Itu salah, seharusnya dijawab: ' i*5)
#    intro_text: 'Ketika kita membuat program yang lebih besar, kita perlu sebuah cara untuk mengingat apa yang dilakukan oleh setiap bagian program. Kita dapat menggunakan komentar untuk ini. Sebuah komentar terlihat sebagai berikut: ` # Ini sebuah komentar`. Apapun yang ada setelah simbol # tidak akan diperhitungkan oleh program.'
#    commands:
#    -   name: Komentar
#        explanation: Kita dapat menggunakan komentar kapanpun kita mau
#        example: '# Ini sebuah komentar'
#        demo_code: |-
#            # Program ini menampilkan Halo!
#            # Ini dibuat di Hedy
#            # Ini tidak melakukan apa-apa selain menampilkan Halo!
#            print('Halo!')
#20:
#    start_code: |-
#        buah is ['apel', 'pisang', 'ceri']
#        for i in range(1, 3):
#            print(buah[i])
#    intro_text: Kita juga bisa melihat semua nilai didalam list dengan pengulangan. Karena ada tiga nilai dalam list, kita melakukan pengulangan dari 1 ke 3. Sekarang kita bisa menampilkan semua nilai didalam sebuah pengulangan.
#    commands:
#    -   name: Ukuran dari list
#        explanation: Dengan `length` kita dapat mengetahui ukuran dari sebuah list. List pada contoh berukuran 3 karena ada tiga nilai didalamnya.
#        example: length(list)
#        demo_code: |-
#            buah is ['apel', 'pisang', 'ceri']
#            print('Ukuran dari sebuah list adalah ' length(buah))
#            for i in range(1, length(buah)):
#                print(buah[i])
#21:
#    start_code: |-
#        print('Apakah hasil 5+3?')
#        jawaban = 5+3
#        print('Jawaban adalah:')
#        print(jawaban)
#        if jawaban == 8:
#            print('Itu benar!')
#        else:
#            print('Oh tidak, jawaban itu salah!')
#    intro_text: Sekarang kita akan mengubah perintah `is` ke `=` dan `==`. Kita menggunakan `=` jika kita ingin mengisi sebuah nilai ke variabel. Jika kamu ingin mengisi 8 ke sebuah variabel bernama `jawaban`, kamu harus menuliskan `jawaban = 8`. Simbol `==` digunakan jika kita ingin mengecek apakah dua nilai sama.
#    commands:
#    -   name: Perbandingan
#        explanation: Jika kita ingin membandingkan, kita menggunakan `==`. Misal `5+3 == 8` mengecek apakah 5+3 sama dengan 8.
#        example: 'Sebagai contoh: 5+3 == 8'
#        demo_code: |-
#            if 5+3 == 8:
#                print('5+3 adalah betul 8')
#            else:
#                print('Ini tidak akan ditambilkan karena 5+3 selalu 8!')
#    -   name: Pengisian nilai
#        explanation: Jika kita ingin mengatakan bahwa sebuah variabel bernama `jawaban` bernilai 8, kita menuliskan `jawaban = 8`.
#        example: 'Sebagai contoh: jawaban = 8'
#        demo_code: |-
#            print('Apa hasil dari 5+3?')
#            jawaban = 5+3
#            print('Jawaban adalah :')
#            print(jawaban)
#    -   name: Perbandingan dan pengisian nilai
#        explanation: Jika kita akan membandingkan dua nilai, kita menggunakan `==`. Jika kita akan mengisi sebuah variabel dengan nilai, kita menggunakan `=`.
#        example: Sebagai contoh, '5+3 == 8' dan 'answer = 8'
#        demo_code: |-
#            print('Apakah hasil dari 5+3?')
#            jawaban = 5+3
#            print('jawaban adalah:')
#            print(jawaban)
#            if jawaban == 8:
#                print('Itu benar!')
#            else:
#                print('Tidak, itu salah!')
#
#colon:
#    start_code: |-
#        for i in range 1 to 10:
#            print i
#        print 'Siap atau tidak, aku datang!'
#    intro_text: Kali ini kita akan menggati proses indentasi sedikit. Setiap kali kita membutuhkan indentasi, kita perlu menambahkan `:` pada akhir baris sebelumnya
#    commands:
#    -   explanation: Ketika kita menggunakan `for`, kita perlu menambahkan `:` diakhir statemen `for`
#        example: 'for i in range 1 to 10:'
#        demo_code: |-
#            for i in range 1 to 10:
#                print i
#            print 'Siap atau tidak, aku datang!'
#    -   explanation: Kita perlu melakukan hal yang sama untuk semua statemen `if`
#        example: 'if warna is hijau:'
#        demo_code: |-
#            warna is hijau
#            if warna is hijau:
#                print 'Warnanya hijau'
#            else:
#                print 'Warnanya bukan hijau'
#    -   explanation: Kami akan memberikan sebuah perintah baru yang bisa kamu pakai:`elif`. `elif` berarti `else if`. Program akan mulai mengecek apakah kondisi di `if` dipenuhi. Jika tidak, program akan mengecek `elif` dan jika tidak memenuhi juga, program akan ke `else`.
#        example: 'elif a is 5:'
#        demo_code: |-
#            a is 2
#            if a is 1:
#                print 'a bernilai 1'
#            elif a is 2:
#                print 'a bernilai 2'
#            else:
#                print 'a bukan bernilai 1 atau 2'
14:
    start_code: |-
        jawaban is 0
        while jawaban != 25
            jawaban is ask 'Apa hasil 5 kali 5?'
        print 'Sebuah jawaban benar telah diberikan'
    intro_text: Kita akan belajar tentang jenis pengulangan baru, pengulangan `while`! Kita akan melakukan pengulangan tersebut terus-menerus selama kondisinya dipenuhi. Jadi di contoh tersebut, kita terus melakukan pengulangan hingga jawaban benar telah diberikan. Jika jawaban benar tidak diberikan, pengulangan tidak akan pernah berakhir!
    commands:
    -   name: Pengulangan while dengan boolean
        explanation: Kita dapat menggunakan pengulangan `while` dengan `True` dan `False`
        example: 'Contoh: while jawaban_benar is False'
        demo_code: |-
            jawaban is 0
            while jawaban != 25
                jawaban is ask 'Apa hasil 5 kali 5?'
            print 'Sebuah jawaban benar telah diberikan'
    -   name: Pengulangan while dengan cakupan lebih kecil
        explanation: Kita dapat juga menggunakan pengulangan `while` dengan `<` dan `>`. Berhati-hatilah, kamu harus mengubah angka yang terlibat agar pengulangan tersebut berakhir. Kita bisa melakukannya dengan `pembilang is pembilang + 1` untuk sekarang.
        example: 'Sebagai contoh: while pembilang < 3'
        demo_code: |-
            pembilang is 1
            while pembilang < 3
                print 'Kita lakukan ini ' 3 - pembilang ' kali lagi'
                pembilang is pembilang + 1
            print 'Kita selesai'

13:
    start_code: |-
        umur is ask 'Berapa umur mu?'
        if umur < 13
            print 'Kamu lebih muda daripada aku!'
        else
            print 'Kamu lebih tua daripada aku!'
    intro_text: "Kita akan mulai belajar untuk menggunakan banyak hal baru! Kamu mungkin sudah tahu hal-hal ini dari matematika: simbol `<` dan `>`. Simbol `<` mengecek apakah angka pertama lebih kecil daripada angka kedua, seperti `4 < 5`. Simbol `>` mengecek apakah angka pertama lebih besar daripada angka kedua, seperti `6 > 5`."
    commands:
    -   name: Lebih kecil
        explanation: Kita menggunakan `<` untuk mengecek apakah angka pertama lebih kecil daripada angka kedua. Sebagai contoh jika kita ingin melihat apakah sebuah variabel lebih kecil dari 15, kita menggunakan `variabel < 15`.
        example: 'Sebagai contoh: umur < 12'
        demo_code: |-
            umur is ask 'Berapa umur mu?'
            if umur < 13
                print 'Kamu lebih muda daripada aku!'
    -   name: Lebih besar
        explanation: Kita menggunakan `>` untuk mengecek apakah angka pertama lebih besar daripada angka kedua. Sebagai contoh jika kita ingin melihat apakah sebuah variabel lebih besar dari 15, kita menggunakan `variabel > 15`.
        example: 'Sebagai contoh: umur > 12'
        demo_code: |-
            umur is ask 'Berapa umur mu?'
            if umur > 13
                print 'Kamu lebih tua daripada aku!'
