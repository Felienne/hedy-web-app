1:
    intro_text: |
        Здравей, ето те и теб при Хеди!

        В това първо ниво ще се научиш да ползваш специалните команди за програмиране: `print`, `ask` и `echo`.
        В лявата колона <-- можеш да разгледаш примери с тези и други команди.

        Виждаш ли синия бутон под всеки пример? Казва се "Пробвай". Като го натиснеш,
        примерният код на програмата ще се изпише автоматочно в долното ляво черно поле.

        Под черното поле се намира зелен бутон 'Тествай кода'. Натисни го, за да видиш изпълнението на кода.
        В същото поле можеш смело да променяш някои от думите на кода. Обаче не променяй командите засега.

        Добре. Имаш ли вече идея какво да програмираш? Ако още не, то в табовете отгоре ще откриеш някои готови идеи.

    start_code: "print Ето те и теб, очаквах те!"
    commands:
    -   name: "print"
        explanation: "Принтирай дума с командата `print`."
        example: "Пример: print Привет, добре дошли при Хеди!"
        demo_code: "print Привет, добре дошли при Хеди!"
    -   name: "ask"
        explanation: "Задай въпрос с `ask`, примерно любим цвят."
        example: "Пример: ask Кой е любимият ти цвят?"
        demo_code: "ask Кой е любимият ти цвят?"
    -   name: "echo"
        explanation: "Повтори това, което си написал(а) с `echo`."
        example: "Пример: echo значи любимият ти цвят е ... "
        demo_code: |-
            ask Кой е любимият ти цвят?
            echo значи любимият ти цвят e ...
    -   name: "forward"
        explanation: "Нарисувай линия с `forward`."
        example: "Пример: forward 100"
        demo_code: "forward 100"
    -   name: "turn"
        explanation: "Обърни нарисуваната костенурка с `turn`"
        example: "Пример: turn"
        demo_code: |-
            forward 50
            turn right
            forward 25
            turn left
            forward 50
            turn right
            forward 25
            turn left
            forward 50
    -   name: '{turn}'
        explanation: turn the drawing turtle with `{turn}`
        example: 'Example: {turn}'
        demo_code: "{forward} 25\n{turn} left\n{forward} 25\n{turn} right"
    example_code: "## Example code\n```\n{print} Hello!\n{print} Welcome to Hedy!\n```\n"
    example_code_2: "## Example code\n```\n{ask} What is your name?\n{echo} hello\n```\n"
    intro_text_2: "You can also ask for input and repeat it back with an `{echo}` command.\nTry the code to your left again.\n\nDon't know what to create? In the next tabs you will find ideas for programs to build.\n"
2:
    intro_text: |
        Във второ ниво ще научим нещо ново заедно. Можеш да назовеш име и да го запишеш с командата `is`.
        След това ще можеш да ползваш името навсякъде в програмата, ето така:

        ```
        име is Хеди
        print Здравей име!
        ```

        **Внимание!** Запитването с командата `ask` се променя в това ниво, така че отговорът се "записва" в име, например:

        ```
        отговорът is ask Как се казваш?
        ```

        Командата `print` работи също както в предишното ниво, а от `echo` повече няма да имаш нужда.
    start_code: "print здравей свят!"
    commands:
    -   name: "is"
        explanation: "С командата `is` можеш да запишеш име в програмата. Избери си едно име, може и твоето."
        example: "Например: име is Галя."
        demo_code: |-
            име is Галя
            print Аз се казвам име.
    -   name: "ask"
        explanation: "Запитай с командата `ask`. Важно е да запомниш, че трябва да назовеш отговора си с командата `is`."
        example: "Пример: цвят is ask Кой е любимият ти цвят?"
        demo_code: |-
            цвят is ask Кой е любимият ти цвят?
            print Твоят любим е цвят.
    -   name: "is - turtle"
        explanation: "Назови число, използвайки командата `is`."
        example: "Пример: число is 90."
        demo_code: |-
            hoek is 90
            turn hoek
            forward 100
    -   explanation: Give a number a name using `{is}`. You can choose the name yourself.
        example: 'Example: angle {is} 90'
        name: is - turtle
        demo_code: "angle {is} 90\n{turn} angle\n{forward} 100"
3:
    intro_text: |
        Във второ ниво ще можеш да съставиш списък с думи и програмата сама ще може да изпечата произволна дума от твоя списък.
        Това се постига с командата `at random` (изговаря се "ет рендъм").

        ```
        животни is куче, котка, кенгуру
        print животни at random
        ```

        Всички програмни кодове от ниво 3 са изписани в лявата колона със сините бутони, а с табовете горе се задействат новите задачи.
        Хайде, успех!
    start_code: "print здравей свят!"
    commands:
    -   name: "избери_произволно"
        explanation: "Избери произволна дума от списък с думи като ползваш командите `at` и `random`."
        example: 'Пример: животни is куче, котка, кенгуру.'
        demo_code: |-
            животни is куче, котка, кенгуру
            print животни at random
    -   name: '{add}'
        explanation: add an item to a list
        example: 'Example: {add} dog {to_list} animals'
        demo_code: "animals {is} cow, cat\n{add} dog {to_list} animals"
    -   name: '{remove}'
        explanation: remove an item from a list
        example: 'Example: {remove} dog {from} animals'
        demo_code: "animals {is} cat, dog, cow\n{remove} dog {from} animals"
    example_code: "## Example Hedy Code\n\n```\nanimals {is} dog, cat, kangaroo\n{print} animals {at} {random}\n```\n"
    intro_text_2: You can also add items to the list with `{add}` and remove items with `{remove}`.
    example_code_2: "## Example Hedy Code\n\n```\nanimals {is} dog, cat, kangaroo\n{add} penguin {to_list} animals\n{remove} cat {from} animals\n{print} animals {at} {random}\n```\n"
4:
    start_code: "print 'Ура! Вече си в трето ниво!'"
    intro_text: |
        Ето ни вече в трето ниво! Командите `ask` и `print` сега ще се поизменят малко.
        Новото правило е да пишеш думите, измислени от теб в кавички (примерно "моите думи са оградени в кавички")!

        Това е необходимо, защото сега можеш да накараш компютъра да принтира всякакви думи. Това се отнася и за думите,
        които се "записват" с командата `is`.

        В повечето програмни езици се ползват кавички. Вече се доближаваме до "истинското" програмиране.

        ## Задачите оттук нататък ще стават по-сложни, но какво от това!
        Командите от примерите в лявата колона ще ти помагат. Табовете по-горе съдържат нови задания, които се усложняват в посока все по-надясно.
        Затова ги ползвай един по един, отляво надясно.

    commands:
    -   name: "print"
        explanation: "Принтирай точно думите в кавички"
        example: "Example: print 'Баба жаба живее в блатото.'"
        demo_code: "print 'Баба жаба живее в блатото.'"
    -   name: "is"
        explanation: "назови цял текст с едно име с командата `print` без кавичките."
        example: "Example: name is Иван Димитров Коларов."
        demo_code: |-
            име is Иван Димитров Коларов
            print 'Казвам се ' име '.'
    -   name: "ask"
        explanation: "Запитай с командата `is ask`."
        example: "Пример: цвят is ask 'Кой е любимият ти цвят?'"
        demo_code: |-
            цвят is ask 'кой е любимият ти цвят?'
            print цвят ' е твоят любим цвят!'
5:
    start_code: |-
        name is ask 'what is your name?'
        if name is Hedy print 'cool!' else print 'meh'
    intro_text: |
        Ниво 4! Тук командите `ask` and `print` работят по същия начин.

        Ще научим нова команда, казва се `if`! С `if` ще програмираме правенето на избор между две неща или два предмета.

        ## Примерен код на Хеди
        ```
        име is ask 'Как се казва този език за програмиране?'
        if име is Хеди print 'позна' else print 'не позна'
        ```

        В този код ще принтираш 'позна' ако си написал(а) името Хеди, или 'не позна' ако си въвел(а) друго име.

        ## Съвет
        Кодът, който пишеш с командите `if` ... `else` е доста дълъг (като изречение) и не се побира на един ред.
        <br>Затова можеш да пренасяш кода на нов ред. Значи, на първи ред пишеш `if`, а на нов ред пишеш `else`, виж:
        ```
        име is ask 'Как се казва този език за програмиране?'
        if име is Хеди print 'позна'
        else print 'не позна'
        ```

        ## Заданията
        Разгледай заданията в табовете горе. Задачите надясно се усложняват.
    commands:
    -   name: "print"
        explanation: "Принтирай точно думите в кавички"
        example: "Пример: print 'Това е изречение. Повече изречения образуват текст.'"
        demo_code: "print 'Това е изречение. Повече изречения образуват текст.'"
    -   name: "ask"
        explanation: "Запитай с командата `ask`."
        example: "Пример: възраст is ask 'На колко си години?'"
        demo_code: |-
            възраст is ask 'На колко си години?'
            print 'Ти си на ' възраст ' години!'
    -   name: "if"
        explanation: "Направи избор с командите `if` и `else`."
        example: "Пример: if цвят is бял print 'Красив е!' else print 'става'"
        demo_code: |-
            цвят is ask 'кой е любимият ти цвят?'
            if цвят is бял print 'Красив е!' else print 'става'
    -   name: "if with turtle"
        explanation: "Направи избор с `if`"
        example: "Пример: if отговор is далече forward 100 else forward 5"
        demo_code: |-
            отговор is ask 'Колко метра да вървя напред?'
            if отговор is далече forward 100 else forward 5
    -   name: '{in}'
        demo_code: "pretty_colors {is} green, yellow\ncolor {is} {ask} 'What {is} your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
        explanation: Check elements with `{in}`
        example: "Example: {if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
6:
    start_code: "print '5 умножено по 5 е ' 5 * 5"
    intro_text: |
        Пето ниво! Командите `ask`, `print` и `if`...`else` засега остават непроменени.
        В това ниво ще научиш нещо ново: ще накараш компютъра да прави калкулации - събиране, изваждане, умножение, деление.

        Събирането се записва с оператора "+" (например `5 + 5`), а изваждането с "-", `5 - 5`.
        Умножението се изписва със звезда: `5 * 5`.

        ## Примерен код на Хеди
        ```
        print '5 плюс 5 е равно на ' 5 + 5
        print '5 минус 5 е равно на ' 5 - 5
        print '5 пъти по 5 е равно на ' 5 * 5
        ```
    commands:
    -   name: "print"
        explanation: "Принтирай точно думите в кавички"
        example: "Пример: print '5 пъти по 5 е равно на ' 5 * 5"
        demo_code: "print '5 пъти по 5 е равно на ' 5 * 5"
    -   name: "ask"
        explanation: "Програмирай задача с калкулация и въвеждане на отговор."
        example: "Пример: решение = ask 'Колко прави 10 + 10?'"
        demo_code: |-
            решение = ask 'Колко прави 10 + 10?'
            if решение is 20 print 'Да!' else print 'Невярно'
    -   name: "`ask` and `if` turtle"
        explanation: "Запитай въвеждане на брой ъгли"
        example: "Пример: ъгли = ask 'Колко ъгли? (част първа)'"
        demo_code: |-
            ъгли = ask 'Колко ъгли?'
            angle = 360 / ъгли
            forward 50
7:
    start_code: "repeat 3 times print 'Да пишеш код на Хеди е забавно!'"
    intro_text: |
        Ниво 6! Командите `ask`, `print` и `if`...`else` засега остават непроменени.
        Новата команда за теб е `repeat`. Repeat на английски значи "повтарям". С нея
        можеш да инструктираш компютъра да изпълни твоя код много пъти.

        ## Примерен код на Хеди
        ```
        repeat 3 times print 'Да пишеш код на Хеди е забавно!'
        ```
    commands:
    -   name: "print"
        explanation: "Принтирай точно думите в кавички"
        example: "Пример: print 'Hello welcome to Hedy.'"
        demo_code: "print 'Hello welcome to Hedy.'"
    -   name: "ask"
        explanation: "Запитай с `ask` за любимия спорт."
        example: "Пример: спорт = ask 'Кой е любимият ти спорт?'"
        demo_code: |-
            спорт = ask 'Кой е любимият ти спорт?'
            print 'Значи обичаш ' спорт '.'
    -   name: "if"
        explanation: "Запитай пак за любимия спорт и използвай `if`, за да дадеш специален резултат ако въведената дума е футбол."
        example: "Пример: спорт = ask 'Кой е любимият ти спорт?'"
        demo_code: |-
            спорт = ask 'Кой е любимият ти спорт?'
            if спорт is футбол repeat 3 times print 'Футбол, футбол и пак футбол!'
            else print 'Значи обичаш ' спорт '.'
    -   name: "repeat - turtle"
        explanation: "Програмирай цикъл с командата `repeat`."
        example: "Пример: repeat 3 times forward 10"
        demo_code: |-
            repeat 3 times forward 20
8:
    commands:
    -   example: "Example: {print} '5 times 5 is ' 5 * 5"
        explanation: print something. Remember to use a quotation mark for literal printing.
        demo_code: "{print} '5 times 5 is ' 5 * 5"
        name: '{print}'
    -   name: '{ask}'
        explanation: ask for the answer to a sum and check if it is correct. We can now print 2 lines.
        example: "Example: answer {is} {ask} 'What is 5 plus 5?'"
        demo_code: "answer = {ask} 'What is 5 plus 5?'\n{if} answer {is} 10\n    {print} 'Well done!'\n    {print} 'Indeed, the answer was ' answer\nelse\n    {print} 'Oops!'\n    {print} 'The answer is 10'"
    -   example: 'Example: draw a square'
        name: '`{repeat}` with turtle'
        explanation: '{repeat} multiple lines'
        demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
    start_code: "{repeat} 5 {times}\n    {print} 'Hello folks'\n    {print} 'This will be printed 5 times'"
    intro_text: "`{ask}` {and} `{print}` still work as you know them. But `{if}` {and} `{repeat}` have changed!\nYou can now execute groups of code together, but you will have to *indent* the code.\nThat means putting four spaces at the beginning of the line. You will also have to indent when you just want to create a block of one line.\n\n## Example Hedy code\n```\n{repeat} 5 {times}\n    {print} 'Hello everyone'\n    {print} 'This is all repeated 5 times'\n```\n"
9:
    commands:
    -   name: '`{if}` with multiple lines'
        explanation: The answer of a sum of questions with '{ask}' and see if it is correct. Now we print out two lines.
        example: "Example: answer = {ask} 'What is 20 plus 20?'"
        demo_code: "answer = {ask} 'What is 20 plus 20?'\n{if} answer {is} 20\n    {print} 'Well done!!'\n    {print} 'The answer is indeed' answer\nelse\n    {print} 'Wrong'\n    {print} 'The answer is 20'"
    -   example: 'Example: create a square'
        explanation: '{repeat} multiple lines'
        demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
        name: '`{repeat}` and turtle'
    start_code: "{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} 'pizza'\n        {print} 'nice!'\n    else\n        {print} 'pizza is better'"
    intro_text: "In this level you can not only use multiple lines with `{if}` {and} `{repeat}`, but you can also put them together!\nIn the example you see an `{if}` command within a `{repeat}` command. It is also allowed the other way around, and an `{if}` is also allowed in an `{if}` and a `{repeat}` in a `{repeat}`.\nGive it a try!\n\n## Example Hedy code\n```\n{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} 'pizza'\n        {print} 'nice!'\n    else\n        {print} 'pizza is better'\n```\n"
10:
    commands:
    -   name: '{print}'
        example: "Example: {print} '5 times 5 is ' 5 * 5"
        demo_code: "{print} '5 times 5 is ' 5 * 5"
        explanation: print something. Remember to use a quotation mark for literal printing.
    -   explanation: 'print all things in a list '
        example: 'Example: {for} animal {in} animals'
        demo_code: "animals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal"
        name: '{for} with a list'
    start_code: "animals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal"
    intro_text: "In this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.\n`{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with spaces.\n\n## Example Hedy code\n```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal\n```\n"
11:
    commands:
    -   name: '{for} loop'
        explanation: We can use `{for}` with a {range}
        example: for counter {in} {range} 1 {to} 5
        demo_code: "{for} counter {in} {range} 1 {to} 5\n    {print} counter"
    -   name: '{ask}'
        explanation: ask for the answer to a sum and check if it is correct. We can now print 2 lines.
        demo_code: "answer = {ask} 'What is 5 plus 5?'\n{if} answer {is} 10\n    {print} 'Well done!'\n    {print} 'Indeed, the answer was ' answer\nelse\n    {print} 'Oops!'\n    {print} 'The answer is 10'"
        example: "Example: answer = {ask} 'What is 5 plus 5?'"
    start_code: "{for} counter {in} {range} 1 {to} 5\n    {print} counter"
    intro_text: '`{print}` works just the same but the we add a new form of the `{for}`. You can now write `{for} counter {in} {range} 1 {to} 5` and use `counter` in your program. Try it out to see what happens! Remember to use indentations after the `{for}` and `{if}` statements (That means starting a sentence with four spaces)'
12:
    commands:
    -   name: float directly
        explanation: Decimal numbers
        example: '{print} 2.5 + 2.5'
        demo_code: "{print} 'Calculate away!'\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n"
    -   example: name = 'Hedy'
        name: assign text
        explanation: Text with quotation marks after =
        demo_code: "name = 'Hedy the Robot'\n{print} 'Hello ' name\n"
    -   explanation: Text with quotation marks after {if}
        example: name = 'Hedy'
        name: quotes after {if} comparison
        demo_code: "name = {ask} 'Who are you?'\n{if} name = 'Hedy'\n    {print} 'Hi there!'\n"
    -   name: quotes in list
        explanation: A list with quotation marks
        example: name = 'Hedy', 'Felienne'
        demo_code: "superheroes = 'Iron Man', 'Batman', 'Superman'\n{print} superheroes {at} {random}\n"
    start_code: "{print} 'decimal numbers now need to use a dot'\n{print} 2.5 + 2.5"
    intro_text: "## Decimal numbers\nSo far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.\n```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n## All texts need to be in quotation marks\nFor this level on you will also have to use quotation marks when storing a text with `=`:\n\n```\nname = 'Hedy the Robot'\n{print} 'Hello ' name\n```\n## All items in lists need quotation marks too\nLists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.\nThis allows you to save two words as 1 item on the list, for example 'Iron Man'.\n\n```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n## All text after `{if}` comparisons need quotation marks too\n```\nname = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n## Numbers don't need quotation marks\n{for} numbers, you do not use quotation marks in the `=`:\n```\nscore = 25\n{print} 'You got ' score\n```\n"
13:
    commands:
    -   explanation: Two parts both need to be correct
        name: '{and}'
        example: if 3+2 {is} 5 {and} 2+2 {is} 4
        demo_code: "answer1 = {ask} 'What is 3+2?'\nanswer2 = {ask} 'What is 2+2?'\n{if} answer1 {is} 5 {and} answer2 {is} 4\n    {print} 'Both answers are correct!'\nelse\n    {print} 'At least one answer is wrong!'"
    -   explanation: At least 1 of the two parts need to be correct. If both are correct, it is also fine.
        demo_code: "answer1 = {ask} 'What is 3+2?'\nanswer2 = {ask} 'What is 2+2?'\n{if} answer1 {is} 5 {or} answer2 {is} 4\n    {print} 'At least one answer is correct!'\nelse\n    {print} 'Both answers are wrong!'"
        name: '{or}'
        example: if 3+2 {is} 5 {or} 2+2 {is} 4
    start_code: "name = {ask} 'what is your name?'\nage = {ask} 'what is your age?'\n{if} name {is} 'Hedy' {and} age {is} 2\n    {print} 'You are the real Hedy!'"
    intro_text: We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two if's but can use `{and}` and `{or}`. If you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct.
14:
    commands:
    -   name: Smaller
        explanation: We use the `<` to check if the first number is smaller than the second number.
        example: 'For example: age < 12'
        demo_code: "age = {ask} 'How old are you?'\n{if} age < 13\n    {print} 'You are younger than me!'"
    -   name: Bigger
        explanation: We use the `>` to check if the first number is bigger than the second number.
        example: 'For example: age > 12'
        demo_code: "age = {ask} 'How old are you?'\n{if} age > 13\n    {print} 'You are older than me!'"
    -   name: Equal
        explanation: We use the `==` to check if two things are the same.
        example: 'For example: answer == 25'
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer == 25\n    {print} 'That {is} correct!'"
    -   example: 'For example: answer != 25'
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer != 25\n    {print} 'That is not correct!'"
        name: Not equal
        explanation: 'We use the `!=` to check if two things are not the same. '
    -   example: 'For example: age <= 12'
        explanation: We use the `<=` to check if the first number is smaller than or equal to the second number.
        demo_code: "age = {ask} 'How old are you?'\n{if} age <= 12\n    {print} 'You are younger than me!'"
        name: Smaller {or} equal
    -   name: Bigger or equal
        explanation: We use the `>=` to check if the first number is bigger than or equal to the second number.
        example: 'For example: age >= 14'
        demo_code: "age = {ask} 'How old are you?'\n{if} age >= 14\n    {print} 'You are older than me!'"
    intro_text: "We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.\nThe `<` checks if the first number is smaller than the second, for example `age < 12` checks if `age` {is} smaller than 12.\nIf you want to check if the first number is smaller or equal to the second, you can use `<=`, for example `age <= 11`.\nThe `>` checks if the first number is bigger than the second, for example `points > 10` checks if `points` is larger than 10.\nIf you want to check if the first number is bigger or equal to the second, you can use `>=`, for example `points >= 11`.\nYou use these comparisons in an `{if}`, like this:\n```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n\nFrom this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:\n```\nname = {ask} 'What is your name?'\n{if} name == 'Hedy'\n    {print} 'You are coo!'\n```\n\nYou can also compare if something is *not* equal to something else using `!=` like this:\n```\nname = {ask} 'What is your name?'\n{if} name != 'Hedy'\n    {print} 'You are not Hedy'\n```\n"
    start_code: "age = {ask} 'How old are you?'\n{if} age < 13\n    {print} 'You are younger than me!'\nelse\n    {print} 'You are older than me!'"
17:
    commands:
    -   example: '{elif} a {is} 5:'
        demo_code: "a = 2\n{if} a == 1:\n    {print} 'a is 1'\n{elif} a == 2:\n    {print} 'a is 2'\n{else}:\n    {print} 'a is not 1 or 2'"
        name: '{elif}'
        explanation: '`{elif}`.'
    -   explanation: When we use a `{for}`, we need to put a `:` behind the `{for}` statement!
        name: '{print}'
        example: 'for i {in} {range} 1 {to} 10:'
        demo_code: "{for} i {in} {range} 1 {to} 12:\n    {print} i\n{print} 'Ready or not, here I come!'"
    -   name: '{if}'
        explanation: We need to do the same with all of our `{if}` statements
        example: if colour {is} green:'
        demo_code: "colour = {ask} 'What is your favorite color?'\n{if} colour == green:\n    {print} 'Your favorite colour is green'\n{else}:\n    {print} 'Your favorite colour is not green'"
    intro_text: "Now we are going to change a little bit with indentation. Every time that we need an indentation, we need `:` at the line before the indentation.\n\nIn this level you can also use a new command: `{elif}`. `{elif}` is short for {else} {if} and you need it when you you want to make 3 (or more!) options.\nCheck it out!\n```\nprices = ['1 million dollars', 'an apple pie', 'nothing']\nyour_price = prices[random]\n{print} 'You win ' your_price\n{if} your_price == '1 million dollars' :\n    {print} 'Yeah! You are rich!'\n{elif} your_price == 'an apple pie' :\n    {print} 'Lovely, an apple pie!'\n{else}:\n    {print} 'Better luck next time..'\n```\n"
    start_code: "{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Ready or not, here I come!'"
15:
    start_code: "answer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'"
    intro_text: "We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.\nSo don't forget to change the value in the loop.\n\nIn the example code, we continue until a correct answer has been given.\nIf the correct answer is never given, the loop never ends!\n"
    commands:
    -   explanation: We can use the `{while}` loop with not equal
        example: 'Example: {while} correct_answer != 25'
        demo_code: "answer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'"
        name: '{while}'
    -   name: Smaller {while}
        explanation: 'We can also use the `{while}` loop with `<` and `>`. '
        example: 'For example: {while} count < 3'
        demo_code: "count = 1\n{while} count < 3\n    {print} 'We do this ' 3 - count ' more times'\n    count = count + 1\n{print} 'We are done'"
16:
    start_code: "fruit = ['apple', 'banana', 'cherry']\n{print} fruit"
    intro_text: "We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.\nYou can use the square brackets as well to point out a place in the lists.\n\n```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
    commands:
    -   name: square brackets
        explanation: Lists with square brackets
        example: "For example: fruit = ['apple', 'banana', 'cherry']"
        demo_code: "fruit = ['apple', 'banana', 'cherry']\n{print} fruit"
    -   name: Get an item from a list
        explanation: To get an item from a list we use [number] so fruit[1] means, get the first fruit from the list!
        example: 'For example: firstfruit = fruit[1]'
        demo_code: "fruit = ['banana', 'apple', 'cherry']\nfirstfruit = fruit[1]\n{print} firstfruit"
    -   name: Get a random item from a list
        explanation: To get a random item from a list we use [random] so fruit[random] means, get a random fruit from the list!
        example: 'For example: random_fruit {is} fruit[random]'
        demo_code: "fruit = ['banana', 'apple', 'cherry']\nrandom_fruit = fruit[random]\n{print} random_fruit"
18:
    start_code: "naam = 'Hedy'\n{print}('My name is ', naam)"
    intro_text: "We arrived at real pythoncode! That means we need to use parentheses with {print} and {range} from now on.\nThat looks like this:\n```\n{print}('my name is Hedy!')\n```\nIf you want to print more thant one items, you need to separate them by commas.\n```\nnaam = 'Hedy'\n{print}('my name is ', naam)\n```"
    commands:
    -   name: '{print}'
        explanation: With `{print}` you need to use parentheses
        example: '{print}'
        demo_code: "{print}('hi!')"
    -   name: '{print} with var'
        explanation: With `{print}` you need to use parentheses and commas if you {print} more items
        example: '{print}'
        demo_code: "naam = 'Hedy'\n{print}('my name is ', naam)"
