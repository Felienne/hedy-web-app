1:
    intro_text: |
        Bem-vindo ao Hedy! No n√≠vel 1 voc√™ pode usar os comandos `print`,` ask` e `echo`.

        No lado esquerdo da tela est√£o todos os comandos do n√≠vel 1.

        Pressione o bot√£o azul e o c√≥digo ser√° digitado para voc√™!

        Experimente voc√™ mesmo o c√≥digo com o bot√£o verde 'Executar o c√≥digo' sob o campo de programa√ß√£o esquerdo.

        N√£o sabe o que programar? Nas pr√≥ximas abas, voc√™ encontrar√° algumas id√©ias sobre o que construir.
    start_code: "print ol√° mundo!"
    commands:
    -   name: "print"
        explanation: "printa algo com `print`."
        example: "Exemplo: print Ol√°! Seja bem-vindo(a) √† Hedy!"
        demo_code: "print Ol√°! Seja bem-vindo(a) √† Hedy!"
    -   name: "ask"
        explanation: "Pergunte algo com `ask`."
        example: "Exemplo: ask Qual a sua cor favorita?"
        demo_code: "ask Qual a sua cor favorita?"
    -   name: "echo"
        explanation: "Repita algo usando `echo`."
        example: "Exemplo: echo ent√£o a sua cor favorita √© "
        demo_code: |-
            ask Qual a sua cor favorita?
            echo ent√£o a sua cor favorita √© 
    -   name: '{print} emojis'
        explanation: print an emoji with `{print}`
        example: 'Example: {print} üôã‚Äç üåç ‚ùó'
        demo_code: '{print} üôã üåç ‚ùó'
    -   name: '{forward}'
        explanation: Draw a line with `{forward}`.
        example: 'Example: {forward} 100'
        demo_code: '{forward} 100'
    -   name: '{turn}'
        explanation: turn the drawing turtle with `{turn}`
        example: 'Example: {turn}'
        demo_code: "{forward} 25\n{turn} left\n{forward} 25\n{turn} right"
    example_code: "## Example code\n```\n{print} Hello!\n{print} Welcome to Hedy!\n```\n"
    intro_text_2: "You can also ask for input and repeat it back with an `{echo}` command.\nTry the code to your left again.\n\nDon't know what to create? In the next tabs you will find ideas for programs to build.\n"
    example_code_2: "## Example code\n```\n{ask} What is your name?\n{echo} hello\n```\n"
2:
    intro_text: |
        No n√≠vel 2, aprendemos algo novo. Voc√™ pode nomear uma palavra com `is`.

        Se voc√™ colocar o c√≥digo `name is Hedy` no topo do seu programa, poder√° usar o nome em qualquer lugar. Isso ser√° ent√£o substitu√≠do por Hedy.

        O `ask` mudou no n√≠vel 2, voc√™ tamb√©m salva a resposta com um nome:

        ```
        resposta is ask Qual √© o seu nome?
        ```

        A impress√£o ainda funciona como no n√≠vel 1 e voc√™ n√£o precisa mais de um ultrassom.
    start_code: "print ol√° mundo!"
    commands:
    -   name: "is"
        explanation: "D√™ um nome para uma palavra para usar no programa com `is`."
        example: "Exemplo: nome is Hedy."
        demo_code: |-
            nome is Hedy
            print bem-vindo(a) nome
    -   name: "ask"
        explanation: "Pergunte algo com `ask`. Cuidado! Voc√™ precisa dar √† resposta um nome com `is`."
        example: "Exemplo: cor is ask Qual a sua cor favorita?"
        demo_code: |-
            cor is ask Qual a sua cor favorita?
            print cor √© a sua favorita!
    -   explanation: Let Hedy pause for a (couple of) second(s).
        name: '{sleep}'
        example: 'Example: {sleep} 2 '
        demo_code: "{print} Let me think for one second...\n{sleep}\n{print} Hmm.. I need 3 more seconds...\n{sleep} 3\n{print} Eureka! Ive got it!"
    -   name: is - turtle
        explanation: Give a number a name using `{is}`. You can choose the name yourself.
        example: 'Example: angle {is} 90'
        demo_code: "angle {is} 90\n{turn} angle\n{forward} 100"
3:
    intro_text: |
        No n√≠vel 3, voc√™ tamb√©m pode fazer uma lista. Voc√™ pode ent√£o escolher qualquer coisa da lista. Voc√™ faz isso com `at random` (voc√™ diz: et ren-dom).

        ```
        animais is cachorro, gato, canguru
        print animais at random
        ```


        Voc√™ encontrar√° todos os c√≥digos do n√≠vel 3 na barra esquerda. Tamb√©m existem guias com atribui√ß√µes.
    start_code: "print ol√° mundo!"
    commands:
    -   name: "choose_random"
        explanation: "Escolha uma palavra aleat√≥ria para formar um grupo com `at` e `random`"
        example: "Exemplo: animais is cachorro, gato, canguru."
        demo_code: |-
            animais is cachorro, gato, canguru
            print animais at random
    -   name: '{add}'
        explanation: add an item to a list
        example: 'Example: {add} dog {to_list} animals'
        demo_code: "animals {is} cow, cat\n{add} dog {to_list} animals"
    -   name: '{remove}'
        explanation: remove an item from a list
        example: 'Example: {remove} dog {from} animals'
        demo_code: "animals {is} cat, dog, cow\n{remove} dog {from} animals"
4:
    start_code: "print 'Ol√° mundo'"
    intro_text: |
        `ask` e` print` mudam no n√≠vel 4.

        Voc√™ deve colocar o texto que deseja imprimir entre aspas.

        Isso √© √∫til porque agora voc√™ pode imprimir todas as palavras que desejar. Al√©m disso, as palavras que voc√™ usou para armazenar algo com `is`.

        A maioria das linguagens de programa√ß√£o tamb√©m usa aspas ao imprimir, portanto, tamb√©m estamos nos aproximando da programa√ß√£o real!

        ## As atribui√ß√µes est√£o ficando cada vez mais dif√≠ceis
        Voc√™ encontrar√° os comandos √† esquerda novamente e as atribui√ß√µes nas guias a seguir. As atribui√ß√µes est√£o ficando cada vez mais dif√≠ceis nas guias sucessivas.
        Portanto, √© melhor come√ßar pela esquerda com a hist√≥ria e trabalhar √† direita para ser desafiada cada vez mais.
    commands:
    -   name: "print"
        explanation: "Para printar um texto usando aspas simples"
        example: "Exemplo: print 'Ol√° seja bem-vindo(a) √† Hedy.'"
        demo_code: "print 'Ol√° seja bem-vindo(a) √† Hedy.'"
    -   name: "is"
        explanation: "D√° um nome para um texto qualquer e printe sem aspas"
        example: "Exemplo: nome is Hedy."
        demo_code: |-
            nome is Hedy
            print 'meu nome is ' nome
    -   name: "ask"
        explanation: "Pergunta algo com `ask`."
        example: "Exemplo: cor is ask 'Qual a sua cor favorita?'"
        demo_code: |-
            cor is ask 'Qual a sua cor favorita?'
            print cor ' √© a sua favorita!'
5:
    start_code: |-
        nome is ask 'qual o seu nome?'
        if nome is Hedy print 'legal!' else print 'n√£o t√£o legal'
    intro_text: |
        `ask` e `print` ainda funcionam como no n√≠vel 4.

         No n√≠vel 5, h√° algo novo, o `if`! Se √© ingl√™s para se. Com o `if` voc√™ pode escolher entre duas op√ß√µes diferentes.

         ## Exemplo de c√≥digo Hedy
         ```
         nome is ask 'qual √© o seu nome?'
         if nome is Hedy print 'legal' else print 'n√£o t√£o legal'
         ```

         Este c√≥digo imprime legal se voc√™ inserir Hedy como um nome, e n√£o t√£o legal se voc√™ inserir outra coisa.

         Se quisermos conferir se algo est√° numa lista, agora podemos usar `in` entre a coisa e a lista.

         ## Exemplo de c√≥digo Hedy
         ```
         cores_bonitas is amarelo, verde
         cor is ask 'Qual sua cor favorita?'
         if cor in cores_bonitas print 'bonita!' else print 'certo'
         ```

         Este c√≥digo imprime bonita! se voc√™ escolher amarelo ou verde, e certo caso contr√°rio.

         ## As atribui√ß√µes est√£o ficando cada vez mais dif√≠ceis
         Tamb√©m no n√≠vel 4, as atribui√ß√µes nas guias tornam-se cada vez mais dif√≠ceis. Ent√£o, fa√ßa-os da esquerda para a direita.

    commands:
    -   name: "print"
        explanation: "Printa o texto usando aspas simples"
        example: "Exemplo: print 'Ol√° seja bem-vindo(a) √† Hedy.'"
        demo_code: "print 'Ol√° seja bem-vindo(a) √† Hedy.'"
    -   name: "ask"
        explanation: "Pergunta algo com `ask`."
        example: "Exemplo: cor is ask 'Qual a sua cor favorita?'"
        demo_code: |-
            cor is ask 'Qual a sua cor favorita?'
            print cor ' √© a sua favorita!'
    -   name: "if"
        explanation: "Fa√ßa uma escolha com `if`."
        example: "Exemplo: if cor is verde print 'bonita!' else print 'n√£o gostei'"
        demo_code: |-
            cor is ask 'Qual a sua cor favorita?'
            if cor is verde print 'bonita!' else print 'n√£o gostei'
    -   name: "in"
        explanation: "Confira itens de listas com `in`"
        example: "Exemplo: if cor in cores_bonitas print 'bonita!' else print 'certo'"
        demo_code: |-
            cores_bonitas is amarelo, verde
            cor is ask 'Qual sua cor favorita?'
            if cor in cores_bonitas print 'bonita!' else print 'certo'
    -   name: '{in}'
        explanation: Check elements with `{in}`
        example: "Example: {if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
        demo_code: "pretty_colors {is} green, yellow\ncolor {is} {ask} 'What {is} your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
6:
    start_code: "print '5 vezes 5 √© ' 5 * 5"
    intro_text: |
        `ask`,` print` e `if` ainda funcionam como no n√≠vel 5.
        Mas no n√≠vel 6 h√° algo novo, agora voc√™ tamb√©m pode calcular.

        No n√≠vel 6, novos c√≥digos s√£o adicionados, agora voc√™ pode come√ßar a calcular em seu c√≥digo.

        O plus √© f√°cil, voc√™ escreve como com matem√°tica: `5 + 5` por exemplo. O sinal de menos tamb√©m funciona bem, que √© `5 - 5`.

        Os vezes s√£o um pouco diferentes, porque n√£o existem vezes no seu teclado. Basta pesquisar, realmente n√£o h√°!
        Por isso fazemos os tempos com asterisco acima de 8: `5 * 5`. Leia isso como 5 vezes 5, ent√£o voc√™ se lembrar√° mais facilmente.
        ## Exemplo de c√≥digo Hedy
        ```
        print '5 plus 5 is ' 5 + 5
        print '5 menos 5 is ' 5 - 5
        print '5 vezes 5 is ' 5 * 5
        ```

    commands:
    -   name: "print"
        explanation: "Printa o texto usando aspas simples"
        example: "Exemplo: print '5 vezes 5 √© ' 5 * 5"
        demo_code: "print '5 vezes 5 √© ' 5 * 5"
    -   name: "ask 'e if com opera√ß√µes'"
        explanation: "Pede por uma opera√ß√£o e verifique se est√° correta."
        example: "Exemplo: resposta = ask 'Quanto √© 10 mais 10?'"
        demo_code: |-
            resposta = ask 'Quanto √© 10 mais 10?'
            if resposta is 20 print 'Acertou!' else print 'Errou! Tente de novo'
    -   name: "`ask` and `if` turtle"
        explanation: "Ask the user how many angles they want"
        example: "Example: angles = ask 'How many angles?'"
        demo_code: |-
            angles = ask 'How many angles?'
            angle = 360 / angles
            forward 50
7:
    start_code: "repeat 3 times print 'Hedy √© divertido!'"
    intro_text: |
        Os comandos `ask`, `print` e `if` funcionam exatamente como no n√≠vel 5 e 6.
        Mas o n√≠vel 7 adiciona o comando `repeat`.
        `repeat` pode ser usado para executar uma linha de c√≥digo v√°rias vezes.
        ## Exemplo de c√≥digo Hedy
        ```
        repeat 3 times print 'Hedy √© divertido!'
        ```
    commands:
    -   name: "print"
        explanation: "Printa o texto usando aspas simples"
        example: "Exemplo: print 'Ol√° seja bem-vindo(a) √† Hedy.'"
        demo_code: "print 'Ol√° seja bem-vindo(a) √† Hedy.'"
    -   name: "ask"
        explanation: "Pergunta algo com `ask`."
        example: "Exemplo: cor = ask 'Qual a sua cor favorita?'"
        demo_code: |-
            cor = ask 'Qual a sua cor favorita?'
            print cor ' is your favorite!'
    -   name: "if"
        explanation: "Faz uma escolha com `if`."
        example: "Exemplo: if cor is verde print 'bonita!' else print 'n√£o gostei'"
        demo_code: |-
            cor = ask 'Qual a sua cor favorita?'
            if cor is verde print 'bonita!' else print 'n√£o gostei'
    -   name: "repeat - turtle"
        explanation: "Repeat a line of code with `repeat`."
        example: "Example: repeat 3 times forward 10"
        demo_code: |-
            repeat 3 times forward 10
8:
    start_code: |-
        repeat 5 times
            print 'Ol√° galera'
            print 'Isso vai ser printado 5 vezes'
    intro_text: |
        Os comandos `ask` e `print` ainda funcionam da mesma forma. Mas `if` e `repeat` mudaram!
        Voc√™ agora pode executar grupos de c√≥digos juntos, mas voc√™ ter√° que identar o c√≥digo.
        Isso significa colocar espa√ßos no come√ßo da linha. O mesmo vale para quando voc√™ queira criar um bloco s√≥ com um linha.

        ## Exemplo de c√≥digo Hedy
        ```
        repeat 5 times
            print 'Ol√° galera'
            print 'Isso vai ser printado 5 vezes'
        ```

    commands:
    -   name: "print"
        explanation: "Printa alguma coisa. Lembre-se de usar aspas simples para printar literais."
        example: "Exemplo: print '5 vezes 5 √© ' 5 * 5"
        demo_code: "print '5 vezes 5 √© ' 5 * 5"
    -   name: "if com m√∫ltiplas linhas"
        explanation: "Pergunta √† resposta de uma soma e verifica se est√° correta. Agora n√≥s podemos printar 2 linhas."
        example: "Exemplo: resposta = ask 'Quanto √© 5 mais 5?'"
        demo_code: |-
            resposta = ask 'Quanto √© 5 mais 5?'
            if resposta is 10
                print 'Muito bem!'
                print 'De fato, a resposta foi ' resposta
            else
                print 'Opa!'
                print 'A resposta √© 10'
    -   example: 'Example: draw a square'
        name: '`{repeat}` with turtle'
        explanation: '{repeat} multiple lines'
        demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
9:
    start_code: |-
        repeat 3 times
            comida = ask 'O que voc√™ deseja?'
            if comida is 'pizza'
                print 'excelente!'
            else
                print 'pizza √© melhor'
    intro_text: |
        Neste n√≠vel voc√™ pode n√£o s√≥ usar m√∫ltiplas linhas com `if` e `repeat`, mas tamb√©m juntar os dois!
        Neste exemplo voc√™ encontra um comando `if` dentro de um comando `repeat`. Tamb√©m √© poss√≠vel fazer o contr√°rio, e um `if`
        tamb√©m pode aparecer dentro de outro `if` e um `repeat` dentro de outro `repeat`.
        Experimente!

        ## Exemplo de c√≥digo Hedy
        ```
        repeat 3 times
            comida = ask 'O que voc√™ deseja?'
            if comida is 'pizza'
                print 'excelente!'
            else
                print 'pizza √© melhor'
        ```

    commands:
    -   name: "`if` com m√∫ltiplas linhas"
        explanation: "Pedimos a resposta de uma soma com 'ask' e conferimos se est√° correto. Depois imprimos duas linhas."
        example: "Exemplo: resposta = ask 'Quanto √© 20 mais 20?'"
        demo_code: |-
            resposta = ask 'Quanto √© 40 mais 40?'
            if resposta is 40
                print 'Muito bem!!'
                print 'A resposta √© realmente' resposta
            else
                print 'Errado'
                print 'A resposta √© 40'
    -   name: "`repeat` e a tartaruga"
        explanation: "Repeat de m√∫ltiplas linhas"
        example: "Exemplo: criar um quadrado"
        demo_code: |-
            repeat 4 times
                turn 90
                forward 50
10:
    start_code: |-
        animais is dog, cat, blobfish
        for animal in animais
          print 'I love ' animal
    intro_text: |
        Neste n√≠vel vamos aprender uma nova palavra chamada `for`. Com `for` voc√™ pode fazer uma lista e
        usar todos os elementos. `for` cria um bloco, assim como `repeat` e `if`, de modo que todas as
        linhas dentro do bloco precisam come√ßar com espa√ßos.

        ## Example Hedy code
        ```
        animais is dog, cat, blobfish
        for animal in animais
          print 'I love ' animal
        ```
    commands:
    -   name: "print"
        explanation: "Exiba algo. Lembre de usar as aspas para exibir literais."
        example: "Exemplo: print '5 vezes 5 is ' 5 * 5"
        demo_code: "print '5 vezes 5 is ' 5 * 5"
    -   name: "for com lista"
        explanation: "exibir tudo de uma lista"
        example: "Exemplo: for animal in animais"
        demo_code: |-
            animais is dog, cat, blobfish
            for animal in animais
              print 'I love ' animal
11:
    start_code: |-
        for contador in range 1 to 5
            print contador
    intro_text: "O `print` continua funcionando do mesmo modo, mas `repeat` √© substitu√≠do por `for`! Agora d√° para escrever `for contador in range 1 to 5` e usar `contador` no seu programa. Experimente para ver o que acontece! Lembre-se de usar indenta√ß√£o depois dos comandos `for` e `if` (que significa come√ßar uma frase com quatro espa√ßos)"
    commands:
    -   name: "for loop"
        explanation: "Trocamos `repeat` por `for` e acrescentamos uma faixa de valores"
        example: "for contador in range 1 to 5"
        demo_code: |-
            for contador in range 1 to 5
                print contador
    -   demo_code: "answer = {ask} 'What is 5 plus 5?'\n{if} answer {is} 10\n    {print} 'Well done!'\n    {print} 'Indeed, the answer was ' answer\nelse\n    {print} 'Oops!'\n    {print} 'The answer is 10'"
        name: '{ask}'
        explanation: ask for the answer to a sum and check if it is correct. We can now print 2 lines.
        example: "Example: answer = {ask} 'What is 5 plus 5?'"
12:
    start_code: |-
        print 'n√∫meros decimais agora precisam de um ponto'
        print 2.5 + 2.5
    intro_text: |
        At√© agora, Hedy n√£o permitia n√∫meros decimais como 1.5, mas agora permitimos
        isso. Observe que os computadores usam o . para n√∫meros decimais.

        Deste n√≠vel em diante voc√™ tamb√©m vai ter que usar aspas simples quando
        for armazenar texto com `is`:

        ```
        nome = 'Hedy'
        print 'Ol√° ' nome
        ```

        Para n√∫meros, n√£o se usa aspas simples no `is`:
        ```
        pontua√ß√£o = 25
        print 'Voc√™ marcou ' pontua√ß√£o
        ```
# Marleen, deze tekst hierboven en commands hieronder moet voor Engels nog uitgebreid worden (zoals bij Nederlands)
    # jaja hermans, ik ben al bezig!
    commands:
    -   name: "float directly"
        explanation: "C√°lculos com decimais"
        example: "print 2.5 + 2.5"
        demo_code: |
            print 'V√° calcular!'
            print 'Dois e meios mais dois e meio s√£o...'
            print 2.5 + 2.5
    -   name: "float in var"
        explanation: "Armazenar um c√°lculo com decimais"
        example: "resposta = 2.5 + 2.5"
        demo_code: |
            resposta = 2.5 + 2.5
            print 'V√° calcular!'
            print 'Dois e meios mais dois e meio s√£o...'
            print resposta

    -   example: name = 'Hedy'
        demo_code: "name = {ask} 'Who are you?'\n{if} name = 'Hedy'\n    {print} 'Hi there!'\n"
        name: quotes after {if} comparison
        explanation: Text with quotation marks after {if}
    -   name: quotes in list
        explanation: A list with quotation marks
        example: name = 'Hedy', 'Felienne'
        demo_code: "superheroes = 'Iron Man', 'Batman', 'Superman'\n{print} superheroes {at} {random}\n"
13:
    start_code: |-
        nome = ask 'qual o seu nome?'
        idade = ask 'qual sua idade?'
        if nome is 'Hedy' and idade is 2
            print 'Voc√™ √© realmente Hedy!'
    intro_text: "Agora vamos aprender `and` e `or`! Se voc√™ quiser verificar duas instru√ß√µes, n√£o √© necess√°rio usar dois `if` porque voc√™ pode usar `and` e `or`. Se voc√™ usar `and`, ambas as instru√ß√µes, √† esquerda e √† direita do `and` t√™m de ser verdadeiras. Podemos tamb√©m utilizar `or`. Neste caso, apenas uma das instru√ß√µes tem de ser verdadeira."
    commands:
    -   name: "And"
        explanation: "Ambas as instru√ß√µes (√† esquerda e √† direita do `and`) t√™m de ser verdadeiras."
        example: "if 3+2 is 5 and 2+2 is 4"
        demo_code: |-
            resposta1 = ask 'Quanto √© 3+2?'
            resposta2 = ask 'Quanto √© 2+2?'
            if resposta1 is 5 and resposta2 is 4
                print 'Ambas as respostas est√£o corretas!'
            else
                print 'Pelo menos uma resposta est√° errada!'
    -   name: "Or"
        explanation: "Pelo menos uma das instru√ß√µes √† esquerda e √† direita do `or`, tem de estar correta. Se ambas estiverem corretas, tamb√©m n√£o tem problema."
        example: "if 3+2 is 5 or 2+2 is 4"
        demo_code: |-
            resposta1 = ask 'Quanto √© 3+2?'
            resposta2 = ask 'Quanto √© 2+2?'
            if resposta1 is 5 or resposta2 is 4
                print 'Pelo menos uma resposta est√° correta!'
            else
                print 'Ambas as respostas est√£o erradas!'
#16:
#    start_code: |-
#        # Este √© um programa que vai perguntar algumas quest√µes de Matem√°tica
#        for i in range(1, 10):
#            # Vamos perguntar pela tabuada do 5
#            resposta is input('Quanto √© ' i ' vezes 5?')
#            # Verificamos se o resultado √© igual ao nosso c√°lculo
#            resposta_certa is i * 5
#            if resposta is resposta_certa:
#                print(resposta ' est√° certo!')
#            else:
#                print('Est√° errado, a resposta devia ser: ' i*5)
#    intro_text: |-
#        Quando voc√™ estiver criando programas maiores, vai precisar
#        arranjar uma maneira de lembrar o que cada peda√ßo de c√≥digo faz.
#        Usamos os coment√°rios para isso. Um coment√°rio se parece com isso:
#        ` # Isto √© um coment√°rio`. Tudo o que aparecer depois do # ser√°
#        invis√≠vel para o c√≥digo.
#    commands:
#    -   name: "Coment√°rio"
#        explanation: "Podemos colocar coment√°rios onde quisermos."
#        example: "# Isto √© um coment√°rio"
#        demo_code: |-
#            # Este programa escreve Ol√°!
#            # Este programa foi feito em Hedy
#            # N√£o faz mais nada al√©m de escrever Ol√°!
#            print('Ol√°!')
#20:
#    start_code: |-
#        fruta = ['ma√ß√£', 'banana', 'cereja']
#        for i in range(1, 3):
#            print(fruta[i])
#    intro_text: |-
#        Podemos tamb√©m ver tudo na lista com o ciclo `for`. Como
#        existem tr√™s coisas na lista, passamos o ciclo de 1 at√© 3.
#        Durante o ciclo n√≥s printamos tudo que h√° na lista.
#    commands:
#    -   name: "Tamanho da lista"
#        explanation: |-
#            Com `length` podemos saber o tamanho da lista. A lista no
#            exemplo tem tamanho 3, porque existem tr√™s coisas na lista.
#        example: "length(lista)"
#        demo_code: |-
#            fruta = ['ma√ß√£', 'banana', 'cereja']
#            print('tamanho da lista √© ' length(fruta))
#            for i in range(1, length(fruta)):
#                print(fruta[i])
#21:
#    start_code: |-
#        print('Quanto √© 5+3?')
#        resposta = 5+3
#        print('Resposta √© agora:')
#        print(resposta)
#        if resposta == 8:
#            print('Est√° certo!')
#        else:
#            print('Oh n√£o, est√° errado!')
#    intro_text: |-
#        Agora vamos substituir o `is` por `=` e `==`. Usamos `=` se
#        quisermos atribuir um determinado valor a uma vari√°vel. Se
#        quisermos atribuir 8 √† vari√°vel chamada resposta, ent√£o
#        escrevemos resposta = 8. Utilizamos `==` quando queremos
#        saber se duas coisas s√£o iguais.
#    commands:
#    -   name: "Comparar"
#        explanation: "Se quisermos comparar, usamos ==. 5+3 == 8 verifica se 5+3 √© igual a 8"
#        example: "Por exemplo: 5+3 == 8"
#        demo_code: |-
#            if 5+3 == 8:
#                print('5+3 √© realmente 8')
#            else:
#                print('Isto n√£o ser√° printado, porque 5+3 √© 8!')
#    -   name: "Atribuir valor"
#        explanation: |-
#            Se quisermos dizer que uma vari√°vel chamada resposta √© 8,
#            escrevemos resposta = 8.
#        example: "Por exemplo: resposta = 8"
#        demo_code: |-
#            print('Quanto √© 5+3?')
#            resposta = 5+3
#            print('Resposta √© agora:')
#            print(resposta)
#    -   name: "Comparar e atribuir valor"
#        explanation: |-
#            Se vamos comparar dois valores, utilizamos `==`. Se
#            vamos atribuir um valor a uma vari√°vel, usamos `=`.
#        example: "Por exemplo: 5+3 == 8, resposta = 8"
#        demo_code: |-
#            print('Quanto √© 5+3?')
#            resposta = 5+3
#            print('Resposta √© agora:')
#            print(resposta)
#            if resposta == 8:
#                print('Est√° certo!')
#            else:
#                print('N√£o, est√° errado!')
14:
    start_code: |-
        idade = ask 'Quantos anos voc√™ tem?'
        if idade < 13
            print 'Voc√™ √© mais novo a do que eu!'
        else
            print 'Voc√™ √© mais velho a do que eu!'
    intro_text: "Vamos aprender mais coisas novas! Voc√™ pode j√° ter aprendido sobre elas em Matem√°tica: o `<` e o `>`. O `<` verifica se o primeiro n√∫mero √© menor que o segundo, como `4 < 5`. O `>` verifica se o primeiro n√∫mero √© maior que o segundo, como `6 > 5`."
    commands:
    -   name: "Menor"
        explanation: "Usamos o `<` para verificar se o primeiro n√∫mero √© menor que o segundo n√∫mero. Por exemplo, se quisermos saber se uma vari√°vel √© menor que 15, usamos `variavel < 15`"
        example: "Por exemplo: idade < 13"
        demo_code: |-
            idade = ask 'Quantos anos voc√™ tem?'
            if idade < 13
                print 'Voc√™ √© mais novo a do que eu!'
    -   name: "Maior"
        explanation: "Usamos `>` para verificar se o primeiro n√∫mero √© maior que o segundo n√∫mero. Por exemplo, se quisermos saber se uma vari√°vel √© maior do que 15, usamos `variavel > 15`."
        example: "Por exemplo: idade > 13"
        demo_code: |-
            idade = ask 'Quantos anos voc√™ tem?'
            if idade > 13
                print 'Voc√™ √© mais velho a do que eu!'
    -   name: Equal
        explanation: We use the `==` to check if two things are the same.
        example: 'For example: answer == 25'
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer == 25\n    {print} 'That {is} correct!'"
    -   name: Not equal
        example: 'For example: answer != 25'
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer != 25\n    {print} 'That is not correct!'"
        explanation: 'We use the `!=` to check if two things are not the same. '
    -   demo_code: "age = {ask} 'How old are you?'\n{if} age <= 12\n    {print} 'You are younger than me!'"
        name: Smaller {or} equal
        explanation: We use the `<=` to check if the first number is smaller than or equal to the second number.
        example: 'For example: age <= 12'
    -   name: Bigger or equal
        explanation: We use the `>=` to check if the first number is bigger than or equal to the second number.
        example: 'For example: age >= 14'
        demo_code: "age = {ask} 'How old are you?'\n{if} age >= 14\n    {print} 'You are older than me!'"
15:
    start_code: |-
        resultado = 0
        while resultado != 25
            resultado = ask 'Quanto √© 5 vezes 5?'
        print 'Foi dada uma boa resposta'
    intro_text: |-
        Vamos aprender um ciclo novo, o ciclo `while`! Continuamos o
        ciclo enquanto a instru√ß√£o for verdadeira/v√°lida! Portanto,
        no exemplo de c√≥digo, continuamos at√© ser dada a resposta
        certa. Se a resposta correta nunca for dada, o ciclo nunca
        acaba!
    commands:
    -   name: "While booleano"
        explanation: "Podemos usar o ciclo `while` com `Verdadeiro` e `Falso`."
        example: "Exemplo: while resposta_certa is Falso"
        demo_code: |-
            resultado = 0
            while resultado != 25
                resultado = ask 'Quanto √© 5 vezes 5?'
            print 'Foi dada uma boa resposta'
    -   name: "while menor"
        explanation: |-
            Tamb√©m podemos utilizar o ciclo `while` com `<` e `>`. Mas
            cuidado, √© preciso mudar o n√∫mero para que ciclo termine.
            Aqui n√≥s fazemos isso com `contagem = contagem + 1`.
        example: "Por exemplo: while contagem < 3"
        demo_code: |-
            contagem = 1
            while contagem < 3
                print 'Fazemos isto mais ' 3 - contagem ' vezes.'
                contagem = contagem + 1
            print 'Acabamos!'

16:
    start_code: |-
        fruta = ['ma√ß√£', 'banana', 'cereja']
        print fruta 
    intro_text: "Vamos colocar as listas entre colchetes! Tamb√©m vamos ter de colocar cada elemento da lista entre aspas simples ('). "
    commands:
    -   explanation: "Vamos colocar as listas entre colchetes! Tamb√©m vamos ter de colocar cada elemento da lista entre aspas simples (')."
        example: "Por exemplo: fruta = ['ma√ß√£', 'banana', 'cereja']"
        demo_code: |-
            fruta = ['ma√ß√£', 'banana', 'cereja']
            print fruta 
        name: square brackets
    -   name: "Obt√©m um elemento da lista."
        explanation: "Para obter um elemento da lista usamos [n√∫mero] onde fruta[1] significa: obtenha a primeira fruta da lista!"
        example: "Por exemplo: primeirafruta is fruta[1]"
        demo_code: |-
            fruta = ['banana', 'ma√ß√£', 'cereja']
            primeira_fruta = fruta[1]
            print primeira_fruta
    -   name: "Obt√©m um elemento aleat√≥rio da lista."
        explanation: "Para obter um elemento aleat√≥rio da lista usamos [random], pelo que, fruta[random] significa: obt√©m uma fruta ao calhas da lista!"
        example: "For example: randomfruit is fruit[random]"
        demo_code: |-
            fruta = ['banana', 'ma√ß√£', 'cereja']
            qualquer_fruta = fruta[random]
            print qualquer_fruta
17:
    start_code: |-
        for i in range 1 to 10:
            print i
        print 'Preparados ou n√£o, aqui vou eu!'
    intro_text: "Agora vamos mudar um pouco as coisas com a indenta√ß√£o. Cada vez que precisarmos de indenta√ß√£o, temos de colocar `:` na linha antes da indenta√ß√£o."
    commands:
    -   explanation: "Quando usamos um `for`, temos de colocar `:` ap√≥s a instru√ß√£o `for`!"
        example: "for i in range 1 to 10:"
        demo_code: |-
            for i in range 1 to 12:
                print i
            print 'Preparados ou n√£o, aqui vou eu!'
        name: '{elif}'
    -   explanation: "Precisamos fazer a mesma coisa para todas as instru√ß√µes `if`."
        example: "if cor is verde:'"
        demo_code: |-
            cor = ask 'Qual a sua cor favorita?'
            if cor is verde:
                print 'A cor √© verde.'
            else:
                print 'A cor n√£o √© verde.'
        name: '{print}'
    -   explanation: "Vamos mostrar um novo comando que pode ser usado: `elif`. `elif` significa \"else if\". Come√ßamos por verificar se o `if` √© verdadeiro, se n√£o for o caso, verificamos em seguida o `elif`, e se esse tamb√©m n√£o for verdadeiro, avan√ßamos para o `else`."
        example: "elif a is 5:"
        demo_code: |-
            a = 2
            if a is 1:
                print 'a √© 1'
            elif a is 2:
                print 'a √© 2'
            else:
                print 'a n√£o √© 1 nem 2'
        name: '{if}'
