1:
    intro_text: |
        Bem-vindo(a) à Hedy! No nível 1 podes usar os comandos `print`, `ask` e `echo`.

        Na barra à esquerda podes ver todos os comandos usados no nível 1.

        Pressiona o botão azul e o código será digitado para ti!

        Experimenta o código à vontade, usando o botão verde 'Executa o código', por baixo do painel de programação esquerdo.

        Ainda não sabes o que criar? Nos próximos separadores vais encontrar algumas ideias sobre o que fazer.
    start_code: "print Olá mundo!"
    commands:
    -   explanation: "Escreve alguma coisa usando `print`."
        example: "Exemplo: print Olá bem vindo(a) à Hedy!"
        demo_code: "print Olá bem vindo(a) à Hedy!"
    -   explanation: "Pergunta algo com `ask`."
        example: "Exemplo: ask Qual é a tua cor favorita?"
        demo_code: "ask Qual é a tua cor favorita?"
    -   explanation: "Repete alguma coisa usando `echo`."
        example: "Exemplo: echo Então a tua cor favorita é "
        demo_code: |-
            ask Qual é a tua cor favorita?
            echo Então a tua cor favorita é 
2:
    intro_text: |
        No nível 2 vamos aprender algo novo. Podemos atribuir um nome a uma palavra utilizando `is`.

        Se usares o código `nome is Hedy`, podes colocar nome em qualquer parte do teu código, que será automaticamente substituído por Hedy.

        Nota: `ask` mudou, também podes guardar a resposta com um nome, da seguinte maneira:

        ```
        resposta is ask Como te chamas??
        ```

        `print` funciona tal e qual como no nível 1 e já não precisas de usar `echo`.

        No nível 2 também podes criar uma lista. Podes fazer o computador escolher algo aleatório (ou seja, uma coisa ao calhas) dessa lista. Fazes isso utilizando 'at random'.

        Encontras todos os códigos do nível 2 na barra esquerda. Temos também separadores com tarefas.
    start_code: "print Olá mundo!"
    commands:
    -   explanation: "Atribui um nome a uma palavra, para utilizares no programa usando `is`."
        example: "Exemplo: nome is Hedy."
        demo_code: |-
            nome is Hedy
            print Bem vindo(a) nome
    -   explanation: "Pergunta algo usando `ask`. Atenção! Tens de atribuir um nome à resposta usando `is`."
        example: "Exemplo: cor is ask Qual é a tua cor favorita?"
        demo_code: |-
            cor is ask Qual é a tua cor favorita?
            print cor é a tua favorita!
    -   explanation: "Escolhe uma palavra aleatória de um grupo de palavras usando `at` e `random`."
        example: "Exemplo: animais is cão, gato, canguru."
        demo_code: |-
            animais is cão, gato, canguru
            print animais at random
3:
    start_code: "print 'Olá mundo!'"
    intro_text: |
        `ask` funciona no nível 3 tal como funcionava no nível 2, mas `print` está diferente agora.

         Tens de colocar o texto que queres escrever entre aspas simples.

         Isto é útil, porque agora podes escrever todas as palavras que queres. O mesmo se aplica às palavras com que costumavas guardar algo usando `is`.

         A maioria das linguagens de programação também usam aspas simples quando querem escrever, por isso, estamos um passo mais próximos da realidade da programação!

         ## As tarefas estão a ficar cada vez mais difíceis
         Vais encontrar os comandos à esquerda, novamente, e as tarefas nos separadores seguintes. À medida que avanças pelos separadores, as tarefas vão ficando mais difíceis.
         Por isso, é melhor começares pela esquerda na história e ires avançando para a direita, para que o desafio vá aumentando, gradualmente.
    commands:
    -   explanation: "Escreve com exactidão usando as aspas simples."
        example: "Exemplo: print 'Olá, bem-vindo(a) à Hedy!'"
        demo_code: "print 'Olá, bem-vindo(a) à Hedy!'"
    -   explanation: "Atribui um nome a um pequeno texto e `print` sem usar aspas simples."
        example: "Exemplo: nome is Hedy."
        demo_code: |-
            nome is Hedy
            print 'O meu nome é ' nome
    -   explanation: "Pergunto algo com `ask`."
        example: "Exemplo: cor is ask Qual é a tua cor favorita?"
        demo_code: |-
            cor is ask 'Qual é a tua cor favorita?'
            print cor ' é a tua favorita!'
4:
    start_code: |-
        nome is ask Como te chamas?
        if nome is Hedy print 'Fixe!' else print 'pff'
    intro_text: |
        `ask` e `print` funcionam como no nível 3.

         No nível 4 temos algo novo, o `if`! Com o `if` podes escolher entre duas opções diferentes.

         ## Exemplo de Código Hedy
         ```
         nome is ask Como te chamas?
         if nome is Hedy print 'Fixe!' else print 'boo!'
         ```

         Este código escreve Fixe! se colocares Hedy como nome e boo! se colocares outra coisa qualquer.

         ## As tarefas estão a ficar cada vez mais difíceis

         Também no nível 4 as tarefas que vais encontrar nos separadores estão a tornar-se mais difíceis. Por isso, completa-as da esquerda para a direita.
    commands:
    -   explanation: "Escreve com exactidão usando aspas simples."
        example: "Exemplo: print 'Olá, bem-vindo(a) à Hedy!'"
        demo_code: "print 'Olá, bem-vindo(a) à Hedy!'"
    -   explanation: "Pergunta algo utilizando `ask`."
        example: "Exemplo: cor is ask Qual é a tua cor favorita?"
        demo_code: |-
            cor is ask Qual é a tua cor favorita?
            print cor ' é a tua favorita!'
    -   explanation: "Faz uma escolha com `if`."
        example: "Exemplo: if cor is verde print 'Linda!' else print 'pff'"
        demo_code: |-
            cor is ask Qual é a tua cor favorita?
            if cor is verde print 'Linda!' else print 'pff'
5:
    start_code: "print '5 vezes 5 é ' 5 * 5"
    intro_text: |
        `ask`, `print` e `if` ainda funcionam como nos nível 4.
         Mas no nível 5 temos algo novo, também podes fazer cálculos.

         No nível 5 acrescentamos novos símbolos e agora tu podes fazer cálculos dentro do teu código.

         A soma é fácil, escreves tal como fazes em Matemática: `5 + 5`, por exemplo. A subtração também funciona na perfeição, é `5 - 5`.

         A multiplicação é um pouco diferente, porque não existe o símbolo de multiplicar no teu teclado. Podes procurar à vontade, não existe mesmo!
         Por esse motivo, multiplicamos utilizando o asterisco: `5 * 5`. Lê isto como 5 vezes 5 e assim será mais fácil memorizar.
         ## Example Hedy code
         ```
         print '5 mais 5 é ' 5 + 5
         print '5 menos 5 é ' 5 - 5
         print '5 vezes 5 é ' 5 * 5
         ```
    commands:
    -   explanation: "Escreve com exactidão usando aspas simples."
        example: "Exemplo: print '5 vezes 5 é ' 5 * 5"
        demo_code: "print '5 vezes 5 é ' 5 * 5"
    -   explanation: "Pergunta por um cálculo e verifica se está correcto."
        example: "Exemplo: resultado is ask Quanto é 10 mais 10?"
        demo_code: |-
            resultado is ask 'Quanto é 10 mais 10?'
            if resultado is 20 print 'Sim!' else print 'Oops'
    -   name: "`ask` and `if` turtle"
        explanation: "Ask the user how many angles they want"
        example: "Example: angles is ask 'How many angles?'"
        demo_code: |-
            angles is ask 'How many angles?'
            angle is 360 / angles
            forward 50
6:
    start_code: "repeat 3 times print 'Hedy é divertida!'"
    intro_text: |
        `ask`, `print` e `if` funcionam, exactamente, como acontecia no nível 4 e 5.
        Mas o nível 5 acrescenta o comando `repeat`.  `repeat` pode ser usado para executar uma linha de código múltiplas vezes.
        ## Exemplo de Código Hedy
        ```
        repeat 3 times print 'Hedy é divertida!'
        ```
    commands:
    -   explanation: "Escreve com exactidão utilizando aspas simples."
        example: "Exemplo: print 'Olá, bem-vindo(a) à Hedy.'"
        demo_code: "print 'Olá, bem-vindo(a) à Hedy.'"
    -   explanation: "Pergunta alguma coisa usando `ask`."
        example: "Exemplo: cor is ask Qual é a tua cor favorita?"
        demo_code: |-
            cor is ask 'Qual é a tua cor favorita?'
            print cor ' é a tua favorita!'
    -   explanation: "Faz uma escolha utilizando o `if`."
        example: "Exemplo: if cor is verde print 'Linda!' else print 'pff'"
        demo_code: |-
            cor is ask 'Qual é a tua cor favorita?'
            if cor is verde print 'Linda!' else print 'pff'
    -   name: "repeat - turtle"
        explanation: "Repeat a line of code with `repeat`."
        example: "Example: repeat 3 times forward 10"
        demo_code: |-
            repeat 3 times forward 10

7:
    start_code: |-
        repeat 5 times
            print 'Olá amigos!'
            print 'Isto vai ser escrito 5 vezes.'
    intro_text: |
        `ask` e `print` ainda funcionam como já conheces. Mas `if` e `repeat` mudaram!
        Tu podes agora executar grupos de código em conjunto, mas vais ter de indentar o código.
        Isto significa colocar quatro espaços no início da linha. Isto também se aplica quando quiseres apenas criar um bloco só de uma linha.

        ## Exemplo de Código Hedy
        ```
        repeat 5 times
            print 'Olá a todos!'
            print 'Tudo isto é repetido 5 vezes.'
        ```
        Se juntares um `repeat` e um `if`, terás de indentar cada bloco. Observa o exemplo de código para mais detalhes!"
    commands:
    -   explanation: "Escreve alguma coisa. Lembra-te de usar aspas simples para escreveres com exactidão."
        example: "Exemplo: print '5 vezes 5 é ' 5 * 5"
        demo_code: "print '5 vezes 5 é ' 5 * 5"
    -   explanation: "Pergunta pelo resultado de uma soma e verfica se está correcto. Podemos agora escrever 2 linhas."
        example: "Example: answer is ask What is 5 plus 5?"
        demo_code: |-
            resultado is ask 'Quanto é 5 mais 5?'
            if resultado is 10
                print 'Muito bem!'
                print 'De facto, a resposta é ' resultado
            else
                print 'Oops!'
                print 'A resposta certa é 10'
9:
    start_code: |-
        animals is dog, cat, blobfish
        for animal in animals
          print 'I love ' animal
    intro_text: |
        In this level we learn a new code called `for`. With `for` you can make a list and use all elements.
        `for` creates a block, like `repeat` and `if` so all lines in the block need to start with spaces.

        ## Example Hedy code
        ```
        animals is dog, cat, blobfish
        for animal in animals
          print 'I love ' animal
        ```
    commands:
    -   name: "print"
        explanation: "Print something. Remember to use a quotation mark for literal printing."
        example: "Example: print '5 times 5 is ' 5 * 5"
        demo_code: "print '5 times 5 is ' 5 * 5"
    -   name: "for with a list"
        explanation: "print all things in a list "
        example: "Example: for dier in dieren"
        demo_code: |-
            animals is dog, cat, blobfish
            for animal in animals
              print 'I love ' animal
10:
    start_code: "for counter in range 1 to 5\n    print counter"
    intro_text: "`print` funciona na mesma mas o `repeat` agora é substituído por `for`! Podes agora escrever `for counter in range 1 to 5` e usar `counter` no teu programa. Experimenta para veres o que acontece! Lembra-te de usar a indentação a seguir às instruções `for` e `if` (Isto significa começar uma frase com quatro espaços)."
    commands:
    -   name: "Ciclo `for`"
        explanation: "Substituímos `repeat` por `for` e acrescetamos um intervalo de valores."
        example: "for counter in range 1 to 5"
        demo_code: "for counter in range 1 to 5\n    print counter"
    -   explanation: "Pergunta pelo resultado de uma soma e verifica se está correcto. Podes agora escrever em 2 linhas."
        example: "Exemplo: resultado is ask Quanto é 5 mais 5?"
        demo_code: |-
            resultado is ask 'Quanto é 5 mais 5?'
            if resultado is 10
                print 'Muito bem!'
                print 'De facto, a resposta é ' resultado
            else
                print 'Oops!'
                print 'A resposta certa é 10'
12:
    start_code: |-
        idade is ask 'Quantos anos tens?'
        if idade < 13
            print 'És mais novo(a) do que eu!'
        else
            print 'És mais velho(a) do que eu!'
    intro_text: "Vamos aprender mais coisas novas! Podes já ter aprendido sobre elas na Matemática, o `<` e `>`. O `<` verifica se o primeiro número é menor que o segundo, como `4 < 5`. O `>` verifica se o primeiro número é maior que o segundo, como `6 > 5`."
    commands:
    -   name: "Menor"
        explanation: "Usamos o `<` para verificar se o primeiro número é menor que o segundo número. Por exemplo, se queremos saber se uma variável é menor que 15, usamos `variavel < 15`"
        example: "Por exemplo: idade < 13"
        demo_code: |-
            idade is ask 'Quantos anos tens?'
            if idade < 13
                print 'És mais novo(a) do que eu!'
    -   name: "Maior"
        explanation: "Usamos `>` para verificar se o primeiro número é maior que o segundo número. Por exemplo, se queres saber se uma variável é maior do que 15, usamos, utilizamos `variavel > 15`."
        example: "Por exemplo: idade > 13"
        demo_code: |-
            idade is ask 'Quantos anos tens?'
            if idade > 13
                print 'És mais velho(a) do que eu!'

13:
    start_code: |-
        resultado is 0
        while resultado != 25:
            resultado is ask 'Quanto é 5 vezes 5?'
        print 'Foi dada a resposta correcta.'
    intro_text: "Vamos aprender um ciclo novo, o ciclo `while`! Continuamos o ciclo enquanto a instrução for verdadeira/válida! Portanto, no exemplo de código, continuamos até ser dada a resposta certa. Se a resposta correcta nunca for dada, o ciclo nunca acaba!"
    commands:
    -   name: "Booleano while"
        explanation: "Podemos usar o ciclo `while` com `Verdadeiro` e `Falso`."
        example: "Exemplo: while resposta_certa is Falso"
        demo_code: |-
            resultado is 0
            while resultado != 25:
                resultado is ask 'Quanto é 5 vezes 5?'
            print 'Foi dada a resposta correcta.'
    -   name: "while menor"
        explanation: "Também podemos utilizar o ciclo `while` com `<` e `>`. Mas cuidado, tens de mudar o número para que ciclo termine. Fazemos isso agora com contagem is contagem + 1."
        example: "Por exemplo: while count < 3"
        demo_code: |-
            contagem is 1
            while contagem < 3
                print 'Fazemos isto mais ' 3 - contagem ' vezes.'
                contagem is contagem + 1
            print 'Acabamos!'

14:
    start_code: |-
        fruta is ['maçã', 'banana', 'cereja']
        print fruta 
    intro_text: "Vamos colocar as listas entre parênteses rectos! Também vamos ter de colocar cada elemento da lista entre aspas simples ('). "
    commands:
    -   explanation: "Vamos colocar as listas entre parênteses rectos! Também vamos ter de colocar cada elemento da lista entre aspas simples (')."
        example: "Por exemplo: fruta is ['maçã', 'banana', 'cereja']"
        demo_code: |-
            fruta is ['maçã', 'banana', 'cereja']
            print fruta 
    -   name: "Obtém um elemento da lista."
        explanation: "Para obter um elemento da lista usamos [número], pelo que, fruta[1] significa: obtém a primeira fruta da lista!"
        example: "Por exemplo: primeirafruta is fruta[1]"
        demo_code: |-
            fruta is ['banana', 'maçã', 'cereja']
            primeirafruta is fruta[1]
            print primeirafruta 
    -   name: "Obtém um elemento aleatório da lista."
        explanation: "Para obter um elemento aleatório da lista usamos [random], pelo que, fruta[random] significa: obtém uma fruta ao calhas da lista!"
        example: "For example: randomfruit is fruit[random]"
        demo_code: |-
            fruta is ['banana', 'maçã', 'cereja']
            qualquerfruta is fruta[random]
            print qualquerfruta 
#15:
#    start_code: |-
#        ainda_estas_aqui is Falso
#        resposta_ainda_estas_aqui is input('Ainda está aqui? sim ou não?')
#        if resposta_ainda_estas_aqui is sim:
#            ainda_estas_aqui is Verdadeiro
#        resultado is input('Quanto é 5*5?')
#        if ainda_estas_aqui is Verdadeiro and resultado is 25:
#            print('Disseste sim e respondeste certo!')
#    intro_text: "Vamos agora aprender `and` e `or`! Se queres verificar duas instruções, não precisas de usar dois `if` mas podes usar `and` e `or`. Se utilizares `and`, ambas as instruções, à esquerda e à direita do `and` têm de ser verdadeiras. Podemos também utilizar `or`. Neste caso, apenas uma das instruções tem de ser verdadeira."
#    commands:
#    -   name: "And"
#        explanation: "Ambas as instruções (à esquerda e à direita do `and`) têm de ser correctas."
#        example: "if 3+2 is 5 and 2+2 is 4"
#        demo_code: |-
#            resultado1 is input('Quanto é 3+2?')
#            resultado2 is input('Quanto é 2+2?')
#            if resultado1 is 5 and resultado2 is 4:
#                print('Ambas as respostas estão certas!')
#            else:
#                print('Pelo menos uma resposta está errada!')
#    -   name: "Or"
#        explanation: "`or` Pelo menos uma das instruções à esquerda e à direita do `or`, tem de estar correcta. Se ambas estiverem correctas, também não tem problema."
#        example: "if 3+2 is 5 or 2+2 is 4"
#        demo_code: |-
#            resultado1 is input('Quanto é 3+2?')
#            resultado2 is input('Quanto é 2+2?')
#            if resultado1 is 5 or resultado2 is 4:
#                print('Pelo menos uma resposta está correcta!')
#            else:
#                print('Ambas as respostas estão erradas!')
#16:
#    start_code: |-
#        # Este é um programa que vai colocar algumas questões de Matemática
#        for i in range(1, 10):
#            # Vamos perguntar pela tabuada do 5
#            resultado is input('Quanto é ' i ' vezes 5?')
#            # Verificamos se o resultado é igual ao nosso cálculo
#            resposta_certa is i * 5
#            if resultado is resposta_certa:
#                print(resultado ' está certo!')
#            else:
#                print('Está errado, a resposta devia ser: ' i*5)
#    intro_text: "Quando estás a criar programas maiores, tens de arranjar uma maneira de te lembrares o que cada bocado de código faz. Usamos os comentários para esse efeito. Um comentário é semelhante a isto:\n ` # Isto é um comentário`. Tudo o que aparece depois do # será invisível para o código."
#    commands:
#    -   name: "Comentário"
#        explanation: "Podemos colocar comentários onde quisermos."
#        example: "# Isto é um comentário"
#        demo_code: |-
#            # Este programa escreve Olá!
#            # Este programa foi feito em Hedy
#            # Não faz mais nada excepto escrever Olá!
#            print('Olá!')
#20:
#    start_code: |-
#        fruta is ['maçã', 'banana', 'cereja']
#        for i in range(1, 3):
#            print(fruta[i])
#    intro_text: "Podemos também ver tudo na lista com o ciclo `for`. Como existem três coisas na lista, passamos o ciclo de 1 até 3. Agora escrevemos tudo durante o ciclo."
#    commands:
#    -   name: "Tamanho da lista"
#        explanation: "Com `length` podemos saber o tamanho da lista. A lista no exemplo tem tamanho 3, porque existem três coisas na lista."
#        example: "length(lista)"
#        demo_code: |-
#            fruta is ['maçã', 'banana', 'cereja']
#            print('tamanho da lista é ' length(fruta))
#            for i in range(1, length(fruta)):
#                print(fruta[i])
#21:
#    start_code: |-
#        print('Quanto é 5+3?')
#        resposta = 5+3
#        print('Resposta é agora:')
#        print(resposta)
#        if resposta == 8:
#            print('Está certo!')
#        else:
#            print('Oh não, está errado!')
#    intro_text: "Agora vamos mudar o is para `=` e `==`. Usamos `=` se queremos atribuir um determinado valor a uma variável. Se queremos atribuir 8 à variável chamada resposta, então colocamos resposta = 8. `==` utilizamos quando queremos saber se duas coisas são iguais entre elas."
#    commands:
#    -   name: "Compara"
#        explanation: "Se queremos comparar, usamos ==. 5+3 == 8 verifica se 5+3 é igual a 8"
#        example: "Por exemplo: 5+3 == 8"
#        demo_code: |-
#            if 5+3 == 8:
#                print('5+3 é de facto 8')
#            else:
#                print('Isto não será escrito, porque 5+3 é 8!')
#    -   name: "Atribui valor"
#        explanation: "Se pretendemos dizer que uma variável chamada resposta é 8, então colocamos resposta = 8."
#        example: "Por exemplo: resposta = 8"
#        demo_code: |-
#            print('Quanto é 5+3?')
#            resposta = 5+3
#            print('Resposta é agora:')
#            print(resposta)
#    -   name: "Compara e atribui um valor"
#        explanation: "Se vamos comparar dois valores, utilizamos `==`. Se formos atribuir um valor a uma variável, usamos `=`. "
#        example: "Por exemplo: 5+3 == 8, resposta = 8"
#        demo_code: |-
#            print('Quanto é 5+3?')
#            resposta = 5+3
#            print('Resposta é agora:')
#            print(resposta)
#            if resposta == 8:
#                print('Está certo!')
#            else:
#                print('Não, está errado!')
#12-old:
#    start_code: |-
#        idade is input('Quantos anos tens?')
#        print('Então já tivestes estas idades:')
#        for i in range(0, idade):
#            print(i)
#    intro_text: "Vamos utilizar parênteses curvos e vamos mudar `ask`! Vamos alterar `ask` para `input`! Com `print`, `input` e `for` vamos passar a usar agora parênteses curvos."
#    commands:
#    -   explanation: "Vamos utilizar parênteses com `print` agora!"
#        example: "Por exemplo: print('Olá mundo!')"
#        demo_code: "print('Olá mundo!')"
#    -   explanation: "Removemos o `ask` a agora chamamos-lhe `input`. Também vamos passar a usar parênteses."
#        example: "Por exemplo: nome is input('Como te chamas?')"
#        demo_code: |-
#            nome is input('Como te chamas?')
#            print('Então o teu nome é ' nome)
#    -   explanation: "Agora colocamos os números entre parênteses nos ciclos `for`. for i in range (0, 10):"
#        example: "Por exemplo: for i in range(0, 10):"
#        demo_code: |-
#            for i in range(0, 10):
#                print(i)
#            print('Preparados ou não, aqui vou eu!')
#colon:
#    start_code: |-
#        for i in range 1 to 10:
#            print i
#        print 'Preparados ou não, aqui vou eu!'
#    intro_text: "Agora vamos mudar um pouco as coisas com a indentação. Cada vez que precisarmos de indentação, temos de colocar `:` na linha antes da indentação."
#    commands:
#    -   explanation: "Quando usamos um `for`, temos de colocar `:` a seguir à instrução `for`!"
#        example: "for i in range 1 to 10:"
#        demo_code: |-
#            for i in range 1 to 12:
#                print i
#            print 'Preparados ou não, aqui vou eu!'
#    -   explanation: "Precisamos de fazer a mesma coisa para todas as intruções `if`."
#        example: "if cor is verde:'"
#        demo_code: |-
#            cor is verde
#            if cor is verde:
#                print 'A cor é verde.'
#            else:
#                print 'A cor não é verde.'
#    -   explanation: "Vamos-te mostrar um novo comando que podes usar: `elif`. `elif` significa \"else if\". Começamos por verificar se o `if` é verdadeiro, se não for esse o caso, verificamos em seguida o `elif`, e se esse também não for verdadeiro, avançamos para o `else`."
#        example: "elif a is 5:"
#        demo_code: |-
#            a is 2
#            if a is 1:
#                print 'a é 1'
#            elif a is 2:
#                print 'a é 2'
#            else:
#                print 'a não é 1 nem 2'
