1:
    intro_text: |
        Bem-vindo(a) √† Hedy! No n√≠vel 1 podes usar os comandos `print`, `ask` e `echo`.

        Na barra √† esquerda podes ver todos os comandos usados no n√≠vel 1.

        Pressiona o bot√£o azul e o c√≥digo ser√° digitado para ti!

        Experimenta o c√≥digo √† vontade, usando o bot√£o verde 'Executa o c√≥digo', por baixo do painel de programa√ß√£o esquerdo.

        Ainda n√£o sabes o que criar? Nos pr√≥ximos separadores vais encontrar algumas ideias sobre o que fazer.
    start_code: "print Ol√° mundo!"
    commands:
    -   explanation: "Escreve alguma coisa usando `print`."
        example: "Exemplo: print Ol√° bem vindo(a) √† Hedy!"
        demo_code: "print Ol√° bem vindo(a) √† Hedy!"
        name: '{print}'
    -   explanation: "Pergunta algo com `ask`."
        example: "Exemplo: ask Qual √© a tua cor favorita?"
        demo_code: "ask Qual √© a tua cor favorita?"
        name: '{ask}'
    -   explanation: "Repete alguma coisa usando `echo`."
        example: "Exemplo: echo Ent√£o a tua cor favorita √© "
        demo_code: |-
            ask Qual √© a tua cor favorita?
            echo Ent√£o a tua cor favorita √© 
        name: '{echo}'
    -   name: '{print} emojis'
        explanation: print an emoji with `{print}`
        example: 'Example: {print} üôã‚Äç üåç ‚ùó'
        demo_code: '{print} üôã üåç ‚ùó'
    -   name: '{forward}'
        explanation: Draw a line with `{forward}`.
        example: 'Example: {forward} 100'
        demo_code: '{forward} 100'
    -   explanation: turn the drawing turtle with `{turn}`
        example: 'Example: {turn}'
        demo_code: "{forward} 25\n{turn} left\n{forward} 25\n{turn} right"
        name: '{turn}'
    example_code: "## Example code\n```\n{print} Hello!\n{print} Welcome to Hedy!\n```\n"
    intro_text_2: "You can also ask for input and repeat it back with an `{echo}` command.\nTry the code to your left again.\n\nDon't know what to create? In the next tabs you will find ideas for programs to build.\n"
    example_code_2: "## Example code\n```\n{ask} What is your name?\n{echo} hello\n```\n"
    intro_text_3: "Let's get started! Don't know what to create? In the next tabs you will find ideas for programs to build.\n"
2:
    intro_text: |
        No n√≠vel 2 vamos aprender algo novo. Podemos atribuir um nome a uma palavra utilizando `is`.

        Se usares o c√≥digo `nome is Hedy`, podes colocar nome em qualquer parte do teu c√≥digo, que ser√° automaticamente substitu√≠do por Hedy.

        Nota: `ask` mudou, tamb√©m podes guardar a resposta com um nome, da seguinte maneira:

        ```
        resposta is ask Como te chamas??
        ```

        `print` funciona tal e qual como no n√≠vel 1 e j√° n√£o precisas de usar `echo`.
    start_code: "print Ol√° mundo!"
    commands:
    -   explanation: "Atribui um nome a uma palavra, para utilizares no programa usando `is`."
        example: "Exemplo: nome is Hedy."
        demo_code: |-
            nome is Hedy
            print Bem vindo(a) nome
        name: '{is}'
    -   explanation: "Pergunta algo usando `ask`. Aten√ß√£o! Tens de atribuir um nome √† resposta usando `is`."
        example: "Exemplo: cor is ask Qual √© a tua cor favorita?"
        demo_code: |-
            cor is ask Qual √© a tua cor favorita?
            print cor √© a tua favorita!
        name: '{ask}'
    -   name: '{sleep}'
        explanation: Let Hedy pause for a (couple of) second(s).
        example: 'Example: {sleep} 2 '
        demo_code: "{print} Let me think for one second...\n{sleep}\n{print} Hmm.. I need 3 more seconds...\n{sleep} 3\n{print} Eureka! Ive got it!"
    -   name: is - turtle
        explanation: Give a number a name using `{is}`. You can choose the name yourself.
        example: 'Example: angle {is} 90'
        demo_code: "angle {is} 90\n{turn} angle\n{forward} 100"
    intro_text_2: "`{print}` still works the same, but the `{ask}` command has changed. You need to use a variable in the `{ask}` command as well. It looks like this:\n"
    example_code: "## Example code\n```\nname {is} Hedy\nage {is} 15\n{print} name is age years old\n```\n"
    example_code_2: "```\nanswer {is} {ask} What is your name?\n{print} Hello answer\n```\n"
    intro_text_3: "Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.\n"
    example_code_3: "```\n{print} My favorite colour is...\n{sleep} 2\n{print} green!\n```\n"
3:
    intro_text: |
        No n√≠vel 3 tamb√©m podes criar uma lista. Podes fazer o computador escolher algo aleat√≥rio (ou seja, uma coisa ao calhas) dessa lista. Fazes isso utilizando 'at random'.

        ```
        animais is c√£o, gato, canguru
        print animais at random
        ```

        Encontras todos os c√≥digos do n√≠vel 3 na barra esquerda. Temos tamb√©m separadores com tarefas.
    start_code: "print Ol√° mundo!"
    commands:
    -   explanation: "Escolhe uma palavra aleat√≥ria de um grupo de palavras usando `at` e `random`."
        example: "Exemplo: animais is c√£o, gato, canguru."
        demo_code: |-
            animais is c√£o, gato, canguru
            print animais at random
        name: choose_random
    -   explanation: add an item to a list
        example: 'Example: {add} dog {to_list} animals'
        name: '{add}'
        demo_code: "animals {is} cow, cat\n{add} dog {to_list} animals"
    -   explanation: remove an item from a list
        name: '{remove}'
        example: 'Example: {remove} dog {from} animals'
        demo_code: "animals {is} cat, dog, cow\n{remove} dog {from} animals"
    example_code: "## Example Hedy Code\n\n```\nanimals {is} dog, cat, kangaroo\n{print} animals {at} {random}\n```\n"
    intro_text_2: You can also add items to the list with `{add}` and remove items with `{remove}`.
    example_code_2: "## Example Hedy Code\n\n```\nanimals {is} dog, cat, kangaroo\n{add} penguin {to_list} animals\n{remove} cat {from} animals\n{print} animals {at} {random}\n```\n"
4:
    start_code: "print 'Ol√° mundo!'"
    intro_text: |
        `ask` funciona no n√≠vel 4 tal como funcionava no n√≠vel 3, mas `print` est√° diferente agora.

         Tens de colocar o texto que queres escrever entre aspas simples.

         Isto √© √∫til, porque agora podes escrever todas as palavras que queres. O mesmo se aplica √†s palavras com que costumavas guardar algo usando `is`.

         A maioria das linguagens de programa√ß√£o tamb√©m usam aspas simples quando querem escrever, por isso, estamos um passo mais pr√≥ximos da realidade da programa√ß√£o!

         ## As tarefas est√£o a ficar cada vez mais dif√≠ceis
         Vais encontrar os comandos √† esquerda, novamente, e as tarefas nos separadores seguintes. √Ä medida que avan√ßas pelos separadores, as tarefas v√£o ficando mais dif√≠ceis.
         Por isso, √© melhor come√ßares pela esquerda na hist√≥ria e ires avan√ßando para a direita, para que o desafio v√° aumentando, gradualmente.
    commands:
    -   explanation: "Escreve com exactid√£o usando as aspas simples."
        example: "Exemplo: print 'Ol√°, bem-vindo(a) √† Hedy!'"
        demo_code: "print 'Ol√°, bem-vindo(a) √† Hedy!'"
        name: '{print}'
    -   explanation: "Atribui um nome a um pequeno texto e `print` sem usar aspas simples."
        example: "Exemplo: nome is Hedy."
        demo_code: |-
            nome is Hedy
            print 'O meu nome √© ' nome
        name: '{is}'
    -   explanation: "Pergunto algo com `ask`."
        example: "Exemplo: cor is ask Qual √© a tua cor favorita?"
        demo_code: |-
            cor is ask 'Qual √© a tua cor favorita?'
            print cor ' √© a tua favorita!'
        name: '{ask}'
    example_code: "## Example Hedy code\n```\nprint 'You need to use quotation marks from now on!'\nanswer is ask 'What do we need to use from now on?'\nprint 'We need to use ' answer\n```\n"
    intro_text_2: "## Adventures are getting more and more difficult\nThe adventures are now getting more and more difficult in the successive tabs.\nSo it is best to start on the left with the story, and work to the right, in order to be challenged more and more.\n"
5:
    start_code: |-
        nome is ask Como te chamas?
        if nome is Hedy print 'Fixe!' else print 'pff'
    intro_text: |
        `ask` e `print` funcionam como no n√≠vel 4.

         No n√≠vel 5 temos algo novo, o `if`! Com o `if` podes escolher entre duas op√ß√µes diferentes.

         ## Exemplo de C√≥digo Hedy
         ```
         nome is ask Como te chamas?
         if nome is Hedy print 'Fixe!' else print 'boo!'
         ```

         Este c√≥digo escreve Fixe! se colocares Hedy como nome e boo! se colocares outra coisa qualquer.

         ## As tarefas est√£o a ficar cada vez mais dif√≠ceis

         Tamb√©m no n√≠vel 5 as tarefas que vais encontrar nos separadores est√£o a tornar-se mais dif√≠ceis. Por isso, completa-as da esquerda para a direita.
    commands:
    -   explanation: "Escreve com exactid√£o usando aspas simples."
        example: "Exemplo: print 'Ol√°, bem-vindo(a) √† Hedy!'"
        demo_code: "print 'Ol√°, bem-vindo(a) √† Hedy!'"
        name: '{print}'
    -   explanation: "Pergunta algo utilizando `ask`."
        example: "Exemplo: cor is ask Qual √© a tua cor favorita?"
        demo_code: |-
            cor is ask Qual √© a tua cor favorita?
            print cor ' √© a tua favorita!'
        name: '{ask}'
    -   explanation: "Faz uma escolha com `if`."
        example: "Exemplo: if cor is verde print 'Linda!' else print 'pff'"
        demo_code: |-
            cor is ask Qual √© a tua cor favorita?
            if cor is verde print 'Linda!' else print 'pff'
        name: '{if}'
    -   explanation: Make a choice with `{if}`
        example: 'Example: {if} answer {is} far {forward} 100 {else} {forward} 5'
        name: '{if} with turtle'
        demo_code: "answer {is} {ask} 'How far should I walk?'\n{if} answer {is} far {forward} 100 {else} {forward} 5"
    -   demo_code: "pretty_colors {is} green, yellow\ncolor {is} {ask} 'What {is} your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
        name: '{in}'
        explanation: Check elements with `{in}`
        example: "Example: {if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
    example_code: "## Example Hedy Code\n```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'\n```\n"
    intro_text_3: "## Lists\nWhen we want to check if something is in a list, we can now use the `{in}` command.\nThis code prints pretty! if you choose green or yellow, and meh otherwise.\n"
    example_code_3: "```\npretty_colors {is} green, yellow\ncolor {is} {ask} 'What is your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!'\n{else} {print} 'meh'\n```\n"
    intro_text_2: "Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:\n"
    example_code_2: "```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice'\n{else} {print} 'boo!'\n```\n"
6:
    start_code: "print '5 vezes 5 √© ' 5 * 5"
    intro_text: |
        `ask`, `print` e `if` ainda funcionam como nos n√≠vel 5.
         Mas no n√≠vel 6 temos algo novo, tamb√©m podes fazer c√°lculos.

         No n√≠vel 6 acrescentamos novos s√≠mbolos e agora tu podes fazer c√°lculos dentro do teu c√≥digo.

         A soma √© f√°cil, escreves tal como fazes em Matem√°tica: `5 + 5`, por exemplo. A subtra√ß√£o tamb√©m funciona na perfei√ß√£o, √© `5 - 5`.

         A multiplica√ß√£o √© um pouco diferente, porque n√£o existe o s√≠mbolo de multiplicar no teu teclado. Podes procurar √† vontade, n√£o existe mesmo!
         Por esse motivo, multiplicamos utilizando o asterisco: `5 * 5`. L√™ isto como 5 vezes 5 e assim ser√° mais f√°cil memorizar.
         ## Example Hedy code
         ```
         print '5 mais 5 √© ' 5 + 5
         print '5 menos 5 √© ' 5 - 5
         print '5 vezes 5 √© ' 5 * 5
         ```
    commands:
    -   explanation: "Escreve com exactid√£o usando aspas simples."
        example: "Exemplo: print '5 vezes 5 √© ' 5 * 5"
        demo_code: "print '5 vezes 5 √© ' 5 * 5"
        name: '{print}'
    -   explanation: "Pergunta por um c√°lculo e verifica se est√° correcto."
        example: "Exemplo: resultado is ask Quanto √© 10 mais 10?"
        demo_code: |-
            resultado = ask 'Quanto √© 10 mais 10?'
            if resultado is 20 print 'Sim!' else print 'Oops'
        name: '{ask}'
    -   name: "`ask` and `if` turtle"
        explanation: "Ask the user how many angles they want"
        example: "Example: angles = ask 'How many angles?'"
        demo_code: |-
            angles = ask 'How many angles?'
            angle = 360 / angles
            forward 50
    example_code: "## Example Hedy code\n```\n{print} '5 plus 5 is ' 5 + 5\n{print} '5 minus 5 is ' 5 - 5\n{print} '5 {times} 5 is ' 5 * 5\n```\n"
    intro_text_2: "We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:\n"
    example_code_2: "```\nname = Hedy\nanswer = 20 + 4\n```\n"
7:
    start_code: "repeat 3 times print 'Hedy √© divertida!'"
    intro_text: |
        `ask`, `print` e `if` funcionam, exactamente, como acontecia no n√≠vel 5 e 6.
        Mas o n√≠vel 7 acrescenta o comando `repeat`.  `repeat` pode ser usado para executar uma linha de c√≥digo m√∫ltiplas vezes.
        ## Exemplo de C√≥digo Hedy
        ```
        repeat 3 times print 'Hedy √© divertida!'
        ```
    commands:
    -   explanation: "Escreve com exactid√£o utilizando aspas simples."
        example: "Exemplo: print 'Ol√°, bem-vindo(a) √† Hedy.'"
        demo_code: "print 'Ol√°, bem-vindo(a) √† Hedy.'"
        name: '{print}'
    -   explanation: "Pergunta alguma coisa usando `ask`."
        example: "Exemplo: cor = ask Qual √© a tua cor favorita?"
        demo_code: |-
            cor = ask 'Qual √© a tua cor favorita?'
            print cor ' √© a tua favorita!'
        name: '{ask}'
    -   explanation: "Faz uma escolha utilizando o `if`."
        example: "Exemplo: if cor is verde print 'Linda!' else print 'pff'"
        demo_code: |-
            cor = ask 'Qual √© a tua cor favorita?'
            if cor is verde print 'Linda!' else print 'pff'
        name: '{if}'
    -   name: "repeat - turtle"
        explanation: "Repeat a line of code with `repeat`."
        example: "Example: repeat 3 times forward 10"
        demo_code: |-
            repeat 3 times forward 10

    example_code: "## Example Hedy code\n```\n{repeat} 3 {times} {print} 'Hedy {is} fun!'\n```\n"
8:
    start_code: |-
        repeat 5 times
            print 'Ol√° amigos!'
            print 'Isto vai ser escrito 5 vezes.'
    intro_text: |
        `ask` e `print` ainda funcionam como j√° conheces. Mas `if` e `repeat` mudaram!
        Tu podes agora executar grupos de c√≥digo em conjunto, mas vais ter de indentar o c√≥digo.
        Isto significa colocar quatro espa√ßos no in√≠cio da linha. Isto tamb√©m se aplica quando quiseres apenas criar um bloco s√≥ de uma linha.

        ## Exemplo de C√≥digo Hedy
        ```
        repeat 5 times
            print 'Ol√° a todos!'
            print 'Tudo isto √© repetido 5 vezes.'
        ```
        Se juntares um `repeat` e um `if`, ter√°s de indentar cada bloco. Observa o exemplo de c√≥digo para mais detalhes!"
    commands:
    -   explanation: "Escreve alguma coisa. Lembra-te de usar aspas simples para escreveres com exactid√£o."
        example: "Exemplo: print '5 vezes 5 √© ' 5 * 5"
        demo_code: "print '5 vezes 5 √© ' 5 * 5"
        name: '{print}'
    -   explanation: "Pergunta pelo resultado de uma soma e verfica se est√° correcto. Podemos agora escrever 2 linhas."
        example: "Example: answer = ask What is 5 plus 5?"
        demo_code: |-
            resultado = ask 'Quanto √© 5 mais 5?'
            if resultado is 10
                print 'Muito bem!'
                print 'De facto, a resposta √© ' resultado
            else
                print 'Oops!'
                print 'A resposta certa √© 10'
        name: '{ask}'
    -   name: '`{repeat}` with turtle'
        explanation: '{repeat} multiple lines'
        example: 'Example: draw a square'
        demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
    example_code: "## Example Hedy code\n```\n{repeat} 5 {times}\n    {print} 'Hello everyone'\n    {print} 'This is all repeated 5 times'\n```\n"
9:
    start_code: |-
        repeat 3 times
            food = ask 'What do you want?'
            if food is 'pizza'
                print 'nice!'
            else
                print 'pizza is better'
    intro_text: |
        In this level you can not only use multiple lines with `if` and `repeat`, but you can also put them together!
        In the example you see an `if` command within a `repeat` command. It is also allowed the other way around, and an `if` is also allowed in an `if` and a `repeat` in a `repeat`.
        Give it a try!

        ## Example Hedy code
        ```
        repeat 3 times
            food = ask 'What do you want?'
            if food is 'pizza'
                print 'nice!'
            else
                print 'pizza is better'
        ```

    commands:
    -   name: "`if` with multiple lines"
        explanation: "The answer of a sum of questions with 'ask' and see if it is correct. Now we print out two lines."
        example: "Example: answer = ask 'What is 20 plus 20?'"
        demo_code: |-
            answer = ask 'What is 20 plus 20?'
            if answer is 20
                print 'Well done!!'
                print 'The answer is indeed' answer
            else
                print 'Wrong'
                print 'The answer is 20'
    -   name: "`repeat` and turtle"
        explanation: "Repeat multiple lines"
        example: "Example: create a square"
        demo_code: |-
            repeat 4 times
                turn 90
                forward 50
    example_code: "## Example Hedy code\n```\n{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    else\n        {print} 'pizza is better'\n```\n"
10:
    start_code: |-
        animals is dog, cat, blobfish
        for animal in animals
          print 'I love ' animal
    intro_text: |
        In this level we learn a new code called `for`. With `for` you can make a list and use all elements.
        `for` creates a block, like `repeat` and `if` so all lines in the block need to start with spaces.

        ## Example Hedy code
        ```
        animals is dog, cat, blobfish
        for animal in animals
          print 'I love ' animal
        ```
    commands:
    -   name: "print"
        explanation: "Print something. Remember to use a quotation mark for literal printing."
        example: "Example: print '5 times 5 is ' 5 * 5"
        demo_code: "print '5 times 5 is ' 5 * 5"
    -   name: "for with a list"
        explanation: "print all things in a list "
        example: "Example: for dier in dieren"
        demo_code: |-
            animals is dog, cat, blobfish
            for animal in animals
              print 'I love ' animal
    example_code: "## Example Hedy code\n```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal\n```\n"
11:
    start_code: "for counter in range 1 to 5\n    print counter"
    intro_text: "`print` funciona na mesma mas o `repeat` agora √© substitu√≠do por `for`! Podes agora escrever `for counter in range 1 to 5` e usar `counter` no teu programa. Experimenta para veres o que acontece! Lembra-te de usar a indenta√ß√£o a seguir √†s instru√ß√µes `for` e `if` (Isto significa come√ßar uma frase com quatro espa√ßos)."
    commands:
    -   name: "Ciclo `for`"
        explanation: "Substitu√≠mos `repeat` por `for` e acrescetamos um intervalo de valores."
        example: "for counter in range 1 to 5"
        demo_code: "for counter in range 1 to 5\n    print counter"
    -   explanation: "Pergunta pelo resultado de uma soma e verifica se est√° correcto. Podes agora escrever em 2 linhas."
        example: "Exemplo: resultado = ask Quanto √© 5 mais 5?"
        demo_code: |-
            resultado = ask 'Quanto √© 5 mais 5?'
            if resultado is 10
                print 'Muito bem!'
                print 'De facto, a resposta √© ' resultado
            else
                print 'Oops!'
                print 'A resposta certa √© 10'
        name: '{ask}'
    example_code: "## Example Hedy code\n```\nfor counter in range 1 to 5\n    print counter\n```\n"
12:
    start_code: |-
        print 'decimal numbers now need to use a dot'
        print 2.5 + 2.5
    intro_text: |
        So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that cmputers use the . for decimal numbers.

        For this level on you will also have to use quotation marks when storing a text with `is`:

        ```
        name = 'Hedy'
        print 'Hello ' name
        ```

        For numbers, you do not use quotation marks in the `is`:
        ```
        score = 25
        print 'You got ' score
        ```
# Marleen, deze tekst hierboven en commands hieronder moet voor Engels nog uitgebreid worden (zoals bij Nederlands)
    # jaja hermans, ik ben al bezig!
    commands:
    -   name: "float directly"
        explanation: "Calculation with decimals"
        example: "print 2.5 + 2.5"
        demo_code: |
            print 'Calculate away!'
            print 'Two and a half plus two and a half is...'
            print 2.5 + 2.5
    -   name: "float in var"
        explanation: "Storing a calculation with decimals"
        example: "antwoord = 2.5 + 2.5"
        demo_code: |
            answer = 2.5 + 2.5
            print 'Calculate away!'
            print 'Two and a half plus two and a half is...'
            print answer

    -   name: quotes after {if} comparison
        example: name = 'Hedy'
        explanation: Text with quotation marks after {if}
        demo_code: "name = {ask} 'Who are you?'\n{if} name = 'Hedy'\n    {print} 'Hi there!'\n"
    -   name: quotes in list
        example: name = 'Hedy', 'Felienne'
        demo_code: "superheroes = 'Iron Man', 'Batman', 'Superman'\n{print} superheroes {at} {random}\n"
        explanation: A list with quotation marks
    example_code: "## Example Hedy code\n```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n"
    intro_text_2: "**All texts need to be in quotation marks**\nFor this level on you will also have to use quotation marks when storing a text with `=`:\n"
    example_code_2: "```\nname = 'Hedy the Robot'\n{print} 'Hello ' name\n```\n"
    intro_text_3: "**All items in lists need quotation marks too**\nLists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.\nThis allows you to save two words as 1 item on the list, for example 'Iron Man'.\n"
    example_code_3: "```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n"
    intro_text_4: "**All text after `{if}` comparisons need quotation marks too**\n"
    example_code_4: "```\nname = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n"
    intro_text_5: "**Numbers don't need quotation marks**\nFor numbers, you do not use quotation marks in the `=`:\n"
    example_code_5: "```\nscore = 25\n{print} 'You got ' score\n```\n"
    intro_text_6: "**Maths with words** In this level it is also allowed to use the + sign with texts. For example:\n"
    example_code_6: "```\na = 'Hello '\nb = 'world!'\nprint a + b\n```\n"
13:
    start_code: |-
        name = ask 'what is your name?'
        age = ask 'what is your age?'
        if name is 'Hedy' and age is 2
            print 'You are the real Hedy!'
    intro_text: "Vamos agora aprender `and` e `or`! Se queres verificar duas instru√ß√µes, n√£o precisas de usar dois `if` mas podes usar `and` e `or`. Se utilizares `and`, ambas as instru√ß√µes, √† esquerda e √† direita do `and` t√™m de ser verdadeiras. Podemos tamb√©m utilizar `or`. Neste caso, apenas uma das instru√ß√µes tem de ser verdadeira."
    commands:
    -   name: "And"
        explanation: "Ambas as instru√ß√µes (√† esquerda e √† direita do `and`) t√™m de ser correctas."
        example: "if 3+2 is 5 and 2+2 is 4"
        demo_code: |-
            resultado1 = ask 'Quanto √© 3+2?'
            resultado2 = ask 'Quanto √© 2+2?'
            if resultado1 is 5 and resultado2 is 4
                print 'Ambas as respostas est√£o certas!'
            else
                print 'Pelo menos uma resposta est√° errada!'
    -   name: "Or"
        explanation: "`or` Pelo menos uma das instru√ß√µes √† esquerda e √† direita do `or`, tem de estar correcta. Se ambas estiverem correctas, tamb√©m n√£o tem problema."
        example: "if 3+2 is 5 or 2+2 is 4"
        demo_code: |-
            resultado1 = ask 'Quanto √© 3+2?'
            resultado2 = ask 'Quanto √© 2+2?'
            if resultado1 is 5 or resultado2 is 4
                print 'Pelo menos uma resposta est√° correcta!'
            else
                print 'Ambas as respostas est√£o erradas!'
#16:
#    start_code: |-
#        # Este √© um programa que vai colocar algumas quest√µes de Matem√°tica
#        for i in range(1, 10):
#            # Vamos perguntar pela tabuada do 5
#            resultado is input('Quanto √© ' i ' vezes 5?')
#            # Verificamos se o resultado √© igual ao nosso c√°lculo
#            resposta_certa is i * 5
#            if resultado is resposta_certa:
#                print(resultado ' est√° certo!')
#            else:
#                print('Est√° errado, a resposta devia ser: ' i*5)
#    intro_text: "Quando est√°s a criar programas maiores, tens de arranjar uma maneira de te lembrares o que cada bocado de c√≥digo faz. Usamos os coment√°rios para esse efeito. Um coment√°rio √© semelhante a isto:\n ` # Isto √© um coment√°rio`. Tudo o que aparece depois do # ser√° invis√≠vel para o c√≥digo."
#    commands:
#    -   name: "Coment√°rio"
#        explanation: "Podemos colocar coment√°rios onde quisermos."
#        example: "# Isto √© um coment√°rio"
#        demo_code: |-
#            # Este programa escreve Ol√°!
#            # Este programa foi feito em Hedy
#            # N√£o faz mais nada excepto escrever Ol√°!
#            print('Ol√°!')
#20:
#    start_code: |-
#        fruta = ['ma√ß√£', 'banana', 'cereja']
#        for i in range(1, 3):
#            print(fruta[i])
#    intro_text: "Podemos tamb√©m ver tudo na lista com o ciclo `for`. Como existem tr√™s coisas na lista, passamos o ciclo de 1 at√© 3. Agora escrevemos tudo durante o ciclo."
#    commands:
#    -   name: "Tamanho da lista"
#        explanation: "Com `length` podemos saber o tamanho da lista. A lista no exemplo tem tamanho 3, porque existem tr√™s coisas na lista."
#        example: "length(lista)"
#        demo_code: |-
#            fruta = ['ma√ß√£', 'banana', 'cereja']
#            print('tamanho da lista √© ' length(fruta))
#            for i in range(1, length(fruta)):
#                print(fruta[i])
#21:
#    start_code: |-
#        print('Quanto √© 5+3?')
#        resposta = 5+3
#        print('Resposta √© agora:')
#        print(resposta)
#        if resposta == 8:
#            print('Est√° certo!')
#        else:
#            print('Oh n√£o, est√° errado!')
#    intro_text: "Agora vamos mudar o is para `=` e `==`. Usamos `=` se queremos atribuir um determinado valor a uma vari√°vel. Se queremos atribuir 8 √† vari√°vel chamada resposta, ent√£o colocamos resposta = 8. `==` utilizamos quando queremos saber se duas coisas s√£o iguais entre elas."
#    commands:
#    -   name: "Compara"
#        explanation: "Se queremos comparar, usamos ==. 5+3 == 8 verifica se 5+3 √© igual a 8"
#        example: "Por exemplo: 5+3 == 8"
#        demo_code: |-
#            if 5+3 == 8:
#                print('5+3 √© de facto 8')
#            else:
#                print('Isto n√£o ser√° escrito, porque 5+3 √© 8!')
#    -   name: "Atribui valor"
#        explanation: "Se pretendemos dizer que uma vari√°vel chamada resposta √© 8, ent√£o colocamos resposta = 8."
#        example: "Por exemplo: resposta = 8"
#        demo_code: |-
#            print('Quanto √© 5+3?')
#            resposta = 5+3
#            print('Resposta √© agora:')
#            print(resposta)
#    -   name: "Compara e atribui um valor"
#        explanation: "Se vamos comparar dois valores, utilizamos `==`. Se formos atribuir um valor a uma vari√°vel, usamos `=`. "
#        example: "Por exemplo: 5+3 == 8, resposta = 8"
#        demo_code: |-
#            print('Quanto √© 5+3?')
#            resposta = 5+3
#            print('Resposta √© agora:')
#            print(resposta)
#            if resposta == 8:
#                print('Est√° certo!')
#            else:
#                print('N√£o, est√° errado!')
#12-old:
#    start_code: |-
#        idade is input('Quantos anos tens?')
#        print('Ent√£o j√° tivestes estas idades:')
#        for i in range(0, idade):
#            print(i)
#    intro_text: "Vamos utilizar par√™nteses curvos e vamos mudar `ask`! Vamos alterar `ask` para `input`! Com `print`, `input` e `for` vamos passar a usar agora par√™nteses curvos."
#    commands:
#    -   explanation: "Vamos utilizar par√™nteses com `print` agora!"
#        example: "Por exemplo: print('Ol√° mundo!')"
#        demo_code: "print('Ol√° mundo!')"
#    -   explanation: "Removemos o `ask` a agora chamamos-lhe `input`. Tamb√©m vamos passar a usar par√™nteses."
#        example: "Por exemplo: nome is input('Como te chamas?')"
#        demo_code: |-
#            nome is input('Como te chamas?')
#            print('Ent√£o o teu nome √© ' nome)
#    -   explanation: "Agora colocamos os n√∫meros entre par√™nteses nos ciclos `for`. for i in range (0, 10):"
#        example: "Por exemplo: for i in range(0, 10):"
#        demo_code: |-
#            for i in range(0, 10):
#                print(i)
#            print('Preparados ou n√£o, aqui vou eu!')
    example_code: "```\nname = ask 'what is your name?'\nage = ask 'what is your age?'\nif name is 'Hedy' and age is 2\n    print 'You are the real Hedy!'\n```\n"
14:
    start_code: |-
        idade = ask 'Quantos anos tens?'
        if idade < 13
            print '√âs mais novo a do que eu!'
        else
            print '√âs mais velho a do que eu!'
    intro_text: "Vamos aprender mais coisas novas! Podes j√° ter aprendido sobre elas na Matem√°tica, o `<` e `>`. O `<` verifica se o primeiro n√∫mero √© menor que o segundo, como `4 < 5`. O `>` verifica se o primeiro n√∫mero √© maior que o segundo, como `6 > 5`."
    commands:
    -   name: "Menor"
        explanation: "Usamos o `<` para verificar se o primeiro n√∫mero √© menor que o segundo n√∫mero. Por exemplo, se queremos saber se uma vari√°vel √© menor que 15, usamos `variavel < 15`"
        example: "Por exemplo: idade < 13"
        demo_code: |-
            idade = ask 'Quantos anos tens?'
            if idade < 13
                print '√âs mais novo a do que eu!'
    -   name: "Maior"
        explanation: "Usamos `>` para verificar se o primeiro n√∫mero √© maior que o segundo n√∫mero. Por exemplo, se queres saber se uma vari√°vel √© maior do que 15, usamos, utilizamos `variavel > 15`."
        example: "Por exemplo: idade > 13"
        demo_code: |-
            idade = ask 'Quantos anos tens?'
            if idade > 13
                print '√âs mais velho a do que eu!'

    -   name: Equal
        explanation: We use the `==` to check if two things are the same.
        example: 'For example: answer == 25'
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer == 25\n    {print} 'That {is} correct!'"
    -   name: Not equal
        explanation: 'We use the `!=` to check if two things are not the same. '
        example: 'For example: answer != 25'
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer != 25\n    {print} 'That is not correct!'"
    -   example: 'For example: age <= 12'
        explanation: We use the `<=` to check if the first number is smaller than or equal to the second number.
        name: Smaller {or} equal
        demo_code: "age = {ask} 'How old are you?'\n{if} age <= 12\n    {print} 'You are younger than me!'"
    -   name: Bigger or equal
        explanation: We use the `>=` to check if the first number is bigger than or equal to the second number.
        example: 'For example: age >= 14'
        demo_code: "age = {ask} 'How old are you?'\n{if} age >= 14\n    {print} 'You are older than me!'"
    example_code: "## Example Hedy Code\n```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n"
    intro_text_2: "From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:\n"
    example_code_2: "```\nname = {ask} 'What is your name?'\n{if} name == 'Hedy'\n    {print} 'You are coo!'\n```\n"
    intro_text_3: "You can also compare if something is *not* equal to something else using `!=` like this:\n"
    example_code_3: "```\nname = {ask} 'What is your name?'\n{if} name != 'Hedy'\n    {print} 'You are not Hedy'\n```\n"
15:
    start_code: |-
        resultado = 0
        while resultado != 25
            resultado = ask 'Quanto √© 5 vezes 5?'
        print 'Foi dada a resposta correcta.'
    intro_text: "Vamos aprender um ciclo novo, o ciclo `while`! Continuamos o ciclo enquanto a instru√ß√£o for verdadeira/v√°lida! Portanto, no exemplo de c√≥digo, continuamos at√© ser dada a resposta certa. Se a resposta correcta nunca for dada, o ciclo nunca acaba!"
    commands:
    -   name: "Booleano while"
        explanation: "Podemos usar o ciclo `while` com `Verdadeiro` e `Falso`."
        example: "Exemplo: while resposta_certa is Falso"
        demo_code: |-
            resultado = 0
            while resultado != 25
                resultado = ask 'Quanto √© 5 vezes 5?'
            print 'Foi dada a resposta correcta.'
    -   name: "while menor"
        explanation: "Tamb√©m podemos utilizar o ciclo `while` com `<` e `>`. Mas cuidado, tens de mudar o n√∫mero para que ciclo termine. Fazemos isso agora com contagem = contagem + 1."
        example: "Por exemplo: while count < 3"
        demo_code: |-
            contagem = 1
            while contagem < 3
                print 'Fazemos isto mais ' 3 - contagem ' vezes.'
                contagem = contagem + 1
            print 'Acabamos!'

    example_code: "## Example Hedy code\n```\nanswer = 0\nwhile answer != 25\n    answer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n```\n"
16:
    start_code: |-
        fruta = ['ma√ß√£', 'banana', 'cereja']
        print fruta 
    intro_text: "Vamos colocar as listas entre par√™nteses rectos! Tamb√©m vamos ter de colocar cada elemento da lista entre aspas simples ('). "
    commands:
    -   explanation: "Vamos colocar as listas entre par√™nteses rectos! Tamb√©m vamos ter de colocar cada elemento da lista entre aspas simples (')."
        example: "Por exemplo: fruta = ['ma√ß√£', 'banana', 'cereja']"
        demo_code: |-
            fruta = ['ma√ß√£', 'banana', 'cereja']
            print fruta 
        name: square brackets
    -   name: "Obt√©m um elemento da lista."
        explanation: "Para obter um elemento da lista usamos [n√∫mero], pelo que, fruta[1] significa: obt√©m a primeira fruta da lista!"
        example: "Por exemplo: primeirafruta = fruta[1]"
        demo_code: |-
            fruta = ['banana', 'ma√ß√£', 'cereja']
            primeirafruta = fruta[1]
            print primeirafruta 
    -   name: "Obt√©m um elemento aleat√≥rio da lista."
        explanation: "Para obter um elemento aleat√≥rio da lista usamos [random], pelo que, fruta[random] significa: obt√©m uma fruta ao calhas da lista!"
        example: "For example: qualquer_fruta = fruit[random]"
        demo_code: |-
            fruta = ['banana', 'ma√ß√£', 'cereja']
            qualquer_fruta = fruta[random]
            print qualquer_fruta
    example_code: "## Example Hedy Code\n```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
17:
    start_code: |-
        for i in range 1 to 10:
            print i
        print 'Preparados ou n√£o, aqui vou eu!'
    intro_text: "Agora vamos mudar um pouco as coisas com a indenta√ß√£o. Cada vez que precisarmos de indenta√ß√£o, temos de colocar `:` na linha antes da indenta√ß√£o."
    commands:
    -   explanation: "Quando usamos um `for`, temos de colocar `:` a seguir √† instru√ß√£o `for`!"
        example: "for i in range 1 to 10:"
        demo_code: |-
            for i in range 1 to 12:
                print i
            print 'Preparados ou n√£o, aqui vou eu!'
        name: '{elif}'
    -   explanation: "Precisamos de fazer a mesma coisa para todas as intru√ß√µes `if`."
        example: "if cor is verde:'"
        demo_code: |-
            cor = ask 'Qual √© a tua cor favorita?'
            if cor is 'verde':
                print 'A cor √© verde.'
            else:
                print 'A cor n√£o √© verde.'
        name: '{print}'
    -   explanation: "Vamos-te mostrar um novo comando que podes usar: `elif`. `elif` significa \"else if\". Come√ßamos por verificar se o `if` √© verdadeiro, se n√£o for esse o caso, verificamos em seguida o `elif`, e se esse tamb√©m n√£o for verdadeiro, avan√ßamos para o `else`."
        example: "elif a is 5:"
        demo_code: |-
            a = 2
            if a is 1:
                print 'a √© 1'
            elif a is 2:
                print 'a √© 2'
            else:
                print 'a n√£o √© 1 nem 2'
        name: '{if}'
18:
    intro_text: "We arrived at real pythoncode! That means we need to use parentheses with {print} and {range} from now on.\nThat looks like this:\n```\n{print}('my name is Hedy!')\n```\nIf you want to print more thant one items, you need to separate them by commas.\n```\nnaam = 'Hedy'\n{print}('my name is ', naam)\n```"
    commands:
    -   name: '{print}'
        explanation: With `{print}` you need to use parentheses
        example: '{print}'
        demo_code: "{print}('hi!')"
    -   explanation: With `{print}` you need to use parentheses and commas if you {print} more items
        example: '{print}'
        demo_code: "naam = 'Hedy'\n{print}('my name is ', naam)"
        name: '{print} with var'
    start_code: "naam = 'Hedy'\n{print}('My name is ', naam)"
