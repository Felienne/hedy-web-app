1:
    intro_text: |
        欢迎来到海迪!你可以使用在第1级学习内容中的命令print, ask 和 echo.

        在左边的命令栏里，你可以看到第1级学习内容中的所有的命令.

        按下蓝色的按钮, 代码就会为你打出来!

        使用左边编程栏下的绿色 “运行代码” 按钮, 你可以尝试运行这段代码.

        不知道自己想要创建些什么？你也许能在下面的内容里面找到灵感. 

    start_code: "print 你好世界!"
    commands:
    -   explanation: "Print的意思是打印,用print可以打印一些东西."
        example: "例如: print 你好欢迎来到Hedy!"
        demo_code: "print 你好欢迎来到 Hedy!"
        name: '{print}'
    -   explanation: "Ask的意思是提问, 用ask可以提出一些问题."
        example: "例如: ask 你最喜欢的颜色是什么?"
        demo_code: "ask 你最喜欢的颜色是什么?"
        name: '{ask}'
    -   explanation: "echo的意思是回声, 用echo可以重复执行某一任务."
        example: "例如: echo 你最喜欢的颜色是什么 "
        demo_code: |-
            ask 你最喜欢的颜色是什么?
            echo 你最喜欢的颜色是什么 
        name: '{echo}'
    -   name: '{print} emojis'
        explanation: print an emoji with `{print}`
        example: 'Example: {print} 🙋‍ 🌍 ❗'
        demo_code: '{print} 🙋 🌍 ❗'
    -   name: '{forward}'
        explanation: Draw a line with `{forward}`.
        example: 'Example: {forward} 100'
        demo_code: '{forward} 100'
    -   example: 'Example: {turn}'
        demo_code: "{forward} 25\n{turn} left\n{forward} 25\n{turn} right"
        name: '{turn}'
        explanation: turn the drawing turtle with `{turn}`
    example_code: "## Example code\n```\n{print} Hello!\n{print} Welcome to Hedy!\n```\n"
    intro_text_2: "You can also ask for input and repeat it back with an `{echo}` command.\nTry the code to your left again.\n\nDon't know what to create? In the next tabs you will find ideas for programs to build.\n"
    example_code_2: "## Example code\n```\n{ask} What is your name?\n{echo} hello\n```\n"
2:
    intro_text: |
        在第2级学习内容中,我们会学习新的内容. 你可以用`is`来命名一个词.

        如果你使用代码 `name is 海迪`, 你可以在程序的任何地方使用name这个词,并且name这个词会被'海迪'这个词所取代.

        注意: ask已被改变, 你可以命名这个问题的答案并保存, 就像这样:

        ```
        answer is ask 你的名字是什么?
        ```

        `print` 的使用方法仍旧如同在第1级中一样, 不过你不再需要`echo`了.
    start_code: "print 你好世界!"
    commands:
    -   explanation: "`is`的意思是\"是\", 用来给一个词命名以便在程序中使用"
        example: "Example: name is 海迪."
        demo_code: |-
            name is 海迪
            print 欢迎 name
        name: '{is}'
    -   explanation: "Ask的意思是提问, 用`ask`可以提出一些问题. 注意! 现在你需要用 `is`给问题的答案命名."
        example: "例如: color is ask 你最喜欢的颜色是什么?"
        demo_code: |-
            color is ask 你最喜欢的颜色是什么?
            print color 是我最喜欢的颜色!
        name: '{ask}'
    -   name: '{sleep}'
        explanation: Let Hedy pause for a (couple of) second(s).
        example: 'Example: {sleep} 2 '
        demo_code: "{print} Let me think for one second...\n{sleep}\n{print} Hmm.. I need 3 more seconds...\n{sleep} 3\n{print} Eureka! Ive got it!"
    -   name: is - turtle
        demo_code: "angle {is} 90\n{turn} angle\n{forward} 100"
        explanation: Give a number a name using `{is}`. You can choose the name yourself.
        example: 'Example: angle {is} 90'
3:
    intro_text: |
        在第3级你也可以创建一个列表. 你可以让计算机从列表中随机选择一些东西. 你可以用`at random`来完成这个任务.

        ```
        animals is 狗, 猫, 袋鼠
        print animals at random
        ```

        你可以在左边的命令栏里面找到第2级学习内容的所有命令. 还有作业题目栏.
    start_code: "print 你好世界!"
    commands:
    -   explanation: "用`at` and `random`可以从一组词汇中随机选择一个词"
        example: "例如: animals is 狗, 猫, 袋鼠."
        demo_code: |-
            animals is 狗, 猫, 袋鼠
            print animals at random
        name: choose_random
    -   name: '{add}'
        explanation: add an item to a list
        example: 'Example: {add} dog {to_list} animals'
        demo_code: "animals {is} cow, cat\n{add} dog {to_list} animals"
    -   name: '{remove}'
        explanation: remove an item from a list
        example: 'Example: {remove} dog {from} animals'
        demo_code: "animals {is} cat, dog, cow\n{remove} dog {from} animals"
4:
    start_code: "print '你好世界'"
    intro_text: |
        在第3级目标中`ask`的使用方法仍旧如同在第2级中一样, 但是现在 `print` 的使用方法有所不同了.

         你需要在你想要打印的内容前后两边加上单引号.

         这很有用,因为现在你可以打印所有你想要打印的词汇了. 你也可以打印那些用 `is`命名并保存的词汇.

         大多数编程语言在打印时也使用引号，所以我们也距离真正的编程更近了一步!

         ## 作业题会越来越难
         你会发现左边的命令栏又出现了, 而作业则标题栏下方. 现在的作业题会逐渐变得越来越难.
         所以最好从左边的"故事"开始, 然后按照左往右的顺序做题, 逐渐接受越来越大的挑战.
    commands:
    -   explanation: "Print的意思是打印, 可以用来打印单引号里面的内容"
        example: "例如: print 你好欢迎来到海迪.'"
        demo_code: "print '你好欢迎来到海迪.'"
        name: '{print}'
    -   explanation: "给一段文本命名并不带单引号打印`print` 出这段文本"
        example: "例如: name is 海迪."
        demo_code: |-
            name is 海迪
            print '我的名字是 ' name
        name: '{is}'
    -   explanation: "Ask的意思是提问, 用 `ask`提出问题."
        example: "例如: color is ask '你最喜欢的颜色是什么?'"
        demo_code: |-
            color is ask '你最喜欢的颜色是什么?'
            print color ' 是你最喜欢的颜色!'
        name: '{ask}'
5:
    start_code: |-
        name is ask 你的名字是什么?
        if name is 海迪 print '酷!' else print '呵呵'
    intro_text: |
        `ask` 和` print` 的使用方法和在第3级目标里面一样.

         在第4级目标里面增加了新的内容,  `if`条件语句! 用`if` 你可以在两个不同的选项中进行选择.

         ## 海迪代码范例
         ```
         name is ask 你的名字是什么?
         if name is 海迪 print '赞' else print '嘁!'
         ```

         如果你输入的名字是'海迪'那么这段代码运行的结果就是打印出'赞'这个字. 如果你输入的名字不是海迪而是其他词汇,那么这段代码运行的结果就是打印出'嘁'这个字.

         ## 作业题越来越难了

         第4级学习内容中作业题的难度也是逐渐增加的,所以最好按照左往右的顺序做题.
    commands:
    -   explanation: "Print的意思是打印, 用print打印的内容前后两边都要用单引号标注清楚"
        example: "例如: print '你好欢迎来到海迪.'"
        demo_code: "print '你好欢迎来到海迪.'"
        name: '{print}'
    -   explanation: "Ask的意思是提问，用`ask`可以提出问题."
        example: "例如: color is ask '你最喜欢的颜色是什么?'"
        demo_code: |-
            color is ask '你最喜欢的颜色是什么?'
            print color ' 是你最喜欢的颜色!'
        name: '{ask}'
    -   explanation: "用`if-else`条件语句进行选择"
        example: "例如: if color is 绿色 print '漂亮!' else print '呵呵'"
        demo_code: |-
            color is ask '你最喜欢的颜色是什么?'
            if color is 绿色 print '漂亮!' else print '呵呵'
        name: '{if}'
    -   name: '{if} with turtle'
        explanation: Make a choice with `{if}`
        example: 'Example: {if} answer {is} far {forward} 100 {else} {forward} 5'
        demo_code: "answer {is} {ask} 'How far should I walk?'\n{if} answer {is} far {forward} 100 {else} {forward} 5"
    -   name: '{in}'
        explanation: Check elements with `{in}`
        example: "Example: {if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
        demo_code: "pretty_colors {is} green, yellow\ncolor {is} {ask} 'What {is} your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
6:
    start_code: "print '5乘以5 is ' 5 * 5"
    intro_text: |
        ask提问, print打印, if-else条件语句和r循环语句在这一级目标中的使用方法与在第4级和第5级目标里面一样.
        但是第6级学习内容里面增加了一些新的内容, 现在你可以计算啦.

        在第6级的学习内容里面增加了新的代码,你现在可以用代码进行计算了.

        加法运算很简单, 和你在数学课上学的加法运算的知识很类似, 例如''5加5记做 `5 + 5`. 减法运算也很简单, 例如'5减5'记做 `5 - 5`.

        乘法运算有点不同, 因为键盘上面没有乘法符号. 你可以找一下, 确实没有!
        这就是为什么我们要把数字8上面的星号当做乘法符号: `5 * 5`. 读作5乘以5,你会很容易记住它.
        ## 海迪代码范例
        ```
        print '5加5等于 ' 5 + 5
        print '5减5等于 ' 5 - 5
        print '5乘以5等于 ' 5 * 5
        ```
    commands:
    -   explanation: "Print的意思是打印，现在打印内容的前后两边都需要用单引号标注清楚."
        example: "例如: print '5乘以5等于 ' 5 * 5"
        demo_code: "print '5乘以5等于 ' 5 * 5"
        name: '{print}'
    -   explanation: "用ask提问计算题的答案然后用if-else条件语句检查答案是否正确。."
        example: "例如: answer = ask 10加10等于几?"
        demo_code: |-
            answer = ask '10加10等于几?'
            if answer is 20 print '做得好!' else print '糟糕,算错啦'
        name: '{ask}'
    -   name: "`ask` and `if` turtle"
        explanation: "Ask the user how many angles they want"
        example: "Example: angles = ask 'How many angles?'"
        demo_code: |-
            angles = ask 'How many angles?'
            angle = 360 / angles
            forward 50
7:
    start_code: "repeat 3 times print '海迪很好玩!'"
    intro_text: |
        `ask`, `print` 和 `if-else条件语句` 的使用方法和在第4级里面一样.
        但是在第5级的学习内容里面增加了repeat循环命令. Repeat循环语句可以用来多次执行一段代码.
        ## Voorbeeld 海迪 代码
        ```
        repeat 3 times print '海迪很好玩!'
        ```
    commands:
    -   explanation: "Print的意思是打印，可以用print打印的内容前后两边都要用单引号标注清楚."
        example: "例如: print '你好欢迎来到海迪.'"
        demo_code: "print '你好欢迎来到海迪.'"
        name: '{print}'
    -   explanation: "Ask的意思是提问，用`ask`提出问题."
        example: "例如: color = ask 你最喜欢的颜色是什么?"
        demo_code: |-
            color = ask '你最喜欢的颜色是什么?'
            print color ' is your favorite!'
        name: '{ask}'
    -   explanation: "Make a choice with `if`"
        example: "Example: if color is green print 'pretty!' else print 'meh'"
        demo_code: |-
            color = ask '你最喜欢的颜色是什么?'
            if color is green print 'pretty!' else print 'meh'
        name: '{if}'
    -   explanation: "`repeat` and `if` combined"
        example: "Example: if color is green repeat 3 times print 'pretty!' else repeat 5 times print 'meh'"
        demo_code: |-
            color = ask '你最喜欢的颜色是什么?'
            if color is 绿色 repeat 3 times print '漂亮!' else repeat 5 times print '呵呵'

        name: '{repeat} - turtle'
8:
    start_code: |-
        repeat 5 times
            print '大家好'
            print '这段话将被打印5次'
    intro_text: |
        `ask` 和 `print` 的使用方法依旧保持不变. 但是 `if-else`条件语句 和 `repeat`循环语句已经改变了!
        你现在可以执行一组代码, 但你必须使用缩进.
        这意味着必须首行缩进四个空格. 当你想要创建只有一行的代码块的时候这一点也适用.

        ## 海迪代码范例
        ```
        repeat 5 times
            print '大家好'
            print '这一切都要重复5次'
        ```
    commands:
    -   explanation: "用print打印一些内容. 记得在打印内容的前后两边都用单引号标注清楚."
        example: "Example: print '5乘以5等于 ' 5 * 5"
        demo_code: "print '5乘以5等于 ' 5 * 5"
        name: '{print}'
    -   explanation: "使用ask提问加法运算的答案然后检查答案是否正确. 我们现在可以打印两行代码了."
        example: "例如: answer = ask 5加5等于几?"
        demo_code: |-
            answer = ask '5加5等于几?'
            if answer is 10
                print '做得好!'
                print '的确, 答案就是 ' answer
            else
                print '糟糕!'
                print '答案就是 10'
        name: '{ask}'
    -   name: '`{repeat}` with turtle'
        example: 'Example: draw a square'
        explanation: '{repeat} multiple lines'
        demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
9:
    start_code: |-
        repeat 3 times
            food = ask 'What do you want?'
            if food is 'pizza'
                print 'nice!'
            else
                print 'pizza is better'
    intro_text: |
        In this level you can not only use multiple lines with `if` and `repeat`, but you can also put them together!
        In the example you see an `if` command within a `repeat` command. It is also allowed the other way around, and an `if` is also allowed in an `if` and a `repeat` in a `repeat`.
        Give it a try!

        ## Example Hedy code
        ```
        repeat 3 times
            food = ask 'What do you want?'
            if food is 'pizza'
                print 'nice!'
            else
                print 'pizza is better'
        ```

    commands:
    -   name: "`if` with multiple lines"
        explanation: "The answer of a sum of questions with 'ask' and see if it is correct. Now we print out two lines."
        example: "Example: answer = ask 'What is 20 plus 20?'"
        demo_code: |-
            answer = ask 'What is 20 plus 20?'
            if answer is 20
                print 'Well done!!'
                print 'The answer is indeed' answer
            else
                print 'Wrong'
                print 'The answer is 20'
    -   name: "`repeat` and turtle"
        explanation: "Repeat multiple lines"
        example: "Example: create a square"
        demo_code: |-
            repeat 4 times
                turn 90
                forward 50
10:
    start_code: |-
        animals is dog, cat, blobfish
        for animal in animals
          print 'I love ' animal
    intro_text: |
        In this level we learn a new code called `for`. With `for` you can make a list and use all elements.
        `for` creates a block, like `repeat` and `if` so all lines in the block need to start with spaces.

        ## Example Hedy code
        ```
        animals is dog, cat, blobfish
        for animal in animals
          print 'I love ' animal
        ```
    commands:
    -   name: "print"
        explanation: "Print something. Remember to use a quotation mark for literal printing."
        example: "Example: print '5 times 5 is ' 5 * 5"
        demo_code: "print '5 times 5 is ' 5 * 5"
    -   name: "for with a list"
        explanation: "print all things in a list "
        example: "Example: for dier in dieren"
        demo_code: |-
            animals is dog, cat, blobfish
            for animal in animals
              print 'I love ' animal
11:
    start_code: |-
        for i in range 1 to 10
            print i
        print 'Ready or not, here I come!'
    intro_text: "`print` (打印)的使用方法照旧不变但是`repeat` (重复或循环)现在被`for`(循环)所代替! 你要用 `for i in range 1 to 5`, 代替`repeat 5 times`. 你也可以在你的程序中使用 `i`! 记住在`for`和 `if` 语句后使用缩进(这意味着以四个空格开始一个句子)"
    commands:
    -   explanation: "我们用`for`循环语句代替`repeat`循环语句"
        example: "for i in range 1 to 10"
        demo_code: |
            for i in range 1 to 10
              print i
            print '无论你是否准备好了，我都会来的!'

        name: '{for} loop'
    -   example: "Example: answer = {ask} 'What is 5 plus 5?'"
        name: '{ask}'
        explanation: ask for the answer to a sum and check if it is correct. We can now print 2 lines.
        demo_code: "answer = {ask} 'What is 5 plus 5?'\n{if} answer {is} 10\n    {print} 'Well done!'\n    {print} 'Indeed, the answer was ' answer\nelse\n    {print} 'Oops!'\n    {print} 'The answer is 10'"
13:
    start_code: |-
        name = ask 'what is your name?'
        leeftijd = ask 'what is your age?'
        if name is 'Hedy' and age is 2
            print 'You are the real Hedy!'
    intro_text: "我们将要学习 `and` (且)和 `or`(或)! 如果你想判断两个语句，你不需要使用两个if，但可以使用`and`(且)和`or`(或). 如果你要用`and`那么'and`的左边和右边的两个语句都需要为真. 我们也可以使用`or'那么'or`的左边和右边的两个语句中只需要有一个语句是正确的."
    commands:
    -   name: "And(且)"
        explanation: "'and`的左边和右边的两个语句都必须是正确的."
        example: "if 3+2 is 5 and 2+2 is 4"
        demo_code: |-
            answer1 = ask '3+2等于几?'
            answer2 = ask '2+2等于几?'
            if answer1 is 5 and answer2 is 4
                print '这两个答案都正确!'
            else
                print '至少有一个答案是错的!'
    -   name: "Or(或)"
        explanation: " 在`or`(或)的左右两边两个语句中, 至少有一个是正确的，如果两个都是正确的，也是可以的."
        example: "if 3+2 is 5 or 2+2 is 4"
        demo_code: |-
            answer1 = ask '3+2等于几?'
            answer2 = ask '2+2等于几?'
            if answer1 is 5 or answer2 is 4
                print '至少有一个答案是正确的!'
            else
                print '这两个答案都是错的!'
#16:
#    start_code: |-
#        # 这是一个要问几个数学问题的程序
#        for i in range(1,10):
#            # 我们将要问一些有关五五乘法表的问题
#            answer is input('' i ' 乘以 5等于几?')
#            # 我们判断答案是否正确
#            correct_answer is i * 5
#            if answer is correct_answer:
#                print(answer ' 是正确的')
#            else:
#                print('错了, 应该是: ' i*5)
#    intro_text: "当你在编写更大的程序时, 你将需要找到一种方法来记住每一段代码的作用. 我们使用 comments(注释)来实现这一点. 注释的格式如下:\n ` # 这是一个注释`. 在 # 后面的所有内容对代码来说都是不可见的."
#    commands:
#    -   name: "Comment注释"
#        explanation: "我们可以把注释放在任何我们想放的地方."
#        example: "# 这是一个注释"
#        demo_code: |-
#            # 这段代码是为了打印你好
#            # 这是用海迪编写的
#            # 除了打印 "你好"，它什么也没做
#            print('你好!')
#
14:
    start_code: |-
        age = ask '你今年几岁了?'
        if age < 13
            print '你比我年纪小!'
        else
            print '你比我年纪大!'
    intro_text: "我们将要学习更多新的内容! 你可能在数学课上已经学过这些内容了, 那就是小于号 `<` 和大于号 `>`. 小于号 `<` 用来判断第一个数字是否小于第二个数字, 比如 `4 < 5`. 大于号`>` 用来判断c第一个数字是否大于第二个数字, 比如 `6 > 5`."
    commands:
    -   name: "Smaller 小于"
        explanation: "我们用小于号 `<` 用来判断第一个数字是否小于第二个数字. 例如，如果我们想要知道变量(variable)是否小于15，那么我们就可以用 `variable < 15`"
        example: "例如: age < 13"
        demo_code: |-
            age = ask '你今年几岁了?'
            if age < 13
                print '你比我年纪小!'
    -   name: "Bigger 大于"
        explanation: "我们用大于号`>` 用来判断第一个数字是否大于第二个数字. 例如如果我们想要知道变量(variable)是否大于15, 那么我就可以用 `variable > 15`"
        example: "例如: age > 13"
        demo_code: |-
            age = ask '你今年几岁了?'
            if age > 13
                print '你比我年纪大!'
    -   name: Equal
        explanation: We use the `==` to check if two things are the same.
        example: 'For example: answer == 25'
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer == 25\n    {print} 'That {is} correct!'"
    -   name: Not equal
        example: 'For example: answer != 25'
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer != 25\n    {print} 'That is not correct!'"
        explanation: 'We use the `!=` to check if two things are not the same. '
    -   example: 'For example: age <= 12'
        demo_code: "age = {ask} 'How old are you?'\n{if} age <= 12\n    {print} 'You are younger than me!'"
        name: Smaller {or} equal
        explanation: We use the `<=` to check if the first number is smaller than or equal to the second number.
    -   name: Bigger or equal
        explanation: We use the `>=` to check if the first number is bigger than or equal to the second number.
        example: 'For example: age >= 14'
        demo_code: "age = {ask} 'How old are you?'\n{if} age >= 14\n    {print} 'You are older than me!'"
15:
    start_code: |-
        answer = 0
        while answer != 25
            answer = ask '5乘以5等于几?'
        print '已经给出了一个很好的答案'
    intro_text: "我们将要学习一个新的循环, 就是`while` 循环! 只要语句为真/有效，我们就不停的执行循环语句! 因此在范例代码中, 我们一直不停的执行循环语句直到一个正确的答案被给出. 如果正确答案一直没有被给出, 这个循环语句就不会结束!"
    commands:
    -   name: "布尔 while循环语句"
        explanation: "我们可以将`while` 循环语句和`True` 和 `False`一起使用"
        example: "例如: while correct_answer is False"
        demo_code: |-
            answer = 0
            while answer != 25
                answer = ask '5乘以5等于几?'
            print '已经给出了一个很好的答案'
    -   name: "Smaller while (直到小于)"
        explanation: "我们也可以将`while` 循环语句和小于号 `<` 和大于号 `>`一起使用. 注意, 你需要改变数字以便循环结束. 我们现在是用count = count + 1 来达到这个目的."
        example: "例如: while count < 3"
        demo_code: |-
            count = 1
            while count < 3
                print '我们计算 ' 3 - count ' 的次数更多了'
                count = count + 1
            print '我们完成啦'
16:
    start_code: |-
        fruit = ['苹果', '香蕉', '樱桃']
        print fruit 
    intro_text: "我们现在要把列表(list)的内容用中括号括起来！我们现在也需要把列表里面的每一个元素都用单引号(')标示清楚."
    commands:
    -   explanation: "我们现在要把列表(list)的内容用中括号括起来！我们现在也需要把列表里面的每一个元素都用单引号(')标示清楚."
        example: "例如: fruit = ['苹果', '香蕉', '樱桃']"
        demo_code: |-
            fruit = ['苹果', '香蕉', '樱桃']
            print fruit 
        name: square brackets
    -   name: "从一个列表中检索元素"
        explanation: "我们用[数字]从一个列表中检索元素，因此 fruit[1] 的意思就是从列表fruit中检索第一个元素t!"
        example: "例如: firstfruit = fruit[1]"
        demo_code: |-
            fruit = ['香蕉', '苹果', '樱桃']
            firstfruit = fruit[1]
            print firstfruit 
    -   name: "从一个列表中随机选择元素"
        explanation: "我们用[random] 从一个列表中随机选择元素，因此fruit[random]的意思是从列表fruit中随机选择一个水果!"
        example: "例如: random_fruit = fruit[random]"
        demo_code: |-
            fruit = ['香蕉', '苹果', '樱桃']
            random_fruit = fruit[random]
            print random_fruit
17:
    start_code: |-
        for i in range 1 to 10:
            print i
        print '无论你是否准备好了，我都会来的!'
    intro_text: "现在我们将对缩进进行一些改变. 每当我们需要用缩进时, 我们都需要在缩进前的那一行使用冒号`:` ."
    commands:
    -   explanation: "当我们使用`for`循环语句的时候， 我们需要在 `for`循环语句后面加一个冒号`:` !"
        example: "for i in range 1 to 10:"
        demo_code: |-
            for i in range 1 to 12:
                print i
            print '无论你是否准备好了，我都会来的!'
        name: '{elif}'
    -   explanation: "我们需要对所有的 `if`条件语句做同样的处理."
        example: "if colour is 绿色:'"
        demo_code: |-
            colour = '绿色'
            if colour is 绿色:
                print 'The colour 是绿色'
            else:
                print 'The colour 不是绿色'
        name: '{print}'
    -   explanation: "我们将向你展示一个允许你使用的新命令: `elif`. `elif` 的意思是否则如果 \"else if\". 我们首先判断 `if`条件是否正确, 如果这个条件不正确, 那我们就判断 `elif` 条件是否正确，如果这个条件也不正确, 那我们就执行 `else`语句."
        example: "elif a is 5:"
        demo_code: |-
            a = 2
            if a is 1:
                print 'a 是 1'
            elif a is 2:
                print 'a 是 2'
            else:
                print 'a 既不是1也不是2'
        name: '{if}'
12:
    commands:
    -   name: float directly
        explanation: Decimal numbers
        example: '{print} 2.5 + 2.5'
        demo_code: "{print} 'Calculate away!'\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n"
    -   name: assign text
        explanation: Text with quotation marks after =
        example: name = 'Hedy'
        demo_code: "name = 'Hedy the Robot'\n{print} 'Hello ' name\n"
    -   example: name = 'Hedy'
        name: quotes after {if} comparison
        explanation: Text with quotation marks after {if}
        demo_code: "name = {ask} 'Who are you?'\n{if} name = 'Hedy'\n    {print} 'Hi there!'\n"
    -   name: quotes in list
        explanation: A list with quotation marks
        example: name = 'Hedy', 'Felienne'
        demo_code: "superheroes = 'Iron Man', 'Batman', 'Superman'\n{print} superheroes {at} {random}\n"
    start_code: "{print} 'decimal numbers now need to use a dot'\n{print} 2.5 + 2.5"
    intro_text: "## Decimal numbers\nSo far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.\n```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n## All texts need to be in quotation marks\nFor this level on you will also have to use quotation marks when storing a text with `=`:\n\n```\nname = 'Hedy the Robot'\n{print} 'Hello ' name\n```\n## All items in lists need quotation marks too\nLists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.\nThis allows you to save two words as 1 item on the list, for example 'Iron Man'.\n\n```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n## All text after `{if}` comparisons need quotation marks too\n```\nname = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n## Numbers don't need quotation marks\n{for} numbers, you do not use quotation marks in the `=`:\n```\nscore = 25\n{print} 'You got ' score\n```\n"
