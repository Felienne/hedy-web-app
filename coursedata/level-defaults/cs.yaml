1:
    intro_text: |-
        Vítej v Hedy! V první úrovni můžeš používat příkazy `print`, `ask` a `echo`.

        V levém panelu vidíš všechny příkazy 1. úrovně.

        Stiskni modré tlačítko a kód se napíše sám za tebe!

        Kód si vždy vyzkoušej pomocí zeleného tlačítka `Spustit kód` pod levým programovým polem.

        Nevíš, co dál tvořit? Na dalších záložkách najdeš několik nápadů, kde si můžeš vše lépe procvičit.
    start_code: print Ahoj světe!
    commands:
    -   explanation: Vypiš něco pomocí `print`.
        example: 'Příklad: print Vítej v Hedy!'
        demo_code: print Vítej v Hedy!
    -   explanation: Zeptej se na něco pomocí `ask`.
        example: 'Příklad: ask Jaká je tvoje nejoblíbenější barva?'
        demo_code: ask Jaká je tvoje nejoblíbenější barva?
    -   explanation: Zopakuj něco pomocí `echo`.
        example: 'Příklad: echo Tvoje nejoblíbenější barva tedy je'
        demo_code: |-
            ask Jaká je tvoje nejoblíbenější barva?
            echo Tvoje nejoblíbenější barva tedy je 
2:
    intro_text: |-
        Ve 2. úrovni se naučíme něco nového. Odteď můžeš pojmenovat slovo za pomoci `is`.

        Pokud použiješ příkaz `jmeno is Hedy`, můžeš pak kdekoli v kódu použít jmeno a bude nahrazeno slovem Hedy. Všimni si, že jmeno neobsahuje čárku nad e, Hedy totiž neumí pracovat s názvy s českou diakritikou.

        Poznámka: `ask` se změnilo, odpověď ukládej taky pod jméno, například takto:

        ```
        odpoved is ask Jak se jmenuješ?
        ```

        `print` stále funguje jako v úrovni 1 a už nepotřebuješ `echo`.

        V úrovni 2 můžeš také vytvořit seznam. Počítač umí z tohoto seznamu vybrat náhodného člena, konkrétně pomocí příkazu `at random`.

        Všechny kódy úrovně 2 najdeš v levém panelu. Opět tady jsou i záložky s dalšími zadáními.
    start_code: print Ahoj světe!
    commands:
    -   explanation: Pojmenuj slovo pomocí `is` pro další použití v kódu.
        example: 'Příklad: jmeno is Hedy'
        demo_code: |-
            jmeno is Hedy
            print Ahoj jmeno
    -   explanation: Zeptej se na něco příkazem `ask`. Pozor! Musíš odpověď pojmenovat pomocí `is`.
        example: 'Příklad: barva is ask Jaká je tvoje nejoblíbenější barva?'
        demo_code: |-
            barva is ask Jaká je tvoje nejoblíbenější barva?
            print barva je tvoje nejoblíbenější!
3:
    intro_text: |-
        Ve 2. úrovni se naučíme něco nového. Odteď můžeš pojmenovat slovo za pomoci `is`.

        Pokud použiješ příkaz `jmeno is Hedy`, můžeš pak kdekoli v kódu použít jmeno a bude nahrazeno slovem Hedy. Všimni si, že jmeno neobsahuje čárku nad e, Hedy totiž neumí pracovat s názvy s českou diakritikou.

        Poznámka: `ask` se změnilo, odpověď ukládej taky pod jméno, například takto:

        ```
        odpoved is ask Jak se jmenuješ?
        ```

        `print` stále funguje jako v úrovni 1 a už nepotřebuješ `echo`.

        V úrovni 2 můžeš také vytvořit seznam. Počítač umí z tohoto seznamu vybrat náhodného člena, konkrétně pomocí příkazu `at random`.

        Všechny kódy úrovně 2 najdeš v levém panelu. Opět tady jsou i záložky s dalšími zadáními.
    start_code: print Ahoj světe!
    commands:
    -   explanation: Vyber náhodné slovo ze seznamu pomocí `at` a `random`.
        example: 'Příklad: zvirata is pes, kočka, klokan'
        demo_code: |-
            zvirata is pes, kočka, klokan
            print zvirata at random
4:
    start_code: print 'Ahoj světe!'
    intro_text: |4

        V úrovni 3 se mění `ask` a `print`.

        Text, který chceš vytisknout, teď musíš dát do uvozovek.

        Je to užitečné, protože tak můžeš vytisknout všechna slova, která chceš. A to dokonce včetně slov, pod která jsi něco uložil*a pomocí `is`.

        Většina programovacích jazyků také používá při vypisování uvozovky, takže se dostáváme zase o krok blíže ke skutečnému programování!

        ## Úkoly jsou čím dál, tím obtížnější
        Příkazy najdeš opět vlevo a úkoly v záložkách.
        Obtížnost zadání se stupňuje, proto je nejlepší začít s příběhem vlevo a pokračovat doprava, abys měl*a postupně větší výzvy.
    commands:
    -   explanation: Vypiš text s jednoduchými uvozovkami.
        example: "Příklad: print 'Ahoj, vítej v Hedy!'"
        demo_code: print 'Ahoj, vítej v Hedy!'
    -   explanation: Pojmenuj nějaké slovo a vypiš jej pomocí `print` bez uvozovek.
        example: 'Příklad: jmeno is Hedy'
        demo_code: |-
            jmeno is Hedy
            print 'Jmenuji se ' jmeno
    -   explanation: Zeptej se na něco pomocí `ask`.
        example: 'Příklad: barva is ask Jaká je tvoje nejoblíbenější barva?'
        demo_code: |-
            barva is ask 'Jaká je tvoje nejoblíbenější barva?'
            print barva ' je tvoje nejoblíbenější barva.'
5:
    start_code: |-
        jmeno is ask 'Jak se jmenuješ?'
        if jmeno is Hedy print 'Super!' else print 'Ok, tebe neznám.'
    intro_text: |-
        `ask` a` print` fungují stále jako na úrovni 3.

         V úrovni 4 máme něco nového, je to `if`! Pomocí `if` si můžeš vybrat ze dvou různých možností.

         ## Příklad kódu v Hedy
         ```
         jmeno is ask 'Jak se jmenuješ?'
         if jmeno is Hedy print 'Ahoj!' else print 'Ráda tě poznávám!'
         ```

         Tento kód vypíše Ahoj!, pokud jako jméno zadáš Hedy, a Ráda tě poznávám!, pokud odpovíš něco jiného.

         ## Úkoly jsou čím dál, tím těžší

         Také ve 4. úrovni jsou zadání v záložkách postupně obtížnější. Proto na nich pracuj zleva doprava.
    commands:
    -   explanation: Připomeň si `print` s uvozovkami.
        example: "Příklad: print 'Ahoj, vítej v Hedy!'"
        demo_code: print 'Ahoj, vítej v Hedy!'
    -   explanation: Zopakuj si příkaz `ask`.
        example: "Příklad: barva is ask 'Jaká je tvoje nejoblíbenější barva?'"
        demo_code: |-
            barva is ask 'Jaká je tvoje nejoblíbenější barva?'
            print barva ' je tvoje nejoblíbenější barva.'
    -   explanation: Rozhodni se pomocí `if`.
        example: "Příklad: if barva is růžová print 'Moje taky!' else print 'Fuj'"
        demo_code: |-
            barva is ask 'Jaká je tvoje nejoblíbenější barva?'
            if barva is růžová print 'Moje taky!' else print 'Fuj'
6:
    start_code: print '5 krát 5 je ' 5 * 5
    intro_text: |-
        `ask`,` print` a `if` stále fungují jako na úrovních 4.
         V úrovni 5 je ale něco nového, nyní můžeš také počítat!

         Plus je jednoduché, můžeš ho zapsat jako u matematiky, například `5 + 5`. Mínus funguje stejně, je to `5 - 5`.

         S krát je to trochu jiné, protože na klávesnici pro něj není žádný symbol. Zkus ho najít, opravdu tam není!
         Písmenko x by se nám pletlo se slovy, proto násobíme hvězdičkou: `5 * 5`. Přečti si to jako "5 krát 5", pak si to zapamatujete nejsnáze.
         ## Příklad kódu v Hedy
         ```
         print '5 plus 5 je ' 5 + 5
         print '5 mínus 5 je ' 5 - 5
         print '5 krát 5 je ' 5 * 5
         ```
    commands:
    -   explanation: Zkus si přesný výpis pomocí uvozovek.
        example: "Příklad: print '5 krát 5 je ' 5 * 5"
        demo_code: print '5 krát 5 je ' 5 * 5
    -   explanation: Zadej příklad a ověř výsledek.
        example: "Příklad: vysledek is ask 'Kolik je 10 plus 10?'"
        demo_code: |-
            vysledek is ask 'Kolik je 10 plus 10?'
            if answer is 20 print 'Ano!' else print 'Těsně  vedle...'
    -   name: "`ask` and `if` turtle"
        explanation: "Ask the user how many angles they want"
        example: "Example: angles is ask 'How many angles?'"
        demo_code: |-
            angles is ask 'How many angles?'
            angle is 360 / angles
            forward 50
7:
    start_code: repeat 3 times print 'Hedy je zábavná!'
    intro_text: |-
        `ask`, `print` a `if` fungují stejně jako na úrovni 4 a 6.
        Úroveň 6 však přidává příkaz `repeat`, pomocí kterého lze řádek kódu provést vícekrát.
        ## Příklad kódu v Hedy
        ```
        repeat 3 times print 'Hedy je zábavná!'
        ```
    commands:
    -   explanation: Připomeň si `print` s uvozovkami.
        example: "Příklad: print 'Ahoj, vítej v Hedy!'"
        demo_code: print 'Ahoj, vítej v Hedy!'
    -   explanation: Zopakuj si příkaz `ask`.
        example: 'Příklad: barva is ask Jaká je tvoje nejoblíbenější barva?'
        demo_code: |-
            barva is ask 'Jaká je tvoje nejoblíbenější barva?'
            print barva ' je tvoje nejoblíbenější barva.'
    -   explanation: Rozhodni se pomocí `if`.
        example: "Příklad: if barva is růžová print 'Moje taky!' else print 'Fuj...'"
        demo_code: |-
            barva is ask 'Jaká je tvoje nejoblíbenější barva?'
            if barva is růžová print 'Moje taky!' else print 'Fuj...'
    -   name: "repeat - turtle"
        explanation: "Repeat a line of code with `repeat`."
        example: "Example: repeat 3 times forward 10"
        demo_code: |-
            repeat 3 times forward 10
8:
    start_code: |-
        repeat 5 times
            print 'Ahojte, kamarádi'
            print 'Toto se vypíše 5krát'
    intro_text: |
        `ask` a `print` stále fungují tak, jak je znáš. Ale `if` a `repeat` se změnily!
        Od teď můžeš spouštět víc řádků kódu společně, ale musíš je odsadit.
        To znamená, že na začátek řádku dáš čtyři mezery. To platí i v případě, že chceš vytvořit blok z pouze jednoho řádku.

        ## Příklad kódu v Hedy
        ```
        repeat 5 times
            print 'Ahoj všichni'
            print 'Tohle všechno se 5krát zopakuje'
        ```

    commands:
    -   explanation: Něco vypiš a hlavně nezapomeň na uvozovky!
        example: "Příklad: print '5 krát 5 je ' 5 * 5"
        demo_code: print '5 krát 5 je ' 5 * 5
    -   explanation: Zeptej se na výsledek příkladu a zkontroluj, zda je správný. Teď už můžeš vypsat více řádků.
        example: "Příklad: vysledek is ask 'Kolik je 5 plus 5?'"
        demo_code: |-
            vysledek is ask 'Kolik je 5 plus 5?'
            if vysledek is 10
                print 'Skvělá práce!'
                print 'Výsledek opravdu je ' vysledek
            else
                print 'Ups, těsně vedle...'
                print 'Správný výsledek je 10.'
9:
    start_code: |-
        repeat 3 times
            food is ask 'What do you want?'
            if food is 'pizza'
                print 'nice!'
            else
                print 'pizza is better'
    intro_text: |
        In this level you can not only use multiple lines with `if` and `repeat`, but you can also put them together!
        In the example you see an `if` command within a `repeat` command. It is also allowed the other way around, and an `if` is also allowed in an `if` and a `repeat` in a `repeat`.
        Give it a try!

        ## Example Hedy code
        ```
        repeat 3 times
            food is ask 'What do you want?'
            if food is 'pizza'
                print 'nice!'
            else
                print 'pizza is better'
        ```

    commands:
    -   name: "`if` with multiple lines"
        explanation: "The answer of a sum of questions with 'ask' and see if it is correct. Now we print out two lines."
        example: "Example: answer is ask 'What is 20 plus 20?'"
        demo_code: |-
            answer is ask 'What is 20 plus 20?'
            if answer is 20
                print 'Well done!!'
                print 'The answer is indeed' answer
            else
                print 'Wrong'
                print 'The answer is 20'
    -   name: "`repeat` and turtle"
        explanation: "Repeat multiple lines"
        example: "Example: create a square"
        demo_code: |-
            repeat 4 times
                turn 90
                forward 50
10:
    start_code: |-
        animals is dog, cat, blobfish
        for animal in animals
          print 'I love ' animal
    intro_text: |
        In this level we learn a new code called `for`. With `for` you can make a list and use all elements.
        `for` creates a block, like `repeat` and `if` so all lines in the block need to start with spaces.

        ## Example Hedy code
        ```
        animals is dog, cat, blobfish
        for animal in animals
          print 'I love ' animal
        ```
    commands:
    -   name: "print"
        explanation: "Print something. Remember to use a quotation mark for literal printing."
        example: "Example: print '5 times 5 is ' 5 * 5"
        demo_code: "print '5 times 5 is ' 5 * 5"
    -   name: "for with a list"
        explanation: "print all things in a list "
        example: "Example: for dier in dieren"
        demo_code: |-
            animals is dog, cat, blobfish
            for animal in animals
              print 'I love ' animal
11:
    start_code: |-
        for pocitadlo in range 1 to 5
            print pocitadlo
    intro_text: '`print` funguje stejně, ale místo`repeat` odteď budeme používat `for`! Teď můžeš napsat `for pocitadlo in range 1 to 5` a použít `pocitadlo` ve svém programu. Vyzkoušej si to a uvidíš, co se stane! Nezapomeň používat odsazení za příkazy `for` a `if` (To znamená začínat řádek čtyřmi mezerami).'
    commands:
    -   name: for loop
        explanation: Nahradíme `repeat` za `for` a přidáme rozsah.
        example: for pocitadlo in range 1  to 5
        demo_code: |-
            for pocitadlo in range 1  to 5
                print pocitadlo
    -   explanation: Zeptej se na výsledek příkladu a zkontroluj, zda je správný. Teď už můžeš vypsat více řádků.
        example: "Příklad: vysledek is ask 'Kolik je 5 plus 5?'"
        demo_code: |-
            vysledek is ask 'Kolik je 5 plus 5?'
            if vysledek is 10
                print 'Skvělá práce!'
                print 'Výsledek opravdu je ' vysledek
            else
                print 'Ups, těsně vedle...'
                print 'Správný výsledek je 10.'
12:
    start_code: |-
        print 'decimal numbers now need to use a dot'
        print 2.5 + 2.5
    intro_text: |
        So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that cmputers use the . for decimal numbers.

        For this level on you will also have to use quotation marks when storing a text with `is`:

        ```
        name is 'Hedy'
        print 'Hello ' name
        ```

        For numbers, you do not use quotation marks in the `is`:
        ```
        score is 25
        print 'You got ' score
        ```
# Marleen, deze tekst hierboven en commands hieronder moet voor Engels nog uitgebreid worden (zoals bij Nederlands)
    # jaja hermans, ik ben al bezig!
    commands:
    -   name: "float directly"
        explanation: "Calculation with decimals"
        example: "print 2.5 + 2.5"
        demo_code: |
            print 'Calculate away!'
            print 'Two and a half plus two and a half is...'
            print 2.5 + 2.5
    -   name: "float in var"
        explanation: "Storing a calculation with decimals"
        example: "antwoord is 2.5 + 2.5"
        demo_code: |
            answer is 2.5 + 2.5
            print 'Calculate away!'
            print 'Two and a half plus two and a half is...'
            print answer

13:
    start_code: |-
        name is ask 'what is your name?'
        leeftijd is ask 'what is your age?'
        if name is 'Hedy' and age is 2
            print 'You are the real Hedy!'
    intro_text: Teď se naučíme `and` (česky a) a `or` (nebo)! Když chceš ověřit dvě podmínky, nemusíš k tomu použít dva `if`y, ale stačí ti k tomu `and` a `or`. Pokud použiješ `and`, musí být obě podmínky, napravo i nalevo, pravdivé. S `or` stačí, aby byla pravdivá alespoň jedna z nich.
    commands:
    -   name: and
        explanation: Obě tvrzení (nalevo i napravo od `and`) musí být pravdivé.
        example: if 3+2 is 5 and 2+2 is 4
        demo_code: |-
            odpoved1 is ask 'Kolik je 3 + 2?'
            odpoved2 is ask 'Kolik je 2 + 2?'
            if odpoved1 is 5 and odpoved2 is 4
                print 'Obě odpovědi jsou správně!'
            else
                print 'Minimálně jedna z odpovědí je špatně!'
    -   name: or
        explanation: Alespoň jedno z tvrzení (nalevo a napravo od `or`) musí být pravdivé, pokud platí obě, je to taky v pořádku.
        example: if 3+2 is 5 or 2+2 is 4
        demo_code: |-
            odpoved1 is ask 'Kolik je 3 + 2?'
            odpoved2 is ask 'Kolik je 2 + 2?'
            if odpoved1 is 5 or odpoved2 is 4
                print 'Alespoň jedna odpověď je správně!'
            else
                print 'Obě odpovědi jsou špatně!'
#16:
#    start_code: |-
#        # Tento program se tě zeptá na pár matematických otázek
#        for i in range(1, 10):
#            # Budeme se ptát na násobky pěti
#            odpoved is input('Kolik je ' i ' * 5?')
#            # Zjistíme jestli je odpověď stejná jako náš výsledek
#            spravna_odpoved is i * 5
#            if odpoved is spravna_odpoved:
#                print(odpoved ' je správně!')
#            else:
#                print('Špatně, správná odpověď je: ' i*5)
#    intro_text: 'Když budeš psát větší programy, budeš potřebovat nějaký způsob, jak si zapamatovat, co dělají jednotlivé části kódu. Na toto používáme komentáře, která vypadají takto: `# Toto je komentář`. Cokoli za `#` je pro počítač, který spouští tvůj kód, neviditelné.'
#    commands:
#    -   name: Komentář
#        explanation: Komentáře můžeme dávat kamkoli se nám líbí.
#        example: '# Toto je komentář'
#        demo_code: |-
#            # Tento program vytiskne Ahoj!
#            # Je napsaný v Hedy
#            # Nedělá nic jiného kromě výpisu Ahoj!
#            print('Ahoj!')
#20:
#    start_code: |-
#        ovoce is ['jablko', 'banán', 'třešeň']
#        for i in range(1, 3):
#            print(ovoce[i])
#    intro_text: Pomocí cyklu se taky můžeme podívat, co všechno v seznamu máme. Protože jsou v našem seznamu 3 věci, poběží náš cyklus od 1 do 3. Teď vše v cyklu vypíšeme.
#    commands:
#    -   name: Délka seznamu
#        explanation: Pomocí `length` (česky délka) můžeme zjistit délku seznamu. V příkladu je délka seznamu 3, protože obsahuje 3 položky.
#        example: 'Příklad: length(list)'
#        demo_code: |-
#            ovoce is ['jablko', 'banán', 'třešeň']
#            print('Délka seznamu je ' length(ovoce))
#            for i in range(1, length(ovoce)):
#                print(ovoce[i])
#21:
#    start_code: |-
#        print('Kolik je 5+3?')
#        odpoved = 5+3
#        print('odpoved je:')
#        print(odpoved)
#        if odpoved == 8:
#            print('Správně!')
#        else:
#            print('Ale ne, špatně!')
#    intro_text: |-
#        Teď změníme `is` na `=` a `==`.
#        `=` používáme, když chceme do proměnné přiřadit nějakou hodnotu. Pokud chceme přiřadit do proměnné `odpoved` číslo `8`, použijeme  `odpoved = 8`.
#        `==` použijeme, když budeme chtít zjistit, jestli jsou dvě věci stejné.
#    commands:
#    -   name: Porovnání
#        explanation: Když chceme porovnávat, použijeme `==`. `5+3 == 8` ověřuje, zda se 5+3 rovná 8.
#        example: 'Příklad: 5+3 == 8'
#        demo_code: |-
#            if 5+3 == 8:
#                print('5 + 3 opravdu je 8')
#            else:
#                print('Toto se určitě nevypíše, protože 5 + 3 je 8!')
#    -   name: Přiřazení hodnoty
#        explanation: Pokud chceme říct, že proměnná `odpoved` je 8, napíšeme `odpoved = 8`
#        example: 'Příklad: odpoved = 8'
#        demo_code: |-
#            print('Kolik je 5 + 3?')
#            odpoved = 5 + 3
#            print('V proměnné odpoved teď je:')
#            print(odpoved)
#    -   name: Porovnej a přiřaď hodnoty
#        explanation: Pokud chceme porovnat dvě hodnoty, použijeme `==`. Pokud chceme přiřadit hodnotu do proměnné, použijeme `=`.
#        example: 'Příklad: 5 + 3 == 8, odpoved = 8'
#        demo_code: |-
#            print('Kolik je 5+3?')
#            odpoved = 5+3
#            print('odpoved je:')
#            print(odpoved)
#            if odpoved == 8:
#                print('Správně!')
#            else:
#                print('Ale ne, špatně!')
#

#colon:
#    start_code: |-
#        for i in range 1 to 10:
#            print i
#        print 'Už jdu!'
#    intro_text: Teď trochu změníme odsazení. Pokaždé, když ho budeme potřebovat, musí předchozí řádek končit `:`.
#    commands:
#    -   explanation: Když používáme `for`, musíme na konec příkazu s ním dát `:`!
#        example: 'for i in range 1 to 10:'
#        demo_code: |-
#            for i in range 1 to 10:
#                print i
#            print 'Už jdu!'
#    -   explanation: To stejné musíme udělat i u `if`.
#        example: 'if barva is zelená:'
#        demo_code: |-
#            barva is zelená
#            if barva is zelená:
#                print 'Barva je zelená.'
#            else:
#                print 'Barva není zelená.'
#    -   explanation: 'Teď ti ukážeme nový příkaz, který můžeš začít používat: `elif`. `elif` je zkratka pro "else if", česky to znamená "jinak pokud". Nejdřív zkontrolujeme, jestli platí `if`, pokud ne, zjistíme, jestli je pravdivý `elif` a pokud i ten neplatí, vykoná se příkaz v `else`.'
#        example: 'elif a is 5:'
#        demo_code: |-
#            a is 2
#            if a is 1:
#                print 'a je 1'
#            elif a is 2:
#                print 'a je 2'
#            else:
#                print 'a není ani 1 ani 2'
14:
    start_code: |-
        vek is ask 'Kolik je ti let?'
        if vek < 13
            print 'Jsi mladší než já!'
        else
            print 'Jsi starší než já!'
    intro_text: |-
        Pojďme se naučit pár nových věcí! Možná už je znáš z matematiky, jde o `<` a `>`.
        `<`zjišťuje, zda je první číslo menší než to druhé, např. `4 < 5`.
        `>` naopak zjišťuje, jestli je první číslo větší, jako v `6 > 5`.
    commands:
    -   name: Menší
        explanation: Používáme `<`, abychom zjistili, jestli je první číslo menší než druhé. Například pokud chceme ověřit, že je proměnná menší než 15, použijeme `promenna < 15`.
        example: 'Příklad: vek < 13'
        demo_code: |-
            vek is ask 'Kolik je ti let?'
            if vek < 13
                print 'Jsi mladší než já!'
    -   name: Větší
        explanation: Používáme `>`, abychom zjistili, jestli je první číslo větší než druhé. Například pokud chceme ověřit, že je proměnná větší než 15, použijeme `promenna > 15`.
        example: 'Příklad: vek > 13'
        demo_code: |-
            vek is ask 'Kolik je ti let?'
            if vek > 13
                print 'Jsi mladší než já!'
15:
    start_code: |-
        odpoved is 0
        while spravna_odpoved != 25
            odpoved is ask 'Kolik je 5 * 5?'
        print 'Dostala jsem správnou odpověď!'

    intro_text: Naučíme se nový cyklus, konkrátně `while` cyklus! Tento cyklus se opakuje tak dlouho, dokud je jeho podmínka pravdivá. V příkladu vidíte, že kód opakujeme, dokud nedostaneme správnou odpověď. Pokud bychom ji nikdy nedostali, bude cyklus nekonečný!
    commands:
    -   name: Pravdivostní while
        explanation: Můžeme použít `while` cyklus s `True` a `False`.
        example: 'Příklad: while spravna_odpoved is False'
        demo_code: |-
            odpoved is 0
            while spravna_odpoved != 25
                odpoved is ask 'Kolik je 5 * 5?'
            print 'Dostala jsem správnou odpověď!'
    -   name: While s operátory menší/větší než
        explanation: Taky můžeme použít `while` s operátory `<` a `>`. Pozor, je potřeba porovnávané číslo měnit, aby cyklus někdy skončil! Tady to děláme pomocí `pocet + 1`.
        example: 'Příklad: while pocet < 3'
        demo_code: |-
            pocet is 1
            while pocet < 3
                print 'Toto zopakujeme ještě ' 3 - pocet 'krát'
                pocet is pocet + 1
            print 'Hotovo'
16:
    start_code: |-
        ovoce is ['jablko', 'banán', 'třešně']
        print ovoce
    intro_text: Už i naše seznamy mají vlastní závorky! Budeme je psát do hranatých závorek a jejich  jednotlivé položky do jednoduchých uvozovek ('), které už známe.
    commands:
    -   explanation: Seznamy teď píšeme do hranatých závorek a jejich položky do uvozovek.
        example: "Příklad: ovoce is ['jablko', 'banán', 'třešně']"
        demo_code: |-
            ovoce is ['jablko', 'banán', 'třešně']
            print ovoce
    -   name: Vyber položku ze seznamu.
        explanation: Abychom dostali položku ze seznamu, použijeme [číslo], takže ovoce[1] nám vrátí prvního člena seznamu!
        example: 'Příklad: prvniovoce is ovoce[1]'
        demo_code: |-
            ovoce is ['jablko', 'banán', 'třešně']
            prvniovoce is ovoce[1]
            print prvniovoce
    -   name: Získej náhodnou položku ze seznamu.
        explanation: Abychom dostali náhodnou položku ze seznamu, použijeme [random]. Např. ovoce[random] nám vrátí náhodného člena seznamu!
        example: 'Příklad: nahodneovoce is ovoce[random]'
        demo_code: |-
            ovoce is ['jablko', 'banán', 'třešně']
            nahodneovoce is ovoce[random]
            print nahodneovoce
