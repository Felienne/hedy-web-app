1:
    intro_text: |-
        Καλωσήρθες στη Hedy! Στο επίπεδο 1 μπορείς να χρησιμοποιήσεις τις εντολές `print`, `ask`, και `echo`.
        Στην αριστερή μπάρα μπορείς να δεις όλες τις εντολές του επιπέδου 1.

        Πάτησε το μπλε κουμπί και ο κώδικας θα πληκτρολογηθεί για σένα.

        Δοκίμασε και εσύ τον κώδικα πατώντας το πράσινο κουμπί 'Εκτέλεσε τον κώδικα' κάτω από το αριστερό προγραμματιστικό πεδίο.

        Δεν ξέρεις τί να δημιουργήσεις; Στις επόμενες καρτέλες θα βρεις μερικές ιδέες για το τί θα δημιουργήσεις
    start_code: 'print γειά σου κόσμε!'
    commands:
    -   name: 'print'
        explanation: 'Εμφάνισε κάτι με την `print`.'
        example: 'Παράδειγμα: print Γειά, καλωσήλθες στη Hedy!'
        demo_code: 'print Γειά, καλωσήλθες στη Hedy!'
    -   name: 'ask'
        explanation: 'Ρώτησε κάτι με την `ask`.'
        example: 'Παράδειγμα: ask Ποιό είναι το αγαπημένο σου χρώμα;'
        demo_code: 'ask Ποιό είναι το αγαπημένο σου χρώμα;'
    -   name: 'echo'
        explanation: 'Eπανάλαβε κάτι χρησιμποιώντας την `echo`.'
        example: 'Παράδειγμα: echo ώστε το αγαπημένο σου χρώμα είναι το '
        demo_code: |-
            ask Ποιό είναι το αγαπημένο σου χρώμα;
            echo ώστε το αγαπημένο σου χρώμα είναι το 
2:
    intro_text: |-
        Στο επίπεδο 2 θα μάθουμε κάτι καινούριο. Μπορείς να ονοματίσεις μια λέξη με την `is`.
        Αν χρησιμοποιήσεις τον κώδικα `name is  Hedy`, μπορείς να χρησιμοποιήσεις το name οπουδήποτε στον κώδικά σου και αυτό θα αντικατασταθεί από τη λέξη Hedy.

        Σημείωση: Η `ask έχει αλλάξει`, μπορείς να αποθηκεύσεις την απάντηση με ένα όνομα , κάπως έτσι:
        ```
        answer is ask Ποιό είναι το όνομά σου;
        ```

        Η print λειτουργεί όπως και στο επίπεδο 1, και πλέον δεν χρειάζεσαι την `echo`.
    start_code: 'print γειά σου κόσμε!'
    commands:
    -   name: 'is'
        explanation: 'Δώσε ένα όνομα σε μια λέξη για να τη χρησιμοποιήσεις στο πρόγραμμα χρησιμοποιώντας την `is`'
        example: 'Παράδειγμα:  name is Hedy.'
        demo_code: |-
            name is Hedy
            print καλωσήλθες name
    -   name: 'ask'
        explanation: 'Ρώτησε κάτι με την `ask`. Πρόσεξε! Πρέπει να δώσεις στην απάντηση ένα όνομα με την `is`.'
        example: 'Παράδειγμα: color is ask Ποιό είναι το αγαπημένο σου χρώμα;'
        demo_code: |-
            color is ask Ποιό είναι το αγαπημένο σου χρώμα;
            print το color είναι το αγαπημένο σου!
3:
    intro_text: |-
        Στο επίπεδο 3 μπορείς να δημιουργήσεις μια λίστα. Μπορείς να αφήσεις τον υπολογιστή να επιλέξει κάτι τυχαία από τη λίστα. Αυτό γίνεται με τη χρήση της `at random`.

        ```
        animals is σκύλος, γάτα, καγκουρό
        print animals at random
        ```

        Θα βρεις όλον τον κώδικα του επιπέδου 3 στην αριστερή μπάρα. Υπάρχουν επίσης καρτέλες με ασκήσεις.
    start_code: 'print γειά σου κόσμε!'
    commands:
    -   name: 'choose_random'
        explanation: 'Επίλεξε μια τυχαία λέξη από μια ομάδα με τις `at` και `random`'
        example: 'Παράδειγμα: animals is σκύλος, γάτα, καγκουρό.'
        demo_code: |-
            animals is σκύλος, γάτα, καγκουρό
            print animals at random
4:
    start_code: "print 'Γειά σου κόσμε'"
    intro_text: |-
        Αλλαγή `print` και `ask` στο επίπεδο 4.Πρέπει να περικλείσεις το κείμενο που θέλεις να εμφανίσεις σε εισαγωγικά.

        Αυτό είναι χρήσιμο, επειδή τώρα μπορείς να εμφανίσεις όσες λέξεις θέλεις. Επίσης, τις λέξεις που αποθήκευες με την `is`.

        Οι περισσότερες γλώσσες προγραμματισμού χρησιμοποιούν εισαγωγικά όταν εμφανίζουν στην οθόνη, οπότε βρισκόμαστε ένα βημα πιο κοντά στον πραγματικό προγραμματισμό!

        ## Οι ασκήσεις γίνονται ολοένα και πιο δύσκολες
        Θα βρεις τις εντολές στα αριστερά και πάλι, και τις ασκήσεις στις ακόλουθες καρτέλες. Οι ασκήσεις πλέον γίνονται όλο και πιο δύσκολες στις διαδοχικές καρτέλες. Έτσι, είναι καλύτερα να ξεκινήσεις από τα αριστερά με την ιστορία, και να συνεχίσεις προς τα δεξιά για να δυσκολευτείς όλο και περισσότερο.
    commands:
    -   name: 'print'
        explanation: 'Εμφάνισε κάτι ακριβώς, χρησιμοποιώντας εισαγωγικά'
        example: "Παράδειγμα: print 'Γειά, καλωσήλθες στη Hedy.'"
        demo_code: "print 'Γειά, καλωσήλθες στη Hedy.'"
    -   name: 'is'
        explanation: 'Δώσε ένα όνομα σε κάποιο κείμενο και εμφάνισε με την `print` χωρίς εισαγωγικά'
        example: 'Παράδειγμα: name is Hedy.'
        demo_code: |-
            name is Hedy
            print 'Το όνομά μου είναι ' name
    -   name: 'ask'
        explanation: 'Ρώτησε κάτι με την `ask`.'
        example: "Example: color is ask 'Ποιό είναι το αγαπημένο σου χρώμα;'"
        demo_code: |-
            color is ask 'Ποιό είναι το αγαπημένο σου χρώμα;?'
            print 'το ' color ' είναι το αγαπημένο σου!'
5:
    start_code: |-
        name is ask 'Ποιό είναι το όνομά σου;'
        if name is Hedy print 'τέλεια!' else print 'έτσι κι έτσι'
    intro_text: |-
        Οι `ask` και `print` λειτουργούν ακριβώς όπως στο επίπεδο 4.

        Στο επίπεδο 5 υπάρχει κάτι νέο, την εντολή `if`! Με την `if` μπορείς να επιλέξεις ανάμεσα σε δύο διαφορετικές επιλογές.

        ## Παράδειγμα κώδικα Hedy
        ```
        name is ask 'ποιό είναι το όνομά σου;'
        if name is Hedy print 'ωραία' else print 'μπου!'
        ```

        Αυτός ο κώδικας εμφανίζει 'ωραία' αν εισάγεις σαν όνομα το Hedy, και 'μπου!' αν εισάγεις κάτι άλλο.

        ## Οι ασκήσεις γίνονται όλο και πιο δύσκολες
        Επίσης στο επίπεδο 4, οι ασκήσιες στις καρτέλες γίνονται ολοένα και πιο δύσκολες. Οπότε καλό θα είναι να τις κάνεις από τα αριστέρα προς τα δεξιά.
    commands:
    -   name: 'print'
        explanation: 'Εμφάνισε κάτι ακριβώς, χρησιμοποιώντας εισαγωγικά'
        example: "Παράδειγμα: print 'Γειά, καλωσήλθες στη Hedy.'"
        demo_code: "print 'Γειά, καλωσήλθες στη Hedy.'"
    -   name: 'ask'
        explanation: 'Ρώτησε κάτι με την `ask`.'
        example: "'Example: color is ask 'Ποιό είναι το αγαπημένο σου χρώμα;'"
        demo_code: |-
            color is ask 'Ποιό είναι το αγαπημένο σου χρώμα;'
            print 'το ' color ' είναι το αγαπημένο σου!'
    -   name: 'if'
        explanation: 'Κάνε μια επιλογή με την `if`'
        example: "Παράδειγμα: if color is green print 'όμορφο!' else print 'έτσι κι έτσι'"
        demo_code: |-
            color is ask 'Ποιό είναι το αγαπημένο σου χρώμα;'
            if color is green print 'όμορφο!' else print 'έτσι κι έτσι'
6:
    start_code: "print '5 επί 5 ίσον με ' 5 * 5"
    intro_text: |-
        Οι `ask`, `print` και `if` είναι ακόμα ίδιες όπως και στα Επίπεδα 5. Το Επίπεδο 6 προσθέτει κάτι καινούριο...Πλέον μπορείς να κάνεις υπολογισμούς.

        Το σύν είναι εύκολο, το γράφεις όπως στα μαθηματικά: για παράδειγμα `5+5`. Το πλην επίσης λειτουργεί μια χαρά, έτσι `5-5`.

        Το επί είναι λίγο διαφορετικό, επειδή δεν υπάρχει σύμβολο επί στο πληκτρολόγιο σου. Απλά ψάξε και θα δεις, δεν υπάρχει!
        Αυτός είναι ο λόγος που πολλαπλασιάζουμε με τον αστερίσκο στο πλήκτρο 8: `5 * 5`. Διάβαζε το σαν "5 φορές το 5" για να το θυμάσαι πιο εύκολα.
        ## Παράδειγμά κώδικα Hedy
        ```
        print '5 συν 5 κάνει ' 5 + 5
        print '5 πλην 5 κάνει ' 5 - 5
        print '5 επί 5 κάνει ' 5 * 5
        ```
    commands:
    -   name: 'print'
        explanation: 'Εμφάνισε κάτι ακριβώς, χρησιμοποιώντας εισαγωγικά'
        example: "Παράδειγμα: print '5 επί 5 ίσον με ' 5 * 5"
        demo_code: "print '5 επί 5 είναι ' 5 * 5"
    -   name: 'Οι `ask` και `if` με υπολογισμούς'
        explanation: 'Ρώτησε σχετικά με έναν υπολογισμό και έλεγξε ότι είναι σωστός.'
        example: "Παράδειγμα: answer is ask 'Πόσο είναι 10 + 10;'"
        demo_code: |-
            answer is ask 'Πόσο είναι 10 + 10;'
            if answer is 20 print 'Ναι!' else print 'Ουπς'
    -   name: "`ask` and `if` turtle"
        explanation: "Ask the user how many angles they want"
        example: "Example: angles is ask 'How many angles?'"
        demo_code: |-
            angles is ask 'How many angles?'
            angle is 360 / angles
            forward 50
7:
    start_code: "repeat 3 times print 'Η Hedy είναι διασκεδαστική!'"
    intro_text: |-
        Οι `ask`, `print` και `if` λειτουργούν ακριβώς όπως και στο Επίπεδο 5 και 6.
        Όμως, το Επίπεδο 7 προσθέτει την εντολή `repeat`. H Repeat (Επανάληψη) μπορεί να χρησιμποιηθεί για να εκτελέσουμε μια γραμμή κώδικα πολλές φορές.

        ## Παράδειγμα Κώδικα Hedy
        ```
        repeat 3 times print 'H Hedy είναι διασκεδαστική!'
        ```
    commands:
    -   name: 'print'
        explanation: 'Εμφάνισε κάτι ακριβώς, χρησιμοποιώντας εισαγωγικά'
        example: "Παράδειγμα: print 'Γειά, καλωσήλθες στη Hedy.'"
        demo_code: "print 'Γειά, καλωσήλθες στη Hedy.'"
    -   name: 'ask'
        explanation: 'Ρώτησε κάτι με την `ask`.'
        example: "Παράδειγμα: color is ask 'Ποιό είναι το αγαπημένο σου χρώμα;"
        demo_code: |-
            color is ask 'Ποιό είναι το αγαπημένο σου χρώμα;?'
            print 'το ' color ' είναι το αγαπημένο σου!'
    -   name: 'if'
        explanation: 'Κάνε μια επιλογή με την `if`'
        example: "Παράδειγμα: if color is green print 'όμορφο!' else print 'έτσι κι έτσι'"
        demo_code: |-
            color is ask 'Ποιό είναι το αγαπημένο σου χρώμα;'
            if color is green print 'όμορφο!' else print 'έτσι κι έτσι'
    -   name: "repeat - turtle"
        explanation: "Repeat a line of code with `repeat`."
        example: "Example: repeat 3 times forward 10"
        demo_code: |-
            repeat 3 times forward 10
8:
    start_code: |-
        repeat 5 times
            print 'Γειά σας παιδιά'
            print 'Αυτό θα εμφανιστεί 5 φορές'
    intro_text: |-
        Οι ask και print λειτουργούν ακόμα όπως τις γνωρίζετε. Όμως, οι if και repeat έχουν αλλάξει!
        Τώρα μπορείτε να εκτελείτε μαζί ομάδες κώδικα, αλλά θα πρέπει να βάλετε εσοχή στον κώδικα. Αυτό σημαίνει να προσθέσετε τέσσερα κενά στην αρχή της γραμμής. Το ίδιο ισχύει όταν θέλετε να δημιουργήσετε ένα μπλοκ μιας γραμμής.

        ## Παράδειγμα κώδικα Hedy
        ```
        repeat 5 times
            print 'Γειά σας'
            print 'Αυτό θα επαναληφθεί 5 φορές'
        ```



    commands:
    -   name: 'print'
        explanation: 'Εμφάνισε κάτι. Θυμήσου να χρησιμοποιήσεις εισαγωγικά για ακριβή εμφάνιση.'
        example: "Παράδειγμα: print '5 επί 5 ίσον με ' 5 * 5"
        demo_code: "print '5 επί 5 ίσον με ' 5 * 5"
    -   name: 'Η `if` με πολλαπλές γραμμές'
        explanation: 'Ρώτησε την απάντηση σε ένα άθροισμα και έλεγξε αν είναι σωστή. Μπορούμε τώρα να εμφανίσουμε 2 γραμμές.'
        example: "'Παράδειγμα: answer is ask 'Πόσο είναι 5 συν 5?'"
        demo_code: |-
            answer is ask 'Πόσο είναι 5 συν 5;'
            if answer is 10
                print 'Μπράβο!'
                print 'Πράγματι, η απάντηση ήταν ' answer
            else
                print 'Ουπς!'
                print 'Η απάντηση είναι 10'
9:
    start_code: |-
        repeat 3 times
            food is ask 'What do you want?'
            if food is 'pizza'
                print 'nice!'
            else
                print 'pizza is better'
    intro_text: |
        In this level you can not only use multiple lines with `if` and `repeat`, but you can also put them together!
        In the example you see an `if` command within a `repeat` command. It is also allowed the other way around, and an `if` is also allowed in an `if` and a `repeat` in a `repeat`.
        Give it a try!

        ## Example Hedy code
        ```
        repeat 3 times
            food is ask 'What do you want?'
            if food is 'pizza'
                print 'nice!'
            else
                print 'pizza is better'
        ```

    commands:
    -   name: "`if` with multiple lines"
        explanation: "The answer of a sum of questions with 'ask' and see if it is correct. Now we print out two lines."
        example: "Example: answer is ask 'What is 20 plus 20?'"
        demo_code: |-
            answer is ask 'What is 20 plus 20?'
            if answer is 20
                print 'Well done!!'
                print 'The answer is indeed' answer
            else
                print 'Wrong'
                print 'The answer is 20'
    -   name: "`repeat` and turtle"
        explanation: "Repeat multiple lines"
        example: "Example: create a square"
        demo_code: |-
            repeat 4 times
                turn 90
                forward 50
10:
    start_code: |-
        animals is dog, cat, blobfish
        for animal in animals
          print 'I love ' animal
    intro_text: |
        In this level we learn a new code called `for`. With `for` you can make a list and use all elements.
        `for` creates a block, like `repeat` and `if` so all lines in the block need to start with spaces.

        ## Example Hedy code
        ```
        animals is dog, cat, blobfish
        for animal in animals
          print 'I love ' animal
        ```
    commands:
    -   name: "print"
        explanation: "Print something. Remember to use a quotation mark for literal printing."
        example: "Example: print '5 times 5 is ' 5 * 5"
        demo_code: "print '5 times 5 is ' 5 * 5"
    -   name: "for with a list"
        explanation: "print all things in a list "
        example: "Example: for dier in dieren"
        demo_code: |-
            animals is dog, cat, blobfish
            for animal in animals
              print 'I love ' animal
11:
    start_code: |-
        for i in range 1 to 10
            print i
        print 'Έτοιμοι ή όχι, έρχομαι!'
    intro_text: 'Η `print` λειτουργεί ακριβώς όπως και πριν, όμως η `repeat` τώρα αντικαθίσταται από τη `for`! Θα χρησιμοποιείς `for i in range 1 to 5`, αντί για `repeat 5 times`. Μπορείς επίσης να χρησιμοποιείς το `i` στο πρόγραμμα σου! Θυμήσου να χρησιμοποιείς εσοχές ύστερα από κάθε δήλωση `for` και `if` (Αυτό σημαίνει να ξεκινάς μια πρόταση με 4 κενά)'
    commands:
    -   name: 'repeat'
        explanation: 'αντικαθιστούμε τη `repeat` με τη `for`'
        example: 'for i in range 1 to 10'
        demo_code: |
            for i in range 1 to 10
              print i
            print 'Έτοιμοι ή όχι, έρχομαι!'
12:
    start_code: |-
        print 'decimal numbers now need to use a dot'
        print 2.5 + 2.5
    intro_text: |
        So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that cmputers use the . for decimal numbers.

        For this level on you will also have to use quotation marks when storing a text with `is`:

        ```
        name is 'Hedy'
        print 'Hello ' name
        ```

        For numbers, you do not use quotation marks in the `is`:
        ```
        score is 25
        print 'You got ' score
        ```
    commands:
    -   name: "float directly"
        explanation: "Calculation with decimals"
        example: "print 2.5 + 2.5"
        demo_code: |
            print 'Calculate away!'
            print 'Two and a half plus two and a half is...'
            print 2.5 + 2.5
    -   name: "float in var"
        explanation: "Storing a calculation with decimals"
        example: "antwoord is 2.5 + 2.5"
        demo_code: |
            answer is 2.5 + 2.5
            print 'Calculate away!'
            print 'Two and a half plus two and a half is...'
            print answer

13:
    start_code: |-
        name is ask 'what is your name?'
        leeftijd is ask 'what is your age?'
        if name is 'Hedy' and age is 2
            print 'You are the real Hedy!'
    intro_text: Τώρα θα μάθουμε τα `and` και `or`! Αν θέλεις να ελέγξεις δύο δηλώσεις, δεν χρειάζεται να χρησιμοποίησεις δύο if αλλά μπορείς να χρησιμοποιήσεις τα `and` και `or`. Αν χρησιμοποιήσεις τo `and`, και οι δύο προτάσεις, αριστερά και δεξιά από το `and` θα πρέπει να είναι αληθείς. Μπορούμε επίσης να χρησιμοποιήσουμε το `or`. Τότε, μόνο μια πρόταση χρειάζεται να είναι αληθής.
    commands:
    -   name: Και
        explanation: Και οι δύο προτάσεις (αριστερά και δεξιά από το `and`) πρέπει να είναι αληθείς.
        example: if 3+2 is 5 and 2+2 is 4
        demo_code: |-
            answer1 is ask 'Πόσο κάνει 3+2;'
            answer2 is ask 'Πόσο κάνει 2+2;'
            if answer1 is 5 and answer2 is 4
                print 'Και οι δύο απαντήσεις είναι σωστές!'
            else
                print 'Τουλάχιστον μια απάντηση είναι λανθασμένη!'
    -   name: Ή
        explanation: '`Or` Τουλάχιστον 1 από τις προτάσεις αριστερά και δεξιά από το `or`, οφείλει να είναι αληθής, αν και οι δύο είναι σωστές και αυτό είναι μια χαρά.'
        example: if 3+2 is 5 or 2+2 is 4
        demo_code: |-
            answer1 is ask 'Πόσο κάνει 3+2;'
            answer2 is ask 'Πόσο κάνει 2+2;'
            if answer1 is 5 or answer2 is 4
                print 'Τουλάχιστον μία απάντηση είναι σωστή!'
            else
                print 'Και οι δύο απαντήσεις είναι λανθασμένες!'
#16:
#    start_code: |-
#        # Αυτό είναι ένα πρόγραμμα που θα ρωτήσεις κάποιες ερωτήσεις μαθηματικών
#        for i in range(1,10):
#            # Θα ρωτήσουμε τον πίνακα πολλαπλασιασμού του 5
#            answer is input('Πόσο κάνει ' i ' φορές το 5?')
#            # Ελέγχουμε αν η απάντηση είναι ίδια με το άθροισμά μας
#            correct_answer is i * 5
#            if answer is correct_answer:
#                print(answer ' είναι σωστό')
#            else:
#                print('Αυτό είναι λάθος, θα έπρεπε να είναι: ' i*5)
#    intro_text: |-
#        Όταν κάνεις μεγαλύτερα προγράμματα, θα πρέπει να βρεις έναν τρόπο να θυμάσαι τί κάνει κάθε κομμάτι κώδικα. Για αυτόν το σκοπό χρησιμοποιούμε τα σχόλια. Ένα σχόλιο μοιάζει κάπως έτσι:
#        ` # Αυτό είναι ένα σχόλιο`.
#        Οτιδήποτε μετά το # θα είναι αόρατο για τον κώδικα.
#    commands:
#    -   name: Σχόλιο
#        explanation: Μπορούμε να τοποθετήσουμε σχόλια όπου θέλουμε
#        example: '# Αυτό είναι ένα σχόλιο'
#        demo_code: |-
#            # Αυτό το πρόγραμμα εμφανίζει γειά
#            # Δημιουργήθηκε με τη Hedy
#            # Δεν κάνει τίποτα άλλο εκτός από το να εμφανίζει Γειά
#            print('γειά!')
14:
    start_code: |-
        age is ask 'Πόσο χρονών είσαι;'
        if age < 13
            print 'Είσαι νεότερη από εμένα!'
        else
            print 'Είσαι μεγαλύτερη από εμένα!'
    intro_text: Θα μάθουμε μερικά ακόμα νέα πράγματα! Ίσως να τα γνωρίζεις ήδη από τα μαθηματικά, τα `<` και `>`. Το `<` ελέγχει αν ο πρώτος αριθμός είναι μικρότερος από το δεύτερο, πχ `4 < 5`. To `>` ελέγχει αν ο πρώτος αριθμός είναι μεγαλύτερος από το δεύτερο, πχ `6 > 5`.
    commands:
    -   name: Μικρότερο
        explanation: Χρησιμοποιούμε το `<` για να ελέγξουμε αν ο πρώτος αριθμός είναι μικρότερος από το δεύτερο αριθμό. Για παράδειγμα, αν θέλουμε να δούμε αν μια μεταβλητή είναι μικρότερη από 15, χρησιμοποιούμε `variable < 15`
        example: 'Για παράδειγμα: age < 13'
        demo_code: |-
            age is ask 'Πόσο χρονών είσαι;'
            if age < 13
                print 'Είσαι νεότερη από εμένα!'
    -   name: Μεγαλύτερο
        explanation: Χρησιμοποιούμε το `>` για να ελέγξουμε αν ο πρώτος αριθμός είναι μεγαλύτερος από το δεύτερο αριθμό. Για παράδειγμα, αν θέλουμε να δούμε αν μια μεταβλητή είναι μεγαλύτερη από 15, χρησιμοποιούμε `variable > 15`
        example: 'Για παράδειγμα: age > 13'
        demo_code: |-
            age is ask 'Πόσο χρονών είσαι;'
            if age > 13
                print 'Είσαι μεγαλύτερη από εμένα!'
15:
    start_code: |-
        answer is 0
        while answer != 25
            answer is ask 'Πόσο κάνει 5 φορές το 5;'
        print 'Δόθηκε η σωστή απάντηση'
    intro_text: Θα μάθουμε ένα νέο βρόχο, το βρόχο `while`! Συνεχίζουμε το βρόχο για όσο η πρόταση είναι αληθής/ορθή! Έτσι στο παράδειγμα κώδικα, συνεχίζουμε ώσπου να δοθεί μια σωστή απάντηση. Αν δε δοθεί ποτέ η σωστή απάντηση, ο βρόχος δε θα σταματήσει ποτέ!
    commands:
    -   name: Boolean while
        explanation: Μπορούμε να χρησιμοποιήσουμε το βρόχο `while` με το `True` και `False`
        example: 'Παράδειγμα: while correct_answer is False'
        demo_code: |-
            answer is 0
            while answer != 25
                answer is ask 'Πόσο κάνει 5 φορές το 5;'
            print 'Δόθηκε η σωστή απάντηση'
    -   name: Μικρότερο while
        explanation: Μπορούμε επίσης να χρησιμοποιήσουμε το βρόχο `while` με το `<` και το `>`. Προσοχή όμως, θα χρειαστεί να αλλάζετε τον αριθμό ώστε να τελειώσει ο βρόχος. Το κάνουμε αυτό με το count is count + 1.
        example: 'Για παράδειγμα: while count < 3'
        demo_code: |-
            count is 1
            while count < 3
                print 'Το κάνουμε αυτό ' 3 - count ' ακόμα φορές'
                count is count + 1
            print 'Τελειώσαμε'
16:
    start_code: |-
        fruit is ['μήλο', 'μπανάνα', 'κεράσι']
        print fruit 
    intro_text: "Θα βάλουμε αγκύλες γύρω από τις λίστες! Επίσης θα πρέπει να βάλουμε μονά εισαγωγικά (') γύρω από κάθε αντικείμενο στις λίστες. "
    commands:
    -   name: 'Αγκύλες γύρω από λίστες'
        explanation: "Θα βάλουμε αγκύλες γύρω από τις λίστες! Επίσης θα πρέπει να βάλουμε μονά εισαγωγικά (') γύρω από κάθε αντικείμενο στις λίστες."
        example: "Για παράδειγμα: fruit is ['μήλο', 'μπανάνα', 'κεράσι']"
        demo_code: |-
            fruit is ['μήλο', 'μπανάνα', 'κεράσι']
            print fruit 
    -   name: 'Πάρε ένα αντικείμενο από μία λίστα'
        explanation: 'Για να πάρουμε ένα αντικείμενο από μια λίστα χρησιμοποιούμε [αριθμός] έτσι fruit[1] σημαίνει, πάρε το πρώτο φρούτο από τη λίστα!'
        example: 'Για παράδειγμα: firstfruit is fruit[1]'
        demo_code: |-
            fruit is ['μήλο', 'μπανάνα', 'κεράσι']
            firstfruit is fruit[1]
            print firstfruit 
    -   name: 'Πάρε ένα τυχαίο αντικείμενο από μία λίστα'
        explanation: 'Για να πάρουμε ένα τυχαίο αντικείμενο από τη λίστα χρησιμοποιούμε [random] έτσι fruit[random] σημαίνει, πάρε ένα τυχαίο φρούτο από τη λίστα!'
        example: 'Για παράδειγμα: randomfruit is fruit[random]'
        demo_code: |-
            fruit is ['μήλο', 'μπανάνα', 'κεράσι']
            randomfruit is fruit[random]
            print randomfruit 
17:
    start_code: |-
        for i in range 1 to 10:
            print i
        print 'Έτοιμοι ή όχι, έρχομαι!'
    intro_text: 'Τώρα θα αλλάξουμε λίγο τις εσοχές. Κάθε φορά που χρειαζόμαστε μια εσοχή, χρειαζόμαστε ένα `:` στη γραμμή πριν την εσοχή.'
    commands:
    -   name: 'for με :'
        explanation: 'Όταν χρησιμοποιούμε μια `for`, πρέπει να προσθέσουμε ένα `:` ύστερα από τη δήλωση `for`!'
        example: 'for i in range 1 to 10:'
        demo_code: |-
            for i in range 1 to 12:
                print i
            print 'Έτοιμοι ή όχι, έρχομαι!'
    -   name: 'if με :'
        explanation: 'Θα πρέπει να κάνουμε το ίδιο με όλες μας τις δηλώσεις `if`'
        example: "if color is πράσινο:'"
        demo_code: |-
            color is ask 'Ποιό είναι το αγαπημένο σου χρώμα;'
            if color is πράσινο:
                print 'To χρώμα είναι πράσινο'
            else:
                print 'Το χρώμα δεν είναι πράσινο'
    -   name: '(Προαιρετικό) elif'
        explanation: 'Θα σου δείξουμε μια νέα εντολή που επιτρέπεται να χρησιμοποιείς: την `elif`. H `elif` σημαίνει "else if" ( αλλιώς αν ). Θα ξεκινήσουμε ελέγχοντας αν η `if` είναι αληθής. Αν αυτή δεν είναι αληθής, ελέγχουμε την `elif` και αν επίσης δεν είναι αληθής, πηγαίνουμε στην `else`.'
        example: 'elif a is 5:'
        demo_code: |-
            a is 2
            if a is 1:
                print 'a is 1'
            elif a is 2:
                print 'το a είναι 2'
            else:
                print 'το a δεν είναι 1 ή 2'
