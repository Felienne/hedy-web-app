1:
    intro_text: |
        Welkom bij Hedy! In Level 1 kun je de commando's `print`, `ask` en `echo` gebruiken.

        Links in jouw scherm staan alle commando's van Level 1.

        Druk op de blauwe knop en de code wordt alvast voor jou getypt!

        Probeer de code dan zelf met de groene 'Voer de code uit' knop onder het linker programmeerveld.

        Weet je niet wat wil wilt maken? In de volgende tabjes staan opdrachten om te proberen.

    start_code: "print hallo wereld!"
    commands:
    -   name: "print"
        explanation: "Iets printen met `print`."
        example: "Bijvoorbeeld: print Hallo welkom bij Hedy!"
        demo_code: "print Hallo welkom bij Hedy!"
    -   name: "ask"
        explanation: "Iets vragen met `ask`."
        example: "Bijvoorbeeld: ask Wat is je lievelingskleur?"
        demo_code: "ask Wat is je lievelingskleur?"
    -   name: "echo"
        explanation: "Iets herhalen dat is ingetypt met `echo`."
        example: "Bijvoorbeeld: echo dus je lievelingskleur is"
        demo_code: |-
            ask Wat is je lievelingskleur?
            echo dus je lievelingskleur is
    -   name: "forward"
        explanation: "Een lijn trekken met `forward`."
        example: "Bijvoorbeeld: forward 100"
        demo_code: "forward 100"
    -   name: "turn"
        explanation: "De teken-schildpad draaien met `turn`"
        example: "Bijvoorbeeld: turn"
        demo_code: |-
            forward 25
            turn left
            forward 25
            turn right
2:
    intro_text: |
        In level 2 leren we iets nieuws. Je kunt een woord een naam geven met `is`. Je kunt daarna in je code overal naam gebruiken. Dat wordt dan vervangen door Hedy. Zo:

        ```
        naam is Hedy
        print hallo naam
        ```

        De `ask` is in level 2 ook veranderd, het antwoord sla je ook op met een naam:

        ```
        antwoord is ask Hoe heet jij?
        ```

        Print werkt nog zoals in Level 1, en echo heb je niet meer nodig.
    start_code: "print hallo wereld!"
    commands:
    -   name: "is"
        explanation: "Een woord een naam geven met `is`. Je mag de naam zelf kiezen."
        example: "Bijvoorbeeld: voornaam is Hedy."
        demo_code: |-
            voornaam is Hedy
            print ik heet voornaam
    -   name: "is - turtle"
        explanation: "Een getal een naam geven met `is`. Je mag de naam zelf kiezen."
        example: "Bijvoorbeeld: hoek is 90."
        demo_code: |-
            hoek is 90
            turn hoek
            forward 100
    -   name: "ask"
        explanation: "Iets vragen met `ask`. Maar let op! Je moet je antwoord een naam geven met `is`."
        example: "Bijvoorbeeld: kleur is ask Wat is je lievelingskleur?"
        demo_code: |-
            kleur is ask Wat is je lievelingskleur?
            print Jouw favoriet is dus kleur
3:
    intro_text: |
        In level 3 kan je ook een lijstje maken. Uit de lijst kun je dan iets willekeurigs kiezen. Dat doe je met `at random` (je zegt: et ren-dom).

        ```
        dieren is hond, kat, kangoeroe
        print dieren at random
        ```

        Je vindt alle codes van level 2 weer in de linkerbalk. Ook zijn er weer tabjes met opdrachten.
    start_code: "print hallo wereld!"
    commands:
    -   name: "kies_random"
        explanation: "Iets willekeurigs uit een groep woorden kiezen met `at` en `random`."
        example: "Bijvoorbeeld: dieren is hond, kat, kangoeroe."
        demo_code: |-
            dieren is hond, kat, kangoeroe
            print dieren at random
4:
    start_code: "print 'hallo wereld'"
    intro_text: |
        In level 3 zijn `ask` en `print` nu anders.

        Je moet tekst die je letterlijk wilt printen tussen aanhalingstekens zetten.

        Dat is handig, want nu kan je alle woorden printen die je maar wilt. Ook de woorden die je hebt gebruikt om iets in op te slaan met `is`.

        De meeste programmeertalen gebruiken ook aanhalingstekens bij het printen, dus we komen zo al een stapje dichterbij echt programmeren!

        ## Opdrachten worden steeds moeilijker
        Je vindt de commando's weer links, en opdrachten in de volgende tabjes. De opdrachten worden in de opeenvolgende tabjes nu steeds iets moeilijker.
        Begin dus links met het verhaal, en werk zo door om steeds meer uitgedaagd te worden.

    commands:
    -   name: "print"
        explanation: "Iets letterlijk printen met `print`."
        example: "Bijvoorbeeld: print 'Hallo welkom bij Hedy.'"
        demo_code: "print 'Hallo welkom bij Hedy'"
    -   name: "is"
        explanation: "Een stukje tekst een naam geven met `is` en printen zonder aanhalingstekens"
        example: "Bijvoorbeeld: naam is Hedy."
        demo_code: |-
            naam is Hedy
            print 'ik heet ' naam
    -   name: "ask"
        explanation: "Iets vragen met `ask`"
        example: "Bijvoorbeeld: kleur is ask 'Wat is je lievelingskleur?'"
        demo_code: |-
            kleur is ask 'Wat is je lievelingskleur?'
            print 'Jouw favoriet is dus ' kleur
5:
    start_code: |-
        naam is ask 'hoe heet jij?'
        if naam is Hedy print 'leuk' else print 'minder leuk!'
    intro_text: |
        `ask` en `print` werken nog zoals in level 3.

        In level 4 is er iets nieuws, de `if`! If is Engels voor als. Met de `if` kun je een keuze maken tussen twee verschillende opties.

        ## Voorbeeld Hedy Code
        ```
        naam is ask 'hoe heet jij?'
        if naam is Hedy print 'leuk' else print 'minder leuk!'
        ```

        Deze code print leuk als je Hedy als naam invoert, en minder leuk als je iets anders invoert.

        Je mag `if` ook combineren met `in`, om te kijken of iets in een lijst zit.

        ## Voorbeeld Hedy Code
        ```
        mooie_kleuren is geel, rood
        kleur is ask 'Wat is jouw lievelingskleur?'
        if kleur in mooie_kleuren print 'mooi' else print 'meh!'
        ```

        Deze code print mooi als je geel of rood antwoordt, en anders meh!

        ## Tip
        Soms wordt code met een `if` erg lang en past het niet meer goed in het tekstvlak. Je mag dan een enter gebruiken en de code over twee regels verdelen. Begin dan de tweede regel met een `else`:
        ```
        naam is ask 'hoe heet jij?'
        if naam is Hedy print 'leuk'
        else print 'minder leuk!'
        ```

        ## Opdrachten worden steeds moeilijker

        Ook in level 4 worden de opdrachten in de tabjes steeds iets moeilijker. Doe ze dus van links naar rechts.
    commands:
    -   name: "if"
        explanation: "Een keuze maken met `if`"
        example: "Bijvoorbeeld: if kleur is groen print 'mooi!' else print 'niet zo mooi'"
        demo_code: |-
            kleur is ask 'Wat is je lievelingskleur?'
            if kleur is groen print 'mooi!' else print 'niet zo mooi'
    -   name: "if met turtle"
        explanation: "Een keuze maken met `if`"
        example: "Bijvoorbeeld: if antwoord is ver forward 100 else forward 5"
        demo_code: |-
            antwoord is ask 'Hoe ver moet ik lopen?'
            if antwoord is ver forward 100 else forward 5
6:
    start_code: "print '5 keer 5 is ' 5 * 5"
    intro_text: |
        `ask`, `print` en `if` werken nog zoals in level 4.
        Maar in Level 5 is er iets nieuws, je kunt nu ook rekenen.

        De plus is makkelijk, die schrijf je zoals bij rekenen: `5 + 5` bijvoorbeeld. De min gaat ook goed, dat is `5 - 5`.

        De keer is een beetje anders, want er zit namelijk geen keer op je toetsenbord. Zoek maar eens, die is er echt niet!
        Daarom doen we de keer met het sterretje boven de 8: `5 * 5`. Lees dat maar als "5 keer 5", dan onthoud je het het makkeljkst.
        ## Voorbeeld Hedy code
        ```
        print '5 plus 5 is ' 5 + 5
        print '5 min 5 is ' 5 - 5
        print '5 keer 5 is ' 5 * 5
        ```
    commands:
    -   name: "print"
        explanation: "Iets letterlijk printen met `print`."
        example: "Bijvoorbeeld: print '5 keer 5 is ' 5 * 5"
        demo_code: "print '5 keer 5 is ' 5 * 5"
    -   name: "`ask` en `if` samen met rekenen"
        explanation: "Het antwoord van een som vragen met `ask` en kijken of het goed is."
        example: "Bijvoorbeeld: antwoord is ask 'Hoeveel is 10 plus 10?'"
        demo_code: |-
            antwoord is ask 'Hoeveel is 10 plus 10?'
            if antwoord is 20 print 'Goedzo!' else print 'Foutje'
    -   name: "`ask` en `if` turtle"
        explanation: "De gebruiker vragen hoeveel hoeken hij wil"
        example: "Bijvoorbeeld: hoeken is ask 'hoeveel hoeken krijgt dit figuur?'"
        demo_code: |-
            hoeken is ask 'Hoeveel hoeken krijgt dit figuur?'
            hoek is 360 / hoeken
            forward 50
7:
    start_code: "repeat 3 times print 'Hedy is leuk!'"
    intro_text: |
        `ask`, `print` en `if` werken nog zoals in level 4 en 5.
        Maar in Level 6 is er iets nieuws: de `repeat`.
        Met `repeat` kun je codes een aantal keer herhalen.

        ## Voorbeeld Hedy code
        ```
        repeat 3 times print 'Hedy is leuk!'
        ```
    commands:
    -   name: "repeat"
        explanation: "Iets herhalen met `repeat`."
        example: "Bijvoorbeeld: repeat 3 times print 'Hedy is leuk!'"
        demo_code: |-
            repeat 3 times print 'Hedy is leuk!'
    -   name: "repeat - turtle"
        explanation: "Een regel code herhalen met `repeat`."
        example: "Bijvoorbeeld: repeat 3 times forward 10"
        demo_code: |-
            repeat 3 times forward 10
8:
    start_code: |-
        repeat 5 times
            print 'Hallo allemaal'
            print 'Dit wordt allemaal 5 keer herhaald'
    intro_text: |
        `ask` en `print` werken nog zoals eerst, maar `if` en `repeat` zijn nu veranderd!
        Je kunt nu meerdere regels samen herhalen. Dan moet je de regels die herhaald worden wel inspringen,
        dat betekent dat ze moeten beginnen met vier spaties.
        Ook als je maar één regel wilt herhalen moet je inspringen!
        ## Voorbeeld Hedy code
        ```
        repeat 5 times
            print 'Hallo allemaal'
            print 'Dit wordt allemaal 5 keer herhaald'
        ```

    commands:
    -   name: "`if` met meerdere regels"
        explanation: "Het antwoord van een som vragen met `ask` en kijken of het goed is. Nu printen we twee regels uit."
        example: "Bijvoorbeeld: antwoord is ask 'Hoeveel is 10 plus 10?'"
        demo_code: |-
            antwoord is ask 'Hoeveel is 10 plus 10?'
            if antwoord is 20
                print 'Goedzo!'
                print 'Het antwoord was inderdaad ' antwoord
            else
                print 'Foutje'
                print 'Het antwoord moest zijn 20'
    -   name: "`repeat` met de turtle"
        explanation: "Meerdere regels samen herhalen"
        example: "Bijvoorbeeld: een vierkant maken"
        demo_code: |-
            repeat 4 times
                turn 90
                forward 50
9:
    start_code: |-
        repeat 3 times
            eten is ask 'Wat wil je bestellen?'
            if eten is pizza
                print 'lekker'
            else
                print 'pizza is lekkerder'
    intro_text: |
        In dit level kun je niet alleen meerdere regels gebruiken bij `if` en `repeat`, maar je kunt ze ook nog eens in elkaar zetten!
        In het voorbeeldje zie je een if commando in een repeat commando staan. Andersom mag het ook en een if mag ook in een if en een repeat in een repeat.
        Probeer het maar eens!

        ## Voorbeeld Hedy code
        ```
        repeat 3 times
            eten is ask 'Wat wil je bestellen?'
            if eten is pizza
                print 'lekker'
            else
                print 'pizza is lekkerder'
        ```

    commands:
    -   name: "`if` met meerdere regels"
        explanation: "Het antwoord van een som vragen met `ask` en kijken of het goed is. Nu printen we twee regels uit."
        example: "Bijvoorbeeld: antwoord is ask 'Hoeveel is 10 plus 10?'"
        demo_code: |-
            antwoord is ask 'Hoeveel is 10 plus 10?'
            if antwoord is 20
                print 'Goedzo!'
                print 'Het antwoord was inderdaad ' antwoord
            else
                print 'Foutje'
                print 'Het antwoord moest zijn 20'
    -   name: "`repeat` met de turtle"
        explanation: "Meerdere regels samen herhalen"
        example: "Bijvoorbeeld: een vierkant maken"
        demo_code: |-
            repeat 4 times
                turn 90
                forward 50
10:
    start_code: |-
        dieren is hond, kat, papegaai
        for dier in dieren
          print dier ' is een leuk dier!'
    intro_text: |
        In dit level leren we een nieuwe code, de code `for`. Met `for` kun je alle dingen in een lijstje gebruiken.
        `for` mag meerdere regels gebruiken, net zoals de `repeat` and `if`, dus alle regels eronder moeten met spaties beginnen.

        ## Voorbeeld Hedy code
        ```
        dieren is hond, kat, papegaai
        for dier in dieren
          print dier ' is een leuk dier!'
        ```
    commands:
    -   name: "for met een lijst"
        explanation: "Alle dingen in een lijstje printen "
        example: "Bijvoorbeeld: for dier in dieren"
        demo_code: |-
            dieren is hond, kat, papegaai
            for dier in dieren
              print dier
11:
    start_code: |-
        for i in range 1 to 10
            print i
        print 'Wie niet weg is is gezien'
    intro_text: We gaan nu een extra vorm van de `for` toevoegen! Je mag ook `for i in range 1 to 5` typen in plaats van `repeat 5 times`. Het leuke is dat je die variabele `i` ook in je programma kan gebruiken! Je moet nog steeds alle regels die herhaald worden inspringen (dat betekent dat ze moeten beginnen met vier spaties)

    commands:
    -   name: "for met i"
        explanation: "`for` met getallen"
        example: "for i in range 1 to 10"
        demo_code: |
            for i in range 1 to 10
                print i
            print 'Wie niet weg is is gezien'
12:
    start_code: |-
        print 'kommagetallen gaan met een punt!'
        print 2.5 + 2.5
    intro_text: |
        Tot nu toe mocht je nog geen kommagetallen gebruiken zoals bijv anderhalf, maar nu wel!
        Let wel heel goed op... kommagetallen gaan op de computer met een punt en niet met een komma.

        ## Voorbeeld Hedy code
        ```
        print 'Kommagetallen gaan met een punt!'
        print 2.5 + 2.5
        ```

        ## Tekst moet altijd met aanhalingstekens
        Nu we verder zijn met programmeren moet je ook weten dat tekst altijd tussen aanhalingstekens hoort. Ook in de `is`.

        ```
        naam is 'Hedy'
        print 'Hallo ' naam
        ```

        Maar, zoals je ziet gaan variabelen, zoals naam, wel zonder aanhalingstekens. We bedoelen immers niet het woordje 'naam'.

        Alleen bij getallen gebruik je geen aanhalingstekens in de `is`:
        ```
        score is 25
        print 'Jij hebt ' score ' gehaald!'
        ```



    commands:
    -   name: "assign text"
        explanation: "Opslaan van tekst met is"
        example: "naam is 'Hedy'"
        demo_code: |
            naam is 'Hedy'
            print 'Hallo ' naam
    -   name: "float directly"
        explanation: "Een som met kommagetallen"
        example: "print 2.5 + 2.5"
        demo_code: |
            print 'Rekenen maar!'
            print 'Tweeenhalf plus tweeenhalf is...'
            print 2.5 + 2.5
    -   name: "float in var"
        explanation: "Een som met kommagetallen opslaan"
        example: "antwoord is 2.5 + 2.5"
        demo_code: |
            antwoord is 2.5 + 2.5
            print 'Rekenen maar!'
            print 'Tweeenhalf plus tweeenhalf is...'
            print antwoord

13:
    start_code: |-
        naam is ask 'hoe heet jij?'
        leeftijd is ask 'hoe oud ben jij?'
        if naam is 'Hedy' and leeftijd is 2
            print 'Jij bent de echte Hedy!'
    intro_text: "We gaan nu `and` en `or` gebruiken! Als je twee dingen wilt checken hoef je niet meer twee ifjes in elkaar te doen maar kan je nu `and` gebruiken. Beide dingen in de `if` moeten waar zijn als je een `and` gebruikt. We kunnen ook `or` gebruiken. Daarbij moet er één van de twee waar zijn."
    commands:
    -   name: "And"
        explanation: "`And` is dus en. Beide dingen links en rechts van de `and` moeten waar zijn."
        example: "if 3+2 is 5 and 2+2 is 4"
        demo_code: |-
            antwoord1 is ask 'hoeveel is 3+2?'
            antwoord2 is ask 'hoeveel is 2+2?'
            if antwoord1 is 5 and antwoord2 is 4
                print 'beide antwoorden zijn goed!'
            else
                print 'Minimaal 1 antwoord is fout!'
    -   name: "Or"
        explanation: "`Or` is dus of. Minimaal 1 van de 2 tussen de `or` moet goed zijn. Allebei goed mag ook."
        example: "if 3+2 is 5 or 2+2 is 4"
        demo_code: |-
            antwoord1 is ask 'hoeveel is 3+2?'
            antwoord2 is ask 'hoeveel is 2+2?'
            if antwoord1 is 5 or antwoord2 is 4
                print 'Je hebt minimaal 1 antwoord goed!'
            else
                print 'Beide antwoorden zijn fout!'



14:
    start_code: |-
        leeftijd is ask 'Hoe oud ben jij?'
        if leeftijd < 13
            print 'Dan ben je jonger dan ik!'
        else
            print 'Dan ben je ouder dan ik!'
    intro_text: "We gaan nieuwe tekens leren, je kent ze misschien wel van rekenen/wiskunde, `<` en `>`. De `<` kijkt of het eerste getal kleiner is dan de tweede zoals `4 < 5`. De `>` kijkt of iets groter is dan het tweede getal zoals `6 > 5`."
    commands:
    -   name: "Kleiner"
        explanation: "De `<` kijkt dus of het eerste getal kleiner is dan het tweede getal. Als je wilt kijken of een variabele kleiner is dan 15 gebruik je `variabele < 15`"
        example: "Bijvoorbeeld: leeftijd < 13"
        demo_code: |-
            leeftijd is ask 'Hoe oud ben jij?'
            if leeftijd < 13
                print 'Dan ben je jonger dan ik!'
    -   name: "Groter"
        explanation: "De `>` kijkt dus of het eerste getal groter is dan het tweede getal. Als je wilt kijken of een variabele groter is dan 15 gebruik je `variabele > 15`"
        example: "Bijvoorbeeld: leeftijd > 13"
        demo_code: |-
            leeftijd is ask 'Hoe oud ben jij?'
            if leeftijd > 13
                print 'Dan ben je ouder dan ik!'

15:
    start_code: |-
        antwoord is 0
        while antwoord != 25
            antwoord is ask 'Wat is 5 keer 5?'
        print 'Goed gedaan!'
    intro_text: "Nu gaan we een nieuwe loop leren: De `while` loop! We gaan door zo lang het statement dat we hebben waar is! Dus bij de voorbeeldcode gaan we door totdat er een goed antwoord is gegeven. Als er nooit een goed antwoord wordt gegeven, dan stopt de loop nooit!"
    commands:
    -   name: "While"
        explanation: "We kunnen dus een `while` loop gebruiken"
        example: "Bijvoorbeeld: while antwoord is != 25"
        demo_code: |-
            antwoord is 0
            while antwoord != 25
                antwoord is ask 'Wat is 5 keer 5?'
            print 'Goed gedaan!'
    -   name: "Smaller while"
        explanation: "We kunnen een `while` loop ook gebruiken met `<` en `>`. Let wel op dat je het getal ooit groter maakt. Anders ga je de loop nooit uit"
        example: "Bijvoorbeeld: while tel < 3"
        demo_code: |-
            tel is 1
            while tel < 3
                print 'Dit is de ' tel 'e keer'
                tel is tel + 1
            print 'We zijn klaar'

16:
    start_code: |-
        fruit is ['appel', 'banaan', 'kers']
        print fruit 
    intro_text: |-
        We zijn aangekomen bij de laatste paar Hedy levels. We komen dus steeds dichter bij echte Pythoncodes.
        In dit level gaan we leren hoe je lijsten maakt op de Pythonmanier. dat werkt met vierkante haakjes zetten om lijstjes, dat zijn deze: [ en ].
        Als we woorden in de lijst willen zetten, moeten we om de woorden ook enkele aanhalingstekens zetten. Bij getallen hoeft dat niet.
        We kunnen in dit level ook met een getal plekken in lijstjes aanwijzen.

        #Voorbeeld Hedy code
        ```
        vrienden is ['Ahmed', 'Ben', 'Cayden']
        geluksgetallen is [15, 18, 6]
        for i in range 1 to 3
           print 'het geluksgetal van ' vrienden[i]
           print 'is ' geluksgetallen[i]
        ```

    commands:
    -   name: "Haakjes om lijstjes"
        explanation: "We gaan nu haakjes om lijstjes heen zetten! Let ook op de enkele aanhalingstekens om items in het lijstje!"
        example: "Bijvoorbeeld: fruit is ['appel', 'banaan', 'kers']"
        demo_code: |-
            fruit is ['appel', 'banaan', 'kers']
            print fruit 
    -   name: "Pak iets uit een lijst"
        explanation: "Om een item uit een lijst te krijgen gebruiken we [nummer] dus met fruit[1] krijg je de eerste fruit uit de lijst !"
        example: "Bijvoorbeeld: eerstefruit is fruit[1]"
        demo_code: |-
            fruit is ['banaan', 'appel', 'kers']
            eerstefruit is fruit[1]
            print eerstefruit 
    -   name: "Pak een random item uit een lijst"
        explanation: "Om een random item uit een lijst te pakken, gebruiken we [random]. Dus fruit[random] is pak een random fruit uit de lijst!"
        example: "Bijvoorbeeld: randomfruit is fruit[random]"
        demo_code: |-
            fruit is ['banaan', 'appel', 'kers']
            randomfruit is fruit[random]
            print randomfruit 



17:
    start_code: |-
        for i in range 1 to 10:
            print i
        print 'Wie niet weg is is gezien'
    intro_text: "Nu veranderen we nog een klein stukje dat te maken heeft met het inspringen. Elke keer dat we gaan inspringen moeten we een : bij de regel ervoor zetten."
    commands:
    -   name: "for met :"
        explanation: "Bij `for` moet je dus een `:` er achter zetten!"
        example: "for i in range 1 to 10:"
        demo_code: |-
            for i in range 1 to 10:
                print i
            print 'wie niet weg is is gezien'
    -   name: "if met :"
        explanation: "We moeten hetzelfde doen met al onze `if` statements"
        example: "if kleur is groen:"
        demo_code: |-
            kleur is ask 'Wat vind jij de mooiste kleur?'
            if kleur is groen:
                print 'Jouw kleur is groen'
            else:
                print 'Jouw kleur is zeker niet groen'
    -   name: "elif"
        explanation: "Verder is er een nieuw commando dat je mag gebruiken: `elif`. `elif` is eigenlijk else if. Je kijkt dus eerst naar `if` en als die niet waar is dan probeer je `elif` en als die niet waar is dan ga je naar de `else`."
        example: "elif a is 5:"
        demo_code: |-
            a is 2
            if a is 1:
                print 'a is 1'
            elif a is 2:
                print 'a is 2'
            else:
                print 'a is niet 1 of 2'
#21:
#    start_code: |-
#        print('Hoeveel is 5+3?')
#        antwoord = 5+3
#        print('antwoord is nu:')
#        print(antwoord)
#        if antwoord == 8:
#            print('Dat is goed!')
#        else:
#            print('Helaas dat is fout!')
#    intro_text: "Nu veranderen we is in `=` en `==`. Je gebruikt `=` als je iets een getal wilt maken. Als je bijvoorbeeld antwoord 8 wilt maken zeg je antwoord = 8. `==` gebruik je om te kijken of twee dingen hetzelfde zijn."
#    commands:
#    -   name: "Vergelijken"
#        explanation: "Als we gaan vergelijken gebruiken we dus ==. 5+3 == 8 kijkt dus of 5+3 gelijk is aan 8"
#        example: "Bijvoorbeeld: 5+3 == 8"
#        demo_code: |-
#            if 5+3 == 8:
#                print('5+3 is inderdaad 8')
#            else:
#                print('Dit wordt niet geprint want 5+3 is 8!')
#    -   name: "Waarde geven"
#        explanation: "Als we willen zeggen dat een variabele genaamd antwoord 8 is, dan doen we antwoord = 8."
#        example: "Bijvoorbeeld: antwoord = 8"
#        demo_code: |-
#            print('Hoeveel is 5+3?')
#            antwoord = 5+3
#            print('antwoord is nu:')
#            print(antwoord)
#    -   name: "Vergelijken en waarde geven"
#        explanation: "Als we gaan vergelijken gebruiken we dus `==`. Als we een waarde geven dan gebruiken we `=`. "
#        example: "Bijvoorbeeld: antwoord == 8, antwoord = 8"
#        demo_code: |-
#            print('Hoeveel is 5+3?')
#            antwoord = 5+3
#            print('antwoord is nu:')
#            print(antwoord)
#            if antwoord == 8:
#                print('Dat is goed!')
#            else:
#                print('Helaas dat is fout!')