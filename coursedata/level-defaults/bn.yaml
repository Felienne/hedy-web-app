1:
    intro_text: "рж╕рзНржмрж╛ржЧржд рж╣рзЗржбрж┐рждрзЗ! рж╕рзНрждрж░ 1 ржПржХрзЗ ржЖржкрж╛ржирж┐ `print` `ask` ` echo` ржирж┐рж░рзНржжрзЗрж╢рзЗрж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ  ржкрж╛рж░ржмрзЗржи | ржирзАрж▓ ржмрзЛрждрж╛ржоржЯрж╛  ржЪрж╛ржкрж╛ ржорж╛рждрзНрж░ржЗ  ржЖржкржирж╛рж░ ржХрзЛржб ржЖржкржирж╛рж░ ржЬржирзНржп ржЯрж╛ржЗржк рж╣ржпрж╝рзЗ ржпрж╛ржмрзЗ| ржирж┐ржЬрзЗ ржерзЗржХрзЗ ржХрзЛржбржЯрж╛ ржЪрзЗрж╖рзНржарж╛ ржХрж░рзБржи ржкрзНрз░рзЛржЧрзНрж░рзНржпрж╛ржорж┐ржВ ржХрзНрж╖рзЗрждрзНрж░рждрзЗ ржирж┐ржЪрзЗ ржмрж╛ржжрж┐ржХрзЗ рж╕ржмрзБржЬ тАЬ Run the Code тАЬ ржмрзЛрждрж╛ржоржЯрж╛ ржЪрзЗржкрзЗ "
    start_code: "print рж╣рзНржпрж╛рж▓рзЛ  ржмрж┐рж╢рзНржм !"
    commands:
    -   name: "print"
        explanation: "ржХрж┐ржЫрзБ `print` ржХрж░рж╛рж░ ржерж╛ржХрж▓рзЗ `print` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи"
        example: "ржЙржжрж╛рж╣рж░ржг: print рж╣рзЗржбрж┐рждрзЗ ржЖржкржирж╛рж░ рж╕рзНржмрж╛ржЧржд!"
        demo_code: "print рж╣рзЗржбрж┐рждрзЗ ржЖржкржирж╛рж░ рж╕рзНржмрж╛ржЧржд!"
    -   name: "ask"
        explanation: "ржХрж┐ржЫрзБ `ask` ржХрж░рж╛рж░ ржерж╛ржХрж▓рзЗ `ask` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи"
        example: "ржЙржжрж╛рж╣рж░ржг: ask ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝ рж░ржВ ржХрж┐ ?"
        demo_code: "ask ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝ рж░ржВ ржХрж┐ ?"
    -   name: "echo"
        explanation: "ржХрж┐ржЫрзБ ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐ ржХрж░рж╛рж░ ржерж╛ржХрж▓рзЗ `echo` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи"
        example: "ржЙржжрж╛рж╣рж░ржг: echo рждрзЛ ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝ рж░ржВ рж╣ржЪрзНржЫрзЗ"
        demo_code: |
            ask ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝ рж░ржВ ржХрж┐ ?
            echo рждрзЛ ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝ рж░ржВ рж╣ржЪрзНржЫрзЗ "
    -   explanation: print an emoji with `{print}`
        example: 'Example: {print} ЁЯЩЛтАН ЁЯМН тЭЧ'
        demo_code: '{print} ЁЯЩЛ ЁЯМН тЭЧ'
        name: '{print} emojis'
    -   example: 'Example: {forward} 100'
        demo_code: '{forward} 100'
        name: '{forward}'
        explanation: Draw a line with `{forward}`.
    -   name: '{turn}'
        explanation: turn the drawing turtle with `{turn}`
        example: 'Example: {turn}'
        demo_code: "{forward} 25\n{turn} left\n{forward} 25\n{turn} right"
    example_code: "## Example code\n```\n{print} Hello!\n{print} Welcome to Hedy!\n```\n"
    intro_text_2: "You can also ask for input and repeat it back with an `{echo}` command.\nTry the code to your left again.\n\nDon't know what to create? In the next tabs you will find ideas for programs to build.\n"
    example_code_2: "## Example code\n```\n{ask} What is your name?\n{echo} hello\n```\n"
2:
    intro_text: |-
        рж╕рзНрждрж░ 1 ржПржХрзЗ `print` ржпрзЗржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗржЫрзЗ  ржарж┐ржХ (рждржоржирж┐ ржнрж╛ржмрзЗржЗ ржХрж╛ржЬ ржХрж░ржмрзЗ |ржХрж┐ржирзНрждрзБ `ask` ржПржЦржи  ржмржжрж▓рзЗ ржЧрзЗржЫрзЗ| ржЖрж░ ржПржЦржи ржХрзЛржи ржирж╛ржорзЗрж░ ржкрзНрж░ржпрж╝рзЛржЬржи рж╣ржмрзЗ ,рждрж╛рж░ржкрж░ ржЖржкржирж┐ рж╕рзЗржЯрж┐ржХрзЗ print ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи  | `echo` ржЖрж░ ржкрзНрж░ржпрж╝рзЛржЬржи ржирзЗржЗ | ржЖржкржирж┐ ржПржЦржи ржПржЗ ржирж┐рж░рзНржжрзЗрж╢ ржЧрзБрж▓рзЛрж░ ржмрзНржпржмрж╣рж╛рж░, ржХрж░рждрзЗ ржкрж╛рж░рзЗржи
    start_code: "print  рж╣рзНржпрж╛рж▓рзЛ  ржмрж┐рж╢рзНржм !"
    commands:
    -   name: "is"
        explanation: "ржкрзНрж░рзЛржЧрзНрж░рж╛ржорзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЬржирзНржпрзЗ ржпрзЗ ржХрзЛржи рж╢ржмрзНржжржХрзЗ ржирж╛ржо ржжрж╛ржУ `is` ржмрзНржпржмрж╣рж╛рж░  ржХрж░рзЗ"
        example: "ржЙржжрж╛рж╣рж░ржг: ржирж╛ржо is  рж╣рзЗржбрж┐"
        demo_code: "ржирж╛ржо is  рж╣рзЗржбрж┐ \nprint рж╕рзНржмрж╛ржЧржд рж╣рзЗржбрж┐"
    -   name: "is"
        explanation: "ржХрж┐ржЫрзБ ask ржХрж░рж╛рж░ ржерж╛ржХрж▓рзЗ `ask` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи`. рж╕рж╛ржмржзрж╛ржи! ржЙрждрзНрждрж░ ржжрж┐рждрзЗ рж╣ржмрзЗ ржирж╛ржорзЗрж░ рж╕рж╛ржерзЗ `is` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ."
        example: "ржЙржжрж╛рж╣рж░ржг: рж░ржВ is ask ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝ рж░ржВ ржХрж┐?"
        demo_code: |
            рж░ржВ is ask ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝ рж░ржВ ржХрж┐?
            print рж░ржВ is ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝!
    -   name: '{sleep}'
        explanation: Let Hedy pause for a (couple of) second(s).
        example: 'Example: {sleep} 2 '
        demo_code: "{print} Let me think for one second...\n{sleep}\n{print} Hmm.. I need 3 more seconds...\n{sleep} 3\n{print} Eureka! Ive got it!"
    -   name: is - turtle
        explanation: Give a number a name using `{is}`. You can choose the name yourself.
        example: 'Example: angle {is} 90'
        demo_code: "angle {is} 90\n{turn} angle\n{forward} 100"
3:
    intro_text: "ржЖржкржирж┐ ржПржЦржи ржПржЗ ржирж┐рж░рзНржжрзЗрж╢ ржЧрзБрж▓рзЛрж░ ржмрзНржпржмрж╣рж╛рж░, ржХрж░рждрзЗ ржкрж╛рж░рзЗржи "
    start_code: "print  рж╣рзНржпрж╛рж▓рзЛ  ржмрж┐рж╢рзНржм !"
    commands:
    -   name: "рж▓ржХрзНрж╖рзНржпрж╣рзАржи ржнрж╛ржмрзЗ ржкржЫржирзНржж ржХрж░"
        explanation: "Choose a random word from a group with `at` and `random`"
        example: "ржЙржжрж╛рж╣рж░ржг: ржкрзНрж░рж╛ржгрзА рж╣рж▓ ржХрзБржХрзБрж░ ржмрж┐ржбрж╝рж╛рж▓ ржХрзНржпрж╛ржЩрзНржЧрж╛рж░рзБ"
        demo_code: |
            ржкрзНрж░рж╛ржгрзА is рж╣рж▓, ржХрзБржХрзБрж░, ржмрж┐ржбрж╝рж╛рж▓, ржХрзНржпрж╛ржЩрзНржЧрж╛рж░рзБ
            print ржкрзНрж░рж╛ржгрзА at random
    -   name: '{add}'
        explanation: add an item to a list
        example: 'Example: {add} dog {to_list} animals'
        demo_code: "animals {is} cow, cat\n{add} dog {to_list} animals"
    -   explanation: remove an item from a list
        demo_code: "animals {is} cat, dog, cow\n{remove} dog {from} animals"
        name: '{remove}'
        example: 'Example: {remove} dog {from} animals'
4:
    start_code: "print 'рж╣рзНржпрж╛рж▓рзЛ  ржмрж┐рж╢рзНржм !'"
    intro_text: "рж╕рзНрждрж░ 3 рждрж┐ржирзЗ `ask` ржарж┐ржХ ржПржХржЗ  ржнрж╛ржмрзЗржЗ ржХрж╛ржЬ ржХрж░ржмрзЗ, ржХрж┐ржирзНрждрзБ `print` ржПржЦржи  ржмржжрж▓рзЗ ржЧрзЗржЫрзЗ ржпрзЗ ржмрж╛ржХрзНржпржЯрж┐ ржЖржкржирж┐ print ржХрж░рждрзЗ ржЪрж╛ржи рж╕рзЗржЯрж┐ ржХрзЛржЯрзЗрж╢ржи ржЪрж┐рж╣рзНржирзЗрж░ ржнрзЗрждрж░рзЗ рж▓рж┐ржЦрждрзЗ рж╣ржмрзЗ"
    commands:
    -   name: "print"
        explanation: "рж╣рзБржмрж╣рзБ print ржХрж░рзБржи ржХрзЛржЯрзЗрж╢ржи ржЪрж┐рж╣рзНржи ржмрзНржпржмрж╣рж╛рж░  ржХрж░рзЗ "
        example: "ржЙржжрж╛рж╣рж░ржг: print 'рж╣рзНржпрж╛рж▓рзЛ рж╣рзЗржбрж┐рждрзЗ ржЖржкржирж╛рж░ рж╕рзНржмрж╛ржЧржд'"
        demo_code: "print 'рж╣рзНржпрж╛рж▓рзЛ рж╣рзЗржбрж┐рждрзЗ ржЖржкржирж╛рж░ рж╕рзНржмрж╛ржЧржд'"
    -   name: "is"
        explanation: "ржХрж┐ржЫрзБ ржкрж╛ржаржХрзЗ ржирж╛ржо ржжрж┐ржи ржПржмржВ ржХрзЛржЯрзЗрж╢ржи ржЪрж┐рж╣рзНржи ржЫрж╛ржбрж╝рж╛ print ржХрж░рзБржи"
        example: "ржЙржжрж╛рж╣рж░ржг: ржирж╛ржо is  рж╣рзЗржбрж┐"
        demo_code: "ржирж╛ржо is  рж╣рзЗржбрж┐ \nprint 'ржЖржорж╛рж░ ржирж╛ржо is ' ржирж╛ржо "
    -   name: "ask"
        explanation: "ржХрж┐ржЫрзБ ask ржХрж░рж╛рж░ ржерж╛ржХрж▓рзЗ `ask` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи"
        example: "ржЙржжрж╛рж╣рж░ржг:  рж░ржВ is ask 'ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝ рж░ржВ ржХрж┐?'"
        demo_code: |
            рж░ржВ is ask 'ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝ рж░ржВ ржХрж┐?'
            print рж░ржВ 'is ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝!'
5:
    start_code: |
        ржирж╛ржо is ask ржЖржкржирж╛рж░ ржирж╛ржо ржХрж┐?
        if ржирж╛ржо is рж╣рзЗржбрж┐ print 'ржнрж╛рж▓рзЛ!' else print 'ржоржирзНржж'
    intro_text: "рж╕рзНрждрж░ 3 рждрж┐ржирзЗрж░ ржорждржЗ `ask` ржЖрж░ `print` ржарж┐ржХ ржПржХржЗ  ржнрж╛ржмрзЗржЗ ржХрж╛ржЬ ржХрж░ржмрзЗ | рж╕рзНрждрж░ 4 ржЪрж╛рж░ ржерзЗржХрзЗ `if` ржпрзБржХрзНржд рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝"
    commands:
    -   name: "print"
        explanation: "рж╣рзБржмрж╣рзБ print ржХрж░рзБржи ржХрзЛржЯрзЗрж╢ржи ржЪрж┐рж╣рзНржи ржмрзНржпржмрж╣рж╛рж░  ржХрж░рзЗ"
        example: "ржЙржжрж╛рж╣рж░ржг: print 'рж╣рзНржпрж╛рж▓рзЛ рж╣рзЗржбрж┐рждрзЗ ржЖржкржирж╛рж░ рж╕рзНржмрж╛ржЧржд'"
        demo_code: "print 'рж╣рзНржпрж╛рж▓рзЛ рж╣рзЗржбрж┐рждрзЗ ржЖржкржирж╛рж░ рж╕рзНржмрж╛ржЧржд'"
    -   name: "ask"
        explanation: "ржХрж┐ржЫрзБ ask ржХрж░рж╛рж░ ржерж╛ржХрж▓рзЗ ` `ask` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи`."
        example: "ржЙржжрж╛рж╣рж░ржг: рж░ржВ is ask ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝ рж░ржВ ржХрж┐?"
        demo_code: |
            рж░ржВ is ask 'ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝ рж░ржВ ржХрж┐?'
            print рж░ржВ ' is ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝!'
    -   name: "if"
        explanation: "`if`ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржкржЫржирзНржж ржХрж░рзБржи "
        example: "ржЙржжрж╛рж╣рж░ржг: if рж░ржВ рж╕ржмрзБржЬ рж╣ржпрж╝  print 'рж╕рзБржирзНржжрж░!' ржирж╛рж╣рж▓рзЗ print 'ржоржирзНржж'"
        demo_code: |
            рж░ржВ is ask 'ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝ рж░ржВ ржХрж┐?'
            if рж░ржВ is рж╣ржпрж╝ print 'рж╕рзБржирзНржжрж░!' else print 'ржоржирзНржж'
    -   name: '{if} with turtle'
        explanation: Make a choice with `{if}`
        example: 'Example: {if} answer {is} far {forward} 100 {else} {forward} 5'
        demo_code: "answer {is} {ask} 'How far should I walk?'\n{if} answer {is} far {forward} 100 {else} {forward} 5"
    -   example: "Example: {if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
        demo_code: "pretty_colors {is} green, yellow\ncolor {is} {ask} 'What {is} your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
        name: '{in}'
        explanation: Check elements with `{in}`
6:
    start_code: "print '5 ржмрж╛рж░ 5 is  ' 5 * 5"
    intro_text: " рж╕рзНрждрж░ 4 ржЪрж╛рж░ ржПржмржВ ржкрж╛ржБржЪрзЗ `ask`, `print` ржПржмржВ  `if` ржарж┐ржХ ржПржХржЗ  ржнрж╛ржмрзЗржЗ ржХрж╛ржЬ ржХрж░ржмрзЗ. рж╕рзНрждрж░ 5  ржЫржпрж╝рзЗ ржПржХржЯрж╛ ржирждрзБржи ржирж┐рж░рзНржжрзЗрж╢ ржпрзБржХрзНржд рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝.. ржЖржкржирж┐ ржПржЦржи ржЧржгржгрж╛ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи"
    commands:
    -   name: "print"
        explanation: "рж╣рзБржмрж╣рзБ print ржХрж░рзБржи ржХрзЛржЯрзЗрж╢ржи ржЪрж┐рж╣рзНржи ржмрзНржпржмрж╣рж╛рж░  ржХрж░рзЗ"
        example: "ржЙржжрж╛рж╣рж░ржг: print '5 ржмрж╛рж░ 5 is ' 5 * 5"
        demo_code: "print  '5 ржмрж╛рж░ 5 is ' 5 * 5"
    -   name: " ask` ржПржмржВ `if` ржЧржгржирж╛ рж╕рж╣"
        explanation: "ржПржХржЯрж┐ ржЧржгржирж╛ ask ржХрж░рзБржи ржПржмржВ рждрзНрж░ржЯрж┐ рж╕ржарж┐ржХ ржХрж┐ржирж╛ рждрж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи."
        example: "ржЙржжрж╛рж╣рж░ржг: ржЙрждрзНрждрж░ рж╣рж▓ ask ржХрж░рзБржи 10 ржкрзНрж▓рж╛рж╕ 10 ржХрж┐?"
        demo_code: |
            ржЙрждрзНрждрж░ = ask 'ржХрж░рзБржи 10 ржкрзНрж▓рж╛рж╕ 10 ржХрж┐?'
            if ржЙрждрзНрждрж░ is 20 print 'рж╕ржарж┐ржХ!' else print 'ржнрзБрж▓'
    -   name: "`ask` and `if` turtle"
        explanation: "Ask the user how many angles they want"
        example: "Example: angles = ask 'How many angles?'"
        demo_code: |-
            angles = ask 'How many angles?'
            angle = 360 / angles
            forward 50
7:
    start_code: |
        repeat 3 times print 'рж╣рзЗржбрж┐ ржоржЬрж╛ржжрж╛рж░!'
    intro_text: "рж╕рзНрждрж░ 4 & 5 ржЪрж╛рж░рзЗрж░ ржорждржЗ  ask,`if` ржЖрж░ `print` ржарж┐ржХ ржПржХржЗ  ржнрж╛ржмрзЗржЗ ржХрж╛ржЬ ржХрж░ржмрзЗ | рж╕рзНрждрж░ 6  ржерзЗржХрзЗ тАЬржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐тАЭ ржпрзБржХрзНржд рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝ тАЬржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐тАЭ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи ржпрзЗ ржХрзЛржи ржмрж╛ржХрзНржп ржПржХрж╛ржзрж┐ржХржмрж╛рж░ ржПржХрзНрж╕рж┐ржХрж┐ржЙржЯ ржХрж░рж╛рж░ ржЬржирзНржпрзЗ"
    commands:
    -   name: "print"
        explanation: "рж╣рзБржмрж╣рзБ print ржХрж░рзБржи ржХрзЛржЯрзЗрж╢ржи ржЪрж┐рж╣рзНржи ржмрзНржпржмрж╣рж╛рж░  ржХрж░рзЗ"
        example: "ржЙржжрж╛рж╣рж░ржг: print 'рж╣рзНржпрж╛рж▓рзЛ рж╣рзЗржбрж┐рждрзЗ ржЖржкржирж╛рж░ рж╕рзНржмрж╛ржЧржд'"
        demo_code: "print 'рж╣рзНржпрж╛рж▓рзЛ рж╣рзЗржбрж┐рждрзЗ ржЖржкржирж╛рж░ рж╕рзНржмрж╛ржЧржд'"
    -   name: "ask"
        explanation: "ржХрж┐ржЫрзБ ask ржХрж░рж╛рж░ ржерж╛ржХрж▓рзЗ  `ask` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи`."
        example: "ржЙржжрж╛рж╣рж░ржг:  рж░ржВ = ask 'ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝ рж░ржВ ржХрж┐?'"
        demo_code: |
            рж░ржВ = ask 'ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝ рж░ржВ ржХрж┐?'
            print рж░ржВ 'is ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝!'
    -   name: "if"
        explanation: "`if`ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржкржЫржирзНржж ржХрж░рзБржи "
        demo_code: |
            рж░ржВ = ask 'ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝ рж░ржВ ржХрж┐?'
            if рж░ржВ is рж╣ржп print 'рж╕рзБржирзНржжрж░!' else print 'ржоржирзНржж'
        example: "Example: {if} color {is} green {print} 'pretty!' {else} {print} 'meh'"
    -   name: "repeat"
        explanation: "`repeat` ржПржмржВ `if` рж╕ржорзНржорж┐рж▓рж┐ржд"
        example: "ржЙржжрж╛рж╣рж░ржг: if рж░ржВ рж╕ржмрзБржЬ рж╣ржпрж╝ print 'рж╕рзБржирзНржжрж░ 3 ржмрж╛рж░ repeat ржирж╛рж╣рж▓рзЗ print 'ржоржирзНржж' 5 ржмрж╛рж░ repeat"
        demo_code: |
            рж░ржВ = ask 'ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржпрж╝ рж░ржВ ржХрж┐?'
            if рж░ржВ is рж╣ржпрж╝ repeat 3 times print 'рж╕рзБржирзНржжрж░' else repeat 5 times print 'ржоржирзНржж'
8:
    start_code: |
        repeat 5 times
            print 'ржУрж╣рзЗ ржмржирзНржзрзБрж░рж╛'
            print 'ржПржЯрж┐ ржкрж╛ржБржЪ ржмрж╛рж░ ржорзБржжрзНрж░ржг ржХрж░рж╛ рж╣ржмрзЗ'
    intro_text: " ask ржПржмржВ print ржарж┐ржХ ржПржХржЗ ржнрж╛ржмрзЗржЗ ржХрж╛ржЬ ржХрж░ржмрзЗ. ржХрж┐ржирзНрждрзБ if ржПржмржВ repeat ржкрж░рж┐ржмрж░рзНрждрж┐ржд рж╣ржпрж╝рзЗржЫрзЗ! ржЖржкржирж┐ ржПржЦржи ржХрзЛржбрзЗрж░ ржЧрзНрж░рзБржк ржЧрзБрж▓рзЛржХрзЗ ржПржХрж╕рж╛ржерзЗ ржПржХрзНрж╕рж┐ржХрж┐ржЙржЯ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи , рждржмрзЗ ржЖржкржирж╛ржХрзЗ ржХрзЛржбржЯрж┐ржХрзЗ ржЗржирзНржбрзЗржгрзНржЯ ржХрж░рждрзЗ рж╣ржмрзЗ . рждрж╛рж░ ржорж╛ржирзЗ рж▓рж╛ржЗржирзЗрж░ рж╢рзБрж░рзБрждрзЗ ржЪрж╛рж░ржЯрж╛ рж╕рзНржкрзЗрж╢ ржжрзЗржУржпрж╝рж╛. ржПржХржЯрж┐ рж▓рж╛ржЗржирзЗрж░ ржмрзНрж▓ржХ рждрзИрж░рж┐ ржХрж░рзЗрждрзЗ ржЪрж╛ржЗрж▓рзЗржУ ржарж┐ржХ ржПржХржЗ ржХрж╛ржЬ ржХрж░рждрзЗ рж╣ржмрзЗ\tif ржЖржкржирж┐ ржПржХржЯрж┐  `ржкрзБржирж░рж╛ржмрзГрждрзНрждрж┐` ржПржмржВ ржПржХржЯрж┐  `if ` ржПржХрждрзНрж░рж┐ржд ржХрж░рждрзЗ ржЪрж╛ржи ржЖржкржирж╛ржХрзЗ ржкрзНрж░рждрзНрж░рзЗржХржЯрж┐ ржмрзНрж▓ржХ ржЗржирзНржбрзЗржгрзНржЯ ржХрж░рждрзЗ рж╣ржмрзЗ.  ржЖрж░ржУ ржмрж┐рж╢ржжрзЗрж░ ржЬржирзНржпрзЗ ржЙржжрж╛рж╣рж░ржг ржХрзЛржбржЯрж┐ ржжрзЗржЦрзБржи!"
    commands:
    -   name: "print"
        explanation: "ржХрж┐ржЫрзБ ржПржХржЯрж╛  print ржХрж░рзЛ . ржоржирзЗ рж░рж╛ржЦржмрзЗржи ржЖрж╣рзНржорж░рж┐ржХ ржорзБржжрзНрж░ржирзЗрж░ ржЬржирзНржп ржХрзЛржЯрзЗрж╢ржи ржЪрж┐рж╣рзНржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ рж╣ржмрзЗ"
        example: "ржЙржжрж╛рж╣рж░ржг: print '5 ржмрж╛рж░ 5 is ' 5 * 5"
        demo_code: "print '5 ржмрж╛рж░ 5 is ' 5 * 5"
    -   name: "`if` ржПржХрж╛ржзрж┐ржХ рж▓рж╛ржЗржи рж╕рж╣"
        explanation: "ржПржХржЯрж┐ ржЕржЩрзНржХрзЗрж░ ржЙрждрзНрждрж░ ask ржХрж░рзБржг ржПржмржВ ржПржЯрж┐ рж╕ржарж┐ржХ ржХрж┐ржирж╛ рждрж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи ржЖржорж░рж╛ ржПржЦржи 2  рж▓рж╛ржЗржи print ржХрж░рждрзЗ ржкрж╛рж░рж┐."
        example: "ржЙржжрж╛рж╣рж░ржг: ржЙрждрзНрждрж░ рж╣рж▓ ask ржХрж░рж╛ рж╣ржпрж╝ 5 ржкрзНрж▓рж╛рж╕ 5 ржХрж┐?"
        demo_code: |-
            ржЙрждрзНрждрж░ = ask 'ржХрж░рж╛ рж╣ржпрж╝ 5 ржкрзНрж▓рж╛рж╕ 5 ржХрж┐?'
            if ржЙрждрзНрждрж░ is 10
                print 'рж╕рж╛ржмрж╛рж╢ !'
                print 'ржЖрж╕рж▓рзЗржЗ ржЙрждрзНрждрж░ржЯрж┐'
            else
                print 'ржЙржл!'
                print 'рж╕ржарж┐ржХ ржЙрждрзНрждрж░ 10'
    -   example: 'Example: draw a square'
        demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
        name: '`{repeat}` with turtle'
        explanation: '{repeat} multiple lines'
9:
    commands:
    -   explanation: The answer of a sum of questions with '{ask}' and see if it is correct. Now we print out two lines.
        example: "Example: answer = {ask} 'What is 20 plus 20?'"
        demo_code: "answer = {ask} 'What is 20 plus 20?'\n{if} answer {is} 20\n    {print} 'Well done!!'\n    {print} 'The answer is indeed' answer\nelse\n    {print} 'Wrong'\n    {print} 'The answer is 20'"
        name: '`{if}` with multiple lines'
    -   example: 'Example: create a square'
        demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
        name: '`{repeat}` and turtle'
        explanation: '{repeat} multiple lines'
    start_code: "{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} 'pizza'\n        {print} 'nice!'\n    else\n        {print} 'pizza is better'"
    intro_text: "In this level you can not only use multiple lines with `{if}` {and} `{repeat}`, but you can also put them together!\nIn the example you see an `{if}` command within a `{repeat}` command. It is also allowed the other way around, and an `{if}` is also allowed in an `{if}` and a `{repeat}` in a `{repeat}`.\nGive it a try!\n\n## Example Hedy code\n```\n{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} 'pizza'\n        {print} 'nice!'\n    else\n        {print} 'pizza is better'\n```\n"
10:
    commands:
    -   name: '{print}'
        explanation: print something. Remember to use a quotation mark for literal printing.
        example: "Example: {print} '5 times 5 is ' 5 * 5"
        demo_code: "{print} '5 times 5 is ' 5 * 5"
    -   name: '{for} with a list'
        explanation: 'print all things in a list '
        example: 'Example: {for} animal {in} animals'
        demo_code: "animals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal"
    start_code: "animals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal"
    intro_text: "In this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.\n`{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with spaces.\n\n## Example Hedy code\n```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal\n```\n"
11:
    commands:
    -   name: '{for} loop'
        explanation: We can use `{for}` with a {range}
        example: for counter {in} {range} 1 {to} 5
        demo_code: "{for} counter {in} {range} 1 {to} 5\n    {print} counter"
    -   name: '{ask}'
        explanation: ask for the answer to a sum and check if it is correct. We can now print 2 lines.
        example: "Example: answer = {ask} 'What is 5 plus 5?'"
        demo_code: "answer = {ask} 'What is 5 plus 5?'\n{if} answer {is} 10\n    {print} 'Well done!'\n    {print} 'Indeed, the answer was ' answer\nelse\n    {print} 'Oops!'\n    {print} 'The answer is 10'"
    start_code: "{for} counter {in} {range} 1 {to} 5\n    {print} counter"
    intro_text: '`{print}` works just the same but the we add a new form of the `{for}`. You can now write `{for} counter {in} {range} 1 {to} 5` and use `counter` in your program. Try it out to see what happens! Remember to use indentations after the `{for}` and `{if}` statements (That means starting a sentence with four spaces)'
12:
    commands:
    -   explanation: Decimal numbers
        name: float directly
        example: '{print} 2.5 + 2.5'
        demo_code: "{print} 'Calculate away!'\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n"
    -   name: assign text
        example: name = 'Hedy'
        demo_code: "name = 'Hedy the Robot'\n{print} 'Hello ' name\n"
        explanation: Text with quotation marks after =
    -   example: name = 'Hedy'
        name: quotes after {if} comparison
        explanation: Text with quotation marks after {if}
        demo_code: "name = {ask} 'Who are you?'\n{if} name = 'Hedy'\n    {print} 'Hi there!'\n"
    -   explanation: A list with quotation marks
        example: name = 'Hedy', 'Felienne'
        name: quotes in list
        demo_code: "superheroes = 'Iron Man', 'Batman', 'Superman'\n{print} superheroes {at} {random}\n"
    start_code: "{print} 'decimal numbers now need to use a dot'\n{print} 2.5 + 2.5"
    intro_text: "## Decimal numbers\nSo far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.\n```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n## All texts need to be in quotation marks\nFor this level on you will also have to use quotation marks when storing a text with `=`:\n\n```\nname = 'Hedy the Robot'\n{print} 'Hello ' name\n```\n## All items in lists need quotation marks too\nLists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.\nThis allows you to save two words as 1 item on the list, for example 'Iron Man'.\n\n```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n## All text after `{if}` comparisons need quotation marks too\n```\nname = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n## Numbers don't need quotation marks\n{for} numbers, you do not use quotation marks in the `=`:\n```\nscore = 25\n{print} 'You got ' score\n```\n"
13:
    commands:
    -   explanation: Two parts both need to be correct
        example: if 3+2 {is} 5 {and} 2+2 {is} 4
        demo_code: "answer1 = {ask} 'What is 3+2?'\nanswer2 = {ask} 'What is 2+2?'\n{if} answer1 {is} 5 {and} answer2 {is} 4\n    {print} 'Both answers are correct!'\nelse\n    {print} 'At least one answer is wrong!'"
        name: '{and}'
    -   explanation: At least 1 of the two parts need to be correct. If both are correct, it is also fine.
        demo_code: "answer1 = {ask} 'What is 3+2?'\nanswer2 = {ask} 'What is 2+2?'\n{if} answer1 {is} 5 {or} answer2 {is} 4\n    {print} 'At least one answer is correct!'\nelse\n    {print} 'Both answers are wrong!'"
        name: '{or}'
        example: if 3+2 {is} 5 {or} 2+2 {is} 4
    start_code: "name = {ask} 'what is your name?'\nage = {ask} 'what is your age?'\n{if} name {is} 'Hedy' {and} age {is} 2\n    {print} 'You are the real Hedy!'"
    intro_text: We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two if's but can use `{and}` and `{or}`. If you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct.
14:
    commands:
    -   name: Smaller
        explanation: We use the `<` to check if the first number is smaller than the second number.
        example: 'For example: age < 12'
        demo_code: "age = {ask} 'How old are you?'\n{if} age < 13\n    {print} 'You are younger than me!'"
    -   name: Bigger
        explanation: We use the `>` to check if the first number is bigger than the second number.
        example: 'For example: age > 12'
        demo_code: "age = {ask} 'How old are you?'\n{if} age > 13\n    {print} 'You are older than me!'"
    -   name: Equal
        explanation: We use the `==` to check if two things are the same.
        example: 'For example: answer == 25'
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer == 25\n    {print} 'That {is} correct!'"
    -   explanation: 'We use the `!=` to check if two things are not the same. '
        name: Not equal
        example: 'For example: answer != 25'
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer != 25\n    {print} 'That is not correct!'"
    -   explanation: We use the `<=` to check if the first number is smaller than or equal to the second number.
        example: 'For example: age <= 12'
        demo_code: "age = {ask} 'How old are you?'\n{if} age <= 12\n    {print} 'You are younger than me!'"
        name: Smaller {or} equal
    -   name: Bigger or equal
        explanation: We use the `>=` to check if the first number is bigger than or equal to the second number.
        example: 'For example: age >= 14'
        demo_code: "age = {ask} 'How old are you?'\n{if} age >= 14\n    {print} 'You are older than me!'"
    start_code: "age = {ask} 'How old are you?'\n{if} age < 13\n    {print} 'You are younger than me!'\nelse\n    {print} 'You are older than me!'"
    intro_text: "We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.\nThe `<` checks if the first number is smaller than the second, for example `age < 12` checks if `age` {is} smaller than 12.\nIf you want to check if the first number is smaller or equal to the second, you can use `<=`, for example `age <= 11`.\nThe `>` checks if the first number is bigger than the second, for example `points > 10` checks if `points` is larger than 10.\nIf you want to check if the first number is bigger or equal to the second, you can use `>=`, for example `points >= 11`.\nYou use these comparisons in an `{if}`, like this:\n```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n\nFrom this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:\n```\nname = {ask} 'What is your name?'\n{if} name == 'Hedy'\n    {print} 'You are coo!'\n```\n\nYou can also compare if something is *not* equal to something else using `!=` like this:\n```\nname = {ask} 'What is your name?'\n{if} name != 'Hedy'\n    {print} 'You are not Hedy'\n```\n"
15:
    commands:
    -   name: '{while}'
        explanation: We can use the `{while}` loop with not equal
        example: 'Example: {while} correct_answer != 25'
        demo_code: "answer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'"
    -   explanation: 'We can also use the `{while}` loop with `<` and `>`. '
        example: 'For example: {while} count < 3'
        name: Smaller {while}
        demo_code: "count = 1\n{while} count < 3\n    {print} 'We do this ' 3 - count ' more times'\n    count = count + 1\n{print} 'We are done'"
    start_code: "answer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'"
    intro_text: "We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.\nSo don't forget to change the value in the loop.\n\nIn the example code, we continue until a correct answer has been given.\nIf the correct answer is never given, the loop never ends!\n"
16:
    commands:
    -   explanation: Lists with square brackets
        name: square brackets
        example: "For example: fruit = ['apple', 'banana', 'cherry']"
        demo_code: "fruit = ['apple', 'banana', 'cherry']\n{print} fruit"
    -   name: Get an item from a list
        explanation: To get an item from a list we use [number] so fruit[1] means, get the first fruit from the list!
        example: 'For example: firstfruit = fruit[1]'
        demo_code: "fruit = ['banana', 'apple', 'cherry']\nfirstfruit = fruit[1]\n{print} firstfruit"
    -   name: Get a random item from a list
        explanation: To get a random item from a list we use [random] so fruit[random] means, get a random fruit from the list!
        demo_code: "fruit = ['banana', 'apple', 'cherry']\nrandom_fruit = fruit[random]\n{print} random_fruit"
        example: 'For example: random_fruit {is} fruit[random]'
    intro_text: "We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.\nYou can use the square brackets as well to point out a place in the lists.\n\n```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
    start_code: "fruit = ['apple', 'banana', 'cherry']\n{print} fruit"
18:
    start_code: "naam = 'Hedy'\n{print}('My name is ', naam)"
    intro_text: "We arrived at real pythoncode! That means we need to use parentheses with {print} and {range} from now on.\nThat looks like this:\n```\n{print}('my name is Hedy!')\n```\nIf you want to print more thant one items, you need to separate them by commas.\n```\nnaam = 'Hedy'\n{print}('my name is ', naam)\n```"
    commands:
    -   name: '{print}'
        explanation: With `{print}` you need to use parentheses
        example: '{print}'
        demo_code: "{print}('hi!')"
    -   name: '{print} with var'
        explanation: With `{print}` you need to use parentheses and commas if you {print} more items
        example: '{print}'
        demo_code: "naam = 'Hedy'\n{print}('my name is ', naam)"
17:
    commands:
    -   explanation: '`{elif}`.'
        example: '{elif} a {is} 5:'
        demo_code: "a = 2\n{if} a == 1:\n    {print} 'a is 1'\n{elif} a == 2:\n    {print} 'a is 2'\n{else}:\n    {print} 'a is not 1 or 2'"
        name: '{elif}'
    -   name: '{print}'
        explanation: When we use a `{for}`, we need to put a `:` behind the `{for}` statement!
        example: 'for i {in} {range} 1 {to} 10:'
        demo_code: "{for} i {in} {range} 1 {to} 12:\n    {print} i\n{print} 'Ready or not, here I come!'"
    -   name: '{if}'
        example: if colour {is} green:'
        demo_code: "colour = {ask} 'What is your favorite color?'\n{if} colour == green:\n    {print} 'Your favorite colour is green'\n{else}:\n    {print} 'Your favorite colour is not green'"
        explanation: We need to do the same with all of our `{if}` statements
    start_code: "{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Ready or not, here I come!'"
    intro_text: "Now we are going to change a little bit with indentation. Every time that we need an indentation, we need `:` at the line before the indentation.\n\nIn this level you can also use a new command: `{elif}`. `{elif}` is short for {else} {if} and you need it when you you want to make 3 (or more!) options.\nCheck it out!\n```\nprices = ['1 million dollars', 'an apple pie', 'nothing']\nyour_price = prices[random]\n{print} 'You win ' your_price\n{if} your_price == '1 million dollars' :\n    {print} 'Yeah! You are rich!'\n{elif} your_price == 'an apple pie' :\n    {print} 'Lovely, an apple pie!'\n{else}:\n    {print} 'Better luck next time..'\n```\n"
