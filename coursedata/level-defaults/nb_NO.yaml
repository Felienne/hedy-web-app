1:
    intro_text: "## Velkommen til Hedy\nP√• Niv√• 1 kan du bruke kommandoene `{print}`, `{ask}` og `{echo}`.\nSkriv koden i programmeringsfeltet, eller trykk p√• den gr√∏nne boksen i eksempelkodeblokken og koden vil bli skrevet for deg!\nPr√∏v koden selv med den gr√∏nne 'Kj√∏r kode' knappen under programmeringsfeltet.\n\nDu kan skrive tekst til skjermen ved √• bruke `{print}` kommandoen.\n"
    example_code: "## Eksempelkode\n```\n{print} Hallo!\n{print} Velkomen til Hedy!\n```\n"
    intro_text_2: "Du kan ogs√• sp√∏rre etter inndata med `{ask}` og gjenta det tilbake med en `{echo}`kommando.\n"
    intro_text_3: "La oss begynne! Er du ikke sikker p√• hva du vil lage? I de andre fanene finner du ideer til programmer √• bygge.\n"
    example_code_2: "## Eksempelkode\n```\n{ask} Hva er navnet ditt?\n{echo} hallo\n```\n"
    start_code: '{print} hallo verden!'
    commands:
    -   name: '{print}'
        explanation: '{print} noe med `{print}`.'
        example: 'Eksempel: {print} Hallo, velkommen til Hedy!'
        demo_code: '{print} Hallo velkommen til Hedy!'
    -   name: '{ask}'
        explanation: Still et sp√∏rsm√•l med `{ask}`.
        example: 'Eksempel: {ask} Hva er favorittfargen din?'
        demo_code: '{ask} Hva er favorittfargen din?'
    -   name: '{echo}'
        explanation: gjenta noe med √• bruke `{echo}`.
        example: 'Eksempel: {echo} s√• favorittfargen din er '
        demo_code: "{ask} Hva er favorittfargen din?\n{echo} s√• favorittfargen din er"
    -   name: '{print} emojier'
        explanation: print en emoji med `{print}`
        example: 'Eksempel: {print} üôã‚Äç üåç ‚ùó'
        demo_code: '{print} üôã üåç ‚ùó'
    -   name: '{forward}'
        explanation: Tegn en linje med `{forward}`.
        example: 'Eksempel: {forward} 100'
        demo_code: '{forward} 100'
    -   name: '{turn}'
        explanation: snu tegneskilpadden med `{turn}`
        example: 'Eksempel: {turn}'
        demo_code: "{forward} 25\n{turn} {left}\n{forward} 25\n{turn} {right}"
2:
    intro_text: "## Variabler\nP√• niv√• 2 l√¶rer vi to nye kommandoer: `{is}` og `{sleep}`.\nDu kan navngi et ord med `{is}`. Dette kalles en variabel. I dette eksempelet har vi laget en variabel kalt 'navn' og en variabel kalt 'alder'. Du kan bruke ordet 'navn' hvor som helst i koden og det vil bli erstattet av Hedy, som dette:\n\nP√• denne m√•ten trenger du ikke lenger `{echo}`kommandoen!\n"
    example_code: "## Eksempelkode\n```\nnavn {is} Hedy\nalder {is} 15\n{print} navn is alder √•r gammel\n```\n"
    intro_text_2: "`{print}` fungerer fortsatt som f√∏r, men `{ask}` kommandoen har endret seg. Fra n√• m√• du bruke en variabel n√•r du bruker `{ask}` kommandoen. Det ser slik ut:\n"
    example_code_2: "```\nsvar {is} {ask} Hva heter du?\n{print} Hallo svar\n```\n"
    intro_text_3: "Enda en ny kommando p√• dette niv√•et er `{sleep}`. Denne kommandoen setter programmet ditt p√• pause i et sekund. Hvis du skriver et tall bak {sleep} kommandoen, vil programmet settes p√• pause i s√• mange sekunder.\n"
    example_code_3: "```\n{print} Min favorittfarge er...\n{sleep} 2\n{print} gr√∏nn!\n```\n"
    start_code: '{print} hallo verden!'
    commands:
    -   name: '{is}'
        explanation: Gi et ord et navn som kan brukes andre steder i programmet med kommandoen `{is}`. Du kan velge navnet helt selv.
        example: 'Eksempel: navn {is} Hedy.'
        demo_code: "navn {is} Hedy\n{print} Velkommen navn"
    -   name: '{ask}'
        explanation: still et sp√∏rsm√•l med `{ask}`. Pass p√•! Du m√• gi svaret et navn ved hjelp av `{is}`.
        example: 'Eksempel: farge {is} {ask} Hva er din favorittfarge?'
        demo_code: "farge {is} {ask} Hva er din favorittfarge?\n{print} farge er din favoritt!"
    -   name: '{sleep}'
        explanation: La Hedy f√• seg en pause i et sekund eller fler.
        example: 'Eksempel: {sleep} 2 '
        demo_code: "{print} La meg tenke i et sekund...\n{sleep}\n{print} Hmm.. Jeg trenger tre sekunder til...\n{sleep} 3\n{print} Eureka! Jeg har svaret!"
    -   explanation: Gi et tall et navn ved √• bruke `{is}`. Du kan velge navnet selv.
        example: 'Eksempel: vinkel {is} 90'
        demo_code: "vinkel {is} 90\n{turn} vinkel\n{forward} 100"
        name: er - skilpadde
3:
    intro_text: "## Lag en liste!\nP√• niv√• 3 kan du lage lister. Du kan la datamaskinen velge noe tilfeldig fra listen, du gj√∏r det med `{at} {random}`.\n"
    example_code: "## Eksempelkode\n\n```\ndyr {is} hund, katt, hest\n{print} dyr {at} {random}\n```\n"
    intro_text_2: Du kan ogs√• legge til ting i listen med `{add}` og fjerne ting fra listen med `{remove}`.
    example_code_2: "## Eksempelkode\n\n```\ndyr {is} hund, katt, hest\n{add} pingvin {to_list} dyr\n{remove} katt {from} dyr\n{print} dyr {at} {random}\n```\n"
    start_code: '{print} hallo verden!'
    commands:
    -   name: velg_tilfeldig
        explanation: Velg et tilfeldig ord fra en liste med `{at}` og `{random}`
        example: 'Eksempel: dyr {is} hun, katt, hest.'
        demo_code: "dyr {is} hund, katt, hest\n{print} dyr {at} {random}"
    -   name: '{add}'
        explanation: legg til en ting i listen
        example: 'Eksempel: {add} hund {to_list} dyr'
        demo_code: "dyr {is} ku, katt\n{add} hund {to_list} dyr"
    -   name: '{remove}'
        explanation: fjern en ting fra en liste
        example: 'Eksempel: {remove} hund {from} dyr'
        demo_code: "dyr {is} katt, hund, ku\n{remove} hund {from} dyr"
4:
    start_code: "{print} 'Hallo verden'"
    intro_text: "## 'Quotation marks'\nP√• niv√• 4 har `{ask}` og`{print}` blitt endret.\n\nDu m√• fra n√• av legge tekst du vil skrive ut mellom fnutter.\n\nDette er nyttig, fordi n√• kan du skrive ut alle ordene du vil. Ogs√• de ordene du har brukt til √• lagre noe med `{is}`.\n\nDe fleste programmeringsspr√•k bruker ogs√• fnutter n√•r de skriver ut ting, s√• vi g√•r alts√• enda et steg n√¶rmere ekte programmering!\n"
    example_code: "## Eksempelkode\n```\n{print} 'Du m√• bruke fnutter fra n√• av!'\nsvar {is} {ask} 'Hva m√• vi bruke fra n√• av?'\n{print} 'Vi m√• bruke' svar\n```\n"
    intro_text_2: "## Eventyrene blir mer og mer vanskelig\nEventyrene blir mer og mer vanskelig n√• i de rosa fanene.\nS√• det er lurest √• starte til venstre med Fortellingen, og jobbe seg mot h√∏yre. P√• denne m√•ten f√•r du mer og mer utfordring for hvert eventyr.\n"
    commands:
    -   name: '{print}'
        explanation: skriv ut n√∏yaktig det du vil med fnutter
        example: "Eksempel: {print} 'Hallo velkommen til Hedy.'"
        demo_code: "{print} 'Hallo, velkommen til Hedy.'"
    -   name: '{is}'
        explanation: Gi et navn til noe tekst og `{print}` ut uten fnutter
        example: 'Eksempel: navn {is} Hedy.'
        demo_code: "navn {is} Hedy\n{print} 'Mitt navn er ' navn"
    -   name: '{ask}'
        explanation: still et sp√∏rsm√•l med `{ask}`.
        example: "Eksempel: farge {is} {ask} 'Hva er din favorittfarge?'"
        demo_code: "farge {is} {ask} 'Hva er din favorittfarge?'\n{print} farge ' er din favoritt!'"
5:
    start_code: "navn {is} {ask} 'Hva heter du?'\n{if} navn {is} Hedy {print} 'kult!' {else} {print} 'meh'"
    intro_text: "## Hvis... ellers...\nP√• niv√• 5 er det noe nytt √• l√¶re seg, `{if}`! Med `{if}` kommandoen kan du velge mellom to forskjellige valg.\nDenne koden skriver ut 'nice' hvis du skriver inn Hedy som navn, og 'buu!' hvis du skriver noe annet.\n`{ask}` and `{print}` vil fungere p√• samme m√•te som de gjorde i niv√• 4.\n"
    example_code: "## Eksempelkode\n```\nnavn {is} {ask} 'Hva heter du?'\n{if} navn {is} Hedy {print} 'wow!' {else} {print} 'fysj!'\n```\n"
    intro_text_3: "## Lister\nHvis vi skal sjekke om noe er i en liste s√• kan vi n√• bruke `{in}` kommandoen.\nDenne koden skriver ut 'Vakkert!' hvis du velger gr√∏nn eller gul, og 'meh' hvis du skriver noe annet.\n"
    example_code_3: "```\nvakre_farger {is} gr√∏nn, gul\nfarge{is} {ask} 'Hva er din favorittfarge?'\n{if} farge {in} vakre_farger {print} 'Vakert!'\n{else} {print} 'meh'\n```\n"
    intro_text_2: "Noen ganger kan kode som bruker `{if}` bli veldig lang. <br>Du kan splitte koden over to linjer og begynne neste linje med `{else}` slik som dette:\n"
    example_code_2: "```\nnavn {is} {ask} 'Hva heter du?'\n{if} navn {is} Hedy {print} 'nice'\n{else} {print} 'boo!'\n```\n"
    commands:
    -   name: '{print}'
        explanation: skriv ut n√∏yaktig det du vil med fnutter
        example: "Eksempel: {print} 'Hallo, velkommen til Hedy.'"
        demo_code: "{print} 'Hallo, velkommen til Hedy.'"
    -   name: '{ask}'
        explanation: still et sp√∏rsm√•l med `{ask}`.
        example: "Eksempel: farge {is} {ask} 'Hva er din favorittfarge?'"
        demo_code: "farge {is} {ask} 'Hva er din favorittfarge?'\n{print} farge ' er din favoritt'"
    -   name: '{if}'
        explanation: Ta et valg med `{if}`
        example: "Eksempel: {if} farge {is} gr√∏nn {print} 'vakkert!' {else} {print} 'meh'"
        demo_code: "farge {is} {ask} 'Hva er din favorittfarge?'\n{if} farge {is} gr√∏nn {print} 'vakkert!' {else} {print} 'meh'"
    -   name: '{if} med skilpadden'
        explanation: Ta et valg med `{if}`
        example: 'Eksempel: {if} svaret {is} langt {forward} 100 {else} {forward} 5'
        demo_code: "svaret {is} {ask} 'Hvor langt skal vi bevege skilpadden?'\n{if} svaret {is} langt {forward} 100 {else} {forward} 5"
    -   name: '{in}'
        explanation: Sjekk om lister inneholder elementer `{in}`
        example: "Eksempel: {if} farge {in} vakre_farger {print} 'Vakkert!' {else} {print} 'meh'"
        demo_code: "vakre_farger {is} gr√∏nn, gul\nfarge {is} {ask} 'Hva er din favoritt farge'\n{if} farge {in} vakre_farger {print} 'Vakkert!' {else} {print} 'meh'"
6:
    commands:
    -   name: '{print}'
        explanation: skriv ut n√∏yaktig det du vil med fnutter
        example: "Eksempel: {print} '5 {times} 5 er ' 5 * 5"
        demo_code: "{print} '5 ganget 5 er ' 5 * 5"
    -   name: '{ask}'
        explanation: '{ask} om et regnestykke og sjekk om det er korrekt.'
        example: "Eksempel: svar {is} {ask} 'Hva er 10 pluss 10?'"
        demo_code: "svar = {ask} 'Hva er 10 pluss 10?'\n{if} svar {is} 20 {print} 'Korrekt!' {else} {print} 'Feil'"
    -   name: '`{ask}` {and} `{if}` skilpadde'
        explanation: '{ask} brukeren hvor mange grader de vil ha'
        example: "Eksempel: grader{is} {ask} 'Hvor mange grader?'"
        demo_code: "grader= {ask} 'Hvor mange grader?'\nvinkel = 360 / grader\n{forward} 50"
    start_code: "{print} '5 ganger 5 er ' 5 * 5"
    intro_text: "## 1 + 1\nP√• dette niv√•et skal du f√• l√¶re noe nytt! Du kan n√• bruke Hedy til √• gj√∏re matte.\n\n√Ö plusse sammen to tall er enkelt, du bare gj√∏r som du ville gjort i mattetimen, for eksempel: `5 + 5`. Minus funker ogs√•: `5 - 5`.\n\n√Ö gange er litt anederledes, fordi det ikke er et gangesymbol p√• tastaturet ditt. Bare se hvis du vil, der er virkelig ikke et gangeteng.\nDerfor bruker vi vanligvis en stjerne `*` n√•r vi ganger. `5 * 5`kan leses som \"5 ganger 5\". Det kan v√¶re du m√• holde inne SHIFT knappen for √• kunne skrive *-tegnet.\n"
    example_code: "## Eksempelkode\n```\n{print} '5 pluss 5 er ' 5 + 5\n{print} '5 minus 5 er ' 5 - 5\n{print} '5 ganger 5 er ' 5 * 5\n```\n"
    intro_text_2: "Vi skal ogs√• gj√∏re en liten endring i hvordan vi lagrer et ord i en variabel! Du kan n√• bruke `=` istedenfor `{is}` n√•r du lagrer en tekst eller et tall i en variabel, slik:\n"
    example_code_2: "```\nnavn = Hedy\nsvar = 4 + 20\n```\n"
7:
    start_code: "{repeat} 3 {times} {print} 'Hedy er morro!'"
    intro_text: "## Niv√• 7! Niv√• 7!\nNiv√• 7 legger til `{repeat}` kommandoen. {repeat} kan brukes til √• kj√∏re en kodelinje flere ganger.\n"
    example_code: "## Eksempelkode\n```\n{repeat} 3 {times} {print} 'Hedy {is} morro!'\n```\n"
    commands:
    -   name: '{print}'
        explanation: skriv n√∏yaktiv med bruk av fnutter
        example: "Eksempel: {print} 'Hallo, velkommen til Hedy.'"
        demo_code: "{print} 'Hallo, velkommen til Hedy.'"
    -   name: '{ask}'
        explanation: still et sp√∏rsm√•l med `{ask}`.
        example: "Eksempel: farge = {ask} 'Hva er din favorittfarge?'"
        demo_code: "farge = {ask} 'Hva er din favorittfarge?'\n{print} farge ' er din favoritt!'"
    -   name: '{if}'
        explanation: Ta et valg med `{if}`
        example: "Eksempel: {if} farge{is} gr√∏nn {print} 'Vakkert!' {else} {print} 'meh'"
        demo_code: "farge = {ask} 'Hva er din favorittfarge?'\n{if} farge {is} gr√∏nn {print} 'Vakkert!' {else} {print} 'meh'"
    -   name: '{repeat} - skillpadde'
        explanation: gjenta en kodelinje med `{repeat}`.
        example: 'Eksempel: {repeat} 3 {times} {forward} 10'
        demo_code: '{repeat} 3 {times} {forward} 10'
8:
    start_code: "{repeat} 5 {times}\n    {print} 'Hallo folkens'\n    {print} 'Dette vil bli skrevet ut 5 ganger'"
    intro_text: "## Innrykk\n`{ask}` {and} `{print}` fungerer fortsatt slik du er vandt til, men `{if}` {and} `{repeat}` har endret seg litt!\nDu kan n√• kj√∏re sm√• blokker med kode sammen, men du m√• gi koden korrekt *innrykk*.\nDet betyr at du m√• legge til fire mellomrom p√• starten av kodelinjen. Du m√• ogs√• ha nytt innrykk n√•r du skal lage en blokk p√• en linje.\n"
    example_code: "## Eksempel Hedy code\n```\n{repeat} 5 {times}\n    {print} 'Hallo alle sammen'\n    {print} 'Dette blir gjentatt 5 ganger'\n```\n"
    commands:
    -   name: '{print}'
        explanation: skriv noe. Husk √• bruke fnutter n√•r du skal skrive ut tekst.
        example: "Eksempel: {print} '5 {times} 5 {is} ' 5 * 5"
        demo_code: "{print} '5 {times} 5 {is} ' 5 * 5"
    -   name: '{ask}'
        explanation: sp√∏r om svaret p√• et regnestykke og sjekk om det er rett. Vi kan printe to linjer n√•.
        example: "Eksempel: svaret {is} {ask} 'Hva er 5 pluss 5?'"
        demo_code: "svaret = {ask} 'Hva er 5 plus 5?'\n{if} svaret {is} 10\n    {print} 'Bra jobbet!'\n    {print} 'Du har helt rett, svaret er ' svaret\n{else}\n    {print} 'Oops!'\n    {print} 'Svaret er 10'"
    -   name: '`{repeat}` med skilpadden'
        explanation: '{repeat} flere linjer'
        example: 'Eksempel: tegn en firkant'
        demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
9:
    start_code: "{repeat} 3 {times}\n    matrett = {ask} 'Hva vil du ha?'\n    {if} matrett {is} pizza\n        {print} 'nice!'\n    else\n        {print} 'pizza er bedre'"
    intro_text: "## Alt p√• en gang n√•!\nP√• dette niv√•et kan du bruke b√•de `{if}` med kodeblokker {and} `{repeat}` sammen!\nI eksempelet kan du se en `{if}` kommando inni en `{repeat}` kommando. Det er ogs√• mulig √• gj√∏re det motsatte (`{repeat}` inni en `{if}`).\nDu kan ogs√• legge en `{if}` inni en annen `{if}` og en `{repeat}` inni en `{repeat}`.\nPr√∏v √• se om du f√•r det til!\n"
    example_code: "## Eksempelkode\n```\n{repeat} 3 {times}\n    matrett = {ask} 'Hva vil du ha?'\n    {if} matrett {is} pizza\n        {print} 'bra!'\n    else\n        {print} 'pizza er bedre'\n```\n"
    commands:
    -   name: '`{if}` med flere linjer'
        explanation: "'{ask}' om svaret p√• et regnestykke og se om det er korrekt. N√• skriver vi ut to linjer."
        example: "Eksempel: svaret = {ask} 'Hva er 20 pluss 20?'"
        demo_code: "svaret = {ask} 'Hva er 20 pluss 20?'\n{if} svaret {is} 40\n    {print} 'Bra jobbet!'\n    {print} 'Svaret er ' svaret\nelse\n    {print} 'Feil'\n    {print} 'Svaret er 40'"
    -   name: '`{repeat}` og skilpadden'
        explanation: '{repeat} flere linjer'
        example: 'Eksempel : tegn en firkant'
        demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
10:
    start_code: "dyrene {is} hunder, katter, flyndre\n{for} dyr {in} dyrene\n    {print} 'Jeg elsker ' dyr"
    intro_text: "## For hver ting i listen min\nP√• dette niv√•et skal vi l√¶re et nytt n√∏kkelord `{for}`. Med `{for}` kan du lage en liste og bruke alle elementene i listen.\n`{for}` lager en kodeblokk, p√• samme m√•te som `{repeat}` og `{if}`, s√• alle linjene i kodeblokken m√• starte med 4 mellomrom (innrykk).\n"
    example_code: "## Eksempelkode\n```\ndyrene {is} hunder, katter, flyndre\n{for} dyr {in} dyrene\n    {print} 'Jeg elsker ' dyr\n```\n"
    commands:
    -   name: '{print}'
        explanation: skriv ut noe. Husk √• bruke fnutter n√•r du skal skrive tekst.
        example: "Eksempel: {print} '5 {times} 5 {is} ' 5 * 5"
        demo_code: "{print} '5 {times} 5 {is} ' 5 * 5"
    -   name: '{for} med en liste'
        explanation: 'skriv ut alle tingene i en liste '
        example: 'Eksempel: {for} dyr {in} dyrene'
        demo_code: "dyrene {is} hunder, katter, flyndre\n{for} dyr {in} dyrene\n    {print} 'Jeg elsker ' dyr"
11:
    start_code: "{for} teller {in} {range} 1 {to} 5\n    {print} teller"
    intro_text: "## L√∏kker!\n`{print}` fungerer p√• samme m√•ten som f√∏r, men vi legger til en ny versjon av `{for}`. N√• kan du skrive`{for} teller {in} {range} 1 {to} 5` and og bruke `teller` i programmet ditt. En {range} er bare noen tall som kommer etter hverandre p√• tall-linjen.\nPr√∏v det ut og se hva som skjer! Husk √• ha innrykk p√• linjen etter `{for}` og `{if}` uttrykkene (det betyr at du m√• starte setningen med fire mellomrom)\n"
    example_code: "## Eksempelkode\n```\n{for} teller {in} {range} 1 {to} 5\n    {print} teller\n```\n"
    commands:
    -   name: '{for} l√∏kke'
        explanation: Vi kan bruke `{for}` med en {range}
        example: '{for} teller {in} {range} 1 {to} 5'
        demo_code: "{for} teller {in} {range} 1 {to} 5\n    {print} teller"
    -   name: '{ask}'
        explanation: '{ask} etter svaret p√• et regnestykke og sjekk om det er korrekt. Vi kan skrive ut to linjer n√•.'
        example: "Eksempel: svaret = {ask} 'Hva er 5 pluss 5?'"
        demo_code: "svaret = {ask} 'Hva er 5 pluss 5?'\n{if} svaret {is} 10\n    {print} 'Bra jobbet!'\n    {print} 'Det var rett og svaret var ' svaret\nelse\n    {print} 'Oops!'\n    {print} 'Svaret er 10'"
12:
    commands:
    -   name: flyt direkte
        explanation: Desimaltall
        example: '{print} 2.5 + 2.5'
        demo_code: "{print} 'Kj√∏r p√• med kalkulasjoner!'\n{print} 'To og en halv pluss to og en halv er lik...'\n{print} 2.5 + 2.5\n"
    -   name: tildel tekst
        explanation: Tekst med fnutter etter `=`
        example: navn = 'Hedy'
        demo_code: "navn = 'Roboten Hedy'\n{print} 'Hello ' navn\n"
    -   name: apostrof etter {if}sammenligning
        explanation: Tekst med fnutter etter {if}
        example: navn = 'Hedy'
        demo_code: "navn = {ask} 'Hvem er du?'\n{if} navn = 'Hedy'\n    {print} 'Hei hei!'\n"
    -   name: hermetegn i liste
        explanation: En liste med fnutter
        example: navn = 'Hedy', 'Felienne'
        demo_code: "superhelter = 'Iron Man', 'Batman', 'Superman'\n{print} superhelter {at} {random}\n"
    start_code: "{print} 'desimaltall m√• bruke et punktum n√•'\n{print} 2.5 + 2.5"
    intro_text: "## Tall og tekst\n**Desimaltall**\nF√∏r dette niv√•et har det ikke v√¶rt mulig √• bruke desimaltall som 1.5 i Hedy, men fra n√• av kan du det! Legg merke til at datamaskiner bruker punktum `.` som skilletegn i desimaltall.\n"
    example_code: "## Eksempelkode\n```\n{print} 'To og en halv pluss to og en halv er lik...'\n{print} 2.5 + 2.5\n```\n"
    intro_text_2: "**All tekst m√• v√¶re inni fnutter**\nFra dette niv√•et m√• du n√• ha fnutter rundt tekst som du lagrer ved hjelp av `=`:\n"
    example_code_2: "```\nnavn = 'Roboten Hedy'\n{print} 'Hallo ' navn\n```\n"
    intro_text_3: "**All tekst i lister krever n√• fnutter ogs√•**\nTekst i lister er ogs√• tekst, de m√• ogs√• ha fnutter rundt seg. Med dette mener vi at hver element i listen krever fnutter.\nDette lar deg lagre to ord som et element i listen, for eksempel 'Iron Man'.\n"
    example_code_3: "```\nsuperhelter = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n"
    intro_text_4: "**All tekst etter `{if}` sammenligninger krever ogs√• fnutter n√•**\n"
    example_code_4: "```\nnavn = {ask} 'Hva heter du?'\n{if} navn= 'Roboten Hedy'\n    {print} 'Hei hei!'\n```\n"
    intro_text_5: "**Tall trenger ikke fnutter**\nN√•r du lagrer tall med `=` trenger du ikke √• bruke fnutter:\n"
    example_code_5: "```\npoeng = 25\n{print} 'Du fikk ' poeng\n```\n"
    intro_text_6: "**Matte med ord** Fra dette niv√•et kan du ogs√• bruke `+` tegnet til √• legge sammen tekster. For eksempel:\n"
    example_code_6: "```\na = 'Hallo '\nb = 'verden!'\nprint a + b\n```\n"
13:
    start_code: "navn = {ask} 'Hva heter du?'\nalder = {ask} 'Hvor gammel er du?'\n{if} navn {is} 'Hedy' {and} alder {is} 2\n    {print} 'Du er den ekte Hedy!'"
    intro_text: "## Og... Eller?\nN√• skal vi l√¶re om `{and}` og`{or}`! Hvis du har lyst til √• sjekke to p√•stander trenger du ikke √• bruke to `{if}`, du kan bruke `{and}` og `{or}`. Hvis du bruker `{and}` m√• begge p√•standene v√¶re sann. Vi kan ogs√• bruke `{eller}`, da trenger kun en av p√•standene √• v√¶re sann.\n"
    example_code: "```\nnavn = {ask} 'Hva heter du?'\nalder = {ask} 'Hvor gammel er du?'\n{if} navn {is} 'Hedy' {and} alder {is} 2\n    {print} 'Du er den ekte Hedy'\n```\n"
    commands:
    -   name: '{and}'
        explanation: Begge deler m√• v√¶re korrekt
        example: '{if} 3 + 2 {is} 5 {and} 2 + 2 {is} 4'
        demo_code: "svar1 = {ask} 'Hva er 3 + 2?'\nsvar2 = {ask} 'Hva er 2 + 2?'\n{if} svar1 {is} 5 {and} svar2 {is} 4\n    {print} 'Begge svarene m√• v√¶re rett!'\n{else}\n    {print} 'Minst et svar et feil!'"
    -   name: '{or}'
        explanation: Minst et av svarene m√• v√¶re rett. Det vil ogs√• fungere hvis begge er rett.
        example: '{if} 3 + 2 {is} 5 {or} 2 + 2 {is} 4'
        demo_code: "svar1 = {ask} 'Hva er 3 + 2?'\nsvar2 = {ask} 'Hva er 2 + 2?'\n{if} svar1 {is} 5 {or} svar2 {is} 4\n    {print} 'Ihvertfall ett svar er riktig!'\n{else}\n    {print} 'Begge svarene er feil!'"
14:
    start_code: "alder = {ask} 'Hvor gammel er du?'\n{if} alder < 13\n    {print} 'Du er yngre enn meg!'\n{else}\n    {print} 'Du er eldre enn meg!'"
    intro_text: "## Stor, St√∏rre, St√∏rst!\nVi skal l√¶re enda flere nye ting. Det kan v√¶re du allerede kjenner til disse fra mattetimen, `<`og `>`.\n`<` kaller vi 'mindre enn'-tegnet. Dette bruker vi for √• sjekke om det f√∏rste tallet er *mindre enn* det andre, f.eks: `alder < 12`kan leses som `alder er mindre enn 12`.\nHvis du vil sjekke om det f√∏rste tallet er mindre eller like stort som det andre, kan du bruke `<=`, f.eks: `alder <= 11`.\n`>` kaller vi `st√∏rre enn`-tegnet. Dette bruker vi for √• sjekke om det f√∏rste tallet er *st√∏rre enn* det andre, f.eks: `poeng > 10` kan leses som `poeng er st√∏rre enn 10`.\nHvis du vil sjekke om det f√∏rste tallet er st√∏rre eller like stort som det andre, kan du bruke `>=`, f.eks: `poeng >= 11`.\nDu kan bruke disse sammenligningene i en `{hvis}`, for eksempel slik:\n"
    example_code: "## Eksempelkode\n```\nalder = {ask} 'Hvor gammel er du?'\n{if} alder > 12\n    {print} 'Du er eldre enn meg!'\n```\n"
    intro_text_2: "Fra dette niv√•et, hvis du vil sjekke om to ting er like, kan du n√• bruke to er-lik tegn. Dette er m√•ten √• sjekke om ting er lik i de fleste programmeringsspr√•k:\n"
    example_code_2: "```\nnavn = {ask} 'Hva heter du?'\n{if} navn == 'Hedy'\n    {print} 'Du er kul!'\n```\n"
    intro_text_3: "Du kan ogs√• sjekke om ting *ikke* er lik noe annet ved √• bruke `!=`, for eksempel slik:\n"
    example_code_3: "```\nnavn = {ask} 'Hva heter du?'\n{if} navn != 'Hedy'\n    {print} 'Du er ikke Hedy!'\n```\n"
    commands:
    -   name: Mindre
        explanation: Vi bruker `<` for √• sjekke om det f√∏rste tallet er mindre enn det andre tallet.
        example: 'For eksempel: alder < 12'
        demo_code: "alder = {ask} 'Hvor gammel er du?'\n{if} alder < 13\n    {print} 'Du er yngre enn meg!'"
    -   name: St√∏rre
        explanation: Vi bruker `>` for √• sjekke om det f√∏rste tallet er st√∏rre enn det andre.
        example: 'For eksempel: alder > 12'
        demo_code: "alder = {ask} 'Hvor gammel er du?'\n{if} alder > 13\n    {print} 'Du er eldre enn meg!'"
    -   name: Er lik
        explanation: Vi bruker `==` for √• sjekke om to ting er like.
        example: 'For eksempel: svar == 25'
        demo_code: "svar = {ask} 'Hva er  5 * 5?'\n{if} svar == 25\n    {print} 'Det {is} korrekt!'"
    -   name: Ikke lik
        explanation: 'Vi bruker`!=` √• sjekke om ting er ''ikke lik''. '
        example: 'For eksempel: svar != 25'
        demo_code: "svar = {ask} 'Hva er 5 * 5?'\n{if} svar != 25\n    {print} 'Det er ikke korrekt!'"
    -   name: Mindre {or} lik
        explanation: Vi bruker `<=` for √• sjekke om det f√∏rste tallet er mindre enn det andre tallet.
        example: 'For eksempel: alder <= 12'
        demo_code: "alder = {ask} 'Hvor gammel er du?'\n{if} alder <= 12\n    {print} 'Du er yngre enn meg!'"
    -   name: St√∏rre eller lik
        explanation: Vi bruker `>=` til √• sjekke om det f√∏rste tallet er st√∏rre eller lik det andre tallet.
        example: 'For eksempel: alder >= 14'
        demo_code: "alder = {ask} 'Hvor gammel er du?'\n{if} alder >= 14\n    {print} 'Du er eldre enn meg!'"
15:
    commands:
    -   name: '{while}'
        explanation: Vi kan bruke `{while}`l√∏kken med ikke-lik
        example: 'Eksempel: {while} svar != 25'
        demo_code: "svar = 0\n{while} svar != 25\n    svar = {ask} 'Hva er 5 ganger 5?'\n{print} 'Svaret er korrekt!'"
    -   name: Mindre {while}
        explanation: 'Vi kan ogs√• bruke `{while}` l√∏kken med `<` og `>`. '
        example: 'For eksempel: {while} antall < 3'
        demo_code: "telling = 1\n{while} telling < 3\n    {print} 'Vi gj√∏r dette ' 3 - telling ' flere ganger'\n    telling = telling + 1\n{print} 'Vi er ferdig √• telle'"
    start_code: "svar = 0\n{while} svar != 25\n    svar = {ask} 'Hva er 5 ganger 5?'\n{print} 'Det svaret var riktig'"
    intro_text: "## Flere l√∏kker!\nVi skal l√¶re en ny l√∏kke, `{while}` l√∏kken! Denne l√∏kken fortsetter √• kj√∏re s√• lenge p√•standen er sann.\nDet er derfor veldig viktig √• endre verdien i l√∏kken.\n\nI eksempelkoden lar vi l√∏kken kj√∏re til vi f√•r det riktige svaret.\nHvis ikke vi aldri f√•r det riktige svaret, s√• fortsetter l√∏kken for alltid!\n"
    example_code: "## Eksempelkode\n```\nsvar = 0\n{while} svar != 25\n    svar = {ask} 'Hva er 5 ganger 5?'\n{print} 'A korrekt svar ble gitt'\n```\n"
16:
    start_code: "frukt = ['eple', 'banan', 'kirseb√¶r']\n{print} frukt"
    intro_text: "## Mer og mer likt virkelig kode\nVi skal n√• lage lister p√• Python m√•ten, med firkantparanteser rundt listene! Vi beholder fnuttene rundt tekstene i listen slik som vi l√¶rte p√• et tidligere niv√•.\nDu kan bruke firkanparantesene til √• peke p√• en plass i listen.\n"
    example_code: "## Eksempelkode\n```\nvenner = ['Ahmed', 'Benjamin', 'Marthe']\nlykketall = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'Lykketallet til ' venner[i]\n    {print} 'er ' lykketall[i]\n```\n"
    commands:
    -   name: firkantparantes
        explanation: Liste med firkantparanteser
        example: "For eksempel: frukt = ['eple', 'banan', 'kirseb√¶r']"
        demo_code: "frukt = ['eple', 'banan', 'kirseb√¶r']\n{print} frukt"
    -   name: Hent en ting fra en liste
        explanation: For √• hente en ting fra en liste bruker vi `[tall]`. S√• frukt[1] betyr, hent f√∏rste frukten i listen!
        example: 'For eksempel: f√∏rstefrukt = frukt[1]'
        demo_code: "frukt = ['banan', 'eple', 'vannmelon']\nf√∏rstefrukt = frukt[1]\n{print} f√∏rstefrukt"
    -   name: Hent en tilfeldig ting fra en liste
        explanation: For √• f√• en tilfeldig til fra listen bruker vi [{random}]. S√• `frukt[{random}]` betyr; hent en tilfeldig frukt fra listen!
        example: 'For eksempel: tilfeldig_frukt = frukt[{random}]'
        demo_code: "frukt = ['banan', 'eple', 'vannmelon']\ntilfeldig_frukt = frukt[{random}]\n{print} tilfeldig_frukt"
17:
    start_code: "{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Klar eller ei, her kommer jeg!'"
    intro_text: "N√• gj√∏r vi en liten endring i koden n√•r vi bruker innrykk. Hver gang vi trenger innrykk, m√• vi n√• skrive `:` p√• linjen f√∏r innrykket.\n\nP√• dette niv√•et kan du ogs√• bruke en ny kommando `{elif}`. `{elif}` er en forkortelse for {else} {if} og du trenger det n√•r du har lyst til √• lage kode med 3 (eller fler!) alternativer.\nSjekk hvordan det blir!\n```\npremier = ['1 million kroner', 'en eplekake', 'ingenting']\ndin_premie = premier[{random}]\n{print} 'Du vinner ' din_premie \n{if} din_premie == '1 million kroner':\n    {print} 'Hurra! Du er rik!'\n{elif} din_premie == 'en eplekake':\n    {print} 'Digg, eplekake!'\n{else}:\n    {print} 'Bedre lykke neste gang..'\n```\n"
    commands:
    -   name: '{elif}'
        explanation: '`{elif}`.'
        example: '{elif} a == 5:'
        demo_code: "a = 2\n{if} a == 1:\n    {print} 'a er 1'\n{elif} a == 2:\n    {print} 'a er 2'\n{else}:\n    {print} 'a er ikke 1 eller 2'"
    -   name: '{print}'
        explanation: N√•r vi bruker en `{for}` l√∏kke, m√• vi legge til `:` p√• slutten av `{for}` linjen!
        example: 'for i {in} {range} 1 {to} 10:'
        demo_code: "{for} i {in} {range} 1 {to} 12:\n    {print} i\n{print} 'Klar eller ei, her kommer jeg!'"
    -   name: '{if}'
        explanation: Vi m√• gj√∏re det samme med alle `{if}`-sjekkene v√•re
        example: "{if} farge == 'gr√∏nn':"
        demo_code: "farge = {ask} 'Hva er din favorittfarge?'\n{if} farge == 'gr√∏nn':\n    {print} 'Din favorittfarge er gr√∏nn'\n{else}:\n    {print} 'Din favorittfarge er ikke gr√∏nn'"
18:
    start_code: "navn = 'Hedy'\n{print}('Mitt navn er ', navn)"
    intro_text: "## Level 18\nVi har ankommet niv√•et hvor vi skriver virkelig pythonkode! Python er riktignok ikke p√• norsk, men du kan bruke knappen oppe i h√∏yre hj√∏rne av kodefeltet hvis du vil se hvordan koden ser ut p√• engelsk.\nN√• n√•r vi har n√•dd ekte pythonkode m√• vi bruke paranteser n√•r vi bruker {print} og {range}.\nDette ser slik ut:\n```\n{print}('Mitt navn er Hedy!')\n```\nFor √• skrive ut mer enn en ting m√• du bruke et komma mellom tingene.\n```\nnavn = 'Hedy'\n{print}('Mitt navn er ', navn)\n```"
    commands:
    -   name: '{print}'
        explanation: Med`{print}` m√• du bruke paranteser
        example: '{print}'
        demo_code: "{print}('hei!')"
    -   name: '{print} med var'
        explanation: Med `{print}` m√• vi bruke parantes og komma for √• skrive ut flere ting
        example: '{print}'
        demo_code: "navn = 'Hedy'\n{print}('Mitt navn er ', navn)"
