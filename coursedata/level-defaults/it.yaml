1:
    intro_text: |
        Benvenuto in Hedy! Nel Livello 1 puoi usare i comandi `print`,` ask` e `echo`.

        Sul lato sinistro dello schermo ci sono tutti i comandi del Livello 1.

        Premi il pulsante blu e il codice verr√† digitato per te!

        Prova tu stesso il codice con il pulsante verde 'Esegui il codice' sotto il campo di programmazione a sinistra.

        Non sai cosa programmare? Nelle schede successive trovi alcune idee su cosa costruire.
    start_code: "print ciao mondo!"
    commands:
    -   name: "print"
        explanation: "Scrivi qualcosa con `print`."
        example: "Esempio: print Ciao benvenuta/o su Hedy!"
        demo_code: "print Ciao benvenuta/o su Hedy!"
    -   name: "ask"
        explanation: "Chiedi qualcosa con `ask`."
        example: "Esempio: ask Qual √® il tuo colore preferito?"
        demo_code: "ask Qual √® il tuo colore preferito?"
    -   name: "echo"
        explanation: "Ripeti qualcosa usando `echo`."
        example: "Esempio: echo Quindi il tuo colore preferito √® "
        demo_code: |-
            ask Qual √® il tuo colore preferito?
            echo Quindi il tuo colore preferito √® 
    -   name: '{print} emojis'
        explanation: print an emoji with `{print}`
        demo_code: '{print} üôã üåç ‚ùó'
        example: 'Example: {print} üôã‚Äç üåç ‚ùó'
    -   example: 'Example: {forward} 100'
        name: '{forward}'
        explanation: Draw a line with `{forward}`.
        demo_code: '{forward} 100'
    -   explanation: turn the drawing turtle with `{turn}`
        example: 'Example: {turn}'
        name: '{turn}'
        demo_code: "{forward} 25\n{turn} left\n{forward} 25\n{turn} right"
    example_code: "## Example code\n```\n{print} Hello!\n{print} Welcome to Hedy!\n```\n"
    example_code_2: "## Example code\n```\n{ask} What is your name?\n{echo} hello\n```\n"
    intro_text_2: "You can also ask for input and repeat it back with an `{echo}` command.\nTry the code to your left again.\n\nDon't know what to create? In the next tabs you will find ideas for programs to build.\n"
    intro_text_3: "Let's get started! Don't know what to create? In the next tabs you will find ideas for programs to build.\n"
2:
    intro_text: |
        Nel livello 2 impariamo qualcosa di nuovo. Puoi nominare una parola con `is`.

        Se metti il codice `nome is Hedy` all'inizio del tuo programma, puoi usare nome ovunque. Quello sar√† poi sostituito da Hedy.

        La `ask` √® cambiata nel livello 2, salva anche la risposta con un nome:

        ```
        risposta is ask come ti chiami?
        ```

        `print` funziona ancora come nel livello 1 e non √® pi√π necessaria `echo`.

    start_code: "print ciao mondo!"
    commands:
    -   name: "is"
        explanation: "D√† un nomignolo da usare nel programma ad una parola con `is`."
        example: "Esempio: nome is Hedy."
        demo_code: |-
            nome is Hedy
            print benvenuta nome
    -   name: "ask"
        explanation: "Chiedi qualcosa con `ask`. Attenzione! Devi dare alla risposta un nome con `is`."
        example: "Esempio: colore is ask Qual √® il tuo colore preferito?"
        demo_code: |-
            colore is ask Qual √® il tuo colore preferito?
            print colore √® il tuo preferito!
    -   explanation: Let Hedy pause for a (couple of) second(s).
        name: '{sleep}'
        example: 'Example: {sleep} 2 '
        demo_code: "{print} Let me think for one second...\n{sleep}\n{print} Hmm.. I need 3 more seconds...\n{sleep} 3\n{print} Eureka! Ive got it!"
    -   explanation: Give a number a name using `{is}`. You can choose the name yourself.
        name: is - turtle
        demo_code: "angle {is} 90\n{turn} angle\n{forward} 100"
        example: 'Example: angle {is} 90'
    example_code: "## Example code\n```\nname {is} Hedy\nage {is} 15\n{print} name is age years old\n```\n"
    intro_text_2: "`{print}` still works the same, but the `{ask}` command has changed. You need to use a variable in the `{ask}` command as well. It looks like this:\n"
    example_code_2: "```\nanswer {is} {ask} What is your name?\n{print} Hello answer\n```\n"
    intro_text_3: "Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.\n"
    example_code_3: "```\n{print} My favorite colour is...\n{sleep} 2\n{print} green!\n```\n"
3:
    intro_text: |
        Nel livello 3 puoi anche fare una lista. Puoi quindi scegliere qualsiasi cosa dall'elenco. Lo fai con `at random` (dici: et ren-dom).

        ```
        animali is cane, gatto, canguro
        print animali at random
        ```

        Troverai tutti i codici di livello 3 nella barra di sinistra. Ci sono anche schede con compiti.
    start_code: "print ciao mondo!"
    commands:
    -   name: "scegli_acaso"
        explanation: "Scegli una parola a caso da un gruppo con `at` e `random`"
        example: "Esempio: animali is cane, gatto, canguro."
        demo_code: |-
            animali is cane, gatto, canguro
            print animali at random
    -   explanation: add an item to a list
        example: 'Example: {add} dog {to_list} animals'
        name: '{add}'
        demo_code: "animals {is} cow, cat\n{add} dog {to_list} animals"
    -   demo_code: "animals {is} cat, dog, cow\n{remove} dog {from} animals"
        example: 'Example: {remove} dog {from} animals'
        name: '{remove}'
        explanation: remove an item from a list
    intro_text_2: You can also add items to the list with `{add}` and remove items with `{remove}`.
    example_code: "## Example Hedy Code\n\n```\nanimals {is} dog, cat, kangaroo\n{print} animals {at} {random}\n```\n"
    example_code_2: "## Example Hedy Code\n\n```\nanimals {is} dog, cat, kangaroo\n{add} penguin {to_list} animals\n{remove} cat {from} animals\n{print} animals {at} {random}\n```\n"
4:
    start_code: "print 'Ciao mondo'"
    intro_text: |
        `print` e `ask` cambiano al livello 4.

        √à necessario inserire il testo che si desidera stampare tra virgolette.

        Questo √® utile, perch√© ora puoi stampare tutte le parole che desideri. Anche le parole che hai usato per memorizzare qualcosa con `is`.

        La maggior parte dei linguaggi di programmazione utilizza anche le virgolette durante la stampa, quindi ci stiamo avvicinando anche alla programmazione reale!

        ## Le assegnazioni stanno diventando sempre pi√π difficili
        Troverai di nuovo i comandi sulla sinistra e le assegnazioni nelle seguenti schede. Le assegnazioni stanno diventando sempre pi√π difficili nelle schede successive.
        Quindi √® meglio iniziare a sinistra con la storia e lavorare a destra per essere sempre pi√π sfidati.
    commands:
    -   name: "print"
        explanation: "Scrivi esattamente quello che metti tra virgolette"
        example: "Esempio: print 'Ciao benvenuta/o su Hedy.'"
        demo_code: "print 'Ciao benvenuta/o su Hedy.'"
    -   name: "is"
        explanation: "Dai un nomignolo ad un testo e scrivilo con `print` senza usare le virgolette"
        example: "Esempio: nome is Hedy."
        demo_code: |-
            nome is Hedy
            print 'Il mio nome √® ' nome
    -   name: "ask"
        explanation: "Chiedi qualcosa con `ask`."
        example: "Esempio: colore is ask 'Qual √® il tuo colore preferito?'"
        demo_code: |-
            colore is ask 'Qual √® il tuo colore preferito?'
            print colore ' √® il tuo preferito!'
    example_code: "## Example Hedy code\n```\nprint 'You need to use quotation marks from now on!'\nanswer is ask 'What do we need to use from now on?'\nprint 'We need to use ' answer\n```\n"
    intro_text_2: "## Adventures are getting more and more difficult\nThe adventures are now getting more and more difficult in the successive tabs.\nSo it is best to start on the left with the story, and work to the right, in order to be challenged more and more.\n"
5:
    start_code: |-
        nome is ask 'Come ti chiami?'
        if nome is Hedy print 'che bello!' else print 'mah'
    intro_text: |
        `ask` e` print` funzionano ancora come nel livello 5.

         Nel livello 4 c'√® qualcosa di nuovo, il `if`! If √® l'inglese per se. Con `if` puoi scegliere tra due diverse opzioni.

         ## Esempio di codice Hedy
         ```
         nome is ask 'come ti chiami?'
         if nome is Hedy print 'carino' else print 'meno divertente!'
         ```

         Questo codice viene stampato carino se inserisci Hedy come nome e meno divertente se inserisci qualcos'altro.

         ## Le assegnazioni stanno diventando sempre pi√π difficili

         Anche a livello 4, gli incarichi nelle schede diventano sempre pi√π difficili. Quindi fallo da sinistra a destra.
    commands:
    -   name: "print"
        explanation: "Scrivi esattamente quello che metti tra virgolette"
        example: "Example: print 'Ciao benvenuta/o su Hedy.'"
        demo_code: "print 'Ciao benvenuta/o su Hedy.'"
    -   name: "ask"
        explanation: "Chiedi qualcosa con `ask`."
        example: "Esempio: colore is ask 'Qual √® il tuo colore preferito?'"
        demo_code: |-
            colore is ask 'Qual √® il tuo colore preferito?'
            print colore ' √® il tuo preferito!'
    -   name: "if"
        explanation: "Fai una scelta con `if`."
        example: "Esempio: if colore is verde print 'carino!' else print 'mah'"
        demo_code: |-
            colore is ask 'Qual √® il tuo colore preferito?'
            if colore is verde print 'carino!' else print 'mah'
    -   name: '{if} with turtle'
        explanation: Make a choice with `{if}`
        example: 'Example: {if} answer {is} far {forward} 100 {else} {forward} 5'
        demo_code: "answer {is} {ask} 'How far should I walk?'\n{if} answer {is} far {forward} 100 {else} {forward} 5"
    -   name: '{in}'
        explanation: Check elements with `{in}`
        example: "Example: {if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
        demo_code: "pretty_colors {is} green, yellow\ncolor {is} {ask} 'What {is} your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
    example_code_3: "```\npretty_colors {is} green, yellow\ncolor {is} {ask} 'What is your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!'\n{else} {print} 'meh'\n```\n"
    intro_text_2: "Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:\n"
    example_code: "## Example Hedy Code\n```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'\n```\n"
    intro_text_3: "## Lists\nWhen we want to check if something is in a list, we can now use the `{in}` command.\nThis code prints pretty! if you choose green or yellow, and meh otherwise.\n"
    example_code_2: "```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice'\n{else} {print} 'boo!'\n```\n"
6:
    start_code: "print '5 per 5 √® ' 5 * 5"
    intro_text: |
        `ask`,` print` e `if` funzionano ancora come nei livelli 5.
        Ma nel livello 6 c'√® qualcosa di nuovo, ora puoi anche calcolare.

        Il vantaggio √® facile, lo scrivi come con la matematica: `5 + 5` per esempio. Anche il segno meno funziona bene, che √® `5 - 5`.

        I tempi sono un po 'diversi, perch√© non ci sono orari sulla tastiera. Basta cercare, non c'√® davvero!
        Questo √® il motivo per cui eseguiamo i tempi con l'asterisco sopra 8: `5 * 5`. Leggilo come "5 per 5", quindi lo ricorderai nel modo pi√π semplice.
        ## Esempio di codice Hedy
        ```
        print '5 pi√π 5 √® ' 5 + 5
        print '5 meno 5 √® ' 5 - 5
        print '5 per 5 √® ' 5 * 5
         ```
    commands:
    -   name: "print"
        explanation: "Scrivi esattamente quello che metti tra virgolette"
        example: "Example: print '5 per 5 √® ' 5 * 5"
        demo_code: "print '5 per 5 √® ' 5 * 5"
    -   name: "ask e if con calcoli"
        explanation: "Chiedi di fare un calcolo e giudicalo."
        example: "Esempio: risposta = ask 'Quanto fa 10 pi√π 10?'"
        demo_code: |-
            risposta = ask 'Quanto fa 10 pi√π 10?'
            if risposta is 20 print 'Yes!' else print 'Ops'
    -   name: "`ask` and `if` turtle"
        explanation: "Ask the user how many angles they want"
        example: "Example: angles = ask 'How many angles?'"
        demo_code: |-
            angles = ask 'How many angles?'
            angle = 360 / angles
            forward 50
    example_code: "## Example Hedy code\n```\n{print} '5 plus 5 is ' 5 + 5\n{print} '5 minus 5 is ' 5 - 5\n{print} '5 {times} 5 is ' 5 * 5\n```\n"
    intro_text_2: "We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:\n"
    example_code_2: "```\nname = Hedy\nanswer = 20 + 4\n```\n"
7:
    start_code: "repeat 3 times print 'Hedy √® divertente!'"
    intro_text: |
        `ask`, `print` e `if` funzionano esattamente come funzionavano nel livello 6.
        Il 7 livello introduce il comando `repeat`.
        `repeat` pu√≤ essere usato per ripetere una parte di codice 'x' volte.
        ## Esempio di codice Hedy
        ```
        repeat 3 times print 'Hedy √® divertente!'
        ```
    commands:
    -   name: "print"
        explanation: "Scrivi esattamente quello che metti tra virgolette"
        example: "Example: print 'Ciao benvenuta/o su Hedy.'"
        demo_code: "print 'Ciao benvenuta/o su Hedy.'"
    -   name: "ask"
        explanation: "Chiedi qualcosa con `ask`."
        example: "Esempio: colore = ask 'Qual √® il tuo colore preferito?'"
        demo_code: |-
            colore = ask 'Qual √® il tuo colore preferito?'
            print colore ' √® il tuo preferito!'
    -   name: "if"
        explanation: "Fai una scelta con `if`."
        example: "Esempio: if colore is verde print 'carino!' else print 'mah'"
        demo_code: |-
            colore = ask 'Qual √® il tuo colore preferito?'
            if colore is verde print 'carino!' else print 'mah'
    -   name: "repeat - turtle"
        explanation: "Repeat a line of code with `repeat`."
        example: "Example: repeat 3 times forward 10"
        demo_code: |-
            repeat 3 times forward 10
    example_code: "## Example Hedy code\n```\n{repeat} 3 {times} {print} 'Hedy {is} fun!'\n```\n"
8:
    start_code: |-
        repeat 5 times
            print 'Ciao a tutti'
            print 'Questo sar√† scritto 5 volte'
    intro_text: |
        `ask` e `print` funzionano ancora come prima, ma ora `if` e `repeat` sono cambiati!
         Ora puoi ripetere pi√π righe insieme. Quindi devi indentare le righe che vengono ripetute,
         ci√≤ significa che devono iniziare con quattro spazi.
         Anche se vuoi ripetere solo una riga, devi indentare!
         ## Esempio di codice Hedy
         ```
         repeat 5 times
             print 'Ciao a tutti'
             print 'Questo sar√† scritto 5 volte'
         ```

    commands:
    -   name: "print"
        explanation: "Scrivi qualcosa. Ricorda di usare le virgolette per scrivere parole e frasi."
        example: "Esempio: print '5 volte 5 √® ' 5 * 5"
        demo_code: "print '5 volte 5 √® ' 5 * 5"
    -   name: "if con pi√π righe"
        explanation: "Chiedi la risposta per una somma e controlla se √® corretta. Ora possiamo scrivere due righe."
        example: "Esempio: risposta = ask 'Quanto fa 5 pi√π 5?'"
        demo_code: |-
            risposta = ask 'Quanto fa 5 pi√π 5?'
            if risposta is 10
                print 'Ben fatto!'
                print 'Esatto, la risposta corretta era ' risposta
            else
                print 'Ops!'
                print 'La risposta √® ' risposta
    -   example: 'Example: draw a square'
        name: '`{repeat}` with turtle'
        explanation: '{repeat} multiple lines'
        demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
    example_code: "## Example Hedy code\n```\n{repeat} 5 {times}\n    {print} 'Hello everyone'\n    {print} 'This is all repeated 5 times'\n```\n"
9:
    commands:
    -   demo_code: "answer = {ask} 'What is 20 plus 20?'\n{if} answer {is} 20\n    {print} 'Well done!!'\n    {print} 'The answer is indeed' answer\nelse\n    {print} 'Wrong'\n    {print} 'The answer is 20'"
        name: '`{if}` with multiple lines'
        explanation: The answer of a sum of questions with '{ask}' and see if it is correct. Now we print out two lines.
        example: "Example: answer = {ask} 'What is 20 plus 20?'"
    -   example: 'Example: create a square'
        explanation: '{repeat} multiple lines'
        demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
        name: '`{repeat}` and turtle'
    start_code: "{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} 'pizza'\n        {print} 'nice!'\n    else\n        {print} 'pizza is better'"
    intro_text: "In this level you can not only use multiple lines with `{if}` {and} `{repeat}`, but you can also put them together!\nIn the example you see an `{if}` command within a `{repeat}` command. It is also allowed the other way around, and an `{if}` is also allowed in an `{if}` and a `{repeat}` in a `{repeat}`.\nGive it a try!\n\n## Example Hedy code\n```\n{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} 'pizza'\n        {print} 'nice!'\n    else\n        {print} 'pizza is better'\n```\n"
    example_code: "## Example Hedy code\n```\n{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    else\n        {print} 'pizza is better'\n```\n"
10:
    commands:
    -   name: '{print}'
        explanation: print something. Remember to use a quotation mark for literal printing.
        example: "Example: {print} '5 times 5 is ' 5 * 5"
        demo_code: "{print} '5 times 5 is ' 5 * 5"
    -   explanation: 'print all things in a list '
        example: 'Example: {for} animal {in} animals'
        demo_code: "animals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal"
        name: '{for} with a list'
    start_code: "animals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal"
    intro_text: "In this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.\n`{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with spaces.\n\n## Example Hedy code\n```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal\n```\n"
    example_code: "## Example Hedy code\n```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal\n```\n"
11:
    start_code: "{for} counter {in} {range} 1 {to} 5\n    {print} counter"
    commands:
    -   name: '{for} loop'
        explanation: We can use `{for}` with a {range}
        example: for counter {in} {range} 1 {to} 5
        demo_code: "{for} counter {in} {range} 1 {to} 5\n    {print} counter"
    -   name: '{ask}'
        explanation: ask for the answer to a sum and check if it is correct. We can now print 2 lines.
        example: "Example: answer = {ask} 'What is 5 plus 5?'"
        demo_code: "answer = {ask} 'What is 5 plus 5?'\n{if} answer {is} 10\n    {print} 'Well done!'\n    {print} 'Indeed, the answer was ' answer\nelse\n    {print} 'Oops!'\n    {print} 'The answer is 10'"
    intro_text: '`{print}` works just the same but we add a new form of the `{for}`. You can now write `{for} counter {in} {range} 1 {to} 5` and use `counter` in your program. Try it out to see what happens! Remember to use indentations after the `{for}` and `{if}` statements (That means starting a sentence with four spaces)'
    example_code: "## Example Hedy code\n```\nfor counter in range 1 to 5\n    print counter\n```\n"
12:
    commands:
    -   name: float directly
        explanation: Decimal numbers
        demo_code: "{print} 'Calculate away!'\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n"
        example: '{print} 2.5 + 2.5'
    -   name: assign text
        explanation: Text with quotation marks after =
        example: name = 'Hedy'
        demo_code: "name = 'Hedy the Robot'\n{print} 'Hello ' name\n"
    -   example: name = 'Hedy'
        explanation: Text with quotation marks after {if}
        demo_code: "name = {ask} 'Who are you?'\n{if} name = 'Hedy'\n    {print} 'Hi there!'\n"
        name: quotes after {if} comparison
    -   name: quotes in list
        explanation: A list with quotation marks
        demo_code: "superheroes = 'Iron Man', 'Batman', 'Superman'\n{print} superheroes {at} {random}\n"
        example: name = 'Hedy', 'Felienne'
    start_code: "{print} 'decimal numbers now need to use a dot'\n{print} 2.5 + 2.5"
    intro_text: "## Decimal numbers\nSo far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.\n```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n## All texts need to be in quotation marks\nFor this level on you will also have to use quotation marks when storing a text with `=`:\n\n```\nname = 'Hedy the Robot'\n{print} 'Hello ' name\n```\n## All items in lists need quotation marks too\nLists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.\nThis allows you to save two words as 1 item on the list, for example 'Iron Man'.\n\n```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n## All text after `{if}` comparisons need quotation marks too\n```\nname = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n## Numbers don't need quotation marks\n{for} numbers, you do not use quotation marks in the `=`:\n```\nscore = 25\n{print} 'You got ' score\n```\n"
    example_code: "## Example Hedy code\n```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n"
    intro_text_2: "**All texts need to be in quotation marks**\nFor this level on you will also have to use quotation marks when storing a text with `=`:\n"
    example_code_2: "```\nname = 'Hedy the Robot'\n{print} 'Hello ' name\n```\n"
    intro_text_3: "**All items in lists need quotation marks too**\nLists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.\nThis allows you to save two words as 1 item on the list, for example 'Iron Man'.\n"
    example_code_3: "```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n"
    intro_text_4: "**All text after `{if}` comparisons need quotation marks too**\n"
    example_code_4: "```\nname = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n"
    intro_text_5: "**Numbers don't need quotation marks**\nFor numbers, you do not use quotation marks in the `=`:\n"
    example_code_5: "```\nscore = 25\n{print} 'You got ' score\n```\n"
    intro_text_6: "**Maths with words** In this level it is also allowed to use the + sign with texts. For example:\n"
    example_code_6: "```\na = 'Hello '\nb = 'world!'\nprint a + b\n```\n"
13:
    commands:
    -   explanation: Two parts both need to be correct
        name: '{and}'
        example: if 3+2 {is} 5 {and} 2+2 {is} 4
        demo_code: "answer1 = {ask} 'What is 3+2?'\nanswer2 = {ask} 'What is 2+2?'\n{if} answer1 {is} 5 {and} answer2 {is} 4\n    {print} 'Both answers are correct!'\nelse\n    {print} 'At least one answer is wrong!'"
    -   explanation: At least 1 of the two parts need to be correct. If both are correct, it is also fine.
        name: '{or}'
        example: if 3+2 {is} 5 {or} 2+2 {is} 4
        demo_code: "answer1 = {ask} 'What is 3+2?'\nanswer2 = {ask} 'What is 2+2?'\n{if} answer1 {is} 5 {or} answer2 {is} 4\n    {print} 'At least one answer is correct!'\nelse\n    {print} 'Both answers are wrong!'"
    start_code: "name = {ask} 'what is your name?'\nage = {ask} 'what is your age?'\n{if} name {is} 'Hedy' {and} age {is} 2\n    {print} 'You are the real Hedy!'"
    intro_text: We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two if's but can use `{and}` and `{or}`. If you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct.
    example_code: "```\nname = ask 'what is your name?'\nage = ask 'what is your age?'\nif name is 'Hedy' and age is 2\n    print 'You are the real Hedy!'\n```\n"
14:
    commands:
    -   explanation: We use the `<` to check if the first number is smaller than the second number.
        example: 'For example: age < 12'
        name: Smaller
        demo_code: "age = {ask} 'How old are you?'\n{if} age < 13\n    {print} 'You are younger than me!'"
    -   name: Bigger
        demo_code: "age = {ask} 'How old are you?'\n{if} age > 13\n    {print} 'You are older than me!'"
        explanation: We use the `>` to check if the first number is bigger than the second number.
        example: 'For example: age > 12'
    -   name: Equal
        example: 'For example: answer == 25'
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer == 25\n    {print} 'That {is} correct!'"
        explanation: We use the `==` to check if two things are the same.
    -   name: Not equal
        explanation: 'We use the `!=` to check if two things are not the same. '
        example: 'For example: answer != 25'
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer != 25\n    {print} 'That is not correct!'"
    -   explanation: We use the `<=` to check if the first number is smaller than or equal to the second number.
        example: 'For example: age <= 12'
        name: Smaller {or} equal
        demo_code: "age = {ask} 'How old are you?'\n{if} age <= 12\n    {print} 'You are younger than me!'"
    -   name: Bigger or equal
        explanation: We use the `>=` to check if the first number is bigger than or equal to the second number.
        example: 'For example: age >= 14'
        demo_code: "age = {ask} 'How old are you?'\n{if} age >= 14\n    {print} 'You are older than me!'"
    start_code: "age = {ask} 'How old are you?'\n{if} age < 13\n    {print} 'You are younger than me!'\nelse\n    {print} 'You are older than me!'"
    intro_text: "We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.\nThe `<` checks if the first number is smaller than the second, for example `age < 12` checks if `age` {is} smaller than 12.\nIf you want to check if the first number is smaller or equal to the second, you can use `<=`, for example `age <= 11`.\nThe `>` checks if the first number is bigger than the second, for example `points > 10` checks if `points` is larger than 10.\nIf you want to check if the first number is bigger or equal to the second, you can use `>=`, for example `points >= 11`.\nYou use these comparisons in an `{if}`, like this:\n```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n\nFrom this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:\n```\nname = {ask} 'What is your name?'\n{if} name == 'Hedy'\n    {print} 'You are coo!'\n```\n\nYou can also compare if something is *not* equal to something else using `!=` like this:\n```\nname = {ask} 'What is your name?'\n{if} name != 'Hedy'\n    {print} 'You are not Hedy'\n```\n"
    example_code: "## Example Hedy Code\n```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n"
    intro_text_2: "From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:\n"
    example_code_2: "```\nname = {ask} 'What is your name?'\n{if} name == 'Hedy'\n    {print} 'You are coo!'\n```\n"
    intro_text_3: "You can also compare if something is *not* equal to something else using `!=` like this:\n"
    example_code_3: "```\nname = {ask} 'What is your name?'\n{if} name != 'Hedy'\n    {print} 'You are not Hedy'\n```\n"
15:
    commands:
    -   explanation: We can use the `{while}` loop with not equal
        example: 'Example: {while} correct_answer != 25'
        demo_code: "answer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'"
        name: '{while}'
    -   demo_code: "count = 1\n{while} count < 3\n    {print} 'We do this ' 3 - count ' more times'\n    count = count + 1\n{print} 'We are done'"
        name: Smaller {while}
        explanation: 'We can also use the `{while}` loop with `<` and `>`. '
        example: 'For example: {while} count < 3'
    start_code: "answer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'"
    intro_text: "We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.\nSo don't forget to change the value in the loop.\n\nIn the example code, we continue until a correct answer has been given.\nIf the correct answer is never given, the loop never ends!\n"
    example_code: "## Example Hedy code\n```\nanswer = 0\nwhile answer != 25\n    answer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n```\n"
16:
    commands:
    -   name: square brackets
        explanation: Lists with square brackets
        example: "For example: fruit = ['apple', 'banana', 'cherry']"
        demo_code: "fruit = ['apple', 'banana', 'cherry']\n{print} fruit"
    -   name: Get an item from a list
        explanation: To get an item from a list we use [number] so fruit[1] means, get the first fruit from the list!
        example: 'For example: firstfruit = fruit[1]'
        demo_code: "fruit = ['banana', 'apple', 'cherry']\nfirstfruit = fruit[1]\n{print} firstfruit"
    -   name: Get a random item from a list
        explanation: To get a random item from a list we use [random] so fruit[random] means, get a random fruit from the list!
        example: 'For example: random_fruit {is} fruit[random]'
        demo_code: "fruit = ['banana', 'apple', 'cherry']\nrandom_fruit = fruit[random]\n{print} random_fruit"
    start_code: "fruit = ['apple', 'banana', 'cherry']\n{print} fruit"
    intro_text: "We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.\nYou can use the square brackets as well to point out a place in the lists.\n\n```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
    example_code: "## Example Hedy Code\n```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
17:
    commands:
    -   explanation: '`{elif}`.'
        example: '{elif} a {is} 5:'
        demo_code: "a = 2\n{if} a == 1:\n    {print} 'a is 1'\n{elif} a == 2:\n    {print} 'a is 2'\n{else}:\n    {print} 'a is not 1 or 2'"
        name: '{elif}'
    -   name: '{print}'
        explanation: When we use a `{for}`, we need to put a `:` behind the `{for}` statement!
        example: 'for i {in} {range} 1 {to} 10:'
        demo_code: "{for} i {in} {range} 1 {to} 12:\n    {print} i\n{print} 'Ready or not, here I come!'"
    -   explanation: We need to do the same with all of our `{if}` statements
        name: '{if}'
        example: if colour {is} green:'
        demo_code: "colour = {ask} 'What is your favorite color?'\n{if} colour == green:\n    {print} 'Your favorite colour is green'\n{else}:\n    {print} 'Your favorite colour is not green'"
    start_code: "{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Ready or not, here I come!'"
    intro_text: "Now we are going to change a little bit with indentation. Every time that we need an indentation, we need `:` at the line before the indentation.\n\nIn this level you can also use a new command: `{elif}`. `{elif}` is short for {else} {if} and you need it when you you want to make 3 (or more!) options.\nCheck it out!\n```\nprices = ['1 million dollars', 'an apple pie', 'nothing']\nyour_price = prices[random]\n{print} 'You win ' your_price\n{if} your_price == '1 million dollars' :\n    {print} 'Yeah! You are rich!'\n{elif} your_price == 'an apple pie' :\n    {print} 'Lovely, an apple pie!'\n{else}:\n    {print} 'Better luck next time..'\n```\n"
18:
    commands:
    -   name: '{print}'
        explanation: With `{print}` you need to use parentheses
        example: '{print}'
        demo_code: "{print}('hi!')"
    -   name: '{print} with var'
        explanation: With `{print}` you need to use parentheses and commas if you {print} more items
        example: '{print}'
        demo_code: "naam = 'Hedy'\n{print}('my name is ', naam)"
    start_code: "naam = 'Hedy'\n{print}('My name is ', naam)"
    intro_text: "We arrived at real pythoncode! That means we need to use parentheses with {print} and {range} from now on.\nThat looks like this:\n```\n{print}('my name is Hedy!')\n```\nIf you want to print more thant one items, you need to separate them by commas.\n```\nnaam = 'Hedy'\n{print}('my name is ', naam)\n```"