1:
  intro_text: |
    ## Welcome to Hedy!
    In Level 1 you can use the commands `{print}`, `{ask}` and `{echo}`.
    Type your code in the programming field. Or press the green button in the example code block, and the code will be typed for you!
    Try the code yourself with the green 'Run code' button under the programming field.

    You can print text to the screen using the `{print}` command.

  example_code: |
    ## Example code
    ```
    {print} Hello!
    {print} Welcome to Hedy!
    ```

  intro_text_2: |
    You can also ask for input with `{ask}` and repeat it back with an `{echo}` command.

  intro_text_3: |
    Let's get started! Don't know what to create? In the next tabs you will find ideas for programs to build.
  example_code_2: |
    ## Example code
    ```
    {ask} What is your name?
    {echo} hello
    ```

  start_code: "{print} hello world!"
2:
  intro_text: |
    ## Variables
    In level 2 we learn two new commands: `{is}` and `{sleep}`.
    You can name a word with `{is}`. This is called a variable. In this example we made a variable called name and a variable called age. You can use the word name anywhere in your code and it will be replaced by Hedy, like this:

    This way you no longer need the `{echo}` command!

  example_code: |
    ## Example code
    ```
    name {is} Hedy
    age {is} 15
    {print} name is age years old
    ```
  intro_text_2: |
    `{print}` still works the same, but the `{ask}` command has changed. You need to use a variable in the `{ask}` command as well. It looks like this:
  example_code_2: |
    ```
    answer {is} {ask} What is your name?
    {print} Hello answer
    ```
  intro_text_3: |
    Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.
  example_code_3: |
    ```
    {print} My favorite colour is...
    {sleep} 2
    {print} green!
    ```
  start_code: "{print} hello world!"
3:
  intro_text: |
    ## Make a list!
    In level 3 you can make a list. You can let the computer choose something random from the list. You do that with `{at} {random}`.

  example_code: |
    ## Example Hedy Code

    ```
    animals {is} dog, cat, kangaroo
    {print} animals {at} {random}
    ```

  intro_text_2:
    You can also add items to the list with `{add}` and remove items with `{remove}`.

  example_code_2: |
    ## Example Hedy Code

    ```
    animals {is} dog, cat, kangaroo
    {add} penguin {to_list} animals
    {remove} cat {from} animals
    {print} animals {at} {random}
    ```

  start_code: "{print} hello world!"
4:
  start_code: "{print} 'Hello world'"
  intro_text: |
    ## 'Quotation marks'
    In level 4 `{ask}` and `{print}` have changed.

    You must put text that you want to print between quotation marks.

    This is useful, because now you can print all the words you want. Also the words you used to store something with `{is}`.

    Most programming languages also use quotation marks when printing, so we are also getting a step closer to real programming!
  example_code: |
    ## Example Hedy code
    ```
    print 'You need to use quotation marks from now on!'
    answer is ask 'What do we need to use from now on?'
    print 'We need to use ' answer
    ```
  intro_text_2: |
    ## Adventures are getting more and more difficult
    The adventures are now getting more and more difficult in the successive tabs.
    So it is best to start on the left with the story, and work to the right, in order to be challenged more and more.
5:
  start_code: |-
    name {is} {ask} 'what is your name?'
    {if} name {is} Hedy {print} 'cool!' {else} {print} 'meh'
  intro_text: |
    ## If... else....
    In level 5 there is something new, the `{if}`! With the `{if}` you can choose between two different options.
    This code prints nice if you enter Hedy as a name, and boo! if you enter something else.
    `{ask}` {and} `{print}` still work like they did in level 4.
  example_code: |
     ## Example Hedy Code
     ```
     name {is} {ask} 'what is your name?'
     {if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'
     ```
  intro_text_3: |
     ## Lists
     When we want to check if something is in a list, we can now use the `{in}` command.
     This code prints pretty! if you choose green or yellow, and meh otherwise.
  example_code_3: |
     ```
     pretty_colors {is} green, yellow
     color {is} {ask} 'What is your favorite color?'
     {if} color {in} pretty_colors {print} 'pretty!'
     {else} {print} 'meh'
     ```
  intro_text_2: |
     Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:
  example_code_2: |
     ```
     name {is} {ask} 'what is your name?'
     {if} name {is} Hedy {print} 'nice'
     {else} {print} 'boo!'
     ```
6:
  start_code: "{print} '5 times 5 is ' 5 * 5"
  intro_text: |
    ## 1 + 1
     In this level you learn something new: you can now also calculate.

     The plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.

     The {times} is a bit different, because there is no {times} symbol on your keyboard. Just search, there really isn't!
     That is why we multiply with the asterisk above 8: `5 * 5`. Read that as "5 times 5" that helps you remember it best.
  example_code: |
     ## Example Hedy code
     ```
     {print} '5 plus 5 is ' 5 + 5
     {print} '5 minus 5 is ' 5 - 5
     {print} '5 {times} 5 is ' 5 * 5
     ```
  intro_text_2: |
     We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:
  example_code_2: |
     ```
     name = Hedy
     answer = 20 + 4
     ```
7:
  start_code: "{repeat} 3 {times} {print} 'Hedy is fun!'"
  intro_text: |
    ## Level 7! Level 7!
    Level 7 adds the `{repeat}` command. {repeat} can be used to execute one line of code multiple times.
  example_code: |
    ## Example Hedy code
    ```
    {repeat} 3 {times} {print} 'Hedy {is} fun!'
    ```
8:
  start_code: |-
    {repeat} 5 {times}
        {print} 'Hello folks'
        {print} 'This will be printed 5 times'
  intro_text: |
    ## Indentation
    `{ask}` {and} `{print}` still work as you know them. But `{if}` {and} `{repeat}` have changed!
    You can now execute groups of code together, but you will have to *indent* the code.
    That means putting four spaces at the beginning of the line. You will also have to indent when you just want to create a block of one line.
  example_code: |
    ## Example Hedy code
    ```
    {repeat} 5 {times}
        {print} 'Hello everyone'
        {print} 'This is all repeated 5 times'
    ```
9:
  start_code: |-
    {repeat} 3 {times}
        food = {ask} 'What do you want?'
        {if} food {is} pizza
            {print} 'nice!'
        else
            {print} 'pizza is better'
  intro_text: |
    ## All together now!
    In this level you can not only use multiple lines with `{if}` {and} `{repeat}`, but you can also put them together!
    In the example you see an `{if}` command within a `{repeat}` command. It is also allowed the other way around, and an `{if}` is also allowed in an `{if}` and a `{repeat}` in a `{repeat}`.
    Give it a try!
  example_code: |
    ## Example Hedy code
    ```
    {repeat} 3 {times}
        food = {ask} 'What do you want?'
        {if} food {is} pizza
            {print} 'nice!'
        else
            {print} 'pizza is better'
    ```
10:
  start_code: |-
    animals {is} dog, cat, blobfish
    {for} animal {in} animals
      {print} 'I love ' animal
  intro_text: |
    ## For each item in my list...
    In this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.
    `{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with spaces.
  example_code: |
    ## Example Hedy code
    ```
    animals {is} dog, cat, blobfish
    {for} animal {in} animals
      {print} 'I love ' animal
    ```
11:
  start_code: |-
    {for} counter {in} {range} 1 {to} 5
        {print} counter
  intro_text: |
    ## Loops!
    `{print}` works just the same but we add a new form of the `{for}`. You can now write `{for} counter {in} {range} 1 {to} 5` and use `counter` in your program.
    Try it out to see what happens! Remember to use indentations after the `{for}` and `{if}` statements (That means starting a sentence with four spaces)
  example_code: |
    ## Example Hedy code
    ```
    for counter in range 1 to 5
        print counter
    ```
12:
  start_code: |-
    {print} 'decimal numbers now need to use a dot'
    {print} 2.5 + 2.5
  intro_text: |
    ## Numbers and texts
    **Decimal numbers**
    So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.
  example_code: |
    ## Example Hedy code
    ```
    {print} 'Two and a half plus two and a half is...'
    {print} 2.5 + 2.5
    ```
  intro_text_2: |
    **All texts need to be in quotation marks**
    For this level on you will also have to use quotation marks when storing a text with `=`:
  example_code_2: |
    ```
    name = 'Hedy the Robot'
    {print} 'Hello ' name
    ```
  intro_text_3: |
    **All items in lists need quotation marks too**
    Lists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.
    This allows you to save two words as 1 item on the list, for example 'Iron Man'.
  example_code_3: |
    ```
    superheroes = 'Spiderman', 'Batman', 'Iron Man'
    {print} superheroes {at} {random}
    ```
  intro_text_4: |
    **All text after `{if}` comparisons need quotation marks too**
  example_code_4: |
    ```
    name = {ask} 'What is your name?'
    {if} name = 'Hedy the Robot'
        {print} 'Hi there!'
    ```
  intro_text_5: |
    **Numbers don't need quotation marks**
    For numbers, you do not use quotation marks in the `=`:
  example_code_5: |
    ```
    score = 25
    {print} 'You got ' score
    ```
  intro_text_6: |
    **Maths with words** In this level it is also allowed to use the + sign with texts. For example:
  example_code_6: |
    ```
    a = 'Hello '
    b = 'world!'
    print a + b
    ```
13:
  start_code: |-
    name = {ask} 'what is your name?'
    age = {ask} 'what is your age?'
    {if} name {is} 'Hedy' {and} age {is} 2
        {print} 'You are the real Hedy!'
  intro_text: |
    ## And... Or..?
    We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two if's but can use `{and}` and `{or}`. If you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct.
  example_code: |
    ```
    name = ask 'what is your name?'
    age = ask 'what is your age?'
    if name is 'Hedy' and age is 2
        print 'You are the real Hedy!'
    ```
14:
  start_code: |-
    age = {ask} 'How old are you?'
    {if} age < 13
        {print} 'You are younger than me!'
    else
        {print} 'You are older than me!'
  intro_text: |
    ## Great, Greater, Greatest!
    We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.
    The `<` checks if the first number is smaller than the second, for example `age < 12` checks if `age` {is} smaller than 12.
    If you want to check if the first number is smaller or equal to the second, you can use `<=`, for example `age <= 11`.
    The `>` checks if the first number is bigger than the second, for example `points > 10` checks if `points` is larger than 10.
    If you want to check if the first number is bigger or equal to the second, you can use `>=`, for example `points >= 11`.
    You use these comparisons in an `{if}`, like this:
  example_code: |
    ## Example Hedy Code
    ```
    age = {ask} 'How old are you?'
    {if} age > 12
        {print} 'You are older than I am!'
    ```
  intro_text_2: |
    From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:
  example_code_2: |
    ```
    name = {ask} 'What is your name?'
    {if} name == 'Hedy'
        {print} 'You are coo!'
    ```
  intro_text_3: |
    You can also compare if something is *not* equal to something else using `!=` like this:
  example_code_3: |
    ```
    name = {ask} 'What is your name?'
    {if} name != 'Hedy'
        {print} 'You are not Hedy'
    ```
15:
  start_code: |-
    answer = 0
    {while} answer != 25
        answer = {ask} 'What is 5 times 5?'
    {print} 'A correct answer has been given'
  intro_text: |
    ## More loops!
    We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.
    So don't forget to change the value in the loop.

    In the example code, we continue until a correct answer has been given.
    If the correct answer is never given, the loop never ends!
  example_code: |
    ## Example Hedy code
    ```
    answer = 0
    while answer != 25
        answer = ask 'What is 5 times 5?'
    print 'A correct answer has been given'
    ```
16:
  start_code: |-
    fruit = ['apple', 'banana', 'cherry']
    {print} fruit
  intro_text: |
    ## More and more like real code!
    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
    You can use the square brackets as well to point out a place in the lists.
  example_code: |
    ## Example Hedy Code
    ```
    friends = ['Ahmed', 'Ben', 'Cayden']
    lucky_numbers = [15, 18, 6]
    {for} i {in} {range} 1 {to} 3
        {print} 'the lucky number of ' friends[i]
        {print} 'is ' lucky_numbers[i]
    ```
17:
  start_code: |-
    {for} i {in} {range} 1 {to} 10:
        {print} i
    {print} 'Ready or not, here I come!'
  intro_text: |
    Now we are going to change a little bit with indentation. Every time that we need an indentation, we need `:` at the line before the indentation.

    In this level you can also use a new command: `{elif}`. `{elif}` is short for {else} {if} and you need it when you you want to make 3 (or more!) options.
    Check it out!
    ```
    prices = ['1 million dollars', 'an apple pie', 'nothing']
    your_price = prices[random]
    {print} 'You win ' your_price
    {if} your_price == '1 million dollars' :
        {print} 'Yeah! You are rich!'
    {elif} your_price == 'an apple pie' :
        {print} 'Lovely, an apple pie!'
    {else}:
        {print} 'Better luck next time..'
    ```
18:
  start_code: |-
    naam = 'Hedy'
    {print}('My name is ', naam)
  intro_text: |-
    ## Level 18
    We arrived at real pythoncode! That means we need to use parentheses with {print} and {range} from now on.
    That looks like this:
    ```
    {print}('my name is Hedy!')
    ```
    If you want to print more than one items, you need to separate them by commas.
    ```
    name = 'Hedy'
    {print}('my name is ', name)
    ```