1:
    intro_text: |
        ¡Bienvenido a Hedy! En el Nivel 1 puedes usar los comandos `{print}`,` {ask}` y `{echo}`.

        En el lado izquierdo de tu pantalla están todos los comandos del Nivel 1.

        ¡Presiona el botón azul y el código será escrito automáticamente!

        Prueba el código con el botón verde 'Ejecutar código' debajo del espacio de programación de la izquierda.

        ¿No sabes qué crear? En las siguientes pestañas encontrarás algunas ideas en las que inspirarte.
    start_code: "{print} hola mundo!"
    commands:
    -   name: "{print}"
        explanation: "Mostrar algo con `{print}`."
        example: "Ejemplo: {print} Hola bienvenido a Hedy!"
        demo_code: "{print} Hola bienvenido a Hedy!"
    -   name: "{ask}"
        explanation: "Preguntar algo con `{ask}`."
        example: "Ejemplo: {ask} ¿Cuál es tu color favorito?"
        demo_code: "{ask} ¿Cuál es tu color favorito?"
    -   name: "{echo}"
        explanation: "Repetir algo usando `{echo}`."
        example: "Ejemplo: {echo} entonces tu color favorito es "
        demo_code: |-
            {ask} ¿Cuál es tu color favorito?
            {echo} entonces tu color favorito es 
2:
    intro_text: |
        En el nivel 2 aprendemos algo nuevo. Puedes nombrar una palabra con `{is}`.

        Si pones el código en la parte superior de tu programa, puedes usar `name` en cualquier parte y será reemplazado por Hedy:

        ```
        nombre {is} Hedy
        {print} Bienvenido nombre
        ```

        Nota: `{ask}` ha cambiado en el nivel 2, también puedes guardar la respuesta con un nombre:

        ```
        respuesta {is} {ask} ¿Cómo te llamas?
        ```

        `{print}` sigue funcionando como en el nivel 1, así que ya no necesitas usar `{echo}`.
    start_code: "{print} hola mundo!"
    commands:
    -   name: "{is}"
        explanation: "Dar un nombre a una palabra para usar en el programa con `{is}`."
        example: "Ejemplo: nombre {is} Hedy"
        demo_code: |-
            nombre {is} Hedy
            {print} Bienvenido nombre
    -   name: "{ask}"
        explanation: "Preguntar algo con `{ask}`. ¡Atención! Necesitas darle un nombre a la respuesta con `{is}`"
        example: "Ejemplo: color {is} {ask} ¿Cuál es tu color favorito?"
        demo_code: |-
            color {is} {ask} ¿Cuál es tu color favorito?
            {print} El color es tú favorito
3:
    intro_text: |
        En el nivel 3 también puedes hacer una lista. Puedes dejar al ordenador escoger algo aleatorio de la lista, usando `{at} {random}` (se pronuncia: et ren-dom).

        ```
        animales {is} perro, gato, canguro
        {print} animales {at} {random}
        ```

        Encontrarás todos los códigos del nivel 3 en la barra de la izquierda. También hay pestañas con ejemplos.
    start_code: "{print} hola mundo!"
    commands:
    -   name: "choose_random"
        explanation: "Seleccionar una palabra aleatoria de un grupo usando `{at}` y `{random}`."
        example: "Ejemplo: animales {is} perro, gato, canguro"
        demo_code: |-
            animales {is} perro, gato, canguro
            {print} animales {at} {random}
4:
    intro_text: |
        En el nivel 4 `{ask}` y `{print}` funcionan diferente.

        Debes poner el texto que quieras imprimir entre comillas.

        Esto es útil, porque ahora puedes imprimir todas las palabras que quieras. También las palabras que usaste para almacenar algo con `{is}`.

        La mayoría de los lenguajes de programación también utilizan comillas al imprimir, ¡por lo que nos estamos acercando un paso más a la programación real!

        ## Las tareas son cada vez más difíciles
        Encontrarás de nuevo los comandos a la izquierda y las tareas en las siguientes pestañas. Las tareas serán cada vez más difíciles.
        Así que lo mejor es empezar por la izquierda con la historia y continuar hacia la derecha para que los desafíos sean cada vez mayores.
    start_code: "{print} 'Hola mundo'"
    commands:
    -   name: "{print}"
        explanation: "Para mostrar un texto literal con el comando `{print}` debes usar las comillas simples."
        example: "Ejemplo: {print} 'Hola bienvenido a Hedy.'"
        demo_code: "{print} 'Hola bienvenido a Hedy.'"
    -   name: "{is}"
        explanation: "Dar un nombre al texto y mostrar sin comillas simples."
        example: "Ejemplo: nombre {is} Hedy."
        demo_code: |-
            nombre {is} Hedy
            {print} 'Mi nombre es ' nombre
    -   name: "{ask}"
        explanation: "Preguntar algo con `{ask}`."
        example: "Ejemplo: color {is} '{ask} ¿Cuál es tu color favorito?'"
        demo_code: |-
            color {is} {ask} '¿Cuál es tu color favorito?'
            {print} 'Tu color favorito es ' color
5:
    start_code: |-
        nombre {is} {ask} '¿Cómo te llamas?'
        {if} nombre {is} Hedy {print} '¡genial!' {else} {print} 'meh'
    intro_text: |
        `{ask}` y `{print}` siguen funcionando como en el nivel 4.

         En el nivel 5 hay algo nuevo, el `{if}`! `{if}` significa `si` en inglés. Con el `{if}` puedes elegir entre dos opciones.

         ## Ejemplo de código Hedy
         ```
         nombre {is} {ask} '¿Cómo te llamas?'
         {if} nombre {is} Hedy {print} 'bien' {else} {print} 'buu'
         ```

         Este código imprime bien si introduces Hedy como nombre, y buu si introduces algo distinto.

         ## Las tareas son cada vez más difíciles

         También en el nivel 5, las tareas en las pestañas se vuelven cada vez más difíciles. Así que hazlas de izquierda a derecha.
    commands:
    -   name: "{print}"
        explanation: "Mostrar un texto literal con el comando `{print}`."
        example: "Ejemplo: {print} 'Hola bienvenido a Hedy.'"
        demo_code: "{print} 'Hola bienvenido a Hedy.'"
    -   name: "{ask}"
        explanation: "Preguntar algo con `{ask}`."
        example: "Ejemplo: color {is} {ask} ¿Cuál es tu color favorito?"
        demo_code: |-
            color {is} {ask} ¿Cuál es tu color favorito?
            {print} 'Tu color favorito es ' color
    -   name: "{if}"
        explanation: "Elegir una opción con `{if}`"
        example: "Ejemplo: {if} color {is} verde {print} 'qué bonito!' {else} {print} 'no es tan bonito'"
        demo_code: |-
            color {is} {ask} '¿Cuál es tu color favorito?'
            {if} color {is} verde {print} 'qué bonito!' {else} {print} 'no es tan bonito'
6:
    start_code: "{print} '5 veces 5 es ' 5 * 5"
    intro_text: |
        `{ask}`,` {print}` y `{if}` siguen funcionando como en los niveles 5.
         Pero en el nivel 6 hay algo nuevo, ahora también puedes calcular.

         El signo más es fácil, lo escribes como en las matemáticas: `5 + 5` por ejemplo. El signo menos también funciona: `5 - 5`.

         La multiplicación es un poco diferente, ya que no hay signo de multiplicación en el teclado. ¡Búscalo, verás que no lo hay!
         Es por eso que usamos el asterisco para multiplicar: `5 * 5`. Lee esto como "5 veces 5", entonces lo recordarás con mayor facilidad.
         ## Ejemplo de código Hedy
         ```
         {print} '5 más 5 es ' 5 + 5
         {print} '5 menos 5 es ' 5 - 5
         {print} '5 multiplicado por 5 es ' 5 * 5
         ```
    commands:
    -   name: "{print}"
        explanation: "Mostrar un texto literal con `{print}` usando comillas simples."
        example: "Ejemplo: {print} '5 multiplicado por 5 es ' 5 * 5"
        demo_code: "{print} '5 multiplicado por 5 es ' 5 * 5"
    -   name: "{ask} e {if} con operaciones"
        explanation: "Pregunta por una operación y comprueba que sea correcta."
        example: "Ejemplo: respuesta = {ask} ¿Cuánto es 10 más 10?"
        demo_code: |-
            resultado = {ask} '¿Cuánto es 10 más 10?'
            {if} resultado {is} 20 {print} '¡¡Correcto!!' {else} {print} '¡Casi!, inténtalo otra vez'
    -   name: "`{ask}` and `{if}` turtle"
        explanation: "Ask the user how many angles they want"
        example: "Example: angles = {ask} 'How many angles?'"
        demo_code: |-
            angles = {ask} 'How many angles?'
            angle = 360 / angles
            {forward} 50
7:
    start_code: "{repeat} 3 {times} {print} 'Hedy es divertido!'"
    intro_text: |
        `{ask}`, `{print}` e `{if}` funcionan como en el nivel 5 y 6.
        Pero en el nivel 7 hay algo nuevo: `{repeat}`.
        Con `{repeat}` puedes repetir una línea de código varias veces.
        ## Ejemplo de código Hedy
        ```
        {repeat} 3 {times} {print} 'Hedy es divertido!'
        ```
    commands:
    -   name: "{print}"
        explanation: "Imprimir un texto literal con `{print}`."
        example: "Ejemplo: {print} 'Hola bienvenido a Hedy.'"
        demo_code: "{print} 'Hola bienvenido a Hedy.'"
    -   name: "{ask}"
        explanation: "Preguntar algo con `{ask}`."
        example: "Ejemplo: color = {ask} '¿Cuál es tu color favorito?'"
        demo_code: |-
            color = {ask} '¿Cuál es tu color favorito?'
            {print} 'Tu color favorito es el ' color
    -   name: "{if}"
        explanation: "Tomar una decisión con `{if}`."
        example: "Ejemplo: {if} color {is} verde {print} '¡qué bonito!' {else} {print} 'no es tan bonito'"
        demo_code: |-
            color = {ask} '¿Cuál es tu color favorito?'
            {if} color {is} verde {print} '¡qué bonito!' {else} {print} 'no es tan bonito'
    -   name: "{repeat} - turtle"
        explanation: "Repeat a line of code with `{repeat}`."
        example: "Example: {repeat} 3 {times} {forward} 10"
        demo_code: |-
            {repeat} 3 {times} {forward} 10
8:
    start_code: |-
        {repeat} 5 {times}
            {print} 'Hola amigos'
            {print} 'Esto se va a mostrar 5 veces'
    intro_text: |
        `{ask}` y `{print}` siguen funcionando igual. Pero `{if}` y `{repeat}` han cambiado!
        Ahora puedes ejecutar grupos de código, pero vas a tener que respetar el sangrado.
        Esto signfica que es necesario poner 4 espacios al principio de la línea. Esto también se aplica cuando solo deseas crear un bloque de una línea.

        ## Ejemplo de código Hedy
        ```
        {repeat} 5 {times}
            {print} 'Hola amigos'
            {print} 'Esto se va a mostrar 5 veces'
        ```
    commands:
    -   name: "{print}"
        explanation: "Imprime algo con `{print}`. Recuerda usar las comillas simples para mostrar el texto literal."
        example: "Ejemplo: {print} '5 multiplicado por 5 es ' 5 * 5"
        demo_code: "{print} '5 multiplicado por 5 es ' 5 * 5"
    -   name: "`{if}` con varias líneas"
        explanation: "Pregunta por la respuesta de una suma y comprueba el resultado. Ahora podemos mostrar 2 líneas."
        example: "Ejemplo: resultado = {ask} '¿Cuánto es 5 más 5?'"
        demo_code: |-
            resultado = {ask} '¿Cuánto es 5 más 5?'
            {if} resultado {is} 10
                {print} '¡Muy bien!'
                {print} 'Efectivamente, la respuesta es ' resultado
            {else}
                {print} '¡Ups!'
                {print} 'La respuesta es 10'
