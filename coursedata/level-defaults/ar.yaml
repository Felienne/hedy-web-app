1:
    intro_text: |-
        مرحبا بكم في هيدي! في المستوى الأول يمكنكم استخدام الأوامر `قول` و `اسأل` و  ردد`
        في الشريط على الجانب الأيمن يمكنك رؤية كل الأوامر المتاحة في المستوى الأول. يمكنك الضغط على الزر الأزرق هناك وسيتم كتابة الكود عنك في الشاشة المخصصة!
        قم بتجربة الكود بنفسك من خلال ال ضغط على الزر الأخضر "تشغيل الكود" الموجود تحت مساحة البرمجة اليمنى. 
        لا تعرف بعد ما الذي تريد برمجته؟ في علامات التبويب التالية يمكنك أن تجد بعض الأفكار لما يمكنك عمله. 
    start_code: قول مرحبا أيها العالم!
    commands:
    -   name: قول
        explanation: اطبع شيئا على الشاشة باستخدام `قول`
        example: 'مثال: قول أهلا ومرحبا بكم في هيدي!'
        demo_code: قول أهلا ومرحبا بكم في هيدي!
    -   name: اسأل
        explanation: اسأل عن شيء ما باستخدام `اسأل`
        example: 'مثال: اسأل ما لونك المفضل؟'
        demo_code: اسأل ما لونك المفضل؟
    -   name: ردد
        explanation: اعد ترديد اجابة شخص ما على السؤال
        example: 'مثال: ردد اذن لونك المفضل هو '
        demo_code: |-
            اسأل ما لونك المفضل؟
            ردد اذن لونك المفضل هو
    -   name: تقدم
        explanation: ارسم خطا مستقيما باستخدام `تقدم`
        example: 'مثال: تقدم 100'
        demo_code: تقدم 100
    -   name: انعطف
        explanation: قم بتحويل اتجاه الرسم باستخدام `انعطف`
        example: 'مثال: انعطف'
        demo_code: |-
            تقدم 25
            انعطف left
            تقدم 25
            انعطف right
    -   example: 'Example: {turn}'
        demo_code: "{forward} 25\n{turn} left\n{forward} 25\n{turn} right"
        explanation: turn the drawing turtle with `{turn}`
        name: '{turn}'
    intro_text_2: "يمكنك أن تسأل عن معلومة معينة وتعيد ترديدها من خلال الأمر `{ردد}`.\nجرب الكود الموجود على اليسار. \n\nلا تعرف بعد ما الذي تريد برمجته؟ في علامات التبويب التالية يمكنك أن تجد بعض الأفكار لما يمكنك صنعه.\n"
    example_code_2: "##مثال توضيحي\n```\n{اسأل} ما اسمك؟\n{ردد} مرحبا\n```\n"
    example_code: "## مثال توضيحي\n```\n{قول}  مرحبا!\n{قول} أهلاً بكم في هيدي!\n```\n"
    intro_text_3: "Let's get started! Don't know what to create? In the next tabs you will find ideas for programs to build.\n"
2:
    intro_text: |-
        في المستوى الثاني نتعلم شيئا جديدا. يمكنك أن تعطي اسما لشيء ما باستخدام `هو`. بامكانك بعدها أن تستخدم هذا الاسم في أي مكان في الكود و ستقوم هيدي بوضع محتوى الاسم بدلا عنه . كما يوضح المثال التالي

        ``` اسمي هو هيدي
        قول مرحبا اسمي
        ```
        ملاحظة: لقد تغير الأمر `اسأل`، بامكانك الان ان تحتفظ بالاجابة على السؤال من خلال اعطائها اسما معينا، كما التالي 
        ```
        اجابتي هو اسأل ما اسمك؟
        ```
        الأمر `قول` لا يزال يعمل كما في المستوى الأول، ولم تعد الان بحاجة للأمر `ردد`
    start_code: قول مرحبا أيها العالم
    commands:
    -   name: هو
        explanation: اعط اسما لاي كلمة تريد استخدامها في البرنامج من خلال الأمر `هو`. بامكانك اختيار الاسم بنفسك.
        example: 'مثال: اسمي هو هيدي'
        demo_code: |-
            اسمي هو هيدي
            قول مرحبا اسمي
    -   name: اسأل
        explanation: اسأل عن شيء ما باستخدام `اسأل`. انتبه! يجب عليك أن تعطي الاجابة اسما باستخدام `هو`
        example: 'مثال: لون هو اسأل ما لونك المفضل؟'
        demo_code: |-
            لون هو اسأل ما لونك المفضل؟ 
            قول لون هو المفضل لديك
    -   explanation: اعط اسما لرقم من خلال الأمر `هو`. بامكانك اختيار الاسم بنفسك.
        example: 'مثال: زاوية هو 90'
        demo_code: |-
            انحناء هو 90 
            انعطف انحناء
            تقدم 100
        name: هو
    -   name: is - turtle
        explanation: Give a number a name using `{is}`. You can choose the name yourself.
        example: 'Example: angle {is} 90'
        demo_code: "angle {is} 90\n{turn} angle\n{forward} 100"
    example_code: "## Example code\n```\nname {is} Hedy\nage {is} 15\n{print} name is age years old\n```\n"
    intro_text_2: "`{print}` still works the same, but the `{ask}` command has changed. You need to use a variable in the `{ask}` command as well. It looks like this:\n"
    example_code_2: "```\nanswer {is} {ask} What is your name?\n{print} Hello answer\n```\n"
    intro_text_3: "Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.\n"
    example_code_3: "```\n{print} My favorite colour is...\n{sleep} 2\n{print} green!\n```\n"
3:
    intro_text: |-
        في المستوى الثالث يمكنك أيضا ان تنشأ قائمة. يمكنك بعدها أن تجعل الكمبيوتر يختار لك شيئا من القائمة بشكل عشوائي - يمكنك القيام بذك من خلال الأمر `بشكل عشوائي`.
        ```
        صديقي هو احمد، خالد، حسن
        قول صديقي بشكل عشوائي
        ```
        يمكنك أن تجد كل أوامر المستوى الثالث في الشريط على الجانب الأيمن. هناك ايضا علامات تبويب مع مهمات يمكنك عملها
    start_code: قول مرحبا أيها العالم
    commands:
    -   name: بشكل عشوائي
        explanation: 'يختار كلمة من مجموعة او قائمة بشكل عشوائي '
        example: 'مثال: حيوانات هو كلب، قطة، جمل'
        demo_code: |-
            صديقي هو احمد، خالد، حسن
    -   name: '{add}'
        explanation: add an item to a list
        example: 'Example: {add} dog {to_list} animals'
        demo_code: "animals {is} cow, cat\n{add} dog {to_list} animals"
    -   example: 'Example: {remove} dog {from} animals'
        demo_code: "animals {is} cat, dog, cow\n{remove} dog {from} animals"
        name: '{remove}'
        explanation: remove an item from a list
    example_code: "## Example Hedy Code\n\n```\nanimals {is} dog, cat, kangaroo\n{print} animals {at} {random}\n```\n"
    intro_text_2: You can also add items to the list with `{add}` and remove items with `{remove}`.
    example_code_2: "## Example Hedy Code\n\n```\nanimals {is} dog, cat, kangaroo\n{add} penguin {to_list} animals\n{remove} cat {from} animals\n{print} animals {at} {random}\n```\n"
4:
    start_code: قول 'مرحبا أيها العالم'
    intro_text: |
        هناك تغيير على `قول` و `اسأل` في المستوى الرابع. 
         يجب عليك أن تضع الكلام المكتوب الذي تريد الكمبيوتر ان يطبعه على الشاشة في داخل علامات اقتباس. 
        هذا مفيد لإنه يمكنك من طباعة كل الكلمات التي نريدها حتى الكلمات التي قمت بتخزينها باستخدام الأمر `هو`.
        معظم لغات البرمجة تستخدم علامات الاقتباس عند طباعة الكلام على الشاشة باستخدام الكود، لذلك نحن نتقدم خطوة أخرى باتجاه البرمجة الحقيقية.
    commands:
    -   name: قول
        explanation: يطبع محتوى ما بين علامات الاقتباس
        example: "مثال: قول 'اهلا بكم ومرحبا في هيدي'"
        demo_code: قول 'اهلا بكم ومرحبا في هيدي'
    -   name: هو
        explanation: اعط اسما لكلمة أو رقم معين. اطبع محتوى هذا الاسم بدون حاجة الى علامات اقتباس
        example: 'مثال: اسمي هو هيدي '
        demo_code: |
            اسمي هو هيدي
            قول 'انا اسمي ' اسمي
    -   name: اسأل
        explanation: اسأل عن شيء ما من خلال الأمر `اسأل`
        example: "مثال: لوني هو اسأل 'ما هو لونك المفضل؟'"
        demo_code: |-
            لوني هو اسأل 'ما هو لونك المفضل؟'
            قول لوني 'هو لوني المفضل'
#5:
#    start_code: |-
#        اسمي هو اسأل 'ما اسمك؟'
#        اذا اسمي هو هيدي قول 'رائع!!' وإلا قول 'يا خسارة!'
#    intro_text: |-
#        الأمر `اسأل` و الأمر `قول` لا يزالان يعملان بنفس الطريقة كما في المستوى الرابع.
#        في المستوى الخامس لدينا شيء جديد: الأمر `اذا`! باستخدام الأمر `اذا` يمكنك أن تفحص شيئا ما وتختار ما بين خيارين مختلفين.
#
#        ## مثال من هيدي كود
#        ```
#        اسمي هو اسأل 'ما اسمك؟'
#        اذا اسمي هو هيدي قول 'رائع!!' وإلا قول 'يا خسارة!'
#        ```
#
#        في المثال السابق سيتم طباعة رائع!! على الشاشة اذا أجبت على سؤال ما اسمك بكلمة هيدي،  وإلا فسيتم طباعة يا خسارة! اذا أجبت على السؤال بأي اسم اخر.
#
#        يمكننا أن نستخدم الان الأمر `في` لنفحص وجود كلمة ما في قائمة.
#
#        ## مثال من هيدي كود
#        ```
#        الالوان_الجميلة هو أخضر ، أصفر
#        لوني_المفضل هو اسأل 'ما لونك المفضل؟'
#        !!اذا لوني_المفضل في الالوان_الجميلة قول 'هذا جميل!' وإلا قول 'يا خسارة'
#        ```
#        في المثال السابق سيتم طباعة هذا جميل! على الشاشة اذا أجبت على سؤال ما لونك المفضل بواحد من أخضر أو أصفر. اذا جبت أي اجابة أخرى سيتم طباعة يا خسارة!! على الشاشة.
#
#        #نصيحة
#        أحيانا يصبح الكود طويلا عند استخدام الأمر `اذا`. لذلك يمكنك تقسيم الكود على سطرين بحيث يبدأ السطر الثاني مع الأمر `وإلا` كما في المثال التالي:
#        ```
#        اسمي هو اسأل 'ما اسمك؟'
#        اذا اسمي هو هيدي قول 'هذا رائع!'
#        وإلا قول 'يا خسارة!'
#        ```
#        ##المهمات تصبح أكثر صعوبة شيئا فشيئا
#        في المستوى الخامس تصبح المهمات في علامات التبويب أكثر صعوبة شيئا فشيئا لذلك قم بتأديتهم من اليمين الى اليسار
#    commands:
#    -   name: قول
#        explanation: يطبع محتوى ما بين علامات الاقتباس
#        example: "مثال: قول 'اهلا بكم ومرحبا في هيدي'"
#        demo_code: قول 'اهلا بكم ومرحبا في هيدي'
#    -   name: اسأل
#        explanation: اسأل عن شيء ما من خلال الأمر `اسأل`
#        example: "مثال: لوني هو اسأل 'ما لونك المفضل؟'"
#        demo_code: |-
#            لوني هو اسأل 'ما هو لونك المفضل؟'
#            قول لوني 'هو لوني المفضل'
#    -   name: اذا
#        explanation: يمكنك أن تفحص شيئا ما وتختار ما بين خيارين مختلفين من خلال الأمر `اذا`
#        example: "مثال: اذا اللون هو اخضر قول 'هذا جميل' وإلا قول 'لا بأس'"
#        demo_code: |-
#            اللون هو اسأل 'ما لونك المفضل؟'
#            اذا اللون هو اخضر قول 'هذا جميل!' وإلا قول 'لا بأس'
#    -   name: اذا مع turtle
#        explanation: يمكنك أن تفحص شيئا ما وتختار ما بين خيارين مختلفين من خلال الأمر `اذا`
#        example: 'مثلا: اذا الجواب هو كثيرا تقدم 100 وإلا تقدم 5'
#        demo_code: |-
#            الجواب هو اسأل 'كم علي أن أمشي؟'
#            اذا الجواب هو كثيرا تقدم 100 وإلا تقدم 5
#    -   name: في
#        explanation: نستخدم الأمر `في` لنفحص وجود كلمة ما في قائم
#        example: "!مثال: اذا لوني_المفضل في الالوان_الجميلة قول 'هذا جميل!' وإلا قول 'يا خسارة'"
#        demo_code: |-
#            الالوان_الجميلة هو أخضر ، أصفر
#            لوني_المفضل هو اسأل 'ما لونك المفضل؟'
#             اذا لوني_المفضل في الالوان_الجميلة قول 'هذا جميل!' وإلا قول 'يا خسارة!!'
    example_code: "## Example Hedy code\n```\nprint 'You need to use quotation marks from now on!'\nanswer is ask 'What do we need to use from now on?'\nprint 'We need to use ' answer\n```\n"
    intro_text_2: "## Adventures are getting more and more difficult\nThe adventures are now getting more and more difficult in the successive tabs.\nSo it is best to start on the left with the story, and work to the right, in order to be challenged more and more.\n"
5:
    commands:
    -   example: "Example: {print} 'Hello welcome to Hedy.'"
        name: '{print}'
        explanation: print exactly using quotation marks
        demo_code: "{print} 'Hello welcome to Hedy.'"
    -   name: '{ask}'
        explanation: ask something with `{ask}`.
        example: "Example: color {is} {ask} 'What is your favorite color?'"
        demo_code: "color {is} {ask} 'What is your favorite color?'\n{print} color ' {is} your favorite!'"
    -   name: '{if}'
        explanation: Make a choice with `{if}`
        example: "Example: {if} color {is} green {print} 'pretty!' {else} {print} 'meh'"
        demo_code: "color {is} {ask} 'What is your favorite color?'\n{if} color {is} green {print} 'pretty!' {else} {print} 'meh'"
    -   example: 'Example: {if} answer {is} far {forward} 100 {else} {forward} 5'
        demo_code: "answer {is} {ask} 'How far should I walk?'\n{if} answer {is} far {forward} 100 {else} {forward} 5"
        name: '{if} with turtle'
        explanation: Make a choice with `{if}`
    -   name: '{in}'
        explanation: Check elements with `{in}`
        example: "Example: {if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
        demo_code: "pretty_colors {is} green, yellow\ncolor {is} {ask} 'What {is} your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'"
    start_code: "name {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'cool!' {else} {print} 'meh'"
    intro_text: "`{ask}` {and} `{print}` still work like they did in level 4.\n\n In level 5 there is something new, the `{if}`! With the `{if}` you can choose between two different options.\n\n ## Example Hedy Code\n ```\n name {is} {ask} 'what is your name?'\n {if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'\n ```\n\n This code prints nice if you enter Hedy as a name, and boo! if you enter something else.\n\n When we want to check if something is in a list, we can now use `in` between the thing and the list.\n\n ## Example Hedy Code\n ```\n pretty_colors {is} green, yellow\n color {is} {ask} 'What is your favorite color?'\n {if} color {in} pretty_colors {print} 'pretty!' {else} {print} 'meh'\n ```\n\n This code prints pretty! if you choose green or yellow, and meh otherwise.\n\n ## Tip\n Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:\n ```\n name {is} {ask} 'what is your name?'\n {if} name {is} Hedy {print} 'nice'\n {else} {print} 'boo!'\n ```\n\n ## Assignments are getting more {and} more difficult\n\n In level 5 too, the assignments in the tabs become more and more difficult. So, do them from left to right.\n"
    intro_text_2: "Sometimes code with an `{if}` gets really long and does not fit on the line well. <br> You may also divide the code over two lines, starting the second line at the `{else}` like this:\n"
    example_code_2: "```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice'\n{else} {print} 'boo!'\n```\n"
    example_code: "## Example Hedy Code\n```\nname {is} {ask} 'what is your name?'\n{if} name {is} Hedy {print} 'nice' {else} {print} 'boo!'\n```\n"
    intro_text_3: "## Lists\nWhen we want to check if something is in a list, we can now use the `{in}` command.\nThis code prints pretty! if you choose green or yellow, and meh otherwise.\n"
    example_code_3: "```\npretty_colors {is} green, yellow\ncolor {is} {ask} 'What is your favorite color?'\n{if} color {in} pretty_colors {print} 'pretty!'\n{else} {print} 'meh'\n```\n"
12:
    commands:
    -   name: float directly
        explanation: Decimal numbers
        example: '{print} 2.5 + 2.5'
        demo_code: "{print} 'Calculate away!'\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n"
    -   name: assign text
        explanation: Text with quotation marks after =
        example: name = 'Hedy'
        demo_code: "name = 'Hedy the Robot'\n{print} 'Hello ' name\n"
    -   name: quotes after {if} comparison
        explanation: Text with quotation marks after {if}
        example: name = 'Hedy'
        demo_code: "name = {ask} 'Who are you?'\n{if} name = 'Hedy'\n    {print} 'Hi there!'\n"
    -   name: quotes in list
        explanation: A list with quotation marks
        example: name = 'Hedy', 'Felienne'
        demo_code: "superheroes = 'Iron Man', 'Batman', 'Superman'\n{print} superheroes {at} {random}\n"
    start_code: "{print} 'decimal numbers now need to use a dot'\n{print} 2.5 + 2.5"
    intro_text: "## Decimal numbers\nSo far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.\n```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n## All texts need to be in quotation marks\nFor this level on you will also have to use quotation marks when storing a text with `=`:\n\n```\nname = 'Hedy the Robot'\n{print} 'Hello ' name\n```\n## All items in lists need quotation marks too\nLists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.\nThis allows you to save two words as 1 item on the list, for example 'Iron Man'.\n\n```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n## All text after `{if}` comparisons need quotation marks too\n```\nname = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n## Numbers don't need quotation marks\n{for} numbers, you do not use quotation marks in the `=`:\n```\nscore = 25\n{print} 'You got ' score\n```\n"
    example_code: "## Example Hedy code\n```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n"
    intro_text_2: "**All texts need to be in quotation marks**\nFor this level on you will also have to use quotation marks when storing a text with `=`:\n"
    example_code_2: "```\nname = 'Hedy the Robot'\n{print} 'Hello ' name\n```\n"
    intro_text_3: "**All items in lists need quotation marks too**\nLists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.\nThis allows you to save two words as 1 item on the list, for example 'Iron Man'.\n"
    example_code_3: "```\nsuperheroes = 'Spiderman', 'Batman', 'Iron Man'\n{print} superheroes {at} {random}\n```\n"
    intro_text_4: "**All text after `{if}` comparisons need quotation marks too**\n"
    example_code_4: "```\nname = {ask} 'What is your name?'\n{if} name = 'Hedy the Robot'\n    {print} 'Hi there!'\n```\n"
    intro_text_5: "**Numbers don't need quotation marks**\nFor numbers, you do not use quotation marks in the `=`:\n"
    example_code_5: "```\nscore = 25\n{print} 'You got ' score\n```\n"
13:
    commands:
    -   explanation: Two parts both need to be correct
        name: '{and}'
        example: if 3+2 {is} 5 {and} 2+2 {is} 4
        demo_code: "answer1 = {ask} 'What is 3+2?'\nanswer2 = {ask} 'What is 2+2?'\n{if} answer1 {is} 5 {and} answer2 {is} 4\n    {print} 'Both answers are correct!'\nelse\n    {print} 'At least one answer is wrong!'"
    -   name: '{or}'
        explanation: At least 1 of the two parts need to be correct. If both are correct, it is also fine.
        example: if 3+2 {is} 5 {or} 2+2 {is} 4
        demo_code: "answer1 = {ask} 'What is 3+2?'\nanswer2 = {ask} 'What is 2+2?'\n{if} answer1 {is} 5 {or} answer2 {is} 4\n    {print} 'At least one answer is correct!'\nelse\n    {print} 'Both answers are wrong!'"
    start_code: "name = {ask} 'what is your name?'\nage = {ask} 'what is your age?'\n{if} name {is} 'Hedy' {and} age {is} 2\n    {print} 'You are the real Hedy!'"
    intro_text: We are now going to learn `{and}` and `{or}`! If you want to check two statements, you don't have to use two if's but can use `{and}` and `{or}`. If you use `{and}`, both statements, left and right of the `{and}` need to be true. We can also use `{or}`. Then only one statement needs to be correct.
    example_code: "```\nname = ask 'what is your name?'\nage = ask 'what is your age?'\nif name is 'Hedy' and age is 2\n    print 'You are the real Hedy!'\n```\n"
17:
    commands:
    -   explanation: '`{elif}`.'
        example: '{elif} a {is} 5:'
        demo_code: "a = 2\n{if} a == 1:\n    {print} 'a is 1'\n{elif} a == 2:\n    {print} 'a is 2'\n{else}:\n    {print} 'a is not 1 or 2'"
        name: '{elif}'
    -   name: '{print}'
        explanation: When we use a `{for}`, we need to put a `:` behind the `{for}` statement!
        example: 'for i {in} {range} 1 {to} 10:'
        demo_code: "{for} i {in} {range} 1 {to} 12:\n    {print} i\n{print} 'Ready or not, here I come!'"
    -   explanation: We need to do the same with all of our `{if}` statements
        example: if colour {is} green:'
        demo_code: "colour = {ask} 'What is your favorite color?'\n{if} colour == green:\n    {print} 'Your favorite colour is green'\n{else}:\n    {print} 'Your favorite colour is not green'"
        name: '{if}'
    start_code: "{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Ready or not, here I come!'"
    intro_text: "Now we are going to change a little bit with indentation. Every time that we need an indentation, we need `:` at the line before the indentation.\n\nIn this level you can also use a new command: `{elif}`. `{elif}` is short for {else} {if} and you need it when you you want to make 3 (or more!) options.\nCheck it out!\n```\nprices = ['1 million dollars', 'an apple pie', 'nothing']\nyour_price = prices[random]\n{print} 'You win ' your_price\n{if} your_price == '1 million dollars' :\n    {print} 'Yeah! You are rich!'\n{elif} your_price == 'an apple pie' :\n    {print} 'Lovely, an apple pie!'\n{else}:\n    {print} 'Better luck next time..'\n```\n"
8:
    commands:
    -   name: '{print}'
        explanation: print something. Remember to use a quotation mark for literal printing.
        example: "Example: {print} '5 times 5 is ' 5 * 5"
        demo_code: "{print} '5 times 5 is ' 5 * 5"
    -   name: '{ask}'
        explanation: ask for the answer to a sum and check if it is correct. We can now print 2 lines.
        example: "Example: answer {is} {ask} 'What is 5 plus 5?'"
        demo_code: "answer = {ask} 'What is 5 plus 5?'\n{if} answer {is} 10\n    {print} 'Well done!'\n    {print} 'Indeed, the answer was ' answer\nelse\n    {print} 'Oops!'\n    {print} 'The answer is 10'"
    -   name: '`{repeat}` with turtle'
        explanation: '{repeat} multiple lines'
        example: 'Example: draw a square'
        demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
    start_code: "{repeat} 5 {times}\n    {print} 'Hello folks'\n    {print} 'This will be printed 5 times'"
    intro_text: "`{ask}` {and} `{print}` still work as you know them. But `{if}` {and} `{repeat}` have changed!\nYou can now execute groups of code together, but you will have to *indent* the code.\nThat means putting four spaces at the beginning of the line. You will also have to indent when you just want to create a block of one line.\n\n## Example Hedy code\n```\n{repeat} 5 {times}\n    {print} 'Hello everyone'\n    {print} 'This is all repeated 5 times'\n```\n"
    example_code: "## Example Hedy code\n```\n{repeat} 5 {times}\n    {print} 'Hello everyone'\n    {print} 'This is all repeated 5 times'\n```\n"
9:
    commands:
    -   name: '`{if}` with multiple lines'
        explanation: The answer of a sum of questions with '{ask}' and see if it is correct. Now we print out two lines.
        example: "Example: answer = {ask} 'What is 20 plus 20?'"
        demo_code: "answer = {ask} 'What is 20 plus 20?'\n{if} answer {is} 20\n    {print} 'Well done!!'\n    {print} 'The answer is indeed' answer\nelse\n    {print} 'Wrong'\n    {print} 'The answer is 20'"
    -   name: '`{repeat}` and turtle'
        explanation: '{repeat} multiple lines'
        example: 'Example: create a square'
        demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
    start_code: "{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} 'pizza'\n        {print} 'nice!'\n    else\n        {print} 'pizza is better'"
    intro_text: "In this level you can not only use multiple lines with `{if}` {and} `{repeat}`, but you can also put them together!\nIn the example you see an `{if}` command within a `{repeat}` command. It is also allowed the other way around, and an `{if}` is also allowed in an `{if}` and a `{repeat}` in a `{repeat}`.\nGive it a try!\n\n## Example Hedy code\n```\n{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} 'pizza'\n        {print} 'nice!'\n    else\n        {print} 'pizza is better'\n```\n"
    example_code: "## Example Hedy code\n```\n{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    else\n        {print} 'pizza is better'\n```\n"
14:
    commands:
    -   name: Smaller
        explanation: We use the `<` to check if the first number is smaller than the second number.
        example: 'For example: age < 12'
        demo_code: "age = {ask} 'How old are you?'\n{if} age < 13\n    {print} 'You are younger than me!'"
    -   name: Bigger
        explanation: We use the `>` to check if the first number is bigger than the second number.
        example: 'For example: age > 12'
        demo_code: "age = {ask} 'How old are you?'\n{if} age > 13\n    {print} 'You are older than me!'"
    -   name: Equal
        explanation: We use the `==` to check if two things are the same.
        example: 'For example: answer == 25'
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer == 25\n    {print} 'That {is} correct!'"
    -   example: 'For example: answer != 25'
        name: Not equal
        explanation: 'We use the `!=` to check if two things are not the same. '
        demo_code: "answer = {ask} 'What is 5 * 5?'\n{if} answer != 25\n    {print} 'That is not correct!'"
    -   example: 'For example: age <= 12'
        explanation: We use the `<=` to check if the first number is smaller than or equal to the second number.
        name: Smaller {or} equal
        demo_code: "age = {ask} 'How old are you?'\n{if} age <= 12\n    {print} 'You are younger than me!'"
    -   name: Bigger or equal
        explanation: We use the `>=` to check if the first number is bigger than or equal to the second number.
        example: 'For example: age >= 14'
        demo_code: "age = {ask} 'How old are you?'\n{if} age >= 14\n    {print} 'You are older than me!'"
    intro_text: "We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.\nThe `<` checks if the first number is smaller than the second, for example `age < 12` checks if `age` {is} smaller than 12.\nIf you want to check if the first number is smaller or equal to the second, you can use `<=`, for example `age <= 11`.\nThe `>` checks if the first number is bigger than the second, for example `points > 10` checks if `points` is larger than 10.\nIf you want to check if the first number is bigger or equal to the second, you can use `>=`, for example `points >= 11`.\nYou use these comparisons in an `{if}`, like this:\n```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n\nFrom this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:\n```\nname = {ask} 'What is your name?'\n{if} name == 'Hedy'\n    {print} 'You are coo!'\n```\n\nYou can also compare if something is *not* equal to something else using `!=` like this:\n```\nname = {ask} 'What is your name?'\n{if} name != 'Hedy'\n    {print} 'You are not Hedy'\n```\n"
    start_code: "age = {ask} 'How old are you?'\n{if} age < 13\n    {print} 'You are younger than me!'\nelse\n    {print} 'You are older than me!'"
    example_code: "## Example Hedy Code\n```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n"
    intro_text_2: "From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:\n"
    example_code_2: "```\nname = {ask} 'What is your name?'\n{if} name == 'Hedy'\n    {print} 'You are coo!'\n```\n"
    intro_text_3: "You can also compare if something is *not* equal to something else using `!=` like this:\n"
    example_code_3: "```\nname = {ask} 'What is your name?'\n{if} name != 'Hedy'\n    {print} 'You are not Hedy'\n```\n"
15:
    commands:
    -   name: '{while}'
        explanation: We can use the `{while}` loop with not equal
        example: 'Example: {while} correct_answer != 25'
        demo_code: "answer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'"
    -   name: Smaller {while}
        explanation: 'We can also use the `{while}` loop with `<` and `>`. '
        example: 'For example: {while} count < 3'
        demo_code: "count = 1\n{while} count < 3\n    {print} 'We do this ' 3 - count ' more times'\n    count = count + 1\n{print} 'We are done'"
    intro_text: "We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.\nSo don't forget to change the value in the loop.\n\nIn the example code, we continue until a correct answer has been given.\nIf the correct answer is never given, the loop never ends!\n"
    start_code: "answer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'"
    example_code: "## Example Hedy code\n```\nanswer = 0\nwhile answer != 25\n    answer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n```\n"
16:
    commands:
    -   example: "For example: fruit = ['apple', 'banana', 'cherry']"
        explanation: Lists with square brackets
        demo_code: "fruit = ['apple', 'banana', 'cherry']\n{print} fruit"
        name: square brackets
    -   name: Get an item from a list
        example: 'For example: firstfruit = fruit[1]'
        explanation: To get an item from a list we use [number] so fruit[1] means, get the first fruit from the list!
        demo_code: "fruit = ['banana', 'apple', 'cherry']\nfirstfruit = fruit[1]\n{print} firstfruit"
    -   name: Get a random item from a list
        explanation: To get a random item from a list we use [random] so fruit[random] means, get a random fruit from the list!
        example: 'For example: random_fruit {is} fruit[random]'
        demo_code: "fruit = ['banana', 'apple', 'cherry']\nrandom_fruit = fruit[random]\n{print} random_fruit"
    start_code: "fruit = ['apple', 'banana', 'cherry']\n{print} fruit"
    intro_text: "We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.\nYou can use the square brackets as well to point out a place in the lists.\n\n```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
    example_code: "## Example Hedy Code\n```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
6:
    start_code: "{print} '5 times 5 is ' 5 * 5"
    intro_text: "`{ask}`, `{print}` and `{if}` still work as in level 5.\n But in level 6 you learn something new: you can now also calculate.\n\n The plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.\n\n The {times} is a bit different, because there is no {times} symbol on your keyboard. Just search, there really isn't!\n That is why we multiply with the asterisk above 8: `5 * 5`. Read that as \"5 times 5\" that helps you remember it best.\n\n ## Example Hedy code\n ```\n {print} '5 plus 5 is ' 5 + 5\n {print} '5 minus 5 is ' 5 - 5\n {print} '5 {times} 5 is ' 5 * 5\n ```\n\n We also make a change in storing! You may now use `=` instead of  `{is}` when we store a name or a number, like this:\n\n ```\n name = Hedy\n answer = 20 + 4\n ```\n"
    commands:
    -   explanation: print exactly using quotation marks
        example: "Example: {print} '5 times 5 is ' 5 * 5"
        demo_code: "{print} '5 times 5 is ' 5 * 5"
        name: '{print}'
    -   name: '{ask}'
        demo_code: "answer = {ask} 'What is 10 plus 10?'\n{if} answer {is} 20 {print} 'Yes!' {else} {print} 'Oops'"
        explanation: '{ask} for a calculation and check whether it is correct.'
        example: "Example: answer {is} {ask} 'What is 10 plus 10?'"
    -   name: '`{ask}` {and} `{if}` turtle'
        explanation: '{ask} the user how many angles they want'
        example: "Example: angles {is} {ask} 'How many angles?'"
        demo_code: "angles = {ask} 'How many angles?'\nangle = 360 / angles\n{forward} 50"
    example_code: "## Example Hedy code\n```\n{print} '5 plus 5 is ' 5 + 5\n{print} '5 minus 5 is ' 5 - 5\n{print} '5 {times} 5 is ' 5 * 5\n```\n"
    intro_text_2: "We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:\n"
    example_code_2: "```\nname = Hedy\nanswer = 20 + 4\n```\n"
7:
    start_code: "{repeat} 3 {times} {print} 'Hedy is fun!'"
    intro_text: "`{ask}`, `{print}` {and} `{if}` work exactly like they did in level 5 and 6.\nBut level 7 adds the `{repeat}` command. {repeat} can be used to execute one line of code multiple times.\n## Example Hedy code\n```\n{repeat} 3 {times} {print} 'Hedy {is} fun!'\n```\n"
    commands:
    -   example: "Example: {print} 'Hello welcome to Hedy.'"
        demo_code: "{print} 'Hello welcome to Hedy.'"
        explanation: print exactly using quotation marks
        name: '{print}'
    -   name: '{ask}'
        explanation: ask something with `{ask}`.
        demo_code: "color = {ask} 'What is your favorite color?'\n{print} color ' is your favorite!'"
        example: "Example: color = {ask} 'What is your favorite color?'"
    -   example: "Example: {if} color {is} green {print} 'pretty!' {else} {print} 'meh'"
        demo_code: "color = {ask} 'What is your favorite color?'\n{if} color {is} green {print} 'pretty!' {else} {print} 'meh'"
        name: '{if}'
        explanation: Make a choice with `{if}`
    -   name: '{repeat} - turtle'
        explanation: repeat a line of code with `{repeat}`.
        example: 'Example: {repeat} 3 {times} {forward} 10'
        demo_code: '{repeat} 3 {times} {forward} 10'
    example_code: "## Example Hedy code\n```\n{repeat} 3 {times} {print} 'Hedy {is} fun!'\n```\n"
10:
    intro_text: "In this level we learn a new code called `{for}`. With `{for}` you can make a list and use all elements.\n`{for}` creates a block, like `{repeat}` and `{if}` so all lines in the block need to start with spaces.\n\n## Example Hedy code\n```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal\n```\n"
    commands:
    -   name: '{print}'
        explanation: print something. Remember to use a quotation mark for literal printing.
        example: "Example: {print} '5 times 5 is ' 5 * 5"
        demo_code: "{print} '5 times 5 is ' 5 * 5"
    -   name: '{for} with a list'
        explanation: 'print all things in a list '
        example: 'Example: {for} animal {in} animals'
        demo_code: "animals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal"
    start_code: "animals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal"
    example_code: "## Example Hedy code\n```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal\n```\n"
11:
    intro_text: '`{print}` works just the same but the we add a new form of the `{for}`. You can now write `{for} counter {in} {range} 1 {to} 5` and use `counter` in your program. Try it out to see what happens! Remember to use indentations after the `{for}` and `{if}` statements (That means starting a sentence with four spaces)'
    commands:
    -   name: '{for} loop'
        explanation: We can use `{for}` with a {range}
        example: for counter {in} {range} 1 {to} 5
        demo_code: "{for} counter {in} {range} 1 {to} 5\n    {print} counter"
    -   name: '{ask}'
        explanation: ask for the answer to a sum and check if it is correct. We can now print 2 lines.
        example: "Example: answer = {ask} 'What is 5 plus 5?'"
        demo_code: "answer = {ask} 'What is 5 plus 5?'\n{if} answer {is} 10\n    {print} 'Well done!'\n    {print} 'Indeed, the answer was ' answer\nelse\n    {print} 'Oops!'\n    {print} 'The answer is 10'"
    start_code: "{for} counter {in} {range} 1 {to} 5\n    {print} counter"
    example_code: "## Example Hedy code\n```\nfor counter in range 1 to 5\n    print counter\n```\n"
18:
    start_code: "naam = 'Hedy'\n{print}('My name is ', naam)"
    intro_text: "We arrived at real pythoncode! That means we need to use parentheses with {print} and {range} from now on.\nThat looks like this:\n```\n{print}('my name is Hedy!')\n```\nIf you want to print more thant one items, you need to separate them by commas.\n```\nnaam = 'Hedy'\n{print}('my name is ', naam)\n```"
    commands:
    -   name: '{print}'
        explanation: With `{print}` you need to use parentheses
        example: '{print}'
        demo_code: "{print}('hi!')"
    -   name: '{print} with var'
        explanation: With `{print}` you need to use parentheses and commas if you {print} more items
        example: '{print}'
        demo_code: "naam = 'Hedy'\n{print}('my name is ', naam)"
