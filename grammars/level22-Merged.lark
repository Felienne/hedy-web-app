%import common.CNAME -> NAME
%import common.DIGIT
%import common.LETTER
%import common.NEWLINE
%import common.SIGNED_INT -> NUMBER
%import common.WS_INLINE
?atom: NUMBER | var | NAME | list_access
?product: atom | product _SPACE* _MULTIPLY _SPACE* atom -> multiplication | product _SPACE* _DIVIDE _SPACE* atom -> division
?sum: product | sum _SPACE* _ADD _SPACE* product -> addition | sum _SPACE* _SUBTRACT _SPACE* product -> substraction
PUNCTUATION: "!" | "?" | "." //uppercase places tokens in tree
_ADD: "+"
_AND: "and"
_ASK : "ask"
_AT: "at"
_COLON: ":"
_COMMA: ","
_DIVIDE: "/"
_ECHO : "echo"
_ELIF: "elif"
_ELSE: "else"
_EOL: "\r"?"\n"
_FOR: "for"
_IF: "if"
_IN: "in"
_INPUT: "input"
_IS: "is"
_LEFT_BRACKET : "("
_LEFT_SQUARE_BRACKET : "["
_MULTIPLY: "*"
_PRINT : "print"
_RANGE: "range"
_REPEAT: "repeat"
_RIGHT_BRACKET : ")"
_RIGHT_SQUARE_BRACKET : "]"
_SPACE: " "
_STEP: "step"
_SUBTRACT: "-"
_TIMES: "times"
_TO: "to"
andcondition: (equality_check|in_list_check) (" and " condition)*
ask: var _SPACE _IS _SPACE _ASK _SPACE textwithspaces*
assign: var " = " length | var " = " sum | var " = " textwithoutspaces | list_access " = " sum | list_access " = " textwithoutspaces
assign_list: var " = [" quoted_text ((", "|",") quoted_text)+ "]"
bigger: (textwithoutspaces | list_access | length) " > " (textwithoutspaces | list_access | length)
bigger_equal: (textwithoutspaces | list_access | length) " >= " (textwithoutspaces | list_access | length)
change_list_item: var "[" (index | var) "] = " (var | textwithoutspaces)
command: print | ifs (elifs)* elses? | input | for_loop | while_loop | assign_list | list_access_var | change_list_item| comment | assign
comment: "#" (textwithspaces)*
condition: (equality_check|in_list_check|smaller|bigger|not_equal|smaller_equal|bigger_equal)
echo: _ECHO (_SPACE text)?
elifs: _EOL (" ")* "elif " (condition|andcondition|orcondition) ":"_EOL (" "+ command) (_EOL " "+ command)* _EOL "end-block"
elses: _EOL _SPACE* _ELSE _COLON _EOL (_SPACE+ command) (_EOL _SPACE+ command)* _EOL "end-block"
equality_check: (length | textwithoutspaces | list_access | sum) " == " (length | textwithoutspaces | list_access | sum)
for_loop: "for " (NAME | var) " in " "range(" (NUMBER | var | length)(", "|",") (NUMBER | var | length) "):" _EOL (" "+ command) (_EOL " "+ command)* _EOL "end-block"
ifelse: _IF _SPACE condition _SPACE command _SPACE _ELSE _SPACE command
ifs: "if " (condition|andcondition|orcondition) ":" _EOL (" "+ command) (_EOL " "+ command)* _EOL "end-block" //'if' cannot be used in Python, hence the name of the rule is 'ifs'
in_list_check: textwithoutspaces _SPACE _IN _SPACE var
index : NUMBER //todo FH-June 21 : why does this need its own rule? can't it just be a token
input: var " = input("  (quoted_text | list_access | var | sum | length) (" " (quoted_text | list_access | var | sum | length))*  ")"
invalid: textwithoutspaces _SPACE textwithspaces
invalid_space: _SPACE+ text
length: "length(" var ")"
list_access: var "[" (index | random | var | length) "]"
list_access_var: var " = " var "[" (index | random | var) "]"
not_equal: (length | textwithoutspaces | list_access) " != " (length | textwithoutspaces | list_access)
orcondition: (equality_check|in_list_check) (" or " condition)*
print: "print(" (quoted_text | list_access | var | sum | length) (" " (quoted_text | list_access | var | sum | length))* ")"
print_no_quotes: _PRINT _SPACE (textwithoutspaces | list_access | var) (_SPACE (textwithoutspaces | list_access | var))*  -> print_nq
program: _EOL* command (_SPACE)* (_EOL+ command (_SPACE)*)* _EOL* //lines may end on spaces and might be separated by many newlines
punctuation : PUNCTUATION -> punctuation
quoted_text: /'((?:[^\\']|\\.)*)'/ -> text //text can be between single quotes, but quotes may be escaped with \
quoted_text_no_escape: /'([^']*)'/ -> text //simply all between quotes should this be used at earlier levels?
random : "random"
repeat: _REPEAT _SPACE (NUMBER | var) _SPACE _TIMES _EOL (_SPACE+ command) (_EOL _SPACE+ command)*
smaller: (textwithoutspaces | list_access | length) " < " (textwithoutspaces | list_access | length)
smaller_equal: (textwithoutspaces | list_access | length) " <= " (textwithoutspaces | list_access | length)
start: program
text: /([^\n,]+)/ -> text
textwithoutspaces: /([^\n, :*+-\/]+)/ -> text
textwithspaces: /([^\n,]+)/ -> text //anything can be parsed except for a newline and a comma for list separators
var: NAME -> var
while_loop: "while " (condition|andcondition|orcondition) ":" _EOL (" "+ command) (_EOL " "+ command)* _EOL "end-block"