_print_argument: (_SPACE | quoted_text | list_access | var_access | sum)*

command:+= ask | list_access_var | assign -= ask | list_access | list_access_var | assign

//splitting  these commands into two rules, one for equals and one for is so they can be properly handled in the translator
ask: var (_SPACE _IS _SPACE | _EQUALS) _ASK (_SPACE _print_argument)?

equality_check: textwithoutspaces (_SPACE _IS _SPACE | _EQUALS) (textwithoutspaces | quoted_text)

condition:+= equality_check -= equality_check

list_access_var: var (_SPACE _IS _SPACE | _EQUALS) var _SPACE _AT _SPACE (INT | random)
assign_list: var (_SPACE _IS _SPACE | _EQUALS) textwithspaces (_COMMA textwithspaces)+
assign: var (_SPACE _IS _SPACE | _EQUALS) sum | var (_SPACE _IS _SPACE | _EQUALS) textwithoutspaces

?sum: product | sum _ADD product -> addition | sum _SUBTRACT product -> subtraction
?product: atom | product _MULTIPLY atom -> multiplication | product _DIVIDE atom -> division
?atom: INT | var_access | error_unsupported_number //TODO: means we cannot assign strings with spaces? would we want that?
error_unsupported_number: /([-+]?(\d+[\.,]\d+))/ -> error_unsupported_number

textwithoutspaces: /(?:[^\nØŒ, *+\-\/ei]|e(?!lse)|i(?!f))+/ -> text //new cause in level 6 calculation elements need to be escaped too
