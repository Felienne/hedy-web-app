%import common.CNAME -> NAME
%import common.DIGIT
%import common.LETTER
%import common.NEWLINE
%import common.SIGNED_INT -> NUMBER
%import common.WS_INLINE
PUNCTUATION: "!" | "?" | "." //uppercase places tokens in tree
_ASK : "ask"
_COMMA: ","
_ECHO : "echo"
_EOL: "\r"?"\n"
_IS: "is"
_PRINT : "print"
_SPACE: " "
ask: var _SPACE+ _IS _SPACE _ASK _SPACE + (_SPACE | text | punctuation)*
assign: var _SPACE _IS _SPACE text -> assign
assign_list: var _SPACE _IS _SPACE text ((_COMMA _SPACE|_COMMA) text)+
command: print | ask | assign_list | assign | print_no_quotes | invalid //catch all at the end
echo: _ECHO (_SPACE text)?
index : NUMBER //different why?
invalid: textwithoutspaces text?
invalid_space: _SPACE+ text
list_access: var " at " (index | random) -> list_access //todo: could be merged with list_access_var?
print: "print " (" "| list_access | quoted_text | var)*  -> print
print_no_quotes: "print " (" "| list_access | textwithoutspaces | punctuation)*  -> print_nq
program: _EOL* command (" ")* (_EOL+ command (" ")*)* _EOL* //lines may end on spaces and might be separated by many newlines
punctuation : PUNCTUATION -> punctuation
quoted_text: /'((?:[^\\']|\\.)*)'/ -> text //text can be between single quotes, but quotes may be escaped with \
quoted_text_no_escape: /'([^']*)'/ -> text //simply all between quotes should this be used at earlier levels?
random : "random"
start: program
text: /([^\n,]+)/ -> text //anything can be parsed except for a newline and a comma for list separators
textwithoutspaces: /([^\r\n,!?. *+-\/]+)/ -> text //anything can be parsed except for spaces (plus: a newline and a comma for list separators)
var: NAME -> var