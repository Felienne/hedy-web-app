command_skipping_disabled:+= for_loop | call | error_nested_define
command_skipping_enabled:+= for_loop | call | error_nested_define > error_invalid

//new : for loop
for_loop: _FOR var _IN _RANGE (INT | var_access) _TO (INT | var_access) _EOL (_SPACE command) (_EOL _SPACE command)*  _EOL? _END_BLOCK

// FUNCTIONS ======================================== =============================
// check line 1: command:+= call | define
_non_empty_program_skipping_disabled: _EOL* (define | command | error_invalid) _SPACE* (_EOL+ (define | command) _SPACE*)* _EOL* //lines may end on spaces and might be separated by many newlines
_non_empty_program_skipping_enabled: _EOL* (define | command) _SPACE* (_EOL+ (define | command) _SPACE*)* _EOL*

define: _DEFINE function_name _EOL (_SPACE command) (_EOL _SPACE command)* _EOL? _END_BLOCK
call: _CALL function_name
function_name: NAME -> text
error_nested_define: define
// ================================================================================
