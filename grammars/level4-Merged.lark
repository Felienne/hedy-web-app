%import common.CNAME -> NAME
%import common.DIGIT
%import common.LETTER
%import common.NEWLINE
%import common.SIGNED_INT -> NUMBER
%import common.WS_INLINE
PUNCTUATION: "!" | "?" | "." //uppercase places tokens in tree
_ASK : "ask"
_COMMA: ","
_ECHO : "echo"
_EOL: "\r"?"\n"
_IS: "is"
_PRINT : "print"
_SPACE: " "
ask: var " is ask " textwithspaces*
assign: var " is " textwithspaces
assign_list: var " is " textwithspaces ((", "|",") textwithspaces)+
command: print | ifelse | ifs | ask | assign_list | list_access_var | assign | print_no_quotes
condition: (equality_check|in_list_check) (" and " condition)*
echo: _ECHO (_SPACE text)?
equality_check: textwithoutspaces " is " textwithoutspaces
ifelse: "if " condition " " command " else " command
ifs: "if " condition " " command //'if' cannot be used in Python, hence the name of the rule is 'ifs'
in_list_check: textwithoutspaces " in " var
index : NUMBER //different why?
invalid: textwithoutspaces " " textwithspaces
invalid_space: _SPACE+ text
list_access: var " at " (index | random) -> list_access //todo: could be merged with list_access_var?
list_access_var: var " is " var " at " (index | random)
print: "print " (quoted_text | list_access | var) (" " (quoted_text | list_access | var))*
print_no_quotes: "print " (textwithoutspaces | list_access | var) (" " (textwithoutspaces | list_access | var))*  -> print_nq
program: _EOL* (command | invalid) (" ")* (_EOL+ (command | invalid) (" ")*)* _EOL* //lines may end on spaces and might be separated by many newlines
punctuation : PUNCTUATION -> punctuation
quoted_text: /'((?:[^\\']|\\.)*)'/ -> text //text can be between single quotes, but quotes may be escaped with \
quoted_text_no_escape: /'([^']*)'/ -> text //simply all between quotes should this be used at earlier levels?
random : "random"
start: program
text: /([^\n,]+)/ -> text //anything can be parsed except for a newline and a comma for list separators
textwithoutspaces: /([^\n, ]+)/ -> text //anything can be parsed except for spaces (plus: a newline and a comma for list separators)
textwithspaces: /([^\n,]+)/ -> text //anything can be parsed except for a newline and a comma for list separators
var: NAME -> var