command:+= assign_list | add | remove | error_add_missing_to | error_remove_missing_from >> error_invalid
_print_ask_argument: (_SPACE | (list_access textwithoutspaces?) | textwithoutspaces)*

assign: var _IS (list_access | text) -> assign
assign_list: var _IS text_list (_COMMA text_list)+
play: _PLAY (list_access | textwithoutspaces)

list_access: var_access _AT (INT | random)
turtle: _FORWARD ((NUMBER | list_access | textwithoutspaces))? -> forward | _TURN ((NUMBER | list_access | textwithoutspaces))? -> turn | _COLOR (_color_literal | list_access | textwithoutspaces)? -> color

sleep: _SLEEP (INT | list_access | var_access)?
// lists are introduced and list separators (comma and arabic comma) have to excluded from text.
text: /([^\n،,，、#]+)/ -> text
text_list: /([^\n,،，、#]+)/ -> text // list elements are another exception since they can contain punctuation but not list separators

// Values which are added or removed from lists can contain spaces, so we need to escape the 'to_list' and 'from' keywords
// The part " (?!<expand_keyword to_list>|<expand_keyword from>)" will be processed to a space with a negative look ahead of all to_list and from values
// It means that a space cannot be not followed by a 'to' or 'from' for the given language
text_add_remove_list: /(?:[^\n,،，、# ]| (?!<expand_keyword to_list>|<expand_keyword from>))+/ -> text

add: _ADD_LIST text_add_remove_list _TO_LIST var_access
remove: _REMOVE text_add_remove_list _FROM var_access
error_add_missing_to: _ADD_LIST var_access
error_remove_missing_from: _REMOVE var_access
