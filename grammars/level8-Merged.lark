%import common.CNAME -> NAME
%import common.DIGIT
%import common.LETTER
%import common.NEWLINE
%import common.SIGNED_INT -> NUMBER
%import common.WS_INLINE
?atom: NUMBER | var //TODO: means we cannot assign strings with spaces? would we want that?
?product: atom | product " "* "*" " "* atom -> multiplication | product " "* "/" " "* atom -> division
?sum: product | sum " "* "+" " "* product -> addition | sum " "* "-" " "* product -> substraction
PUNCTUATION: "!" | "?" | "." //uppercase places tokens in tree
_AND: "and"
_ASK : "ask"
_AT: "at"
_COMMA: ","
_ECHO : "echo"
_ELSE: "else"
_EOL: "\r"?"\n"
_IF: "if"
_IN: "in"
_IS: "is"
_PRINT : "print"
_SPACE: " "
ask: var _SPACE _IS _SPACE _ASK _SPACE textwithspaces*
assign: var " is " sum | var " is " textwithoutspaces
assign_list: var _SPACE _IS _SPACE textwithspaces (("," _SPACE |",") textwithspaces)+
command: print | ifs elses? | ask | for_loop | assign_list | list_access_var | assign
condition: (equality_check|in_list_check) (_SPACE _AND _SPACE condition)*
echo: _ECHO (_SPACE text)?
elses: _EOL (" ")* "else" _EOL (" "+ command) (_EOL " "+ command)* _EOL "end-block"
equality_check: textwithoutspaces _SPACE _IS _SPACE textwithoutspaces
for_loop: "for " (NAME | var) " in " "range " (NUMBER | var) " to " (NUMBER | var) (" step " (NUMBER | var))? _EOL (" "+ command) (_EOL " "+ command)* _EOL "end-block"
ifelse: _IF _SPACE condition _SPACE command _SPACE _ELSE _SPACE command
ifs: "if " condition _EOL (" "+ command) (_EOL " "+ command)* _EOL "end-block" //'if' cannot be used in Python, hence the name of the rule is 'ifs'
in_list_check: textwithoutspaces _SPACE _IN _SPACE var
index : NUMBER //todo FH-June 21 : why does this need its own rule? can't it just be a token
invalid: textwithoutspaces _SPACE textwithspaces
invalid_space: _SPACE+ text
list_access: var " at " (index | random) -> list_access //todo: could be merged with list_access_var?
list_access_var: var _SPACE _IS _SPACE var _SPACE _AT _SPACE (index | random)
print: "print " (quoted_text | list_access | var | sum) (" " (quoted_text | list_access | var | sum))*
print_no_quotes: _PRINT _SPACE (textwithoutspaces | list_access | var) (_SPACE (textwithoutspaces | list_access | var))*  -> print_nq
program: _EOL* command (" ")* (_EOL+ command (" ")*)* _EOL* //lines may end on spaces and might be separated by many newlines
punctuation : PUNCTUATION -> punctuation
quoted_text: /'((?:[^\\']|\\.)*)'/ -> text //text can be between single quotes, but quotes may be escaped with \
quoted_text_no_escape: /'([^']*)'/ -> text //simply all between quotes should this be used at earlier levels?
random : "random"
repeat: "repeat " (NUMBER | var) " times" _EOL (" "+ command) (_EOL " "+ command)*
start: program
text: /([^\n,]+)/ -> text
textwithoutspaces: /([^\n, *+-\/]+)/ -> text //new cause in level 6 calculation elements ned to be escaped too
textwithspaces: /([^\n,]+)/ -> text //anything can be parsed except for a newline and a comma for list separators
var: NAME -> var