#!/bin/bash
#Takes the keywords from coursedata/keywords/'lang'.yaml and creates a syntaxLang-'lang'.ts file for that language
#How to use: add the argument for which language you want when using the script, e.g. 'generate-syntax-keywords en' for english
#Note that for the highlighter to work you will still need to import syntaxLang-'lang'.ts in index.ts and app.ts

set -eu
root=$(cd $(dirname $0)/../.. && pwd)

cd $root

#This line mainly exists in order to ensure the file is overwritten instead of being appended to
echo "//Generated through generate-syntax-keywords
const LANG_"$1 "= {" > static/js/syntaxLang-$1.ts

#Searches for the keywords in the yaml files and writes them to the highlighter with the correct syntax
regex='(.\S*): ((\w| \w)*)'
if [ $1 == 'en' ]
then
    cat ./coursedata/keywords/en.yaml | while read line; do
        [[ "$line" =~ $regex ]]
        echo ${line/${BASH_REMATCH[0]}/_${BASH_REMATCH[1]^^}:\'${BASH_REMATCH[2]}\',} >> static/js/syntaxLang-$1.ts
    done
else
    linenr=0
    cat ./coursedata/keywords/$1.yaml | while read line; do
        [[ "$line" =~ $regex ]]
        newline=${line/${BASH_REMATCH[0]}/_${BASH_REMATCH[1]^^}:\'(?:${BASH_REMATCH[2]}\|}
        #searches for the correct line in en.yaml, parses and appends the english keywords, then finishes the sentence
        linenr=$(( linenr+1 ))
        engline=$(sed "${linenr}q;d" ./coursedata/keywords/en.yaml)
        [[ "$engline" =~ $regex ]]
        newline="${newline}${BASH_REMATCH[2]})',"
        echo ${newline}>> static/js/syntaxLang-$1.ts
    done
fi

echo "}" >> static/js/syntaxLang-$1.ts